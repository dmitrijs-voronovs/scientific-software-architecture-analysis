quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,RooFit::MultiProcess & TestStatistics part 5b: test RooGradMinimizerFcn,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8694:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/8694,2,"['Test', 'test']","['TestStatistics', 'test']"
Testability,RooFit::MultiProcess & TestStatistics part 6: add RooFit::TestStatistics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/8700,2,['Test'],['TestStatistics']
Testability,RooFit::MultiProcess & TestStatistics part 7: MultiProcess based TestStatistics classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9349:23,Test,TestStatistics,23,https://root.cern,https://github.com/root-project/root/pull/9349,2,['Test'],['TestStatistics']
Testability,"RooFitZMQ includes an extension of ZeroMQ itself: a ppoll function. This function should ideally be contributed to ZeroMQ, but I have had no time for this. The motivation behind ppoll is given in this [blog post](https://blog.esciencecenter.nl/combining-zeromq-posix-signals-b754f6f29cd6).; - At the last moment, I decided to reimplement part of the Queue functionality. The task distribution and parameter updating functionalities are now done directly using appropriate ZeroMQ sockets instead of indirectly through the Queue. The old-style Queue functionality, however, has not been cleaned up yet. Doing so will clean up the ""plumbing"" of the MultiProcess functions quite a bit.; - Benchmarking and optimization still has to be done for this version as well. The scaling results of the proof of concept (see references above) should be reproducible with this reimplementation, but this possibly still needs some tuning.; - After the most recent merging in of master, the RooGradMinimizer tests no longer pass, because the numbers are no longer floating point exactly the same. We have not looked into why, but one possible source is the reworked Kahan summation class. This was applied in RooMinimizerFcn, but not yet in our external-gradient classes.; - The proof-of-concept version classes are also still present in the source tree (`roofitcore/MultiProcess`), but have only been partially maintained since we started with the final version. Probably the best thing to do there is to remove that, but maybe people disagree and want to keep it for comparison while benchmarking and reproducing the results of the proof-of-concept benchmarks. Note: BidirMMapPipe is in there as well, since it was moved there. This class is used in the RooRealMPFE event-based parallelization method that was present already before I started. `RooGaussMinimizerFcn` and `RooTaskSpec` were also part of our proof-of-concept exploration work.; - Similarly, there is some left-over code from benchmarks that is probabl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:5788,test,tests,5788,https://root.cern,https://github.com/root-project/root/pull/8294,1,['test'],['tests']
Testability,"Roofit was using TInterpreter::Next, which was actually calling; TClingTypedefInfo::InternalNext. This function is iterating each decls; and is not efficient. Measured performance of this patch on stressRooFit; testcase and it didn't have a significant different but not making roofit; slower as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1713:211,test,testcase,211,https://root.cern,https://github.com/root-project/root/pull/1713,2,['test'],['testcase']
Testability,"Root has two different ways to configure the build - the traditional configure script and cmake. The builds generated by the two systems are similar, but far from equivalent. Historically the configure script has been more feature complete and some things that the configure script is able to do are either missing or broken in the cmake build. However, new features are often only added to the cmake build. This has resulted in that today neither of the two is able to build root with a complete set of features. The cmake build is more standard and behaves in a more predictive way, e.g. it understands CFLAGS, LDFLAGS and friends which the configure script never did. It also integrates the test suite in the build and allows for running ""make test"", a feature that the configure script is missing. So the cmake build is in many ways better, if it wasn't for those missing and broken things mentioned earlier. This pull request is an attempt to address those missing and broken issues (though it fixes a few things for the configure script as well). Also contains a fix for ROOT-7326.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/153:694,test,test,694,https://root.cern,https://github.com/root-project/root/pull/153,2,['test'],['test']
Testability,"Root_x86 failed to run ""roottest-cling-exception-nullderef-e test on release and debug configuration with MSVC on windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9742:61,test,test,61,https://root.cern,https://github.com/root-project/root/issues/9742,1,['test'],['test']
Testability,Run GL tests also in batch mode.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/556:7,test,tests,7,https://root.cern,https://github.com/root-project/root/pull/556,1,['test'],['tests']
Testability,"Run a first round of CI for the new RooFit feature. As it is an opt-in feature, the first round should mainly test that it doesn't break anything.; Several tests where batch evaluations are switched on are coming soon.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4283:110,test,test,110,https://root.cern,https://github.com/root-project/root/pull/4283,2,['test'],"['test', 'tests']"
Testability,"RunGraphs makes a summary log entry for the jitting time of all computation graphs that are being run concurrently. Generally this is ok, but in the case users specifically requested a log level of kDebug+10 or higher this would accidentally silence the logging of what code is being jitted.; With this patch, if log level is kDebug+10 or higher, RunGraphs avoids silencing inner logs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11832:26,log,log,26,https://root.cern,https://github.com/root-project/root/pull/11832,5,['log'],"['log', 'logging', 'logs']"
Testability,"Running tree/ntuple/v7/test/ntuple_extended sometimes fails (at least on MacOS 11) at tear down. The crash happens at:. ```; (lldb) bt; * thread #13, stop reason = EXC_BAD_ACCESS (code=1, address=0x0); * frame #0: 0x000000010095d80f libROOTNTuple.6.23.so`ROOT::Experimental::Detail::RPageSourceFile::UnzipClusterImpl(this=0x00000001058ed770, cluster=0x0000000104f098a0) at RPageStorageFile.cxx:652:26; frame #1: 0x0000000100944934 libROOTNTuple.6.23.so`ROOT::Experimental::Detail::RPageSource::UnzipCluster(this=0x00000001058ed770, cluster=0x0000000104f098a0) at RPageStorage.cxx:101:7; frame #2: 0x0000000100897a53 libROOTNTuple.6.23.so`ROOT::Experimental::Detail::RClusterPool::ExecUnzipClusters(this=0x00000001479040b0) at RClusterPool.cxx:102:22; frame #3: 0x00000001008a9817 libROOTNTuple.6.23.so`decltype(__f=0x00000001479042d8, __a0=0x00000001479042e8)).*fp()) std::__1::__invoke<void (ROOT::Experimental::Detail::RClusterPool::*)(), ROOT::Experimental::Detail::RClusterPool*, void>(void (ROOT::Experimental::Detail::RClusterPool::*&&)(), ROOT::Experimental::Detail::RClusterPool*&&) at type_traits:3486:1; frame #4: 0x00000001008a971e libROOTNTuple.6.23.so`void std::__1::__thread_execute<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ROOT::Experimental::Detail::RClusterPool::*)(), ROOT::Experimental::Detail::RClusterPool*, 2ul>(__t=size=3, (null)=__tuple_indices<2> @ 0x0000700008c5df58)(), ROOT::Experimental::Detail::RClusterPool*>&, std::__1::__tuple_indices<2ul>) at thread:273:5; frame #5: 0x00000001008a8ed6 libROOTNTuple.6.23.so`void* std::__1::__thread_proxy<std::__1::tuple<std::__1::unique_ptr<std::__1::__thread_struct, std::__1::default_delete<std::__1::__thread_struct> >, void (ROOT::Experimental::Detail::RClusterPool::*)(), ROOT::Experimental::Detail::RClusterPool*> >(__vp=0x00000001479042d0) at thread:284:5; frame #6: 0x00007fff2032f950 libsystem_pthread.dylib`_pthread_start + 224; frame #7: 0x00007fff2032b",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7076:23,test,test,23,https://root.cern,https://github.com/root-project/root/issues/7076,1,['test'],['test']
Testability,"SBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmErrorLevel [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: exit /b %1 [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: if %errorlevel% neq 0 goto :VCEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :VCEnd"" exited with code 9009. [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]. ### Expected behavior; Project build successfully. ### To Reproduce; 1. Open a x64 Native Tools Command Prompt for VS 2019; 2. git clone --branch master https://github.com/root-project/root.git; 3. cd root; 4. mkdir build_amd64 && cd build_amd64; 5. pip install pytest; 5. cmake -G ""Visual Studio 16 2019"" -A x64 -DCMAKE_SYSTEM_VERSION=10.0.18362.0 -Droofit=off -Dtesting=ON -Droottest=ON ..; 6. cmake --build . --config Release. ### Setup; 1. Operating system: Windows 10; 2. How you obtained ROOT, built it myself.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9487:2989,test,test,2989,https://root.cern,https://github.com/root-project/root/issues/9487,2,['test'],['test']
Testability,"SMatrix<double,3,3,> addition 		................ OK; SMatrix<double,3,3,> write 		................ OK; SMatrix<double,3,3,> read 		................ OK; SMatrix<double,3,3,> after read 		................ OK; SMatrix<Double32_t,3,3,> write 		................ OK; SMatrix<Double32_t,3,3,> read 		................ OK; SMatrix<Double32_t,3,3,> after read 		................ OK; SMatrix<double,5,5,MatRepSym> creation 		................ OK; SMatrix<double,5,5,MatRepSym> addition 		................ OK; SMatrix<double,5,5,MatRepSym> write 		................ OK; SMatrix<double,5,5,MatRepSym> read 		................ OK; SMatrix<double,5,5,MatRepSym> after read		................ OK; SMatrix<Double32_t,5,5,MatRepSym> write 		................ OK; SMatrix<Double32_t,5,5,MatRepSym> read 		................ OK; SMatrix<Double32_t,5,5,MatRepSym> after read		................ OK; ******************************************************************************; 	Test of a Composite Object (containing Vector's and Matrices); ******************************************************************************; Test Using CINT library; TrackD creation 		................ OK; TrackD addition 		................ OK; TrackD write 		................ OK; TrackD read 		................ OK; TrackD after read 		................ OK; TrackD32 creation 		................ OK; TrackD32 addition 		................ OK; TrackD32 write 		................ OK; TrackD32 read 		................ OK; TrackD32 after read 		................ OK; TrackD32 Double32 test 		................ OK; TrackErrD creation 		................ OK; TrackErrD addition 		................ OK; TrackErrD write 		................ OK; TrackErrD read 		................ OK; TrackErrD after read 		................ OK; TrackErrD32 creation 		................ OK; TrackErrD32 addition 		................ OK; TrackErrD32 write 		................ OK; TrackErrD32 read 		................ OK; TrackErrD32 after read 		................ OK; TrackErrD32 Double32 test 	",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/401:9510,Test,Test,9510,https://root.cern,https://github.com/root-project/root/pull/401,2,['Test'],['Test']
Testability,"Same as https://github.com/root-project/root/commit/19caf55b88d16ac67d9bfb39380a4d1c89f935e6 but this time moving RKeyBlob out of the anon namespace which causes compile errors on windows (I missed this in the previous commit, now reverted). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15660:307,test,tested,307,https://root.cern,https://github.com/root-project/root/pull/15660,1,['test'],['tested']
Testability,"SaveGraph mainly relied on static structures. Removed static maps, which were used to check if a define/filter/range node were already on the computation graph.; Solution is to pass a (non-static) map, which is created at each call of SaveGraph. Get rid of the static id initializer.; The size of the map of visited nodes is used to assign unique ids.; Now, also the action nodes are in the visited map.; The visited map is now only one and has signature std::unordered_map<void *, std::shared_ptr<GraphNode>> - in this manner, different type of nodes can use the same map. Tests were adapted accordingly. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9536:574,Test,Tests,574,https://root.cern,https://github.com/root-project/root/pull/9536,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"Science Center), the project has ended and time has run out to make any further major contributions to it, except, of course finishing this PR and providing help to get it working and to possibly hand over further development :). Here are some notes for possible future work:; - RooFitZMQ includes an extension of ZeroMQ itself: a ppoll function. This function should ideally be contributed to ZeroMQ, but I have had no time for this. The motivation behind ppoll is given in this [blog post](https://blog.esciencecenter.nl/combining-zeromq-posix-signals-b754f6f29cd6).; - At the last moment, I decided to reimplement part of the Queue functionality. The task distribution and parameter updating functionalities are now done directly using appropriate ZeroMQ sockets instead of indirectly through the Queue. The old-style Queue functionality, however, has not been cleaned up yet. Doing so will clean up the ""plumbing"" of the MultiProcess functions quite a bit.; - Benchmarking and optimization still has to be done for this version as well. The scaling results of the proof of concept (see references above) should be reproducible with this reimplementation, but this possibly still needs some tuning.; - After the most recent merging in of master, the RooGradMinimizer tests no longer pass, because the numbers are no longer floating point exactly the same. We have not looked into why, but one possible source is the reworked Kahan summation class. This was applied in RooMinimizerFcn, but not yet in our external-gradient classes.; - The proof-of-concept version classes are also still present in the source tree (`roofitcore/MultiProcess`), but have only been partially maintained since we started with the final version. Probably the best thing to do there is to remove that, but maybe people disagree and want to keep it for comparison while benchmarking and reproducing the results of the proof-of-concept benchmarks. Note: BidirMMapPipe is in there as well, since it was moved there. This cla",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:5482,Benchmark,Benchmarking,5482,https://root.cern,https://github.com/root-project/root/pull/8294,1,['Benchmark'],['Benchmarking']
Testability,"Second fix after #2361 with same test program. Valgrind output before fix (but with fix of #2361):. ```; ==22182== LEAK SUMMARY:; ==22182== definitely lost: 6,424 bytes in 202 blocks; ==22182== indirectly lost: 23,936 bytes in 200 blocks; ==22182== possibly lost: 61,230 bytes in 610 blocks; ==22182== still reachable: 74,911,268 bytes in 100,857 blocks; ==22182== of which reachable via heuristic:; ==22182== newarray : 25,424 bytes in 49 blocks; ==22182== multipleinheritance: 928 bytes in 2 blocks; ==22182== suppressed: 6,374,775 bytes in 65,619 blocks; ```. Valgrind output after fix:. ```; ==5872== LEAK SUMMARY:; ==5872== definitely lost: 24 bytes in 2 blocks; ==5872== indirectly lost: 56 bytes in 1 blocks; ==5872== possibly lost: 60,990 bytes in 608 blocks; ==5872== still reachable: 74,909,841 bytes in 100,876 blocks; ==5872== of which reachable via heuristic:; ==5872== newarray : 25,424 bytes in 49 blocks; ==5872== multipleinheritance: 2,136 bytes in 3 blocks; ==5872== suppressed: 6,378,087 bytes in 65,619 blocks; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2362:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/2362,1,['test'],['test']
Testability,Second iteration of the distributed RunGraphs function. The logic is greatly simplified now.; * There is no need (at this moment) to provide separate implementations of RunGraphs for each distributed backend. Both Spark and Dask support submitting tasks from multiple Python threads. So a common ThreadPool is cleaner and also allows to use different backends at the same time in principle; * The `GetValue` method of the proxy has been split in two functions to separate its functionalities. The `execute_graph` method is called in `RunGraphs`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9344:60,log,logic,60,https://root.cern,https://github.com/root-project/root/pull/9344,1,['log'],['logic']
Testability,"See PR #6418 's `core/metacling/test/TClingMethodInfoTests.cxx`, in `TEST(TClingMethodInfo, TemplateFun)`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6482:32,test,test,32,https://root.cern,https://github.com/root-project/root/issues/6482,2,"['TEST', 'test']","['TEST', 'test']"
Testability,See https://github.com/root-project/root/issues/16553. The following 3 tests fails consistently with missing BLAS symbols; ```; 984:tutorial-tmva-TMVA_SOFIE_GNN_Application; 988:tutorial-tmva-TMVA_SOFIE_RDataFrame; 990:tutorial-tmva-TMVA_SOFIE_RSofieReader; 353-gtest-tmva-pymva-TestRModelParserKeras; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16720:71,test,tests,71,https://root.cern,https://github.com/root-project/root/issues/16720,2,"['Test', 'test']","['TestRModelParserKeras', 'tests']"
Testability,"See in-code comment for more details. Note: this bug is routinely seen on the CI, where it causes occasional failures to the tests in question. Despite this solution being very suboptimal (the bug is most likely still present in many places of our codebase and can be encountered by users in the wild) we should at least be able to remove the random CI failures on our side. A proper solution would be nice, but it seems hard to come up with one that doesn't have big performance implications. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16412:125,test,tests,125,https://root.cern,https://github.com/root-project/root/pull/16412,2,['test'],"['tested', 'tests']"
Testability,"See old [PR#3414](https://github.com/root-project/root/pull/3414) for initial discussion. This PR cleans of the code a bit and adds tests. @josephmckenna Creating the testing code was slightly involved, hence the new PR and not asking you to submit a fix. I think the idea is a nice and natural improvement on the functionality that was already implemented. Motivation from original submitter:; > To explore the performance of a range of settings for BDTs, we often find a 0.1% background level most interesting for our physics applications for us in the ALPHA collaboration. Instead of adding one additional use case, I have added a general form such that users could set:; > // factory->OptimizeAllMethods(""SigEffAtBkgEff0001"",""Scan"");",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3493:132,test,tests,132,https://root.cern,https://github.com/root-project/root/pull/3493,2,['test'],"['testing', 'tests']"
Testability,"See the discussion at https://root-forum.cern.ch/t/rootcint-cannot-create-dictionary-in-a-vm/48580 . In short, in certain situations in which the platform is Linux but the working directory belongs to a Windows file system, [this call to std::rename](https://github.com/root-project/root/blob/7a2612dc7ae62832c7683081020e190c49b75569/core/dictgen/src/rootcling_impl.cxx#L2956-L2958) fails because ""Windows"" does not allow renaming files that are currently in use. Something like the logic that we already apply for Windows at https://github.com/root-project/root/blob/7a2612dc7ae62832c7683081020e190c49b75569/core/dictgen/src/rootcling_impl.cxx#L2944-L2955 might be needed on Linux as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9730:483,log,logic,483,https://root.cern,https://github.com/root-project/root/issues/9730,1,['log'],['logic']
Testability,Seems to be headless usage of Firefox not yet tested there,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16641:46,test,tested,46,https://root.cern,https://github.com/root-project/root/pull/16641,1,['test'],['tested']
Testability,Seen while building latest master with -Dasan=ON. ```; /home/vpadulan/Programs/rootproject/rootbuild/master-2024-09-16-testing-asan/include/ROOT/RVec.hxx:515:4: error: non-stati; c data member cannot be constexpr; did you intend to make it static?; constexpr std::size_t cacheLineSize = std::hardware_destructive_interference_size;; ^; static; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16445:119,test,testing-asan,119,https://root.cern,https://github.com/root-project/root/pull/16445,1,['test'],['testing-asan']
Testability,"SetRootSys is overwriting ROOTSYS every time:; ```; [yuka@yuka-arch normalroot]$ source bin/thisroot.sh; [yuka@yuka-arch normalroot]$ echo $ROOTSYS; /home/yuka/normalroot; [yuka@yuka-arch normalroot]$ export ROOTSYS=/hoge/huga; [yuka@yuka-arch normalroot]$ echo $ROOTSYS; /hoge/huga; [yuka@yuka-arch normalroot]$ bin/root.exe -l; root [0] gSystem->Getenv(""ROOTSYS""); (const char *) ""/home/yuka/normalroot""; root [1] .q; [yuka@yuka-arch normalroot]$ echo $ROOTSYS; /hoge/huga; ```. This is the right behavior as users can choose different ROOT binary in; cvmfs enviroment. However, as SetROOTSYS is reading the binary header; which stores the information of where the binary was built, ROOTSYS is; messed up when you relocate build directory (Without this patch):; ```; [yuka@yuka-arch ~]$ cp -r normalroot test; [yuka@yuka-arch ~]$ cd test; [yuka@yuka-arch test]$ export ROOTSYS=/hoge/huga; [yuka@yuka-arch test]$ echo $ROOTSYS; /hoge/huga; [yuka@yuka-arch test]$ bin/root.exe -l; root [0] gSystem->Getenv(""ROOTSYS""); (const char *) ""/home/yuka/normalroot"" // It should be ""/home/yuka/test""!; ```. ROOTSYS can be overwritten, but it should point to the actual binary; location. With this patch, ROOTSYS can point to the correct binary location:; ```; [yuka@yuka-arch ~]$ cp -r normalroot test; [yuka@yuka-arch ~]$ cd test; [yuka@yuka-arch test]$ export ROOTSYS=/hoge/huga; [yuka@yuka-arch test]$ echo $ROOTSYS; /hoge/huga; [yuka@yuka-arch test]$ bin/root.exe -l; root [0] gSystem->Getenv(""ROOTSYS""); (const char *) ""/home/yuka/test"" // Which is correct; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2366:806,test,test,806,https://root.cern,https://github.com/root-project/root/pull/2366,12,['test'],['test']
Testability,SetShowProjection highlights wrong bins on 2d histogram with logarithmic axis,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12497:61,log,logarithmic,61,https://root.cern,https://github.com/root-project/root/issues/12497,1,['log'],['logarithmic']
Testability,"Setting the flag must be protected by a lock. This is a recently-introduced test, and I think this bug caused the test to hang indefinitely in rare cases as in here (note the timeout): http://cdash.cern.ch/testDetails.php?test=85891275&build=874661. The stacktrace of the threads when the test was hanging was the following:. ```; Thread 2 (Thread 0xa2784b40 (LWP 4590)):; #0 0xb7fa1d61 in __kernel_vsyscall (); #1 0xb6ab9462 in futex_wait_cancelable (private=0, expected=0, futex_word=0xbf9af3e4) at ../sysdeps/unix/sysv/linux/futex-internal.h:88; #2 __pthread_cond_wait_common (abstime=0x0, mutex=0xbf9af424, cond=0xbf9af3bc) at pthread_cond_wait.c:502; #3 __pthread_cond_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655; #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6; #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99; #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674); at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167; #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (; __f=...) at /usr/include/c++/8/bits/invoke.h:60; #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...); at /usr/include/c++/8/bits/invoke.h:95; #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674); at /usr/include/c++/8/thread:244; #10 0x004809",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5596:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/5596,6,"['Test', 'test']","['TestBody', 'test', 'testDetails']"
Testability,Several fixes to meta-data handling that grew quadratic in the number of fields. The RNTuple limits tests is adjusted from 10k to 40k fields (30s --> 2s). Finding pages in the RPagePool is a remaining contributor to a noticeable slowdown with a growing number of fields. That will be addressed in a follow-up PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15249:100,test,tests,100,https://root.cern,https://github.com/root-project/root/pull/15249,1,['test'],['tests']
Testability,Several new test failures on ppc64le with 6.22.06 due to:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6887:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/6887,1,['test'],['test']
Testability,"Several of us were surprised to discover that calling `TTree::FlushBaskets()` does not actually create a new event cluster in terms of the TTree metadata -- even though it effectively creates an event cluster in terms of the physical disk layout!. There may be cases where the user has special knowledge of the file where using the internally-calculated auto-flush intervals result in poor choices; CMS's NanoAOD is one such case. However, when CMS switched to calling `FlushBaskets` explicitly and disabling `AutoFlush`, this triggered unexpected behavior in `RDataFrame` as the file did not appear to have any proper event clusters. This change causes the `FlushBaskets` method to create an explicit event cluster. As we used the old behavior in some ROOT unit tests, the prior behavior is now accessible through a flag passed to the method. Fixes: ROOT-9442",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2412:763,test,tests,763,https://root.cern,https://github.com/root-project/root/pull/2412,1,['test'],['tests']
Testability,"Shortly after the branching of LLVM 16 (that we just upgraded to) early this year, upstream enabled the new JITLink linker by default for AArch64 and x86_64 on Linux: https://github.com/llvm/llvm-project/commit/6747fc07d1aa94e22622e278e5a02ba70675ac9b and https://github.com/llvm/llvm-project/commit/85c649bc02a6605f541b09b33a200a78275ed90f. We have our own version of this logic; https://github.com/root-project/root/blob/44299a000236b7d16a5458917167ebbd306e11c3/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp#L351-L365; so we can already follow that move, and IMHO we should do so to give it a maximum of testing, benefit from the improvements, and decouple it from future upgrades.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14209:374,log,logic,374,https://root.cern,https://github.com/root-project/root/issues/14209,2,"['log', 'test']","['logic', 'testing']"
Testability,Should decrease the number of failures and retries when running the tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16273:68,test,tests,68,https://root.cern,https://github.com/root-project/root/pull/16273,1,['test'],['tests']
Testability,Should fix sporadic failures on `projectroot.test.test_stressentrylist_interpreted`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5234:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/5234,1,['test'],['test']
Testability,Should fix; ```; WARNING:discardable_shared_memory_manager.cc(197)] Less than 64MB of free space in temporary directory for shared memory files: 62; ```; and similar errors with headless chromium.; See https://stackoverflow.com/a/56941767. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13466:305,test,tested,305,https://root.cern,https://github.com/root-project/root/pull/13466,1,['test'],['tested']
Testability,"Significant revamp of FillBuffer. The new scheme insures a much more stable and efficient behavior in case of low; memory given by the user compared to the size of the buffer or 'odd' basket; layout. The basket collection is now done in 4 phases:. 1. One basket per branch, basket must contains the request entry and is not yet loaded or used,; 2. Even out by adding baskets so that all branches reach the same entry (or close); 3. Add the remaining branches from the current cluster.; 4. Add the basket from the begining of the clsuter to the current entry (if any). then repeat the 4 steps for the next cluster. The iteration is stopped as soon as the cache is 'full' as defined by these; rules:. - During step 1 of the first cluster, continue up to 4 times the user requested; cache size; - During steps 2 to 4 of the first cluster, continue up to 2 times the user; requested cache sizep; - During steps 2 to 4, the 'first' basket of a branch is accepted up to 4 times; the user requested cache size (i.e as if it had been selected during the 1st; step); - During the other clusters, continue up to the user requested cache size. A basket if rejected/skipped if its individual size is larger than the user; requested cache size. In addition, upon seeing a cache miss, FillBuffer now detects if all the basket; in the cache have already been used (read from the cache) in which case we can\; discard them and load the next set of baskets. As a side effect, we now keep a record of which baskets are in the cache and; which of those baskets have been used. The TTreePerfStats now keep a complete; log of all the basket that are:; - loaded in the main cache (and how many times); - loaded in the 'misss' cache (and how many times); - used; - read directly (complete cache miss); This will be helpful in understanding situation of over-read or slow operations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1960:1598,log,log,1598,https://root.cern,https://github.com/root-project/root/pull/1960,1,['log'],['log']
Testability,"Simple notebook test times out when root7=on, webgui=Off",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16689:16,test,test,16,https://root.cern,https://github.com/root-project/root/issues/16689,1,['test'],['test']
Testability,"Simple search for following includes were done:. * `TSystem.h`, ; * `TStyle.h`; * `TClass.h`; * `TEnv.h`; * `TObjString.h`; * `TObjArray.h`; * `TList.h`. These are relative ""big"" includes, therefore can improve compilation and dependencies. Let see which tests are affected",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5069:255,test,tests,255,https://root.cern,https://github.com/root-project/root/pull/5069,1,['test'],['tests']
Testability,Simplifies script and allows to capture (and log) essential config values. Some more drive-by code fixes. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13488:45,log,log,45,https://root.cern,https://github.com/root-project/root/pull/13488,2,"['log', 'test']","['log', 'tested']"
Testability,"Simplify code, remove race condition. It didn't do much harm, but it's also not a good idea to show this in a tutorial ... - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9352:129,test,tested,129,https://root.cern,https://github.com/root-project/root/pull/9352,1,['test'],['tested']
Testability,Simplify memory regulation logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16837:27,log,logic,27,https://root.cern,https://github.com/root-project/root/pull/16837,1,['log'],['logic']
Testability,"Simplify test code as a consequence, add a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3021:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/3021,4,['test'],['test']
Testability,Simplify the test for std::make_unique,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1210:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/1210,1,['test'],['test']
Testability,"Since Python 3.12, in the implementation of 'classobject.h' the function PyMethod_GET_SELF performs an assert to check that the passed function argument is a method:. ```; \#define _PyMethod_CAST(meth) \; (assert(PyMethod_Check(meth)), _Py_CAST(PyMethodObject*, meth)); [...]; static inline PyObject* PyMethod_GET_SELF(PyObject *meth) {; return _PyMethod_CAST(meth)->im_self;; }; ```. It's fair that the assert fails, because the Python type of `meth` in this context is not a `PyMethod_Type`, but the; `CustomInstanceMethod_Type` from cppyy. However, as can be seen in the implementation of `CustomInstanceMethod_New`, the actual C++ type that implements this custom cppy type is just the regular `PyMethodObject`. Hence, this commit suggests new assert-free `CustomInstanceMethod_GET_*` macros that replace the `PyMethod_GET_*` macros in the context of the `CustomInstanceMethod` implementation. Quick link to the file I'm talking about:; https://github.com/root-project/root/blob/master/bindings/pyroot/cppyy/CPyCppyy/src/CustomPyTypes.cxx. Link to upstream PR:; https://github.com/wlav/CPyCppyy/pull/9",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13912:103,assert,assert,103,https://root.cern,https://github.com/root-project/root/pull/13912,4,['assert'],"['assert', 'assert-free']"
Testability,"Since Python 3.12, in the implementation of 'classobject.h' the function PyMethod_GET_SELF performs an assert to check that the passed function argument is a method:. ```; \#define _PyMethod_CAST(meth) \; (assert(PyMethod_Check(meth)), _Py_CAST(PyMethodObject*, meth)); [...]; static inline PyObject* PyMethod_GET_SELF(PyObject *meth) {; return _PyMethod_CAST(meth)->im_self;; }; ```. This is in general not strictly necessary nor true, since the passed argument may be a free function. Prevent this assert from breaking the flow by preemptively catching such situations and creating the Python instance method anyway. Fixes #13864",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13903:103,assert,assert,103,https://root.cern,https://github.com/root-project/root/pull/13903,3,['assert'],['assert']
Testability,"Since RNT is warning that it's a beta, extra suppressions for diagnostics in google test had to be added. Remove those once RNT doesn't issue the warning. Revert 44f9863aaf0391f4e9867dcdbd6eab2ad9028e0c.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9355:84,test,test,84,https://root.cern,https://github.com/root-project/root/issues/9355,1,['test'],['test']
Testability,"Since ROOT 6.26/00, passing a null pointer to RooFit::ConditionalObservables results in a crash. It does not crash for ROOT 6.22/xx and 6.24/06. Reproducer:; ```; import ROOT; ws = ROOT.RooWorkspace(""ws""); # seg fault; ROOT.RooFit.ConditionalObservables(ws.set("""")); ```; Tested ROOT versions that crashes: 6.26/00 (installed from conda), 6.27/01 (from swan bleeding edge); Tested ROOT version that does not crash: 6.22/00 (LCG 98), 6.24/00 (LCG 100), 6.24/06 (LCG 101)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10232:272,Test,Tested,272,https://root.cern,https://github.com/root-project/root/issues/10232,2,['Test'],['Tested']
Testability,"Since a few weeks, having pdfs with the same name in a RooSimultaneous fit with BatchMode didn't work anymore. This was because when setting up the computation graph for a given normalization set, all pdfs are cloned and redirected with `RooAbsArg::redirectServers()`, which doesn't work if servers have the same name. This commit suggests to instead delete the pdf servers and proxies and then recreate them by hand. Also, the logic of `RooSimultaneous::compileForNormSet()` was updated to iterate directly over the pdfs instead of iterating over the index categories and then getting the pdfs. The unit tests in `testAbsPdf` are now also parametrized to cover both BatchMode on and off, such that the case of the `RooSimultaneous` with one pdf in used in two channels is also covered buy the tests for BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12236:428,log,logic,428,https://root.cern,https://github.com/root-project/root/pull/12236,4,"['log', 'test']","['logic', 'testAbsPdf', 'tests']"
Testability,"Since all df10* tutorials use IMT(hardware concurrency), it's; inefficient to run them in parallel. This regularly brings us into; timeouts in the nightlies.; To avoid this, those tutorials are now locking the resource; ""multithreaded"", which means that they don't run in parallel. Other; tests that don't have this resource lock still run, though. To reduce; congestion, the RDF tutorials now claim that they use 4 CPUs. That's in; general not true, on an e.g. 8-core machine, CMake will run an IMT=8; with 4 single-threaded ctest, leading to an oversubscription of 1.5; instead of the 2 or more we had before. Backported from 668e0444d17e2",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6280:289,test,tests,289,https://root.cern,https://github.com/root-project/root/pull/6280,1,['test'],['tests']
Testability,"Since the LLVM upgrade, the following four tests:; ```; projectroot.roottest.cling.template.roottest_cling_template_runtemplatefriend; projectroot.roottest.root.io.complex.roottest_root_io_complex_writecomplex; projectroot.roottest.root.io.complex.roottest_root_io_complex_readcomplex; projectroot.roottest.root.io.cpp11Containers.roottest_root_io_cpp11Containers_Names; ```; fail with; ```; In module 'std' imported from input_line_1:1:; /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: error: 'std::__is_same_uncvref<char [6], std::basic_string<char, std::char_traits<char>, std::allocator<char> > >' has different definitions in different modules; first difference is defined here found 0 base classes; struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,; ^; /Library/Developer/CommandLineTools/usr/include/c++/v1/type_traits:1427:8: note: but in 'std.type_traits' found 1 base class; struct __is_same_uncvref : _IsSame<typename __uncvref<_Tp>::type,; ^ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12003:43,test,tests,43,https://root.cern,https://github.com/root-project/root/issues/12003,1,['test'],['tests']
Testability,"Since the beginning when 0 ranges were specified by Save method, ; half a bin was add to coordinate. But wrong number of bins was stored and ; therefore produced buffer was not able to use. Error was from very beginning - ; already by initial import from rcs to svn 23 years ago. Now proper number of bins are stored. It still stores middle of bins when `f1->Save(0,0,0,0,0,0)` is called. There was also failure to use such saved buffer when trying to get approximation at upper boundaries. Now it is fixed. Adding tests for all TF1/TF2/TF3. Fixes #13927",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13949:515,test,tests,515,https://root.cern,https://github.com/root-project/root/pull/13949,1,['test'],['tests']
Testability,"Since the new Pythonization of the RooSimultaneous constructor that takes a Python dictionary is used in the `rf501_simultaneouspdf.py` tutorial, the unit test corresponding to the tutorial fails on the Windows nightlies. The tutorial unit test is therefore disabled on Windows by this commit. See:; * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/#showFailuresLink; * https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows64,SPEC=default,V=master/lastBuild/#showFailuresLink",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11532:155,test,test,155,https://root.cern,https://github.com/root-project/root/pull/11532,2,['test'],['test']
Testability,"Since the upgrade to LLVM 13, at least two tests are failing because of broken interactions with multiple interpreters:; * `CodeUnloading/AtExit.C` does not find the symbol `gChild`.; * `MultipleInterpreters/MultipleInterpreters.C` cannot find the symbol `_ZN5cling7runtime6gClingE` / `cling::runtime::gCling` during `ChildInterp.echo()` (the first usage to construct `cling::Interpreter ChildInterp(*gCling, 1, argV);` seems fine). Based on this, one might theorize that the child interpreter doesn't have access to symbols declared in its parent (not sure how this worked before).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12455:43,test,tests,43,https://root.cern,https://github.com/root-project/root/issues/12455,1,['test'],['tests']
Testability,"Since the upgrade to LLVM 13, the Cling test `CodeUnloading/RereadFile.C` fails with; ```; cling: /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1499: clang::NamedDecl *getLambdaCallOperatorHelper(const clang::CXXRecordDecl &): Assertion `!Calls.empty() && ""Missing lambda call operator!""' failed.; #0 0x00000000023cb663 llvm::sys::PrintStackTrace(llvm::raw_ostream&, int) /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Unix/Signals.inc:565:13; #1 0x00000000023c9822 llvm::sys::RunSignalHandlers() /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Signals.cpp:98:18; #2 0x00000000023cbc6f SignalHandler(int) /home/jhahnfel/ROOT/src/interpreter/llvm/src/lib/Support/Unix/Signals.inc:407:1; #3 0x00007fdc3a8d4b50 __restore_rt (/lib64/libc.so.6+0x4eb50); #4 0x00007fdc3a8d4acf raise (/lib64/libc.so.6+0x4eacf); #5 0x00007fdc3a8a7ea5 abort (/lib64/libc.so.6+0x21ea5); #6 0x00007fdc3a8a7d79 _nl_load_domain.cold.0 (/lib64/libc.so.6+0x21d79); #7 0x00007fdc3a8cd426 (/lib64/libc.so.6+0x47426); #8 0x00000000037504a4 (/home/jhahnfel/ROOT/build-cling-clang/interpreter/llvm/src/bin/cling+0x37504a4); #9 0x00000000037504b6 clang::CXXRecordDecl::getLambdaCallOperator() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1513:14; #10 0x0000000003750559 clang::ValueDecl::getType() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/include/clang/AST/Decl.h:687:37; #11 0x0000000003750559 clang::CXXRecordDecl::getLambdaStaticInvoker() const /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/DeclCXX.cpp:1524:28; #12 0x00000000038a67b7 (anonymous namespace)::CXXNameMangler::mangleLambdaSig(clang::CXXRecordDecl const*) /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/ItaniumMangle.cpp:1977:3; #13 0x00000000038a59be (anonymous namespace)::CXXNameMangler::mangleLambda(clang::CXXRecordDecl const*) /home/jhahnfel/ROOT/src/interpreter/llvm/src/tools/clang/lib/AST/ItaniumMangle.cpp:1948:3; #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12457:40,test,test,40,https://root.cern,https://github.com/root-project/root/issues/12457,2,"['Assert', 'test']","['Assertion', 'test']"
Testability,"Since the upgrade to LLVM 13, the JIT infrastructure takes ownership of the Module. After JIT compilation, we get back a (const) pointer to the compiled module. This fixes the Cling test `ErrorRecovery/StoredState.C`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12456:182,test,test,182,https://root.cern,https://github.com/root-project/root/pull/12456,1,['test'],['test']
Testability,"Since this change https://github.com/root-project/root/pull/8556 in the root master; We see some failures in DD4hep tests against the LCG Dev3 installation, more details in https://github.com/AIDASoft/DD4hep/pull/857#issuecomment-904434545. Our tests are passing again if patching out the `!fElements &&` from this line. https://github.com/root-project/root/blob/5d536b29d7ce437aad79ff046788735a33fb1dbe/geom/geom/src/TGeoMaterial.cxx#L803. Ping @agheata",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8892:116,test,tests,116,https://root.cern,https://github.com/root-project/root/issues/8892,2,['test'],['tests']
Testability,"Skip CI for the moment, i need to test it a bit more. Naming is probably not ideal. Introduce a new R__NEW_TBB macro to address the change in interface in TBB 2021 and adapt the forward declaration of task_arena accordingly. Deals with the problem @mrodozov reported in issue https://github.com/root-project/root/issues/6933 and by @krasznaa in PR https://github.com/root-project/root/pull/6174 (in whose conversation I first noticed the problem and then immediately forgot about what the real issue was and focused on the code, apologies for that). *Note*: This does not solve the ideal situation in which we can live not forward declaring `tbb::task_arena` and keep tbb hidden from the public interfaces, but patches ROOT to work with the new OneAPI and TBB versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7059:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/7059,1,['test'],['test']
Testability,Skip ci test 2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14610:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/14610,1,['test'],['test']
Testability,"Skip registration of TFile UUIDs in the global list when using the """"""READ_WITHOUT_GLOBALREGISTRATION"""""" option with TFile (used by default in TTreeProcessorMT). This avoids the final use of the global write lock during typical RDataFrame event loops, significantly improving multi-threaded performance for cases with many files and many threads. This follows up on https://github.com/root-project/root/pull/9486 and mostly finishes addressing https://github.com/root-project/root/issues/7710. Skipping the UUID registration breaks the particular case where a TRef points to the TFile object, but as per the discussion in this PR, this use case has thread-safety problems for TFile objects being managed by TTreeProcessorMT anyways. A test case is below. Produce the test dataset:. ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();; }. }; ```. Test event loop:. ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threads (on partly loaded machine, but still representative):. Baseline:; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10318:735,test,test,735,https://root.cern,https://github.com/root-project/root/pull/10318,4,"['Test', 'test']","['Test', 'test', 'testwrite']"
Testability,Slow performance was due to excessive fsync and writing of TTree objects resulting in byte written to disk far exceeding the file size ... (code was using AutoSave instead of AutoFlush). Added speeding up of test-bench.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3196:208,test,test-bench,208,https://root.cern,https://github.com/root-project/root/pull/3196,1,['test'],['test-bench']
Testability,"Small quality of life improvement, non-functional change. ; This helps the test suite fail fast.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5807:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/5807,1,['test'],['test']
Testability,"So far we just hard-coded the default definitions that LLVM uses to; the CLING_CXXFLAGS. This means that once LLVM actually changes; its compile defintions, code that uses the CLING_CXXFLAGS is no; longer in sync and starts reading invalid memory and so on. This patch extracts these flags from LLVM now and properly adds; them to the CLING_CXXFLAGS instead of hardcoding them. This fixes the failing roottest-root-aclic-misc-assertROOT7027 test. Thanks to Axel for debugging this!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/967:441,test,test,441,https://root.cern,https://github.com/root-project/root/pull/967,1,['test'],['test']
Testability,So far we only trigger an assertion in LLVM when we can't find the; modulemap file which is not very user-friendly. With this patch; we actually prints an error message in this situation.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/527:26,assert,assertion,26,https://root.cern,https://github.com/root-project/root/pull/527,1,['assert'],['assertion']
Testability,"So far, a `RooKeysPdf` produced wrong kernel estimations for weighted; datasets, as sometimes the number of entries was used in place of the; sum of weights. This is fixed now. Also, the normalization by the sum of; weights is moved from the private `RooKeysPdf::g()` function that is; called for each event to the global normalization constant. A new unit test that checks if weighted datasets are correctly handled; by both the RooKeysPdf and the RooNDKeysPdf is also implemented.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10956:357,test,test,357,https://root.cern,https://github.com/root-project/root/pull/10956,1,['test'],['test']
Testability,"So far, the RooMultiVarGaussian required a TMatrixDSym as an input for the covariance matrix, but it would be more convenient to accept the TMatrixDBase class such that questions like on this forum post don't even come up:. https://root-forum.cern.ch/t/multivariate-gaussian-object-creation/55721. The only logic that needs to be added is if the input matrix is symmetric, and an exception will be thrown if it is not. This change doesn't break backwards compatibility",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13266:307,log,logic,307,https://root.cern,https://github.com/root-project/root/pull/13266,1,['log'],['logic']
Testability,"So far, the `ParamHistFunc` BatchMode implementation was still; sub-uptimal because it used the non-vectorized interface of the; RooDataHist. Using the new `RooAbsBinning::binNumbers()` function too look up; multiple bin indices at once, the implementaiton can be improved and; sped. In the three-dimensional many-bin case, the new implementation is a bit; more than three times faster than the old one. This should benefit; HistFactory fits with many bins. A new `testParamHistFunc` unit test was also introduced to validate the; results of a ParamHistFunc both with and without the batch mode,; comparing to manually computed reference results.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11170:465,test,testParamHistFunc,465,https://root.cern,https://github.com/root-project/root/pull/11170,2,['test'],"['test', 'testParamHistFunc']"
Testability,"So far, the a constructorr match was reported for; `RooWorkspace::factory` when the number of constructor args was larger; than the number of args passed to `factory`. Obviously, this lead to false positives, and it should actually check if; the number of passed args (plus 2 for name and title) is somewhere; between the number of minimum and maximum arguments that the constructor; can take. In other works, instead of assuming there is an arbitrary; number of default arguments one should do the check with their exact; number. A unit test to check that this works now is also implemented. Closes #7965.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10772:538,test,test,538,https://root.cern,https://github.com/root-project/root/pull/10772,1,['test'],['test']
Testability,"So far, the projection coefficient for coefficients in RooAddPdfs was missing in `RooAddPdf::expectedEvents()`. However, this is important to include in conditional fits where the normalization set of `expectedEvents()` is different from the normalization set for coefficient determination. This PR includes this missing factor. A unit test that covers both the case where the expected events are taken from the coefs and the one where they are taken from the pdfs is included.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12954:336,test,test,336,https://root.cern,https://github.com/root-project/root/pull/12954,1,['test'],['test']
Testability,"So here are the changes that I needed to make from the comments of the last pull request and some other changes:; 1) I've added the name for a enum constant because I realised when declaring kMyConstant = 42 that I didn't save the name.; 2) I've added some checks in the TCling to see if the TEnum and TEnumConstants are actually created, because when I run the test:; // MyEnumComment; enum EMyEnum {; kMyEnumConstant = 42 // enumConstantComment; };. int assertTEnum(); {. ```; if (!(TEnum*)gROOT->GetListOfEnums()->FindObject(""EMyEnum"")) {; Error (""TEnum"", ""Constructor of TEnum failure."");; return -1;; ```. }; It does return and Error. I tried that on the root[0] promp as well and the address of GetListOfEnum is not NULL(because the HashTable is created), but the address of FindObject is 0x0. ; Now I don't get the Errors of TEnum and TEnumConstant are not created..I wanted to check whether they are added to the fEnums and fGlobals, but Add() for TCollection is a void function. My best guess is that they are not added to the lists, maybe you can see why...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2:362,test,test,362,https://root.cern,https://github.com/root-project/root/pull/2,2,"['assert', 'test']","['assertTEnum', 'test']"
Testability,"So, we just removed the assert that makes us aware that we need to; rethink this flag. I don't see a clear solution at the moment, but; this PR at least makes us aware that we need to solve this issue. For now I just removed it and we see what exactly Jenkins complains; about when it runs the tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1049:24,assert,assert,24,https://root.cern,https://github.com/root-project/root/pull/1049,2,"['assert', 'test']","['assert', 'tests']"
Testability,Solve warnings in tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12829:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/12829,1,['test'],['tests']
Testability,Solves a bug in the TFITSIO code when reading a FITS binary table that; contained a column of type LOGICAL. The code in TFISTIO:LoadHDU only; had tests for column types of strings or numeric so it was failing with the error. “bad binary table datatype”,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1590:99,LOG,LOGICAL,99,https://root.cern,https://github.com/root-project/root/pull/1590,2,"['LOG', 'test']","['LOGICAL', 'tests']"
Testability,Some Python tests define `PRE_` and `POST_CMD`; they should not get the ASan runtime preloaded. Invent a new `CMD_ENV` that supports exactly one environment variable that is applied to `CMD`. This fixes another 16 test failures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11226:12,test,tests,12,https://root.cern,https://github.com/root-project/root/pull/11226,2,['test'],"['test', 'tests']"
Testability,"Some RooFit functions, in particular the ones related to; multiprocessing, created many files directly in the `/tmp` directory.; Some users and @hageboeck found that this was unnessecarily polluting; the `/tmp` directory and the files should rather go into a subdirectory. This commit suggests to use the subdirectory `/tmp/roofit` for add; temporary RooFit files that get created during multiprocessing and; testing. The path for temporary RooFit files can now be retrieved with a new; `RooFit::tmpPath()` function that is not exposted by the user but only; meant to be used by the RooFit implementations. The first time; `RooFit::tmpPath()` is called, it will check if the directory exists and; create it if it doesn't. This new function goes into a new package; `roofit/common` that is meant to be at the base of the RooFit dependency; graph, meaning all of `roofitcore`, `multiprocess`, and `roofitZMQ` can; depend on the `common` package to get the temporary files path.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9504:409,test,testing,409,https://root.cern,https://github.com/root-project/root/pull/9504,1,['test'],['testing']
Testability,"Some boost histogram utility functions have trouble being called from PyROOT. I've traced this back to what looks like a name normalization problem. Unfortunately I did not manage to put together a standalone example without the boost histogram dependency. Consider the following test case:. test.c; ```cpp; #include ""TInterpreter.h""; #include ""TClass.h""; #include ""TMethod.h""; #include <iostream>; #include <boost/histogram.hpp>. int test() {; auto ns = TClass::GetClass(""boost::histogram"");; auto meth = ns->GetMethodWithPrototype(""make_histogram"", ""boost::histogram::axis::regular<>&&"");. std::cout << ""meth->GetReturnTypeName(): "" << meth->GetReturnTypeName() << std::endl;; std::cout << ""meth->GetReturnTypeNormalizedName(): "" << meth->GetReturnTypeNormalizedName() << std::endl;. auto cl = TClass::GetClass(meth->GetReturnTypeNormalizedName().c_str());; std::cout << ""cl: "" << cl << std::endl;. return 0;; }; ```. output:; ```; meth->GetReturnTypeName(): boost::histogram::histogram<tuple<boost::histogram::axis::regular<double,boost::use_default,boost::use_default,boost::use_default> >,boost::histogram::unlimited_storage<allocator<char> > >; meth->GetReturnTypeNormalizedName(): boost::histogram::histogram<tuple<regular<double,use_default,use_default,use_default> >,unlimited_storage<allocator<char> > >; cl: 0; (int) 0; ```. So note that the normalized return type is missing the ```boost::histogram``` namespace for the template arguments of the std::tuple. (and then obviously trying to lookup the type again fails). This prevents properly calling this function and other similar ones from PyROOT because the normalized return type is used e.g. here https://github.com/root-project/root/blob/4483b01b7f4bad47332f98d773dbd9b8c7f36b9d/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1515",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12548:280,test,test,280,https://root.cern,https://github.com/root-project/root/issues/12548,3,['test'],['test']
Testability,"Some columns may have no pages in a given cluster (e.g. a field with type `std::string` that contains no data). In such cases, it is still okay to use `CommitSealedPageV()`. However, the previous implementation of `RColumnBuf::HasSealedPagesOnly()` prevented that. This pull request fixes the issue and updates the unit tests accordingly. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12980:320,test,tests,320,https://root.cern,https://github.com/root-project/root/pull/12980,2,['test'],"['tested', 'tests']"
Testability,"Some libraries are layered can depend on other libraries on a private paths. That is, libA can depend on libB which is neither on the LD_LIBRARY_PATH nor on a known system path. The posix linker injects ""variables"" such as @rpath which is expanded at link time to resolve the libraries on a relative path. Prior to this patch, cling's Dyld-based symbol resolution could not trace down such cases causing failures in symbol resolution when a symbol is only defined in libB (a private library). This patch implements the basic posix linker substitutions allowing cling's Dyld-based symbol resolution implementation to follow more closely the linker rules. ## Performance. |platform|test|master|PRv1|PRv2| mem master|mem PRv2|; |:--------|:---|:---------:|:-----------:|:-----------:|:-----------:|:-----------:|; |ubu20|roottest-python-pythonizations|6.5|6.55|6.65|342076|347168|; |ubu20|roottest-cling|112.8|114.53|181.26|411048|416036|; |ubu20|roottest-python|148.5|136.26|144.72|394292|397120|; |ubu20|roottest-root-hist|16.78|17.35|15.45|465156|235084|; |ubu20|roottest-root-math|28.28|27.89|27.40|424072|371256|; |ubu20|roottest-root-tree|462.84|510.59|465.79|796512|797992|; |ubu20|roottest-root-treeformula|117.53|129.16|114.44|261184|260168|; |ubu20|root-io-stdarray|66.90|67.89|65.71|263424|255120|; |ubu20|roottest-root-treeformula|117.55|129.10|; |osx 10.15|roottest-python-pythonizations|17.25|16.06|; |osx 10.15|roottest-cling|346.06|343.46|; |osx 10.15|roottest-root-hist|36.06|36.22|; |osx 10.15|roottest-root-math|49.78|52.42|; |osx 10.15|root-io-stdarray|119.32|118.73|. That PR should reduce the number of `stat` calls improving #7774. Kudos Alexander Penev (@alexander-penev).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6969:680,test,test,680,https://root.cern,https://github.com/root-project/root/pull/6969,1,['test'],['test']
Testability,"Some of the tests in `tutorials/roostats/` uses the file `example_combined_GaussExample_model.root`. If this file does not exist, one of the tests will create it. As these are executed in parallel, there is a chance of race condition and one of the tests might fail, as seen in this build: http://cdash.cern.ch/testDetails.php?test=22401472&build=324697; This PR attempts to fix this by executing all tests sequentially that uses the file `example_combined_GaussExample_model.root`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/362:12,test,tests,12,https://root.cern,https://github.com/root-project/root/pull/362,6,['test'],"['test', 'testDetails', 'tests']"
Testability,Some packages that we use in some unit tests and tutorials don't support Python 3.13 yet. They should be listed conditionally on the Python version to make the environment resolve. This is required for building the Fedora 41 CI images. Tested with Python 3.13 on Arch Linux.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16743:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/16743,2,"['Test', 'test']","['Tested', 'tests']"
Testability,"Some speedups to targeted RooFit classes to speed up the RooFit tests such that the performance gain with the batch mode is more prominent relatively (as this PR removes unnecessary overhead that affected both the batch mode and the scalar mode). More detail in the commit messages. All changes are tested by the stressRooFit suite, including the multidimentional case in the RooNDKeysPdf.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10671:64,test,tests,64,https://root.cern,https://github.com/root-project/root/pull/10671,2,['test'],"['tested', 'tests']"
Testability,"Some tests are failing with modules such with redefinition errors; (for example `roottest-cling-parsing-scopeDict-build`). The reason for this is that we include all headers that form; the C++ module again to make sure the module is complete (some; rootcling invocations don't have all headers of the module as; arguments, most notably the Core module). The first inclusion; of these headers happens from the normal rootcling code. This patch changes this behavior that we only include the; *missing* headers that are necessary to make the C++ module; complete and not all headers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1335:5,test,tests,5,https://root.cern,https://github.com/root-project/root/pull/1335,1,['test'],['tests']
Testability,"Sometime ROOT wrongly assign kIsOnHeap bit to object, making json-based tests failing.; While these bits must be on after object reading, there is no sense preserve them.; Making JSON code more compact. Instead of:. ""fBits"": 50331649,. one will get:. ""fBits"": 1,. Should solve sporadic problems with roottest.; roottest has to be modified after that PR",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4182:72,test,tests,72,https://root.cern,https://github.com/root-project/root/pull/4182,1,['test'],['tests']
Testability,Sorry Javi!. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9831:78,test,tested,78,https://root.cern,https://github.com/root-project/root/pull/9831,2,['test'],['tested']
Testability,"Special builds are those builds that test particular configurations, which are not meant to be considered for binaries of releases. Besides the new category, two special builds are introduced:; - The ""march=native"" build, that fixes #12291; - The ""runtime modules off"" build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15412:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/15412,1,['test'],['test']
Testability,Speedup TOffsetGeneration and bench test. (v616),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3200:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/3200,1,['test'],['test']
Testability,"Splits signed and unsigned integers in different column types. For signed integers, add zigzag encoding. Zigzag encoding maps x to 2x if x is positive and to -2x-1 otherwise. So a series of small negative and positive numbers becomes a series of slightly larger but still small positive integers, which is then beneficial for split encoding and compression (more leading zeros; small negative numbers have many leading 1s in two's complement representation). For a charge column, this can make a substantial difference, e.g. compression factor 6 vs 23 with zstd on an LHCb ntuple. Overall, the fraction of data stored in small ints is typically small. On the RNTuple standard benchmarks, the gains are at the 1% level.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12978:676,benchmark,benchmarks,676,https://root.cern,https://github.com/root-project/root/pull/12978,1,['benchmark'],['benchmarks']
Testability,"Sporadic test failures are caused by the randomness of the test input.; (For some inputs the training does not converge). This patch ""fixes""; this by removing the randomness from the input to the tests. One source of randomness still remains, the dataloader shuffles the; batches internally, relying on a source of randomness that is not; reachable from the outside. However, the variability in test output is _significantly_ reduced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2251:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/2251,4,['test'],"['test', 'tests']"
Testability,"Spun off from [discussion](https://github.com/root-project/root/pull/5934/commits/6f3ec9372b011536fc314eef0835508a07d2513b#r448782416) on #5934, this PR lets us wrap move-only types in `RResult`. We add a new method `Unwrap()` to obtain the inner type by value. The caller takes ownership of the inner type, and for move-only types the `RResult` is left in an unspecified state. I decided against adding safeguards against double-moves for now because it would result in false-positive messages for types without move specializations (e.g. `return std::move(42)`). Instead, we should make clear through documentation and examples that `Unwrap()` consumes the `RResult`. . The existing const-ref access method `Get()` has been renamed `Inspect()` following Mozilla's `RResult`-like type [here](https://searchfox.org/mozilla-central/source/mfbt/Result.h#90-91). `Get()` has caused some confusion in code review and we've been looking for alternative names. . Example: ; ```cpp; auto TestMoveOnly = []() -> RResult<std::unique_ptr<int>> {; return std::make_unique<int>(1);; };; auto res = TestMoveOnly();. // Using Inspect to make a copy won't compile; // auto copy_inner = res.Inspect();. // This will compile, but we only have read-only access; const auto& copy_inner = res.Inspect();; EXPECT_EQ(1, *copy_inner);. // Instead, Unwrap is required to get ownership of the move-only type; auto move_inner = res.Unwrap();; EXPECT_EQ(1, *move_inner);; move_inner.reset();; move_inner = std::make_unique<int>(2);; EXPECT_EQ(2, *move_inner);; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5985:981,Test,TestMoveOnly,981,https://root.cern,https://github.com/root-project/root/pull/5985,2,['Test'],['TestMoveOnly']
Testability,Spurious change to enable testing jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3760:26,test,testing,26,https://root.cern,https://github.com/root-project/root/pull/3760,1,['test'],['testing']
Testability,Spurrious change to enable testing CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15562:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/15562,1,['test'],['testing']
Testability,Spurrious change to enable testing jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2917:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/2917,3,['test'],['testing']
Testability,"Standalone C++ class generation was not implemented for multiclass BDTG. This change uses the logic of TMVA::MethodBDT::GetMulticlassValues() and uses it in a new function ReadBDTG::GetMulticlassValues() when the multiclass training is used.; Tested on multiclass BDTG and binary BDTG training, in both cases a compiling and functioning standalone class is generated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3028:94,log,logic,94,https://root.cern,https://github.com/root-project/root/pull/3028,2,"['Test', 'log']","['Tested', 'logic']"
Testability,Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:5986,Test,Test,5986,https://root.cern,https://github.com/root-project/root/pull/10300,2,"['Test', 'test']","['Test', 'test-datasource-sqlite']"
Testability,"Starting from ROOT 6.24.00 we support WLCG Bearer Tokens [1] through Davix, but we still are missing infrastructure for testing them.; [1] https://root.cern/releases/release-62400/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8216:120,test,testing,120,https://root.cern,https://github.com/root-project/root/issues/8216,1,['test'],['testing']
Testability,"Starting from the `debian:sid` Docker image, create the following environment:; ```; apt update && apt dist-upgrade; apt install cmake gcc g++ git libxrootd-client-dev ninja-build python3; ```; Then clone `root.git` and configure + build with; ```; cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -Dx11=OFF ../root/; ninja; ```; Afterwards try executing `./bin/root.exe tutorials/dataframe/df103_NanoAODHiggsAnalysis.C`. It will hang and setting `XRD_LOGLEVEL=Debug` reveals:; ```; [2023-02-06 12:00:28.136048 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Sending authentication data; [2023-02-06 12:00:28.137346 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using krb5; [2023-02-06 12:00:28.137406 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol krb5: Seckrb5: No or invalid credentials; No credentials cache found (p=xrootd/eospublic.cern.ch@CERN.CH).; [2023-02-06 12:00:28.137968 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Trying to authenticate using gsi; [2023-02-06 12:00:32.761097 +0000][Debug ][XRootDTransport ] [eospublic.cern.ch:1094.0] Cannot get credentials for protocol gsi: Secgsi: ErrParseBuffer: unknown CA: cannot verify server certificate: kXGS_init; ```. Instead, installing the `xrootd-client` package and running; ```; xrdcp root://eospublic.cern.ch//eos/root-eos/cms_opendata_2012_nanoaod_skimmed/SMHiggsToZZTo4L.root .; ```; works just fine - the `Debug` log shows that it proceeds with `Trying to authenticate using uni` (after `Cannot get credentials for protocol gsi` was also signaled kind of immediately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12231:1489,log,log,1489,https://root.cern,https://github.com/root-project/root/issues/12231,1,['log'],['log']
Testability,Streamline expression of Python unit tests and test TDF histogramming in python,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1031:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/1031,2,['test'],"['test', 'tests']"
Testability,Stress histogram refactor to use Google Test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/843:40,Test,Test,40,https://root.cern,https://github.com/root-project/root/pull/843,1,['Test'],['Test']
Testability,Strips the RNTuple unit test utility header and the unit test library dependencies from unnecessary baggage. Follow-up from https://github.com/root-project/root/pull/13342#discussion_r1277816509,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13351:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/13351,2,['test'],['test']
Testability,Substitute #defines and repeated #includes of the same code snippets; with fixtures and googletest's value parametrized tests.; No functional change is intended.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1474:120,test,tests,120,https://root.cern,https://github.com/root-project/root/pull/1474,1,['test'],['tests']
Testability,"Such data can be used with JSROOT for testing only client side without running of C++; Of course, client is not fully-functional, but many aspects can be tested much-much easier",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3154:38,test,testing,38,https://root.cern,https://github.com/root-project/root/pull/3154,2,['test'],"['tested', 'testing']"
Testability,Support weighted filling from RDF to RooFit in RooAbsDataHelper and also; implement a test for it. Closes https://github.com/root-project/root/issues/7223.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16091:86,test,test,86,https://root.cern,https://github.com/root-project/root/pull/16091,1,['test'],['test']
Testability,"Suppose by default that string coded as utf-8, providing correct representation in JSON. Adding correspondent test. Solves: #6681",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8344:110,test,test,110,https://root.cern,https://github.com/root-project/root/pull/8344,1,['test'],['test']
Testability,"Suppress warnings compiling the builtin LLVM and clang. It is not; maintained by ROOT, so warnings are not necessary here. This suppresses many warnings that flood the build logs, and also; prevent us from treating warnings as errors in the CI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15483:174,log,logs,174,https://root.cern,https://github.com/root-project/root/pull/15483,1,['log'],['logs']
Testability,Switch from heuristics discovery of a friend state change (i.e. a friend that is a TChain and move from one file to the other) to a push notification of the change (via the TFriendElement object). This increase coupling between the main and friend TTree/TChain and thus need to be thoroughly tested before being considered for backport.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4913:292,test,tested,292,https://root.cern,https://github.com/root-project/root/pull/4913,1,['test'],['tested']
Testability,Syntax error leads to interpreter assert with `Must not nest within unloading transaction` when reading object,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11651:34,assert,assert,34,https://root.cern,https://github.com/root-project/root/issues/11651,1,['assert'],['assert']
Testability,"System::DispatchSignals (this=0x234e8c0, sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3615; #5 0x0000152ece6e35da in SigHandler (sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:395; #6 0x0000152ece6eb5c1 in sighandler (sig=11) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3586; #7 <signal handler called>; #8 0x0000152ecd023e41 in free () from /lib64/libc.so.6; #9 0x0000152ece69809f in __gnu_cxx::new_allocator<ROOT::TClassAlt*>::deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __t=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/ext/new_allocator.h:145; #10 0x0000152ece697bca in std::allocator_traits<std::allocator<ROOT::TClassAlt*> >::deallocate (__a=..., __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/bits/alloc_traits.h:492; #11 0x0000152ece697604 in std::_Vector_base<ROOT::TClassAlt*, std::allocator<ROOT::TClassAlt*> >::_M_deallocate (this=0x152ecc011420 <guard variable for ROOT::GenerateInitInstanceLocal(std::vector<EncodedEventId, std::allocator<EncodedEventId> > const*)::instance>, __p=0x1, __n=18446744073709551615) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:2720,test,tests,2720,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,TBranchProxy: Improve logic of fBranchCount/fLeafCount,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13277:22,log,logic,22,https://root.cern,https://github.com/root-project/root/pull/13277,1,['log'],['logic']
Testability,TClingDataMemberInfo.Offset test fails on s390x,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14512:28,test,test,28,https://root.cern,https://github.com/root-project/root/issues/14512,1,['test'],['test']
Testability,TGraph does not always have a list of functions.; fixes: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173815/testReport/projectroot/runtutorials/tutorial_graphics_AtlasExample/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12757:137,test,testReport,137,https://root.cern,https://github.com/root-project/root/pull/12757,1,['test'],['testReport']
Testability,THIS IS TEST PR.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2875:8,TEST,TEST,8,https://root.cern,https://github.com/root-project/root/pull/2875,1,['TEST'],['TEST']
Testability,"TIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G325Y212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64/libgtest_main.so.1.13.0; #17 0x00007f3e5f048b4a in __libc_start_call_main () from /lib64/libc.so.6; #18 0x00007f3e5f048c0b in __libc_start_main_impl () from /lib64/libc.so.6; #19 0x0000558efc9fc045 in _start (); ===========================================================; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:10600,test,testing,10600,https://root.cern,https://github.com/root-project/root/issues/12428,8,"['Test', 'test']","['Test', 'TestInfo', 'TestSuite', 'testing']"
Testability,"TL;DR:; Jit `auto f1(..) { ... }` instead of `auto l1 = [](..) { ... };`. Now that we have C++14 support available, we can jit functions; with auto return types instead of lambda expressions as helper; functions for filters and defines. Functions might compile a bit; faster (it might matter when we have thousands) and make our; jitted code a bit more readable. There is also a chance that it will help with some symbol resolution issues with `perf` and jitted code (cc: @amadio ). Most of the patch is non-functional renames of variables and functions,; the only functional change is:. ```diff; --- a/tree/dataframe/src/RDFInterfaceUtils.cxx; +++ b/tree/dataframe/src/RDFInterfaceUtils.cxx; @@ -229,7 +229,7 @@ BuildLambdaString(const std::string &expr, const ColumnNames_t &vars, const Colu; };. std::stringstream ss;; - ss << ""[]("";; + ss << ""("";; for (auto i = 0u; i < vars.size(); ++i) {; std::string fullType;; const auto &type = varTypes[i];; @@ -274,7 +274,7 @@ static std::string DeclareLambda(const std::string &expr, const ColumnNames_t &v; - const auto lambdaBaseName = ""lambda"" + std::to_string(exprMap.size());; + const auto lambdaBaseName = ""func"" + std::to_string(exprMap.size());; const auto lambdaFullName = ""R_rdf::"" + lambdaBaseName;. - const auto toDeclare = ""namespace R_rdf {\nauto "" + lambdaBaseName + "" = "" + lambdaExpr + ""\nusing "" +; + const auto toDeclare = ""namespace R_rdf {\nauto "" + lambdaBaseName + lambdaExpr + ""\nusing "" +; lambdaBaseName + ""_ret_t = typename ROOT::TypeTraits::CallableTraits<decltype("" +; lambdaBaseName + "")>::ret_type;\n}"";; ROOT::Internal::RDF::InterpreterDeclare(toDeclare.c_str());; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10626:1712,test,tested,1712,https://root.cern,https://github.com/root-project/root/pull/10626,1,['test'],['tested']
Testability,TLeaf::ReadBasket invalid write in TMVA test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10010:40,test,test,40,https://root.cern,https://github.com/root-project/root/issues/10010,1,['test'],['test']
Testability,TMVA TestCrossValidationSerialise memory handling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1568:5,Test,TestCrossValidationSerialise,5,https://root.cern,https://github.com/root-project/root/pull/1568,1,['Test'],['TestCrossValidationSerialise']
Testability,"TMVA new developments. * improvements for class TMVA::Envelope; * Added class TMVA::Classification to perform two class Classification; * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate; * Documentation with Doxygen; * Test with Google Tests; * Example in Tutorials. Cheers,; O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1316:155,Test,Test,155,https://root.cern,https://github.com/root-project/root/pull/1316,3,['Test'],"['Test', 'Tests']"
Testability,"TMVA new developments; * improvements for class TMVA::Envelope; * Added class TMVA::Classification to perform two class Classification; * Support to Train/Test multiple booked ml methods in parallel with MultiProc, calling the method Evaluate; * Documentation with Doxygen; * Test with Google Tests; * Example in Tutorials.; Cheers,; O.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1315:155,Test,Test,155,https://root.cern,https://github.com/root-project/root/pull/1315,3,['Test'],"['Test', 'Tests']"
Testability,TMVA: fixes in testsuite,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/129:15,test,testsuite,15,https://root.cern,https://github.com/root-project/root/pull/129,1,['test'],['testsuite']
Testability,TMultiGraph wrong scale with logarithmic axes : regession introduced in 6.22,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9011:29,log,logarithmic,29,https://root.cern,https://github.com/root-project/root/issues/9011,1,['log'],['logarithmic']
Testability,"TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007f16ba505719 in TPad::PlaceBox (this=0x237b240, o=<optimized out>, w=20, h=20, xl=; 0x7ffeea3c9dc0: 0, yb=; 0x7ffeea3c9dc8: 20) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:3108; #6 0x0000000000400c65 in main (argc=<optimized out>, argv=<optimized out>) at test/pad5.cxx:87; ===========================================================. ```. ## Expected behavior; no FPE. ## To Reproduce. Code; ```. #include <TCanvas.h>; #include <TPad.h>; #include <TBox.h>; #include <fenv.h>. #ifndef HAVE_FEENABLEEXCEPT; #if defined(__APPLE__) && defined(__MACH__). // Public domain polyfill for feenableexcept on OS X; // http://www-personal.umich.edu/~williams/archive/computation/fe-handling-example.c. inline int feenableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // previous masks; unsigned int old_excepts;. if (fegetenv(&fenv)) {; return -1;; }; old_excepts = fenv.__control & FE_ALL_EXCEPT;. // unmask; fenv.__control &= ~new_excepts;; fenv.__mxcsr &= ~(new_excepts << 7);. return fesetenv(&fenv) ? -1 : old_excepts;; }. inline int fedisableexcept(unsigned int excepts); {; static fenv_t fenv;; unsigned int new_excepts = excepts & FE_ALL_EXCEPT;; // all previ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6449:1991,test,test,1991,https://root.cern,https://github.com/root-project/root/issues/6449,1,['test'],['test']
Testability,"TTree*, double, TMVA::Types::ETreeType) (DataLoader.cxx:373); ==290973== by 0x4F9573B: ???; ==290973== by 0x4F9107E: ???; ==290973== by 0x6EC8BCD: cling::IncrementalExecutor::executeWrapper(llvm::StringRef, cling::Value*) const (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4EA4E: cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6E4F13C: cling::Interpreter::EvaluateInternal(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F2EF9F: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6C20B67: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (TCling.cxx:2438); ==290973== by 0x6C215B6: TCling::ProcessLine(char",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433:2310,test,testing,2310,https://root.cern,https://github.com/root-project/root/issues/14433,1,['test'],['testing']
Testability,TTree::Draw expression was mail-formed in some case. Use TWebCanvas by default in RBrowser. Update JSROOT to support more kind of log scale,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12312:130,log,log,130,https://root.cern,https://github.com/root-project/root/pull/12312,1,['log'],['log']
Testability,TTreeProcessorMT should call `friend->BuildIndex` in each multi-thread task but doesn't. The test we have is single-thread only. First reported at https://root-forum.cern.ch/t/reading-friend-trees-using-rdataframe-in-multithread-mode-or-spark-cluster/53513 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12260:93,test,test,93,https://root.cern,https://github.com/root-project/root/issues/12260,1,['test'],['test']
Testability,Temporary change to debug assertion failure on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7297:26,assert,assertion,26,https://root.cern,https://github.com/root-project/root/pull/7297,1,['assert'],['assertion']
Testability,Temporary disable Bulk I/O tests on 32b machines,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3704:27,test,tests,27,https://root.cern,https://github.com/root-project/root/pull/3704,1,['test'],['tests']
Testability,Test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14623:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/14623,1,['Test'],['Test']
Testability,Test 25 had a minor difference in size compared to the reference value stored; in the reference file. This is a simple ratio plot example. All the other formats are; ok. A pdf comparison with a previous version shows that the two pdf files are the; same. So we give a bit more error margin.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12343:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/12343,2,['Test'],['Test']
Testability,Test 628 patches,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15123:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/15123,1,['Test'],['Test']
Testability,Test Issue,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6489:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/6489,1,['Test'],['Test']
Testability,Test PR for 6.14 builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4595:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/4595,1,['Test'],['Test']
Testability,Test PR for R__COMPLETE_MEM_TERMINATION,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/787:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/787,1,['Test'],['Test']
Testability,Test PR to check build issues and incompatibilities with current test suite.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/983:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/983,2,"['Test', 'test']","['Test', 'test']"
Testability,Test PR to trigger jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/945:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/945,1,['Test'],['Test']
Testability,"Test PR, do not merge please.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/908:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/908,1,['Test'],['Test']
Testability,"Test PR, do not merge.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/856:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/856,1,['Test'],['Test']
Testability,"Test PR, ignore please",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/962:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/962,1,['Test'],['Test']
Testability,Test SIGTERM vs ~TFile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13300:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/13300,1,['Test'],['Test']
Testability,Test `tutorial-roostats-CreateExampleFile` fails for me with GCC 7.3.0 and C++17=ON.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1704:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/1704,1,['Test'],['Test']
Testability,Test backport action v2,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15132:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/15132,1,['Test'],['Test']
Testability,Test build of Eve7 components - DO NOT MERGE!!!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2705:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/2705,1,['Test'],['Test']
Testability,Test clingtest-check-cling fails (language mismatch),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10693:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/10693,1,['Test'],['Test']
Testability,Test commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1322:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/1322,1,['Test'],['Test']
Testability,Test coverage compilation flag,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/474:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/474,1,['Test'],['Test']
Testability,Test crash with GCC 13 and C++20,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13851:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/13851,1,['Test'],['Test']
Testability,Test depending on histfactory are run even if histfactory is not build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6911:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/6911,1,['Test'],['Test']
Testability,"Test directories should be added using ROOT_ADD_TEST_SUBDIRECTORY. If add_subdirectory is used the test binaries get installed during ""make install"". if(testing) is redundant - it is already part of the ROOT_ADD_TEST_SUBDIRECTORY macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2247:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/2247,3,"['Test', 'test']","['Test', 'test', 'testing']"
Testability,Test error/warning/info messages in RDF tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5845:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/5845,2,"['Test', 'test']","['Test', 'tests']"
Testability,Test evaluation of gradient of multidimensional functions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/887:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/887,1,['Test'],['Test']
Testability,"Test fails on aarch64 and ppc64le on Fedora 30 and Fedora rawhide:; Test 3 : Purge, Reuse of gaps in TFile......................... FAILED; File size= 52010 (expected 51886 +/- 100); Comp Fact= 2.00 (expected 2.1 +/- 0.3)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4025:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/4025,2,['Test'],['Test']
Testability,Test failure in RNTuple: RNTuple.TClassEBO fails,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/12428,1,['Test'],['Test']
Testability,Test failure with `nbconvert-7.14`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14303:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/14303,1,['Test'],['Test']
Testability,Test failures in RNTuple: 32 bit specific,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/12427,1,['Test'],['Test']
Testability,Test failures in root7 tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8073:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/8073,2,"['Test', 'test']","['Test', 'tests']"
Testability,Test failures in tutorial-roofit when building without FFTW,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8245:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/8245,1,['Test'],['Test']
Testability,Test failures on MacOS with Xcode 12,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6563:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/6563,1,['Test'],['Test']
Testability,Test failures on s390x,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/10409,1,['Test'],['Test']
Testability,"Test failures with C++17, but without `runtime_cxxmodules`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13058:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/13058,1,['Test'],['Test']
Testability,Test failures with Python 3.13,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15430:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/15430,1,['Test'],['Test']
Testability,Test failures with ROOT master on Gentoo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/7936,1,['Test'],['Test']
Testability,Test file: `math/smatrix/test/testSMatrix.cxx`. Failing test on CDash:; http://cdash.cern.ch/testDetails.php?test=24128678&build=345047,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/511:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/511,6,"['Test', 'test']","['Test', 'test', 'testDetails', 'testSMatrix']"
Testability,Test fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/155:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/155,2,['Test'],['Test']
Testability,Test fixes for mac13arm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12784:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/12784,1,['Test'],['Test']
Testability,Test for Jenkins CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/338:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/338,2,['Test'],['Test']
Testability,Test for not function in the stdlib,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3413:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/3413,1,['Test'],['Test']
Testability,Test glitches,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14112:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/14112,1,['Test'],['Test']
Testability,"Test https://its.cern.ch/jira/browse/ROOT-10021 in the new CI, to see the status of this issue",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15918:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/15918,1,['Test'],['Test']
Testability,Test if json_fwd.hpp exists,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8345:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/8345,1,['Test'],['Test']
Testability,"Test if root install has roofit, if yes add the roofit and other libraries to rootlibs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1002:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/1002,1,['Test'],['Test']
Testability,Test inlining of TVec<(unsigned) long long> ad their autoloading does not work on ubu 16.04 gcc 5.4,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1944:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/1944,1,['Test'],['Test']
Testability,Test install,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/329:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/329,1,['Test'],['Test']
Testability,Test just to make sure...,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13654:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/13654,1,['Test'],['Test']
Testability,Test mentioned in the title was enabled. This was done by changing the way we call the method Take() of the RDF objects. In new Cppyy the type of a templated method needs to be put in square brackets.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4123:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/4123,1,['Test'],['Test']
Testability,Test new nodes with a dummy file - NOT FOR REVIEW,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14631:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/14631,1,['Test'],['Test']
Testability,Test possible fix for regex in build dir,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13733:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/13733,1,['Test'],['Test']
Testability,Test pyunittests-pyroot-pyz-ttree-branch-attr fails on Intel 32 bit Linux,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6813:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/issues/6813,1,['Test'],['Test']
Testability,Test reenable rootmap,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1139:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/1139,1,['Test'],['Test']
Testability,Test state of v614 branch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2183:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/2183,1,['Test'],['Test']
Testability,Test test in roottest PR https://github.com/root-project/roottest/pull/1197,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16545:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/16545,2,"['Test', 'test']","['Test', 'test']"
Testability,Test the files existence before using them,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10471:0,Test,Test,0,https://root.cern,https://github.com/root-project/root/pull/10471,1,['Test'],['Test']
Testability,"TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for ... ; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; [#0] WARNING:DataHandling -- FAIL; test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy); Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events; ok; test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted); Test exporting to numpy and then importing back a weighted dataset. ... ok; test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic); Basic test with a real value and a category. ... ok; test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight); Test if the optional computation of derived weights works. ... ok; test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted); Test with a weighted dataset. ... ok; ======================================================================; FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", line 145, in test_ignoring_out_of_range; self.assertEqual(dataset_numpy.numEntries(), n_in_range); AssertionError: 42 != 0; ----------------------------------------------------------------------; Ran 6 tests in 1.621s; FAILED (failures=1); ~~~. ### Expected behavior. No failure. This test did not fail with numpy 1.23.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12162:1408,Test,TestRooDataSetNumpy,1408,https://root.cern,https://github.com/root-project/root/issues/12162,1,['Test'],['TestRooDataSetNumpy']
Testability,Tested in roottest to enable both references for buitin_lz4 and external lz4 (PR #289),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3400:0,Test,Tested,0,https://root.cern,https://github.com/root-project/root/pull/3400,1,['Test'],['Tested']
Testability,Tested with 6.16/00,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3570:0,Test,Tested,0,https://root.cern,https://github.com/root-project/root/pull/3570,1,['Test'],['Tested']
Testability,"Tested with. ```python; from dask.distributed import LocalCluster, Client; import ROOT. # Point RDataFrame calls to Dask RDataFrame object; RDataFrame = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; ROOT.RDF.Experimental.Distributed.optimized = True. def create_connection():; cluster = LocalCluster(n_workers=2, threads_per_worker=1, processes=True); client = Client(cluster); return client. if __name__ == ""__main__"":. # Create the connection to the mock Dask cluster on the local machine; connection = create_connection(); # Create an RDataFrame that will use Dask as a backend for computations; df = RDataFrame(100, daskclient=connection, npartitions = 2). # First run with Count operations; def1 = df.Define(""x"",""rdfentry_"").Define(""y"",""rdfentry_"").Define(""z"",""rdfentry_""); def2 = df.Define(""aa"",""rdfentry_"").Filter(""aa > 50""); c1 = def1.Count(); c2 = def2.Count(); print(""\n\n"", c1.GetValue(), c2.GetValue()). # Second run with Count; c3 = df.Count(); print(""\n\n"", c3.GetValue()). # Test AsNumpy; print(df.Define(""x"",""rdfentry_"").AsNumpy()). # Test Snapshot; snap = df.Define(""x"",""rdfentry_"").Snapshot(""mytree"",""myfile.root""); print(snap._headnode.inputfiles); print(snap.Count().GetValue()); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10648:0,Test,Tested,0,https://root.cern,https://github.com/root-project/root/pull/10648,4,"['Test', 'mock']","['Test', 'Tested', 'mock']"
Testability,Testing PR build.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2387:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/2387,5,['Test'],['Testing']
Testability,Testing before submitting this patch to clang upstream!. This gives 20 MB memory improvement :D :D,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2903:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/2903,1,['Test'],['Testing']
Testability,Testing cmake infrastructure,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5584:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/5584,1,['Test'],['Testing']
Testability,Testing current build infrastructure,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5155:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/5155,1,['Test'],['Testing']
Testability,Testing infrastructure [WIP].,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5130:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/5130,1,['Test'],['Testing']
Testability,Testing jenkings state.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2173:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/2173,1,['Test'],['Testing']
Testability,Testing jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2154:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/2154,1,['Test'],['Testing']
Testability,Testing less_includes features,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5154:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/5154,1,['Test'],['Testing']
Testability,Testing the addition of the new github issue template form https://docs.github.com/en/communities/using-templates-to-encourage-useful-issues-and-pull-requests/configuring-issue-templates-for-your-repository#creating-issue-forms,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12888:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/12888,1,['Test'],['Testing']
Testability,Testing whether bot actually comments on PRs of users that are not in the admin list of the bot.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/340:0,Test,Testing,0,https://root.cern,https://github.com/root-project/root/pull/340,1,['Test'],['Testing']
Testability,"Tests and documentation for the converttonotebook script are improved. Also, the new ratioplot tutorials were converted to notebooks.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/233:0,Test,Tests,0,https://root.cern,https://github.com/root-project/root/pull/233,1,['Test'],['Tests']
Testability,"Tests are labeled `longtest` if they run longer than 1 minute, based on this build: http://cdash.cern.ch/viewTest.php?onlypassed&buildid=329399; This is to be able to skip tests that runs for longer time, when for example during building of PRs when extensive testing may not be needed. Will make another PR in https://github.com/root-project/roottest as well that has the other tests labeled.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/408:0,Test,Tests,0,https://root.cern,https://github.com/root-project/root/pull/408,4,"['Test', 'test']","['Tests', 'testing', 'tests']"
Testability,Tests are still failing https://github.com/root-project/root/actions/runs/8383591892,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15033:0,Test,Tests,0,https://root.cern,https://github.com/root-project/root/pull/15033,1,['Test'],['Tests']
Testability,Tests fail in case of `-march=native` so we ought to test that.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12291:0,Test,Tests,0,https://root.cern,https://github.com/root-project/root/issues/12291,2,"['Test', 'test']","['Tests', 'test']"
Testability,"Tests suite now covers all possible combination of vectors both with; `swap` and `std::swap`. Previously, some special cases were omitted.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10343:0,Test,Tests,0,https://root.cern,https://github.com/root-project/root/pull/10343,1,['Test'],['Tests']
Testability,"Testsuit was actually looking at '""' for match, comparing literal 21; should be enough.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2773:0,Test,Testsuit,0,https://root.cern,https://github.com/root-project/root/pull/2773,1,['Test'],['Testsuit']
Testability,Thanks for fixing the root 6.24 build issues for ppc64le with gcc9.3 ( https://github.com/root-project/root/issues/9297) but looks like we still have build issues with GCC 10.3 and 11.2. We get build errors like [a] full build log is available at https://cmssdt.cern.ch/SDT/jenkins-artifacts/pull-request-integration/PR-8678b1/21211/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/log . FYI @vgvassilev @hahnjo. [a] https://github.com/cms-sw/cmsdist/pull/7500#issuecomment-992272002; ```; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/include -D__ROOFIT_NOBANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:227,log,log,227,https://root.cern,https://github.com/root-project/root/issues/9424,6,"['log', 'test']","['log', 'testBuildDir', 'tests']"
Testability,"Thanks to @dpiparo suggestion, I wrote a script automatically removing unnecessary includes under a directory. In; this patch I removed unnecessary includes in roofit/roofitcore/src/ for test, but; you can use this script to any directories. Script:; https://gist.github.com/yamaguchi1024/d95843a5e549fcc6ba0e6e23da5c132a. How to use:; python3 iwyu.py /path/to/directory/you/want/. Limitations:; include-what-you-use is not complete, it sometimes remove *necessary*; includes. So you must compile and modify diff or checkout files if necessary include was; removed. I reccomend to use this script in a directory where you're; familiar with, because you anyway have to check the diff.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1748:187,test,test,187,https://root.cern,https://github.com/root-project/root/pull/1748,1,['test'],['test']
Testability,"The AddressSanitizer also loads the LeakSanitizer flags and even though the documentation suggests that `exitcode` can be set per sanitizer, this doesn't appear to be the case and our tests exit with code 0 after the AddressSanitizer found a problem. After this change, around 100 tests will fail due to several issues.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10005:184,test,tests,184,https://root.cern,https://github.com/root-project/root/pull/10005,2,['test'],['tests']
Testability,"The CMake build system is broken with genvector=OFF (does not really disable genvector, and tests fail if that is fixed). Therefore, it was decided that it's better to just make this always ON and remove the option for disabling it altogether. See #2155 for more details.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2326:92,test,tests,92,https://root.cern,https://github.com/root-project/root/pull/2326,1,['test'],['tests']
Testability,"The Failure is visible on the GCC 12 / Fedora 36 build: https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/3285/LABEL=ROOT-fedora36,SPEC=default,V=master/testReport/junit/projectroot.roottest.root.tree/branches/roottest_root_tree_branches_make/; for example:; ```; +Error in <TTree::Branch>: The class requested (vector<int>) for the branch ""vec"" is an instance of an stl collection and does not have a compiled CollectionProxy. Please generate the dictionary for this collection (vector<int>) to avoid to write corrupted data.; ```; This indicates that the generation of the dictionary for `std::vector<int>` failed even-though it is explicitly requested as part of the G__Core.cxx dictionary. . And indeed when inspecting the build log we see for `G__Core.cxx`:; ```; Warning: Unused class rule: vector<Int_t> ; ```. I narrowed down the problem to the presence of:; ```; -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes ; ```; on the command line. And it can easily be reproduce with the files:; ```; // a.h; #include <vector>; ```; and; ```; // aLinkDef.h ; #pragma link C++ class vector<Int_t>+;; ```; and with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx a.h aLinkDef.h; ```; we get a proper dictionary for the vector. While with; ```; /home/sftnight/build/manual/build/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/sftnight/build/manual/build/lib/libCore.so -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes a.h aLinkDef.h ; ```; we get an empty dictionary and the warning:. ```; Warning: Unused class rule: vector<Int_t> ; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11329:172,test,testReport,172,https://root.cern,https://github.com/root-project/root/issues/11329,2,"['log', 'test']","['log', 'testReport']"
Testability,"The G__matchfilename() implements a file comparison check used; specifically for loading/unloading of the libraries and the source code.; On UNIX-like systems the basic filename comparison is supplemented an; additional file match condition is based on comparing file attributes; returned by the stat() syscall. On a typical load/unload call, the; G__matchfilename() is iterated over items of G__srcfile, which produces; a number of stat() calls that is quadratic in number of loaded files. In our specific case we observe an occasional poor performance on AFS; network filesystem. The suggested change introduces a cache for the; stat() calls that should allow to reduce the number of calls to scale; linearly. # This Pull request:. ## Changes or fixes:. Fixes downstream issue star-bnl/star-sw#115. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9010:822,test,tested,822,https://root.cern,https://github.com/root-project/root/pull/9010,1,['test'],['tested']
Testability,The IMT tests were both registered with ROOT_ADD_GTEST and; ROOT_ADD_UNITTEST_DIR. The latter was removed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6192:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/6192,1,['test'],['tests']
Testability,"The IO for the tests statistics never worked anyway, not even for a simple Gaussian likelihood. It is better to exclude the old test statistics classes complete from IO. Like this, the users don't even attempt to do IO with them, and to developers it's clear that IO backwards compatibility is not necessary, taking away some maintenance burden. Here are some simple scripts to show that storing test statistics doesn't work anyway. Create a NLL object, write it of file and minimize it:; ```c++; void write(); {; using namespace RooFit;. RooRealVar x(""x"", ""x"", -10, 10);; RooRealVar mean(""mean"", ""mean of gaussian"", 1, -10, 10);; RooRealVar sigma(""sigma"", ""width of gaussian"", 1, 0.1, 10);. RooGaussian gauss(""gauss"", ""gaussian PDF"", x, mean, sigma);. auto *data = gauss.generateBinned(x, 10000);. auto nll = gauss.createNLL(*data);. RooWorkspace ws(""ws"");; ws.import(*nll);. ws.Print();. ws.writeToFile(""ws.root"");. RooMinimizer m{*nll};; m.setPrintLevel(-1);; m.minimize(""Minuit"", ""migrad"");; auto res = m.save();. res->Print();; }; ```. Attempt to read the NLL and minimize it again:; ```c++; void open() {. auto f = TFile::Open(""ws.root"");. auto ws = f->Get<RooWorkspace>(""ws"");. ws->Print();. ws->function(""nll_gauss_genData"")->Print();. auto nll = static_cast<RooNLLVar*>(ws->function(""nll_gauss_genData""));. auto& pdf = nll->function();; auto& data = nll->data();. RooMinimizer m{*nll};; m.setPrintLevel(-1);; m.minimize(""Minuit"", ""migrad"");; auto res = m.save();. res->Print();; }; ```. The result is completely off this time. It was also confirmed with Wouter in one of the RooFit meetings that IO of the old test statistics never really worked and was also not intended to be done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11909:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/11909,4,['test'],"['test', 'tests']"
Testability,"The Johnson PDF is frequently used in LHCb, who mostly implement it using a TFormula.; This has negative impact on speed and the precision for integrals, because these can only be done numerically.; Here, it is added as compiled code, with an optimised generator function that gets around the wasteful accept/reject method, with much more precise analytical integrals, as well as precision tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3851:390,test,tests,390,https://root.cern,https://github.com/root-project/root/pull/3851,1,['test'],['tests']
Testability,"The LoopManager now tracks the actions that have already run. This commit is needed by the Graph drawing PR. This can't be directly tested as the LM is not exposed. To test it I used the following code, not commited. RInterface has a Test() method that just call GetAllActions() on the RLoopManager. ```; TEST_P(RDFSimpleTests, Action); {; RDataFrame rd1(8);; EXPECT_EQ(rd1.Test().size(), 0);; auto a1 = rd1.StdDev<ULong64_t>(""tdfentry_"");; EXPECT_EQ(rd1.Test().size(), 1);; auto a2 = rd1.Mean<>(""tdfentry_"");; EXPECT_EQ(rd1.Test().size(), 2);; auto a3 = rd1.Count();. EXPECT_EQ(rd1.Test().size(), 3);; *a1;; EXPECT_EQ(rd1.Test().size(), 3);; {; auto a4 = rd1.StdDev<ULong64_t>(""tdfentry_"");; EXPECT_EQ(rd1.Test().size(), 4);; }; EXPECT_EQ(rd1.Test().size(), 3);; {; auto a4 = rd1.StdDev<ULong64_t>(""tdfentry_"");; EXPECT_EQ(rd1.Test().size(), 4);; *a4;; }; EXPECT_EQ(rd1.Test().size(), 3);; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2470:132,test,tested,132,https://root.cern,https://github.com/root-project/root/pull/2470,12,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,The PR changes TDF's source code as well as the tutorials. A related PR that changes the tests is open in roottest. I also added an extra commit with a minor fix to TDF's user guide.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/703:89,test,tests,89,https://root.cern,https://github.com/root-project/root/pull/703,1,['test'],['tests']
Testability,"The ParamHistFunc in the histfactory has a persistent `std::map<int,int>`; data member. It can be replaced with a `std::vector<int>` where the; previous key is the index in the vector. This is much faster. As the igprof reports below show, it is even faster to calculate the bin indices on the fly, which is proposed in this PR. Schema evolution is not a problem here. With this commit, the data; member is made non-persistent because it can be computed from other; persistent data members. This PR was benchmarked with [an example from the ROOT forum](https://root-forum.cern.ch/t/bias-in-histfactory-fit/44330/7):; * igprof report [before this PR (caching with `std::map`)](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hf_ParamHistFunc_1_old); * igprof report [after the first commit of the PR (caching with `std::vector`)](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hf_ParamHistFunc_1_new); * igprof report [after the PR (calculating on the fly)](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/hf_ParamHistFunc_1_new_2). The difference is about a 50 % speedup of `ParamHistFunc::evaluate()` and a 10 % speedup of the full example.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7838:503,benchmark,benchmarked,503,https://root.cern,https://github.com/root-project/root/pull/7838,1,['benchmark'],['benchmarked']
Testability,"The PiecewiseInterpolation class is used in the context of HistFactory models, where is is always used the same way: all RooAbsReals in _lowSet, _histSet, and also nominal are 1D RooHistFuncs with with same structure. Therefore, we can make a big optimization: we get the bin index ony once here in the generated code for PiecewiseInterpolation. Then, we also rearrange the histogram data in such a way that we can always pass the same arrays to the free function that implements the interpolation, just with a dynamic offset calculated from the bin index. This change is covered by the `testHistFactory` unit test. Together with the change suggested in the other draft PR, where the generated code is split up into separate functions for each channel, this PR addresses the plan of work item ""Reduce JITting time for AD in RooFit"". Different from that optimization, this one doesn't depend on the upcoming Clad 1.5, so it can be merged without upgrading Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15543:588,test,testHistFactory,588,https://root.cern,https://github.com/root-project/root/pull/15543,2,['test'],"['test', 'testHistFactory']"
Testability,"The RCutFlowReport class could benefit of a Merge method since it would ease the implementation of the Report RDataFrame operation in a distributed environment.; In a situation where two chunks of a dataset have been processed separately, a report for each chunk would only contain filtering information of that chunk. In this case, merging the two reports together should provide general information on the cut flow of the entire dataset. Right now, the Merge function works as follows:; It takes another RCutFlowReport as argument (passed by reference).; The fCutInfos member of the current RCutFlowReport is stored in a temporary variable and then cleared.; For each TCutInfo, another TCutInfo with the same name is searched in the other report.; The information on all the entries and the passed entries is then summed up between the two objects.; Finally a new TCutInfo with the resulting information is added to the initial RCutFlowReport. The clearing of fCutInfos is needed since the fPass and fAll members of TCutInfo are const.; If seen appropriate, the const keyword can be removed, then the fCutInfos could be just updated each time. A very simple test has been added. TODO:; - [ ] Add more thorough tests.; - [ ] Decide on the return type of the Merge function (now is void).; - [ ] Possibly overload the function with RCutFlowReport* as argument.; - [ ] Finally add documentation when everything is set.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4174:1160,test,test,1160,https://root.cern,https://github.com/root-project/root/pull/4174,2,['test'],"['test', 'tests']"
Testability,The RDF dependencies were cleaned up in commit 8d7fa5f87c and commit f215692b3d removed the RDF unit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16292:101,test,test,101,https://root.cern,https://github.com/root-project/root/pull/16292,1,['test'],['test']
Testability,"The RDataFrameHelper should be consistent with creating a RooDataSet; from a TTree, meaning out-of-range events should be skipped. This is; implemented in this commit, borrowing the logic from; `RooTreeDataStore::loadValues()`. A unit test is also implemented. The previous logic of just taking just all values to fill the dataset; was very dangerous, because these values then clipped to the RooRealVar; limits and biased the number of events observed at the boundaries. Closes https://github.com/root-project/root/issues/11017.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11018:182,log,logic,182,https://root.cern,https://github.com/root-project/root/pull/11018,3,"['log', 'test']","['logic', 'test']"
Testability,"The RNTuple binary format v1 states that feature flags bitmap is encoded as a sequence of 64-bit integers in which the MSb indicates that another 64-bit block follows. If more than one 64-bit integer is serialized, the MSb of all but the last integer should be `1` and the rest of the bits should preserve their original meaning.; Therefore, this PR avoids the use of two's complement in this case in favour of manually setting the MSb. According to my interpretation of the [RNTuple binary format v1](https://github.com/root-project/root/blob/master/tree/ntuple/v7/doc/specifications.md) specification, this is the only case in which this happens. All the other uses of two's complement are correct, e.g. in frames or locators we specify that negative sizes have a different/specific meaning. ## Changes or fixes:; - Fix feature flags bitmap serialization. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9418:879,test,tested,879,https://root.cern,https://github.com/root-project/root/pull/9418,1,['test'],['tested']
Testability,"The RNTupleCompresser::Zip overload with a specified output buffer (`Zip(const void *from, std::size_t nbytes, int compression, void *to)`) always overwrites the first block in the output buffer when compressing large files that consist of multiple blocks (i.e., when input size > 16MB). # This Pull request:. ## Changes or fixes:; - RNTupleCompresser::Zip now correctly writes the result to the provided output buffer when compressing multiple blocks; - Added a test case that tests this Zip overload with data containing multiple blocks. ## Checklist:. - [x] tested changes locally. This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13202:463,test,test,463,https://root.cern,https://github.com/root-project/root/pull/13202,3,['test'],"['test', 'tested', 'tests']"
Testability,"The RNTupleUtil standard library should contain data transformation and inspection tools for RNTuples. To start with, it contains the stub class RNTupleImporter that will convert TTrees to RNTuple. In the future, we may add, e.g., visualization and debugging tools. While the RNTuple core library should remain light on dependencies, the RNTupleUtil library may depend on Tree, graphics, RDF and the rest of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11753:134,stub,stub,134,https://root.cern,https://github.com/root-project/root/pull/11753,1,['stub'],['stub']
Testability,"The ROOT binaries don't come with `fft3` enabled because of licensing incompatibilities (GPL). However, it is not necessary to recompile all of ROOT to get the `fftw3` functionality. That's because the `math/fftw` library is not used directly, but nicely abstacted away with ROOTs plugin system via `TVirtualFFT`. Therefore, it would be very convenient for users if `math/fftw` could be built standalone, such that an existing ROOT installation can pick up these plugins. This was tested by building ROOT without `fftw3`, then also building and installing `math/fftw` standalone. I was running the RooFit convolution unit tests before and after installing `math/fftw` standalone. Indeed, the unit tests fail before installing it and pass after, showing that the standaline installation of the plugin works. This commit would address the question on the ROOT forum:. https://root-forum.cern.ch/t/how-to-add-optional-libraries-by-homebrew",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13774:481,test,tested,481,https://root.cern,https://github.com/root-project/root/pull/13774,3,['test'],"['tested', 'tests']"
Testability,"The RapidYAML of the RooFit JSON interface is now always disabled because it doesn't work anymore for RooFitHS3. The `nlohmann_json` interface is always used and works well, hence rapidyaml was not tested anymore and the code was rotting until it didn't work. The relevant code is still left in the CMakeLists.txt in case someone wants to revive the RapilYAML backend. Closes #15118. Backport of https://github.com/root-project/root/pull/15247.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15260:198,test,tested,198,https://root.cern,https://github.com/root-project/root/pull/15260,3,['test'],['tested']
Testability,"The RapidYAML of the RooFit JSON interface is now always disabled because it doesn't work anymore for RooFitHS3. The `nlohmann_json` interface is always used and works well, hence rapidyaml was not tested anymore and the code was rotting until it didn't work. The relevant code is still left in the CMakeLists.txt in case someone wants to revive the RapilYAML backend. Closes #15118. Should be backported up to 6.28.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15247:198,test,tested,198,https://root.cern,https://github.com/root-project/root/pull/15247,1,['test'],['tested']
Testability,"The RooAbsPdf version number is incremented, going with the removal of; some unused data members:. * `_rawValue`; * `_traceCount`; * `_negCount`. Furthermore, the `_errorCount` member is now made transient, because it; is only related to logging, counting the logged errors to avoid printing; errors them repeatedly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11093:238,log,logging,238,https://root.cern,https://github.com/root-project/root/pull/11093,2,['log'],"['logged', 'logging']"
Testability,The RooBSplines code was originally developed by Aaron Armbruster and maintained internally within the ATLAS collaboration since 2012. This PR adds the `RooBSplines` class and the `RooBSplineBases` class to the core RooFit ecosystem. . ## Changes or fixes:; added `RooBSplines.cxx` and `RooBSplineBases.cxx` with associated headers and CMakeLists and LinkDef updates.; package was moved to /root/roofit/roofit/ rather than [roostats/histfactory](https://github.com/svenkreiss/roostats/commits/development/roofit/histfactory/inc/RooStats/HistFactory/RooBSplineBases.h). ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14015:590,test,tested,590,https://root.cern,https://github.com/root-project/root/pull/14015,1,['test'],['tested']
Testability,The RooBSplines code was originally developed by Aaron Armbruster and maintained internally within the ATLAS collaboration since 2012. This PR adds the `RooBSplines` class and the `RooBSplineBases` class to the core RooFit ecosystem. . ## Changes or fixes:; added `RooBSplines.cxx` and `RooBSplineBases.cxx` with associated headers and CMakeLists and LinkDef updates.; package was moved to /root/roofit/roofit/ rather than [roostats/histfactory](https://github.com/svenkreiss/roostats/commits/development/roofit/histfactory/inc/RooStats/HistFactory/RooBSplineBases.h). update of #14015 rebased to master. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14082:626,test,tested,626,https://root.cern,https://github.com/root-project/root/pull/14082,1,['test'],['tested']
Testability,"The RooFit test statistic classes give wrong results if they are; constructed from multiple comma-separated ranges. This can cause errors,; such as the one reported in Jira issue [ROOT-10038](https://sft.its.cern.ch/jira/browse/ROOT-10038). This commit suggests to throw an exception if multiple comma-separated; ranges are detected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7827:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/7827,1,['test'],['test']
Testability,"The RooIntegrator1D class is refactored such that it is a wrapper around a free function with only STL dependencies that does the Romberg integration. This is very useful for R & D projects, because the integration code can be reused standalone outside of RooFit. This can serve as a reference when implementing and benchmarking new integration methods.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13336:316,benchmark,benchmarking,316,https://root.cern,https://github.com/root-project/root/pull/13336,1,['benchmark'],['benchmarking']
Testability,"The RooList was deprecated in the previous v626 release, and is now; removed. A RooList was just a `TList` with added member functions for; convenience, so it was never necessary to have this as a separate class; supported in IO. The RooList was still used in two RooFit classes until now: `RooPlot`; and `SamplingDistPlot`. This commit also removes this remaining usage. In the case of `SamplingDistPlot`, none of the special member functions were; used: the `RooList` could be replaced trivially with a `TList`. In `RooPlot`, the `RooList` was replaced with a; `std::vector<std::pair<TObject*,std::string>>`, for which it was easy to; reimplement the algorithms that were covered by the former `RooList`; member functions. The backwards compatibility with existing RooPlot is tests by; `stressRooFit`, as the reference file stores RooPlots with the; `RooList`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9851:778,test,tests,778,https://root.cern,https://github.com/root-project/root/pull/9851,1,['test'],['tests']
Testability,"The RooPoisson is implemented with TMath::Poisson, which is normalized; if x covers the full definition range of the Poisson distribution, which; is zero to infinity. By correctly reporting this self-normalization in; that case, the creation of a dummy integral object that returns one is; avoided. The reduced overhead results in a significant speedup of; HistFactory fits with gamma constraints between 10 and 15 % in the hf001; tutorial example. To show that the integral object would only be a dummy integral, here is the relevant line of code: https://github.com/root-project/root/blob/master/roofit/roofit/src/RooPoisson.cxx#L103. To confirm the speedup, here is the `benchHistFactory` output before this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.109 ms 0.110 ms 6391; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.915 ms 0.917 ms 762; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.075 ms 0.076 ms 9156; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.66 ms 1.66 ms 423; ```. and after this PR:; ```; ----------------------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ----------------------------------------------------------------------------------------------; hf001__BinnedFitOptimization_ON___BatchMode_OFF/1/0 0.102 ms 0.103 ms 6744; hf001__BinnedFitOptimization_OFF__BatchMode_OFF/0/0 0.892 ms 0.894 ms 786; hf001__BinnedFitOptimization_ON___BatchMode_ON_/1/1 0.064 ms 0.065 ms 10835; hf001__BinnedFitOptimization_OFF__BatchMode_ON_/0/1 1.61 ms 1.61 ms 431; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10836:817,Benchmark,Benchmark,817,https://root.cern,https://github.com/root-project/root/pull/10836,2,['Benchmark'],['Benchmark']
Testability,"The RooProdPdf is not trivial to deal with in BatchMode, because its; actual servers depend on the normalization set. One should rather think of the RooProdPdf as something like a caching; PDF, but instead of creating a cached HistPdf for a given normalization; set, it creates an internal computation graph representing the; normalized product for a given normalization set. This internal computation graph is not expsed via the usual; client-server interface. However, this is strictly required for the new; BatchMode: internal computation graphs are not allowed because the; RooFitDriver would not be able to manage memory copies between host and; device, and also schedeuling. For this reason, BatchMode support is removed from the RooProdPdf class.; We only keep a `RooProdPdf::calculateBatch` function that can be used to; evaluated a given cache element when all the internal args are contained; in the BatchMode data map. To correctly evaluate these computation graphs in the batchMode, a new; class is introduced that wraps them with the correct client-server; interface. Instances of this class are then created for each ProdPdf in; the original computation graph, and the ProdPdfs are replaced with these; objects. This means all the different RooProdPdf cache configurations are now; correctly dealt with in the BatchMode, making the; `RooProdPdf/TestProdPdf.CachingOpt` unit test also pass with the; BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11400:1359,Test,TestProdPdf,1359,https://root.cern,https://github.com/root-project/root/pull/11400,2,"['Test', 'test']","['TestProdPdf', 'test']"
Testability,"The RooRealAnalytic class, and implementation detail of the RooRealIntegral, was not really necessary. You can get the same functionality when creating the corresponding analytic integral just with `createIntegral()`, and then wrapping the integral in a RooRealBinding. There are many unit tests that cover such hybrid integrals, but a simple code snippet to quickly test it is this one:. ```c++; RooWorkspace ws;; ws.factory(""Gaussian::gauss(x[-10, 10], mu[0, -10, 10], sigma[0.1, 3, 10])"");; RooArgSet iset{*ws.var(""x""), *ws.var(""sigma"")};. std::unique_ptr<RooAbsReal> integral{ws.pdf(""gauss"")->createIntegral(iset)};; integral->Print(""v"");; std::cout << integral->getVal() << std::endl;; ```. This commit is the first of a new effort to make the RooFit integral code simpler, in order to make it easier to eventually implement numerical integrals on the GPU.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13334:290,test,tests,290,https://root.cern,https://github.com/root-project/root/pull/13334,2,['test'],"['test', 'tests']"
Testability,"The RooStringVar class is planned to get deprecated soon, hence RooFit; code that is still using it is getting migrated away from it. In the RooCmdConfig case, one can use simple configuration structs; insread of RooStringVar. This change is tested by many unit tests in RooFit, as the; `RooCmdConfig` is used in many places, for example `RooAbsPdf::fitTo`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10106:242,test,tested,242,https://root.cern,https://github.com/root-project/root/pull/10106,2,['test'],"['tested', 'tests']"
Testability,"The TEfficiency constructors for fixed or variable bin size are not appended to the current directory. The description of TEfficiency mentions that this should only happen for the constructor using two histograms (passed and total). The following code does not save the TEfficiency object to the file in version 6.24; ```; TFile* file = new TFile(""test.root"", ""RECREATE"");; TEfficiency* eff = new TEfficiency(""eff"", ""eff"", 1, 0, 1);; eff->Fill(true, 0);; file->Write();; ```; Executing in version 6.18 (latest I have installed other than 6.24) does produce the expected behaviour. After adding `eff->Write();` the TEfficiency will also be written in v6.24. I think the problem is the use of; `TDirectory::TContext ctx(nullptr);`; in TEfficiency.cxx (e. g. line 733), which was, as far as I see, implemented in version 6.24. I think in the scope after TContext the current directory is `nullptr` which is also passed to `Build(name, title);` as well. ### Setup:; ROOT v6.24 built from source; OS: Ubuntu 20.04",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9189:348,test,test,348,https://root.cern,https://github.com/root-project/root/issues/9189,1,['test'],['test']
Testability,"The TFile objects need to be closed before the ROOT files can be; deleted. Otherwise, we get errors such as these on Windows 10:. ```; Traceback (most recent call last):; File ""C:/build/night/LABEL/windows10/SPEC/default/V/master/root/tutorials/pyroot/pyroot006_tcontext_context_manager.py"", line 56, in <module>; os.remove(""pyroot006_file_{}.root"".format(i)); PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pyroot006_file_1.root'; CMake Error at C:/build/night/LABEL/windows10/SPEC/default/V/master/build/RootTestDriver.cmake:227 (message):; error code: 1; ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=windows10,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_pyroot_pyroot006_tcontext_context_manager_py/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10378:765,test,testReport,765,https://root.cern,https://github.com/root-project/root/pull/10378,1,['test'],['testReport']
Testability,"The THistRange class define a generic bin range region which can be used to efficiently iterate over bins.; It is used to create a THBinIterator class which can used to iterate over bins; without using for loops over axis or simple global bin iterations.; Example for computing histogram integral in a given range: . ```; auto hist = new TH1D(""h1"",""h1"",100,-5,5);; hist->FillRandom(""gaus""); ; hist->GetXaxis()->SetRange(40,60); ; THistRange r(hist); ; double integral = 0; ; for (auto & bin : r) { integral += hist->GetBinContent(bin); }; std::cout << ""integral "" << integral << std::endl;; ```. Add also a test program which measures the ieration time. When iterating over a multi-dimensional histogram (e.g. 3 d) the new iteration can be up to 10 times faster.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6795:607,test,test,607,https://root.cern,https://github.com/root-project/root/pull/6795,1,['test'],['test']
Testability,"The TRandom3 generator was observed to fail; a very simple test on the SetSeed/GetSeed interface:. ```; gRandom->SetSeed(11);; auto a = gRandom->GetSeed();; gRandom->SetSeed(12);; auto b = gRandom->GetSeed();; assert(a != b);; ```. Indeed a `GetSeed()` following any `SetSeed(seed)` call always returns the magic number 624. This is because in the current implementation. `GetSeed() { return fMT[fCount624]; }`. we access memory location `fMT[624]` which does not exist in fMT ... and so the value of fCount624 is returned, which happens to be `624`. This commit fixes this bug by imposing an index range between 0 and 623.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14135:59,test,test,59,https://root.cern,https://github.com/root-project/root/pull/14135,2,"['assert', 'test']","['assert', 'test']"
Testability,The TStatistic class now includes computation of minimum and maximum values; of the vector passed to the constructor. These values have been added both to the `Print` and `Merge` functions. The testTStatistic.cxx test file has been updated accordingly to check that the class; correctly computes min and max values.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3815:194,test,testTStatistic,194,https://root.cern,https://github.com/root-project/root/pull/3815,2,['test'],"['test', 'testTStatistic']"
Testability,"The TestData target is currently declared ALL, which means it is always executed during the build.; However, the data it downloads is only used for running the stressProof test, so if this test is not run the downloaded data files are not needed. By removing the TestData target from ALL and making it a requirement of the test-stressproof target instead, the files are only downloaded if they are needed. Disabling the stressProof test now also disables the download of the data files. This is important when building in an environment without network access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/402:4,Test,TestData,4,https://root.cern,https://github.com/root-project/root/pull/402,6,"['Test', 'test']","['TestData', 'test', 'test-stressproof']"
Testability,"The TypeID2TypeName function looks for generic types via TClass::GetClass, thus taking a lock. If we only need to check for simple types such as bool or unsigned char, we should not need that. This change decreases contention in heavily multithreaded runs. In a test run of the AGC with 1 file and 128 threads, these are the results:. Before:; Executing the computation graphs took 23.37 seconds After:; Executing the computation graphs took 5.55 seconds. ## Notes. I was investigating a performance degradation of the AGC signalled on the forum https://root-forum.cern.ch/t/rootdataframe-and-multithreading-in-6-32/61752 . git bisect brought me to [this commit](https://github.com/root-project/root/commit/4cac104e75d15c6744144b1f0e43dcf87c35bc8a) which seems to be at least contributing to the degradation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16528:262,test,test,262,https://root.cern,https://github.com/root-project/root/pull/16528,1,['test'],['test']
Testability,"The Vavilov test fails on 32 bit ix86 in Fedora 29. Testing Cdf and Cdf_c; kappa = 0.01; Max abs diff: 1.2e-07, max rel diff: 1.9e-05, max diff cdf+cdf_c-1: 6.2e-15, pass=0; kappa = 0.04; Max abs diff: 1.4e-07, max rel diff: 1.9e-05, max diff cdf+cdf_c-1: 1.1e-15, pass=1; kappa = 0.07; Max abs diff: 2.5e-06, max rel diff: 0.061, max diff cdf+cdf_c-1: 1.6e-15, pass=1; kappa = 0.1; Max abs diff: 6.1e-06, max rel diff: 0.038, max diff cdf+cdf_c-1: 6.7e-16, pass=1; kappa = 0.4; Max abs diff: 1.7e-06, max rel diff: 0.018, max diff cdf+cdf_c-1: 2.2e-16, pass=1; kappa = 0.7; Max abs diff: 2.5e-06, max rel diff: 0.0092, max diff cdf+cdf_c-1: 2.2e-16, pass=1; kappa = 1; Max abs diff: 1.9e-06, max rel diff: 0.0072, max diff cdf+cdf_c-1: 4.4e-16, pass=1; kappa = 4; Max abs diff: 2e-06, max rel diff: 0.15, max diff cdf+cdf_c-1: 2.2e-16, pass=1; kappa = 7; Max abs diff: 1.7e-06, max rel diff: 0.026, max diff cdf+cdf_c-1: 4.4e-16, pass=1; kappa = 10; Max abs diff: 2.2e-06, max rel diff: 0.033, max diff cdf+cdf_c-1: 2.2e-16, pass=1; Number of failed tests: 1. This PR changes the allowed error from 5e-15 to 7e-15, allowing the 6.2e-15 result to pass. The test does not fail on Fedora 28 which uses the same compiler (gcc 8.1.1). The default compiler flags for ix86 have changed between Fedora 28 and 29 though, and the following flags were added: -msse2 -mfpmath=sse -mstackrealign. The -msse2 flag is my guess for the cause of the difference.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2273:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/2273,4,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,"The `-Dall` option is for enabling all ROOT features, which should not include dedicated tests. The DistRDF tests should only be used by developers and packagers, so it's not a ""feature"" that should automatically be enabled. Also, if someone enables these tests it's clearly intentional. If the requirements for the tests are not present, there should therefore be a configuration failure, no matter if `fail-on-missing` is enabled or not.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15464:89,test,tests,89,https://root.cern,https://github.com/root-project/root/pull/15464,4,['test'],['tests']
Testability,"The `-fabi-version=6` flag was added to the compilation of; `geom/vecgeom` in https://github.com/guitargeek/root/commit/ded69d0daad299f528fb172a0e922215ac18615b without any explanation. But recently, it caused some compilation problems with `std::unique-ptr`; in newer GCC versions. Simple reproducer:; ```c++; #include <memory>. int main() { std::unique_ptr<int>(nullptr); }; ```; Compile with `g++ -fabi-version=6 -o test test.cpp`, using GCC 13.2. So the implementation of `std::unique_ptr` in the standard library; version that comes with gcc 13.2.1 is incompatible with that (super old); gcc abi version. Since it's not clear why this flag is there to begin with, I suggest to; remove it so it doesn't cause further problems. The ABI version 6 is very old anyway (it came with GCC 4.7 in 2012). Closes https://github.com/root-project/root/pull/12315.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13751:419,test,test,419,https://root.cern,https://github.com/root-project/root/pull/13751,2,['test'],['test']
Testability,"The `ClingMMapper` must remain available until all `ClingMemoryManager`s are destructed, which is typically during shutdown of `IncrementalJIT`. This was not the case for the global object `MMapperInstance` that was introduced during the upgrade to LLVM 13 because `libCling` variables are destructed before running `TROOT` `atexit` handlers that shut down the JIT. In practice, it happened to work but this will change with the upgrade to LLVM 18 where we see crashes in some tests, potentially because of upstream commit https://github.com/llvm/llvm-project/commit/47f5c54f997a59bb2c65abe6b8b811f6e7553456. See also commits e0f6c04660 (""Prevent static destruction from ending DefaultMMapper too early"") and 80c14bb948 (""Extend lifetime of SectionMemoryManager::DefaultMMapper, again"") for the same problem that we previously patched in our copy of LLVM.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16314:477,test,tests,477,https://root.cern,https://github.com/root-project/root/pull/16314,1,['test'],['tests']
Testability,"The `ClingMMapper` must remain available until all `ClingMemoryManager`s are destructed, which is typically during shutdown of `IncrementalJIT`. This was not the case for the global object `MMapperInstance` that was introduced during the upgrade to LLVM 13 because `libCling` variables are destructed before running `TROOT` `atexit` handlers that shut down the JIT. In practice, it happened to work but this will change with the upgrade to LLVM 18 where we see crashes in some tests, potentially because of upstream commit https://github.com/llvm/llvm-project/commit/47f5c54f997a59bb2c65abe6b8b811f6e7553456. See also commits e0f6c04660 (""Prevent static destruction from ending DefaultMMapper too early"") and 80c14bb948 (""Extend lifetime of SectionMemoryManager::DefaultMMapper, again"") for the same problem that we previously patched in our copy of LLVM. (cherry picked from commit fd97311519a5d64f0110686db46e0d912503751c, backport of https://github.com/root-project/root/pull/16314)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16318:477,test,tests,477,https://root.cern,https://github.com/root-project/root/pull/16318,1,['test'],['tests']
Testability,"The `ClingMMapper` must remain available until all `ClingMemoryManager`s are destructed, which is typically during shutdown of `IncrementalJIT`. This was not the case for the global object `MMapperInstance` that was introduced during the upgrade to LLVM 13 because `libCling` variables are destructed before running `TROOT` `atexit` handlers that shut down the JIT. In practice, it happened to work but this will change with the upgrade to LLVM 18 where we see crashes in some tests, potentially because of upstream commit https://github.com/llvm/llvm-project/commit/47f5c54f997a59bb2c65abe6b8b811f6e7553456. See also commits e0f6c04660 (""Prevent static destruction from ending DefaultMMapper too early"") and 80c14bb948 (""Extend lifetime of SectionMemoryManager::DefaultMMapper, again"") for the same problem that we previously patched in our copy of LLVM. This differs from commit fd97311519a5d64f0110686db46e0d912503751c in master because LLVM doesn't support passing move-only lambdas. ---. This aims to backport https://github.com/root-project/root/pull/16314, but it's a bit more complicated with LLVM 13. We need to decide if we want this or just leave v6.30 and v6.28 alone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16319:477,test,tests,477,https://root.cern,https://github.com/root-project/root/pull/16319,1,['test'],['tests']
Testability,"The `ClingMMapper` must remain available until all `ClingMemoryManagers` are destructed, which is typically during shutdown of `IncrementalJIT`. This was not the case for the global object `MMapperInstance` that was introduced during the upgrade to LLVM 13 because `libCling` variables are destructed before running `TROOT` `atexit` handlers that shut down the JIT. In practice, it happened to work but this will change with the upgrade to LLVM 18 where we see crashes in some tests, potentially because of upstream commit https://github.com/llvm/llvm-project/commit/47f5c54f997a59bb2c65abe6b8b811f6e7553456. See also commits e0f6c04660 (""Prevent static destruction from ending DefaultMMapper too early"") and 80c14bb948 (""Extend lifetime of SectionMemoryManager::DefaultMMapper, again"") for the same problem that we previously patched in our copy of LLVM. This differs from commit fd97311519a5d64f0110686db46e0d912503751c in master because LLVM doesn't support passing move-only lambdas. (cherry picked from commit 41cbd5bafaf5037f52dec9864fc01d500d54578f, backport of https://github.com/root-project/root/pull/16314 / https://github.com/root-project/root/pull/16319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16387:477,test,tests,477,https://root.cern,https://github.com/root-project/root/pull/16387,1,['test'],['tests']
Testability,"The `Constrain()` and `GlobalObservables()` arguments were wrong in a; unit test in `testLikelihoodGradientJob`: a global observable was added; as a constrained parameter, which doesn't make sense. `Constrain()` should contain the constrained parameters, and; `GlobalObservables()` the global observables.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11804:76,test,test,76,https://root.cern,https://github.com/root-project/root/pull/11804,2,['test'],"['test', 'testLikelihoodGradientJob']"
Testability,"The `IOTests` test has run on my machine for 10000 times without crashing, so this may be safe to remove now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1426:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/1426,1,['test'],['test']
Testability,"The `IsCTypesArrayOrPointer` gives false positives in Python 3.13, resulting the void pointer converter to take the wrong code path and crash. See:; https://github.com/wlav/cppyy/issues/272. This code path is used for implicit conversion from other `ctypes` pointer types to `void*`, which is not strictly required. One can always do an explicit cast: `ctypes.cast(my_ptr, ctypes.c_void_p )`. Given that this a niche feature that broke Python 3.13 support for functions taking `void*`, which is quite common, it can be argued that it's better to remove this implicit conversion. This commit fixes the following tests under Python 3.13:. ```; roottest-python-basic-datatype; roottest-python-cpp-cpp; ```. This reverts the following commit from upstream:; https://github.com/wlav/CPyCppyy/commit/80a0205f590394b88a583a296704356a9740606f. See also the Fedora 41 CI PR:; https://github.com/root-project/root/pull/16748",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16816:611,test,tests,611,https://root.cern,https://github.com/root-project/root/pull/16816,1,['test'],['tests']
Testability,"The `Minimization` topic appears a lot in RooFit logs, so it would be nice to fix this typo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8138:49,log,logs,49,https://root.cern,https://github.com/root-project/root/pull/8138,1,['log'],['logs']
Testability,"The `PrintMatrix` was declared in the global namespace which means that if you define your own PrintMatrix macro you can have a name clash. This PR ""qualifies"" the name using the prefix `TMVA_DNN_`. Verified to be working as intended with compiled code both with `DEBUG_TMVA_TCPUMATRIX` defined and not using code; ```; TMVA::DNN::TCpuMatrix<double> t{3, 3};; t.Print();; TMVA_DNN_PrintTCpuMatrix(t, ""Test"");; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2579:401,Test,Test,401,https://root.cern,https://github.com/root-project/root/pull/2579,1,['Test'],['Test']
Testability,"The `RPyROOTApplication` is a `TApplication` that sets up the nuts and bolts for interactive ROOT use from Python, closely following `TRint`. This PR adds the basic behaviour for `TApplication` implemented in C++, i.e. parsing of arguments, configuration of some ROOT globals and setup of an error message handler that is able to translate ROOT warnings into Python warnings. The custom parsing of arguments can be disabled by the user by specifying a configuration option after importing ROOT:; ```python; import ROOT; ROOT.PyConfig.IgnoreCommandLineOptions = True; ```. Moreover, this PR also brings in some logic that is located in `ROOT.py` in the current PyROOT. Such logic makes it possible to use ROOT interactive graphics from Python. The graphics are activated only if the batch mode is off, and they are configured by means of hooks: no thread is explicitly created to process the GUI events as before. The batch mode can be activated by doing:; ```python; import ROOT; ROOT.gROOT.SetBatch(True); ```; or in the command line:; ```bash; > python my_script.py -b; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3731:610,log,logic,610,https://root.cern,https://github.com/root-project/root/pull/3731,2,['log'],['logic']
Testability,"The `RooAbsBinning` interface for bin index lookups was changed to; enable vectorized implementations. Instead of having the override; `RooAbsBinning::binNumber()`, the binning implementations now have to; override the `RooAbsBinning::binNumbers()` function to evaluate the bin; indices of multiple values in one function call. The interface of `RooAbsBinning::binNumbers()` is designed to facilitate; the accregation of bin indices over multiple dimensions, and it uses a; `double` ouput vector such that the caller can reuse the output buffer; for other computations. The former `RooAbsBinning::binNumber()` method is now implement in terms; of the vectorized version, such that we automatically get wide test; coverage. It was verified that this doesn't come with a performance; overhead. This will greatly facilitate the vectorization of the RooHistPdf and; RooHistFunc later. A second commit in this PR applies some other improvements to the `RooBinning` class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11151:707,test,test,707,https://root.cern,https://github.com/root-project/root/pull/11151,1,['test'],['test']
Testability,"The `RooAbsPdf::_normSet` member should be not used, because it can; happen in many situations that the RooArgSet it points to gets out of; scope and then you get a crash. There were several cases reported on the; forum where this happened with a RooAddPdf recently, becaues with ROOT; 6.26 some logic of the RooAddPdf got changed to better deal with empty; normalization sets. This commit avoids using `_normSet` by overriding `getValV` in RooAddPdf; directly, instead of `evaluate()`. This way, it has access to the actual; normalization set that is passed to the call to `getVal()`. For the batch mode, we now pass `nullptr` to; `RooAddPdf::getNormAndCache()` instead of `_normSet`. In this case it; falls back to using `_copyOfLastNormSet`, which is guaranteed to still; be valid because it's a unique_ptr owned by the RooAddPdf itself. Needs to be backported to ROOT 6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10550:296,log,logic,296,https://root.cern,https://github.com/root-project/root/pull/10550,1,['log'],['logic']
Testability,"The `RooAbsReal::getValues` has already been established as the entry; point for evaluating RooFit objects with the batch mode and it should; not be broken. In 6.26, the `getValues` function was broken to fall back on the scalar; mode all the time, because the `evaluateSpan` funtions it used got; replaced by `computeBatch`. In this commit, the desired behavior of; using the BatchMode is restored by using the RooFitDriver. To that end, a; new constructor has been added to the RooFitDriver that takes a; `RooBatchCompute::RunContext` directly. The override of `getValues` in RooAbsPdf was also removed now, because; it's the job of the RooFitDriver to treat pdfs correctly. This PR fixes the performance regression that was observed in the vectorized pdf tests in `roottest`. To fix the performance regression completely, this PR also includes a commit to avoid some overhead in the pure CPU batch mode with RooFitDriver. This bugfix should also be backported to 6.26 as a bugfix for the patch release.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9986:758,test,tests,758,https://root.cern,https://github.com/root-project/root/pull/9986,1,['test'],['tests']
Testability,"The `RooEffProd` class contains some caching logic to always provide a; normalization set to the integrated pdf. However, this should better not; be done, because as the the former documentation sais it ""breaks the; default RooAbsPdf normalization handling"". It is also inconsistent,; because, other RooFit classes like `RooProduct` don't do that. Also, it is not the task of the RooEffProd to protect pdfs from being; evaluated without normalization set if their shape depends on it. The; concerned pdfs (like RooAddPdf) already do that themselves. The reason why this is removed now it that the caching of normalization; integrals doesn't work with the new RooFit batch mode. This commit is tested by the `stressRooFit` unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10100:45,log,logic,45,https://root.cern,https://github.com/root-project/root/pull/10100,3,"['log', 'test']","['logic', 'test', 'tested']"
Testability,"The `RooFitResult::isIdentical` method so far only compared parameter; values and covariance matrix values. Even though comparing the final; parameter errors would be redundant with the covariance matrix checks,; it's still important to check parameter errors for two reasons:. 1. Initial parameter errors need to be compared, because the the; initial error determins the initial step size which influences the; minimization path. If initial errors are different, the final; parameter values are almost never identical. Catching differences in initial parameter errors informs the user; that differences in fit result are because of the starting; conditions. 2. In the case of `RooFitResult::isIdenticalNoCov`, we need to check; the error of final parameters because there is no comparison of; covariance matrix values. The signature of the public function `isIdenticalNoCov` is extended by a; tolerance parameter for the error comparison. This is expected to not; break user code, because the function was only introduced in 6.26 and is; so far only used in a single unit test (`testSumW2Error`). The `testRooAbsPdf` unit test didn't reset the initial parameter errors; correctly, which is now fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10465:1073,test,test,1073,https://root.cern,https://github.com/root-project/root/pull/10465,3,['test'],"['test', 'testRooAbsPdf']"
Testability,"The `RooParametricStepFunction` is not used much, but still there is an; issue requesting to explain its usage better that needs to be closed. I don't think it's worth it to have a tutorial for it, but nothing; speaks about having a little complete usage example script in the; reference guide instead of the code stub that is there right now. This change to the documentation goes together with some gentle code; modernization in this commit. Closes #7748.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10798:314,stub,stub,314,https://root.cern,https://github.com/root-project/root/pull/10798,1,['stub'],['stub']
Testability,"The `RooRealIntegral` class is smart enough to figure out which; variables the function the integrated function doesn't depend on and; trivially integrates them itself by multiplying with the variable; definition range. However, if the integration range is a subrange of the variable range,; this was not considered. This resulted in wrong results. for integrals; like `pdf.createIntegral(x, ""subrange"")`, where the pdf doesn't depend; on x. These kind of integrals can occur in the projections that the; RooAddPdf does, so it's important that they work, and fixing this; partially addresses https://github.com/root-project/root/issues/11486. This change also fixes a so-far unknown bug in the `RooXYChi2Var`, which; also used these kind of integrals. Without this fix, the `Integrate()`; feature for `chi2FitTo()` was completely broken, which can be seen in; the output of the `rf609` tutorial with any previous ROOT version. The; tutorial looks okay by chance, because the function is dominted by the; quadratic term in `x` that is constant in the fit. But if one makes this; a floating parameter, the problem gets obvious. Probably that was the reason why the main model parameter was set; constant to begin with, to sweep the bug under the rug. Now, the; tutorials are updated to have the quadratic coefficient floating too.; And also `stressRooFit`, since the reference file has to be updated; anyway. To demonstrate that things work correctly now, a new unit test was; implemented that does the closure check of the `integrate()` feature of; the `RooXYChi2Var` with a linear fit function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12011:1465,test,test,1465,https://root.cern,https://github.com/root-project/root/pull/12011,1,['test'],['test']
Testability,"The `RooSTLRefCountList` is used in the `RooAbsArg` client server ; interface, which is why speeding up lookup operations is very important ; for large models. ; ; With this commit: ; ; The `RooSTLRefCountList` is used in the `RooAbsArg` client server; interface, which is why speeding up lookup operations is very important; for large models. With this commit:. * A `RooSTLRefCountList` has an additinal member that tracks the; ordering of the elements by `RooAbsArg::namePtr()` address. * Subsequently, looking up elements by name pointer is much faster. * Care was taken to handle the case where elements already in the; collection get renamed (see inline documentation and unit test). * The `RooSTLRefCountList` can notice if it was read from IO and; determine the ordering before doing any lookups. As far as I can tell, this change has now drawbacks other than some; increased memory usage. The order of the elements is still the same, so; no user code should be affected.; ; As far as I can tell, this change has now drawbacks other than some ; increased memory usage. The order of the elements is still the same, so ; no user code should be affected. Benchmark before this commit ([profile](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/VHbb-STXS_mu__createNLL)):; ```; ---------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ---------------------------------------------------------------------------------; VHbb-STXS_mu__createNLL/0/iterations:1 14.1 s 14.0 s 1. ```; Benchmark after this commit ([profile](https://rembserj.web.cern.ch/rembserj/cgi-bin/igprof-navigator/VHbb-STXS_mu__createNLL_2)):; ```; ---------------------------------------------------------------------------------; Benchmark Time CPU Iterations; ---------------------------------------------------------------------------------; VHbb-STXS_mu__createNLL/0/iterations:1 5.13 s 5.13 s 1. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9403:682,test,test,682,https://root.cern,https://github.com/root-project/root/pull/9403,5,"['Benchmark', 'test']","['Benchmark', 'test']"
Testability,"The `RooVectorDataStore` had two different buffers to store the row data in: the so-called ""attached buffers"" and the ""native buffers"". The problem is that when external buffers are attached, the call to `RooVectorDataStore::get()` is not loading the native buffers anymore, which is breaking some code that assumes this, like `RooVectorDataStore::loadValues`, which is used in `RooDataSet::reduce`. This breaks the reduction of datasets with externally attached buffers, which breaks the copy constructor of the `RooNLLVar`. This commit suggests to always load both the native and attached buffers if `RooVectorDataStore::get()` is called. This has almost no performance overhead and is much safeter. Since this change fixes the copy constructor of the `RooNLLVar`, which is used when plotting the NLL, this commit fixes this JIRA ticket: https://sft.its.cern.ch/jira/browse/ROOT-9752. A unit test that covers the problem reported in the JIRA ticket is also added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11477:894,test,test,894,https://root.cern,https://github.com/root-project/root/pull/11477,1,['test'],['test']
Testability,"The `TApplication` default constructor uses `*argc=nullptr` and `**argv=nullptr` as default values, and ignores the args if that is passed in.; For symmetry and by principle of least surprise, ensure that this also works with `TRint`, which can also be used as base class (or helper class) in existing applications. see #10090. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10094:349,test,tested,349,https://root.cern,https://github.com/root-project/root/pull/10094,1,['test'],['tested']
Testability,"The `TestGauss` unit tests in roottest are failing with Jonas' ROOT; build (gcc 10 on Arch Linux). The failure was tracked down to a; `nullptr` dereferencing in when accessing `RunContext::spans`. The origin of the `nullptr` is in `RooVectorDataStore::getBatches`,; where the `unordered_map` with pointers to the variables is filled via; `unordered_map::emplace`. For some reason, the key becomes a nullptr; *right after emplacing* ([link to code](https://github.com/root-project/root/blob/https://github.com/root-project/root/blob/9296e5ed912b3010456fa4b50db77f2c4c97a09a/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345/roofit/roofitcore/src/RooVectorDataStore.cxx#L1345)). For some other reason, wrapping the `RooAbsReal const*` pointer in a; struct that is used as the key for `RunContext::spans` solves the; problem. This is implemented in this commit. This PR is more of a draft PR for now, because before merging I would really like to understand what's going on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8590:5,Test,TestGauss,5,https://root.cern,https://github.com/root-project/root/pull/8590,2,"['Test', 'test']","['TestGauss', 'tests']"
Testability,"The `bool` columns in RDF are special, because the Take action returns a `std::vector<bool>`, which has an implementation-depended memory layout for space optimization. Therefore, I suggest supporting taking `bool` columns as `unsigned char` with `Take()`, such that in `RDataFrameAsNumpy` the values can be directly taken as bytes. This avoids superfluous copying in the code, and keeps the special logic in the pythonization side minimal. Closes #8639.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15180:400,log,logic,400,https://root.cern,https://github.com/root-project/root/pull/15180,1,['log'],['logic']
Testability,"The `computeCategoryOldStyle` function in the RooMultiCategory class; gave wrong results in case the multi-category uses categories where the; ordinal number of the category doesn't match the category index. Since the `computeCategoryOldStyle` function was still used for; assertions in debug mode, this caused unnecessary assertion failures as; reported on the forum:. https://root-forum.cern.ch/t/roorealvar-setbinning-with-name-in-pyroot/51069. The code in the forum, together with some added printouts in; `RooMultiCategory::evaluate()` clearly demonstrated that the old-style; implementation is wrong. As the new implementation is already tested for a few releases now, the; most sustainable way to fix the wrong assertion failure is to simply; remove the comparison with the old-style interfaces in debug builds. Since after this change, the `RooMultiCatIter` is only used for the deprecated; `RooSuperCategory::MakeIterator()`, this PR also suggests to remove that; deprecated function together with the `RooMultiCatIter`. This is kind of a followup to https://github.com/root-project/root/pull/5502.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11117:273,assert,assertions,273,https://root.cern,https://github.com/root-project/root/pull/11117,4,"['assert', 'test']","['assertion', 'assertions', 'tested']"
Testability,"The `if (_normSet)` did not behave as intended, because the `RooAbsPdf::_normSet` member is a TString, and not a `char*`. And TStrings always convert to `true` booleans, even if they are empty. This commit fixes the empty normalization range check by using `TString::IsNull()` instead. This fix helps to benchmark RooAddPdfs with the new `codegen` backend, because it avoids the creation of unnecessary normalization integrals that codegen can't handle. This is a follow-up to 74e3099.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13518:304,benchmark,benchmark,304,https://root.cern,https://github.com/root-project/root/pull/13518,1,['benchmark'],['benchmark']
Testability,"The `math/mlp` library is very small and has no dependencies outside the minimal ROOT:; https://github.com/root-project/root/blob/master/math/mlp/CMakeLists.txt. Therefore, I think it's not worth it to have an extra build option to disable this component. Removing build options helps in reducing the test matrix and user confusion.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13862:301,test,test,301,https://root.cern,https://github.com/root-project/root/pull/13862,1,['test'],['test']
Testability,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/740:161,log,logic,161,https://root.cern,https://github.com/root-project/root/pull/740,2,['log'],['logic']
Testability,"The `max template recursion depth reached` error is due to the; implementation of std::tuple's move constructor in some STL; implementations (notably, gcc). The logic has been modified to avoid copying large tuples:; - the number of slots is now fixed for each node at construction time; - all the logic that was implemented by the `CreateSlot` methods has; been moved to the corresponding nodes' constructors. Cherry-pick conflicts:; 	tree/treeplayer/inc/ROOT/TDFNodes.hxx; 	tree/treeplayer/src/TDFNodes.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/743:161,log,logic,161,https://root.cern,https://github.com/root-project/root/pull/743,2,['log'],['logic']
Testability,"The `n_in_range` reference value in the unit test; `roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range` apparently doesn't get computed right on some 32 platforms. I can't reproduce the problem, but I'm sure it will be fixed by avoiding the use of the operators `&` and `|` with numpy arrays. Just doing a manual loop in Python should be more platform independent. Closes #12162.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13612:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/13612,2,"['Test', 'test']","['TestRooDataSetNumpy', 'test']"
Testability,"The `pyobj`'s `tp_flags` can have a number of other bits set, for example `Py_TPFLAGS_HEAPTYPE` and `Py_TPFLAGS_BASETYPE`. Only forward the two bits for `Py_TPFLAGS_HAVE_GC` and (since Python 3.11) `Py_TPFLAGS_MANAGED_DICT`. This fixes test failures seen with a Debug build on Fedora 38, but likely affecting all builds against Python 3.11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12857:236,test,test,236,https://root.cern,https://github.com/root-project/root/pull/12857,1,['test'],['test']
Testability,"The `report` attribute is not present in all types of errors, as seen in e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/184277/testReport/projectroot.bindings.pyroot.pythonizations/test/pyunittests_pyroot_dependency_versions/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13617:158,test,testReport,158,https://root.cern,https://github.com/root-project/root/pull/13617,2,['test'],"['test', 'testReport']"
Testability,"The `target` attribute in a rule specification is mandatory, but the list can be empty, in which case `TSchemaRule::GetTarget()` returns `nullptr`. In particular, @Nowakus reported the following error for read rules associated with class `ElementLinkBase`, which happens to have an empty `target` list; ```; Fatal: rule->GetTarget() != nullptr violated at line 1006 of; `/build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/tree/ntuple/v7/src/RField.cxx'; aborting; ```; Therefore, in principle we should also allow these rules for now. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12049:590,test,tested,590,https://root.cern,https://github.com/root-project/root/pull/12049,1,['test'],['tested']
Testability,"The `test.cmake` script is meant to automate some of the standard configure, build, test, install cycle during development, but also for continuous integration. The script can be generically called as; ```sh; ctest -VV -S test.cmake; ```; from the top directory of the repository. There are several options to customize the build, the main ones are:. | Option | Description |; |----------------------|-------------|; | -DCOVERAGE=1 | Enables test coverage analysis with gcov; | -DMEMCHECK=1 | Enables memory checking with valgrind; | -DSTATIC_ANALYSIS=1 | Enables static analysis with clang-tidy; | -DINSTALL=1 | Enables an extra step to call make install; | -DCDASH=1 | Enables submission to CDash (needs CTestConfig.cmake). When enabling coverage, a report is generated by default in the `coverage/` directory inside the build directory. The results can be viewed by opening the file `html/coverage_details.html`. This step can be disabled by passing `-DGCOVR=0` to `ctest`. It is recommended to use a debug build to generate the coverage analysis. The configuration can be specified directly on the command line via the `-C` option. For example, to run a coverage build in debug mode, with less verbose output, and showing test output when a test failure happens, one can run:; ```sh; ctest -V --output-on-failure -C Debug -DCOVERAGE=1 -S test.cmake; ```; Some environment variables can also influence the behavior of the script, like `CC`, `CXX`, `CMAKE_GENERATOR`, `CTEST_CONFIGURATION_TYPE`, `CMAKE_BUILD_PARALLEL_LEVEL`, `CTEST_PARALLEL_LEVEL`, `CMAKE_ARGS`, `CDASH`, `DESTDIR`, `BASE_REF`, `HEAD_REF`, and GitHub Actions environment variables. These are mostly self-explanatory and can be used to override the provided defaults. For example, to build with the clang compiler and use Ninja as CMake generator, one can run:; ```sh; env CC=clang CXX=clang++ CMAKE_GENERATOR=Ninja ctest -V -S test.cmake; ```; Finally, the script tries to load configuration files from the `.ci/` subdirectory in t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14999:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/14999,4,['test'],['test']
Testability,The `testRooPolyFunc` was broken before on Windows because the; `RooPolyFunc` didn't implement the assignment operator correctly. This is a follow-up on https://github.com/root-project/root/pull/9184.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9447:5,test,testRooPolyFunc,5,https://root.cern,https://github.com/root-project/root/pull/9447,1,['test'],['testRooPolyFunc']
Testability,"The addition of this function is in anticipation for horizontal joining of RNTuples, which will be handled in the context of the `RNTupleProcessor` that is currently under development (see also #15084). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15279:224,test,tested,224,https://root.cern,https://github.com/root-project/root/pull/15279,1,['test'],['tested']
Testability,The alias was deprecated with `numpy-1.20` and now expired in `numpy-1.24`:; https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations; https://numpy.org/devdocs/release/1.24.0-notes.html#expired-deprecations. This change also works with older versions (tested with `numpy-1.19`).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12827:261,test,tested,261,https://root.cern,https://github.com/root-project/root/pull/12827,1,['test'],['tested']
Testability,"The analytical integral code of the `RooTruthModel` was making the wrong assumption that if one uses the single-sided bases, the minimum x value is always at zero (or the maximum value at zero, for the case of the flipped bases). This resulted in wrong integral values when integrating over a subrange, as reported here on the forum:. https://root-forum.cern.ch/t/possible-bug-in-integration-of-roobdecay-and-rooabsanaconvpdf/56968. This commit rewrites the RooTruthModel analytical integral code to also consider these cases. To avoid that with the additional code branches the code becomes too verbose, the code was refactored to use a helper function for evaluating indefinite integrals of symmetric or asymmetric basis functions. The refactored code is tested by the integration tests in `stressRooFit`, and the problem that was reported on the forum is covered by a new unit test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14021:757,test,tested,757,https://root.cern,https://github.com/root-project/root/pull/14021,3,['test'],"['test', 'tested', 'tests']"
Testability,"The analytical integral of RooGaussian was using erf() to compute the; integrals. Starting from x>5*sigma, this always yields 1 because of limited; precision, integrals over a range in the high tails would therefore always be zero. Now, erfc() is used, which is much more accurate in the upper tail.; To obtain the same precision in the low tails, all ranges are mapped; onto the upper tail of the Gaussian before calling erfc(). A unit test for various Gaussian integrals has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3325:437,test,test,437,https://root.cern,https://github.com/root-project/root/pull/3325,1,['test'],['test']
Testability,"The argument -Xclang -triple=... completely bypasses Clang's Driver; logic and only sets the triple in CC1. This suffices for most code; generation tasks, but the Driver cannot compute the correct ABI and; sets the generic AArch64 ""aapcs"" instead of the specific ""darwinpcs"".; In turn, this causes integer arguments with less than 32 bits not; being sign-extended but being passed directly, which for example; manifests as (short)-1 being read as 65535 on the callee side. The new argument --target=arm64-apple-darwin20.3.0 matches what; Apple's and LLVM main's clang return for --print-target-triple. Fixes #7090. (cherry picked from commit f75a7c464b8b3f49b4ad1ae0e536d139235863d2)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7792:69,log,logic,69,https://root.cern,https://github.com/root-project/root/pull/7792,2,['log'],['logic']
Testability,"The argument `-Xclang -triple=...` completely bypasses Clang's Driver logic and only sets the triple in CC1. This suffices for most code generation tasks, but the Driver cannot compute the correct ABI and sets the generic AArch64 `aapcs` instead of the specific `darwinpcs`. In turn, this causes integer arguments with less than 32 bits not being sign-extended but being passed directly, which for example manifests as `(short)-1` being read as `65535` on the callee side. The new argument `--target=arm64-apple-darwin20.3.0` matches what Apple's and LLVM main's clang return for `--print-target-triple`. Fixes #7090",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7787:70,log,logic,70,https://root.cern,https://github.com/root-project/root/pull/7787,1,['log'],['logic']
Testability,"The argument parsing in rootcling has become quite hard (if not impossible) to maintain. This PR replaces the handmade argument parsing with the [LLVM's CommandLine](https://github.com/root-project/root/blob/master/interpreter/llvm/src/docs/CommandLine.rst) framework.; Use the llvm command line option parser and phase out the hand crafted one. It uses declarative-style option specification, improves type-safety and most importantly moves out from rootcling the cumbersome argument parsing logic. One of the major advantages is that help messages are automatically generated:; ```; OVERVIEW: rootcling; USAGE: rootcling [options] <output dictionary file> <list of dictionary header files> <LinkDef file>; ; OPTIONS:; ; Generic Options:; ; -help - Display available options (-help-hidden for more); -help-list - Display list of available options (-help-list-hidden for more); -version - Display the version of this program; ; rootcling common options:; ; -D=<string> - Specify defined macros.; -I=<string> - Specify an include path.; -W=<string> - Specify compiler diagnostics options.; -c - Deprecated, legacy flag which is ignored.; -cxxmodule - Generate a C++ module.; -excludePath=<string> - Do not store the <path> in the dictionary.; -f - Overwrite <file>s.; -failOnWarnings - Fail if there are warnings.; -inlineInputHeader - Does not generate #include <header> but expands the header content.; -interpreteronly - Generate minimal dictionary for interactivity (without IO information).; -m=<string> - The list of dependent modules of the dictionary.; -multiDict - If this library has multiple separate LinkDef files.; -noIncludePaths - Do not store include paths but rely on the env variable ROOT_INCLUDE_PATH.; -p - Deprecated, legacy flag which is ignored.; -rmf=<string> - Generate a rootmap file with the specified name.; -rml=<string> - Generate rootmap file.; -s=<string> - The path to the library of the built dictionary.; -selSyntaxOnly - Check the selection syntax only.; -split - Sp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4171:493,log,logic,493,https://root.cern,https://github.com/root-project/root/pull/4171,1,['log'],['logic']
Testability,"The array interface now inferes the size of the data-type with `sizeof` by itself. This fixes [this](https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-master/1703/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=slc6-i686/testReport/junit/projectroot.bindings.pyroot/test/pyunittests_pyroot_array_interface/) failure for `long` types on 32bit sytems not being 8 bytes long.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1925:217,test,testReport,217,https://root.cern,https://github.com/root-project/root/pull/1925,2,['test'],"['test', 'testReport']"
Testability,"The assert is not needed and it could also fail, if for some random number generated value==2*sigma. This could explain some failure observed in TMVA CNN tutorial",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5468:4,assert,assert,4,https://root.cern,https://github.com/root-project/root/pull/5468,1,['assert'],['assert']
Testability,"The assertion failure is not visible anymore (git-bisect points to commit 580fa949b0 even though that looks unrelated), so revert the change for now. This reverts commit ffe867985b715305d11e7b7adcbde9793bc9fd52.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13099:4,assert,assertion,4,https://root.cern,https://github.com/root-project/root/pull/13099,1,['assert'],['assertion']
Testability,"The attempt to fix the following test that was failing:; roottest-python-basic-operator; led to the necessity of adding the possibility for the user to call a namespace inside cppyy.gbl.ROOT by simply typing ROOT.Namespace instead of ROOT.ROOT.Namespace. ; Two bugs in cppyy were also found during this attempt, both fixed by the maintainer of the repo.; The test mentioned above now succeeds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3963:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/3963,2,['test'],['test']
Testability,"The automatic conversion of ordinary obejcts to smart pointers is disabled for PyROOT because it can cause trouble with overload resolution. If a function has overloads for both ordinary objects and smart pointers, then the implicit conversion to smart pointers can result in the smart pointer overload being hit, even though there would be an overload for the regular object. Since PyROOT didn't have this feature before 6.32 anyway, disabling it was the safest option. Closes #15117. A regression test with the reproducer from the GitHub issue was added to roottest:; https://github.com/root-project/roottest/pull/1102",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15125:499,test,test,499,https://root.cern,https://github.com/root-project/root/pull/15125,1,['test'],['test']
Testability,The bare file container is only used for testing and therefore should not be part of the public interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14761:41,test,testing,41,https://root.cern,https://github.com/root-project/root/pull/14761,1,['test'],['testing']
Testability,The bogus XML designation causes the file to fail XML diagnostic tests. Test description:; Check that XML files included in the RPM payload are well-formed. ======================================== Test Output ========================================. xml:; ----. Result: VERIFY; 1) /usr/share/doc/root/tutorials/xml/person.dtd is not a well-formed XML file in root-tutorial on noarch. Waiver Authorization: Anyone. Details:; Extra content at the end of the document. Suggested Remedy:; Correct the reported errors in the XML document,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11646:65,test,tests,65,https://root.cern,https://github.com/root-project/root/pull/11646,3,"['Test', 'test']","['Test', 'tests']"
Testability,"The bonjour support in xrootd (XrdOuc/XrdOucBonjour.hh) was dropped in xrootd 3.2.0, which is now a long time ago. The code in root that requires this header is therefore now dead code since a long time. The test in configure to enable it newer worked anyway. The attached patch removes the dead code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/91:208,test,test,208,https://root.cern,https://github.com/root-project/root/pull/91,1,['test'],['test']
Testability,"The buffer tests for histograms have slightly different rounding errors between buffered/not buffered histograms which exceed a few epsilons, so the test fails if the tolerances are too strict. *Note:* This test doesn't fail on Jenkins, but *does* fail on my machine without this patch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2138:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/2138,3,['test'],"['test', 'tests']"
Testability,The bug was discovered by running runarray1 test in runtime_cxxmodules mode.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2762:44,test,test,44,https://root.cern,https://github.com/root-project/root/pull/2762,1,['test'],['test']
Testability,"The case of `ExprAddresses == nullptr` seems to be naturally handled in the lines below this assertion, which suggests that it is okay if the asserted predicate does not hold. Therefore, removing this assertion -as discussed with @vgvassilev in the linked issue- [see here](https://github.com/root-project/root/issues/8389#issuecomment-958105156). ## Changes or fixes:; - Remove unneded `assert()`, as discussed above. ## Checklist:; - [X] tested changes locally. This PR fixes #8389.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9245:93,assert,assertion,93,https://root.cern,https://github.com/root-project/root/pull/9245,5,"['assert', 'test']","['assert', 'asserted', 'assertion', 'tested']"
Testability,"The casting of the function to improve lookup didn't took; variadic functions into aspect, causing ABI issues when generating; the code for calling this function. This correctly appends the; annotation for a variadic function to the function type. This fixes the roottest-python-cling-cling test when compiling; with icc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/816:291,test,test,291,https://root.cern,https://github.com/root-project/root/pull/816,1,['test'],['test']
Testability,"The change in this PR fixes a segfault when defining a C++20 concept if definition shadowing is enabled.; In principle, for a `TemplateDecl`, `isDefinition()` issues a recursive call passing the templated decl as a parameter. A `ConceptDecl`, however, should always be considered a definition. Also, update the DeclShadowing test incorporating a C++20 concept. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #12779.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12781:325,test,test,325,https://root.cern,https://github.com/root-project/root/pull/12781,2,['test'],"['test', 'tested']"
Testability,"The changed tests were failing with errors like the one below:. ```; Traceback (most recent call last):; File ""root/bindings/pyroot/pythonizations/test/tclass_dynamiccast.py"",; line 22, in test_dynamiccast; self.assertEquals(type(o_upcast), TObject); ^^^^^^^^^^^^^^^^^; AttributeError: 'TClassDynamicCast' object has no attribute 'assertEquals'.; Did you mean: 'assertEqual'?; ```. These errors were observed with Python 3.12, but I guess they also happen with earlier versions of Python.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11655:12,test,tests,12,https://root.cern,https://github.com/root-project/root/pull/11655,5,"['assert', 'test']","['assertEqual', 'assertEquals', 'test', 'tests']"
Testability,The changes are backward incompatible (they break [some tutorials](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086)) and also change the class layout in a way that breaks the test [`root/io/filemerger`](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=454086) in [roottest](https://github.com/root-project/roottest).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1562:187,test,test,187,https://root.cern,https://github.com/root-project/root/pull/1562,1,['test'],['test']
Testability,The changes in the commits are taken from upstream. Each commit references the upstream commit(s) that were needed to implement those changes. This should fix #13410 and hopefully not provoke other test failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13821:198,test,test,198,https://root.cern,https://github.com/root-project/root/pull/13821,1,['test'],['test']
Testability,"The changes in this PR address this forum post...; https://root-forum.cern.ch/t/chi2fito-with-yvar-does-not-support-range-option/56369; ...and follows up on the discussion here:; https://github.com/root-project/root/pull/13638. Short summaries of the commits, more detail in the commit descriptions:; 1. Following up on #1455, the multi-range chi2 creation logic is removed from `createChi2()`, because for a few months already this can be dealt with in the test statistics base classes; 2. Avoid separate RooXYChi2Var constructors for pdfs and functions: instead of having separate constructors for RooAbsPdf and RooAbsReal, it's better and less code duplication to have one RooAbsReal constructor and dynamically check if it got a RooAbsPdf; 3. Support `NumCPU()` and `Range()` in createChi2() for RooDataSets; 4. Bugfix in `RooDataSet::reduce()` by also copying the stored errors",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13651:357,log,logic,357,https://root.cern,https://github.com/root-project/root/pull/13651,2,"['log', 'test']","['logic', 'test']"
Testability,The changes to fix the build process with GCC6 mentioned in [ROOT-8180](https://sft.its.cern.ch/jira/browse/ROOT-8180) only apply to GCC6. The same problem occurs again using GCC7 because of the equality check to major version 6. . The commit is tested on Arch Linux 64Bit and fixes the compile errors.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/731:246,test,tested,246,https://root.cern,https://github.com/root-project/root/pull/731,1,['test'],['tested']
Testability,"The cling argument `--cuda-path` is necessary if the CUDA SDK is not installed under `/usr/local/cuda`, e.g. on HPC systems. The integration tests are also updated to handle a CUDA SDK under a non-standard location. # Additional diagnostic. To find the bug, I also add some diagnostic functions for the PTX compiler. 1. Now error messages are prefixed in CUDA mode to better decide which of the two compiler pipelines is causing the error. example; ```; - example before:; error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; error: cannot find libdevice for sm_20. Provide path to different CUDA installation via --cuda-path, or pass -nocudalib to build without linking with libdevice.; error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes. - example after:; cling: error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; cling-ptx: error: cannot find libdevice for sm_20. Provide path to different CUDA installation via --cuda-path, or pass -nocudalib to build without linking with libdevice.; cling-ptx: error: cannot find CUDA installation. Provide its path via --cuda-path, or pass -nocudainc to build without CUDA includes.; ```. 2. Now, the class `cudaIncrementalDeviceCompiler` available through reflection via the `gCling` object.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6707:141,test,tests,141,https://root.cern,https://github.com/root-project/root/pull/6707,1,['test'],['tests']
Testability,"The cluster pool now not only schedules loading of the compressed pages but also their prompt decompression. All the pages that have been loaded are now pushed into a follow-up pipeline step for decompression and pushing into the page pool. This is done with multiple threads. Compared to unwrapping pages on demand, we might now decompress pages from which we never read (because they get completely skipped by the analysis). The RNTuple benchmarks suggest, however, that this happens quite rarely (<1%).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6106:439,benchmark,benchmarks,439,https://root.cern,https://github.com/root-project/root/pull/6106,1,['benchmark'],['benchmarks']
Testability,"The comments in `ROOT_ADD_GTEST` suggest that the macro can also be used; in your own projects based on ROOT, only that when ROOT was configured; with `testing=OFF`, the ROOT::TestSupport library is not available. However, in the case where ROOT::TestSupport is not available, the; ROOT_ADD_GTEST macro is dysfunctional because the linkage against; `gtest` is missing. It is only indirectly picked up via; ROOT::TestSupport. This breaks the compilation of all tests, even if; they don't use the TestSupport library. To make this work again without; the user having to explicitly link against `gtest`, this PR suggests; to always link against `gtest` in the ROOT_ADD_GTEST macro. Also, make the linking against ROOT::TestSupport in RooFit tests explicit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16243:152,test,testing,152,https://root.cern,https://github.com/root-project/root/pull/16243,8,"['Test', 'test']","['TestSupport', 'testing', 'tests']"
Testability,The commit implements a few new unit tests and also fixes one bug related to the normalization of a RooAddPdf when the custom normalization set of its components is reset. There is also some code improvement by removing a redundant data member of the `RooAddPdf` and `RooAddModel` classes. More details in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11485:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/11485,1,['test'],['tests']
Testability,"The compiler flag is not available in clang, tested with clang9.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4727:45,test,tested,45,https://root.cern,https://github.com/root-project/root/pull/4727,1,['test'],['tested']
Testability,"The compiler invokations run by ACLiC were not updated in case of a build with address sanitizer options enabled. This resulted in spurious warnings of the sort:. ```; $: root -q -l -b test.C+. Processing test.C+...; Info in <TUnixSystem::ACLiC>: creating shared library /tmp/./test_C.so; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tmpnam' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tempnam' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tmpnam_r' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tmpnam' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tempnam' is dangerous, better use `mkstemp'; /usr/bin/ld: /lib64/libasan.so.8: warning: the use of `tmpnam_r' is dangerous, better use `mkstemp'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15840:185,test,test,185,https://root.cern,https://github.com/root-project/root/pull/15840,2,['test'],['test']
Testability,"The corresponding leaflist letters are 'G' and 'g'.; A new class TLeafG is added -- basically a copy of TLeafL with; [U]Long64_t changed to [U]Long_t. This fixes ROOT-8885, ""Cannot create a branch of long, unsigned long,; std::size_t types"". For review convenience, I attach the diffs betwen `TLeafL.{h,cxx}` and `TLeafG.{h,cxx}`:; - [TLeafLGh.diff](https://github.com/root-project/root/files/5355689/TLeafLGh.txt); - [TLeafLGcxx.diff](https://github.com/root-project/root/files/5355684/TLeafLGcxx.txt). @Axel-Naumann `TTreeReader` seems to deal with long integers just fine. Nothing to do there, right?. ~~@pcanal where can I add tests?~~. - [x] add tests in tree/treeplayer/test/leafs.cxx; - [x] update `TypeName2ROOTTypeName` in `tree/dataframe/src/RDFUtils.cxx`; - [x] update doc of class TTree; - [x] update doc of `TBranch::TBranch(TTree *tree, const char *name, void *address, const char *leaflist, Int_t basketsize, Int_t compress)`; - [x] update doc of `TBranch* TTree::Branch(const char* name, void* address, const char* leaflist, Int_t bufsize /* = 32000 */)`; - [x] update user's guide: documentation/users-guide/Trees.md",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6600:631,test,tests,631,https://root.cern,https://github.com/root-project/root/pull/6600,3,['test'],"['test', 'tests']"
Testability,The corresponding regression test is submitted in a PR to roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/662:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/662,1,['test'],['test']
Testability,"The crash occurs due to a missing guard that prevents `libcudart.so` from being loaded. Loading a library requires an executor which is not available in syntax-only mode. Without guard, the following assert is triggered in a debug build:; ```; cling: /home/sehrig/workspace/cling/llvm/tools/cling/lib/Interpreter/Interpreter.cpp:1657: const cling::DynamicLibraryManager *cling::Interpreter::getDynamicLibraryManager() const: Assertion `m_Executor.get() && ""We must have an executor""' failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10659:200,assert,assert,200,https://root.cern,https://github.com/root-project/root/pull/10659,2,"['Assert', 'assert']","['Assertion', 'assert']"
Testability,"The current API forces the user to copy the entire fColumnRanges map and do a map lookup if they want to iterate the column ranges. With this change, one can simply access the underlying map directly, avoiding extra work in most cases. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16022:257,test,tested,257,https://root.cern,https://github.com/root-project/root/pull/16022,1,['test'],['tested']
Testability,The current builds fail because without a valid modulemap the setresuid test failed during configuration time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/425:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/425,1,['test'],['test']
Testability,"The current failure in snapshot is due to an ABI incompatibility (or so it seems) that we may have encountered before.; The failing line is:; {code:c++}; auto snapshotRDF = std::make_shared<RInterface<RLoopManager>>(std::make_shared<RLoopManager>(nullptr, validCols));; {code}; and one of the component of make_shared is the call to the following shared_ptr constructor; {code:c++}; // This constructor is non-standard, it is used by allocate_shared.; template<typename _Alloc, typename... _Args>; shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,; _Args&&... __args); : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...); { }; {code}; Note the use of std::forward. The snapshot test has 2 steps:. 1. Do the work, including a call to SnapshotImpl which contains the problem line, with only compiled code; 2. Do the same work relying on interpreted code, in which case SnapshotImpl is called via the interpreter. The symptoms of the failure is that **if** the snapshot test is compiled with optimization then. a. The compiled version works fine; b. In the interpreted version the constructor of the RInterface is wrong because the shared_ptr its constructor sees is **not** initialized. If the snapshot test is compiled without optimization then both steps succeeds. The main difference between the two is the amount of fully realized (i.e. non-inlined) functions emitted by the compiler. In the success fully case we have a stack like. {code}; interp SnapshotImpl calls; compiled std::make_shared<ROOT::Detail::RDF::RLoopManager … [in debug mode. this routine and down are used compiled]; compiled std::allocate_shared<ROOT::Detail::RDF::RLoopManager; ... implementation details .. all compiled.; compiled ROOT::Detail::RDF::RLoopManager::RLoopManager; compiled std::make_shared<ROOT::RDF::RInterface …; compiled std::allocate_shared<ROOT::RDF::RInterface …; compiled std::shared_ptr< ROOT::RDF::RInterface; compiled std::__shared_ptr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopMa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2158:697,test,test,697,https://root.cern,https://github.com/root-project/root/pull/2158,2,['test'],['test']
Testability,"The current logic for processing TTree/TChain datasets with IMT and when a TTreeIndex is involved requires a copy of each index in each thread, since their state depends on the TTree/TChain they are attached to. Previously, the copy was done via `TObject::Clone` which inevitably makes use of I/O functions, i.e. serialising/deserialising the TTreeIndex/TChainIndex, thus making the copy more costly than necessary. This commit introduces overloads of `Clone` for TTreeIndex and TChainIndex enabling their copy in memory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14812:12,log,logic,12,https://root.cern,https://github.com/root-project/root/pull/14812,1,['log'],['logic']
Testability,"The current logic of pseudo-automatic modulemap discovery is a little fragile as it mounts a virtual file named module.modulemap in the location where the a give system library header is found (cuda.h, etc). However, if the libraries are squashed into a single folder then we end up mounting a file over another virtual file. This should be a hard error, however, on systems such as OSX some libraries already come with modulemap files and we should just not mount our predefined ones. This makes it very difficult to distinguish when to issue the hard error. While this patch is not a solution for the general when the modulemaps are automatically discovered (-fimplicit-module-maps), we can use the real file stems in cases where we are called with -fno-implicit-module-maps. As a side effect this fixes the *non-recommended* squashing of library header files into a single folder.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5177:12,log,logic,12,https://root.cern,https://github.com/root-project/root/pull/5177,1,['log'],['logic']
Testability,"The current variant-based design of ROOT 7 histogram axes has a number of problems, ranging from inflexibility (users can't add new axis types) to [exponential compilation times](https://sft.its.cern.ch/jira/browse/ROOT-10532). As a first step towards resolving these problems, this PR moves RAxis closer to an inheritance-based design. Along the way, this PR also... - Completely revamps the RAxis test suite with much greater test coverage (which uncovered [ROOT-10555](https://sft.its.cern.ch/jira/browse/ROOT-10555) as a topic of future discussion).; - Reduces the amount of work needed to implement a new RAxis type.; - Resolves [ROOT-10401](https://sft.its.cern.ch/jira/browse/ROOT-10401), [ROOT-10402](https://sft.its.cern.ch/jira/browse/ROOT-10402), [ROOT-10404](https://sft.its.cern.ch/jira/browse/ROOT-10404), [ROOT-10405](https://sft.its.cern.ch/jira/browse/ROOT-10405), [ROOT-10554](https://sft.its.cern.ch/jira/browse/ROOT-10554), and many more minor issues uncovered during testing for which I didn't bother creating a Jira ticket.; - Is a step towards resolving [ROOT-10532](https://sft.its.cern.ch/jira/browse/ROOT-10532). Due to the amount of changes, I would advise using a commit-wise review approach. While the PR's history is not 100% perfect, it is sufficiently well squashed to lend itself to such an approach.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4933:399,test,test,399,https://root.cern,https://github.com/root-project/root/pull/4933,3,['test'],"['test', 'testing']"
Testability,"The data resetting should work seamlessly with the new NLL evaluation backend, so as far as I can tell there is nothing to be done to address #15763. However, it is good to add a unit test for it, so that we can also easily add tests for potentially problematic corner cases in the future. Possibly closes #15763, if there are no corner cases where data resetting doesn't work.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16353:184,test,test,184,https://root.cern,https://github.com/root-project/root/pull/16353,2,['test'],"['test', 'tests']"
Testability,The dataframe_ranges.cxx substitutes the old test in roottest and; the test cases that were present in dataframe_regressions_tests.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1652:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/1652,2,['test'],['test']
Testability,"The default setting has been determined to be near the optimal; value from tests runs on a 4 core machine (up to 8 threads), by; creating up to 1GB of data with lightweight calculations both to; tmpfs, and to ext4 filesystem on an SSD drive.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/587:75,test,tests,75,https://root.cern,https://github.com/root-project/root/pull/587,1,['test'],['tests']
Testability,The default should be a ROOT binary that respects its license; any build that creates GPLed binaries should be an active decision. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13686:196,test,tested,196,https://root.cern,https://github.com/root-project/root/pull/13686,1,['test'],['tested']
Testability,"The default was to lock the units by default, but this forced the user to unlocking via LockDefaultUnits(false) even if no geometry was created, otherwise a Fatal was issued. The patch allows changing the units once in the beginning and locks them automatically upon the definition of any element/material. # This Pull request:; Fixes an unintended behavior. ## Changes or fixes:; The static flag `gGeometryLocked` is now set to false by default, and changed to true upon the first invocation of SetDefaultUnits, which all element/material constructors call. As a result, any subsequent attempt to change the units must be made by manual unlocking via `LockDefautUnits(false)`, or it will issue a fatal error. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11789:731,test,tested,731,https://root.cern,https://github.com/root-project/root/pull/11789,1,['test'],['tested']
Testability,The direct creation of RooFit test statistics instances is discouraged; because the more configurable `createNLL` and `createChi2` should be; prefered.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10610:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/10610,1,['test'],['test']
Testability,"The distributed RDataFrame constructor accepts an optional `npartitions` keyword argument. Previously, if this argument was provided by the user, it set the number of partitions in which the rdf would split the distributed computations.; But then, right before starting the execution, the distributed backend implementation tried to optimize this number. In the case of Spark, an educated guess for the number of partitions would be spark.executor.instances * spark.executor.cores, that is the number of distributed nodes times the number of cores used for each node.; If we let this optimization happen just before the start of the execution, it means we completely disregard the user provided value for `npartitions`. Instead, the backend guessing at a number of partitions should happen only if the user doesn't supply one.; This commit addresses the issue by moving the call to `backend.optimize_npartitions` inside the initialization of the distributed dataframe object, plus adds a couple of tests to check the behaviour in the Spark backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7841:998,test,tests,998,https://root.cern,https://github.com/root-project/root/pull/7841,1,['test'],['tests']
Testability,"The distributed RDataFrame tutorials/tests have to create cluster objects, which take up resources on the machine. This is another step towards a clearer resource usage for both tutorials and tests. Whenever a cluster object is created, it now uses RESOURCE_LOCK test property to signal that no other cluster object should be created while the previous one is still running. This PR addresses the tutorials in the root repository, a sibling PR will address the tests in roottest",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11439:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/11439,4,['test'],"['test', 'tests']"
Testability,The distribution is at its EOL. [I tried to resubmit the PR and test automatic backporting],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15389:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/15389,1,['test'],['test']
Testability,The documentation generation hangs and one of the tests in the test suite times out. This PR fixes that.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/322:50,test,tests,50,https://root.cern,https://github.com/root-project/root/pull/322,2,['test'],"['test', 'tests']"
Testability,"The enums inside `RCompressionSetting` are now enum classes rather than struct-wrapped enums. This means that converting between them and `int` requires an explicit cast. ## Remarks; While for old code I believe it's best to leave everything as-is (casts aside), it would be nice to review the root 7 code to assess where and why we still use `int` as the type for compression and see case-by-case if it would be best replaced by the strong enum type.; Of course this would be in one or more separate PRs. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR partially addresses #8444",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15714:527,test,tested,527,https://root.cern,https://github.com/root-project/root/pull/15714,1,['test'],['tested']
Testability,The env variable ROOTTEST_IGNORE_NUMBA is set in; rootspi/jenkins/root-build.cmake and select nodes; with expected failures of the tests. This goes along with https://github.com/root-project/rootspi/pull/75.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5476:131,test,tests,131,https://root.cern,https://github.com/root-project/root/pull/5476,1,['test'],['tests']
Testability,"The error occurs only when `loadLibrary()` is called with the argument `resolved = false`.; The const reference of lResolved in the statement `const std::string& canonicalLoadedLib = resolved ? libStem.str() : lResolved;` is a copy because the compiler insert the copy constructor and creates a temporary object. This is required, that the return type of libStem.str() and lResolved has the same value; type: prvalue. ## Checklist:. - [ ] tested changes locally. Related cling PR: https://github.com/root-project/cling/pull/455",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10593:439,test,tested,439,https://root.cern,https://github.com/root-project/root/pull/10593,1,['test'],['tested']
Testability,The exact comparison [fails](http://cdash.cern.ch/testDetails.php?test=23864693&build=342450) in some architectures where rounding may occur.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/498:50,test,testDetails,50,https://root.cern,https://github.com/root-project/root/pull/498,2,['test'],"['test', 'testDetails']"
Testability,The execute_graph function logic is currently used both in ActionProxy; and in TransformationProxy when triggering the execution if an instant; action is asked. This commit moves the function at module level so that; both places can use it.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9958:27,log,logic,27,https://root.cern,https://github.com/root-project/root/pull/9958,1,['log'],['logic']
Testability,"The existing `RooFit::BatchMode` command argument for `RooAbsPdf::fitTo`; only takes a `bool` argument to either switch the batch mode on or off.; In the future, we will have more options such as the batch mode with; CUDA computations. To support these new upcoming options, a new; `RooFit::BatchMode(std::string const&)` overload is introduced to; indicate the requested batch mode in a human- and; pythonization-friendliy way. This new string parameter overload is used in the `stressRooFit` tests; such that one can pass any possible BatchMode argument also after the; CUDA mode is implemented. This is a spin-off of PR https://github.com/root-project/root/pull/9004 to make the review of the changes made during the development of the new batch mode easier.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9324:494,test,tests,494,https://root.cern,https://github.com/root-project/root/pull/9324,1,['test'],['tests']
Testability,"The extended term needs a special correction, it should not just be; reevaluated with the squared weights replacing the weights. This is not; implemented correctly. The way how weights are handled in the batch mode was also simplified.; Previously, a dummy `RooRealVar` was created for the weight and the; squared weight each, but now the conventional name for the weight; variable is used directly to look up the names in the data map. In the second commit, a unit test is added for this, inspired by the following forum post:; https://root-forum.cern.ch/t/batchmode-gives-wrong-errors-with-sumw2errors/49597/8",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10467:466,test,test,466,https://root.cern,https://github.com/root-project/root/pull/10467,1,['test'],['test']
Testability,"The feature test __cpp_lib_three_way_comparison is for library support of the three-way comparison. libc++ doesn't expose this yet, presumably because the operator has not been added yet for all classes. However, some classes already use it, which requires us to implement the operator as discussed in https://github.com/root-project/root/pull/12525. (cherry picked from commit b85231d2ad62645f0fe7291a64284f61bb8a83c2)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12803:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/12803,1,['test'],['test']
Testability,"The feature test `__cpp_lib_three_way_comparison` is for library support of the three-way comparison. libc++ doesn't expose this yet, presumably because the operator has not been added yet for all classes. However, some classes already use it, which requires us to implement the operator as discussed in https://github.com/root-project/root/pull/12525.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12792:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/12792,1,['test'],['test']
Testability,"The figure below gives an idea of possible improvement. For more information see [ROOT-8872](https://sft.its.cern.ch/jira/browse/ROOT-8872). ![ttree-fill-ge-timediff](https://user-images.githubusercontent.com/249404/30871641-cd327d8c-a2e7-11e7-8839-4c770ea32173.png). A couple of tests don't work after this change, so I will later break this up into several commits to make it easier to test and review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1058:280,test,tests,280,https://root.cern,https://github.com/root-project/root/pull/1058,2,['test'],"['test', 'tests']"
Testability,"The first in the series of two pull-requests to allow users to customize the DAOS object class. This PR applies the required changes to the `RDaosXxx` classes. Also, libdaos_mock is extended to provide an implementation for the object class name to ID conversion functions.; Finally, unneeded `OC_xxx` constants were stripped from libdaos_mock/daos.h; this header should only contain declarations needed for testing. Related to issue #8205.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8402:408,test,testing,408,https://root.cern,https://github.com/root-project/root/pull/8402,1,['test'],['testing']
Testability,"The first version of these changes, in PR #1737, was tried by CMS and seems to be ok for them (see [CMS and ROOT I/O](https://indico.cern.ch/event/715802/contributions/2942558/) talk from latest I/O workshop), so we applied their suggestion for not blocking when a merge is in progress, and after local testing this is ready for merge into master after further testing here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2245:303,test,testing,303,https://root.cern,https://github.com/root-project/root/pull/2245,2,['test'],['testing']
Testability,The fixes in this PR correspond to the three following cppyy issues:. https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants; https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated; https://bitbucket.org/wlav/cppyy/issues/168/boundary-check-not-implemented-for-signed. The corresponding tutorials/tests are re-enabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4590:353,test,tests,353,https://root.cern,https://github.com/root-project/root/pull/4590,1,['test'],['tests']
Testability,"The flag is enabled by default for CMAKE_BUILD_TYPE=Debug and dev=ON and; has the effect that the -DNDEBUG flag is **not** attached to the; CMAKE_C_FLAGS and CMAKE_CXX_FLAGS. Fixes #6448. I'll also add a sentence to the release notes before merging something. However, note that the default behaviour of ROOT has only changed for the `dev=ON` option, which has now asserts enabled. Do we like this or shall I remove it from the dev mode?. I can also take care of the infrastructure (aka rootspi) so that we actually define that flag for all interesting builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6560:365,assert,asserts,365,https://root.cern,https://github.com/root-project/root/pull/6560,1,['assert'],['asserts']
Testability,"The following PR introduced some changes in the TCling shutdown; logic:; https://github.com/root-project/root/pull/4675. One of these changes affects clingwrapper.cxx in Cppyy, but the; functionality it relies on (TROOT::Initialize) is not yet in the; mini-ROOT of Cppyy, which is at the moment working with ROOT 6.18,; so we cannot push the clingwrapper change to upstream Cppyy now. For that reason, until Cppyy updates its ROOT to 6.20, we need to; keep this patch to modify our copy of Cppyy to invoke; TROOT::Initialize in the constructor of ApplicationStarter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4747:65,log,logic,65,https://root.cern,https://github.com/root-project/root/pull/4747,1,['log'],['logic']
Testability,"The following code:. ```cpp; #include <ROOT/RDataFrame.hxx>; #include <TFile.h>; #include <TTree.h>. int main() {; ROOT::RDataFrame(32).Define(""idx"", ""rdfentry_"").Snapshot(""t1"", ""f.root"");. ROOT::RDF::RSnapshotOptions opts;; opts.fMode = ""update"";; ROOT::RDataFrame(""t1"", ""f.root""); .Define(""x"", ""idx*idx""); .Snapshot(""t2"", ""f.root"", {""x"", ""idx""}, opts);. TFile f(""f.root"");; auto *tmain = f.Get<TTree>(""t1"");; auto *tfriend = f.Get<TTree>(""t2"");; tmain->AddFriend(tfriend);. ROOT::RDataFrame(*tmain).Display("".*"", 100)->Print();. return 0;; }; ```; prints. ```; idx | t2.x | x | t2.idx |; 0 | 0 | 0 | 0 |; 1 | 1 | 1 | 1 |; 2 | 4 | 4 | 2 |; 3 | 9 | 9 | 3 |; 4 | 16 | 16 | 4 |; 5 | 25 | 25 | 5 |; ```. where `idx` and `t2.idx` are actually two different columns (one in the main tree and the other in the friend tree) but `x` and `t2.x` are two valid spellings of the _same_ column, which should then be printed only once. I think `Display` gets tripped up by the output of `RLoopManager::GetColumnNames()`, which reports the two valid spellings of `x`. It should instead use the same logic as `Snapshot`, which removes duplicates.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8450:1084,log,logic,1084,https://root.cern,https://github.com/root-project/root/issues/8450,1,['log'],['logic']
Testability,The following test:. pyunittests-dataframe-histograms. was fixed by the commit mentioned in the title.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4139:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/4139,1,['test'],['test']
Testability,"The following, very particular, combination triggers a test failure:; * Fedora 39; * C++20; * ROOT built in Release mode (-O3); * The test `dataframe-vecops`, which needs to be run via ctest and using gtest infrastructure; * The test being compiled in release mode too. The failure is:; ```; 730/2406 Test #393: gtest-tree-dataframe-test-dataframe-vecops ........................................................***Failed 5.01 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RDFAndVecOps; [ RUN ] RDFAndVecOps.ReadStdVectorAsRVec; [ OK ] RDFAndVecOps.ReadStdVectorAsRVec (4678 ms); [ RUN ] RDFAndVecOps.DefineRVec; [ OK ] RDFAndVecOps.DefineRVec (0 ms); [ RUN ] RDFAndVecOps.SnapshotRVec; [ OK ] RDFAndVecOps.SnapshotRVec (6 ms); [ RUN ] RDFAndVecOps.RVecBool; double free or corruption (out); CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```. And gdb says:; ```; 0 0x00007f25d4eae834 in __pthread_kill_implementation () from /lib64/libc.so.6; 1 0x00007f25d4e5c8ee in raise () from /lib64/libc.so.6; 2 0x00007f25d4e448ff in abort () from /lib64/libc.so.6; 3 0x00007f25d4e457d0 in __libc_message.cold () from /lib64/libc.so.6; 4 0x00007f25d4eb87a5 in malloc_printerr () from /lib64/libc.so.6; 5 0x00007f25d4eba840 in _int_free_merge_chunk () from /lib64/libc.so.6; 6 0x00007f25d4ebd3de in free () from /lib64/libc.so.6; 7 0x00007f25d6c5efa8 in TList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 8 0x00007f25d6c56566 in THashList::Delete(char const*) () from /github/home/ROOT-CI/build/lib/libCore.so; 9 0x00007f25d67235b5 in TDirectoryFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 10 0x00007f25d6741406 in TFile::Close(char const*) () from /github/home/ROOT-CI/build/lib/libRIO.so; 11 0x00000000004324",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/14803,9,"['Test', 'test']","['Test', 'test', 'test-dataframe-vecops', 'tests']"
Testability,"The function TLatex::DrawLatex() only copied the Text-Attributes, but not the Line-Attributes to the newly created TLatex-Object which does not seem logical to me. Please correct me if there was a purpose for not copying the Line-Attributes. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9211:149,log,logical,149,https://root.cern,https://github.com/root-project/root/pull/9211,2,"['log', 'test']","['logical', 'tested']"
Testability,"The function `EnforceInitOrder()` was using `ImplicitlyDefineFunction()` as a shortcut to define a function returning an int. Future upgrades of LLVM will add an assert in that function because it is not allowed to be used when compiling C++, which Cling obviously does.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12052:162,assert,assert,162,https://root.cern,https://github.com/root-project/root/pull/12052,1,['assert'],['assert']
Testability,The git commit log was analyzed to accurately extract the names of all people that contributed to RooFit in the 6.28 development cycle.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11969:15,log,log,15,https://root.cern,https://github.com/root-project/root/pull/11969,1,['log'],['log']
Testability,"The global module index represents an efficient on-disk hash table which stores identifier->module mapping. Every time clang finds a unknown identifier we are informed and we can load the corresponding module on demand. This way we can provide minimal set of loaded modules. Currently, we see that for hsimple.C only the half of the modules are loaded. This can be further improved because we currently load all modules which have an identifier, that is when looking for (for example TPad) we will load all modules which have the identifier TPad, including modules which contain only a forward declaration of it.; ; Kudos Arpitha Raghunandan (@arpi-r)!. We still need some performance measurements but the preliminary results are promising. Performance; ===. Methodology; ---. We have a forwarding root.exe which essentially calls /usr/bin/time -v root.exe $@. We have processed and stored this information in csv files. We have run in three modes:; 1) root master without modules (modulesoff); 2) root master with modules (moduleson); 3) root master with this PR with modules (gmi). Run on `Ubuntu 18.10 on Intel® Core™ i5-8250U CPU @ 1.60GHz × 8`. Results Interpretation; ---; A general comparison between 2) and 3) show that this PR makes ROOT about 3% faster and 25% more memory efficient. A general comparison between 1) and 3) shows that modules are still less efficient in a few cases which is expected because the PR loads more modules than it should. This will be addressed in subsequent PRs. A good trend is that some test already show that 3) is better than 1). The raw data could be found [here](https://docs.google.com/spreadsheets/d/12tZ_tmenR7fytcZpigfLOarNq1tIqPubTXWWMwz8lJg/edit#gid=1476035460). [work was done by Arpitha Raghunandan (@arpi-r)]. Depends on #4005.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4016:1528,test,test,1528,https://root.cern,https://github.com/root-project/root/pull/4016,1,['test'],['test']
Testability,The gtest can safely go on in case this test case fails.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2230:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/2230,1,['test'],['test']
Testability,"The guard R__USE_IMT was wrongly put around the class declaration, hence; none of the tests inside RDatasetSpecTest would compile if R__USE_IMT is; not defined.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10962:86,test,tests,86,https://root.cern,https://github.com/root-project/root/pull/10962,1,['test'],['tests']
Testability,The header file is not needed and causes some failure on some architecture when compiling DNN GPU tests. Fix also a warning in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4704:98,test,tests,98,https://root.cern,https://github.com/root-project/root/pull/4704,2,['test'],"['test', 'tests']"
Testability,"The histogram bin iterator should start at 1 and end at N + 1, not; start at 0 and end at N. (As for all iterators, the end element is the; invalid element after the last one.). Fixes an assertion in the histhistv7testUnit test. [----------] 2 tests from BinIterNBins; [ RUN ] BinIterNBins.NumBins; /usr/include/c++/10/bits/stl_vector.h:1045: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](std::vector<_Tp, _Alloc>::size_type) [with _Tp = float; _Alloc = std::allocator<float>; std::vector<_Tp, _Alloc>::reference = float&; std::vector<_Tp, _Alloc>::size_type = long unsigned int]: Assertion '__builtin_expect(__n < this->size(), true)' failed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5958:187,assert,assertion,187,https://root.cern,https://github.com/root-project/root/pull/5958,4,"['Assert', 'assert', 'test']","['Assertion', 'assertion', 'test', 'tests']"
Testability,"The idea is to catch branch names, which will lead to problems when using the tree with `Draw` or `MakeClass`.; This can either be the member variables (branch names and `b_`branch names) which have to keep the generated code compilable (and ensure it does what it is expected to do). And the variable names should not lead to confusion with formula evaluation in Draw (e.g. branch names which are pure numbers). The tests suggested here are:; - test if branch name is a valid c++ variable name (w/o testing keywords).; - test if branch name begins with ""b_"" (potential problem with MakeClass). on top of that, I also have a [black list](https://github.com/pseyfert/tmva-branch-adder/blob/master/src/blacklist.cpp) of unfortunate branch names: methods of TTrees, which would clash in MakeClass, c++ keywords, variable types, and things TTree::Draw can parse (though I don't see how `TTree::Draw(""cos(x)"")` would clash with `TTree::Draw(""cos"")` if there is a variable named `cos`. Because the function `cos` wouldn't work without argument, and the variable `cos` wouldn't work with argument). I only warn here and don't abort the branch initialisation, not to break third party code (variables with `.` are probably common [e.g. dynamically generated from float](http://lhcb-release-area.web.cern.ch/LHCb-release-area/DOC/davinci/latest_doxygen/d9/d80/_tuple_tool_cone_isolation_8cpp_source.html#l00204) ). Feedback request:; I'm unsure if putting the blacklist into TBranch.cxx is really the best solution to apply here.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/185:417,test,tests,417,https://root.cern,https://github.com/root-project/root/pull/185,4,['test'],"['test', 'testing', 'tests']"
Testability,"The idea of the RooGenProdProj is that we divide two integral objects; each created with this makeIntgral() function to get the normalized; integral of a product. Therefore, we don't need to normalize the; numerater and denominator integrals themselves. Doing the normalization; would be expensive and it would cancel out anyway. However, if we don't; specify an explicit normalization integral in createIntegral(), the; last-used normalization set might be used to normalize the pdf,; resulting in redundant computations. For this reason, the normalization set of the integrated pdfs is fixed; to an empty set in this case. Note that in RooFit, a nullptr; normalization set and an empty normalization set is not equivalent. The; former implies taking the last-used normalization set, and the latter; means explicitly no normalization. This fixes the performance regression reported in https://github.com/root-project/root/issues/11814, and a new unit; test is implemented to make sure no new numeric integrals pop up in the; reproducer code to that issue. Unfortunately, this change means that there will be again warnings about; missing `RooAddPdf` normalization sets, but this is not a regression; because these warnings only got fixed in the 6.28 development cycle in; https://github.com/root-project/root/commit/290b478710a90351bd7b15130a7a81e01b461940. This PR also includes some other minor improvements explained in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12010:953,test,test,953,https://root.cern,https://github.com/root-project/root/pull/12010,1,['test'],['test']
Testability,"The implementations of the virtual `RooAbsL::getParameters()` either returned an owning of a non-owning pointer, depending on the implementation class. RooSubsidiaryL returned a non-owning pointer, and the default implementation an owning pointer. The caller code of course doesn't know what to do with this, resulting in memory leaks. To fix this problem, the interface is suggested to return `std::unique_ptr<RooArgSet>`. Changing this interface now is okay because it has not been adopted by the users yet (it's from the new test statistic classes introduced in ROOT 6.26).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12595:528,test,test,528,https://root.cern,https://github.com/root-project/root/pull/12595,1,['test'],['test']
Testability,"The important commit is [[DF] Make dataset group an optional data member of RSampleInfo](https://github.com/root-project/root/commit/ad6ecd8227786f363f48be207d45b0f86d6357e5): it short-circuits some logic so that we don't construct a RDatasetGroup object if we don't have to, and we copy pointers to RDatasetGroups instead of RDatasetGroup objects. It also introduces a change in behavior: RDF now throws if a user asks for information about the dataset group but there is no group available. Before that commit it would return some arbitrary value for each of the properties (e.g. empty string, 0, ...). This should fix the performance regression seen in some Grafana benchmarks on the evening of the 15th of December.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12174:199,log,logic,199,https://root.cern,https://github.com/root-project/root/pull/12174,2,"['benchmark', 'log']","['benchmarks', 'logic']"
Testability,"The improvement at https://github.com/root-project/root/pull/10318 which stresses file opening in multi-thread RDF reported:; ```; With 256 threads (on partly loaded machine, but still representative):. Baseline:; Percent of CPU this job got: 1557%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:49.89. +this PR; Percent of CPU this job got: 14271%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:21.11; ```; This 'surprising' increase of CPU time by a factor 9 leading to only a factor 2 improvement in elapsed time is due to the bottleneck migrating from the ([re]moved mutex) to the (many) spin locks. The test can be tweaked (increase number of files, reduce number of entries per file) to stress the file opening more. On ntpl-perf01.cern.ch (single AMD EPYC 7702P 64-Core Processor), the test as is use close to 94% of all cpus and only a little system time:; ```; User time (seconds): 7250.76; System time (seconds): 3.58; Percent of CPU this job got: 12019%; ```; However tweaking to 390000 files of a 1000 entries, we get:; ```; User time (seconds): 450.77; System time (seconds): 438.39; Percent of CPU this job got: 7039%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:12.63; ```. Some are straight-forward to avoid:. ```; // Avoid lock internal to linux date/time:; diff --git a/io/io/src/TKey.cxx b/io/io/src/TKey.cxx; index e604af2980..f349bd8710 100644; --- a/io/io/src/TKey.cxx; +++ b/io/io/src/TKey.cxx; @@ -99,7 +99,7 @@ TKey::TKey() : TNamed(), fDatime((UInt_t)0); ////////////////////////////////////////////////////////////////////////////////; /// TKey default constructor.; ; -TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0); +TKey::TKey(TDirectory* motherDir) : TNamed(), fDatime((UInt_t)0, (UInt_t)0); {; Build(motherDir, """", 0);; ; ```; Some require some thoughts:; ```; Try to avoid bottlenecking on recording TContext with gROOT when reading objects out files.; diff --git a/tree/dataframe/src/RLoopManager.cxx b/tree/dataframe/src/RLoopManager.cxx; inde",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12761:610,test,test,610,https://root.cern,https://github.com/root-project/root/issues/12761,2,['test'],['test']
Testability,"The inner logic is the same as TEntryList::Enter(entry, treepointer); but we assume that `entry` is always a local entry, corresponding to; the treename and filename passed as argument. This is useful e.g. in RDataFrame where we can tell an output TEntryList the tree and file name, but the actual TTree pointer is not accessible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10186:10,log,logic,10,https://root.cern,https://github.com/root-project/root/pull/10186,1,['log'],['logic']
Testability,"The input attribute was not used in the correct way, but in the inverse mode.; This is not a problem when just transposing two axes, but it is not correct for >=3 axes. Update also the generated code by using contigous writes that shoould be faster and add more documentation. Add also a new utility function to compute strides from shape of a vector. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10348:417,test,tested,417,https://root.cern,https://github.com/root-project/root/pull/10348,1,['test'],['tested']
Testability,The intent of this code seemed to be avoiding a CINT issue. Now cling can handle such constructs. This fixes an issue with runtime_cxxmodules on OSX sdk where even when NDEBUG is defined the assert still checks the identifier.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5336:191,assert,assert,191,https://root.cern,https://github.com/root-project/root/pull/5336,1,['assert'],['assert']
Testability,"The last chunk of partial results of MapReduce with std::vectors had the; size of all other chunks. This is dangerous, since the default vector; values might cause unexpected results of the Reduce function. Test added to verify the correctness.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10427:207,Test,Test,207,https://root.cern,https://github.com/root-project/root/pull/10427,1,['Test'],['Test']
Testability,"The last commit adds the dependencies for the TMVA GNN unit tests to the docker images via the `requirements.txt`. However, this will only have a delayed effect until the images are re-built. Therefore, we can't validate for now that the tests actually work. Once the missing packages make it into the CI images, a PR should be opened to revert this commit. Backport of https://github.com/root-project/root/pull/15512.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15583:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/15583,4,['test'],['tests']
Testability,"The last commit that touched `roofit/histfactory/test/CMakeLists.txt` was accidentally removing the dependency on RooFitCommon, which needs to be there to avoid linker errors on Windows. Fixes these Windows build errors in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=windows10,SPEC=default/10959/parsed_console/log_content.html#ERROR1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11394:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/11394,1,['test'],['test']
Testability,"The list of cleanups should be thread-safe now (and if it's not, we want to know!). I executed the test and the tutorial in a loop for a while (on a machine with 8 logical cores) and could not see any crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6885:99,test,test,99,https://root.cern,https://github.com/root-project/root/pull/6885,2,"['log', 'test']","['logical', 'test']"
Testability,The llvm9 JIT issued callbacks when a symbol was missing and we reacted on it by loading the relevant library. In root-project/root@9b2041e3 we have kept the logic but now the JIT started querying more often even for symbols which are okay to be missing. In turn that leads to scanning all libraries causing performance issues. This patch tries to limit this functionality only in contexts where automatic loading is allowed. In addition when computing the offsets of a constant variable declaration we compute the initializers instead of searching in the shared objects.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14287:158,log,logic,158,https://root.cern,https://github.com/root-project/root/pull/14287,1,['log'],['logic']
Testability,The logic for summing over histogram bins in different ranges used in; RooHistPdf is also implemented in RooParamHistFunc. This means the; range is now considered when computing integrals of RooParamHistFunc. RooParamHistFunc allows you to scale the counts in each bin with a; parameter. The interface of RooDataHist::sum was extended with a; function parameter to inject the logic of scaling the bin weight; depending on the bin index. This commit partly fixes issue #7182. We still need to implement the; range feature in RooHistFunc.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7198:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/7198,2,['log'],['logic']
Testability,"The logic from RooAbsArg is copied into RooAbsData. This allows to use the hash-map functionality of RooLinkedList; for RooAbsData objects, as the namePtr mechanism allows to track; renaming and therefore avoids false negatives that result in; linear scans of the collection. In turn, this improves significantly the run-time of large workspace; imports (x2 to x4), which were dominated by embeddedData() calls.; This patch is based on the JSON tool use-case, but presumably will; significantly also improve other heavy uses of workspace import, such; as Higgs combination workspaces manipulation workflows. The cost of one additional pointer per RooAbsData object seems a low; price to pay.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9684:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/9684,1,['log'],['logic']
Testability,"The logic here was plain wrong, calling Count() should not modify the state of RInterface. One could probably craft an example in which this std::move leads to a crash.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5346:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/5346,1,['log'],['logic']
Testability,"The logic here was plain wrong, calling Count() should not modify; the state of RInterface. It only happened to work because RActionBase's; constructor forgot to actually move-construct its data member (also; fixed). This is a corrected version of #5346",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5347:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/5347,1,['log'],['logic']
Testability,"The logic in `RNTupleDS::PrepareNextRanges` and `RNTupleDS::GetRanges` had to be changed a bit to accommodate the new case, I think it could be streamlined but I didn't want to change too many things in the same PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15152:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/15152,1,['log'],['logic']
Testability,"The logic in `TDecompLU` where a separate `bool` was tracking if a given; pointer should be ""deleted"" caused some compiler errors warnings like:. ```; root/math/matrix/src/TDecompLU.cxx: In static member function ‘static Bool_t TDecompLU::InvertLU(TMatrixD&, Double_t, Double_t*)’:; root/math/matrix/src/TDecompLU.cxx:883:17: warning: ‘void operator delete [](void*)’ called on unallocated object ‘workd’ [-Wfree-nonheap-object]; 883 | delete [] pWorkd;; | ^~~~~~; root/src/root/math/matrix/src/TDecompLU.cxx:847:13: note: declared here; 847 | Double_t workd[kWorkMax];; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10582:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/10582,1,['log'],['logic']
Testability,"The logic of `SnapshotImpl` has been refactored to move the single-thread initialization and execution inside the `SnapshotHelper` class, and the multi-thread in `SnapshotHelperMT`. This code simplification also puts `Snapshot` in line with other actions, moving most of the logic inside `TDFActionHelpers.hxx`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/692:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/692,2,['log'],['logic']
Testability,"The logic that determined the offset hiding of not was coded inside the `RooNLLVarNew` evaluation function so far. This caused trouble, because a change in the global `RooAbsReal::hideOffset()` state did not mark the NLL as dirty. Therefore, it was unpredictable if the offset was actually hidden or not. This commit suggests an improved logic:. * Reducer nodes like the NLL always register a value and an offset to the `EvalContext`. * The evaluator decides whether to subtract the offset or not. * A change in `hideOffset()` makes the evaluator wrapper set all reducer nodes to dirty. A new unit test to cover this was also implemented. FYI, @will-cern",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15081:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/15081,3,"['log', 'test']","['logic', 'test']"
Testability,The logic to Paint fit parameters for TGraph was not following the; one implemented for histograms. The `v` field described [here](https://root.cern/doc/master/classTStyle.html#aedeb1d117d9f16af9f8ad430bf956d64) was not working the same way. This PR implement the same behavior for TGraph. This problem was found [here](https://root-forum.cern.ch/t/gstyle-setoptfit-1111-having-no-effect-on-fixed-variables/40841/9),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7854:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/7854,1,['log'],['logic']
Testability,"The logic to create the constraint sum for a given pdf is moved to the; `RooConstraintSum` class as a static member function. This makes the remaining code in RooAbsPdf easier to understand and also; allows for easy creation of the constraint sum outside of; `RooAbsPdf::createNL`, which is useful for debugging and manually creating likelihoods. And for reusing the; constraint term in other placed (intended for the new RooFit batch mode). This change also makes it easier to see which command args go into the constraint term.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8526:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/8526,1,['log'],['logic']
Testability,"The logic to get the typename of a TTree leaf/branch is now factored; out into its own function, has been streamlined, and support for; leafnames with multiple dots (""b1.b2.leaf"") has been added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1780:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/1780,1,['log'],['logic']
Testability,"The logic was such that the function overload that could see the issue; was SFINAE'd out precisely every time the pointer was null, so; we never saw a crash but still had UB there.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1688:4,log,logic,4,https://root.cern,https://github.com/root-project/root/pull/1688,1,['log'],['logic']
Testability,The logo size in the footer was wrong.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12885:4,log,logo,4,https://root.cern,https://github.com/root-project/root/pull/12885,1,['log'],['logo']
Testability,"The main change in this PR is that the `CustomColumn` term is replaced by the clearer, shorter `Define` term. This require quite a few changes all over RDataFrame internals. Motivation for the change can be found below, copy-pasted from the commit message. This will make future backports a bit of a pain, but I think it's worth doing it now, for the following reasons:; * we are at a historical low of RDF-related open bugs -> less backports are expected in the future; * recent large refactorings in RAction.hxx (#6220) and in the column reader logic (#6170) already make backports much less likely to apply cleanly to release branches, so if there is a less bad time to do this, it's probably now; * expected upcoming refactorings necessary to support bulk entry processing will put another nail in the coffin of backportable bug-fixes; * I think we can all agree that RCustomColumn is a terribly opaque name for something that at this point we all know as a ""Define"", and in a few years I'd rather not have doctoral students complain about how my class names are completely arbitrary and unnecessarily hard to understand . The original commit message:. Until recently, RCustomColumns could correspond to data-source columns; or defined columns. Due to recent refactorings, RCustomColumns are now; back to serving only their original purpose: representing Define nodes; in the computation graph.; RCustomColumn is a very opaque name, and it crops up when debugging,; reading code and looking at performance profilings. The new name,; RDefine, clearly describes what the class is supposed to do and it is in; line with RDF's naming convention (we already have RFilter). Other names also become much more readable and shorter:; RBookedCustomColumns becomes RBookedDefines, RJittedCustomColumn becomes; RJittedDefine, and so forth.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6223:547,log,logic,547,https://root.cern,https://github.com/root-project/root/pull/6223,1,['log'],['logic']
Testability,"The main motivation is because it is a clear blocker for proper cross-compilation. Also, the tutorial itself is already run as the first tutorial irrespective of the build configuration so the test is actually repeated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15930:193,test,test,193,https://root.cern,https://github.com/root-project/root/pull/15930,1,['test'],['test']
Testability,"The marker size in Quartz was using fixed value 1, ignoring that the size must be scaled for retina displays. # This Pull request:; Propagates the scaled marker size to the CGContextFillRect method in charge of the actual drawing. ## Changes or fixes:; Fixes (among others) the wrong ray-tracing output mentioned in #12035. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12055:345,test,tested,345,https://root.cern,https://github.com/root-project/root/pull/12055,1,['test'],['tested']
Testability,"The marker styles 3, 5 and 31 were draw different depending on whether they were drawn by a class based on TVirtualX or based on TVirtualPS as it can be seen in this picture:; ![temp](https://user-images.githubusercontent.com/5320187/72254803-64142680-3605-11ea-8255-40dd13038c80.jpg); Furthermore, the marker styles 9-19 were treated differently (In TVirtualX classes they were treated like marker style 1 and in TVirtualPS classes they were treated like marker style 20). This patch changes the drawing of TVirtualPS based classes to the drawing of TVirtualX based classes like for example TGX11. The updated classes are TPDF, TPostscript, TImageDump and TSVG. Since this slightly changes the corresponding file output, some reference values for testing had to be updated.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4762:748,test,testing,748,https://root.cern,https://github.com/root-project/root/pull/4762,1,['test'],['testing']
Testability,"The memory leak reported in #7890 is related to use MemPoolForRooSets. This simple code shows the increase of memory when using MemPoolForRooSets. ; ```; void testMemPool() {. RooRealVar x(""x"",""x"",0,10);; RooRealVar y(""y"",""x"",0,10);. ProcInfo_t pinfo; . for (int i = 0; i < 1000000000; ++i) {; if (i % 100000 == 0) {; gSystem->GetProcInfo(&pinfo);; std::cout << i << "" memory usage "" << pinfo.fMemResident << "" "" << pinfo.fMemVirtual << std::endl;; }; auto s1 = new RooArgSet(x,y);. delete s1;. }. }. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7933:159,test,testMemPool,159,https://root.cern,https://github.com/root-project/root/issues/7933,1,['test'],['testMemPool']
Testability,"The memory leaks were introduced on purpose in that test, but they are probably not necessary anymore. Also, suppress unneeded logging and format code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16067:52,test,test,52,https://root.cern,https://github.com/root-project/root/pull/16067,2,"['log', 'test']","['logging', 'test']"
Testability,"The minimizer test quite often did not converge. As a result there were; many spurious test failures. The test is tuned to converge _much_ more reliably by increasing the; learning rate (0.0001 -> 0.001), and the number of early stopping epochs; (5 -> 50). This commit also makes the `testMinimization` test the minimizer; _without_ using momentum (this code path was previously untested here). The following code was used to benchmark changes (only single precision; part of the test was tested and some aux text was commented out if you; want to reproduce):; ```; for i in `seq 100`; do tmva/tmva/test/DNN/testMinimizationCpu; done | awk '{print $6;}' | python -c 'import numpy; import fileinput; a = map(float, fileinput.input()); print(numpy.std(a), numpy.mean(a), numpy.min(a), numpy.max(a))'; ```. Results (typical values):; - Old version: 2.70*10^{-7} (std dev), 3.34*10^5 (mean), 2.27*10^{-6} (min), 0.0017 (max); - New verstion: 2.59 * 10^{-6} (std dev), 2.51*10*{-6} (mean), 1.16*10*{-7} (min), 1.37*10^{-5} (max). Time taken is roughly doubled (~1 sec -> ~2 secs). All results on local mac.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/1958,10,"['benchmark', 'test']","['benchmark', 'test', 'testMinimization', 'testMinimizationCpu', 'tested']"
Testability,The most common way to deal with columns containing collections in an; RDataFrame execution is through RVec. The changes in this commit allow; reading on-disk std::array fields as RVecs in memory. A new RArrayAsRVec; RField subclass is implemented with this aim. UPDATE:; Tests are present for:; 1. `std::array`; 2. Combinations of `std::array` and `ROOT::RVec` up to 4 levels of nestedness; 3. Custom classes containing `std::array` and combinations with `ROOT::RVec` in the data members,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13040:272,Test,Tests,272,https://root.cern,https://github.com/root-project/root/pull/13040,1,['Test'],['Tests']
Testability,"The name of the most up-to-date `sonnet` packge is actually `dm-sonnet`:. https://github.com/google-deepmind/sonnet. The old `sonnet` can't be used, because it maximally supports Python 3.8. With ROOT, we want to support all Python versions starting from 3.8. Follows up on 7d83c00605c4. I tested locally that the GNN tests work in the updated Python environment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15605:290,test,tested,290,https://root.cern,https://github.com/root-project/root/pull/15605,2,['test'],"['tested', 'tests']"
Testability,"The new BatchMode is adjusted such that the `testGlobalObservables` unit; test is passing when always using the BatchMode for fitting. This also; means the following adjustments had to be made:. 1. Implement resetting of data for the RooFitDriver. 2. Always clone the created constraint term, also in the new; BatchMode, because the new BatchMode mutates the computation graph; and it's not good if the original model is changed. 3. Implement the correct treatment of taking global observables from; the dataset in the BatchMode. This PR also includes a commit with some code modernization of the `RooAbsPdf`, and it also removes the low-level unit test for the RooFitDriver, which is not needed anymore now that the RooFitDriver is tested extensively by every unit tests that makes use of the new BatchMode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11416:45,test,testGlobalObservables,45,https://root.cern,https://github.com/root-project/root/pull/11416,5,['test'],"['test', 'testGlobalObservables', 'tested', 'tests']"
Testability,"The new internal class is TReentrantRWLock access externally via the abstract interface TVirtualRWMutex. The next steps after this is to start using by:; 1) Replace gROOTMutex by a TRWMutexImp; 2) Add R__READLOCKGUARD; 3) Add a TListWithRWLock and THashListWithRWLock; 4) Use those in TROOT; 5) Remove current external locks for those ROOT lists (in particular the ListOfFiles); 6) Update all RecursiveRemove implementation (in particular TCling::RecursiveRemove, without update it destroys scalability) to make use of the Read/Write lock.; 7) Introduce scalability test on RecursiveRemove",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/676:566,test,test,566,https://root.cern,https://github.com/root-project/root/pull/676,1,['test'],['test']
Testability,The new jitted filter logic mistakingly skipped validity checks over; the filter lambda and TDataSource column Define-ition. This should fix the crashes in tutorial `tdf014_CSVDataSource`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1858:22,log,logic,22,https://root.cern,https://github.com/root-project/root/pull/1858,1,['log'],['logic']
Testability,"The new logic checks if we are in the IPython shell only via the; `builtins` module, thus eliminating the second condition check,; given that IPython can also be in `sys.modules` if it is imported; from the regular Python shell before importing ROOT. Also, using the builtins module in Py3 should be done via; ""import builtins"" instead of `__builtins__`, since as explained here:. https://docs.python.org/3/library/builtins.html#module-builtins. `__builtins__` can be either the `builtins` module or its `__dict__`,; and in the latter case it does not have `'__IPYTHON__'` as attribute,; which causes the condition check for IPython to fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4857:8,log,logic,8,https://root.cern,https://github.com/root-project/root/pull/4857,1,['log'],['logic']
Testability,"The new multiprocessing test statistics were designed to be bit-by-bit compatible with the old test statistics, not the new CPU evaluation backend. Therefore, the old NLL evaluation backend has to be used for the offsetting tests (the new CPU backend is not bit-by-bit compatible with the legacy backend). This is a followup to commit 65b15d333c, which didn't apply this change to all relevant tests. Doing `EXPECT_EQ` on floats is quite fragile...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14755:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/14755,4,['test'],"['test', 'tests']"
Testability,The new namespace allows us to import libraries more lazily. Added a test that we load exactly the libraries that we expect.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5252:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/5252,1,['test'],['test']
Testability,"The new test statistic tests with the BatchMode were disabled for quite; some time, because they didn't support the new BatchMode with the; RooFitDriver yet. Initial support for the BatchMode in `RooUnbinnedL` is added in this; commit, such that the tests are passing again and can be enabled. To make the propagation of the batch mode option to `RooUnbinnedL` easier, the `buildLikelihood` function was refactored to use the C++ builder pattern. With this, it gets easier to manage a growing set of likelihood creation options.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12835:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/12835,3,['test'],"['test', 'tests']"
Testability,"The newest ROOT version in LCG dev3 nightlies crashes in a situation where the earlier versions (<6.27) printed this message:; ```; Error in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState: ; Missing FileEntry for TestClassPrimitives.h ; requested to autoload type TestClassPrimitives ; ```; Now I see this stack trace instead:. ```; #0 0x00007fffebc82b61 in cling::AutoLoadingVisitor::InsertIntoAutoLoadingState(clang::Decl*, std::pair<llvm::StringRef, llvm::StringRef>)::{lambda(llvm::StringRef, bool)#1}::operator()(llvm::StringRef, bool) const () from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #1 0x00007fffebc835ac in cling::AutoLoadingVisitor::VisitDecl(clang::Decl*) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #2 0x00007fffebc970c9 in clang::RecursiveASTVisitor<cling::AutoLoadingVisitor>::TraverseCXXRecordDecl(clang::CXXRecordDecl*) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #3 0x00007fffebc8274a in cling::AutoloadCallback::TransactionCommitted(cling::Transaction const&) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #4 0x00007fffebc64088 in cling::MultiplexInterpreterCallbacks::TransactionCommitted(cling::Transaction const&) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #5 0x00007fffebce26f7 in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) (); from /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Thu/ROOT/HEAD/x86_64-centos7-gcc11-opt/lib/libCling.so; #6 0x00007fffebce5429 in cling::IncrementalP",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11933:220,Test,TestClassPrimitives,220,https://root.cern,https://github.com/root-project/root/issues/11933,2,['Test'],['TestClassPrimitives']
Testability,"The newly integrated cross validation has suffered two seemingly random failures. Reported [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/15871/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/) and [here](https://epsft-jenkins.cern.ch/job/root-incremental-master-noimt/BUILDTYPE=Debug,COMPILER=gcc49,LABEL=centos7/1803/testReport/projectroot.tmva.tmva.test/crossvalidation/TMVA_CrossValidation_Serialise/). The root cause is still not properly understood, but this patch addresses two issues discovered by valgrind and which may be related.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1568:162,test,testReport,162,https://root.cern,https://github.com/root-project/root/pull/1568,4,['test'],"['test', 'testReport']"
Testability,"The non-modules system iterates over all available rootmap files and adds their libraries as potential dependencies to the library which ACLiC builds. The built library relies on the explicit linking to load its dependencies when it is dlopened. This is necessary because we have no other way to resolve symbols. Fortunately, the modules dynamic linker has superior symbol resolution. We can rely on it when loading a shared library. This patch fixes failing tests on OSX when runtime_cxxmodules are on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4742:459,test,tests,459,https://root.cern,https://github.com/root-project/root/pull/4742,1,['test'],['tests']
Testability,"The number of cores available in the Dask cluster object, i.e. those; that are already known to the scheduler, can be retrieved from the; client object through the `ncores()` method. In some cases, the scheduler has no information about the worker; nodes when the user first creates it. Most notably, when connecting; to batch resources with e.g. an HTCondorCluster. In this case, the; number of cores is actually known only when the resource manager; starts the requested jobs and this can happen much later in the; application. In these cases, we can infer the number of cores that; will be available from the specification that was passed by the user; to when creating the cluster object. This is stored in dictionary; attributes of the cluster itself. In order to dispatch the logic on the types of clusters that; connect to batch computing resources, we have to import also the; dask_jobqueue module, which effectively becomes another runtime; dependency when using the Dask backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10747:781,log,logic,781,https://root.cern,https://github.com/root-project/root/pull/10747,1,['log'],['logic']
Testability,"The officially supported way to build LLVM/Clang as a shared library is via the LLVM_BUILD_LLVM_DYLIB and LLVM_LINK_LLVM_DYLIB CMake options (see: https://llvm.org/docs/BuildingADistribution.html). When built this way, the whole of Clang API is exposed as a shared library (libclang-cpp.so). * CMakeLists.txt: Query if we're in shared mode via llvm-config, and register the result as LLVM_LIB_IS_SHARED.; [LLVM_LIB_IS_SHARED] <target_link_libraries>: Use the PUBLIC interface of the LLVM shared library.; * lib/Interpreter/CMakeLists.txt [LLVM_LIB_IS_SHARED]: When defined, replace the individual Clang components by clang-cpp.; * lib/MetaProcessor/CMakeLists.txt: Likewise.; * lib/Utils/CMakeLists.txt: Likewise.; * tools/Jupyter/CMakeLists.txt: Likewise.; * tools/driver/CMakeLists.txt: Likewise.; * tools/libcling/CMakeLists.txt: Likewise. Fixes: <https://github.com/root-project/cling/issues/430>. - [x ] tested changes locally; -> Yes, using the Guix packages for building cling. This PR fixes https://github.com/root-project/cling/issues/430",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15563:909,test,tested,909,https://root.cern,https://github.com/root-project/root/pull/15563,1,['test'],['tested']
Testability,"The old test statistic classes also supported enabling the offset; feature after their construction via the `RooAbsReal::enableOffsetting`; hook. This function is now also correctly overloaded in the; `RooNLLVarNew` for the BatchMode. Furthermore, the implementation of `RooAddition::enableOffsetting` is; now moved to the base class `RooAbsReal`. This implementation was only; recursively calling `enableOffsetting` for the servers, which did the; job for the old test statistics, which were only combined with; `RooAdditions`. The new BatchMode also adds the NLLs with RooAdditions,; but on top of them sits another wrapper class, the; `RooFitDriverWrapper`. It should also forward the `enableOffsetting`; calls correctly. The most general solution to this problem is probably; to forward the `enableOffsetting` call for all `RooAbsReal`-derived; classed, up to the point where the recursion ends either at an old or a; new test statistic object. This PR also includes two minor commits. One for avoiding some warnings in tests, and another one that cleans unused includes of `RooNLLVar.h`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11668:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/11668,4,['test'],"['test', 'tests']"
Testability,"The old test statistic headers and classes should not be used anymore,; since the test statistics should be created with the higher-level; functions `createNLL()` and `createChi2()`. This allows us more; flexibility in the implementation, and to phase out the old test; statistics classes eventually.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14179:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/14179,3,['test'],['test']
Testability,"The option `dataframe_distpyspark` is superseded by `test_distrdf_pyspark`, to clarify that finding pyspark and its dependencies (like Java) during configuration is strictly needed only for the tests. Generally speaking, pyspark (and Java) are optional runtime dependencies that interest only users of the distributed RDataFrame python module with the Spark backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7413:194,test,tests,194,https://root.cern,https://github.com/root-project/root/pull/7413,1,['test'],['tests']
Testability,"The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12853:456,test,tested,456,https://root.cern,https://github.com/root-project/root/pull/12853,1,['test'],['tested']
Testability,"The order in which declarations are removed makes a difference, e.g. `MaybeRemoveDeclFromModule()` may require access to type information to make up the mangled name. Thus, we segregate declarations to be removed in `TagDecl`s (i.e., struct / union / class / enum) and other declarations. Removal of `TagDecl`s is deferred until all the other declarations have been processed. Declarations in each group are iterated in reverse order. This PR is a backport of https://github.com/root-project/root/pull/12853 to v6.28. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12457.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12854:539,test,tested,539,https://root.cern,https://github.com/root-project/root/pull/12854,1,['test'],['tested']
Testability,"The original `HistoToWorkspaceFactory` produced models that consisted of; a Poisson term for each bin. In this ""number counting form"" the; dataset has one row and the collumns corresponded to the number of; events for each bin. This led to severe performance problems in; statistical tools that generated pseudo-experiments and evaluated; likelihood ratio test statistics. Nowadays, everyone uses the faster `HistoToWorkspaceFactoryFast`; implementation that produces a model in the ""standard form"" where the; dataset has one row for each event, and the column corresponds to the; value of the observable in the histogram. Therefore, the original `HistoToWorkspaceFactory` is now removed to; avoid confusion and maintainance burden.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10220:356,test,test,356,https://root.cern,https://github.com/root-project/root/pull/10220,1,['test'],['test']
Testability,"The out-of-the-box iterator provided by cppyy is not fully; applicable in the case of TTreeReader: in a given iteration, the; entry number returned by the iterator is correct, but it is; always behind the entry number of the reader itself. This commit fixes such decoupling by relying on TTreeReader::Next(); and adds a test for it. Fixes #8183",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8272:320,test,test,320,https://root.cern,https://github.com/root-project/root/pull/8272,1,['test'],['test']
Testability,"The output of the `rootbench/build/root/roofit/roofit/RooFitUnBinnedBenchmarks.cxx` benchmark is now (using 1M events):. ```; --------------------------------------------------------------------------------; Benchmark Time CPU Iterations; --------------------------------------------------------------------------------; BDecayWithMixing__BatchMode_CUDA 403 ms 129 ms 1; BDecayWithMixing__BatchMode_CPU 2086 ms 2084 ms 1; BDecayWithMixing__NumCPU_1 8412 ms 8408 ms 1; BDecayWithMixing__NumCPU_2 4739 ms 12.9 ms 1; BDecayWithMixing__NumCPU_4 2974 ms 17.0 ms 1; BDecayWithMixing__NumCPU_8 2107 ms 28.0 ms 1. BDecayGaussResolution__BatchMode_CUDA 231 ms 19.2 ms 1; BDecayGaussResolution__BatchMode_CPU 2551 ms 2550 ms 1; BDecayGaussResolution__NumCPU_1 5122 ms 5120 ms 1; BDecayGaussResolution__NumCPU_2 2867 ms 10.8 ms 1; BDecayGaussResolution__NumCPU_4 1767 ms 15.8 ms 1; BDecayGaussResolution__NumCPU_8 1224 ms 26.8 ms 1. BDecayDoubleGauss__BatchMode_CUDA 1660 ms 86.9 ms 1; BDecayDoubleGauss__BatchMode_CPU 17891 ms 17878 ms 1; BDecayDoubleGauss__NumCPU_1 48664 ms 48644 ms 1; BDecayDoubleGauss__NumCPU_2 25634 ms 25.3 ms 1; BDecayDoubleGauss__NumCPU_4 14941 ms 30.6 ms 1; BDecayDoubleGauss__NumCPU_8 10087 ms 46.2 ms 1; ```. There is a nice speedup with CUDA, so these will serve as new results for CHEP, highlighting the performance of the GPU backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12141:84,benchmark,benchmark,84,https://root.cern,https://github.com/root-project/root/pull/12141,2,"['Benchmark', 'benchmark']","['Benchmark', 'benchmark']"
Testability,"The passing NumPy arrays with the `np.int32` dtype to cppyy overloads that take array pointers in C++ generally works well, but not on 32-bit platforms like `debian10-i386` in the nightly build matrix. To reproduce the issue, you can run this code snippet on one of the 32-bit machines like `pcepsft10`:. ```Python; import ROOT. import numpy as np. arr = np.array([0, 2], dtype=np.int32). ROOT.gInterpreter.Declare(; """"""; void myprint(Int_t * arr, std::size_t n) {; for(std::size_t i = 0; i < n; ++i) {; std::cout << arr[i] << std::endl;; }; }; """"""; ). ROOT.myprint(arr, len(arr)); ```. Fixing this PyROOT issue will make the `projectroot.runtutorials.tutorial_fit_combinedFit_py` unit test pass again (it is currently failing in the `ROOT-debian10-i386,default,master` nightly builds).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9846:686,test,test,686,https://root.cern,https://github.com/root-project/root/issues/9846,1,['test'],['test']
Testability,"The patch that disables the initializer list pythonization should in principle not be necessary. @aaronj0, let's see which tests were actually failing because of this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16338:123,test,tests,123,https://root.cern,https://github.com/root-project/root/pull/16338,1,['test'],['tests']
Testability,The previous assert was not only ugly but also did the inverse; check (failed when it could open the file correctly).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/539:13,assert,assert,13,https://root.cern,https://github.com/root-project/root/pull/539,1,['assert'],['assert']
Testability,"The previous cling patches wraps `DeferredDeclsToEmit(vector<GlobalDecl>)`; into a struct that contains a `llvm::GlobalVlaue`, but it seems that this; field is useless and can be dropped. I have tested this patch in Cling and; spotted no new tests failing, so let's give ROOT a try. Signed-off-by: Jun Zhang <jun@junz.org>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11076:195,test,tested,195,https://root.cern,https://github.com/root-project/root/pull/11076,2,['test'],"['tested', 'tests']"
Testability,The previous cmake boolean expression was disabling the test on all platforms except on Mac 13+. The issue is that in cmake `NOT MACOSX_VERSION VERSION_LESS 13.00` is false if MACOSX_VERSION is not defined,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16188:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/16188,1,['test'],['test']
Testability,"The previous equation interpolated between low and high values in logarithmic space and transformed the result back with an exp. This introduced an issue with low or high values that were zero. Taking their logarithm would introduce -inf values which led to nan values from the interpolation call. Instead, we now do the interpolation without the back and forth logaritmic transformations. This gives slightly deviating values from the previous implementation. However, that implementation already was a recent change from the earlier implementation with similarly deviating values, so in the end this additional change is not very significant. See commit 466f3f689c578cb53d75ddeeb04472ec4d82e3ed for that previous reimplementation. This change can be considered a fix for that commit. Fixes #13749.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13804:66,log,logarithmic,66,https://root.cern,https://github.com/root-project/root/pull/13804,3,['log'],"['logarithm', 'logarithmic', 'logaritmic']"
Testability,The previous fix made test fail.; The return was suppressed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9604:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/9604,1,['test'],['test']
Testability,"The previous implementation required TGeoTessellated shapes to be read attached to a TGeoManager. This removes the limitation, and allows also reading geometry files containing shapes converted to VecGeom corresponding solids. # This Pull request:. ## Changes or fixes:; * Restructured the `TGeoFacet` helper class, eliminating referencing vertices stored in the associated `TGeoTessellated` object, since this required calling a specific method `TGeoTessellated::AfterStreamer` to fix all the facet objects. The new version moves all vertex operations from TGeoFacet to the TGeoTessellated class, making the latter readable from a root file even if not connected to a `TGeoManager`; * Added persistency to the class `TGeoVGShape` which interfaces `TGeoShape` to `vecgeom::VPlacedVolume`. This allows to write/read geometry files after being converted to VecGeom. Upon reading, a check is made that the current root version was also compiled with VecGeom support, and if this is not the case a `Fatal` exception is fired. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #14283",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14327:1043,test,tested,1043,https://root.cern,https://github.com/root-project/root/pull/14327,1,['test'],['tested']
Testability,The previous logic assumed that different samples would belong to; files with different names.; This could potentially result in wrong data being silently read in; case subsequent samples had same or fewer entries than the first; sample processed by a given thread. This fixes #7143 . @phi-mah please let me know if this looks reasonable/if this fixes your usecase.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7149:13,log,logic,13,https://root.cern,https://github.com/root-project/root/pull/7149,1,['log'],['logic']
Testability,The previous logic was such that the warning about suppressed further; warnings never executed. This commit also improves formatting according; to the coding conventions. Fixes: https://sft.its.cern.ch/jira/browse/ROOT-8572,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/349:13,log,logic,13,https://root.cern,https://github.com/root-project/root/pull/349,1,['log'],['logic']
Testability,"The problem was due the introduction (in commit f3f0f13) of a fast path in TClass::GetListOfDataMember which did not take in consideration the case:. c = GetClass(someclassname); c->GetState() == TClass::kForwardDeclared; c->GetListOfDataMember() -> list is now created but empty.; load and parse header file for; c->GetState() == TClass::kInterpreted; c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point). The logic assumed incorrectly that if someclassname was indeed pointing to a class or struct and the list was created then it was loaded. To keep the fast path and correct the logic, we need to 'promote' TListOfDataMembers::fIsLoaded to be an std::atomic",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6668:457,log,logic,457,https://root.cern,https://github.com/root-project/root/pull/6668,2,['log'],['logic']
Testability,"The problem was due the introduction (in commit f3f0f13) of a fast path in TClass::GetListOfDataMember which did not take in consideration the case:; ```; c = GetClass(someclassname); c->GetState() == TClass::kForwardDeclared; c->GetListOfDataMember() -> list is now created but empty.; load and parse header file for; c->GetState() == TClass::kInterpreted; c->GetListOfDataMember() -> list is still empty but should have been filled (loaded at this point).; ```; The logic assumed incorrectly that if someclassname was indeed pointing to a class or struct and the list was created then it was loaded. To keep the fast path and correct the logic, we need to 'promote' TListOfDataMembers::fIsLoaded to be an std::atomic",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6669:468,log,logic,468,https://root.cern,https://github.com/root-project/root/pull/6669,2,['log'],['logic']
Testability,"The problem with this test is that it is comparing an analytical; solution of the derivative against the center difference formula; f'(x) = (f(x+dx) - f(x-dx))/(2*dx), and this formula is not exact.; The choice of dx was too large for the tolerance accepted for the; maximum relative error. Using a smaller dx for the center difference; calculation fixes this issue by reducing the error in the numerical; derivative calculation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/534:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/534,1,['test'],['test']
Testability,"The program used for finding the leaks is as follows:. ```cpp; #include ""ROOT/RDataFrame.hxx""; #include ""TSystem.h"". bool memory() {; ProcInfo_t info;; gSystem->GetProcInfo(&info);; printf("" res memory = %g Mbytes\n"", info.fMemResident / 1024.);; return true;; }. constexpr auto file = ""small.root"";. void test() {; ROOT::EnableImplicitMT(1);; auto df = ROOT::RDataFrame(""Events"", file);; df.Filter(""Muon_pt.size()>0""); .Define(""pt"", ""Muon_pt[0]""); .Filter(memory); .Snapshot(""Events"", ""output.root"", {""pt""});; }. int main() { test(); }; ```. The valgrind output before the fix:. ```; ==20802== LEAK SUMMARY:; ==20802== definitely lost: 54,488 bytes in 222 blocks; ==20802== indirectly lost: 23,816 bytes in 199 blocks; ==20802== possibly lost: 71,130 bytes in 610 blocks; ==20802== still reachable: 74,920,340 bytes in 100,971 blocks; ==20802== of which reachable via heuristic:; ==20802== newarray : 25,424 bytes in 49 blocks; ==20802== multipleinheritance: 1,048 bytes in 3 blocks; ==20802== suppressed: 6,366,063 bytes in 65,508 blocks; ```. And the valgrind output after the fix:. ```; ==22182== LEAK SUMMARY:; ==22182== definitely lost: 6,424 bytes in 202 blocks; ==22182== indirectly lost: 23,936 bytes in 200 blocks; ==22182== possibly lost: 61,230 bytes in 610 blocks; ==22182== still reachable: 74,911,268 bytes in 100,857 blocks; ==22182== of which reachable via heuristic:; ==22182== newarray : 25,424 bytes in 49 blocks; ==22182== multipleinheritance: 928 bytes in 2 blocks; ==22182== suppressed: 6,374,775 bytes in 65,619 blocks; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2361:306,test,test,306,https://root.cern,https://github.com/root-project/root/pull/2361,2,['test'],['test']
Testability,"The pythonization of `TTree::SetBranchAddress` was implemented in C++, hacking into CPyCppy by using implementation details like data member caches (this call: `((CPPInstance *)address)GetDatamemberCache()`). Not too surprising that it apparently breaks with the upcoming Python 3.13. It's better to implement the pythonizations in Python and also manage the lifetime of the necessary data in Python. This is done in this commit. The pythonization is extensively tested in `ttree_setbranchaddress.py`. Closes #15799.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15807:463,test,tested,463,https://root.cern,https://github.com/root-project/root/pull/15807,1,['test'],['tested']
Testability,"The range is not used in RooParamHIstFunc::analyticalIntegralWN, see https://root.cern/doc/master/RooParamHistFunc_8cxx_source.html#l00247; as reported in https://root-forum.cern.ch/t/createintegral-giving-wrong-results/43508. . Simple code to reproduce:; ```; void testParamHistFunc() { ; ; RooRealVar x(""x"",""x"",0,10); ; TH1D h1(""h1"",""h1"",20,0,10); ; TF1 f1(""f1"",""gaus""); f1.SetParameters(1,5,1); ; h1.FillRandom(""f1"",1000); ; ; RooDataHist dh(""dh"",""dh"",x,&h1); ; RooParamHistFunc phf(""phf"","""",x,dh); ; phf.Print(""t""); ; x.setRange(""R1"",0,5); ; ; auto ig1n = phf.createIntegral(x,x); ; std::cout << ig1n->getVal() << std::endl; ; auto igr1 = phf.createIntegral(x,x,""R1""); ; std::cout << igr1->getVal() << std::endl; ; ; }",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7182:266,test,testParamHistFunc,266,https://root.cern,https://github.com/root-project/root/issues/7182,1,['test'],['testParamHistFunc']
Testability,"The recent commit `565e9aa19a` updated the `getPropagatedError` with; some additional checks, but these checks caused segfaults in some; specifit usecases:. * where the `RooAbsReal` is a parameter in the fit result itself. * where the `RooAbsReal` is a variable unrelated to the fit result. * where the `RooAbsReal` depends only on some of the parameters in the; fit result. This commit fixes these usecases again. A unit test that checks that these usecases don't fail anymore is now; implemented in `testRooAbsReal`. This PR also adds some other new unit tests that cover recent PRs and issues.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11445:422,test,test,422,https://root.cern,https://github.com/root-project/root/pull/11445,3,['test'],"['test', 'testRooAbsReal', 'tests']"
Testability,"The recently-introduced `RooDataSet.from_numpy()` function was clipping; out-of-range events to the variable boundaries instead of clipping them. This behavior was misleading and confusing to the users, because the; import of a TTree just skips out out-of-range events. This commit implements the skipping for `RooDataSet.from_numpy()` as; well, logging also the same warnings when that happens. A unit test that checks the skipping works correctly for categories and; real-valued variables is also implemented. Closes https://github.com/root-project/root/issues/10447. Some other things are also fixed by the two first commits, see more detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11531:346,log,logging,346,https://root.cern,https://github.com/root-project/root/pull/11531,2,"['log', 'test']","['logging', 'test']"
Testability,"The reproducer is the following line in the ROOT prompt:. ```cpp; ROOT::RDataFrame(""Events"", ""DYJetsToLL.root"").Histo1D(""Muon_tightId"").GetValue();; ```. The stack trace is as follows:. ```; In module 'ROOTDataFrame':; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/ActionHelpers.hxx:303:18: error: non-const lvalue reference to type 'bool' cannot bind to a temporary of type 'std::_Bit_const_iterator::const_reference' (aka 'bool'); for (auto &x0 : x0s) {; ^ ~; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:237:33: note: in instantiation of function template specialization 'ROOT::Internal::RDF::FillParHelper<TH1D>::Exec<ROOT::VecOps::RVec<bool>, 0>' requested here; ActionCRTP_t::GetHelper().Exec(slot, std::get<S>(fValues[slot]).Get(entry)...);; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:149:41: note: in instantiation of function template specialization 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::Exec<0>' requested here; static_cast<Action_t *>(this)->Exec(slot, entry, TypeInd_t());; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:223:4: note: in instantiation of member function 'ROOT::Internal::RDF::RActionCRTP<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > > >::Run' requested here; RAction(Helper &&h, const ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillParHelper<TH1D>, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::RAction' re",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:252,test,test-jupyroot,252,https://root.cern,https://github.com/root-project/root/issues/6675,3,['test'],['test-jupyroot']
Testability,"The return type of `foo(int)` is `void`, which causes an assertion failure in `lib/Interpreter/Value.cpp:163`: ""Type not supported"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13282:57,assert,assertion,57,https://root.cern,https://github.com/root-project/root/pull/13282,1,['assert'],['assertion']
Testability,"The rf503_wspaceread tutorial mus be run after the rf502_wspacewrite; tutorial in the unit tests. This dependency was already defined for the; C++ tutorial tests. The lines added to `tutorials/CMakeLists.txt` in; this commit make the same definitions for the Python tutorials, and also; indicate that the Python tests rf502 and rf503 should be run after the; C++ tests to avoid a race condition on the output file. Failures caused by the dependencies not handled correctly were observed in the ROOT nightlies, and this commit should avoid them in the future.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8491:91,test,tests,91,https://root.cern,https://github.com/root-project/root/pull/8491,4,['test'],['tests']
Testability,The roofit/roostats/test/testHypoTestInvResult.cxx test fails on aarch64 and ppc64le,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5867:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/5867,3,['test'],"['test', 'testHypoTestInvResult']"
Testability,"The roottest-python-cmdLineUtils test sometimes fails with error along the line of:; ```; 16/22 Test #1217: roottest-python-cmdLineUtils-SimpleRootrm1CheckOutput .......***Failed 0.86 sec; -- TEST COMMAND --; cd /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils; /usr/bin/timeout -s USR2 270s /home/pcanal/root_working/build/master-debug/bin/rootls -1 victim1.root; -- BEGIN TEST OUTPUT --; dir; hprof; hprof; hpxpy; hpxpy; tof. -- END TEST OUTPUT --; -- BEGIN OUTDIFF OUTPUT --; --- /home/pcanal/root_working/code/root/roottest/python/cmdLineUtils/SimpleRootrm.ref Thu Dec 3 17:25:54 2020; +++ /home/pcanal/root_working/build/master-debug/roottest/python/cmdLineUtils/SimpleRootrm1CheckOutput.log Fri Jan 15 15:57:03 2021; @@ -1,4 +1,6 @@; dir; hprof; +hprof; +hpxpy; hpxpy; tof. -- END OUTDIFF OUTPUT --. ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7054:33,test,test,33,https://root.cern,https://github.com/root-project/root/issues/7054,6,"['TEST', 'Test', 'log', 'test']","['TEST', 'Test', 'log', 'test']"
Testability,"The search for a candidate repository and branch for `roottest` now works as follows: ; - If the current head is a well-known branch, e.g. `master` or `v6-28-00-patches`, use the matching branch upstream as the forked repository may be out-of-sync.; - Otherwise, try a branch that matches the name of the current head in the forked repository, if it exists; else try using the closest upstream head/tag below `HEAD`'s parent commit.; - As a last resort, if there is no preferred candidate, checkout the remote's default head. This patchset also adds some minor changes to the new CI in order to forward additional information about pull requests. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12975:668,test,tested,668,https://root.cern,https://github.com/root-project/root/pull/12975,1,['test'],['tested']
Testability,The signed and unsigned logic was reversed for long long and unsigned long long. This PR fixes that.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11388:24,log,logic,24,https://root.cern,https://github.com/root-project/root/pull/11388,1,['log'],['logic']
Testability,The static vectors look like a thread safety issue in our tests.; std::array avoid memory allocation on every execution in the same way; the static vector does. NB: `#include <array>` is already present in the codegen from `MethodBase.cxx`. WIP: local building and testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3254:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/3254,2,['test'],"['testing', 'tests']"
Testability,The stressVector test fails on ix86 due to too strict check,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12390:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/12390,1,['test'],['test']
Testability,"The sum of all the values passed to fill the `TStatistic` object has been added as a class data member. Meanwhile, `Fill`,`Print`, and `Merge` functions have been changed to accomodate the new statistic. The sum is initialized to zero when calling the constructor of TStatistic. Docs and test have been updated; accordingly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3962:288,test,test,288,https://root.cern,https://github.com/root-project/root/pull/3962,1,['test'],['test']
Testability,The sysroot flag should not be set when writing a module otherwise we; trigger an assertion in ASTWriter.cpp:1245.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/519:82,assert,assertion,82,https://root.cern,https://github.com/root-project/root/pull/519,1,['assert'],['assertion']
Testability,"The test TMVA-DNN-LSTM-BackpropagationCudnn crashes on ubuntu2404 cuda-12.6.1 with cudnn with the following stack trace:; ```; 0x00007fda7f0b5540 in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fda7ed1491e in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fda7f08f040 in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fda7ed0ef22 in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fda7eed2bae in <unknown> from /usr/lib64/libcuda.so.1; 0x00007fdaaa248b01 in <unknown> from /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcudart.so.12; 0x00007fdaaa218baa in <unknown> from /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcudart.so.12; 0x00007fdaaa270721 in cudaMemcpy + 0x211 from /usr/local/cuda-12.6/targets/x86_64-linux/lib/libcudart.so.12; 0x000055d25af29e37 in bool testLSTMBackpropagation<TMVA::DNN::TCudnn<double> >(unsigned long, unsigned long, unsigned long, unsigned long, TMVA::DNN::TCudnn<double>::Scalar_t, std::vector<bool, std::allocator<bool> >, bool) + 0x4d37 from /github/home/ROOT-CI/build/tmva/tmva/test/DNN/LSTM/testLSTMBackpropagationCudnn; ```. Disabling it now, #16790 opened to track progress.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16791:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/16791,4,['test'],"['test', 'testLSTMBackpropagation', 'testLSTMBackpropagationCudnn']"
Testability,"The test `clingtest-check-cling` fails for me with the output below. It seems that C++ standard is misconfigured somewhere.; I used GCC 11 and did not specify a `-DCMAKE_CXX_STANDARD` when configuring. GCC 11.3 defaults to C++17, but in this test (see RUN: at line 3 and 4 below) clang is called with `-std=c++14` instead (My guess is that's the default for clang 9). ```; 1: FAIL: Cling :: CodeUnloading/PCH/VTables.C (36 of 185); 1: ******************** TEST 'Cling :: CodeUnloading/PCH/VTables.C' FAILED ********************; 1: Script:; 1: --; 1: : 'RUN: at line 1'; mkdir -p ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path"" || true; 1: : 'RUN: at line 2'; rm -f ""CompGen.h.pch"" && rm -f ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch""; 1: : 'RUN: at line 3'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o CompGen.h.pch; 1: : 'RUN: at line 4'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o /srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch; 1: : 'RUN: at line 5'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -Xclang -include-pch -Xclang CompGen.h.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: : 'RUN: at line 6'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnlo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10693:4,test,test,4,https://root.cern,https://github.com/root-project/root/issues/10693,6,"['TEST', 'test']","['TEST', 'test']"
Testability,"The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of D86765, commit bf890dcb0f; original commit message:; ```; [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus.; ```. (cherry picked from commit 06fd8e9e798919fdc29d8d6ec65d13d55ea30aa7, backport of PR https://github.com/root-project/root/pull/11551)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11560:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/11560,1,['test'],['test']
Testability,"The test autoloads an `Outer` class that has `Inner<int>` as a member. Because we suspend autoloading, the `Inner<int>` specialization may not be complete at all times, which triggers a `static_assert` in newer versions of libstdc++. Backport of [D86765](https://reviews.llvm.org/D86765), commit [bf890dcb0f](https://github.com/llvm/llvm-project/commit/bf890dcb0f5eb05b1a98cbd1cdd24c0c4ece8f8d); original commit message:; ```; [clang] Don't emit ""no member"" diagnostic if the lookup fails on an invalid record decl. The ""no member"" diagnostic is likely bogus.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11551:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/11551,1,['test'],['test']
Testability,The test fails (access violation) on Windows 64 built in RelWithDebInfo mode when running with `ctest` (i.e. it runs fine from the command prompt). So let's disable it on win64 for the time being.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10127:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/10127,1,['test'],['test']
Testability,"The test is broken with `-march=native` on my machine without this fix. Tolerance seems too strict in some places. I am using `1.0e-12` relative error, which amounts to a few times epsilon for `double`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2832:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/2832,1,['test'],['test']
Testability,"The test mentioned above was rewritten in order to pass in Experimental PyROOT.; What made the test passing in the current PyROOT and failing in the Experimental one is the absence in Cppyy of a converter function which works with Python objects of type NoneType and is fired in lines like the following:; `leg.AddEntry(L[0].Draw(), "" L_{0}(x)"", ""l"")`; The presence of this function basically splits the above command like the following: ; 1. the function is drawn on the canvas with the command; `L[0].Draw()`; 2. the entry is added to the legend with the command; `leg.AddEntry(None, "" L_{0}(x)"", ""l"")`; Since it's also conceptually wrong to put the Draw() method as argument of the AddEntry function, it was decided to do the two things separately with a loop over the elements of the L list.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4072:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/4072,2,['test'],['test']
Testability,"The test of using the code in the RooFit AD backend is not enabled yet, because it doesn't seem to work with the current version of Clad in ROOT. However, the code is reused also for the normal `evaluate()` function, which is tested by `testRooCrystalBall.cxx`. So it would be good to integrate this change now, such that we can easily test in the CI if the `RooCBShape` works with a future version of Clad.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15449:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/15449,4,['test'],"['test', 'testRooCrystalBall', 'tested']"
Testability,The test previously build an expression with 4096 occurrences of the 'x' variable. This was causing a segfault with the address sanitizer that is independent of RDataFrame and tracked at; https://github.com/root-project/root/issues/15818. Shorten the test expression to 100 occurences of 'x' which still represents a realistically long one-line expression and better decouples the clang-related asan issue from the rest of the RDataFrame testing infrastructure.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15824:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/15824,3,['test'],"['test', 'testing']"
Testability,The test roottest/root/meta/genreflex/ROOT-5768 currently include `boost` header files and thus is disable. This test the `--interpreteronly` flag of genreflex. See https://sft.its.cern.ch/jira/browse/ROOT-5768. The test needs to be trimmed down to no longer include the boost header files OR rewritten without them.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11484:4,test,test,4,https://root.cern,https://github.com/root-project/root/issues/11484,3,['test'],['test']
Testability,"The test should be just removed since the initial reason for having that test is now void. The reason was to have *some way* to check that the packages we thought we had on our CI machines were actually there, since the Jenkins node didn't have any environment management. Now with the github actions CI our environment is more properly managed, at least for Linux. MacOS should get the same treatment at some point, but we can now more safely say ""we know which packages are installed on the CI"" than before.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15286:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/15286,2,['test'],['test']
Testability,"The test should reuse the prebuilt modules in the module cache. However, due to a mismatch between the module-related flags exported by FindROOT. There is a mismatch between the -D passed by cmake. This patch make sure that the build arguments match more closely the build setup of ROOT. Thus we can reuse the already built module files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2545:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/2545,1,['test'],['test']
Testability,The test that creates the file must run before the test that modifies it,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5160:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/5160,2,['test'],['test']
Testability,"The test used for these improvements is:. [multi.tar.gz](https://github.com/root-project/root/files/4989775/multi.tar.gz). The results below are dramatic enough to be revelant event-though they are just one 1 with 2 jobs running at the same time, one with N threads and another with 32-N threads on a 32 real core machine (so the machine is always at full capacity). before:; ```; threads: 1 items: 10 events: 40000000 time: 192.72 s; threads: 2 items: 10 events: 40000000 time: 211.41 s; threads: 3 items: 10 events: 40000000 time: 219.9 s; threads: 4 items: 10 events: 40000000 time: 212.033 s; threads: 5 items: 10 events: 40000000 time: 214.991 s; threads: 6 items: 10 events: 40000000 time: 220.459 s; threads: 7 items: 10 events: 40000000 time: 219.831 s; threads: 8 items: 10 events: 40000000 time: 236.328 s; threads: 9 items: 10 events: 40000000 time: 222.565 s; threads: 10 items: 10 events: 40000000 time: 224.154 s; threads: 11 items: 10 events: 40000000 time: 229.009 s; threads: 12 items: 10 events: 40000000 time: 232.501 s; threads: 13 items: 10 events: 40000000 time: 227.134 s; threads: 14 items: 10 events: 40000000 time: 225.087 s; threads: 15 items: 10 events: 40000000 time: 223.564 s; threads: 16 items: 10 events: 40000000 time: 270.977 s; threads: 16 items: 10 events: 40000000 time: 291.434 s; threads: 17 items: 10 events: 40000000 time: 298.618 s; threads: 18 items: 10 events: 40000000 time: 237.387 s; threads: 19 items: 10 events: 40000000 time: 434.656 s; threads: 20 items: 10 events: 40000000 time: 358.451 s; threads: 21 items: 10 events: 40000000 time: 364.873 s; threads: 22 items: 10 events: 40000000 time: 491.755 s; threads: 23 items: 10 events: 40000000 time: 404.095 s; threads: 24 items: 10 events: 40000000 time: 444.607 s; threads: 25 items: 10 events: 40000000 time: 577.3 s; threads: 26 items: 10 events: 40000000 time: 603.918 s; threads: 27 items: 10 events: 40000000 time: 349.925 s; threads: 28 items: 10 events: 40000000 time: 359.936 s; threads: 29",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6062:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/6062,1,['test'],['test']
Testability,"The tests for TFoam ended up in the wrong location, since; add_subdirectory is not setting the required property.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5434:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/5434,1,['test'],['tests']
Testability,The tests for this pr are in PR1148 (test driven development!),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1308:4,test,tests,4,https://root.cern,https://github.com/root-project/root/pull/1308,2,['test'],"['test', 'tests']"
Testability,"The things we need to do before merging this PR and can probably be done by various people in parallel. Cling standalone:; - [x] Fix cling CUDA tests; - [ ] Fix the remaining test failures (6, see below); - [x] Revert the commit 'FIXME: Undo this change and debug why we have PendingInstances.'. <details>; <summary>Cling test failures</summary>. Failures in `master` on my system:; ```; Cling :: CodeUnloading/PCH/VTables.C; Cling :: DynamicLibraryManager/callable_lib_L_AB_order1.C; ```. Remaining failures (excluding the ones above):; ```; Cling :: CodeGeneration/Symbols.C; Cling :: CodeUnloading/AtExit.C; Cling :: CodeUnloading/PCH/VTablesClingPCH.C; Cling :: CodeUnloading/RereadFile.C; Cling :: ErrorRecovery/StoredState.C; Cling :: MultipleInterpreters/MultipleInterpreters.C; ```; </details>. ROOT:; - [x] Compare the build size against master; - [x] Compare the `.pcm` file size against master; - [ ] Add flags to ignore compilation warnings coming from llvm; - [x] Remove the FIXME from commit 'Add another symbol generator to resolve the generated lazy symbol' - the explanation is in the commit; - [x] Fix the llvm::StringRef conversion failures on OSX. <details>; <summary>; Binary Size this PR needs 13% more space (2.3 vs 2. GB); </summary>. ```; du -hs root-release-llvm13; 2.3G	.; (base) vvassilev@vv-nuc /build/vvassilev/root-release-llvm13 $ du -hs ../root-release-master/; 2.0G	../root-release-master/; ```. </details>. <details>; <summary>; Module files need ~5% more space on disk (215 vs 206 MB); </summary>. ```; diff -y llvm13 master ; 424K	lib/ASImageGui.pcm				 |	444K	lib/ASImageGui.pcm; 468K	lib/ASImage.pcm					 |	484K	lib/ASImage.pcm; 4.2M	lib/_Builtin_intrinsics.pcm			 |	4.0M	lib/_Builtin_intrinsics.pcm; 48K	lib/_Builtin_stddef_max_align_t.pcm		 |	44K	lib/_Builtin_stddef_max_align_t.pcm; 200K	lib/Cling_Runtime_Extra.pcm			 |	132K	lib/Cling_Runtime_Extra.pcm; 100K	lib/Cling_Runtime.pcm					100K	lib/Cling_Runtime.pcm; 11M	lib/Core.pcm					 |	9.6M	lib/Core.pcm; 56",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10294:144,test,tests,144,https://root.cern,https://github.com/root-project/root/pull/10294,3,['test'],"['test', 'tests']"
Testability,"The two classes inheriting from RooAbsCollection, namely RooArgList and; RooArgSet are by default non-owning collections. This means they should; not be initialized with temporary objects, otherwise they contain; invalid pointers right after construction. To avoid that this can ever happen, the universal reference mechanism is; used to statically check for temporaries, such that your code doesn't; even compile if you try to construct a RooArgList or RooArgSet from; temporaries. This fixes https://github.com/root-project/root/issues/8052. Some C++ code to validate that the `static_assert` works:; ```C++; #include ""RooRealVar.h""; #include ""RooArgList.h""; #include ""RooArgSet.h""; #include ""RooUniform.h"". void test() {. RooRealVar x(""x"", ""x"", 0, 0, 10);; RooRealVar y(""y"", ""y"", 0, 0, 10);. RooUniform u1(""u1"", ""u1"", x);; RooUniform u2(""u2"", ""u2"", y);. // this should work; RooArgSet (u1, u2);; RooArgList(u1, u2);. // all of these combinations should cause compiler errors; ///RooArgSet (RooUniform(""u1"", ""u1"", x), u2 );; //RooArgSet (u1, RooUniform(""u2"", ""u2"", y));; //RooArgSet (RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), u2 );; //RooArgList(u1, RooUniform(""u2"", ""u2"", y));; //RooArgList(RooUniform(""u1"", ""u1"", x), RooUniform(""u2"", ""u2"", y));. }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8065:715,test,test,715,https://root.cern,https://github.com/root-project/root/pull/8065,1,['test'],['test']
Testability,"The two tests mentioned in the title were fixed after the corrections implemented for pythonizations of templated classes and try/exception blocks in Cppyy, on top of which the possibility to use ROOT.Namespace instead of ROOT.ROOT.Namespace was added.; Commits that fixed the tests:; 832989cd2cd3dea7a2f96aa53272ecdd34e45b8b; f45d07c7a0b2414159e81a957a4fe86afc63fa87; f45d07c7a0b2414159e81a957a4fe86afc63fa87",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3980:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/3980,2,['test'],['tests']
Testability,"The undo buffer should only be kept for the current line (as in GNU readline). This commit clears the undo buffer in `Editor::ResetText()`, which is called after reading an input line. Fixes #10182. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10182.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10192:220,test,tested,220,https://root.cern,https://github.com/root-project/root/pull/10192,1,['test'],['tested']
Testability,The unit test breaks layering and does not test anything that is not already tested in the RDataFrame RNTuple data source unit test. Follow-up from https://github.com/root-project/root/pull/13351#pullrequestreview-1553707387,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13355:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/13355,4,['test'],"['test', 'tested']"
Testability,"The unit test for RooWorkspace tests failures when importing models into the workspace.; Since RooFit will print `ERROR` messages, it looks like there is a problem in the test.; The error messages are now silenced.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3379:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/3379,3,['test'],"['test', 'tests']"
Testability,The v7/line.cxx tutorial fails when run in batch mode with an error about that the DISPLAY can not be opened. Since this tutorial is part of the test suite this causes the tests to fail. This problem started due to some recent changes to the test. This PR reverts some of those changes to make the test work again.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3435:145,test,test,145,https://root.cern,https://github.com/root-project/root/pull/3435,4,['test'],"['test', 'tests']"
Testability,"The variables present in TError.h are used throughout the ROOT libraries. Anytime one of these variables is requested, e.g. with a simple test such as `python -c ""import ROOT; ROOT.kError""`, the interpreter will lookup the corresponding symbol. Previously, the variables were declared and defined in the header directly but were not generating any symbol since the linkage was internal. With this commit, provide external linkage to these variables so that the corresponding symbols are materialized in libCore.so. As a consequence, a huge number of extra lookups by cling is avoided. This is in direct reference to https://github.com/root-project/root/pull/14261#issuecomment-1863067950 , a followup issue to the original issue at https://github.com/cms-sw/cmssw/issues/43077. These are the results of the patch:. Before:; ```; $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'; $: grep openat log.txt | wc -l; $: 16279; ```. After:; ```; $: strace -z -f -o log.txt -e trace=openat python3 -c 'import ROOT;print(ROOT.kError);'; $: grep openat log.txt | wc -l; $: 417 ; ```. FYI @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14276:138,test,test,138,https://root.cern,https://github.com/root-project/root/pull/14276,5,"['log', 'test']","['log', 'test']"
Testability,The warning is visible e.g. with cmake 3.11:. CMake Warning (dev) in interpreter/CMakeLists.txt:; A logical block opening on the line. /data/ssdext4/rvec2/root/interpreter/CMakeLists.txt:477 (if). closes on the line. /data/ssdext4/rvec2/root/interpreter/CMakeLists.txt:483 (endif). with mis-matching arguments.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8670:100,log,logical,100,https://root.cern,https://github.com/root-project/root/pull/8670,1,['log'],['logical']
Testability,"There are different overloads of `RooFit::Import()` for importing different object types to RooFit dataset classes. However, they return a `RooCmdArg` that is named after the type of the imported object. That causes some inconsistencies. For example, if you import a map of `std::unique_ptr<RooDataHist>`, the name will be different than for `RooDataHist*` because there is a special overload for the latter. It is better to fixup this inconsistency, and then disentangle the different types in the functions that consume these `RooFit::Import()` command arguments. This caused some trouble when importing RooDataHists into a combined dataset, which is why this fix is coming now. These changes are covered by the tutorial tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13629:723,test,tests,723,https://root.cern,https://github.com/root-project/root/pull/13629,1,['test'],['tests']
Testability,"There are generic pythonizations to be added. I've started with the pretty printing feature. Additionally, I've added a `test` directory with the unit-tests and adjusted the build system. More generic possible pythonizations:. - `__cppname__` attribute (It vanished in the new cppyy? I could do a workaround/pythonization.); - Ideas?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2266:121,test,test,121,https://root.cern,https://github.com/root-project/root/pull/2266,2,['test'],"['test', 'tests']"
Testability,"There are three ways to get the code of latest-stable:; a) git clone as suggested by https://root.cern/install/: 1.4GiB; b) git clone with --depth=20: 673MiB; c) unpacking the zip file download from github: 477MiB. I think for 99% of the users, option a offers no benefits over option b. If you are testing or writing feature branches, it might not be worth figuring out how to fetch only the relevant parts (--shallow-exclude?). And if you were writing a paper on the history of ROOT, you will want the full version history. . Option c has some serious downsides as well. github just calls the directory root-latest-stable, which is a lot less specific than what you would get from a versioned tarball. (Apparently, the version is in build/version_number). Furthermore, lack of a git repository is bad for anyone who might change stuff locally -- reunpacking the zip file and running diff -r is a lot less fun than using git diff. . I would thus argue that option b is the way to go by default: it reduces the space requirements by some 53% while also retaining the ability to make changes and easily contribute them, should the need arise. . Of course, many users will not care about space requirements as any --human-readable output not containing by the Si prefix P is considered small fries anyhow. But for grad students working on their own laptops, or anyone fetching root with limited bandwidth, the difference might still matter.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10238:299,test,testing,299,https://root.cern,https://github.com/root-project/root/issues/10238,1,['test'],['testing']
Testability,"There are two overloads of RooAbsCollection::addClone():. - RooAbsArg *addClone(const RooAbsArg& var, bool silent=false);; - void addClone(const RooAbsCollection& list, bool silent=false);. In the case of the RooAbsArg overload, we need to tell Python that it; doesn't own the returned pointer. That's because the function name; contains ""Clone"", which makes cppyy guess that the returned pointer; points to a clone owned by the caller. In the case of the; RooAbsCollection input, the return value will be `None` and we don't; need to change any ownership flags (in fact, calling; SetOwnership(None, False) would cause a crash). The check for the `None` return value was so far not done in the; pythonization and is added with this commit. A unit test was also added to check that the RooAbsCollection overloads; both work. This commit fixes the following Jira issue for good:; [ROOT-9580](https://sft.its.cern.ch/jira/browse/ROOT-9580).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10874:747,test,test,747,https://root.cern,https://github.com/root-project/root/pull/10874,1,['test'],['test']
Testability,"There can be multiple attributes in the forward declaration, see the added test in [`roottest/cling/dict/enum`](https://github.com/root-project/roottest/pull/986) (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13319:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/13319,1,['test'],['test']
Testability,"There can be multiple attributes in the forward declaration, see the added test in `roottest/cling/dict/enum` (reduced from a case reported by CMS in https://github.com/cms-sw/cmssw/issues/42234), so we have to look for the last closing parentheses. (cherry picked from commit 9d2f7612a6e88d3a7148b19e131402349bac509b, backport of https://github.com/root-project/root/pull/13319)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13326:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/13326,2,['test'],['test']
Testability,"There is a `if(clad)` in the CMakeLists.txt to disable clad if there is no internet connection. However, it doesn't work right now, because it's after `include(RootBuildOptions)`, meaning the `clad` flag is not even set yet (only if explicitly set by the user, but not if we go with the default `clad=ON`). This logic error is fixed by this commit. To be backported to the 6.32 release branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15488:312,log,logic,312,https://root.cern,https://github.com/root-project/root/pull/15488,1,['log'],['logic']
Testability,"There is a logging statement to estimate whether the number of requested; partitions is reasonable given the entries in the first file. This; should not happen every time, but on explicit user request. Python; logging defaults to WARNING, so move the statement to DEBUG to give; better control.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10905:11,log,logging,11,https://root.cern,https://github.com/root-project/root/pull/10905,2,['log'],['logging']
Testability,"There is an infinite loop in; `PyROOT::TMemoryRegulator::ClearProxiedObjects()`:. ```C++; while (!fObjectMap.empty()) {; auto elem = fObjectMap.begin();; auto cppobj = elem->first;; auto klassid = elem->second;; auto pyclass = CreateScopeProxy(klassid);; auto pyobj = (CPPInstance *)MemoryRegulator::RetrievePyObject(cppobj, pyclass);. if (pyobj && (pyobj->fFlags & CPPInstance::kIsOwner)) {; ...; } else {; // Non-owning proxy, just unregister to clean tables.; // The proxy deletion by Python will have no effect on C++, so all good; MemoryRegulator::UnregisterPyObject(pyobj, pyclass);; }; }; ```. In the second code branch, the object is not removed from the `fObjMap`,; if `UnregisterPyObject` doesn't call the unregister hook because it; quits early. This can happen if there is not C++ object corresponding to; the regulated python object, causing an infinite loop because; `fObjectMap` never gets empty. Although this seems like an obvious logic error, this was only noticed; after the cppyy upgrade. Probably the code path was not hit before. Addresses; https://github.com/root-project/root/issues/15085#issuecomment-2031363812. This PR also includes a second refactoring commit to reduce the amount of C++ code in PyROOT. **This could maybe also fix the problem with the distributed RDataFrame test timeouts!**",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15106:948,log,logic,948,https://root.cern,https://github.com/root-project/root/pull/15106,2,"['log', 'test']","['logic', 'test']"
Testability,"There was a segmentation fault in the RooFit batch mode with; multithreading that happened when there were too many threads for the; number of events to be calculated. This caused a `std::size_t` underflow in this line:; ```C++; // roofit/batchcompute/src/RooBatchCompute.cxx; batches.setNEvents(nEvents - idx * batches.getNEvents());; ```; And then the computation tried to access entries that were out of; bounds. This commit adds one more line to reset the number of threads to how; many are needed. Like this we avoid the underflow and also spawing; unnecessary threads. This PR also changes which stressRooFit tests are declared as longtest,; such that the BatchMode tests are also run in the CI and we can avoid; problems like this in the future. Before, the interpreted tests were not declared as longtests, and the; compiled versions were not. This is now flipped, such that the compiled; BatchMode CPU and CUDA tests are also run without `longtest`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10754:615,test,tests,615,https://root.cern,https://github.com/root-project/root/pull/10754,4,['test'],['tests']
Testability,"There was an evil hack in `RooAbsOptTestStatistic`:. ```c++; _dataClone->cacheArgs(this,_cachedNodes,_normSet,!_funcClone->getAttribute(""BinnedLikelihood"")) ;; ```. The final parameter determins if zero weights should be skipped when recalculating the caches. Indeed, for the NLL case, this corresponds to the BinnedLikelihood attrribute being present or not, but it broke the other test statistics for which zero weights should not be skipped at all. This commit suggests a safer way to manage this with a new `RooAbOptTestStatistic::_skipZeroWeights` flag. In particular, this change fixed a bug that got uncovered during a forum discussion:. https://root-forum.cern.ch/t/failing-chi2-fit/56309/3",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13639:383,test,test,383,https://root.cern,https://github.com/root-project/root/pull/13639,1,['test'],['test']
Testability,"There was some naming inconsistency between `minuit2-*` and `minuit2_*` CMake options; this standardizes that to match ROOT (`minuit2_*`); due to a mismatch, mpi and openmp could not be enabled in the standalone build. This also fixes an error in commit 1a75a687f19 that has incorrect CMake syntax (mixing `set_property` and `set_target_properties` style - would only affect CMake < 3.9 due to surrounding if statement). Running tests with MPI enabled will actually try to run the tests with MPI.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1809:429,test,tests,429,https://root.cern,https://github.com/root-project/root/pull/1809,2,['test'],['tests']
Testability,"There's no need for it, as in the MT case we build one output tree; per task (i.e. per input tree cluster), so there will be no need; of resetting output branch addresses. TODO: test that this is still true when friends are present (I don't think it is?)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2207:178,test,test,178,https://root.cern,https://github.com/root-project/root/pull/2207,1,['test'],['test']
Testability,These PR fixes several issues in pymva: . - the scikit-learn methods require some update for new version of scikit-learn; - the disabling of eager execution for model prediction causes an issue on MacOS with the multi-processing. The tests are automatically restarted by the multi-processing. This is now avoided by not disabling eager-execution on MacOS platform. ; - Using .keras file is problematic for MacOS arm. (load_models does not work). Go back using .h5 files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13634:234,test,tests,234,https://root.cern,https://github.com/root-project/root/pull/13634,1,['test'],['tests']
Testability,"These changes achieve two things:. 1. Performance improvement of CUDA backend by factor two by better organizing the copies from host to device; 2. Avoid the hardcoded maximum number of input variables for the compute function, which was a problem for RooAddPdfs with many components. More detail in the commit descriptions. Here are the reproduced CHEP 2023 plots with this PR:. ![benchRooFitBackends](https://github.com/root-project/root/assets/6578603/785828ac-5265-449a-833f-ff9ea018c649). ![benchRooFitUnbinned](https://github.com/root-project/root/assets/6578603/f79a8cc5-bb12-4efb-9917-790a06fe2f63). The older benchmark results can be found in this CHEP presentation:; https://indico.jlab.org/event/459/contributions/11570/attachments/9440/13688/roofit_heterogeneous_chep_2023_with_transitions.pdf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13556:618,benchmark,benchmark,618,https://root.cern,https://github.com/root-project/root/pull/13556,1,['benchmark'],['benchmark']
Testability,"These changes allow the user to generate a dictionary with rootcling and selecting classes with a selection XML file, the selection file format of genreflex, instead of a traditional LinkDef file. Fixes https://github.com/root-project/root/issues/13543. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13902:319,test,tested,319,https://root.cern,https://github.com/root-project/root/pull/13902,1,['test'],['tested']
Testability,"These changes are on top of the first draft that I submitted, that was merged as part of [PR13929](https://github.com/root-project/root/pull/13929). The requested changes can be tracked in my personal drafts repo [here](https://github.com/QuillPusher/QP_Drafts/pull/3). Changes:. - RooFit intro before AD support -> already covered in ""Overview on RooFit implementation details..."" section by @guitargeek. - **Extracting free functions** to a separate header file is **optional**, re-wrote it as one of the two currently recommended approaches. - changed to ""Support **Code Generation**"" instead of ""AD Support"" in most places. - minor formatting and spelling errors changed. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14018:741,test,tested,741,https://root.cern,https://github.com/root-project/root/pull/14018,1,['test'],['tested']
Testability,These changes backport the commits that add numba support in cppyy master to PyROOT. It currently supports passing objects to C++ functions and returning builtin types from the functions inside numba JIT'ed code. It also supports accessing data members and methods from class types. The [tests added](https://github.com/sudo-panda/roottest/compare/502450f83a346aa1267fc4f48b6d749fa6038611..numba) can also be used to understand the support that is provided through this PR. ## Checklist:. - [ ] Pass all python tests in `roottest` (1 test failing - `roottest-python-memory-memory`); - [ ] Add numba test to `roottest`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11096:288,test,tests,288,https://root.cern,https://github.com/root-project/root/pull/11096,4,['test'],"['test', 'tests']"
Testability,"These changes test and provide the functionality to access quantities called ""mybranch.mysubbranch""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1701:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/1701,1,['test'],['test']
Testability,"These commands, bound respectively to `ESC l` and `ESC u`, should {lower,upper}case the next word; however, only the first character was changed. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #10136.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10144:167,test,tested,167,https://root.cern,https://github.com/root-project/root/pull/10144,1,['test'],['tested']
Testability,"These commits fix the tab completion for JupyROOT notebooks. This fixes [ROOT-8346](https://sft.its.cern.ch/jira/browse/ROOT-8346) and [ROOT-8347](https://sft.its.cern.ch/jira/browse/ROOT-8347). There still seem to be issues though, for example; ```; TString a (SHIFT+ENTER); a.D(TAB)a(TAB); ```; completes to; ```; a.Data()ta(); ```; But to me this seems to be caused outside of ROOT. The completions were tested using this [test](https://gist.github.com/suhlatwork/ef20df8ffeef8cf9212d6535ef2e8137#file-testtcjupyroot-py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/559:407,test,tested,407,https://root.cern,https://github.com/root-project/root/pull/559,3,['test'],"['test', 'tested', 'testtcjupyroot-py']"
Testability,These commits fix two GenVector failing [tests](http://cdash.cern.ch/viewTest.php?onlyfailed&buildid=342982).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/502:41,test,tests,41,https://root.cern,https://github.com/root-project/root/pull/502,1,['test'],['tests']
Testability,"These engines can be used to obtain the same sequences of numbers as RANLUX generators using recursive subtract-with-borrow steps, but with enhanced performance. Apart from the choice of parameters, the main difference between the various implementations is the way of seeding the initial state of the generator. This commit includes engines for compatibility with:; * the original implementation by Fred James, with parameters for; - luxury level 3 (`p = 223`), also matching `gsl_rng_ranlux`; - luxury level 4 (`p = 389`), also matching `gsl_rng_ranlux389` producing floating point numbers from 24 bits of randomness;; * the family of generators using a second-generation version of the RANLUX algorithm as implemented in the GNU Scientific Library:; - `gsl_rng_ranlxs[012]` using 24 bits per floating point number, and; - `gsl_rng_ranlxd[12]` using 48 bits per floating point number;; * the implementation by Martin Lüscher written in C that uses four states per generator; similar to GSL, there are `ranlxs[012]` with 24 bits per number and `ranlxd[12]` with 48 bits per number; and; * the generators `std::ranlux{24,48}` defined by the C++ standard. The values in the tests were extracted directly from the mentioned implementations, showing that the LCG implementation is equivalent to the RANLUX algorithm. I am not adding compatibility engines for CLHEP because its semantics are very weird: While `CLHEP::RanluxEngine::setSeed` yields the same sequences as the original implementation by James, the seed is treated differently when passed as an argument to the constructor.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8383:1173,test,tests,1173,https://root.cern,https://github.com/root-project/root/pull/8383,1,['test'],['tests']
Testability,These files are available in the source tree. By trying these local copies before trying the remote copies it is possible to run the tests without network access.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/403:133,test,tests,133,https://root.cern,https://github.com/root-project/root/pull/403,1,['test'],['tests']
Testability,"These files are unused and can be removed. This should fix this warning in the ROOT nightlies on the mac13 node:. ```; core/clib/src/mmtrace.c:32:14: warning: a function declaration without a prototype is deprecated in all versions of C and is not supported in C2x [-Wdeprecated-non-prototype]; extern char *getenv ();; ```. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=mac13,SPEC=cxx20,V=master/lastBuild/parsed_console/. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13764:538,test,tested,538,https://root.cern,https://github.com/root-project/root/pull/13764,1,['test'],['tested']
Testability,These fixes replace using MethodDNN with MethodDL in tests and tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5704:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/5704,1,['test'],['tests']
Testability,"These minor changes seem to affect the way in which TTreeCache interacts with different IO classes, e.g. TTree/TChain vs TTreeReader. In `TTreeCache::FillBuffer` the change in values of `fEntryCurrent` and `fEntryNext`, respectively the first entry of the current cluster and the first entry of the next cluster, has been moved before an `if` condition that was causing an early exit from the function.; This, in conjunction with the change in `TTreeReader::SetEntriesRange` apparently fixes the issues with the cache when running a simple program that uses only TTreeReader. At the same time, the changes affect the interaction of the cache with a TTree-only program in a way that now is throwing a log error:; ```Error in <TTreeCache::FillBuffer>: Inconsistency: fCurrentClusterStart=821695 fEntryCurrent=821695 fNextClusterStart=1643390 but fEntryCurrent should not be in between the two```. I'm not sure why these changes affect positively the TTreeReader examples and negatively the TTree ones. Some links to these examples follow.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5365:700,log,log,700,https://root.cern,https://github.com/root-project/root/pull/5365,1,['log'],['log']
Testability,These names collided with those in; tree/dataframe/test/dataframe_samplecallback.cxx.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9259:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/9259,1,['test'],['test']
Testability,"These symbols may not be found automatically. See also upstream issue https://github.com/llvm/llvm-project/issues/61289. This fixes the test `DynamicLibraryManager/cached_realpath.C`, approach by Lang Hames.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13286:136,test,test,136,https://root.cern,https://github.com/root-project/root/pull/13286,1,['test'],['test']
Testability,These tests are expected to fail at the moment. RNTupleDS needs a little tweak to use RRVecField instead of RVectorField to read collections. Re-test and merge after #10623 is in.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10621:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/10621,2,['test'],"['test', 'tests']"
Testability,These tests ensure that the functionality of the current PyROOT is as well available in experimental PyROOT. No explicit pythonizations are added since the feature is now provided directly by CPyCppyy.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3475:6,test,tests,6,https://root.cern,https://github.com/root-project/root/pull/3475,1,['test'],['tests']
Testability,"These usages of `R__ASSERT` were meant to check preconditions; that are guaranteed by the program's logic, i.e. are only; relevant for catching bugs in our code. Let's disable them; in production code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9268:100,log,logic,100,https://root.cern,https://github.com/root-project/root/pull/9268,1,['log'],['logic']
Testability,"These useful tests are relatively short (runtime 28 seconds in total) and test lower-level RooFit functionality. Moving them from roottest to roofit has the following benefits:. * Faster RooFit development experience: it's not necessary anymore to also add and compile all of `roottest`, if you want to make sure locally that the vectorized pdf tests always compile and pass. * The vectorized pdf tests will be able to consider the RooFit-internal preprocessor macros at build time, like `ROOFIT_CUDA` and `ROOFIT_LEGACY_EVAL_BACKEND`. Like this we can ensure that the tests will pass no matter how RooFit was configured at compile time. This is for me personally the strongest reason and was the motivator for this commit. * Avoid code repetition in `root` and `roottest`, because now the vectorized PDF tests will be able to re-use private code from RooFit. * If you want to build standalone RooFit with all tests, you won't have to stitch together the two repositories. Sister PR: https://github.com/root-project/roottest/pull/1199",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16661:13,test,tests,13,https://root.cern,https://github.com/root-project/root/pull/16661,7,['test'],"['test', 'tests']"
Testability,This PR achieves several things in the RooFit HS3 format:. * JSON -> WS -> JSON closure in the HistFactory test (the JSON is now invariant); * Fix export of RooDataSets with only one entry; * Automatically export RooDataSets that represents binned datasets to the same format at binned datasets; * Also export special `Lumi` parameter from HistFactory; * Achieve exactly the same fit results with the same parameters when exporting HistFactory workspace to JSON and importing it back,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12594:107,test,test,107,https://root.cern,https://github.com/root-project/root/pull/12594,1,['test'],['test']
Testability,"This PR addresses the TODO comments to remove the superfluous public getters / properties logic in `TreeHeadNode`. Currently, just parses the user arguments in the `__init__` method and stores the needed attributes. My idea is that in the end we'll only need to store `npartitions` and `tree` (which are always needed) plus `defaultbranches` and `friendinfo` as ""optional"" class attributes (meaning they are initialized to `None` and changed if some conditions apply). . For simplicity, in this PR I still leave `treename` and `inputfiles` attributes which are needed in the `Ranges.get_clusters` function. The next PRs will address:; * The assumption we only have one unique treename in the RDataFrame; * Change in `Ranges.get_clusters` to accept a `TTree` instance as argument, pairing it with new C++ functions in `ROOT::Internal::TreeUtils` to retrieve a vector of clusters (plus some other metadata) depending if it's a TTree or TChain. If the logic for this PR is approved I'll add more docs and commit messages",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8816:90,log,logic,90,https://root.cern,https://github.com/root-project/root/pull/8816,2,['log'],['logic']
Testability,"This PR addresses the code quality issues identified by @Axel-Naumann and @lmoneta . One of the points raised can be tackled in multiple ways. The purpose of publishing this PR now with the **[Do Not Merge]** tag is to facilitate discussion (see last section). I can then apply what we agree upon, update the PR and Lorenzo can merge. . ## Solved; The following issues have been addressed (1 commit per issue more or less): . * Compilation warnings are solved.; * Assumptions about the size of passed matrices are asserted where appropriate.; * Flow of control in unit tests is simplified by exiting early with an error code when a test fails.; * Floating point arithmetic issue solved when checking whether a float is actually an int. ## Discussion. One of the comments has to do with the overly verbose signature of propagation functions in all architectures. This is caused because we always need to pass the convolution parameters besides the actual inputs and outputs (strides, padding, kernel sizes are already 7 parameters that are often passed together). . One proposed solution is to capture them in a struct (perhaps called `ConvParams`) and then pass this struct around instead. I like this approach because it greatly simplifies the signatures. . An alternative approach could be to let the layer methods pass a pointer (or reference) to the calling object (`this`). The advantage is that the verbose functions accept different parameters, for example the forward prop expects the convolution parameters (stride, padding, kernel size) while the backward pass expects the input and output size. Passing a reference to the layer itself will allow each function to pick what it needs, thus allowing us to simplify all calls with a common strategy. I would like to hear opinions on which method to choose.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2321:514,assert,asserted,514,https://root.cern,https://github.com/root-project/root/pull/2321,3,"['assert', 'test']","['asserted', 'test', 'tests']"
Testability,"This PR addresses the report in [ROOT-9859](https://sft.its.cern.ch/jira/browse/ROOT-9859) about the change in behaviour of `__str__`, which now relies on cling to obtain a pretty printing for a class. With this PR, if what we obtain from cling is not pretty but just an address, we fall back to `__repr__` in `__str__`. The PR contains the changes for both current and experimental PyROOT, together with their respective tests and tutorials.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3152:422,test,tests,422,https://root.cern,https://github.com/root-project/root/pull/3152,1,['test'],['tests']
Testability,"This PR adds (a first version of) the `RNTupleIndex`, which is an in-memory structure that maps RNTuple field values (or combinations thereof) to an entry index in the RNTuple for which the index was built. Currently, the index only resides in memory and thus has to be (re)build each time. `RNTupleIndex` will be used by the `RNTupleProcessor` to enable dataset joins and will be as transparent as possible to users. Currently, no public interface is foreseen. At this point, no persistification is foreseen, but this might be added in the future. The implementation of the `RNTupleIndex` in this PR is hash-based. An implementation that is vector-based (but with the same interface) will also be considered. The idea is to benchmark and evaluate both implementations (and potentially more). Based on the results we can decide which one to actually use (or alternatively make multiple implementations available if they show clear tradeoffs in different use cases).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15116:725,benchmark,benchmark,725,https://root.cern,https://github.com/root-project/root/pull/15116,1,['benchmark'],['benchmark']
Testability,This PR adds a message viewing accessible through top left menu.; At the moment the view content is browser console messages and a checkbox to enable/disable debug mode. There are also minor changes in log messages and additional try/catch blocks.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7270:202,log,log,202,https://root.cern,https://github.com/root-project/root/pull/7270,1,['log'],['log']
Testability,"This PR adds a new callback to the PyKeras method.; I've build ROOT without any errors and run the ctests and all of them passed. . You can try out this new callback with:; `sudo pip install keras --upgrade`; `sudo pip install tensorflow --upgrade`. And then run: `python tutorials/tmva/keras/ClassificationKeras.py`. The callback will create a new directory called 'logs'.; Then you can call while or after training tensorboard: `tensorboard --logdir=./logs`; Now you can open the link from your terminal and visualize the network and training. ; The `ClassificationKeras.py` script, seems to be not compatible with the Keras 2.x API right now, therefore you can revert the changes of this PR in this specific script after testing. More information on TensorBoard: https://www.tensorflow.org/get_started/summaries_and_tensorboard. Also pointing to the author of the PyKeras implementation: @stwunsch. Thanks in advance for reviewing this PR!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1353:367,log,logs,367,https://root.cern,https://github.com/root-project/root/pull/1353,4,"['log', 'test']","['logdir', 'logs', 'testing']"
Testability,"This PR adds a new data source for `RDataFrame` that is able to provide data from SQlite `SELECT` queries. It will be useful for cvmfs, where we have file catalogs and monitoring information in sqlite files. For instance, one can do. auto rdf = ROOT::RDF::MakeSqliteDataFrame(""catalog.sqlite"", ""select * from catalog"");; auto h = rdf.Define(""lname"", ""name.length()"").Histo1D(""lname"");. to show the distribution of file name sizes. There are probably more use cases, for instance sqlite export of conditions data. This is work in progress, I'm posting it for early comments and feedback. My open points are. - Unit and integration tests are yet to be done; - The data source work single-threaded only at the moment. I initially thought it might be enough to return only a single row in `GetEntryRanges()` to make it thread-safe but that's apparently not enough. So I'm now thinking to wrap `SetEntry()` and `GetEntryRanges()` in a mutex.; - The code is not reusing `TSQLiteServer`. It felt like it requires stretching the `TSQLServer` interface in perhaps unwanted ways, for saving only a handful of direct sqlite API calls. On the other hand, with (probably quite a bit) more work it might be possible to have a more general data source that works on any SQL result set.; - Determining column types in SQlite is tricky as it is dynamically typed and in principle each row can have different column types. If a table column is queried as is, I can use the default/declared column type. For expressions, I'll use the type of the first row of the result set. Still it can result in a column to be of type `NULL` where subsequent rows actually have meaningful values. My guess is that the current heuristic is practical enough, and of course the user can formulate the `SELECT` query to avoid ambiguity.; - It would not be impossible to add support for remote reading of sqlite files. To do so, one can add a custom implementation of an sqlite virtual file system to have data pouring in directly from HTT",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2322:630,test,tests,630,https://root.cern,https://github.com/root-project/root/pull/2322,1,['test'],['tests']
Testability,"This PR adds a new version of the `RDataSource::GetColumnReaders` method. This new version allows the implementation of per-datasource, lazy column readers that know how to communicate with the concrete associated datasource type. As a consequence, datasource implementations are not required to load; values of all required columns when `RDataSource::SetEntry` is called, but; the loading can be delayed to the moment in which a value is actually; needed. In case of strict upstream `Filters`, this should result in; less work performed and therefore improved runtimes. For the `lhcb` benchmark at https://github.com/jblomer/iotools, using the new lazy column readers for `RNTupleDS` results in a 40% runtime improvement.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6348:586,benchmark,benchmark,586,https://root.cern,https://github.com/root-project/root/pull/6348,1,['benchmark'],['benchmark']
Testability,This PR adds a test for #14710,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16763:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/16763,1,['test'],['test']
Testability,"This PR adds a test to check the right behaviour when reading character arrays into Python strings, as reported in [ROOT-9768](https://sft.its.cern.ch/jira/browse/ROOT-9768). In modern Cppyy (and therefore in experimental PyROOT), character arrays are treated differently than numeric arrays: they are converted into Python strings taking into account the '\0' character that marks end of string in C.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2925:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/2925,1,['test'],['test']
Testability,"This PR adds an extra factory function for creating an `RNTupleImporter` by directly providing a pointer to the `TTree` to import, rather than the tree name and file name. With this, it should also become possible to import `TChain`s down the road, but this will require another PR. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12475:289,test,tested,289,https://root.cern,https://github.com/root-project/root/pull/12475,1,['test'],['tested']
Testability,"This PR adds branch type inference to Histo1D with weights, as well as Histo2D, Histo3D, Profile1D and Profile2D both with and without weights.; Code has been simplified. Docs have been updated. A related PR in roottest introduces testing for the new functionality.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/532:231,test,testing,231,https://root.cern,https://github.com/root-project/root/pull/532,1,['test'],['testing']
Testability,This PR adds in TreeProcessorMP support for processing TTree datasets filtering via a TEntryList.; A new set of Process methods taking a TEntryList * as 3rd argument has been added.; A test for the new functionality is ready to be pushed in roottest once this is pushed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/573:185,test,test,185,https://root.cern,https://github.com/root-project/root/pull/573,1,['test'],['test']
Testability,"This PR adds some (mostly size and compression-related) methods to the `RNTupleInspector` utility class. There are some small TODOs left, but I first wanted to collect some feedback. - [x] tested changes locally; - [x] updated the docs (if necessary); - [ ] add support for all field structures in `GetColumnsForField`; - [ ] decide on when to collect the (size) data: on creation of the `RNTupleInspector` object (how it is done now), or in a more on-the-fly approach",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12395:189,test,tested,189,https://root.cern,https://github.com/root-project/root/pull/12395,1,['test'],['tested']
Testability,"This PR adds some (mostly size and compression-related) methods to the `RNTupleInspector` utility class. There are some small TODOs left, but I first wanted to collect some feedback. - [x] tested changes locally; - [x] updated the docs (if necessary); - [x] add support for all field structures in `GetColumnsForField`; - [x] decide on when to collect the (size) data: on creation of the `RNTupleInspector` object (how it is done now), or in a more on-the-fly approach",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12396:189,test,tested,189,https://root.cern,https://github.com/root-project/root/pull/12396,1,['test'],['tested']
Testability,"This PR adds support for `std::multimap` and `std::unordered_multimap` fields. The on-disk representation is exactly the same as `std::(unordered)_map`, so the only addition is the type name resolution for type-erased fields and the `RField` template specializations. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16331:289,test,tested,289,https://root.cern,https://github.com/root-project/root/pull/16331,1,['test'],['tested']
Testability,"This PR adds support for `std::multiset` and `std::unordered_multiset` fields. The on-disk representation is exactly the same as `std::(unordered)_set`, so the only addition is the type name resolution for type-erased fields and the `RField` template specializations. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16330:289,test,tested,289,https://root.cern,https://github.com/root-project/root/pull/16330,1,['test'],['tested']
Testability,"This PR adds support for defining, parsing and generating code for custom operator in TMVA SOFIE. SOFIE is being developed following the ONNX standards, but cases may arise when a particular operator is not defined or developed. In those scenarios, an user can still integrate the operator using the custom operator implementation. . For adding a custom operator in `RModel`, the user has to define the input tensor names, output tensor names, attribute values, output tensor shapes and a header file name. The `Generate()` function for the custom operator must be defined in a separate header file under a namespace, which is called for computing the output tensor values. . ## Checklist:; - [x] `ROperator_Custom` class; - [x] Including usage in generated code; - [x] Tests for ROperator_Custom operator; - [ ] Tutorials explaining the usage",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11065:770,Test,Tests,770,https://root.cern,https://github.com/root-project/root/pull/11065,1,['Test'],['Tests']
Testability,"This PR adds support for parsing Convolution layers from PyTorch and Keras models into an RModel object. ## Progress; - [x] Support for Keras Convolution Layers(Conv2D) ; - [x] Support for `padding=""valid""`; - [x] Support for `padding=""same""`; - [x] Tests. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9666:250,Test,Tests,250,https://root.cern,https://github.com/root-project/root/pull/9666,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"This PR adds support for parsing Convolution layers from PyTorch and Keras models into an RModel object. ## Progress; - [x] Support for PyTorch Convolution Layers (Conv2D) ; - [x] Support for Keras Convolution Layers(Conv2D) ; - [x] Support for `padding=""valid""`; - [x] Support for `padding=""same""`. ## Checklist:; - [ ] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8974:321,test,tested,321,https://root.cern,https://github.com/root-project/root/pull/8974,1,['test'],['tested']
Testability,This PR adds support for parsing Convolution layers from PyTorch models into an RModel object. Progress; - [x] Support for PyTorch Convolution Layers (Conv2D); - [x] Tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9119:166,Test,Tests,166,https://root.cern,https://github.com/root-project/root/pull/9119,1,['Test'],['Tests']
Testability,This PR adds support for parsing SELU and Sigmoid Activation from Keras models into an RModel object. ## Checklist:. - [x] Tested changes locally; - [x] Tests for Parsing Keras & PyTorch models; - [x] Add ONNX model with Selu & Sigmoid operator for tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9000:123,Test,Tested,123,https://root.cern,https://github.com/root-project/root/pull/9000,3,"['Test', 'test']","['Tested', 'Tests', 'tests']"
Testability,This PR adds support for parsing the Keras Reshape layer in SOFIE RModel. ## Checklist:; - [x] Parsing function; - [x] Tests; - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11055:119,Test,Tests,119,https://root.cern,https://github.com/root-project/root/pull/11055,2,"['Test', 'test']","['Tests', 'tested']"
Testability,"This PR adds support for the LZ4 compression algorithm (branch has been significantly cleaned up). In testing with the sample `Event` object found in the `test` subdirectory, we found that the resulting files were about 13% larger than the default compression settings. Deserialization speed was 95% of the uncompressed speed. As discussed with @pcanal",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/590:102,test,testing,102,https://root.cern,https://github.com/root-project/root/pull/590,2,['test'],"['test', 'testing']"
Testability,"This PR adds the RNTupleInspector class to the RNTuple utility package and can be used for (static) inspection of RNTuples. It currently provides basic information on the size and compression of a given RNTuple. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:. -[x] Add unit tests; -[x] Add usage documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12013:408,test,tests,408,https://root.cern,https://github.com/root-project/root/pull/12013,1,['test'],['tests']
Testability,"This PR adds the `RNTupleDescriptor::GetColumnIterable()` method, which returns an iterator over all (logical) columns of the RNTuple (without having to specify a field). Some questions to still consider:; 1. The original `RNTupleDescriptor::GetColumnIterable(const RFieldDescriptor &field)` method returns an iterator over the _logical_ columns. Would it make more sense to return physical columns for this method or should we stay consistent across methods? For the `RNTupleInspector`, we're interested in physical columns but if we have the logical columns we could filter out the non-physical ones.; 2. The original method only returns the columns for the specified field, without considering its potential sub-fields. Would it be useful to add a flag to toggle whether the columns for sub-fields should be included (in a separate PR)?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12893:102,log,logical,102,https://root.cern,https://github.com/root-project/root/pull/12893,2,['log'],['logical']
Testability,This PR adds the `RNTupleInspector` functionality to get a histogram showing the distribution of the compressed page sizes for either a single column (provided its physical ID) or all columns of a given type. The lower and upper bounds of the returned histogram are determined by the smallest and largest page size. The number of bins can be provided when calling the function (the default is set to 64). ## Checklist:. - [X] tested changes locally; - [X] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14099:426,test,tested,426,https://root.cern,https://github.com/root-project/root/pull/14099,1,['test'],['tested']
Testability,"This PR adds the feature to get a histogram representing different possible column type-related properties. These properties are the type count, number of elements per type, compressed size per type and uncompressed size per type. The current version automatically sets the histogram title based on the information it shows. The title can be changed after returning it using `TH1::SetTitle`. An alternative could be to add another argument which has the default value that is currently used but can be used to provided an alternative title. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13715:562,test,tested,562,https://root.cern,https://github.com/root-project/root/pull/13715,1,['test'],['tested']
Testability,"This PR adds the following fixes and improvements to `RNTupleInspector::GetPageSizeDistribution`:; * When the provided column type is not present in the RNTuple being inspected, an empty histogram is returned.; * When a provided column ID is not present in the RNTuple being inspected, an exception is thrown.; * Default axis titles have been added.; * An overloaded method to provide multiple column IDs at once has been added. The method taking only one ID has been adapted to use this overload.; * The option to provide multiple column types at once has been added. Here, a `THStack` is returned rather than a `TH1D`. The method taking only one type has been adapted to use this overload. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14323:713,test,tested,713,https://root.cern,https://github.com/root-project/root/pull/14323,1,['test'],['tested']
Testability,"This PR adds the functionality to print per-column type information for a given RNTuple. Output can be formatted in both a text-based table as well as CSV (and may be extended with more formats where desired). ## Example. For an RNTuple with 75 rows each containing one [ComplexStructUtil](https://github.com/root-project/root/blob/3acc0e601bd74ffd876c755069e8e989d922521c/tree/ntupleutil/v7/test/CustomStructUtil.hxx#L36) field, the default (table-formatted) output is as follows:. ```; root [1] inspector->PrintColumnTypeInfo(); column type | count | # elements | bytes on disk | bytes in memory; ----------------|---------|-----------------|-----------------|-----------------; SplitIndex64 | 2 | 150 | 72 | 1200 ; SplitReal32 | 4 | 300 | 189 | 1200 ; SplitUInt32 | 3 | 225 | 123 | 900 ; ```. And the CSV-formatted output:. ```; root [2] inspector->PrintColumnTypeInfo(ROOT::Experimental::ENTupleInspectorPrintFormat::kCSV); columnType,count,nElements,onDiskSize,inMemSize; SplitIndex64,2,150,72,1200; SplitReal32,4,300,189,1200; SplitUInt32,3,225,123,900; ```. Additionally, it is possible to define where the output should be written to (default is stdout).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13699:392,test,test,392,https://root.cern,https://github.com/root-project/root/pull/13699,1,['test'],['test']
Testability,"This PR adds the possibility to specify which fields should be read by the `RNTupleProcessor` by passing an `RNTupleModel` to its constructor. The processor will create and own an `REntry` based on this, but it will use the pointers from the model's default entry to hold the field values during iteration. This way, the pointers returned by `RNTupleModel::MakeField` can be used in the processor iteration to access the values being read. Passing a model is optional; if not provided, one will be created from the descriptor of the first specified RNTuple. A follow-up PR will add the possibility to change the model after the processor has been created (useful when the set of fields to read cannot be decided at compile-time). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15985:751,test,tested,751,https://root.cern,https://github.com/root-project/root/pull/15985,1,['test'],['tested']
Testability,"This PR adds to RooFit:. 1. Parallelism to gradient calculation in Minuit2 minimization in the form of a extensible interface in the RooFit::MultiProcess package.; 2. A refactored test statistics framework with cleaner separation of computation and physics/statistics concepts than in existing RooAbsTestStatistic derived classes. Currently, RooFit::TestStatistics is part of roofitcore. Note: `TestStatistics/likelihood_builders` still has to be finished, this will be done in the coming few weeks.; 3. RooFitZMQ, a wrapper of ZeroMQ functionality used in RooFit::MultiProcess for communication between processes. Modified after [code](https://gitlab.cern.ch/raaij/generate_and_sort/-/tree/master/ZMQ), contributed by @roelaaij. RooFitZMQ maybe still needs some attention, because in its current form it includes a big part of the libzmq source tree (needed for ppoll, see below), which I'm sure causes licensing issues (it's LGPLv3). I'm open to suggestions on how to handle this. To make the above additions possible, some modifications to both RooFit and non-RooFit code were made as well:. 1. In `Minuit2`:; 1. We added a subclass of the AnalyticalGradientCalculator called the ExternalInternalGradientCalculator. Whereas the AGC assumes that the gradient that is passed to it (from outside of Minuit2) is in normal parameter space, the EIGC allows its (External) user to use Minuit2 ""Internal"" parameter space, i.e. the parameter space that may be bounded into some range using transformation functions. This allowed us to exactly (floating point bit-wise) replicate the Minuit2 gradient calculation outside of Minuit2 itself, allowing us to parallelize this gradient calculation process exactly without having to worry about breaking Minuit2. The replication, `NumericalDerivatorMinuit2`, was based on earlier work by @lmoneta who already had separated out the bulk of the gradient calculation code from Minuit2.; 2. To make this all work, we also had to upgrade precision of the transformation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:180,test,test,180,https://root.cern,https://github.com/root-project/root/pull/8294,3,"['Test', 'test']","['TestStatistics', 'test']"
Testability,"This PR adds two sets of pythonizations to `TSeqCollection` and its subclasses:; - Injection of item access methods (`__getitem__`, `__setitem__`, `__delitem__`), both for integer indices and slices.; - Injection of Python-list-like methods (`insert`, `pop`, `reverse`, `sort`, `index`). The PR also includes the corresponding unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3387:332,test,tests,332,https://root.cern,https://github.com/root-project/root/pull/3387,1,['test'],['tests']
Testability,"This PR adds vectorized implementations of several functions in TMath. It is a work in progress, just to receive early feedback. Currently, the following functions are vectorized and tested:. - TMath::Min; - TMath::Gaus; - TMath::BreitWigner; - TMath::CauchyDist; - TMath::LaplaceDist; - TMath::LaplaceDistI. TODO:; - [ ] Refactor the tests to avoid repeated code.; - [ ] Implement remaining functions.; - [ ] Discuss what to do with functions that, i.e., receive an Int_t and return a Double_t. When vectorizing this kind of patterns, one problem arises: the length of integers and double vectors cannot be assumed to be the same. Any comment is more than welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/655:183,test,tested,183,https://root.cern,https://github.com/root-project/root/pull/655,2,['test'],"['tested', 'tests']"
Testability,"This PR adds vectorized implementations of the following TMath functions using VecCore backend :. - Log2; - Breit-Wigner; - Gaus; - LaplaceDist; - LaplaceDistI; - Freq; - Bessel I0, I1, J0, J1. The first batch includes functions for which a definite speedup is obtained. Left out are the ones with more conditional branches. Work is ongoing to implement them as well. [Here](https://github.com/root-project/rootbench/pull/79) is the PR for benchmarks. Benchmarks from a trial run :; ```; ----------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------; BM_TMath_Log2 340895 ns 340801 ns 2042; BM_TMath_BreitWigner 42236 ns 42227 ns 16562; BM_TMath_Gaus 280188 ns 280130 ns 2476; BM_TMath_LaplaceDist 246254 ns 246176 ns 2834; BM_TMath_LaplaceDistI 291277 ns 291221 ns 2405; BM_TMath_Freq 388384 ns 388278 ns 1816; BM_TMath_BesselI0 283500 ns 283445 ns 2466; BM_TMath_BesselI1 327932 ns 327847 ns 2134; BM_TMath_BesselJ0 744044 ns 743897 ns 938; BM_TMath_BesselJ1 735381 ns 735235 ns 937; BM_VectorizedTMath_Log2 97462 ns 97433 ns 7079; BM_VectorizedTMath_BreitWigner 20773 ns 20769 ns 33494; BM_VectorizedTMath_Gaus 127413 ns 127385 ns 5519; BM_VectorizedTMath_LaplaceDist 118903 ns 118870 ns 5845; BM_VectorizedTMath_LaplaceDistI 130724 ns 130693 ns 5367; BM_VectorizedTMath_Freq 267444 ns 267389 ns 2590; BM_VectorizedTMath_BesselI0 177544 ns 177503 ns 3936; BM_VectorizedTMath_BesselI1 206571 ns 206523 ns 3370; BM_VectorizedTMath_BesselJ0 326378 ns 326312 ns 2144; BM_VectorizedTMath_BesselJ1 343600 ns 343531 ns 2014; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2236:440,benchmark,benchmarks,440,https://root.cern,https://github.com/root-project/root/pull/2236,3,"['Benchmark', 'benchmark']","['Benchmark', 'Benchmarks', 'benchmarks']"
Testability,"This PR aims to fix the problem of inconsistency in `TFormula::SetParNames()` and `TFormula::SetParameters()` functions as described in #7805. I have added warning if more values are provided than the actual number of parameters of `TFormula` object, original behaviour of the function is maintained apart from the added warning. Some test will fail due to the added warning, please tell if I should remove the warning or resolve the root cause of the warnings ( For instance, `TF1` using `TFormula::SetParameters()` and always passing 11 arguments is one cause of failing tests) . I would also like to slightly modify behaviour of these functions such that value and names of only specified parameters should be changed, current behaviour is to reset the value and names of parameters which aren't specified, but this change may negatively impact programs using these functions. But still, I think this change will make these functions more intuitive. Please tell if I should add this change. . This PR fixes #7805",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7812:335,test,test,335,https://root.cern,https://github.com/root-project/root/pull/7812,2,['test'],"['test', 'tests']"
Testability,"This PR and their roottest sibling PR contain fixes for the following tests:. Roottest python basic tests:; - roottest-python-basic-basic; - roottest-python-basic-overload. Roofit tutorials fixed by the addition of a pythonisation to get the using declarations of `RooAbsData` into `RooDataHist`. This pythonisation will not be needed anymore when a general solution is provided by the bindings, mainly by merging this Cppyy patch into ROOT: https://bitbucket.org/wlav/cppyy-backend/src/master/cling/patches/using_decls.diff; - tutorial-roofit-rf106_plotdecoration-py; - tutorial-roofit-rf610_visualerror-py; - pyunittests-pyroot-pyz-roodatahist-ploton; - tutorial-roofit-rf315_projectpdf-py; - tutorial-roofit-rf402_datahandling-py. Related to https://bitbucket.org/wlav/cppyy/issues/66/cppoverload-addmethod-cppoverload-clears; - tutorial-roofit-rf307_fullpereventerrors-py; - tutorial-roofit-rf706_histpdf-py. Some fixes for the following test, although it still can't be re-enabled due to https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants; - roottest-python-basic-datatype. Some fixes for the following test, but still can't be re-enabled (more issues to investigate):; - roottest-python-regression-regression",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4294:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/4294,4,['test'],"['test', 'tests']"
Testability,"This PR applies some fixes described in detail in the commit messages, with the goal to enable again the `IntegrateBins_SubRange` unit test which is done in the last commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10269:135,test,test,135,https://root.cern,https://github.com/root-project/root/pull/10269,1,['test'],['test']
Testability,This PR back port some of the changes applied in https://github.com/root-project/root/pull/13634 ; to use .h5 files instead of .keras for the pymva and SOFIE tests. ; Without this change the building of the Keras parser tests of SOFIE fails,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14926:158,test,tests,158,https://root.cern,https://github.com/root-project/root/pull/14926,2,['test'],['tests']
Testability,This PR backports in 6.26 some fixes from master in the build configuration for SOFIE. . - backport fix from #PR 11481 (movie some Sofie parser definition in implementation); - backport fix from #PR 11545 (fix some issues with no rt modules); - backport fix from the tests #11529 (apply some fixes in the building of SOFIE tests),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11576:267,test,tests,267,https://root.cern,https://github.com/root-project/root/pull/11576,2,['test'],['tests']
Testability,"This PR brings coverage of RNTuple+RVec almost on par with RNTuple+std::vector, e.g. by templating some existing std::vector tests over the collection type. There is one issue: in `RNTuple.ComplexRVec`, the element type's constructor and destructor gets called a different number of times for RVec than for std::vector, but I _think_ RVec is right and std::vector is wrong because of https://github.com/root-project/root/issues/10520 . I'd like to hear what Jakob thinks though :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10665:125,test,tests,125,https://root.cern,https://github.com/root-project/root/pull/10665,1,['test'],['tests']
Testability,This PR can be merged only when Ubu24 tests are all passing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15542:38,test,tests,38,https://root.cern,https://github.com/root-project/root/pull/15542,1,['test'],['tests']
Testability,"This PR change the longtest labels for some of the tests. ; Tests like stressHistogram, stressHistoFit, stressRooFit, stressRooStats are essentials and are test suites made of several individual tests. ; Their running for every PR is essential. ; Since for these tests an interpreted and a no interpreted version exists, flag as longtest only the non interpreted version. Start flagging instead as longtest other minor tests in math which take some time (longer than few seconds) but they are not critical.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3426:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/3426,6,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"This PR changes the size-related `RNTupleInspector` methods from `GetOnDiskSize` and `GetInMemorySize` to `GetCompressedSize` and `GetUncompressedSize`, respectively. An earlier version of `RNTuple` stored index fields as 32bit on-disk but kept them as 64bit in memory, causing a slight mismatch between the in-memory representation and actual non-compressed on-disk data. This is not the case anymore and moreover, the name `GetInMemorySize` may be confusing as it can be interpreted as the number of bytes that are actually currently stored in memory rather than the total uncompressed size. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13726:600,test,tested,600,https://root.cern,https://github.com/root-project/root/pull/13726,1,['test'],['tested']
Testability,"This PR changes the way CPyCppyy is built to also generate its pcm and rootmap files. This is relevant to fix the `roottest-python-cling` tests, which use `TPython`, now in CPyCppyy. Moreover, the PR includes a few relevant CPyCppyy headers in the PCH and sets the `CLING_STANDARD_PCH`, to prevent Cppyy from checking the PCH, in the environment scripts of ROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3575:138,test,tests,138,https://root.cern,https://github.com/root-project/root/pull/3575,1,['test'],['tests']
Testability,"This PR completes the fix provided for ROOT-8935 with another fix for ROOT-10279, by preventing; the injection of the constants of a scoped enum into the scope of the enum. The bug surfaced as a result of modifying `PropertyProxy::Set` to fix ROOT-9835. There is still a pending issue identified while testing the fixes above: when a scoped enum belongs to the global namespace, once we do a lookup of that scoped enum its constants are added to the global space too and can be accessed as `ROOT.constant_name`, which is wrong. A subsequent PR will fix this issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4246:302,test,testing,302,https://root.cern,https://github.com/root-project/root/pull/4246,1,['test'],['testing']
Testability,This PR concludes ROOT-8766. Tests for this functionality are added by a separate PR to roottest.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/535:29,Test,Tests,29,https://root.cern,https://github.com/root-project/root/pull/535,1,['Test'],['Tests']
Testability,This PR contains some follow-up changes to https://github.com/root-project/root/pull/8700 and https://github.com/root-project/root/pull/9078:. * avoid using `std::shared_ptr` for return values; * change copyright of roofitcore/TestStatistics to `(c) CERN` (requested by @Axel-Naumann in https://github.com/root-project/root/pull/8700#discussion_r738407080); * I used now the same copyright headers from https://github.com/root-project/root/pull/9078 also for the TestStatistics; * fix a build warning in non-debug mode; * don't install zmq.hpp header from builtins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9345:227,Test,TestStatistics,227,https://root.cern,https://github.com/root-project/root/pull/9345,2,['Test'],['TestStatistics']
Testability,"This PR enables cling diagnostics to be reported via the ROOT error handler, as required by the experiments. Independently, this error handler may be changed by the user (see TError.h). This is a backport of PR https://github.com/root-project/root/pull/8737/ and is required for the unit tests of another backport: https://github.com/root-project/root/pull/10120. This PR closes JIRA issue [ROOT-7587](https://sft.its.cern.ch/jira/browse/ROOT-7587).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10123:288,test,tests,288,https://root.cern,https://github.com/root-project/root/pull/10123,1,['test'],['tests']
Testability,This PR enables globbing on ROOT_ADD_GTEST. Instead of specifying a test in CMake as ; ```; ROOT_ADD_GTEST(myTest test1.cxx test2.cxx test3.cxx); ```; This PR enables specifying it as:; ```; ROOT_ADD_GTEST(myTest test*.cxx); ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/633:68,test,test,68,https://root.cern,https://github.com/root-project/root/pull/633,2,['test'],['test']
Testability,"This PR enhances the Max Pooling Layer in the following ways:. 1. **Increased test coverage.** Tests have been added for the backwards propagation, covering the cases where `depth > 1`, as well as overlapping receptive fields. The testing suite was also refactored using templates to eliminate code duplication. 2. **Bug Fix**. The newly added tests exposed a bug in the `Reference` implementation of back-propagation, in the case of overlapping receptive fields. The bug is resolved. 3. **CUDA implementation.** The GPU version is now fully functional in both forward and backward propagation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2175:78,test,test,78,https://root.cern,https://github.com/root-project/root/pull/2175,4,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,This PR extends the support for `std::map` fields with `std::unordered_map` fields. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14089:105,test,tested,105,https://root.cern,https://github.com/root-project/root/pull/14089,1,['test'],['tested']
Testability,"This PR extends the support for `std::set` fields with `std::unordered_set` fields. N.B. We might want to consider moving the dictionary entries for the tests of these types (along with the ones for `std::map` fields) to a dedicated LinkDef file, since technically they don't have anything to do with the `CustomStruct` test type. This can be addressed in a separate PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14069:153,test,tests,153,https://root.cern,https://github.com/root-project/root/pull/14069,2,['test'],"['test', 'tests']"
Testability,"This PR extends the type templation that was already present in some classes in the GenVector library to improve support for using vectorised (Vc) types. Specifically it :-. 1. Extends the templation to the Plane3D, Transformation3D and Translation3D types.; 2. Where necessary provides specialised methods for the vector types, when the original code was not generic enough to work in both scalar and vector scenarios. Typically this happens in the case of conditionals, where the differences required (booleans versus masks) are difficult to avoid. This PR is not complete, in that there are still some classes in GenVector that still do not support Vc types, as they are still not templated, such as the Rotation like transformations. It would be nice to add this at some point, but the code associated to these is more extensive (3DConversions.cxx for instance) and that will require some work. My changes pass the built in ROOT tests. In addition I have prepared a simple test case for the Vc types (attached) that I have used to check the scalar and vector types give equivalent results. Tested on OS X with the compilation command. clang++ -O3 -mavx2 -mfma `root-config --cflags` -I/Users/chris/Projects/Vc/install/include main.cpp `root-config --libs` -lGenVector /Users/chris/Projects/Vc/install/lib/libVc.a. [main-cpp.txt](https://github.com/root-project/root/files/820450/main-cpp.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/394:933,test,tests,933,https://root.cern,https://github.com/root-project/root/pull/394,3,"['Test', 'test']","['Tested', 'test', 'tests']"
Testability,This PR fixes #11707 by providing a test in roottest (sister PR https://github.com/root-project/roottest/pull/1210),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16766:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/16766,1,['test'],['test']
Testability,This PR fixes #12108 by providing a test. We want to make sure that on Windows the test passes as well.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16335:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/16335,2,['test'],['test']
Testability,"This PR fixes #13691 , although we might want to revisit the logic of [`TDirectoryFile::~TDirectoryFile`](https://github.com/root-project/root/blob/e8bdfaf5add048e5301bc8f96927ed6c7d3a8db2/io/io/src/TDirectoryFile.cxx#L178) since it's weird that it was triggered this way, IMHO. If deemed appropriate, I can use the small reproducer of the linked issue as a unittest of this fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13692:61,log,logic,61,https://root.cern,https://github.com/root-project/root/pull/13692,1,['log'],['logic']
Testability,"This PR fixes #15617, where the number of files is incorrectly returned by `RInterfaceBase`/`RDFDescription` for RDF's constructed from an `RDataSource`. It involves the addition of `GetNFiles` to the public interface of `RDataSource` and calling it in the relevant places. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15653:295,test,tested,295,https://root.cern,https://github.com/root-project/root/pull/15653,1,['test'],['tested']
Testability,This PR fixes -Dclingtest=On to add target cling and check-cling to ROOT. This in turn will build the cling binary and run its test suite.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1161:127,test,test,127,https://root.cern,https://github.com/root-project/root/pull/1161,1,['test'],['test']
Testability,"This PR fixes :. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-debian10-i386,SPEC=default,V=master/lastCompletedBuild/testReport/junit/projectroot/test/test_stressgraphics/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13636:172,test,testReport,172,https://root.cern,https://github.com/root-project/root/pull/13636,2,['test'],"['test', 'testReport']"
Testability,"This PR fixes ; - #15919; ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). clingwrapper tries to lookup the `ClassInfo` of `TViewPubFunctions` in meta which is not public. The return type of `GetListOfAllPublicMethods` should be a `TList` but the public `ClassDefInlineOverride` here:. https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/core/meta/src/TViewPubFunctions.h#L78-L82. and this usage:. https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/core/meta/src/TClass.cxx#L3845-L3849. exposes the type as `TViewPubFunctions`. This causes the observed offset calculation between `TList` and `TViewPubFunctions` in `Cppyy::GetBaseOffset`:; https://github.com/root-project/root/blob/a038a2f345f41392ce86e07b0683d1740dc9b07c/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx#L1443-L1457. which then fails, producing the warning. Running a check on the type:. ```python; import ROOT; print(""Type:"", ROOT.TObject.Class().GetListOfAllPublicMethods().IsA().GetName())""; ```. Gives:; ```; Warning: failed offset calculation between TList and TViewPubFunctions; Type: TViewPubFunctions; ```. No longer performing this override in `TViewPubFunction.h` fixes the type back to `TList` and the call to `GetBaseOffset` no longer happens:. ```python; print(""Type:"", ROOT.TObject.Class().GetListOfAllPublicMethods().IsA().GetName()); ```; and the warning disappears:. ```; Type: TList; ```. This fix also required an update in the reference file in roottest : https://github.com/root-project/roottest/pull/1159",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16177:47,test,tested,47,https://root.cern,https://github.com/root-project/root/pull/16177,1,['test'],['tested']
Testability,This PR fixes ROOT-10152.; It also adds a better test and a proper fix for ROOT-9563.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6238:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/6238,1,['test'],['test']
Testability,This PR fixes [ROOT-9219](https://sft.its.cern.ch/jira/browse/ROOT-9219) and optimises and streamlines the access to columns.; A test was of course added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1558:129,test,test,129,https://root.cern,https://github.com/root-project/root/pull/1558,1,['test'],['test']
Testability,"This PR fixes a regression introduced in a recent update to extend the templation in GenVector (PR #394). It turns out that this update broke the multiplication of a Transform3D by a Plane3D. This regression was spotted in the LHCb nightly build which tests against the master of ROOT. e.g. https://lhcb-nightlies.cern.ch/logs/build/nightly/lhcb-lcg-dev3/105/x86_64-centos7-gcc62-opt/LHCb/#show_error1538. The error is. ```; /build/jenkins-build-new/workspace/nightly-builds/build/build/LHCB/LHCB_HEAD/Det/RichDet/src/Lib/DeRichHPDPanel.cpp:673:52: error: no match for 'operator*' (operand types are 'const Transform3D {aka const ROOT::Math::Impl::Transform3D<double>}' and 'Gaudi::Plane3D {aka ROOT::Math::Impl::Plane3D<double>}'); 	 m_localPlane = geometry()->toLocalMatrix() * m_detectionPlane;. /build/jenkins-build-new/workspace/nightly-builds/build/build/LHCB/LHCB_HEAD/Det/RichDet/src/Lib/DeRichPMTPanel.cpp:407:46: error: no match for 'operator*' (operand types are 'const Transform3D {aka const ROOT::Math::Impl::Transform3D<double>}' and 'Gaudi::Plane3D {aka ROOT::Math::Impl::Plane3D<double>}'); 	 m_localPlane = geometry()->toLocalMatrix() * m_detectionPlane;; ```. This PR fixes this by adding an explicit operator for this. I have also extended the GenVector Vc test to explicitly cover this operation, as it was clearly one not covered in the ROOT tests so far.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/453:252,test,tests,252,https://root.cern,https://github.com/root-project/root/pull/453,4,"['log', 'test']","['logs', 'test', 'tests']"
Testability,This PR fixes backports the fix to keep eager execution on macOS to avoid multi-processing issue that gives timeout of tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13807:119,test,tests,119,https://root.cern,https://github.com/root-project/root/pull/13807,1,['test'],['tests']
Testability,This PR fixes compiling the code for parsing Keras model when the C-API of Python 2 is used. In this case some functions are not available in Python.h. Those functions are used to parse the convolutional layers from Keras. ; This PR excludes the parsing of this layer and avoid calling those functions available only in Python3. ; Also the tests using the cone layer parsing are disabled.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11950:340,test,tests,340,https://root.cern,https://github.com/root-project/root/pull/11950,1,['test'],['tests']
Testability,This PR fixes following failures:; 1. http://cdash.cern.ch/testDetails.php?test=42006642&build=497548; 2. http://cdash.cern.ch/testDetails.php?test=42274691&build=497583. Before merging it should be understood why. @etejedor The tests for `TTree.AsMatrix` run all fine but the tutorial fails occasionally with a segfault (only on Mac OS and only on these two versions). It is not related to the `TTree.AsMatrix` code but to the creation of a `TFile` inside a Python function. Any ideas?,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1957:59,test,testDetails,59,https://root.cern,https://github.com/root-project/root/pull/1957,5,['test'],"['test', 'testDetails', 'tests']"
Testability,"This PR fixes https://github.com/root-project/root/issues/12043 . It should also address sporadic failures seen in our jenkins CI due to sometimes Dask assigning two tasks to the same worker process, thus the second task using the same DefinePerSample node of the first task and collapsing into the same situation as the linked issue. The first commit contains the actual fix, then tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13787:382,test,tests,382,https://root.cern,https://github.com/root-project/root/pull/13787,1,['test'],['tests']
Testability,"This PR fixes some formatting for displaying the leaf count arrays RNTuple schema, as well as some other (very) minor formatting improvements. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14141:164,test,tested,164,https://root.cern,https://github.com/root-project/root/pull/14141,1,['test'],['tested']
Testability,This PR fixes the Concat operator for concatenating on the 0th axis and adds corresponding test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11594:91,test,test,91,https://root.cern,https://github.com/root-project/root/pull/11594,1,['test'],['test']
Testability,"This PR fixes the copy constructor of the `ROOT::Fit::BinDtaa` class, ; solving the problem reported in ; https://root-forum.cern.ch/t/globalchi2-function-for-many-histograms-in-root-fitfcn/42016/10. In addition this PR fixes a small issue of one mathcore tests, which was reporting a linking error in case both IMT and VECCORE were not present",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6776:256,test,tests,256,https://root.cern,https://github.com/root-project/root/pull/6776,1,['test'],['tests']
Testability,"This PR fixes the incorrect calculation of the compressed size by the `RNTupleInspector`. Because the vector of compressed page sizes is not cleared after each loop iteration, the accumulation needs to happen only after the loop has finished. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14316:249,test,tested,249,https://root.cern,https://github.com/root-project/root/pull/14316,1,['test'],['tested']
Testability,This PR fixes the incorrect fetching of the type for branches containing split collections of user-defined classes. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12073:137,test,tested,137,https://root.cern,https://github.com/root-project/root/pull/12073,1,['test'],['tested']
Testability,"This PR fixes the initialisation of the gradient function pointer which caused a failure in TFormula::Print(""V""). The PR introduces also a test for TFormula::Print",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2962:139,test,test,139,https://root.cern,https://github.com/root-project/root/pull/2962,1,['test'],['test']
Testability,"This PR fixes the jira item, refactors the code of the models in order to simplify and reduce code duplication and extends significantly the test coverage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1759:141,test,test,141,https://root.cern,https://github.com/root-project/root/pull/1759,1,['test'],['test']
Testability,This PR fixes the remaining ASAN build test failures in RooFit. More detail can be found in the commit descriptions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11192:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/11192,1,['test'],['test']
Testability,This PR fixes: ; - stressHistoFit - so not use colour (even black) to keep a nice output log; - TMVA Keras tutorial: use different output file to avoid sporadic failures; - mathmore (GSL) : add a check for correct GSL version (2.3) introducing the new function `gsl_linalg_cholesky_decomp1`. Use the older `gsl_linalg_cholesky_decomp` for the old versions.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13047:89,log,log,89,https://root.cern,https://github.com/root-project/root/pull/13047,1,['log'],['log']
Testability,"This PR follows up on https://github.com/root-project/root/pull/7723, which introduced the pythonization of `RooAbsReal::plotOn`. However, the unit test that came with #7723 also assumed pythonizations of `RooAbsPdf::plotOn` and `RooAbsData::plotOn`. This was not noticed before since the unit tests were not run in the continuous integration. This PR refactors the RooFit pythonization code to easily pythonize also `RooAbsPdf::plotOn` and `RooAbsData::plotOn` such that the unit tests pass. I need to figure out what needs to be done to run the pythonization unit tests in the bot tests for the future. Please take a look @Harshalzzzzzzz, this should be interesting for you!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7753:148,test,test,148,https://root.cern,https://github.com/root-project/root/pull/7753,5,['test'],"['test', 'tests']"
Testability,"This PR for now fixes #14748, but IMO down the line we might need a more tailored representation for friends (at least in how they are presented to the user). Friends are (virtually) represented as untyped records. To properly create them as fields (neede e.g. for `Show` and `PrintInfo`), we artificially bind them to an untyped `RRecordField`. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14749:367,test,tested,367,https://root.cern,https://github.com/root-project/root/pull/14749,1,['test'],['tested']
Testability,"This PR implements a feature to combine ntuples in 2 different ways, by chaining them (combine ntuples with different clusters) or befriending them (combine ntuples with different fields). Chaining can be done in 2 ways:. 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames);`); 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2));`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2);`). Befriending is done very similarly, but with an extra Enum class parameter:; 1. Create one RNTupleReader from multiple files. (`auto ntupleReader = RNTupleReader::Open(std::string_view ntupleName, std::vector<std::string> fileNames, ROOT::Experimental::EFileOpeningOptions::kFriend);`); 2. Combine 2 RNTupleReader into one. This can be done with move-semantics (`auto reader = RNTupleReader::ChainReader(ntupleName, std::move(reader1), std::move(reader2), ROOT::Experimental::EFileOpeningOptions::kFriend);`) or without (`auto reader = RNTupleReader::ChainReader(ntupleName, reader1, reader2, ROOT::Experimental::EFileOpeningOptions::kFriend);`). It has been tested to work for: ChainOfChainOfChains, FriendsOfFriendsOfFriends, ChainOfFriends and FriendsOfChain. All tests have been done for .root and raw-files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4541:1301,test,tested,1301,https://root.cern,https://github.com/root-project/root/pull/4541,2,['test'],"['tested', 'tests']"
Testability,This PR implements and tests all the functions of the `Reshape Layer` in CUDA. Those are:. 1. The `Flatten` function.; 2. The `Deflatten` function.; 3. The ` Reshape` function. I additionally refactored the respective testing suite to remove code duplication between the same tests implemented in different architectures.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2233:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/2233,3,['test'],"['testing', 'tests']"
Testability,"This PR implements the feature to read numpy arrays with `RDataFrame`. See following example for the use-case:. ```python; data = {; ""x"": numpy.array([1, 2, 3]),; ""y"": numpy.array([4, 5, 6]); }. df = ROOT.ROOT.RDF.MakeNumpyDataFrame(data); df2 = df.Filter(""x>1"").Define(""z"", ""x*y""). assert(df2.Mean(""z"").GetValue(), 14); ```. Edit: Up to now it works only with C++17 since `std::string_view` is not yet available in experimental PyROOT as backport.; Edit: Renamed `MakeRDataFrame` to `MakeNumpyDataFrame`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3424:283,assert,assert,283,https://root.cern,https://github.com/root-project/root/pull/3424,1,['assert'],['assert']
Testability,"This PR implements the possibility to store global observables in RooFit datasets, and makes the necessary changes in the `RooAbsPdf::fitTo` code path to consider the global observables in the data if available. If one wants to restore the old behavior of taking the global observable values from the model even if they are stored in the data, one can use the new `GlobalObservablesSource` command argument. . Unit tests for all new functionality is also implemented. Please find the more information in the commit messages. Ideas for future developments in future PRs:; 1. make it possible to specify the global observables when generating a dataset:; `model.generate(x, 1000, GlobalObservables(g))`; 2. make it possible to also sample global observable values when generating a toy dataset:; `model.generate({x, g}, 1000, GlobalObservables(g))`; 3. Add a tutorial to show all the new functionality related to global observables. Closes https://github.com/root-project/root/issues/8123.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8878:415,test,tests,415,https://root.cern,https://github.com/root-project/root/pull/8878,1,['test'],['tests']
Testability,"This PR improves the speed for evaluating weights in `RooHistPdf`; and `RooHistFunc` for one dimensional histograms with no interpolation.; In the future, `RooDataHist::weights()` can be extended to cover; cases with higher dimensions and interpolation. The function `RooDataHist::weights()` was implemented to enable; vectorized evaluations of bin weights. In `RooHistPdf` it is implemented; using the new function `RooHistPdf::computeBatch()`, which calls; `RooDataHist::weights()` in the case of no interpolation and 1D; histograms, and `RooAbsReal::computeBatch()` otherwise. In; `RooHistFunc::computeBatch`, `RooDataHist::weights()` is called in the; case of no interpolation and 1D histograms and is unchanged in the other cases. To calculate the weight, bin indices are stored as a vector; using `RooAbsBinning::binNumbers`, which was implemented in #11151. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11171:930,test,tested,930,https://root.cern,https://github.com/root-project/root/pull/11171,1,['test'],['tested']
Testability,This PR improves the test (forward pass and full training tests) for all the recurrent layers using the CPU and the GPU (Cudnn based) implementation. . It also compares the forward results obtained in CPU and GPU. By doing this it has been found that the GPU Cudnn implementation uses a variant in case of GRU (the resetGate is applied after the multiplication of the previous state with the candidate weights). ; This option is now implemented also in teh CPU case (both forward and backward pass) to have consistent results when training on GPU and evaluating on CPU . The PR fixes also a bug seen when using the SGD optimizer with the RNN layers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5367:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/5367,2,['test'],"['test', 'tests']"
Testability,"This PR increases the tolerance for SOFIE-GNN testing. Due to different floating representations in Python frameworks and C++ implementations, it will be better to have a tolerance of 10^-5 and not 10^-7 which was the default previously.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13608:46,test,testing,46,https://root.cern,https://github.com/root-project/root/pull/13608,1,['test'],['testing']
Testability,This PR intends to test what's tested in the cppcompleter.py. It fails for PR #5884 however this test should show that the issue is somewhere in the way we test it on the python side... cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6011:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/6011,4,['test'],"['test', 'tested']"
Testability,"This PR introduces (with unit tests!) the concept of a forward-compatibility feature break flag for `TBasket`. This allows the `TBasket` class to identify if the object being deserialized was written by a newer version of ROOT using a feature that breaks forward-compatibility. Note that much care was taken so older versions of ROOT that *don't* recognize the new flag will believe the file is corrupt; they will give a misleading error message, but will not silently serve corrupted data. If this approach goes forward, I intend to backport the flags to older versions of ROOT -- they should be able to recognize files they aren't supposed to read. I do not plan to backport the new IO features themselves.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/959:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/959,1,['test'],['tests']
Testability,"This PR introduces a few changes to old PyROOT and new PyROOT for forward and backward compatibility reasons, respectively. Old PyROOT:; - Issue a deprecation warning when the conversion None -> null pointer happens; - Add forward compatible names for `AsCObject` (`as_cobject`) and `BindObject` (`bind_object`); - Make nullptr accessible as cppyy.nullptr; - Make pythonization functions accessible via cppyy.py ; - Issue a deprecation warning when using `buffer.SetSize`, and add `buffer.reshape` to be forward compatible; - Add a few attribute names for proxies (objects, classes, callables) that forward compatible with new PyROOT. New PyROOT; - Add `MakeNullPointer(klass)` as `bind_object(0,klass)`; - Provide `BindObject` and `AsCObject`. Related test PR:; https://github.com/root-project/roottest/pull/425",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4661:753,test,test,753,https://root.cern,https://github.com/root-project/root/pull/4661,1,['test'],['test']
Testability,"This PR introduces a new format option for `RNTupleReader::Show()` that shows all fields if no model is specified, and only the fields present in the model if there is one. It also changes the default show format to this option. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). Fixes #12031.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12026:250,test,tested,250,https://root.cern,https://github.com/root-project/root/pull/12026,1,['test'],['tested']
Testability,This PR introduces a new way to express python unit tests with two CMake functions (see commit message) and leverages the new mechanism to re-formulate the PyROOT unit tests and to add new tests for the TDF pyROOT interface.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1031:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/1031,3,['test'],['tests']
Testability,"This PR introduces the NumericalDerivatorMinuit2 class, based on original code by @lmoneta (https://github.com/lmoneta/root/blob/lvmini/math/mathcore/src/NumericalDerivator.cxx). It replicates the Minuit2 numerical derivator calculations, but in a a stand alone class. This allows it to be used from RooFit to manually calculate gradients outside of Minuit2, e.g. in a parallelized way. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8567:408,test,tested,408,https://root.cern,https://github.com/root-project/root/pull/8567,1,['test'],['tested']
Testability,"This PR introduces the first steps towards MT support for the `RNTupleIndex`, by enabling mulithreaded building of the index. To enable this, the index itself now manages multiple _index partitions_, which are essentially sub-indices for a particular entry range. These entry ranges are currently set according to the cluster boundaries, but further benchmarking and evaluation will be required to determine the optimal partitioning scheme.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16679:350,benchmark,benchmarking,350,https://root.cern,https://github.com/root-project/root/pull/16679,1,['benchmark'],['benchmarking']
Testability,"This PR introduces the functionality offered by `ROOT::RDF::RunGraphs` in distributed RDataFrame. Some things may still need polishing or discussion.; - [x] Implement function for the Spark backend; - [x] Implement generic function available in the distributed module; - [x] Add test for the Spark backend; - [ ] Discuss whether we should keep the logic that all actions should be triggered by the same type of distributed backend (i.e. a user can submit N Spark jobs concurrently, but not N Spark jobs and M Dask jobs from the same call to RunGraphs); - [ ] Discuss default value of `concurrent_runs` parameter, i.e. number of jobs submitted concurrently from the client to the scheduler.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8972:279,test,test,279,https://root.cern,https://github.com/root-project/root/pull/8972,2,"['log', 'test']","['logic', 'test']"
Testability,"This PR introduces the logic necessary in TTreeReader to detect when an entry being read is ""incomplete"" for the following situations:; * When switching to a new tree in the chain, if a branch that was expected to be found is not available; * When doing event matching with TTreeIndex, in case one or more of the friend trees did not match the index value for the current entry. It also introduces new functionality in RDataFrame to allow users to act upon the situations described above:; * `DefaultValueFor(colname, defaultval)`: lets the user provide one default value for the current entry of the input column, in case the value is missing.; * `FilterAvailable(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value available?"". If so, the entry is kept, if not, it is discarded.; * `FilterMissing(colname)`: works in the same way as the traditional `Filter` operation, where the ""expression"" is ""is the value missing?"". If so, the entry is kept, if not, it is discarded. The tutorials `df036_missingBranches` and `df037_TTreeEventMatching` show example usage of the new functionalities.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15641:23,log,logic,23,https://root.cern,https://github.com/root-project/root/pull/15641,1,['log'],['logic']
Testability,"This PR introduces the possibility of converting all `TTree`s that are present in a `TFile` to `RNTuple`s at once. Concretely, it implements an additional factory method that requires only the source file path and the destination path. Because we now deal with multiple trees at the same time, `SetNTupleName` has been replaced by `SetNTupleNames`, which takes the name of the original tree and the name of the corresponding ntuple. Optionally, we could keep `SetNTupleName` as well in case there's only one tree and throw an exception when multiple trees are being imported at the same time. The `Create` factory method could be expanded with an optional parameter that takes a list of tree names (or regexes) to import, in case it is not desired that every tree is imported. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12486:798,test,tested,798,https://root.cern,https://github.com/root-project/root/pull/12486,1,['test'],['tested']
Testability,"This PR introduces the support for performing inference on Graph Neural Network models in TMVA SOFIE, based on [DeepMind's Graph Nets](https://github.com/deepmind/graph_nets). . **Checklist**; - [x] RModel_GNN class; - [x] RFunction class for graph-based functions; - [x] GraphInput structure for providing inputs to the graph; - [x] ~~RModel_GNNStack class for multi-graph architectures~~ (Should be user customized from Python interface); - [x] Initialize & Generate function for RModel_GNN class; - [x] RFunction_MLP for updation; - [x] RFunction_Mean for aggregate; - [x] RFunction_Sum for aggregate; - [x] RModel_GraphIndependent class; - [x] Pythonization for RModel_GNN & RModel_GraphIndependent (ParseFromMemory functions); - [x] Tests for RModel_GNN and RModel_GraphIndependent; - [x] Pythonization: (Parser, Tests)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11208:738,Test,Tests,738,https://root.cern,https://github.com/root-project/root/pull/11208,2,['Test'],['Tests']
Testability,This PR introduces:; - A mechanism to forbid istantiation of RVec<bool>; - A mechanism to treat vector<bool> as such and not as RVec<bool> with jitted actions and transformations; - Tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2186:182,Test,Tests,182,https://root.cern,https://github.com/root-project/root/pull/2186,1,['Test'],['Tests']
Testability,"This PR is a backport of #12781. The change in this PR fixes a segfault when defining a C++20 concept if definition shadowing is enabled.; In principle, for a `TemplateDecl`, `isDefinition()` issues a recursive call passing the templated decl as a parameter. A `ConceptDecl`, however, should always be considered a definition. Also, update the DeclShadowing test incorporating a C++20 concept. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #12779.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12782:358,test,test,358,https://root.cern,https://github.com/root-project/root/pull/12782,2,['test'],"['test', 'tested']"
Testability,This PR is a continuation of #12145 and adds the option to specify the maximum number of entries in the original `TTree` to import. ## Checklist; - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12472:152,test,tested,152,https://root.cern,https://github.com/root-project/root/pull/12472,1,['test'],['tested']
Testability,This PR is a draft for now to test developments with the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10789:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/10789,1,['test'],['test']
Testability,"This PR is a new attempt on #1166. It adds the `geom` and `geombuilder` modules, with:; - geombuilder set OFF by default; - geom set ON by default. Disabling geom also disables its dependant modules, i.e. Eve and gviz3d. Related roottest PR: https://github.com/root-project/roottest/pull/1190. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16514:315,test,tested,315,https://root.cern,https://github.com/root-project/root/pull/16514,1,['test'],['tested']
Testability,This PR is a part of LZ4 testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/855:25,test,testing,25,https://root.cern,https://github.com/root-project/root/pull/855,1,['test'],['testing']
Testability,"This PR is a proposed solution for a problem of MacOS builds. It is more of a policy decision than a technical discussion, even if there is a technical aspect involved. Since 2019 U9, the one of 6.28, does not build any more on macos for C++ standards equal or greater than 2017 if the new sdk is used. Unfortunately, to continue to support older setups, branching has been put in place. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13724:453,test,tested,453,https://root.cern,https://github.com/root-project/root/pull/13724,1,['test'],['tested']
Testability,"This PR is a refactoring. RFilter does not need to keep fNSlots stored, it only requires the value; at construction time. fLastCheckedEntry can be reset per-slot in; InitSlot rather than being reallocated whenever InitNode is called. This also uniforms the logic of RFilter and RDefine w.r.t. the; treatment of fLastCheckedEntry.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9170:257,log,logic,257,https://root.cern,https://github.com/root-project/root/pull/9170,1,['log'],['logic']
Testability,"This PR is a work in progress for a parallel version of the snapshot action introduced recently to TDataFrame. This version compiles and passes the `test_snaphot.C` test from roottest.git, but still needs quite a bit of work. I imported the files we use with attributed authorship for each part, but we now need to move them to the right place if needed and refactor the interfaces according to feedback from various sources. Please feel free to make comments directly on the code, and I will try to address everything by the deadline for branching out 6.10.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/533:165,test,test,165,https://root.cern,https://github.com/root-project/root/pull/533,1,['test'],['test']
Testability,"This PR is a work-in-progress. Submitting mainly to get feedback and test on all platforms (it compiles and tests run on my machines). `TDataFrame.hxx` neared the 2000 lines, so I decided to bite the bullet and disentangle it in logically separated parts. `TDataFrame`'s functionality is now divided as follows:. - `TDataFrame.{hxx,cxx}`: class `TDataFrame`; - `TDataFrameInterface.{hxx,cxx}`: class `TDataFrameInterface`; - `TDFNodes.{hxx,cxx}`: class `TDataFrameImpl`, `TDataFrameAction{,Base}`, `TDataFrameBranch{,Base}`, `TDataFrameFilter{,Base}`; - `TActionResultProxy.hxx`: class `TActionResultProxy`; - `TDFOperations.{hxx,cxx}`: all `*Operation` classes; - `TDFTraitsUtils.hxx` -> `TDFUtils.{hxx,cxx}`: all helper functions and meta-helpers. I also ran `clang-format` and `include-what-you-use` on these files to improve coding style and useless/misplaced includes. I plan to squash all commits into just two/three (one for splitting, one for formatting, one for the includes) if/when the changes will be green-lit. **Open issues**; - [x] `TActionResultProxy::TriggerRun` is still in `TDataFrame.hxx` because it depends on TDataFrameImpl. Moving it into `TActionResultProxy.hxx` would cause a circular include dependency; - [x] `ColumnName2ColumnTypeName` is in `TDataFrameInterface.{hxx,cxx}`, but being an helper function it should actually be in `TDFUtils.hxx`. This would cause a circular include dependency with `TDFNodes.hxx` due to `TDataFrameImpl`; - [x] same for `CallCreateAction`, but the circular dependency is with `TActionResultProxy`. This function is much less general than the former though, so maybe it could stay in `TDataFrameInterface.{hxx,cxx}`; - [x] `TSlotStack` is now declared and defined at namespace scope in `TDFNodes.cxx`. Declaration and definitions should be split, the class itself should probably be nested inside `TDataFrameImpl`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/423:69,test,test,69,https://root.cern,https://github.com/root-project/root/pull/423,3,"['log', 'test']","['logically', 'test', 'tests']"
Testability,"This PR is addressing one of the `TODO`s left by @hageboeck in the RooFit code:. https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooNLLVar.cxx#L326. I hope this goes in the good direction. I still have to see how I can cover all the changes with tests, so this is a draft PR for now. The most controversial part is probably the `_offset` subtraction: https://github.com/root-project/root/blob/master/roofit/roofitcore/src/RooNLLVar.cxx#L454. It originally looked like this:. ```C++; Double_t y = -_offset - (carry + _offsetCarry);; Double_t t = result + y;; carry = (t - result) - y;; result = t;; ```. I'm not sure if that works. By definition, `_offset` is in the same order of magnitude as `result`, so the `carry + _offsetCarry` is lost when adding it with `_offset`, no? I think to subtract KahanSums of the same order of magnitude, one should better add the sums and carries individually and then make a dummy addition such that the carry can ""spill over"" into the sum if it got large enough after addition:. ```C++; KahanSum<T, N>& operator-=(KahanSum<T, N> const& other) {; fSum[0] -= other.Sum();; fCarry[0] -= other.Carry();; // add zero such that if the summed carry is large enough to be partly represented in the sum, it will happen; Add(T{});; return *this;; }; ```. @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7126:269,test,tests,269,https://root.cern,https://github.com/root-project/root/pull/7126,1,['test'],['tests']
Testability,This PR is for testing on 6.28 in the Linux CI the using of Python ML tools in TMVA,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15236:15,test,testing,15,https://root.cern,https://github.com/root-project/root/pull/15236,1,['test'],['testing']
Testability,This PR is here to test CmsBot testing infrastructure. DO NOT MERGE.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2875:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/2875,2,['test'],"['test', 'testing']"
Testability,"This PR is on top of #1777 and adds the method `TTree.AsMatrix(columns)` as pythonization, which returns the content of the tree as numpy array powered by `TDataFrame` and the memory adption with the `__array_interface__`. TODO:; - ~~Infere the final datatype of the numpy array in a clever way (currently `double` is the default). Implicit type conversion is done by the lambda passed to `TDataFrame` in the backend.~~ Done in python, with tests.; - ~~More error-handling?~~ Can't think of any more checks.; - ~~More tests? Corner-cases missed?~~ Ideas? Any corner-cases missed?; - ~~What about not supported datatypes? Currently implemented for `float`, `double`, `int`, `unsigned int`, `long`, `unsigned long`. This is dependent on the memory adption feature of #1777 for `std.vector`.~~ Added proper error-handling.; - ~~Apply `clang-format`~~ ~~ Let's travis do this.; - ~~Shall we provide a `TTree.AsMatrix()` without given columns, which defaults to all columns? -> Most likely: Yes (but with proper error-handling!) -> White-listing branch types?~~ Done.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1856:441,test,tests,441,https://root.cern,https://github.com/root-project/root/pull/1856,2,['test'],['tests']
Testability,"This PR is related to https://github.com/root-project/root/issues/8707. ROOT_ADD_TEST now takes FIXTURES_SETUP, FIXTURES_CLEANUP and; FIXTURES_REQUIRED arguments (lists). also add RESOURCE_LOCK to prevent parallel execution of a test; takes a single lock name. n.b: fixtures and resource lock namespaces are each different from; test namespaces. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (in the file)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8722:229,test,test,229,https://root.cern,https://github.com/root-project/root/pull/8722,3,['test'],"['test', 'tested']"
Testability,"This PR is the first part of a split and clean-up of #8294, as suggested by @guitargeek. In this PR, only the changes to mathcore and Minuit2 are taken into account. These changes will be necessary for the later RooFit parts which will come in separate PRs. Specifically, this PR introduces the ExternalInternalGradientCalculator in Minuit2. This subclass of AnalyticalGradientCalculator enables calculation of the derivative outside of Minuit2, but in ""Minuit-internal"" parameter space. This allows exact replication of the gradients as calculated in Minuit2 itself, which in turn enables external optimization and parallelization of this process without having to modify Minuit2, without having to worry about differences in outcome. In other words, the resulting external gradient calculation can be easily unit tested against the existing Minuit2 gradient calculation. ~Note: still working on ""cherry picking"" all changes and organizing them into functionally sensible commits. Will un-draft the PR once this is done.~ Ready for review.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8369:815,test,tested,815,https://root.cern,https://github.com/root-project/root/pull/8369,1,['test'],['tested']
Testability,"This PR is the same of #15078 but adds a commit with a test of the new feature. @ferdymercury , feel free to cherry-pick the commit in your code, if you think it's adequate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15124:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/15124,1,['test'],['test']
Testability,"This PR is to address GitHub issue https://github.com/root-project/root/issues/9353. So far, it is only a revert of d91509e so I can see the failures in the CI (on my system, the RooFit tests are still passing even after reverting said commit).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9374:186,test,tests,186,https://root.cern,https://github.com/root-project/root/pull/9374,1,['test'],['tests']
Testability,"This PR mainly adds pythonisations for `TCollection` and its subclasses. It also adds a pythonisation for `TIter`, which is necessary to iterate over `TCollection`s. The corresponding unit tests for every pythonisation are also proposed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3298:189,test,tests,189,https://root.cern,https://github.com/root-project/root/pull/3298,1,['test'],['tests']
Testability,"This PR makes sure that member function templates are added to the dictionary of class proxies, so that they are found when the user is trying to access them. For instance:. ```python; import ROOT. ROOT.gInterpreter.Declare(""""""; struct TestClass {; template<class T> void templatedMember(const T& value) { }; };; """"""). t = ROOT.TestClass(); t.templatedMember('int')(1); ```; The example also works if there are non-templated overloads and the user tries to instantiate the templated one, thanks to https://github.com/root-project/root/pull/3226. The re-injection of the pythonization of `GetObject` in `TDirectoryFile` is now necessary because, as a result of these changes, `GetObject` will be added to the dictionary of `TDirectoryFile` as a `TemplateProxy`. If we want the pythonization to prevail, we need to inject it (it will replace the `TemplateProxy`, just like in `TDirectory`). `TFile` will inherit that pythonization too, so we keep the current behaviour and all tests green. An extension of the PyROOT tests for templates is coming in another PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3237:236,Test,TestClass,236,https://root.cern,https://github.com/root-project/root/pull/3237,4,"['Test', 'test']","['TestClass', 'tests']"
Testability,"This PR modifies the behaviour of `TTree::Branch` in Python so that proxy references can be passed as arguments from the Python side, more precisely in cases where the C++ implementation of the method expects the address of a pointer. For example:; ```python; v = ROOT.std.vector('int')(); t.SetBranchAddress(""my_vector_branch"", v); ```. Tests for the aforementioned pythonization are also included in this PR. There is one test missing, which covers the case when the new branch to be created is a field of a struct, for example:; ```python; ROOT.gInterpreter.Declare(""""""; struct MyStruct {; int myint1;; int myint2;; };; """"""). ms = ROOT.MyStruct(); ms.myint1 = some_value; t.Branch('myint1b', addressof(ms, 'myint1'), 'myint1balias/I'); ```; In the current PyROOT, in order to get the address of the struct field, one would use the `AddressOf` function. The equivalent in modern Cppyy seems to be `addressof`, but it has a bug when using it as specified above. [A PR](https://bitbucket.org/wlav/cpycppyy/pull-requests/10/addressof-fix-retrieval-of-address-of-an) has been submitted to Cppyy to fix the issue. Moreover, this PR includes an additional fix and test for `TTree::SetBranchAddress`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2894:338,Test,Tests,338,https://root.cern,https://github.com/root-project/root/pull/2894,3,"['Test', 'test']","['Tests', 'test']"
Testability,"This PR moves the dictionaries for STL containers required for testing to a separate LinkDef. The rationale behind this is that these dictionaries are not directly related to the `CustomStruct` and once #13904 and #14069 are merged even more (unrelated) dictionary entries would be added, so it would be good to avoid clutter and separate these.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14072:63,test,testing,63,https://root.cern,https://github.com/root-project/root/pull/14072,1,['test'],['testing']
Testability,"This PR moves the responsibility of knowing which custom columns have been defined at which point of the functional graph from `TCustomColumn` to `TInterface`. As an added improvement `TInterface` now checks that custom columns do not override each other (which was wrongly allowed before). As a consequence, `TCustomColumn` nodes are not required to be in the functional graph anymore (their function was to signal the point where a certain column name became valid), allowing simplifications of the graph traversing that TDF does during the event loop (e.g. to check all filters in a functional chain). `Define` now returns the same type as the node it was called on rather than `TInterface<TCustomColumn<Fun, PrevNode>>`. For this reason this PR is expected to break `test_templateRecursionLimit`, which depends on the exact type returned by `Define`. The test will be fixed by a separate PR to roottest.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/924:859,test,test,859,https://root.cern,https://github.com/root-project/root/pull/924,1,['test'],['test']
Testability,"This PR proposes a unification of the pythonizations for `TTree` and its subclasses. The same strategy could be followed for `TDirectory` and its subclasses. Only one pythonizor function is proposed for `TTree` and its subclasses, which instead of checking the name of the class, it checks whether it `InheritsFrom('TTree')`. The tests for the `SetBranchAddress`, pythonic iterator and branch-as-attribute syntax have been extended to test those pythonizations also for `TChain` and `TNtuple`, as example of two commonly used `TTree` subclasses. Note that, with this approach, we could still have pythonizations that are specific e.g. to `TTree` or `TNtuple`. This would only require to check for the right condition in the pythonizor function. We could also have more than one pythonizor function, if we wanted those class-specific pythonizations to be encapsulated in just one function.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2799:330,test,tests,330,https://root.cern,https://github.com/root-project/root/pull/2799,2,['test'],"['test', 'tests']"
Testability,This PR provides several fixes for histogram and profile having labels. n particular: ; - fix ROOT-7894 by using now for TProfile::Merge the same logic as TH1::Merge. (impelmentation based on TH1Merger class); - fix #6403 for TProfile::LabelsOption when there are weights; - fix also another bug for handling of underflow/overflow in TProfile::ExtendAxis . Add several new tests for these case in stressHistogram,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6442:146,log,logic,146,https://root.cern,https://github.com/root-project/root/pull/6442,2,"['log', 'test']","['logic', 'tests']"
Testability,"This PR provides the first steps to the `RNTupleProcessor`, which is envisioned as an interface for reading vertically and horizontally composed RNTuples (i.e., chains and friends), and combinations thereof. The interface provides an iterator which gives access to the `REntry` containing the field values of the current entry index, as well as some additional bookkeeping information. At this point, only vertically composed RNTuples (i.e., chains) are supported. Horizontal compositions in the form of (unaligned) friends and the ability to combine vertical and horizontal compositions will be addressed in a future PR.; Other additions that will be accounted for in one or more follow-up PRs include:; - The possibility for users to provide their own entries/value pointers to the processor.; - The possibility for users to specify the `RNTupleModel` used to construct the processor entry.; - An extension to this involves the ability to specify multiple models, together with the ability to ""enable"" certain models while iterating. This would enable the possibility to read from certain fields conditionally, e.g. after a cut. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15084:1152,test,tested,1152,https://root.cern,https://github.com/root-project/root/pull/15084,1,['test'],['tested']
Testability,"This PR puts in place a facade for ROOT to become a Python module with custom behaviour, in a similar way it is done for the current PyROOT.; https://github.com/root-project/root/blob/master/bindings/pyroot/ROOT.py#L560. For now this is just a simple skeleton that redirects lookups to cppyy's global namespace, and more investigation on the logic implemented by the facade of the current PyROOT is necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3351:342,log,logic,342,https://root.cern,https://github.com/root-project/root/pull/3351,1,['log'],['logic']
Testability,"This PR reactivates and fixes the test for RooGradMinimizerFcn (introduced in #8596). The first commit provides a way for external gradient calculators to use previous gradient information (gradient itself, second derivatives, step size) to calculate the next gradient values. Simultaneously, it allows the external calculator to pass back (via the same arrays to keep the redesign as minimal as possible, in anticipation of planned dedicated Hessian support) the second derivative and step sizes, so they can also be reused in the next gradient calculation. All of this reuse was already going on in Numerical2PGradientCalculator, but external gradient calculators had no access to this data, because the FCNGradAdaptor and IMultiGradFunction had no support for passing it back and forth. The commit also implements use of this mechanism in ExternalInternalGradientCalculator and in RooGradMinimizerFcn. The second commit reactivates the (already existing) test, and fixes it, because it turned out it had a small remaining bug. The bug was fixed by removing an unused parameter from `NumericalGradient::SetInitialGradient`, so that was two birds with one stone.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8694:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/8694,2,['test'],['test']
Testability,"This PR refactors (or rather, rewrites) `hadd`'s argument parsing code to achieve the following improvements:; - code is simpler to follow, more consistent among different flags and extracted from main; - adding new flags is easier; - allows the familiar syntax of `-j2` in addition to `-j 2`. As a bonus, and for consistency with `-cachesize=`, all flags can now also be passed as `-j=2` (except for `-f` which has a special logic).; - allows passing flags after the positional arguments; - hadd will abort when encountering invalid flag arguments, instead of just printing a message. In the name of code simplification, this PR doesn't attempt to replicate the same exact error-reporting behavior string-by-string as the current version, but the results should ideally be the same. I ran the roottest suite and all tests pass but we might want to add more tests to be sure. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090:426,log,logic,426,https://root.cern,https://github.com/root-project/root/pull/16090,4,"['log', 'test']","['logic', 'tested', 'tests']"
Testability,"This PR refactors RooMinimizerFcn into two separate classes: RooAbsMinimizerFcn and a new RooMinimizerFcn derived from that. RooAbsMinimizerFcn contains all common synchronization ""logistics"" necessary between RooFit and Minuit function parameters. The implementations of this abstract base class are then expected to supply the actual function evaluation parts. This allows us to later implement classes that calculate the gradient outside of Minuit. We will provide both a serial implementation of this and later on a parallel one using the MultiProcess framework. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8569:181,log,logistics,181,https://root.cern,https://github.com/root-project/root/pull/8569,2,"['log', 'test']","['logistics', 'tested']"
Testability,This PR removes the `RResult` wrapper from the public `RNTupleImporter` interface; private methods are still wrapped. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12565:139,test,tested,139,https://root.cern,https://github.com/root-project/root/pull/12565,1,['test'],['tested']
Testability,This PR removes the dependency of libTMVA from libROOTDataFrame. . The dependency is needed only for the test programs. ; This should fix the conflict seen when loading PyTorch models on some architectures. See https://github.com/root-project/root/pull/13674#issuecomment-1733208800 . In addition the PR veto some Keras tutorials which time-out on macOS due to need to keep eager execution on MacOS; (see https://github.com/root-project/root/pull/13634/commits/e1d2ed4a937e546d197a1c1c026c17f671a16bcc ),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13718:105,test,test,105,https://root.cern,https://github.com/root-project/root/pull/13718,1,['test'],['test']
Testability,This PR replace #2215 from @HDembinski as suggested by him. . There is no need to compute the precision in Minuit2. ; For testing and comparison the previous code to compute the numerical precision is now put in a new function MnMachinePrecision::ComputePrecision(),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5216:122,test,testing,122,https://root.cern,https://github.com/root-project/root/pull/5216,1,['test'],['testing']
Testability,"This PR replaces #1533. Now TH1::FindFirst(Last)Bin is modified and there exists only a common function for TH1 working for all dimensions. ; The TH2, and TH3 specific functions are then removed. . A test is also added in hist/hist/test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3399:200,test,test,200,https://root.cern,https://github.com/root-project/root/pull/3399,2,['test'],['test']
Testability,This PR replaces #2278 from the GSOC student Sidharta and provides the regression support (including a test) for MethodDL. . The test has been improved to check the obtained deviations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2901:103,test,test,103,https://root.cern,https://github.com/root-project/root/pull/2901,2,['test'],['test']
Testability,This PR resolves this failing test on ARM: http://cdash.cern.ch/testDetails.php?test=23147537&build=332879,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/439:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/439,3,['test'],"['test', 'testDetails']"
Testability,"This PR roots our llvm vendor drop to the LLVM's 5.0 release. Updating llvm will enable C++17 support in ROOT. There are many advantages of doing that such as relying on a release which is very thoroughly tested. After many years, this update removes practically all cling/ROOT-specific patches from llvm which means that technically we can link against vanilla llvm. Note that we still have (a reduced) set of patches in clang. Note this comes with a few issues (thus the do-not-merge label):; * We have two failures in cling's testsuite (visible when building with -Dclingtest=On) -- they seem to be coming from a stack-corruption when the JIT is supposed to throw an exception;; * A few roottest failures which I want to make sure it is the same set as on my own system.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1218:205,test,tested,205,https://root.cern,https://github.com/root-project/root/pull/1218,2,['test'],"['tested', 'testsuite']"
Testability,"This PR should be merged after `TSlotStack` is upgraded to not use static thread-local storage,; and one test case is expected to fail until this happens.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2238:105,test,test,105,https://root.cern,https://github.com/root-project/root/pull/2238,1,['test'],['test']
Testability,"This PR should finally fix the build warnings in the master nightlies,; after the unsuccessful fix attempt in commit; 4ed5ea3976743d1206a8f8c7579adeb1818a9695. I have checked that the missing field initializer warnings go away with; this change by compiling the following example snippet under gcc48:. ```C++; // compile with g++ -Wmissing-field-initializers -std=c++11 -o test test.cc. struct A{. A(); : arr_{{}}; {}. std::array<int, 10> arr_ = {{}};; };. int main() {; A a{};; std::cout << a.arr_[0] << std::endl;; return 0;; }; ```. The warnings are reproduced, and can successfully be suppressed by; replacing `{}` with `{{}}`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8489:373,test,test,373,https://root.cern,https://github.com/root-project/root/pull/8489,2,['test'],['test']
Testability,"This PR should finally fix the build warnings in the master nightlies,; after the unsuccessful fix attempt in commit; 4ed5ea3976743d1206a8f8c7579adeb1818a9695. I have checked that the missing field initializer warnings go away with; this change by compiling the following example snippet under gcc48:. ```C++; // compile with g++ -Wmissing-field-initializers -std=c++11 -o test test.cc. struct A{. A(); : arr_{{}}; {}. std::array<int, 10> arr_ = {{}};; };. int main() {; A a{};; std::cout << a.arr_[0] << std::endl;; return 0;; }; ```. The warnings are reproduced, and can successfully be suppressed by; replacing `{}` with `{{}}`. This is a backport of 855fd44340e13161f88ca09a86e50abf5c1cd5a1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8500:373,test,test,373,https://root.cern,https://github.com/root-project/root/pull/8500,6,['test'],['test']
Testability,"This PR should fix a race condition with some of the TMVA tutorials on ARM, as they all use the same files in the `dataset` folder: http://cdash.cern.ch/testDetails.php?test=22693533&build=331203",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/420:153,test,testDetails,153,https://root.cern,https://github.com/root-project/root/pull/420,2,['test'],"['test', 'testDetails']"
Testability,"This PR should fix the build warnings in the v6.18 nightlies. I have checked that the missing field initializer warnings go away with; this change by compiling the following example snippet under gcc48:. ```C++; // compile with g++ -Wmissing-field-initializers -std=c++11 -o test test.cc. struct A{. A(); : arr_{{}}; {}. std::array<int, 10> arr_ = {{}};; };. int main() {; A a{};; std::cout << a.arr_[0] << std::endl;; return 0;; }; ```. The warnings are reproduced, and can successfully be suppressed by; replacing `{}` with `{{}}`. This is a backport of 855fd44340e13161f88ca09a86e50abf5c1cd5a1.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9157:275,test,test,275,https://root.cern,https://github.com/root-project/root/pull/9157,2,['test'],['test']
Testability,This PR should fix the failures of some PyTorch tests caused by using Python2 instead of Python3,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12168:48,test,tests,48,https://root.cern,https://github.com/root-project/root/pull/12168,1,['test'],['tests']
Testability,"This PR shows the ingredients needed to provide a fix (or more like a workaround) to https://github.com/root-project/root/issues/8505. * A new function `TEntryList::AddSubList` which purpose is specifically of adding a sub list to the main TEntryList. With this we can avoid the logic of `TEntryList::Add` that merges multiple TEntryList referring to the same tree into a global list.; * A slight modification in `TChain::SetEntryList` to grab the sub-TEntryList with the same index as the current sub-tree in the chain. Currently, this is done instead with `GetEntryList(treename, filename, opt)` that will always report the same sub-TEntryList referring to the ""first"" file (because all files of the sublists of the global TEntryList have the same name). The changes are not definitive at all. I wanted to ask your opinion if it's a valid way forward. If so, I will polish the code and prepare it for a real PR. With this commit, the following snippet; ```cpp; int main(){; auto start_1{0};; auto start_2{0};; auto end_1{20};; auto end_2{10};. TEntryList elists;; TEntryList elist1{""e"",""e"",""entries"",""file_20entries_1.root""};; TEntryList elist2{""e"",""e"",""entries"",""file_20entries_1.root""};. for(auto entry = start_1; entry < end_1; entry++){; elist1.Enter(entry);; }. for(auto entry = start_2; entry < end_2; entry++){; elist2.Enter(entry);; }. elists.AddSubList(&elist1);; elists.AddSubList(&elist2);. TChain chain{""entries""};; chain.Add(""file_20entries_1.root"");; chain.Add(""file_20entries_1.root"");. chain.SetEntryList(&elists, ""sync"");. ROOT::RDataFrame df{chain};. std::cout << df.Count().GetValue() << ""\n"";; }; ```; Outputs the correct result:; ```; $: ./tentrylist_emptysource_addsublist ; 30; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8660:279,log,logic,279,https://root.cern,https://github.com/root-project/root/pull/8660,1,['log'],['logic']
Testability,This PR tests the CI builds. It is same as #15115,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15123:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/15123,1,['test'],['tests']
Testability,"This PR turns on CCache for mac builds. This will remove a bit of pressure from the build nodes, e.g. for the build of ROOT's llvm during nightlies and all executables of the tests (unless they need to be rebuilt, of course)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14647:175,test,tests,175,https://root.cern,https://github.com/root-project/root/pull/14647,1,['test'],['tests']
Testability,"This PR updates Cppyy and adapts experimental PyROOT to the changes. It also re-enables a few tests. The following PRs merged and issues fixed in Cppyy are incorporated by this update:. https://bitbucket.org/wlav/cpycppyy/pull-requests/24/fixes-for-memoryregulator-recursiveremove; https://bitbucket.org/wlav/cpycppyy/pull-requests/25/proposal-for-setting-hooks-for-custom. https://bitbucket.org/wlav/cppyy/issues/113/assignment-to-c-global-from-python-does; https://bitbucket.org/wlav/cppyy/issues/115/instantiation-for-c-float-picked-when; https://bitbucket.org/wlav/cppyy/issues/121/dir-does-not-return-auto-instantiated; https://bitbucket.org/wlav/cppyy/issues/131/problem-constructing-object-of-templated; https://bitbucket.org/wlav/cppyy/issues/138/crash-when-deleting-an-object-of-a-python; https://bitbucket.org/wlav/cppyy/issues/139/wrong-overload-picked-when-passing-object. There is still one more pending issue, introduced recently in Cppyy, which affects a few tests:; https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated; Those tests have been disabled temporarily. Once a bug fix is available it will be ported right away to experimental PyROOT's Cppyy.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4264:94,test,tests,94,https://root.cern,https://github.com/root-project/root/pull/4264,3,['test'],['tests']
Testability,"This PR updates the Cppyy copy of experimental PyROOT, in particular with:; - cppyy v1.4.1; - cppyy_backend v1.7.0 (clingwrapper); - CPyCppyy v1.5.1. This update brings in, among other things:; * A few fixes in Cppyy for Windows.; * The possibility to set an environment variable with the path to `libcppyy_backend.so`. This is needed in macOS, where all the Python tests are failing because macOS SIP prevents the Python process from seeing `DYLD_LIBRARY_PATH`:; https://epsft-jenkins.cern.ch/job/root-exp-pyroot/20/LABEL=mac1014,SPEC=default/; * A fix for `addressof` in Cppyy.; * No insertion anymore of `__iter__` in `TCollection`s, which makes it possible to implement an iterator for `TCollection` that all subclasses inherit.; * A new Cppyy interface to create converters of multi-dimensional arrays. On the other hand, this update introduces a warning when Cppyy tries to generate a PCH for standard and system headers. This is to be addressed in another PR.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3322:366,test,tests,366,https://root.cern,https://github.com/root-project/root/pull/3322,1,['test'],['tests']
Testability,"This PR:; - Generalises the DataSetFactory::RandomGenerator class and moves it to TMVA::Tools.; - Replaces use of the old class with the new one.; - Adds test cases for the new class. This could be taken a step further and be put in a separate header in ROOT proper alongside its friends `ROOT::Math::TRandomEngine<Engine>`, `TRandom : public ROOT::Math::TRandomEngine`, `ROOT::Math::StdEngine<Engine>`, and `TRandomGen<Engine> : public TRandom`.; These classes define the TRandom interface and adapts foreign interfaced to that of TRandom. This PR provides an interface for going in the other direction. One could then imagine renaming this class to `TRandomAsStdEngine` and move it outside of TMVA for all to benefit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1628:154,test,test,154,https://root.cern,https://github.com/root-project/root/pull/1628,1,['test'],['test']
Testability,This PR:; - adds the RRVecField type for type-erased I/O of RVecs with RNTuple; - removes some special-casing of `RVec<bool>` which is unnecessary now that we have RVec 2.0; - adds RPrintValueVisitor support for RVecs; - adds tests for type-erased I/O of RVecs; - adds tests for `ntuple->Show` + RVecs; - adds tests for interop I/O of std::vectors and RVecs (i.e. writing one and reading the other). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary): I don't think it's necessary. This PR fixes #6347 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8770:226,test,tests,226,https://root.cern,https://github.com/root-project/root/pull/8770,4,['test'],"['tested', 'tests']"
Testability,"This Pull Request adds more speaking information to users to make warnings of the type; `delgam < 0 : first derivatives increasing along search line`; useful. Note that I do not have too much knowledge on the details of Minuit2, and the information messages of course reflect my state of knowledge. If someone else with more in-depth knowledge on Minuit2 could check that this is valid, that would of course be very valuable!. The motivation for this PR is that these warnings can hint to significant issues in the minimized function, however as a user, it is difficult to understand the problem or what to look for if one does not know how Minuit exactly works. Also they so far miss information needed to actually use these warnings to find problems with the minimized function. This commit adds explanatory text printed in loglevel `Info`, and a short discovery note in the old warnings. To demonstrate why this warning + info with the new `s0` and `p1` information is useful, this is an example where I encountered them in the wild and used its newly printed `s0` and `p1` information to plot the function between `s0` and `p1`, pointing to an issue in the likelihood function I use:. ![image](https://user-images.githubusercontent.com/31772910/199365936-6994973a-8946-4083-b1b9-da2f4f69cc6f.png). This commit also adds a link to the ""Tutorial"" that is referenced for documentation, since otherwise it is very non-trivial for inexperienced people to find it just based on its mention in a comment.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11652:826,log,loglevel,826,https://root.cern,https://github.com/root-project/root/pull/11652,1,['log'],['loglevel']
Testability,"This Pull request adds Google Test fixture functionality in the RNTuple DAOS test suite, enabling automatic storage cleanup when running unit tests with real DAOS clusters. ## Changes or fixes:. - Introduces a fixture class for the test suite and registers all five existing tests under it through the `TEST_F` macro. ; - Consolidates shared functionality in the fixture definition. Namely, pool and container label data and expected diagnostics messages from `ROOT::TestSupport`. ; - Uses the `TearDownTestSuite()` call to automatically destroy DAOS containers created for the unit tests when all of them are completed.; - Replaces some duplicated string literals that specify ntuples and models for variables.; - Introduces preproc definition `R__DAOS_TEST_MOCK` to CMake to bypass container destruction system call if using the mock library as underlying storage. ## Pending:. - One error message is not currently suppressed, as it is not emitted by ROOT's exception diagnostics: `client ERR src/client/api/container.c:148 daos_cont_create_with_label() daos_cont_create label=test-multiple-ntuples failed, DER_EXIST(-1004): 'Entity already exists'`. This is the (normal) output of `RDaosContainer` attempting to create a container by default, and ignoring the error if it already exists in the DAOS pool. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12106:30,Test,Test,30,https://root.cern,https://github.com/root-project/root/pull/12106,10,"['Test', 'mock', 'test']","['Test', 'TestSupport', 'mock', 'test', 'test-multiple-ntuples', 'tested', 'tests']"
Testability,"This Pull request adds a missing period in a member-function description for better readability. Changes or fixes: cosmetic change in the description of the `TH1::LabelsInflate()`. Without this change there is no newline between ""Refill histogram"" and ""This function is called by..."" as shown in this screenshot:; ![image](https://user-images.githubusercontent.com/7541582/123423509-4dc71400-d5c8-11eb-8ea5-ca6ebad9dfe7.png). Checklist:. - [ ] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8540:444,test,tested,444,https://root.cern,https://github.com/root-project/root/pull/8540,1,['test'],['tested']
Testability,"This Pull request adds several improvements to use UNU.RAN using the DistSampler interface; (through the TUnuranSampler class). This is to fix issue #7332 adding functionality as requested. ; ; The major improvements are:; - Improvements in using directly the string API from `DistSampler`; - Better support for setting method and method options using the `DistSamplerOptions` class; - Support for setting dpdf, cdf and multi-sim mode in the DistSampler interface; - Add test program for all the new DistSampler functionality. This PR fixes #7332",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8630:471,test,test,471,https://root.cern,https://github.com/root-project/root/pull/8630,1,['test'],['test']
Testability,"This Pull request adds the `RNTupleInspector` class to the `RNTuple` utility package and can be used for (static) inspection of `RNTuples`. It currently provides basic information on the size and compression of a given `RNTuple`. Next steps will adding functionality for for getting size and compression data on a per-column and per-type basis, and to provide a way to visualize this information. ## Checklist:; - [x] Add unit tests; - [x] Add usage documentation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11996:427,test,tests,427,https://root.cern,https://github.com/root-project/root/pull/11996,1,['test'],['tests']
Testability,This Pull request exclude running of SOFIE tests when Blas is not found (this is when `tmva-cpu=Off`),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11721:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/11721,1,['test'],['tests']
Testability,"This Pull request extends `RPageSink::RPageSinkDaos` to implement `RPageSinkDaos::CommitSealedPageVImpl()`, of signature: ; ```c++; vector<RNTupleLocator> RPageSinkDaos::CommitSealedPageVImpl(span<RPageStorage::RSealedPageGroup> ranges); ```; , which is virtually declared in the parent class `RPageSink` since PR #10775. . The implemented method modifies the default behavior for committing page ranges, i.e. calling `::CommitSealedPage` repeatedly for each individual page. ; Instead, it coalesces the buffered page ranges - e.g. all pages in a column or cluster - into a batch of vector writes, enabling I/O parallelization after recent optimizations to the `RDaos` library. . As with the batched fetching case in `RPageSourceDaos::LoadClusters()`, the page write requests are aggregated by the pair (Object ID, Distribution Key). This pair is part of the `RDaosKey` determined by the mapping strategy set in `kDefaultDaosMapping` from the pages metadata and the `RPageSinkDaos` instance's atomic counter `fPageId` that uniquely identifies pages in the storage sink. ## Changes or fixes:. * Implements `std::vector<RNTupleLocator> RPageSinkDaos::CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges)`; * Modifies the default behavior in `RPageSink::CommitSealedPageV()` to coalesce pages before sending out the write request to storage; * Enables optimized (i.e. batched) vector write requests of multiple pages within a column range by exploiting the refactored `RDaos` interface and the generalized ntuple-object mappings in `RPageStorageDaos`. ## Checklist:. - [x] tested changes locally and on openlab cluster `olsky-03` with DAOS 2.0.x; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10944:1589,test,tested,1589,https://root.cern,https://github.com/root-project/root/pull/10944,1,['test'],['tested']
Testability,"This Pull request extends the initial work of Vedant in #15811 adding the correct support for the tensor generated by the ; Constant operator. These tensors are like initialised tensors but they are not written in the weight file. They are initialised in the Session constructors with the given value, known when parsing the model (it is an attribute of the operator). . The PR has also been tested locally with the model provided in https://root-forum.cern.ch/t/tmva-sofie-operator-type-constant/59599",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15837:392,test,tested,392,https://root.cern,https://github.com/root-project/root/pull/15837,1,['test'],['tested']
Testability,"This Pull request fixes a bug in `RPageSourceDaos` in which the cluster bunch default size does not get overridden by the one provided in `RNTupleReadOptions`. This change thus enables the prefetching of a configurable number of clusters while the current bunch is being processed, similarly to what is done in the constructor for `RPageSourceFile`. ## Changes or fixes:. - `RPageSourceDaos` ctor now uses the value in `RNTupleReadOptions::fClusterBunchSize` to initialize its `RClusterPool` with configurable read-ahead number of clusters, overwriting the default value of `1`. The change parallels the constructor implementation of `RPageSourceFile`. . ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). Related to PR #9100, which introduced the prefetching capability.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10889:676,test,tested,676,https://root.cern,https://github.com/root-project/root/pull/10889,1,['test'],['tested']
Testability,"This Pull request fixes some issues when fitting variable bins histograms. In addition it provides a new version of the fitting test, stressHistoFit.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12883:128,test,test,128,https://root.cern,https://github.com/root-project/root/pull/12883,1,['test'],['test']
Testability,This Pull request fixes the correct dependency of some TMVA tutorial and PyMVA tests to avoid that the input data files are written at the same time. The PR contains also a fix for th TMVA_SOFIE_RSofieReader tutorial to handle correctly the model output vector,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12211:79,test,tests,79,https://root.cern,https://github.com/root-project/root/pull/12211,1,['test'],['tests']
Testability,"This Pull request fixes this issue https://github.com/root-project/root/issues/14565. It implment the FLT_MAX mechanism for THStack::GetMaximum() and THStack::GetMiniumum(); The following example illustrates the mechanism:. ```; void hstackgetmax() {; auto hs = new THStack(""hs"",""Stacked 1D histograms"");; auto h1st = new TH1F(""h1st"",""test hstack"",10,-4,4);; h1st->FillRandom(""gaus"",20000);; hs->Add(h1st);; auto h2st = new TH1F(""h2st"",""test hstack"",10,-4,4);; h2st->FillRandom(""gaus"",15000);; hs->Add(h2st);; auto h3st = new TH1F(""h3st"",""test hstack"",10,-4,4);; h3st->FillRandom(""gaus"",10000);; hs->Add(h3st);; auto C = new TCanvas();; C->Divide(2,1);; C->cd(1); hs->Draw();; C->cd(2); hs->Draw(""nostack"");; printf(""Max = %f\n"", hs->GetMaximum());; printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack""));; printf(""Max = %f\n"", hs->GetMaximum("""", 10000));; printf(""Max nostack = %f\n"", hs->GetMaximum(""nostack"", 4000));; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14666:335,test,test,335,https://root.cern,https://github.com/root-project/root/pull/14666,3,['test'],['test']
Testability,"This Pull request introduces the Root Storage for BDT. ; Initially developed by @guitargeek(https://github.com/guitargeek/tmva-to-xgboost/) this PR implements the data structure for storing the model configuration & weights, Parse function for translating a TMVA BDT `.xml` file, and a mapping interface for generating inference code. ## Progress; - [x] Data structure for storing model configuration and weights; - [x] Serialization of the class for writing/reading to `.root` files; - [x] `Parse()` function for translating a TMVA BDT `.xml` file ; - [ ] Mapping Interface to TMVA Tree Inference for generating inference code. ## Checklist:; - [x] tested changes for `Parse()`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8873:650,test,tested,650,https://root.cern,https://github.com/root-project/root/pull/8873,1,['test'],['tested']
Testability,"This Pull request introduces wrappers to obfuscate backend-specific implementation details, distancing the storage layer functionality in `RPageStorageDaos` from the concrete backend in `RDaos` and `libdaos`. . ## Changes or fixes:. - Wraps the dictionary that groups page requests by their co-locality keys (a type previously aliased as `MultiObjectRWOperation_t`) into a new wrapper class `MultiObjectRWOperation`. The class manages the insertion of new request akeys and associated IOVs into the dictionary and exposes `begin` and `end` iterators for it.; - Moves `RDaosKey` to the header file and aliases the concrete types of `DistributionKey_t` and `AttributeKey_t`, used by other structures in the backend.; - Introduce wrapper structure `RDaosIov` to obfuscate the libdaos-specific `d_iov_t` structure and `d_iov_set()` call from the storage layer for object stores.; - Hide DAOS error code resolution function (`d_errstr`) in `GetDaosError()`.; - Directly use existing `RDaosObject::ObjClassId` wrapper structure around the default metadata class definition in the storage layer. ## Checklist:. - [x] tested changes locally + DAOS `delphi` node; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12109:1110,test,tested,1110,https://root.cern,https://github.com/root-project/root/pull/12109,1,['test'],['tested']
Testability,This Pull request is a back port of the fix for the KS 1 sample test ; (see #9819 ). This PR fixes #9636,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9855:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/9855,1,['test'],['test']
Testability,This Pull request makes minor formatting of code and documentation in RModelParsers. ## Checklist:; - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8954:106,test,tested,106,https://root.cern,https://github.com/root-project/root/pull/8954,1,['test'],['tested']
Testability,This Pull request makes the conversion of stl vectors to RVec optional when using Snapshot() . ## Changes or fixes:; Propagating the relevant flag to the Snapshot() call. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #15503,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15895:192,test,tested,192,https://root.cern,https://github.com/root-project/root/pull/15895,1,['test'],['tested']
Testability,This Pull request modifies `tmva/sofie/CMakeLists.txt` by adding `ROperator_Conv.hxx` in the INCLUDE files. ## Checklist:; - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8896:129,test,tested,129,https://root.cern,https://github.com/root-project/root/pull/8896,1,['test'],['tested']
Testability,This Pull request provides the support for 3d convolution. . A test is added in TestSofieModel,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9457:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/9457,2,"['Test', 'test']","['TestSofieModel', 'test']"
Testability,"This Pull request refactors `DaosEventQueue` and asynchronous event management in `RDaos`, with improved performance and simplified polling of pending read-write requests. ; Better performance is achieved by eliminating the significant overhead that comes with instantiating event queues with every new request. Instead, event queues are now permanent and pool-wide, managed by `RPool`. ; The use of a symbolic parent event per call to `VectorReadWrite` better represents the intent behind that function, which is to only return upon successful processing of all asynchronous requests sent through it. ## Changes or fixes:; - Symbolic parent events are tied to batched asynchronous events originating from a single RW call, for easier polling.; - Poolwide event queues that are shared among its underlying containers and persist between RW calls, thus avoiding the expensive operation of creating queues every time `VectorReadWrite` is called.; - Explicit marking of request calls as synchronous in `FetchUpdateArgs` to bypass the queue. In such cases, object fetch/update calls to DAOS are sent with a null event pointer to signal that the request is blocking.; - The functions `daos_event_test` and `daos_event_parent_barrier`, used for polling and sending parent events respectively, are added to `libdaos_mock`. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10795:1337,test,tested,1337,https://root.cern,https://github.com/root-project/root/pull/10795,1,['test'],['tested']
Testability,"This Pull request refactors `RPageSourceDaos::LoadClusters()` to coalesce the fetch requests for pages in the same cluster bunch before calling `RDaosContainer::ReadV`, instead of launching a call to remote storage for the pages of each cluster separately. A cluster bunch corresponds to all clusters being fetched together by `LoadClusters()` at a time. . Since the call by `ReadV()` is ultimately blocking until all requests are done, this change enables the asynchronous page fetch requests from different clusters to share queue and flight time; thus, remote storage can parallelize them toward a higher read throughput. . The requests are still coalesced according to object ID and distribution key resulting from the mapping strategy in `kDefaultDaosMapping`. The modification allows support for new mappings that do not feature the ntuple cluster ID among the object ID and distribution key (i.e. such page requests may now be parallelized despite not being from the same cluster). ## Changes or fixes:; - `RPageSourceDaos::LoadClusters()` has been refactored to batch up page requests from all provided clusters before the blocking `RDaosContainer::ReadV()` call. ## Checklist:. - [x] tested changes locally + openlab `olsky-03`; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10982:1193,test,tested,1193,https://root.cern,https://github.com/root-project/root/pull/10982,1,['test'],['tested']
Testability,"This Pull request removes a log message reported when using MethodCategory, see ; https://root-forum.cern.ch/t/stray-cout-in-tmva-getmvavalue/50287",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10707:28,log,log,28,https://root.cern,https://github.com/root-project/root/pull/10707,1,['log'],['log']
Testability,This Pull request removes the final check on the MSE (Minimal Square Error) in the Keras Regression test since too few events are used to train the model. . Revert also the commit disabling pymva,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15403:100,test,test,100,https://root.cern,https://github.com/root-project/root/pull/15403,1,['test'],['test']
Testability,This Pull request replaces #8847 from @axmat adding the GRU operator to TMVA SOFIE. In addition to the original code from Axmat it adds a full network test of a GRU and fix some issues in the operator.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9390:151,test,test,151,https://root.cern,https://github.com/root-project/root/pull/9390,1,['test'],['test']
Testability,This Pull request updates xrootd version (by M.K.Simon). ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8963:78,test,tested,78,https://root.cern,https://github.com/root-project/root/pull/8963,1,['test'],['tested']
Testability,This Pull request: fixes some error messages and spelling mistakes in operators . ## Checklist:. - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10435:103,test,tested,103,https://root.cern,https://github.com/root-project/root/pull/10435,1,['test'],['tested']
Testability,This Pull request: updates `CladDerivator.h` to follow Clad custom derivative where all functions are based on pushforwards and pullbacks. ## Changes: [CladDerivator.h](https://github.com/root-project/root/blob/master/math/mathcore/inc/Math/CladDerivator.h); ## Checklist:. - [ X] tested changes locally; - [ ] updated the docs (if necessary): not required. This PR fixes # https://github.com/vgvassilev/clad/issues/510,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12021:281,test,tested,281,https://root.cern,https://github.com/root-project/root/pull/12021,1,['test'],['tested']
Testability,This addresses a warning of recent Clang versions about the `use of bitwise '|' with boolean operands [-Wbitwise-instead-of-logical]`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10787:124,log,logical,124,https://root.cern,https://github.com/root-project/root/pull/10787,1,['log'],['logical']
Testability,This addresses point 1 of issue ROOT-9742. A test macro with instructions on how optical surface information can be retrieved from TGeoManager is provided in: tutorials/geom/gdml/testoptical.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3149:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/3149,2,['test'],"['test', 'testoptical']"
Testability,This addresses test failures like:; ```; 998/1157 Test #997: tutorial-v7-draw_mt.cxx .............................................***Failed 8.47 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_mt.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1. 1007/1157 Test #1007: tutorial-v7-draw_subpads.cxx ........................................***Failed 6.81 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_subpads.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1. 1017/1157 Test #1005: tutorial-v7-draw_rh3.cxx ............................................***Failed 28.52 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/v7/draw_rh3.cxx...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT12Experimental7HistLogEv' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::Experimental::HistLog(); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8417:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/8417,4,"['Test', 'test']","['Test', 'test']"
Testability,This addresses the following errors:. Test 5: TText 1 (Text attributes)................................. OK; PDF output.......................................... 5 FAILED; Result = 12968; Reference = 12802; Error = 166 (was 150); GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK. Test 43: Divided pads and TLatex................................... OK; PDF output......................................... 43 FAILED; Result = 14206; Reference = 14075; Error = 131 (was 100); GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result............................................. OK,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5957:38,Test,Test,38,https://root.cern,https://github.com/root-project/root/pull/5957,2,['Test'],['Test']
Testability,"This adds gdb pretty printers for a few objects such as TString and TNamed, as well; as a couple of RooFit objects. gdb can automatically load them if `add-auto-load-safe-path`; is set to ROOT's lib directory.; The printers should only be installed during debug builds. A couple of things are still unclear:; - `file(COPY ...` is used to copy the printers into the build directory. This will only run when cmake is run, but not during make. The pretty-printers will therefore not get updated. Is that a problem? A solution should be to create targets that are being kept up-to-date by make.; - Is it correct to use `install(FILES ...)` to install?; - I added a roottest that starts root.exe in gdb, and tries to load the printers. This may fail; o With old gdbs; o With release builds. gdb should fail to load the printers because they are not installed. Probably, the test should be disabled during release builds. Let's see if it fails as expected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3633:869,test,test,869,https://root.cern,https://github.com/root-project/root/pull/3633,1,['test'],['test']
Testability,"This allows `static_assert(false)` to not be ill-formed in template definitions. This change is applied as a DR in all C++ modes. Of notes, a couple of tests were relying of the eager nature of static_assert. * test/SemaTemplate/instantiation-dependence.cpp; * test/SemaTemplate/instantiate-var-template.cpp. I don't know if the changes to `static_assert`; still allow that sort of tests to be expressed. Reviewed By: #clang-language-wg, erichkeane, aaron.ballman. Differential Revision: https://reviews.llvm.org/D144285. ---. Fixes the build with newer versions of MSVC's STL, reported as https://github.com/root-project/root/issues/15321",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15437:152,test,tests,152,https://root.cern,https://github.com/root-project/root/pull/15437,4,['test'],"['test', 'tests']"
Testability,"This allows `static_assert(false)` to not be ill-formed in template definitions. This change is applied as a DR in all C++ modes. Of notes, a couple of tests were relying of the eager nature of static_assert. * test/SemaTemplate/instantiation-dependence.cpp; * test/SemaTemplate/instantiate-var-template.cpp. I don't know if the changes to `static_assert`; still allow that sort of tests to be expressed. Reviewed By: #clang-language-wg, erichkeane, aaron.ballman. Differential Revision: https://reviews.llvm.org/D144285. ---. Fixes the build with newer versions of MSVC's STL, reported as https://github.com/root-project/root/issues/15321. (cherry picked from commit c767271b30bde91d885d147b95e2f91d3d7a20b6, backport of https://github.com/root-project/root/pull/15437)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15753:152,test,tests,152,https://root.cern,https://github.com/root-project/root/pull/15753,4,['test'],"['test', 'tests']"
Testability,This allows for testing that there is no unexpected duplicate (duplicates are unavoidable in case; of 'multiple' pass throught the TTree cluster(s)).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1982:16,test,testing,16,https://root.cern,https://github.com/root-project/root/pull/1982,1,['test'],['testing']
Testability,This allows to interactively adjust histogram parameters before; performing a projection to a lower dimensional representation. This patch implements ROOT-4515. A unit test is being added in root-mirror/roottest/pull/6.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/212:168,test,test,168,https://root.cern,https://github.com/root-project/root/pull/212,1,['test'],['test']
Testability,This allows to resolved using statement and find the target enum. This fixes #15406 and is tested by https://github.com/root-project/roottest/pull/1118. This also fixes: https://github.com/root-project/root/issues/12685,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15408:91,test,tested,91,https://root.cern,https://github.com/root-project/root/pull/15408,1,['test'],['tested']
Testability,This also fixes the test `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`. Closes https://github.com/root-project/root/issues/13058,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13363:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/13363,1,['test'],['test']
Testability,This also has the advantage that they don't try to upload test results that the nodes happen to find in the filesystem.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13086:58,test,test,58,https://root.cern,https://github.com/root-project/root/pull/13086,1,['test'],['test']
Testability,This also includes rudimentary support for numeric integrals in 1D with; the codegen backend as a demonstrator. A second commit cleans up the `RooFuncWrapper` class a little bit. A unit test that fits a 1D function created with the RooClassFactory using `codegen` is also added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13812:186,test,test,186,https://root.cern,https://github.com/root-project/root/pull/13812,1,['test'],['test']
Testability,This assumption was causing rare breakages in test/datasource_root.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1205:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/1205,1,['test'],['test']
Testability,"This avoids an error in the nightlies:; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-debian10-i386,SPEC=default,V=master/lastBuild/testReport/projectroot/runtutorials/tutorial_v7_ntuple_ntpl008_import/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13447:186,test,testReport,186,https://root.cern,https://github.com/root-project/root/pull/13447,1,['test'],['testReport']
Testability,This avoids problems during ctest like:; ```; 512/838 Test #516: tutorial-multicore-mp001_fillHistos .................................***Failed Error regular expression found in output. Regex=[Error in <] 2.61 sec; Processing /builddir/build/BUILD/root-6.14.06/tutorials/multicore/mp001_fillHistos.C...; SysError in <TFile::TFile>: could not delete myFile_3.root (errno: 2) (No such file or directory); Error in <TROOT::WriteTObject>: The current directory (Rint) is not associated with a file. The object (myHisto_3) has not been written.; (int) 0; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3029:54,Test,Test,54,https://root.cern,https://github.com/root-project/root/pull/3029,1,['Test'],['Test']
Testability,"This avoids the indirect dependence of ROOT on CURL, because the CURL dependence of CFITSIO is optional since version 3.49: https://github.com/HEASARC/cfitsio/blob/f220e6e2c570f19228609ee081f735df0ddb204b/docs/changes.txt#L199. Note: I tested the `builtin_cfitsio` locally on Linux, and for macOS and Linux the CI will cover it because these platforms configure with `builtin_cfitsio=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15508:236,test,tested,236,https://root.cern,https://github.com/root-project/root/pull/15508,1,['test'],['tested']
Testability,"This avoids the remaining uses of the global write lock in typical RDataFrame event loops. There are two parts to this. 1) A bug fix in the hashing of streamer info when opening files. (The hash was including the TKey timestamp and therefore ended up being unique even for files with identical streamer info). 2) Since TTreeProcessorMT can carefully manage its TChains and corresponding TFile and TTree objects, global lists/cleanup and thread safety features can be bypassed or disabled. Together these changes are enough to almost completely eliminate the use of the global write lock in typical event loops. The only remaining using is the calls from ```TFile``` to ```TProcessUUID::AddUUID``` and ```TProcessUUID::RemoveUUID``` There are still several remaining places where the global read lock is taken, and these still have some cost in light of the remaining global write lock usage. These changes have the biggest impact when analyzing a large number of files. A test case is below. Produce the test dataset:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();. // make sure that each key has a distinct timestamp to maximally; // provoke different hashes for streamer info in each file; std::this_thread::sleep_for(1100ms);; }. }; ```. Test event loop:; ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threa",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486:972,test,test,972,https://root.cern,https://github.com/root-project/root/pull/9486,1,['test'],['test']
Testability,"This bug report:; ![obraz_2021-01-05_030717](https://user-images.githubusercontent.com/483575/103598565-36ee1180-4f03-11eb-891b-2a66e7bb2062.png). Reference from tutorial: https://root.cern.ch/doc/master/alice__vsd_8C.html; ![image](https://user-images.githubusercontent.com/483575/103598652-6e5cbe00-4f03-11eb-9716-f77d792b80e9.png). ### Describe the bug; By running one of the ROOT tutorials:. $ root alice_vsd.C. I do not see any button to change events (see the image above). Apparently, from the log:. > gif2ASImage():2300:</usr/lib/root/6.22/icons/GoBack.gif> (null); > Warning in <TASImage::GetMask>: No image; > gif2ASImage():2300:</usr/lib/root/6.22/icons/GoForward.gif> (null); > Warning in <TASImage::GetMask>: No image. however:; ```; $ ls -all /usr/lib/root/6.22/icons/GoBack.gif /usr/lib/root/6.22/icons/GoForward.gif; -rw-r--r-- 1 root root 1177 11-27 16:00 /usr/lib/root/6.22/icons/GoBack.gif; -rw-r--r-- 1 root root 1166 11-27 16:00 /usr/lib/root/6.22/icons/GoForward.gif; ```. ### Expected behavior; I expect to see buttons with figures. ### To Reproduce; $ root alice_vsd.C. from the eve tutorials. ### Setup. 1. ROOT version: 6.22.06; 2. Operating system: Linux Gentoo; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself: compiled from sources via Gentoo package manager/portage, uses external libafterimage",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6985:501,log,log,501,https://root.cern,https://github.com/root-project/root/issues/6985,1,['log'],['log']
Testability,This can be problematic in test environments.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15346:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/15346,1,['test'],['test']
Testability,"This causes a flood of ""NON_XML_CHAR"" etc output in Jenkins, cluttering the output and making the actual failure virtually invisible. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12908:199,test,tested,199,https://root.cern,https://github.com/root-project/root/pull/12908,1,['test'],['tested']
Testability,"This chane is an optimization of the PyROOT value printing. Instead of jitting the value printing at every invocation of the __str__ method, the jitting now happens only once per type. The printer function pointers are stored in a map. The time needed to print is now equivalent to the previous one only for the first print, much faster afterwards. The memory used is also much lower, since traces in the AST are left only at the first print and only the type name and function pointer are stored in an unordered_map. Fixes https://github.com/root-project/root/issues/12817. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13901:640,test,tested,640,https://root.cern,https://github.com/root-project/root/pull/13901,1,['test'],['tested']
Testability,This change can be tested only in collection_proxies.C demo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7369:19,test,tested,19,https://root.cern,https://github.com/root-project/root/pull/7369,1,['test'],['tested']
Testability,"This change is an optimization of the PyROOT value printing. Instead of jitting the value printing at every invocation of the __str__ method, the jitting now happens only once per type. The printer function pointers are stored in a map. The time needed to print is now equivalent to the previous one only for the first print, much faster afterwards. The memory used is also much lower, since traces in the AST are left only at the first print and only the type name and function pointer are stored in an unordered_map. Fixes https://github.com/root-project/root/issues/12817. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes # https://github.com/root-project/root/issues/12817",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13876:641,test,tested,641,https://root.cern,https://github.com/root-project/root/pull/13876,1,['test'],['tested']
Testability,"This change is introduced to fix a problem with redefinition of RooMath; when running stressRooFit in interpreted mode on some CI nodes. You can see the errors here for example:; https://github.com/root-project/root/pull/9004#issuecomment-954950871. Copy paste from the log:; ```; Processing /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx...; In file included from input_line_8:1:; In file included from /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:; /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h:25:7: error: redefinition of 'RooMath'; class RooMath {; ^; /home/sftnight/build/workspace/root-pullrequests-build/build/include/RooGaussModel.h:21:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site in header from module 'RooFit.RooGaussModel.h'; #include ""RooMath.h""; ^; /home/sftnight/build/workspace/root-pullrequests-build/build/include/module.modulemap:2717:10: note: RooFit.RooGaussModel.h defined here; module ""RooGaussModel.h"" { header ""RooGaussModel.h"" export * }; ^; /home/sftnight/build/workspace/root-pullrequests-build/root/test/stressRooFit.cxx:15:10: note: '/home/sftnight/build/workspace/root-pullrequests-build/build/include/RooMath.h' included multiple times, additional include site here; #include ""RooMath.h""; ^; CMake Error at /home/sftnight/build/workspace/root-pullrequests-build/build/RootTestDriver.cmake:227 (message):; error code: 1; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9214:270,log,log,270,https://root.cern,https://github.com/root-project/root/pull/9214,4,"['log', 'test']","['log', 'test']"
Testability,This changes are need for collection_proxies.C demo to work.; Tested this on Fedora 30.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4079:62,Test,Tested,62,https://root.cern,https://github.com/root-project/root/pull/4079,1,['Test'],['Tested']
Testability,"This class is for internal testing only and can be used to measure the software overhead of serializing elements into pages, without actually writing them onto disk or even serializing the RNTuple headers and footers.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14502:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/14502,1,['test'],['testing']
Testability,"This code is outdated and needs to be updated. But we anyway don't use or; test this code in any way, so let's send it to the git history were dead; code belongs.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1461:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/1461,1,['test'],['test']
Testability,This commit adds support for using RooNllVarNew in code-squashing/AD. It also adds a new test that uses code-squashing and AD based derivatives to minimize a simple model.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12576:89,test,test,89,https://root.cern,https://github.com/root-project/root/pull/12576,1,['test'],['test']
Testability,"This commit adjusts the allowed deviation from the expected value so that the test passes. The reported error is (with slight variations in the exact numbers):. /builddir/build/BUILD/root-6.20.06/roofit/roostats/test/testHypoTestInvResult.cxx:24: Failure; The difference between result->UpperLimitEstimatedError() and 0.059684301 is 1.1846561807221656e-07, which exceeds 1.E-8, where; result->UpperLimitEstimatedError() evaluates to 0.05968418253438193,; 0.059684301 evaluates to 0.059684301000000002, and; 1.E-8 evaluates to 1e-08.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5867:78,test,test,78,https://root.cern,https://github.com/root-project/root/pull/5867,3,['test'],"['test', 'testHypoTestInvResult']"
Testability,This commit changes the default behaviour of tests on Windows to accomodate Module builds. @vgvassilev @bellenot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6179:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/6179,1,['test'],['tests']
Testability,"This commit changes the way in which the input dataset is split in logical ranges of entries. It also changes the subsequent creation of an RDataFrame instance inside a distributed task.; For a TTree based dataset, this happens through the creation of a TChain that represents the subset of the original dataset that contains the entries in the range. Before this commit:; For the TTree based case, the entries of the range are global with respect to the TChain created inside the distributed task.; `TChain.SetCacheEntryRange` is called with the start and end entries of the range to make sure we don't read more than needed; An RDataFrame is created with the chain as argument. The `Range` operation is used to select only the entries of the TChain in the current task that are inside the input entry range. After this commit:; For the TTree based case, the input range will report global entries with respect to the TChain of the task. But it will also report local entries with respect to each single file of the TChain in the current task.; A global TEntryList is created and filled with one sub-TEntryList per file in the chain. This allows to do a preselection directly in the TChain of the entries that should be processed or not.; `SetCacheEntryRange` is still called to ensure we don't read more than needed (hence the need to still keep global entries in the range object); The TChain (with the TEntryList) is passed as argument to an RDataFrame constructor. ## TODOs. - [x] ~add some check against using multiple times the same filename, to prevent hitting https://github.com/root-project/root/issues/8505~ No longer needed after #8660 ; - [x] Old tests adapted to new logic; - [x] Added one new test to check against reading the wrong number of entries depending on the number of partitions (a result of using TEntryList with multiple times the same treename and filename)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8646:67,log,logical,67,https://root.cern,https://github.com/root-project/root/pull/8646,4,"['log', 'test']","['logic', 'logical', 'test', 'tests']"
Testability,"This commit contains automatic changes done by `clang-tidy`. This commit was generated more or less automatically with this Python; script that uses `clang-tidy`:. ```Python; import os; import glob; import subprocess; import tqdm. """"""; For clang-tidy to work, you have to copy the compile_commands.json from the; build directory back into the repo directory (just like in; .ci/copy_headers.sh).; """""". def get_sources(directory, extensions):. files = []. for ext in extensions:; files += glob.glob(; os.path.join(directory, ""**/*"" + ext), recursive=True; ). return files. """"""; Recursively find extensions in directory, to figure out whic hextensions; should be globbed for.; find . -type f -name '*.*' | sed 's|.*\.||' | sort -u; """"""; extensions = ["".h"", "".hpp"", "".hxx"", "".cpp"", "".cc"", "".cxx""]. """"""; Some extensions are recognized as C and not as C++ files by clang-tidy. We; need to rename them, and this dict specifies how file extensions should be; replaced.; """"""; rename_dict = {"".h"": "".hpp""}. files = get_sources(""test"", extensions). cflags = (; subprocess.check_output([""root-config"", ""--cflags""]).strip().decode(""utf-8""); ). for file in tqdm.tqdm(files):. file_renamed = file; for ext, ext_renamed in rename_dict.items():; if file.endswith(ext):; file_renamed = file.replace(ext, ext_renamed). if file_renamed != file:; os.rename(file, file_renamed). cmd = [; ""clang-tidy"",; ""-checks=modernize-use-override"",; ""--fix"",; file_renamed,; ""--"",; ] + cflags.split("" ""); subprocess.call(cmd, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL). if file_renamed != file:; os.rename(file_renamed, file). """"""; Finally, replace the ClassDef with the ClassDefOverride macros.; find test -type f -print | xargs sed -i 's/ClassDef(/ClassDefOverride(/'; ...and change back the ClassDefOverride of non-overriding base classes.; """"""; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11438:1018,test,test,1018,https://root.cern,https://github.com/root-project/root/pull/11438,2,['test'],['test']
Testability,"This commit enables serialization of the Python proxy defined within cppyy to the C++ std::runtime_error class. By doing so, we avoid errors that happen in certain configurations of Dask tasks where a std::runtime_error may be thrown within the event loop itself. Recent CI failures report the following:. ```; RDataFrame::Run: event loop was interrupted; Warning in <TBufferFile::WriteObjectAny>: since runtime_error has no public constructor; 	which can be called without argument, objects of this class; 	can not be read with the current library. You will need to; 	add a default constructor before attempting to read it.; Warning in <TStreamerInfo::Build>: runtime_error: base class exception has no streamer or dictionary it will not be saved; Warning in <TStreamerInfo::Build>: runtime_error: __cow_string has no streamer or dictionary, data member ""_M_msg"" will not be saved; Error in <TClass::New>: cannot create object of class runtime_error; Error in <TBufferFile::ReadObject>: could not create object of class runtime_error; *** Break *** segmentation violation; ```. This is due to the fact that for some reason the std::runtime_error object is serialized at the end of the function scope within the Dask task. It is important to note that this has only appeared very recently (after October 20th 2023), somehow concurrently on multiple platforms/configurations:. * Alma9 (GCC 11, C++17, Python 3.9, Dask 2023.10) - also tested with Dask 2022.8.1 - 2023.9.3; * Ubuntu22 (GCC11, C++17, Python 3.10, Dask 2023.10); * Ubuntu23.10 (GCC13, C++20, Python 3.11, Dask 2023.10). ~~The reason why have appeared on these platforms and not on others (notably they do not appear in any Jenkins CI run) is unclear.~~Found culprit, see comment below",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926:1433,test,tested,1433,https://root.cern,https://github.com/root-project/root/pull/13926,1,['test'],['tested']
Testability,"This commit fixes a problem in weighted fits with CUDA, replacing the kernel for weighted NLL sums with a new multi-block kernel that works for all unit tests. The `stressRooFit` test suite is now passing again with the CUDA backend.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13311:153,test,tests,153,https://root.cern,https://github.com/root-project/root/pull/13311,2,['test'],"['test', 'tests']"
Testability,"This commit fixes two issues:. 1. Introduce `RooProduct` constructor from two RooAbsReals to be; consistent with the `RooRrodPdf`, which has a constructor from two; RooAbsPdfs. 2. Remove a useless dummy constructor for a `RooProdPdf` with no; factors, which somehow prevented the constructor from a RooFit; collection to be picked up correctly by `RooWorkspace::factory()`. The request to change the RooProduct and RooProdPdf constructors from; RooFit collections to take RooArgSets and not RooArgLists (https://github.com/root-project/root/issues/7809#issuecomment-817683625) was not; followed. This would be a breaking change for people that use; `RooProduct` to square a function for example. A unit test for the issue was also implemented. Closes https://github.com/root-project/root/issues/7809.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10797:703,test,test,703,https://root.cern,https://github.com/root-project/root/pull/10797,1,['test'],['test']
Testability,"This commit provides a rewrite of key functions of TGeoParallelWorld, achieving: . (a) faster initialization; (b) faster execution of the Safety function (from ~O(N) to ~O(1)) ; (c) faster or equal execution of FindNode/FindBoundary functions (~log(N)) ; (d) less memory consumption (better memory scalability). The development for this commit was motivated from a use case in ALICE, in which the parallel world ""scene"" can be very large (~100K volumes). In this case, TGeoVoxelFinder takes very long; to construct and consumes a very large amount of memory (GBs). In addition, the evaluation of the Safety function dominates the Geant simulation time. The improvements in this commit are mainly achieved through:. * The use of a boundary volume hierarchy (BVH) as the base acceleration entity, replacing TGeoVoxelFinder.; BVH are the standard in industry/computer-graphics, for what concerns ray-object intersection tasks. The BVH is constructed from axis-aligned bounding boxes and employed in the FindBoundary/FindNode implementations. * The use of a 3D voxel grid (TGeoVoxelGrid) structure, able to store properties ""local"" or in the vicinity of a cartesian coordinate P. This structure allows to reduce the (typical) algorithmic complexity for ""Safety"" queries to ~O(1) (with a constant factor determined by the voxel size). Filling of the 3D voxel grid cache for Safety is done on-the-fly (using the BVH once). * (Optional) Additional caching of ""last-call"" safety values for really quick return when the value is still valid at the next call. Ideas for these improvements come from prior work in related libraries such as VecGeom. -----. Implementation details:. * The implementation is, for now (until fully tested), provided in a backward compatible manner:. - By default, nothing changes; - Users have to activate the BVH mode by setting an environment variable TGEO_PW_USEBVH; - Users may hence compare the 2 modes. * Functions for Safety, FindNode, FindBoundary dispatch to some internal i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16442:245,log,log,245,https://root.cern,https://github.com/root-project/root/pull/16442,1,['log'],['log']
Testability,"This commit provides an (optional) optimization to reduce the cost of safety evaluations associated with TGeoParallelWorld. The approach consists in the introduction of additional cache-state in TGeoNavigator. This state remembers the last location for which TGeoParallelWorld::Safety was evaluated, together with the corresponding value returned. Since TGeoNavigator follows the evolution of tracks step-by-step, we have some sort of history-locality. This means that the cache-state has a high-probability of being relevant for multiple track locations in a row. The optimization proposed here is orthogonal to other improvements. It adds on top of algorithmic improvements within TGeoParallelWorld (bounding volume hierarchies, see separate PR), gaining a few extra percent in speed. By default, the new feature is not enabled by default for backward compatibility. Once fully verified, we can make it the default mode. That said, in ALICE simulations, the caching did not modify stepping behaviour and yielded identical results compared to not doing the caching. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16470:1088,test,tested,1088,https://root.cern,https://github.com/root-project/root/pull/16470,1,['test'],['tested']
Testability,This commit provides improvement to the BrentRootFinder and to TF1::GetX which uses it.; Now the bracketing is improved and the algorithms find in case of multiple roots the one with lower x value. ; In case the interval does not contain a ROOT an error message is produced and a NaN is returned instead of returning a random value as before.; This commit fixes the problem reported in ; ROOT-4998. The current test. testRootFinder is improved using gtest and adding the case of multiple roots and of log grid searchj that BrentRootFinder supports.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3425:411,test,test,411,https://root.cern,https://github.com/root-project/root/pull/3425,3,"['log', 'test']","['log', 'test', 'testRootFinder']"
Testability,"This commit refactors the mapper function so that the logic responsible; for creating the correct RDataFrame instance based on the type of data; source is done in its corresponding HeadNode class. This makes the; interface more uniform and will contribute to adding new data sources in; the future more easily. In each HeadNode class there is now a method; called `generate_rdf_creator`, responsible for creating a function that; in turns knows how to build an RDataFrame instance from one metadata; range (i.e. the information sent to a distributed task).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9298:54,log,logic,54,https://root.cern,https://github.com/root-project/root/pull/9298,1,['log'],['logic']
Testability,This commit reverts root-project/root@69568116cd. The CtorsConstants variable is not used. The commit log has a simple tests which now works without this patch. Thanks to Jonas Hahnfeld (@hahnjo) for pointing this out!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10827:102,log,log,102,https://root.cern,https://github.com/root-project/root/pull/10827,2,"['log', 'test']","['log', 'tests']"
Testability,This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12511:70,mock,mock,70,https://root.cern,https://github.com/root-project/root/pull/12511,2,"['mock', 'test']","['mock', 'test']"
Testability,"This conservative assert intended to capture future uses of the shouldPermanentlyIgnore routine and check if we have specified an absolute non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may move files around. Then the iterable (official) filename's real path might differ at the point of iteration and the point of the check. Some file systems use a temporary filename while copying/moving file and the rename it to the real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the iterator gives the expected real path of the filename which is not yet available when we ask for the real path of that path we get something different (using the same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal (@pcanal) for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5683:18,assert,assert,18,https://root.cern,https://github.com/root-project/root/pull/5683,2,['assert'],"['assert', 'asserting']"
Testability,"This conservative assert intended to capture future uses of the; shouldPermanentlyIgnore routine and check if we have specified an absolute; non-symlinked path. Turns out that when we scan for libraries we iterate a given folder which may; move files around. Then the iterable (official) filename's real path might; differ at the point of iteration and the point of the check. Some file systems; use a temporary filename while copying/moving file and the rename it to the; real filename preserving atomicity of the operations. It looks like this exactly happens in the description of ROOT-10791 -- the; iterator gives the expected real path of the filename which is not yet available; when we ask for the real path of that path we get something different (using the; same inode) eg: `mathsymb.ps` vs `mathsymb.ps_tmp_4810`. Instead of asserting, let the file system handles this instead. Kudos to Philippe Canal for investigating this sporadic failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5741:18,assert,assert,18,https://root.cern,https://github.com/root-project/root/pull/5741,2,['assert'],"['assert', 'asserting']"
Testability,"This ctor makes the following buggy code compile, but we would prefer it to rather not compile:. ```cpp; TList mylist = new TList();; ```. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary) - added to deprecation list",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15451:160,test,tested,160,https://root.cern,https://github.com/root-project/root/pull/15451,1,['test'],['tested']
Testability,"This currently compiles and works, but probably should not (we are reading the subcollection as if it were a scalar):. https://github.com/root-project/root/blob/6bd78bb934c2ef8833ca70dd78c7872315cb99a6/tree/ntuple/v7/test/rfield_vector.cxx#L23-L31",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10466:217,test,test,217,https://root.cern,https://github.com/root-project/root/issues/10466,1,['test'],['test']
Testability,"This depends on #5998 . - TMVA was somehow vetoing dataframe python tutorials. These have been reactivated.; - The vetoing logic in general has been overhauled, so it's more straight-forward, and the number of active / vetoed tutorials is correctly reported by cmake.; - Fix a few tutorials that wouldn't launch or compile. ### Overhaul of veto-or-fail when python packages are missing; Disable (instead of veto) python tutorials that cannot work when python packages are missing. This happens by listing the required packages when registering the test or tutorial:; ```; ROOT_ADD_PYUNITTEST(pyroot_pyz_ttree_branch ttree_branch.py PYTHON_DEPS numpy); ```; Before launching the tutorial/test, cmake will run a fixture, which is a simple `import <package>`. If this passes, all dependent tutorials/tests are run. If it fails, it looks like this:; ![image](https://user-images.githubusercontent.com/16205615/86784643-0c112680-c062-11ea-84a8-8ef4c5eb8e23.png). The advantage of this is that one doesn't even have to open the test output, because cmake already communicates clearly that the failure is due to missing packages. As discussed in Moday's meeting, all tests with extra runtime dependencies now are also labelled `python_runtime_deps`. This gets assigned automatically if `PYTHON_DEPS` is not empty.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5938:123,log,logic,123,https://root.cern,https://github.com/root-project/root/pull/5938,6,"['log', 'test']","['logic', 'test', 'tests']"
Testability,"This editor command (usually binded to Ctrl+T), transposes the character located at the cursor and the one to its left.; However, its behavior was incorrect if the cursor was at end of the line, invoking `std::string::operator[]()` passing an index that is out of bounds. In that case, as per GNU Readline behavior, it should swap the two last characters. ## Checklist:; - [X] tested changes locally. This PR fixes #10133.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10142:377,test,tested,377,https://root.cern,https://github.com/root-project/root/pull/10142,1,['test'],['tested']
Testability,This enabled shorter command line invocations like `root -qle 1+1` instead of `root -q -l -e 1+1`. Not sure how we should go about testing. The non-combined options are sort of tested by running `hsimple.C` at the end of the build.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2616:131,test,testing,131,https://root.cern,https://github.com/root-project/root/pull/2616,2,['test'],"['tested', 'testing']"
Testability,"This enables us to write performance benchmarks for specific ROOT functional points. Some of the advantages:; * We can split performance tests from unit tests;; * We can configure the benchmarks in a uniform way, specifying classes of benchmarks along with their running parameters (such as iterations);; * We can calculate asymptotic complexity (Big O) of the benchmarked items;; * Multithreading is a first class citizen;; * We can fine tune optimization levels (preventing some code to be optimized away);; * Rich reporting options;; * Possibility for calculating statistical performance deviations;; * More can be found [here](https://github.com/google/benchmark). This would enable finer grained benchmarking of vectorized code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/688:37,benchmark,benchmarks,37,https://root.cern,https://github.com/root-project/root/pull/688,8,"['benchmark', 'test']","['benchmark', 'benchmarked', 'benchmarking', 'benchmarks', 'tests']"
Testability,This excludes tests which are failing in runtime modules nightly builds.; We want to add runtime modules bot to incrementals and PRs so that; people can fix their bugs before commiting.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1992:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/1992,1,['test'],['tests']
Testability,"This extends ""98ee7a19d0 [cling] Fix clang::CodeGen EH assert on MacOS:"".; Just as for BeginEH, EndEH might not see the complete picture of an already; evaluated EST from a different Decl in the redecl chain. Teach it to look; at the most recent. This assert hits when:; - a deserialized decl with unevaluated EST is emitted, but a later redecl has the EST evaluated;; - during the emission, CompleteRedeclChain() is not triggered, and the emitted decl does not get; an updated EST; In EmitEndEHSpec, the decl thus still has EST unevaluated, despite EmitBeginEHSpec having looked; at an evaluated EST from the most recent decl. This fixes e.g. ./tree/dataframe/test/dataframe_ranges in ROOT on MacOS 10.15 with C++17.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6139:55,assert,assert,55,https://root.cern,https://github.com/root-project/root/pull/6139,3,"['assert', 'test']","['assert', 'test']"
Testability,This extends the aforementioned ranges of integral-like values to model random access ranges. The unit tests have been extended to cover the new functionality.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12140:103,test,tests,103,https://root.cern,https://github.com/root-project/root/pull/12140,1,['test'],['tests']
Testability,"This failure exists since ROOT 6: while CINT happily converted 1 to the world, cling refuses to convert it to e.g. const char*. Pass `0` which is ""more compatible"" with datatypes. This is still terrible design, but at least it is not making things worse, only better... Before TNamed::SetName was looked up as a call `named.SetName(1)` which - with cling - means that no method is found. Now `named.SetName(0)` finds the right method. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12956:500,test,tested,500,https://root.cern,https://github.com/root-project/root/pull/12956,1,['test'],['tested']
Testability,"This fix #6726. As reported by CMSSW tests (for example: cms-sw/cmsdist#6314 (comment)) where the data appear odd/corrupted, there is an issue in TStreamerInfo::GenerateInfoForPair (which is almost always used for std::pair in the tip of v6.22 and master). The problem is when calculating the offset of the second data member, TStreamerInfo::GenerateInfoForPair uses (unwittingly, of course :) ), the value zero for the size of the enums.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6728:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/6728,2,['test'],['tests']
Testability,"This fix will be needed for 6.30 too. Opening this PR now so that you know it is needed, but I will be continuing to run some tests today and may push some more changes if I find more bugs!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13784:126,test,tests,126,https://root.cern,https://github.com/root-project/root/pull/13784,1,['test'],['tests']
Testability,This fixes #10357 (a race condition when reading vectors with custom; allocators with TTreeProcessorMT that also affected RDataFrame). Co-authored-by: Philippe Canal <pcanal@fnal.gov>. EDIT: regression test at https://github.com/root-project/roottest/pull/866,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10361:202,test,test,202,https://root.cern,https://github.com/root-project/root/pull/10361,1,['test'],['test']
Testability,This fixes #12263 at least as tested from the Celeritas builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12264:30,test,tested,30,https://root.cern,https://github.com/root-project/root/pull/12264,1,['test'],['tested']
Testability,This fixes #13574. This prevents complains about the internals of `unique_ptr` when we are just investigating its suitability for streaming. . Also do not complains about a transient `std::tuple` even if we can not stream it (for example if one of component is a private entity). Test at https://github.com/root-project/roottest/pull/1030,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13900:280,Test,Test,280,https://root.cern,https://github.com/root-project/root/pull/13900,1,['Test'],['Test']
Testability,"This fixes #14372. During the upgrade to LLVM16, the check for validity of the existing `FileEntry` was removed:. ```; - if (UFE.isValid() &&; - llvm::sys::toTimeT(Status.getLastModificationTime()) == UFE.ModTime) {; + if (llvm::sys::toTimeT(Status.getLastModificationTime()) == UFE->ModTime) {; ```. In praticed this resulted in the usage of the zero-initialized `FileEntry` for files with mtime equal zero. The check for the mod time is a ROOT specific patch introduced by commit 8d492b6b9ca359294d018995d097736f762866c8 we the commit log:. Make sure the inode did not get updated since we read it. During the upgrade to LLVM svn revision 214630, the code was sub-optimally merged with the new related code:. ```; + if (UFE.isValid()) { // Already have an entry with this inode, return it.; +; + // FIXME: this hack ensures that if we look up a file by a virtual path in; + // the VFS that the getDir() will have the virtual path, even if we found; + // the file by a 'real' path first. This is required in order to find a; + // module's structure when its headers/module map are mapped in the VFS.; + // We should remove this as soon as we can properly support a file having; + // multiple names.; + if (DirInfo != UFE.Dir && Data.IsVFSMapped); + UFE.Dir = DirInfo;; + }; if (UFE.isValid() && Data.ModTime == UFE.ModTime) {; - // Already have an entry with this inode, return it.; - // If the stat process opened the file, close it to avoid a FD leak.; - if (F); - delete F;; -; return &UFE;; }; ```. where the new code (top part) should also have not been executed unless the UFE was actually returned. This also made meger the LLVM code more challenged were one the change was:; ```; - if (UFE.isValid()) { // Already have an entry with this inode, return it.; + if (ReusingEntry) { // Already have an entry with this inode, return it. ```; this lead to the inadvertent removal of `UFE.isValid() conditional` in the patched part (and the forgetting of adding `ReusingEntry conditional`). This pat",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14373:537,log,log,537,https://root.cern,https://github.com/root-project/root/pull/14373,1,['log'],['log']
Testability,"This fixes #14425 (the reproducer is added as test). Note that the patch comes straight from upstream cppyy https://github.com/wlav/cppyy-backend/blob/25caf988cef1f2f76705c07b7262f076e8ed0e01/cling/src/core/metacling/src/TClingCallFunc.cxx#L468-L485 even though it's a patch in TCling. I open this PR as a draft to start the discussion as to how we can integrate this change, since it's necessary to fix a bug that also affects usage of ROOT classes via PyROOT.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14426:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/14426,1,['test'],['test']
Testability,This fixes #15460. Extend the test accordingly.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15461:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/15461,2,['test'],['test']
Testability,"This fixes #9136. Without this commit, SelectLooper would select the 'GenericLooper'; in the case of an emulated proxy for STL collection with (in the; name) a custom allocator. However the GenericLooper only usable; for collection with a compiled collection proxy. In particular, GenericLooper is calling the 'Next' function which; is not defined for vector ... and emulated collection. Using; it lead to an assert complaining (right fully so) that an; 'undefined' function is being called.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9764:409,assert,assert,409,https://root.cern,https://github.com/root-project/root/pull/9764,1,['assert'],['assert']
Testability,This fixes ROOT-10324 and a new test for TEfficiency and TGraphAsymmErrors::Divide has been added.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4423:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/4423,1,['test'],['test']
Testability,"This fixes ROOT-10504. the script:; ```. namespace boost { namespace mpl {. // Commenting the next line make the assert failure go away; struct TTUBE {};. }}. ```; reproduce the problem with 'just' ROOT. The trigger is the auto-loading of a library that has a dictionary with has forward decl string .. which all starts with:; ```; static const char* fwdDeclCode = R""DICTFWDDCLS(; extern int __Cling_Autoloading_Map;; ....; ```. The order of parsing is (with many ellipsis):; ```; ""<<< cling interactive line includer >>>"" : line 9 : #include “standalone.C”; standalone.C : line 1 : #pragma GCC diagnostic push; standalone.C : line 2 : #pragma GCC diagnostic ignored ""-Wuninitialized"" // Inserted in Diag map; standalone.C : line 3 : #pragma GCC diagnostic ignored ""-Wsign-conversion"" // Inserted in Diag map; standalone.C : line 8 : struct TTUBE {} ; // triggers auto-loading and thus recursive parsing. ""<<< cling interactive line includer >>>"" : line 10 : parse dict fwd declare string; input_line_9 : line 2 : #pragma clang diagnostic ignored ""-Wkeyword-compat"" // Inserted in Diag map; input_line_9 : line 3 : #pragma clang diagnostic ignored ""-Wignored-attributes"" // Inserted in Diag map; input_line_9 : line 4 : #pragma clang diagnostic ignored ""-Wreturn-type-c-linkage"" // Inserted in Diag map. end of file. standalone.C : line 12 : #pragma GCC diagnostic pop // Inserted in Diag map; ```; The last line triggers the assert because when recording the state change, it records it as being from; ```; standalone.C : line 12; ""<<< cling interactive line includer >>>"" : line 9; ```; but when recording the last one, it notices that the last state change that happened, indirectly, for the file '<<< cling interactive line includer >>>' happened at line 10 (because of the pragma in input_line_9 which is 'recorded' as being included by line 10),; which makes that the state change for ```standalone.C:12``` happens 'ealier' than the last state change as far as the pseudo-file ""<<< cling interac",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4882:113,assert,assert,113,https://root.cern,https://github.com/root-project/root/pull/4882,2,['assert'],['assert']
Testability,This fixes ROOT-7608.; Move to protected also the functions of TH1 that do not make sense for TH2Poly.; Add a test for getting/setting the bin error,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3568:110,test,test,110,https://root.cern,https://github.com/root-project/root/pull/3568,1,['test'],['test']
Testability,This fixes ROOT-9068 issue.; Tests in roottest have also been updated.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1238:29,Test,Tests,29,https://root.cern,https://github.com/root-project/root/pull/1238,1,['Test'],['Tests']
Testability,This fixes `gtest-tree-ntuple-v7-test-ntuple-types` in a PCH build.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13353:33,test,test-ntuple-types,33,https://root.cern,https://github.com/root-project/root/pull/13353,1,['test'],['test-ntuple-types']
Testability,This fixes `test/CodeUnloading/PCH/VTables.C` with C++17 and later.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13283:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/13283,1,['test'],['test']
Testability,This fixes a nightly build issue on OSX with -Druntime_cxxmodules=On by default. There rootcling still needs to parse the assert statement even if NDEBUG is defined.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5320:122,assert,assert,122,https://root.cern,https://github.com/root-project/root/pull/5320,2,['assert'],['assert']
Testability,"This fixes a race condition in which a TTreeReader and its; TTreeReaderValues could be deleted concurrently:; Thread #1) a task ends and pushes back processing slot; Thread #2) a task starts and overwrites thread-local TTreeReaderValues; Thread #1) first task deletes TTreeReader. I have not run a stress-test on this PR yet, to check for rare crashes. Will update as soon as I do.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/837:305,test,test,305,https://root.cern,https://github.com/root-project/root/pull/837,1,['test'],['test']
Testability,This fixes a test failure on i686:. 17/593 Test #94: test-stressmathcore ........................................***Failed Error regular expression found in output. Regex=[FAILED|Error in] 3.21 sec; Beta distribution 		................ OK; Gamma distribution 		................ OK; Chisquare distribution 		................ OK; Normal distribution 		................ OK; BreitWigner distribution 		................ OK; F distribution 		................ OK; lognormal distribution 		................ OK; Exponential distribution 		................ OK; Landau distribution 		................ OK; Uniform distribution 		................ OK; ******************************************************************************; 	Test of Physics Vector (GenVector package); ******************************************************************************; XYVector creation 		................ OK; XYVector addition 		................ OK; XYVector creation 		................ OK; XYVector setting 		................ OK; XYVector -> Polar2DVector 		................ OK; Vector conversion 		................ OK; XYVector operations 		..............; Polar2DVector operations 		................ OK; XYVector delta values 		..............; Polar2DVector delta values 		................ OK; XYVector write 		................ OK; XYVector read 		................ OK; XYVector after read 		................ OK; Polar2DVector write 		................ OK; Polar2DVector read 		................ OK; Polar2DVector after read 		................ OK; XYZVector creation 		................ OK; XYZVector addition 		................ OK; XYZVector creation 		................ OK; XYZVector setting 		................ OK; XYZVector -> Polar3DVector 		................ OK; Vector conversion 		................ OK; XYZVector operations 		..............; Polar3DVector operations 		................ OK; XYZVector delta values 		..............; Polar3DVector delta values 		................ OK; XYZVector write 		................ OK; XYZ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/401:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/401,5,"['Test', 'log', 'test']","['Test', 'lognormal', 'test', 'test-stressmathcore']"
Testability,"This fixes a test failure on i686:. 95/593 Test #45: mathmore-testSpecFunc ......................................***Failed 0.40 sec; tgamma(9.0) :	 OK; lgamma(0.1) :	 OK; inc_gamma(1,0.001) :	 OK; inc_gamma(100,99) :	 OK; inc_gamma_c(100,99) :	 OK; inc_gamma_c(1000,1000.1) :	 OK; erf(0.5) :	 OK; erfc(-1.0) :	 OK; beta(1.0, 5.0) :	 OK; inc_beta(1,1,1) :	 OK; inc_beta(0.5,0.1,1.0) :	 OK; assoc_laguerre(4, 2, 0.5) :	 OK; assoc_legendre(10, 1, -0.5) :	 OK; comp_ellint_1(0.50) :	 OK; comp_ellint_2(0.50) :	 OK; comp_ellint_3(0.5, 0.5) :	 OK; conf_hyperg(1, 1.5, 1) :	 OK; cyl_bessel_i(1.0, 1.0) :	 OK; cyl_bessel_j(0.75, 1.0) :	 OK; cyl_bessel_k(1.0, 1.0) :	 OK; cyl_neumann(0.75, 1.0) :	 OK; ellint_1(0.50, PI/3.0) :	 OK; ellint_2(0.50, PI/3.0) :	 OK; ellint_3(-0.50, 0.5, PI/3.0) :	 OK; expint(1.0) :	 OK; hyperg(8, -8, 1, 0.5) :	 OK; laguerre(4, 1.) :	 FAILED ; Discrepancy in laguerre(4, 1.) () :; -0.625000000000000555 != -0.625 discr = 1 (Allowed discrepancy is 4.44089209850062616e-16); legendre(10, -0.5) :	 OK; riemann_zeta(-0.5) :	 OK; sph_bessel(1, 10.0) :	 OK; sph_legendre(3, 1, PI/2.) :	 OK; sph_neumann(0, 1.0) :	 OK; airy_Ai(-0.5) :	 OK; airy_Bi(0.5) :	 OK; airy_Ai_deriv(-2) :	 OK; airy_Bi_deriv(-3) :	 OK; airy_zero_Ai(2) :	 OK; airy_zero_Bi(2) :	 OK; airy_zero_Ai_deriv(2) :	 OK; airy_zero_Bi_deriv(2) :	 OK; Error: Special Functions Test FAILED !!!!!; CMake Error at /builddir/build/BUILD/root-6.08.06/cmake/modules/RootTestDriver.cmake:201 (message):; error code: 1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/400:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/400,4,"['Test', 'test']","['Test', 'test', 'testSpecFunc']"
Testability,This fixes an assert in isBloomFilterEmpty which assumes the bloom filter is already built. This is a fix for PR #4717.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5563:14,assert,assert,14,https://root.cern,https://github.com/root-project/root/pull/5563,1,['assert'],['assert']
Testability,This fixes and adds tests for #6964 and should also fix #6944 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6965:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/6965,1,['test'],['tests']
Testability,This fixes building ROOT (and installing the prerequisite python packages) e.g. on Alma9. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12517:155,test,tested,155,https://root.cern,https://github.com/root-project/root/pull/12517,1,['test'],['tested']
Testability,"This fixes random failures of the `R__USE_IMT` part of the `datasource-root` test on Windows, due to file name corruptions, like for example:; ```; [ RUN ] TRootTDS.DefineSlotMT; Error in <TFile::TFile>: file C:/root-dev/build/x64/debug/tree/dataframe/test/G__NTupleStruct.vcx does not exist; [ OK ] TRootTDS.DefineSlotMT (191 ms); [ RUN ] TRootTDS.FromARDFMT; Error in <TFile::Init>: C:/root-dev/build/x64/debug/tree/dataframe/test/INSTALL.vcxproj not a ROOT file; C:\root-dev\git\master\tree\dataframe\test\datasource_root.cxx(175): error: Expected equality of these values:; 29.; Which is: 29; *max; Which is: 23; [ FAILED ] TRootTDS.FromARDFMT (6 ms); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13469:77,test,test,77,https://root.cern,https://github.com/root-project/root/pull/13469,4,['test'],['test']
Testability,"This fixes re-running tests on Windows. According to [the documentation](https://github.com/root-project/root/blob/master/config/rootrc.in#L384-L390), this is already the default for the other platforms, while the default is 3 for Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7288:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/7288,1,['test'],['tests']
Testability,This fixes some wrongly handled cases in TDF's runtime type deduction logic. This PR renders #1529 obsolete.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1532:70,log,logic,70,https://root.cern,https://github.com/root-project/root/pull/1532,1,['log'],['logic']
Testability,This fixes test failure:; ```; 745/1157 Test #729: tutorial-multicore-mp102_readNtuplesFillHistosAndFit ................***Failed 1.55 sec; Processing /builddir/build/BUILD/root-6.25.01/tutorials/multicore/mp102_readNtuplesFillHistosAndFit.C...; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT16TTreeProcessorMPC1Ej' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::TTreeProcessorMP::TTreeProcessorMP(unsigned int); Maybe you need to load the corresponding shared library?; IncrementalExecutor::executeFunction: symbol '_ZN4ROOT16TTreeProcessorMP11ReplyToIdleEP7TSocket' unresolved while linking [cling interface function]!; You are probably missing the definition of ROOT::TTreeProcessorMP::ReplyToIdle(TSocket*); Maybe you need to load the corresponding shared library?; CMake Error at /builddir/build/BUILD/root-6.25.01/x86_64-redhat-linux-gnu/RootTestDriver.cmake:237 (message):; error code: 1; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8366:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/8366,2,"['Test', 'test']","['Test', 'test']"
Testability,This fixes that we often rebuild parts of ROOT by just doing simple git things. Before this change; we had this dependency on the header VCSRevision.h which is used by different parts of LLVM:; ```; interpreter/llvm/src/include/llvm/Support/VCSRevision.h:; input: CUSTOM_COMMAND; /home/teemperor/root/root-trunk2/.git/logs/HEAD <- Timestamp of this changes a lot!; /home/teemperor/root/root-trunk2/interpreter/llvm/src/cmake/modules/GenerateVersionFromCVS.cmake; outputs:; interpreter/llvm/src/include/llvm/Support/llvm_vcsrevision_h; interpreter/llvm/src/include/llvm/Support/CMakeFiles/llvm_vcsrevision_h; ```. After this change we no longer have the git head in here:. ```; teemperor@ftlserver ~/r/trunk-build2> ninja -t query interpreter/llvm/src/include/llvm/Support/VCSRevision.h; interpreter/llvm/src/include/llvm/Support/VCSRevision.h:; outputs:; interpreter/llvm/src/include/llvm/Support/CMakeFiles/llvm_vcsrevision_h; ```. I added two commits: One that fixes the current builds in a hacky way and one that is doing it properly but only goes into effect once we have the next LLVM upgrade (as the flag for configuring this is just added recently).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/813:318,log,logs,318,https://root.cern,https://github.com/root-project/root/pull/813,1,['log'],['logs']
Testability,"This fixes the ASAN test failure of `testLikelihoodSerial` seen in the; nightlies:. https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-asan/LABEL=ROOT-centos8,SPEC=asan,V=master/lastBuild/testReport/junit/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testLikelihoodJob/. Following up on #12835.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12880:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/12880,4,['test'],"['test', 'testLikelihoodSerial', 'testReport']"
Testability,"This fixes the following compilation errors on Windows:; ```; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C2039: 'TreeUtils': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1120): message : while compiling class template member function 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\test\datasource_sqlite.cxx(41): message : see reference to function template instantiation 'ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>> ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>::Snapshot(std::string_view,std::string_view,std::string_view,const ROOT::RDF::RSnapshotOptions &)' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' mus",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11153:263,test,test,263,https://root.cern,https://github.com/root-project/root/pull/11153,3,['test'],['test']
Testability,This fixes the following failure of the test-stresshistofit-interpreted test:. 151: Processing C:/Users/sftnight/git/master/test/stressHistoFit.cxx...; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:117:9: warning: 'FOREGROUND_BLUE' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_BLUE 1; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:35:9: note: previous definition is here; 151: #define FOREGROUND_BLUE 0x0001 // text color contains blue.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:118:9: warning: 'FOREGROUND_GREEN' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_GREEN 2; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:36:9: note: previous definition is here; 151: #define FOREGROUND_GREEN 0x0002 // text color contains green.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:119:9: warning: 'FOREGROUND_RED' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_RED 4; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:37:9: note: previous definition is here; 151: #define FOREGROUND_RED 0x0004 // text color contains red.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:120:9: warning: 'FOREGROUND_INTENSITY' macro redefined [-Wmacro-redefined]; 151: #define FOREGROUND_INTENSITY 8; 151: ^; 151: C:\Program Files (x86)\Windows Kits\10\Include\10.0.17134.0\um\consoleapi2.h:38:9: note: previous definition is here; 151: #define FOREGROUND_INTENSITY 0x0008 // text color is intensified.; 151: ^; 151: In file included from input_line_10:1:; 151: C:\Users\sftnight\git\master\test\stressHistoFit.cxx:124:19: error: functions that differ only in their return type cannot be overloaded; 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3312:40,test,test-stresshistofit-interpreted,40,https://root.cern,https://github.com/root-project/root/pull/3312,5,['test'],"['test', 'test-stresshistofit-interpreted']"
Testability,"This fixes the following:. CMake is re-running because C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp is out-of-date.; the file 'C:/Users/sftnight/git/master/CMakeLists.txt'; is newer than 'C:/Users/sftnight/build/debug/CMakeFiles/generate.stamp.depend'; result='-1'; -- Selecting Windows SDK version 10.0.18362.0 to target Windows 10.0.16299.; -- Looking for python; -- Preferring Python version 3; -- Found Python: C:/Python37-32/python.exe (found version ""3.7.4"") found components: Interpreter Development; CMake Error at C:/Program Files/CMake/share/cmake-3.16/Modules/FindPackageHandleStandardArgs.cmake:226 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; C:/Program Files/CMake/share/cmake-3.16/Modules/FindPython.cmake:347 (find_package_handle_standard_args); cmake/modules/SearchRootCoreDeps.cmake:72 (find_package); CMakeLists.txt:120 (include). -- Configuring incomplete, errors occurred!; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeOutput.log"".; See also ""C:/Users/sftnight/build/debug/CMakeFiles/CMakeError.log"".; CMake Configure step failed. Build files cannot be regenerated correctly. Looking at cmake/modules/SearchRootCoreDeps.cmake, line 72:; find_package(Python COMPONENTS NumPy). spotted by Bertrand on Windows.; Apparently the keyword REQUIRED is not enough to avoid stopping the; compilation if a package is not found, do the option QUIET is added.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5002:1042,log,log,1042,https://root.cern,https://github.com/root-project/root/pull/5002,2,['log'],['log']
Testability,This fixes the nightlies from today: http://cdash.cern.ch/testSummary.php?project=1&name=pyunittests-pyroot-import-load-libs&date=2020-04-08,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5321:58,test,testSummary,58,https://root.cern,https://github.com/root-project/root/pull/5321,1,['test'],['testSummary']
Testability,"This fixes the results of multi-range fits where the shape of the pdf; depends on the normalization set, e.g. with a multidimenstional; `RooProdPdf`. A unit test was implemented to test that the result of such a 2D; multi-range fit is compatible with the fit result over the full range.; It is expected that if the union of the ranges is the full range, the; result will exactly match the full-range fit. This has already been; checked so far in the 1D case. The `stressRooFit` reference file has been updated, because there is; such a 2D multi-range fits in the tests (see also the; rf312_multirangefit tutorial).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9150:157,test,test,157,https://root.cern,https://github.com/root-project/root/pull/9150,3,['test'],"['test', 'tests']"
Testability,"This fixes the test `gtest-tree-ntuple-v7-test-ntuple-types` when building with `runtime_cxxmodules=OFF`, see #13058.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13131:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/13131,2,['test'],"['test', 'test-ntuple-types']"
Testability,"This fixes the test `roottest-root-core-execStatusBitsCheck` when building with `runtime_cxxmodules=OFF`, see #13058. ---. I don't know if there is an easier / better solution for this...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13134:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/13134,1,['test'],['test']
Testability,"This fixes warnings such as these:; ```; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12Experimental5SOFIE8INTERNAL19make_ROperator_SeluERKN4onnx9NodeProtoERKNS3_10GraphProtoERSt13unordered_mapINSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEENS1_11ETensorTypeESt4hashISG_ESt8equal_toISG_ESaISt4pairIKSG_SH_EEE' unresolved while linking function '_GLOBAL__sub_I_cling_module_0'!; You are probably missing the definition of TMVA::Experimental::SOFIE::INTERNAL::make_ROperator_Selu(onnx::NodeProto const&, onnx::GraphProto const&, std::unordered_map<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, TMVA::Experimental::SOFIE::ETensorType, std::hash<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::equal_to<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > >, std::allocator<std::pair<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const, TMVA::Experimental::SOFIE::ETensorType> > >&); Maybe you need to load the corresponding shared library?; ```; # This Pull request:. ## Changes or fixes:. Move private declarations away from the public header file. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10145:1218,test,tested,1218,https://root.cern,https://github.com/root-project/root/pull/10145,1,['test'],['tested']
Testability,"This follow-up PR further improved the situation after #12380. In particular, the staging area of a collection cannot (apparently) be iterated -- see; https://github.com/root-project/root/blob/master/io/io/src/TGenCollectionProxy.cxx#L1573.; Other uses in the ROOT repository rely on `TVirtualCollectionProxy::At()`. However, we can instead exploit the fact that the staging area is backed by an array, i.e. the elements are contiguous in memory. Use this optimization also for `kSTLvector` collections, which was a TODO anyways. This should also provide an advantage/simplification to PR #12948. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13197:618,test,tested,618,https://root.cern,https://github.com/root-project/root/pull/13197,1,['test'],['tested']
Testability,"This follows the C++ Core Guidelines item F.16, 'For ""in"" parameters, pass cheaply-copied types by value and others by reference to const.' `RClusterIndex` consists of two 64-bit values which for most recent platforms with 64-bit pointers is cheap to copy and better to pass in two registers instead of passing a pointer to stack memory. This in turn helps some recursive calls in RNTuple, for example `RColumn::ReadV` (at the moment of writing). In numbers, this scores a single-digit performance improvement in the usual ATLAS analysis benchmark, -5% analysis runtime on my system. The other usual benchmarks show no changes beyond fluctuations. This changes was prepared by running; ```; $ git grep -l ""RClusterIndex &"" | xargs sed -i ""s/const \(ROOT::Experimental::\)\?RClusterIndex &/\\1RClusterIndex /g""; ```; then reverting the change in `RNTupleUtil.hxx` for the copy-constructor and copy-assignment operator, and finally running clang-format.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14406:538,benchmark,benchmark,538,https://root.cern,https://github.com/root-project/root/pull/14406,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"This follows the folder restructuring done in VecGeom 1.2, allowing the TGeoVGConverter to work with newer versions. Partially addresses #11271. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR partially addresses #11271, missing for the moment the TGeoVGconverter test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11790:210,test,tested,210,https://root.cern,https://github.com/root-project/root/pull/11790,2,['test'],"['test', 'tested']"
Testability,"This follows up on 46642ca1c40, reducing the relative tolerance in one case to make the test pass again on macOS ARM.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14107:88,test,test,88,https://root.cern,https://github.com/root-project/root/pull/14107,1,['test'],['test']
Testability,"This follows up on a previous commit 92fbd0db47 with the title:; ```; [RF] Modernize `RooVectorDataStore::RealFullVector` class; ```. It changed the type of the `RooVectorDataStore::RealFullVector` members from `std::vector<double>*` to `std::unique_ptr<std::vector<double>>` while increasing the class version. However, while reasing old workspaces with the previous class version worked perfectly fine, there were logged errors when writing and then reading back a dataset with weight errors in ROOT `master`:. ```; TStreamerInfo::BuildOld:0: RuntimeWarning: Cannot convert RooVectorDataStore::RealFullVector::_vecE from type: vector<double> to type: vector<double>, skip element; TStreamerInfo::BuildOld:0: RuntimeWarning: Cannot convert RooVectorDataStore::RealFullVector::_vecEL from type: vector<double> to type: vector<double>, skip element; TStreamerInfo::BuildOld:0: RuntimeWarning: Cannot convert RooVectorDataStore::RealFullVector::_vecEH from type: vector<double> to type: vector<double>, skip element; ```. This was very unexpected. Maybe there is some problem with the IO of class members of type `std::unique_ptr<std::vector<double>>`. This commit suggests to fix this problem by using `std::vector<double>` directly, which makes the code much simpler anyway. It also allows us to get rid of a workaround in `RealFullVector::Streamer()` where it was not clear if this workaround is still needed or not. The class version is not incremented further, because the last increment only happened a few days ago, and no new ROOT version has been released since then.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12503:416,log,logged,416,https://root.cern,https://github.com/root-project/root/pull/12503,1,['log'],['logged']
Testability,"This functionality was put there to understand the potential benefits of generating optimized C++ shared libraries on-the-fly starting from the RDataFrame operations requested by the user in the application. With the benchmarks done so far, we have never seen a real reason to switch to this behaviour from the traditional PyROOT based approach. Also, it needed extra care when dealing with some special operations that cross the Python-C++ boundary (e.g. `AsNumpy`). We can remove it for now.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13232:217,benchmark,benchmarks,217,https://root.cern,https://github.com/root-project/root/pull/13232,1,['benchmark'],['benchmarks']
Testability,"This goes hand-in-hand with #169 . ; These were found in a different way, though: ; By creating them with their default constructor and trying to stream them to a memory buffer (the ""StreamingTest"" of https://github.com/olifre/rootStaticAnalyzer ). . This PR demotes some class-versions for classes which break when streamed (and which are not supposed to be streamed) and makes one more member transient which should be transient (in TTreeFormula). . There's one more remaining issue:. ```; Error in <TStreamerInfo::Build>: TRandom1, discarding: const unsigned int* fTheSeeds, no [dimension]; ```. I'm not sure what the ""dimension"" should be for this member - it's not so clear from the ranlux code to me. . More issues are probably still there since rootStaticAnalyzer right now excludes some classes from testing completely if their construction / destruction using the default constructor fails.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/170:808,test,testing,808,https://root.cern,https://github.com/root-project/root/pull/170,1,['test'],['testing']
Testability,"This has been changed:. - Refactor PyRandomForest (coding style, smoother python integration, easier multi-class integration); - Enable multi-class classification; - Create unit-test usable with `ctest -V -R PyMVA-RandomForest` for binary classification; - Add return error codes to `PyMethodBase::Unserialize()` function; - Mark ` tmva/pymva/test/Classification.C` as deprecated (lacks dataloader, I'll remove it if PyGTB is ported as well to ctest unit-test)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/303:178,test,test,178,https://root.cern,https://github.com/root-project/root/pull/303,3,['test'],['test']
Testability,"This has not been implemented so far. This commit also includes a unit; test for it. For easier toggling of squared weights, a new virtual function; `RooAbsArg::applyWeightsSquared` was introduced such that one doesn't; have to pick up manully the likelihood classes from the computation; graph when applying the weights squared correction. To be backported to 6.26.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10229:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/10229,1,['test'],['test']
Testability,"This implementation intends to pave the way for the support of tree/chain friends in TDataFrame MT. For that purpose, now TTreeProcessorMT stores the information about the friends of the processed tree/chain. In order to provide support for friends, this implementation proposes a new way of dealing with chains in TTreeProcessorMT. The old way consisted in operating file by file, obtaining a TTree from each file and then constructing a TTreeReader for the particular range a task was going to process in that TTree. The aforementioned implementation prevented the support for friend chains, since there was no chain to add the friends to, only trees. In this new implementation, TTreeProcessorMT always constructs a chain per TTreeView, from which TTreeReaders are created to operate on ranges of the chain. If necessary, friends could be added to that chain. I have also extended roottest-root-multicore-tp_process_imt to test the friends case.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1299:926,test,test,926,https://root.cern,https://github.com/root-project/root/pull/1299,1,['test'],['test']
Testability,"This in turn fixes a problem with TTreeProcessorMT and multi-thread; RDataFrame ""forgetting"" about the TTreeIndexes associated with; input friend trees. It fixes https://github.com/root-project/root/issues/12260,; ""[DF] Bogus data read from indexed friend trees in multi-thread runs"". A test is added for this case as well.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12269:287,test,test,287,https://root.cern,https://github.com/root-project/root/pull/12269,1,['test'],['test']
Testability,"This is ROOT6 support for [CMA-ES](https://www.lri.fr/~hansen/cmaesintro.html), a state-of-the-art black box stochastic minimizer. The implementation uses [libcmaes](https://github.com/beniz/libcmaes), a novel high performance C++11 (with Python bindings) library for blackbox optimization. The new minimizer yields better results than Minuit2 for most problems, though for an higher computation cost on average. See below for links to relevant benchmarks backing up these claims. This implementation is on behalf of [Inria Saclay Research group TAO](http://www.inria.fr/en/teams/tao), [Laboratoire de l'Accelerateur Lineaire, group AppStat](http://appstat.lal.in2p3.fr/) and [University Paris-Sud LRI](https://www.lri.fr/index_en.php?lang=EN). ===Features===; - Seamless replacement for Minuit, Minuit2 and Fumili; - Seamless support for RooFit; - Relying on libcmaes allows for best performances known for CMA-ES + access to several flavors of the original algorithm, yielding best results with a trade off for computational cost, as needed; - Compilation support for both Autotools and CMake; - Included tutorial files, tests, and a special benchmark vs Minuit2. ===Documentation===; - Main documentation for building and using the new minimizer is here: https://github.com/beniz/libcmaes/wiki/using-CMA-ES-in-CERN's-ROOT. ===Performances===; - On-par with Minuit2 on low dimensional problems (< 10-D), consistently beats Minuit2 in higher dimension, leading to better fits. These claims are backed by two benchmarks and two experiments on real world data (we are still waiting from some results from usage at CERN); - Benchmark CMA-ES vs Minuit on [BBOB](http://coco.gforge.inria.fr/doku.php?id=bbob-2013) available here: https://drive.google.com/open?id=0B3J1vWYhta9ibktXc2JLRUExUTA&authuser=0; - In-ROOT benchmark vs Minuit2 on low-dimensional problems, results available here: https://drive.google.com/open?id=0B3J1vWYhta9iTmR0T0hnN21lSGM&authuser=0; - Beats out Minuit2 up to 98% of the time o",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/40:445,benchmark,benchmarks,445,https://root.cern,https://github.com/root-project/root/pull/40,3,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,"This is a PR including a lot of work on the convolutional layer. It can be logically divided the following parts:. 1. Back propagation in CUDA (this was the most complex). 2. Forward propagation in CUDA (this was a comparatively simpler task). 3. Helper static methods such as a column based sum reduction and matrix equality checkers for every architecture. 4. An element by element detailed test case for backward and forward propagation. The one on forward propagation was designed and solved on paper. I was not able to do the same for back-propagation, instead I considered the CPU implementation to be correct and asserted that the CUDA outputs the same result. 5. Trivial bug fixes.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2216:75,log,logically,75,https://root.cern,https://github.com/root-project/root/pull/2216,6,"['assert', 'log', 'test']","['asserted', 'logically', 'test']"
Testability,This is a backport of #12025 by @hahnjo and fixes the corresponding test failure in v6-28-00-patches.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12212:68,test,test,68,https://root.cern,https://github.com/root-project/root/pull/12212,1,['test'],['test']
Testability,"This is a backport of #7031 to the 6-24-00-patches branch. I cherry-picked two of the three commits.; I left the test suite out, as it finally should go to roottest.git, as far as I understood it. This is basically to get the thing started. cc: @pcanal, @dennisklein",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7794:113,test,test,113,https://root.cern,https://github.com/root-project/root/pull/7794,1,['test'],['test']
Testability,"This is a backport of all the relevant RooFit PRs that were recently merged to master to v6-28-00-patches (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/12017; 2. https://github.com/root-project/root/pull/12022; Only the commits 1, 2, 5, and 6 that are relevant to fix the problem and testing; 3. https://github.com/root-project/root/pull/12024; 4. https://github.com/root-project/root/pull/12029; 5. https://github.com/root-project/root/pull/12030; 6. https://github.com/root-project/root/pull/12033; 7. https://github.com/root-project/root/pull/12039; 8. https://github.com/root-project/root/pull/12046; 9. https://github.com/root-project/root/pull/12051. Related to https://github.com/root-project/root/issues/11856.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12057:354,test,testing,354,https://root.cern,https://github.com/root-project/root/pull/12057,1,['test'],['testing']
Testability,"This is a backport of all the relevant bugfix RooFit PRs that were recently merged to `master` to `v6-26-00-patches` (in the right order, to not have the commit history diverge too much). 1. https://github.com/root-project/root/pull/11401; 2. https://github.com/root-project/root/pull/11406; Only the last commit that changes the PDF cloning behavior, also excluding the `testRooSimultaneous` changes in that commit",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11402:372,test,testRooSimultaneous,372,https://root.cern,https://github.com/root-project/root/pull/11402,1,['test'],['testRooSimultaneous']
Testability,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `aa270ad60b`) are the ones that are not in `v6-28-00-patches` (as of `44db6e0`). ```txt; 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar; 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12723:503,test,testRooFuncWrapper,503,https://root.cern,https://github.com/root-project/root/pull/12723,1,['test'],['testRooFuncWrapper']
Testability,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt; 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`; 5d5e1bcce1 [RF] Fix build due to changed compute() signature; f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU; a3294b725f [RF] Code format for `testNaNPacker.cxx`; 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute; 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute; 84870e3207 [RF] Less use of the `RunContext` class in RooFit; aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashConte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12722:513,test,test,513,https://root.cern,https://github.com/root-project/root/pull/12722,4,"['log', 'test']","['logging', 'test', 'testNaNPacker']"
Testability,"This is a backport of some RooFit PRs that were recently merged to master to v6-28-00-patches. 1. https://github.com/root-project/root/pull/12682; 2. https://github.com/root-project/root/pull/12696; 3. https://github.com/root-project/root/pull/12699; 4. https://github.com/root-project/root/pull/12702; 5. https://github.com/root-project/root/pull/12707. Related to https://github.com/root-project/root/issues/12319. After merging this PR, the following RooFit commits in ROOT `master` (as of `d6cb771d7f`) are the ones that are not in `v6-28-00-patches` (as of `to fill out after merging`). ```txt; 7c88a7414b [RF] Migrate more RooFit functions to `RooFit::OwningPtr<T>`; 5d5e1bcce1 [RF] Fix build due to changed compute() signature; f69a346520 [RF] Update FitParabola test in `testNaNPacker` to also run on GPU; a3294b725f [RF] Code format for `testNaNPacker.cxx`; 8a67cf611c [RF] Support pdf normalization with error logging in RooBatchCompute; 5ae7ae018e [RF] More `RooNaNPacker` to RooBatchCompute; 84870e3207 [RF] Less use of the `RunContext` class in RooFit; aa47d71aae [RF] Implement `RooPolynomial` and `RooPolyVar` in BatchMode; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; 6af8005e97 [RF] Add `selfNormalized` flag to RooWrapperPdf; d677b811d9 [RF] Increase version number of `RooRea",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12708:770,test,test,770,https://root.cern,https://github.com/root-project/root/pull/12708,3,['test'],"['test', 'testNaNPacker']"
Testability,"This is a better fix for not_fn, where the check is now applied in the right place, and the test runs regardless (it could check for the not_fn define as well). Followup to #3413 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3432:92,test,test,92,https://root.cern,https://github.com/root-project/root/pull/3432,1,['test'],['test']
Testability,"This is a cherry pick of the `loader.py` in cppyy-backend version clingwrapper-1.7.2, which has the new treatment of `CLING_STANDARD_PCH` and its setting to `'none'` to prevent the PCH check by Cppyy. It should fix the new test failures that appeared last night in the experimental PyROOT builds. https://epsft-jenkins.cern.ch/job/root-exp-pyroot/76/. A complete update will come for the three packages of Cppyy once the functionality of this PR:; https://github.com/root-project/root/pull/3579; is merged into `TCling`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3581:223,test,test,223,https://root.cern,https://github.com/root-project/root/pull/3581,1,['test'],['test']
Testability,This is a collection small things I found while working on HistFactory models -- the last batch before getting to the actual HistFactory stuff. @guitargeek Maybe the last commit is interesting for some things you tweaked? (Only in tests or debug builds of course),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8099:231,test,tests,231,https://root.cern,https://github.com/root-project/root/pull/8099,1,['test'],['tests']
Testability,This is a continuation of https://github.com/root-project/root/pull/3858/ with some fixes for the failing tests:. - projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_cintrun; - projectroot.roottest.cling.functionTemplate.roottest_cling_functionTemplate_testcint; - projectroot.roottest.python.basic.roottest_python_basic_overload; - projectroot.roottest.python.cpp.roottest_python_cpp_advanced,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3911:106,test,tests,106,https://root.cern,https://github.com/root-project/root/pull/3911,1,['test'],['tests']
Testability,"This is a copy of #6300, where one commit has been removed. Testing now if windows is happy without the commit.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6323:60,Test,Testing,60,https://root.cern,https://github.com/root-project/root/pull/6323,1,['Test'],['Testing']
Testability,"This is a direct fixup to commit https://github.com/root-project/root/commit/faa42a17e3614efbd97a91194243157b77e74fde. That commit tried to make; it possible to use also variable clones as integration variables, but it; failed to cover the case where the integration variable is only an; indirect server of the integrated function. This was because; `valueClients()` used for the graph traversal was still called on the; clone, not the variable in the actual computation graph of the; integrated function. This commit fixes this by passing the correct variable to; `unmarkDepValueClients` to begin with. A unit test for this case is also implemented. As such, this PR is part of the series of PRs that redesigned the; RooRealIntegral client-server interface:. * https://github.com/root-project/root/pull/11597; * https://github.com/root-project/root/pull/11619; * https://github.com/root-project/root/pull/11662. A second commit in this PR makes less tests in RooFitCore depend on RooFit,; using the RooWorkspace factory. This reduces the time of increamental builds; where one changes the RooFit library, because the RooFitCore tests don't need; to be rebuilt.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11783:611,test,test,611,https://root.cern,https://github.com/root-project/root/pull/11783,3,['test'],"['test', 'tests']"
Testability,"This is a draft pull request to document the work in progress and to have a platform for discussion. The goal of this PR is to add two new verbosity levels for the logging of Minuit2, ""Warning"" and ""Debug"", which turn the formerly compile-time options to enable increased logging output into run-time options. Follows the proposal in #6421",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6705:164,log,logging,164,https://root.cern,https://github.com/root-project/root/pull/6705,2,['log'],['logging']
Testability,"This is a fix for ROOT-7121. If a cache is updated in RooVectorDataStore and the cache has more than 1000 elements to be updated, an array on the stack will overrun and smash the stack. roofit will therefore crash. Solution: RooVectorDataStore uses a std::vector instead of an array[1000] to hold the pointers to the cache elements. Comments on the speed of the fix:; Using a std::vector placed on the stack (mimicking the original implementation), the fits would get slower. Therefore I added the vector as a member of RooVectorDataStore. This saves the time of constantly having to reallocate the vector. I tested with my (private) workspace: The crash is fixed. Unfortunately, I cannot provide this workspace.; To give a more meaningful test for you guys, I ran all the roofit/roostats tutorials and diffed the logs to check if roofit gives the same results. The diffs are attached. Apart from out-of-order execution and time measurements, there is no difference.; From the time measurements you can also see that the fixed version is not slower. [tutorials_roofit.diff.txt](https://github.com/root-mirror/root/files/56528/tutorials_roofit.diff.txt); [tutorials_roostats.diff.txt](https://github.com/root-mirror/root/files/56529/tutorials_roostats.diff.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/115:609,test,tested,609,https://root.cern,https://github.com/root-project/root/pull/115,3,"['log', 'test']","['logs', 'test', 'tested']"
Testability,"This is a fix for ROOT-7121. If a cache is updated in RooVectorDataStore and the cache has more than 1000 elements to be updated, an array on the stack will overrun and smash the stack. roofit will therefore crash. Solution: RooVectorDataStore uses a std::vector instead of an array[1000] to hold the pointers to the cache elements. Comments on the speed of the fix:; Using a std::vector placed on the stack (mimicking the original implementation), the fits would get slower. Therefore I added the vector as a member of RooVectorDataStore. This saves the time of constantly having to reallocate the vector. I tested with my (private) workspace: The crash is fixed. Unfortunately, I cannot provide this workspace.; To give a more meaningful test for you guys, I ran all the roofit/roostats tutorials and diffed the logs to check if roofit gives the same results. The diffs are attached. Apart from out-of-order execution and time measurements, there is no difference.; From the time measurements you can also see that the fixed version is not slower. [tutorials_roofit.diff.txt](https://github.com/root-mirror/root/files/56546/tutorials_roofit.diff.txt); [tutorials_roostats.diff.txt](https://github.com/root-mirror/root/files/56547/tutorials_roostats.diff.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/116:609,test,tested,609,https://root.cern,https://github.com/root-project/root/pull/116,3,"['log', 'test']","['logs', 'test', 'tested']"
Testability,"This is a follow up on https://github.com/root-project/root/pull/8694, implementing the requests made in the PR review. More details in the commit messages. Turning some observables into parameters in the GradMinimizer.BranchingPDF test should not reduce the coverage of the test, because for the minimizer the model actually gets more complex where there are more parameters.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8940:232,test,test,232,https://root.cern,https://github.com/root-project/root/pull/8940,2,['test'],['test']
Testability,"This is a followup to 5e424e4, where the Python finding was moved into `SearchInstalledSoftware.cmake`. However, what I missed is that there was a check in `RootBuildOptions` that disabled PyROOT by default if Python is not found, which is now not the case at that point! Therefore, ROOT builds won't have PyROOT by default anymore, which is a bad mistake. Fortunately, the check is entirely redundant and this commit suggests to remove it. There is already a check in `SearchInstalledSoftware` where PyROOT (and `tmva-pymva`) are disabled when the Python development headers where not found. Also, this kind of logic to conditionally change the defaults it bad because it doesn't go well with the ""fail on missing"" paradigm (if `fail-on-missing` is enabled).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15471:612,log,logic,612,https://root.cern,https://github.com/root-project/root/pull/15471,1,['log'],['logic']
Testability,"This is a followup to commit 47c250898f3. The new algorithm to figure out the servers of a RooRealIntegral could get very expensive for large computation graphs, as seen with the ATLAS Higgs combinaiton. The problem was that there was a loop over an arguments clients for each argument in the computation graph. In this commit, loop is replaced by another loop over the computation graph in which one iterates only over the servers of the arguments that depend on the integration variables. I think this logic is even more intuitive to understand as well. I learned also that iterating over clients is never a good idea, because while the number of servers is well defined, there can be arbitrary many clients, making the performance very unpredictable. It was verified with flamegraphs that the performance of the likelihood creation for the ATLAS Higgs combinaiton model is now again identical to the state before commit 47c250898f3.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11619:504,log,logic,504,https://root.cern,https://github.com/root-project/root/pull/11619,1,['log'],['logic']
Testability,"This is a general refactoring of the class test/stressMathMore.cxx.; It involves using Google test for assertions, test fixtures, and general; refactoring of the code. Ping @lmoneta",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/586:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/586,4,"['assert', 'test']","['assertions', 'test']"
Testability,This is a hack to make C++17 builds on macOS pass all tests. Fixes #12003,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12864:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/12864,1,['test'],['tests']
Testability,"This is a new test that got introduced with eb7d8190ba3. Unfortunately, it didn't pass in the nightlies on Windows 10 x86 Debug, so it needs to be disabled on Windows.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15532:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/15532,1,['test'],['test']
Testability,"This is a partial, but long-overdue modernisation of RooDataHist. Instead of accessing members in array or vectors, it was using the convoluted logic of:; - I need the event weight of event `i`.; - So I have to load the coordinates(!) of `i` by calling `get(i)`.; - This has the side effect of writing the weight that belongs to `i` into the mutable member `_curWgt` or similar.; - To retrieve the weight, I can now call `weight()`. This obviously creates problems and might be slow, so the overwriting of such internal buffers was removed to a large extent. Many things can now be retrieved by index (`weight(i)` for example), and many functions don't have side effects, any more. Further:; - Remove lots of unnecessary mutable members from RooDataHist/RooVectorDataStore.; - Remove side effects from many of RooDataHist's functions.; - Implement getters that don't rely on setting the active bin.; ""h.get(binNumber); h.weight() --> h.weight(binNumber)"" etc.; - Remove useless members such as _curWeight. Those are replaced by; a lookup in the weight vectors.; - Implement retrieval of bin coordinates and weights in batches.; - Sort functions that rely on the presence of side effects into a; deprecated section for doxygen.; - Fix docstrings of many functions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6718:144,log,logic,144,https://root.cern,https://github.com/root-project/root/pull/6718,1,['log'],['logic']
Testability,"This is a problem for the cxxmodules build, as can be seen [here](http://cdash.cern.ch/testDetails.php?test=49835249&build=552849).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2499:87,test,testDetails,87,https://root.cern,https://github.com/root-project/root/pull/2499,2,['test'],"['test', 'testDetails']"
Testability,"This is a pull request for the development of PyTorch Interface in TMVA leveraging the PyMVA module. Feel free to comment and share feedback. I'm also maintaining a [blog](https://anirudhdagar.github.io/gsoc/) for updating my progress and sharing some insights about my project. # Progress. ## Header; - [x] Add Initial Structure for MethodPyTorch header file. ## Class MethodPyTorch; - [x] Implement the basic outline of the MethodPyTorch Class.; - [x] Implement the DeclareOptions methods.; - [x] Implement ProcessOptions methods.; - [x] Implement SetupTorchModel method.; - [x] Implement train methods. (Done); - [x] Implement simple basic structure for training; - [x] Add ability to load code from users; - [x] Convert numpy based dataloaders in TMVA to PyTorch dataloaders; - [x] Use default (optional optimizer SGD); - [x] Add savebest model; - [x] Add scheduler; - [x] Implement Validation; - [x] Add model prediction function loading ability; - [x] Implement user code ability; - [x] Implement helper function. ## Tests; - [x] Add testPyTorchClassification.C; - [x] Add generatePyTorchModelClassification.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchMulticlass.C; - [x] Add generatePyTorchModelMulticlass.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added.; - [x] Add testPyTorchRegression.C; - [x] Add generatePyTorchModelRegression.py; - [x] Load, Train model and test all the parameter arguments; - [x] Verify response after model prediction function is added. ## GPU; - [x] Make GPU Compatible (Require GPU for testing). ## Tutorials; These are implemented in #6273. ## Documentation; - [x] Improve docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5757:1023,Test,Tests,1023,https://root.cern,https://github.com/root-project/root/pull/5757,8,"['Test', 'test']","['Tests', 'test', 'testPyTorchClassification', 'testPyTorchMulticlass', 'testPyTorchRegression', 'testing']"
Testability,"This is a rebase and combination of the PRs #303 #314 #315. - Refactor PyRandomForest, PyGTB, PyAdaBoost; - Add variable ranking to these classifiers; - Add unit-tests for the sklearn classifiers; - Add unit-test for PyKeras multiclass classification; - Move `GetMvaValues` implementation from base class to method to stay independent from sklearn. You can test the changes with `ctest -V -R PyMVA`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/343:162,test,tests,162,https://root.cern,https://github.com/root-project/root/pull/343,3,['test'],"['test', 'tests']"
Testability,"This is a request for backport of https://github.com/root-project/root/pull/7035; to 6-22 patches because of this ClassDef change:; ` ClassDef(TF1, 11) // The Parametric 1-D function` (previous was 10); which we are checking in this test:; https://github.com/cms-sw/cmssw/blob/master/DQMServices/Components/test/testSchemaEvolution.cpp#L44; and should have one or the other version, and we better use this fix in 6-22 anyway.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7193:233,test,test,233,https://root.cern,https://github.com/root-project/root/pull/7193,3,['test'],"['test', 'testSchemaEvolution']"
Testability,"This is a simplification of Snapshot's logic itself and a small performance optimization as we don't invoke the interpreter separately for each Snapshot call but we now take advantage of the same machinery that's already used by all other actions (and that merges all code to be jitted together). This PR fixes the Snapshot side of [ROOT-9790](https://sft.its.cern.ch/jira/browse/ROOT-9790), ""Lazy jitting of Cache and Snapshot"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6585:39,log,logic,39,https://root.cern,https://github.com/root-project/root/pull/6585,1,['log'],['logic']
Testability,This is a temporary measure in the context of the large-scale testing of RNTuple with the CERN IT department.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15385:62,test,testing,62,https://root.cern,https://github.com/root-project/root/pull/15385,1,['test'],['testing']
Testability,This is a test to trigger the CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14653:10,test,test,10,https://root.cern,https://github.com/root-project/root/pull/14653,1,['test'],['test']
Testability,This is a testing PR to unveil all other possible remaining time bombs; in TMVA that blow off once some requirements are installed.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15306:10,test,testing,10,https://root.cern,https://github.com/root-project/root/pull/15306,1,['test'],['testing']
Testability,"This is a updated pull request from #59 The same experiments have been run and performance results are shown here:. | Algorithm | compression(write) | decompression(read) | Compressed File Size |; | --- | --- | --- | --- |; | zlib | 11.74 MB/s | 131.06 MB/s | 181 MB |; | lzma | 0.86 MB/s | 17.36 MB/s | 157 MB |; | lz4 | 5.22 MB/s | 143.81 MB/s | 221 MB |. The following performance is from the root file @pcanal's ticket (https://root.cern.ch/files/CMS_7250E9A5-682D-DF11-8701-002618943934.root). The file is 1.9 GB large, and I tried to decompressed it and it seems its original size is 6.4 GB. The following compression/decompression speeds are calculated by dividing 6.4 GB by the time each test run. @bbockelm , we could discuss implementation details of my tests tomorrow. . | Algorithm | compression(write) | decompression(read) | Compressed File Size |; | --- | --- | --- | --- |; | zlib | 15.83 MB/s | 63.23 MB/s | 1.6 GB |; | lzma | 1.28 MB/s | 22.62 MB/s | 1.2 GB |; | lz4 | 8.32 MB/s | 66.53 MB/s | 1.8 GB |",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/81:696,test,test,696,https://root.cern,https://github.com/root-project/root/pull/81,2,['test'],"['test', 'tests']"
Testability,"This is a very quick fix in order to test the distributed RDF with RNTuples. It was locally tested with some tutorials and AGC, but no tests are added yet (to be done soon).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14846:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/14846,3,['test'],"['test', 'tested', 'tests']"
Testability,"This is a workaround for https://bugs.python.org/issue21591 which; affect Python 2 versions before 2.7.9. This includes Python 2.7.5; which is the Python 2 version on RHEL/CentOS 7. The packaging of root on EPEL 7 with the new pyroot implementaion fails with the followin error:; ```; + /usr/lib/rpm/brp-python-bytecompile /usr/bin/python 1; Bytecompiling .py files below /builddir/build/BUILDROOT/root-6.22.00-1.el7.x86_64/usr/lib64/python2.7 using /usr/bin/python2.7; Compiling /builddir/build/BUILDROOT/root-6.22.00-1.el7.x86_64/usr/lib64/python2.7/site-packages/ROOT/_numbadeclare.py ...; SyntaxError: unqualified exec is not allowed in function 'inner' it is a nested function (_numbadeclare.py, line 198); error: Bad exit status from /var/tmp/rpm-tmp.RNRIsm (%install); ```. ### test1.py. This is a minimal reproducer of the existing code:; ```python; def test():; def inner():; glob = dict(globals()); glob['a'] = 123; exec('print(a); b = 456', glob, locals()); print(locals()['b']); return inner(); test(); ```; This produces the expected output with Python 3:; ```; $ python3 test1.py ; 123; 456; ```; But when using Python 2 it reproduces the error from the root build:; ```; $ python2 test1.py ; File ""test1.py"", line 5; exec('print(a); b = 456', glob, locals()); SyntaxError: unqualified exec is not allowed in function 'inner' it is a nested function; ```. ### test2.py . If the Python 2 syntax is used for the exec command:; ```python; def test():; def inner():; glob = dict(globals()); glob['a'] = 123; exec('print(a); b = 456') in glob, locals(); print(locals()['b']); return inner(); test(); ```; Then Python 3 fails as expected since this syntax is not valid Pathon 3:; ```; $ python3 test2.py ; Traceback (most recent call last):; File ""test2.py"", line 8, in <module>; test(); File ""test2.py"", line 7, in test; return inner(); File ""test2.py"", line 5, in inner; exec('print(a); b = 456') in glob, locals(); File ""<string>"", line 1, in <module>; NameError: name 'a' is not defined; `",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5960:862,test,test,862,https://root.cern,https://github.com/root-project/root/pull/5960,2,['test'],['test']
Testability,This is a workaround for the linker assert when building with gcc on osx.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/68:36,assert,assert,36,https://root.cern,https://github.com/root-project/root/pull/68,1,['assert'],['assert']
Testability,"This is an adaptation of commit 6627da727b88ef70b74b7d87f274e0a21a9cea45 Fixes https://github.com/root-project/root/issues/13698, a problem with the new C++ headers from the new macOS SDK. # This Pull request:; Unfortunately the directory structure of our llvm changed, and it was not possible to cherry-pick. ## Changes or fixes:. ## Checklist:. - [v] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13698",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13722:353,test,tested,353,https://root.cern,https://github.com/root-project/root/pull/13722,1,['test'],['tested']
Testability,"This is an attempt to add xRooFit to ROOT in a way that means the files from xRooFit do not need to be modified but the built code will not interfere with users who build different xRooFit on top of ROOT. I tested this locally and it compiled on my mac with the upstream master, and I was able to compile xRooFit locally on top of it and a few quick tests suggested both were usable. Creating the PR to see what the CI makes of it ....",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11851:207,test,tested,207,https://root.cern,https://github.com/root-project/root/pull/11851,2,['test'],"['tested', 'tests']"
Testability,"This is an extension allowing the VMC package to run a simulation; with multiple different engines at a time. Tracks can be transferred; among engines during a simulation run based on conditions specified by; the user. Important notes on the extensions:; 1) This extension preserves backward-compatibility in the sense that; user code relying on the former version of VMC is still running; with the extended version. Was tested with GEANT3_VMC@v2-6 and; GEANT4_VMC@v3-6-p1.; 2) A shared simulation is only possible when TGeo is used for geometry; construction and navigation.; 3) A TMCManager singleton object is responsible for handling multiple; engines and can be obtained on request calling; TVirtualMCApplication::RequestManager() during construction of the; user application class.; 4) The introduced TMCParticleStatus objects hold additional; information to keep track of properties when a track is transferred; between engines.; 5) When a track is interrupted in one engine to be transferred to; another, the geometry state is cached in the form of a; TGeoBranchArray object. It will be used to initialize the navigator; when this track is picked up for further transport in the next; engine. This is especially useful/required when a track is; transferred at a volume boundary in order to be picked up in the; entered volume and not in the one just left. This is a main reason; why geometry management is forced to be done via TGeo. A more comprehensive introduction concerning the usage and; implementation in the user code can be found in the; montecarlo/vmc/README.md. Further note:; This commit also applies the clang format to the modified and new; files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3513:421,test,tested,421,https://root.cern,https://github.com/root-project/root/pull/3513,1,['test'],['tested']
Testability,"This is an update to PR #40 that includes:; - a rebase with all CMA-ES commits at the tip of master (as of 04/17/2017); - a set of small fixes as requested by @vgvassilev . As a reminder, this PR fetches, builds and wraps https://github.com/beniz/libcmaes/ with ROOT. This PR builds ROOT with CMA-ES support and I've been able to run some of the tests, indicating that it is working fine. **Issues**; However, some caveats remain, on which help is required, at the moment. - [ ] `build/include/libcmaes/cmaes.h` and `build/include/Eigen` are not properly passed to the compiler at build time. I cannot find how to do it properly. At the moment I am using symlinks as a temporary hack (see how to build below). - [ ] To access the inner option of the CMA-ES Minimizer, I was using code similar to; ```C++; ROOT::Math::IOptions &opts = ROOT::Math::MinimizerOptions::Default(fitter);; opts.SetIntValue(""lambda"",lambda);; ```; Code above now appears to fail with errors such as:; ```; root [0] .L tutorials/fit/cmaesFitBench.C++g; Info in <TUnixSystem::ACLiC>: creating shared library /home/beniz/research/siminole/dev/tmp/root/build/./tutorials/fit/cmaesFitBench_C.so; In file included from input_line_11:9:; ././tutorials/fit/cmaesFitBench.C:58:16: error: no type named 'IOptions' in namespace 'ROOT::Math'; ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);; ~~~~~~~~~~~~^; ././tutorials/fit/cmaesFitBench.C:58:45: error: no member named 'MinimizerOptions' in namespace 'ROOT::Math'; ROOT::Math::IOptions *opts = ROOT::Math::MinimizerOptions::Default(fitter);; ~~~~~~~~~~~~^; Error in <ACLiC>: Dictionary generation failed!; ```; Help is needed to fix the above. **How to build**; ```; cd build; cmake ../ -Dminuit2=on -Dtesting=on -Dlibcmaes=on; make; ```; The build will fail because of the header issue mentioned above, so do:; ```; cd include; ln -s eigen3/Eigen .; ln -s eigen3/unsupported .; cd ..; make; ```; You can then use the newly built ROOT and test that CMA-ES is",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/507:346,test,tests,346,https://root.cern,https://github.com/root-project/root/pull/507,1,['test'],['tests']
Testability,"This is another commit to clean RooFit of unneeded code and associated documentation. The RooRefCountList is only kept for IO backwards compatibility. From an IO point of view, it is equivalent to its parent class, the `RooLinkedList`. So we don't need to keep all the member function implementations. IN the one place where the `refCount()` member function is used in IO schema evolution rules, it now uses the `RooLinkedList` interface directly. This PR was tested by reading some old workspaces.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13501:460,test,tested,460,https://root.cern,https://github.com/root-project/root/pull/13501,1,['test'],['tested']
Testability,"This is base class for all text-based streamers like TBufferJSON, TBufferXML and TBufferSQL2. For all these classes dedicated list of I/O actions used for object streaming.; All data formats are preserved till now - all correspondent tests from roottest are working. Main motivation - decouple basic functionality from TBufferFile. . For the moment no changes done in TBufferFile, but as next step one can introduce intermediate TBufferImpl class, which will be base class for TBufferFile and TBufferText. There are many methods, which are similar and can be shared.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1488:234,test,tests,234,https://root.cern,https://github.com/root-project/root/pull/1488,1,['test'],['tests']
Testability,"This is based on @dpiparo 's work to parallelize `GetEntry`. The basic idea is, when we are flushing all active branches, we do each branch in parallel. We have to maintain mutual exclusion when interacting with the `TTree` or `TFile`, but we can parallelize the compression of the baskets (which is a significant amount of CPU time). Note the least satisfactory part of this work is having to use a mutex to access the byte-counters in `TTree`; this is because these fields are serialized and `std::atomic<>` is not serializable. Any hints as to how to get around this?. Setting `MainEvent.cxx` in the `test` sub-directory to use this (with LZMA as the compression algorithm), I get:. ```; RealTime=76.340815 seconds, CpuTime=131.770000 seconds; ```. @pcanal @Dr15Jones - this spun off from our discussion about CMSSW efficiency. It's really easy to parallelize `FlushBaskets` using a `tbb::task_group` that I later wait for. However, continuation-style programming is difficult here because `FlushBaskets` is called from deep callstacks. Further, there's a lot of state in the basket itself we'd need to unravel. Looking at stack traces for the sample `Event` program, the next most advantageous place to parallelize compression is here:. ```; #11 0x00007f00743e80fe in R__zipMultipleAlgorithm ; #12 0x00007f00729aec25 in TBasket::WriteBuffer ; #13 0x00007f00729b53f3 in TBranch::WriteBasket ; #14 0x00007f00729b5c95 in TBranch::Fill ; #15 0x00007f00729cb630 in TBranchElement::Fill; #16 0x00007f00729cb418 in TBranchElement::Fill ; #17 0x00007f00729cb418 in TBranchElement::Fill ; #18 0x00007f0072a063f3 in TTree::Fill; ```. The idea would be to make `WriteBuffer` kick off a separate task, but block `TBranch::Fill` (and a handful of other functions, such as anything that can change the branch's `TFile`) from being called until the `WriteBuffer` task was completed. Harder than this approach, but not impossible.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/277:604,test,test,604,https://root.cern,https://github.com/root-project/root/pull/277,1,['test'],['test']
Testability,This is causing `hadd` to ignore the compression options when merging RNTuples. We didn't catch this bug because the unit tests were bypassing TFileMerger and calling directly into RNTupleMerger. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16700:122,test,tests,122,https://root.cern,https://github.com/root-project/root/pull/16700,2,['test'],"['tested', 'tests']"
Testability,"This is done make the life of the developer easier when passing `nullptr` to the RooFit message logger. After all, just `nullptr` is much less verbose than the modern C++ code that had to be used so far (`static_cast<TObject*>(nullptr)`). It also often confused new contributors why `nullptr` could not be passed directly. All existing code was updated to not do the explicit casting to `TObject*` anymore. With this, we also avoid a lot of C-style casts in RooFit code. More info in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10546:96,log,logger,96,https://root.cern,https://github.com/root-project/root/pull/10546,1,['log'],['logger']
Testability,This is just for testing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9367:17,test,testing,17,https://root.cern,https://github.com/root-project/root/pull/9367,1,['test'],['testing']
Testability,"This is more practical, because most RooFit tests are already here and and different from when these tests were in `roottest`, it's also to exclude them if ROOT is not built with RooFit enabled. Technically independent of https://github.com/root-project/roottest/pull/909, but they go together. Closes https://github.com/root-project/root/issues/11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11610:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/11610,2,['test'],['tests']
Testability,This is mostly useful to assert that things worked as expected whenever RunGraphs is invoked.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13167:25,assert,assert,25,https://root.cern,https://github.com/root-project/root/pull/13167,1,['assert'],['assert']
Testability,"This is necessary because some of the pdf observables can be categories,; e.g. in the case of the RooSimultaneous. Since this problem was uncovered by a user when working with; RooSimultaneous, the reproducer of the original problem was turned into; a unit test in `testRooSimultaneous`. Link to original forum post:; https://root-forum.cern.ch/t/roofit-failed-to-create-nll-for-simultaneous-pdfs-with-multiple-range-names/49363. Should be backported to the 6.26 branch.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10256:257,test,test,257,https://root.cern,https://github.com/root-project/root/pull/10256,2,['test'],"['test', 'testRooSimultaneous']"
Testability,"This is not intended to enter master (as of now at least). I am sharing a patch to produce taskstream for RunTreeProcessorMT. The RLoopManager produces a raw data, that can very easily be given to this small program that does the magic:; ```py; import pandas as pd; samples = pd.read_csv('test.csv'). startTime = min(samples['StartTime']) # the earliest ; allEntries = sum(samples['EntriesProcessed']); samples['StartTime'] -= startTime; samples['EndTime'] -= startTime; samples['Duration'] = samples['EndTime'] - samples['StartTime']; samples['EntriesPercentProc'] = samples['EntriesProcessed']/allEntries*100. import altair as alt; import altair_saver. chart = alt.Chart(samples[['Slot','ThreadID','CoreID',; 'StartTime','EndTime','EntriesProcessed', 'EntriesPercentProc', 'Duration']]).mark_bar(; cornerRadiusTopLeft=2,; cornerRadiusTopRight=2,; cornerRadiusBottomLeft=2,; cornerRadiusBottomRight=2; ).encode(; x='StartTime',; x2='EndTime',; y='ThreadID',; tooltip=['Slot', 'CoreID', 'EntriesProcessed', 'EntriesPercentProc', 'Duration']; ).properties(width=1200).interactive(). chart.save('taskstream.html'); ```; Requirements are pandas, altair and altair_saver. Example resulting taskstream is in this draft PR: https://github.com/root-project/root/blob/2dffbaab2ef3c280cc1b5a98fe8123250353d35e/tutorials/dataframe/dashboard/taskstream.html. Any suggestions for improvements are welcome :)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11620:289,test,test,289,https://root.cern,https://github.com/root-project/root/pull/11620,1,['test'],['test']
Testability,"This is presumbaly a bit controversial. safeDeleteList remove elements in order in a RooAbsCollection,; starting with the ones that only have clients and no servers. This is a slow process, and takes 25% of CPU time on large workspace; manipulation workflows, as it takes place at each workspace::import; call. It can also lead to slow ~RooWorkspace. The point is, I don't think this logic is needed at all.; ~RooAbsArg takes care of properly breaking all the client-server links,; both uplinks and downlinks, for every object. I couldn't find a logical; case where a crash would occur if the safeDeleteList logic were to be; removed. All RooFit tests pass after this patch. No problem for my heavy; workspace manipulation worflows either.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9685:384,log,logic,384,https://root.cern,https://github.com/root-project/root/pull/9685,4,"['log', 'test']","['logic', 'logical', 'tests']"
Testability,This is revised version of #1227.; Main change is the addition of an auto adjust mode that removes the need of a final adjust.; Still limited to the 1D case. The test failure in MemberComments is due to a missing update of MemberComments.ref .; A patch for roottest is available already. . Clang-format not applied this time.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1305:162,test,test,162,https://root.cern,https://github.com/root-project/root/pull/1305,1,['test'],['test']
Testability,This is solely for the purpose of testing https://github.com/root-project/roottest/pull/1030,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15704:34,test,testing,34,https://root.cern,https://github.com/root-project/root/pull/15704,1,['test'],['testing']
Testability,"This is the [recommended way](https://cmake.org/cmake/help/latest/command/cmake_policy.html#setting-policies-by-cmake-version) to set CMake policy settings. This means that policies created in versions prior to 3.9 will use the NEW setting by default, and newer policies will generate warnings. Set to 3.9 since that's the highest version currently tested in Jenkins. The Mac builds are generating a [warning](http://cdash.cern.ch/buildSummary.php?buildid=393980) (shown below) about policy CMP0068, so I'd like to test this; and move to the new policy mechanism once any problems that show up are fixed. ```; CMake Warning (dev):; Policy CMP0068 is not set: RPATH settings on macOS do not affect; install_name. Run ""cmake --help-policy CMP0068"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning. For compatibility with older versions of CMake, the install_name fields for; the following targets are still affected by RPATH settings:. LTO; libclang. This warning is for project developers. Use -Wno-dev to suppres-- Generating done; s it.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/958:349,test,tested,349,https://root.cern,https://github.com/root-project/root/pull/958,2,['test'],"['test', 'tested']"
Testability,"This is the current state of my experiment towards enabling finer-grained axis binning comparisons that ""axis configuration is exactly the same"" or ""axis configuration is different"". Once finished, this should enable switching between several histogram merging logics, including... - The current implementation, which is maximally fast but a bit too limited (it doesn't even allow the target histogram to grow to span the source histogram range if it is able to).; * Note that said implementation did already gain some superpowers in the current state of this PR, such as ability to merge when axis bin borders are _slightly_ different.; - More permissive implementations, which trade speed for generality. Here's what should IMO be added before this PR can be considered ready to merge:. - [x] Tests, lots of them. There's some very tricky code in there, even if it got clearer over time...; - [ ] Performance optimizations to reduce the impact of comparing axis binning, including...; * [ ] Not comparing every axis bin border when the axes are equidistant; * [ ] Reducing reliance on virtual function calls, especially in loops; * [ ] Possibly early algorithm exit as soon as complete conclusions are reached (but this will only benefit worst-case scenarios where axis binnings are very different, so...); - [ ] Demonstration of a more permissive histogram merging algorithm, to cross-check that the current binning comparison info adequately enables writing one as intended.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5725:261,log,logics,261,https://root.cern,https://github.com/root-project/root/pull/5725,2,"['Test', 'log']","['Tests', 'logics']"
Testability,"This is the final version of ""printValue"" discussion. We agreed that printValue interface should be altered to to_string; interface, which can be invoked `gInterpreter->to_string(XYZ)`. This patch contains:. - Implementation of to_string in Interpreter.cpp; - Re-Implementation of ClingPrintValue to use to_string because I changed to use Evaluate some time ago.; - Removing of RVec version of printValue which wasn't used at all; - Fix test/vecops_rvec.cxx, printValue is never supposed to be called by a normal user.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2698:437,test,test,437,https://root.cern,https://github.com/root-project/root/pull/2698,1,['test'],['test']
Testability,This is the log of the failed test:; ```; Test 38: TGraph2D 1 (TRI2 and P0).................................. OK; PDF output................................................ OK; GIF output................................................ OK; JPG output................................................ OK; PNG output................................................ OK; C file result...................................... 38 FAILED; Result = 1456040; Reference = 1463263; Error = 7223 (was 7000); ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/312:12,log,log,12,https://root.cern,https://github.com/root-project/root/pull/312,3,"['Test', 'log', 'test']","['Test', 'log', 'test']"
Testability,"This is to avoid output that doesn't indicate any problem and only makes; the test output harder to interpret. That's how the output of test 27 was before this commit:; ```; [#1] INFO:NumericIntegration -- RooRealIntegral::init(pxyz_Int[z|R]_Norm[x,y,z]_Int[y|R]) using numeric integrator RooIntegrator1D to calculate Int(y); Test 27 : Integration over non-rectangular regions...............OK; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8611:78,test,test,78,https://root.cern,https://github.com/root-project/root/pull/8611,3,"['Test', 'test']","['Test', 'test']"
Testability,"This is to avoid the following warning at configuration time when building ROOT with `cuda` enabled:. ```; CMake Warning (dev) at cmake/modules/SearchInstalledSoftware.cmake:18 (_find_package):; Policy CMP0146 is not set: The FindCUDA module is removed. Run ""cmake; --help-policy CMP0146"" for policy details. Use the cmake_policy command to; set the policy and suppress this warning. Call Stack (most recent call first):; cmake/modules/SearchInstalledSoftware.cmake:1705 (find_package); CMakeLists.txt:347 (include); This warning is for project developers. Use -Wno-dev to suppress it.; ```. Indeed, FindCUDA is deprecated since CMake 3.10:; https://cmake.org/cmake/help/latest/module/FindCUDA.html. The minimum required CMake version by ROOT is 3.16, so it should be no problem to use the suggested new alternative: call the enable_language() command with CUDA. Similar to `enable_language(Fortran)`, this is now done in `CheckCompiler.cmake`. Also, some logic of managing the configuration flags was moved from `SearchInstalledSoftware.cmake` to `RootBuildOptions.cmake` where it belongs. What remains in `SearchInstalledSoftware.cmake` is only the code to find the CuDNN library. Also, since CUDA is now registered as a language in CMake, we can use the official `CMAKE_CUDA_COMPILER` variable in `RootConfiguration.cmake` when invoking nvcc.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13437:956,log,logic,956,https://root.cern,https://github.com/root-project/root/pull/13437,1,['log'],['logic']
Testability,"This is to reduce the amount of code generated for every separate; RInterface instantiation. The PR should not otherwise modify any logic or functionality. I hoped this would reduce compile times of RDF-heavy code, but on an artificial benchmark the changes have little to no effect. This might be a good refactoring to have nonetheless. What do people think?. In order to minimize conflicts with other PRs, this must be merged after:. - https://github.com/root-project/root/pull/11314; - https://github.com/root-project/root/pull/11307; - https://github.com/root-project/root/pull/11306; - https://github.com/root-project/root/pull/11149",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11121:132,log,logic,132,https://root.cern,https://github.com/root-project/root/pull/11121,2,"['benchmark', 'log']","['benchmark', 'logic']"
Testability,This is to see which tests are failing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10419:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/10419,1,['test'],['tests']
Testability,"This is to test a potential fix to a recent regression in llvm wrt exposing symbols to the JIT from dlopened with RTLD_LOCAL libraries. This regression forced ROOT to revert this patch, adding one more patch to the list of llvm patches. We want to check if D33529 fixes our issue and make sure it goes in the next llvm release (coming soon). @marsupial, I failed to apply D33657 on top and D33658. They are marked as dependencies but it looks like they do not apply cleanly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/744:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/744,1,['test'],['test']
Testability,This is try to use Jupyter static location for JSROOT files.; Should be tested,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4497:72,test,tested,72,https://root.cern,https://github.com/root-project/root/pull/4497,1,['test'],['tested']
Testability,"This is two bugs, really: . 1) Inside the ""do while"" loop at line 243 of TTreeReaderArray.cxx, the ""parent"" string never changes which results in the loop never exiting. Changing line 243 from: ; `parent = parent.substr(0, posLastDot);`; to; `parent = parent.substr(0, posLastDotParent);`; will restore the original intent of the code, I believe. 2) In the same loop as above, for leaf names that include ""."" characters, this loop will never properly find the correct leaf name to initialize the array size. (The change above in part 1 will not fix this.); For example: If my array is named something like: ""a.b.c[d.e.f]"" where ""a.b.c"" is the array name and ""d.e.f"" is the name of array length int, the logic in the loop will never find the correct leaf size. One could rewrite the logic such that every combination of characters in between "".""'s are tried, but this would be a bit complicated and cumbersome. Instead... Proposed change: Add an overloaded function call for TTreeReaderArray for the user to specify the array-length leaf name:; `TTreeReaderArray<float> myArr(treeReader, ""arrayLeafName"", ""arrayLengthLeafName"")`. With this, the code can attempt the user supplied array length name before it tries to search through the full leaf name for the appropriate combination.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10611:703,log,logic,703,https://root.cern,https://github.com/root-project/root/issues/10611,2,['log'],['logic']
Testability,"This is very first prototype for testing and further development. Idea to scan geometry and create render data on C++ side, ; only final WebGL display implemented in web browser. Also will be test-case for OpenUI TableTree integration. One need specialized OData-like requests to show only visible part of geometry hierarchy. tutorials/eve7/viewer.C shows basic usage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3194:33,test,testing,33,https://root.cern,https://github.com/root-project/root/pull/3194,2,['test'],"['test-case', 'testing']"
Testability,"This is work done by Alex Saperstein, and ANL SULI who worked with me. While working on TTreeCache learning, our Summer Intern (Alex Saperstein) observed that for simple TTrees, the basket size optimization isn’t optimal for two reasons: 1) rounding down to 512 byte blocks 2) neglecting to accommodate for ROOT offsets stored in the baskets. As a result, e.g. with simple (constant size) float array branches the basket size is to small resulting in two baskets per auto-flush. The change would be pretty straight-forward: tree/tree/src/TTree.cxx. Line; -6583 newBsize = newBsize - newBsize%512;. Should become:; +6583 if (pass) { // only on the second pass so that it doesn't interfere with scaling; +6583 Int_t nevbuf = branch->GetBasket(0)->GetNevBuf();; +6583 newBsize = newBsize + (nevbuf \* sizeof(Int_t) \* 2); // make room for meta data; +6583 newBsize = newBsize - newBsize%512 + 512; // rounds up; +6583 }. Tests on simple data show that with this the baskets end up more appropriately sized so that all the auto-flush data fits.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/238:918,Test,Tests,918,https://root.cern,https://github.com/root-project/root/pull/238,1,['Test'],['Tests']
Testability,"This issue is just a reminder that we need to resolve this TODO:. https://github.com/root-project/root/blob/89776f40f6f9a0f1ea769ed86f8280696b85e01f/tree/dataframe/src/RNTupleDS.cxx#L288-L296. so that e.g. the following wrong usage errors out:. ```cpp; #include <ROOT/RNTuple.hxx>; #include <ROOT/RNTupleDS.hxx>; #include <ROOT/RDataFrame.hxx>. int main() {; {; auto m = ROOT::Experimental::RNTupleModel::Create();; auto x = m->MakeField<int>(""x"", 42);; auto r = ROOT::Experimental::RNTupleWriter::Recreate(std::move(m), ""n"",; ""f.root"");; r->Fill();; }. auto df = ROOT::Experimental::MakeNTupleDataFrame(""n"", ""f.root"");; df.Filter([] (std::string &x) { return !x.empty(); }, {""x""}).Count().GetValue();; }; ```. (on my machine the test above executes without crashes, but that's just luck)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10749:730,test,test,730,https://root.cern,https://github.com/root-project/root/issues/10749,1,['test'],['test']
Testability,This issue was reported here: https://sft.its.cern.ch/jira/browse/ROOT-9046; PaintLine as now the same logic as PaintPolyMarker to decide if a point; is in the range or not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1158:103,log,logic,103,https://root.cern,https://github.com/root-project/root/pull/1158,1,['log'],['logic']
Testability,"This line was introduced by commit 0f1f12931f in 2016, in what looks like an unrelated change. All ROOT tests pass after removing it. @Axel-Naumann unless you happen to remember why this was introduced, I will synchronize this to the monorepo and we get rid of another patch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13123:104,test,tests,104,https://root.cern,https://github.com/root-project/root/pull/13123,1,['test'],['tests']
Testability,"This little bug was already introduced a few years ago in 1ecd30e, and became apparent now that the vectorized evaluation is the default. The logic should be to clip all values to be >= 0. Closes #15694.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15702:142,log,logic,142,https://root.cern,https://github.com/root-project/root/pull/15702,1,['log'],['logic']
Testability,"This looks like a regression from https://github.com/root-project/root/commit/7a1cc8ffe576490b2f977ba2c262e10ec53a797a#diff-93558e500b17901f800fbb40a2c2fdfd6ee229077db63413bd4a91ee7ec66ea7. It seems like interpreter/llvm-project/llvm/tools/clang would not be a thing, while a following compilation error is observed with builtin_llvm=OFF:. In file included from interpreter/cling/lib/Utils/AST.cpp:12:; In file included from interpreter/llvm-project/clang/include/clang/AST/ASTContext.h:18:; interpreter/llvm-project/clang/include/clang/AST/ASTFwd.h:21:10: fatal error: 'clang/AST/DeclNodes.inc' file not found; #include ""clang/AST/DeclNodes.inc""; ^~~~~~~~~~~~~~~~~~~~~~~~~; 1 error generated. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14238:759,test,tested,759,https://root.cern,https://github.com/root-project/root/pull/14238,1,['test'],['tested']
Testability,"This makes it possible to create a pre-downloaded cache before running the tests, so that it is possible to run the tests in an environment without network access.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/404:75,test,tests,75,https://root.cern,https://github.com/root-project/root/pull/404,2,['test'],['tests']
Testability,"This makes the test `roottest-root-treeproxy-make` pass on macOS 13, where a proxy pulling in `pair<int,int>` was trying to include the (private) header `__bit_reference`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12890:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/12890,1,['test'],['test']
Testability,This makes the tests run a bit faster. A test case specifically; on jitting has been added. This should also solve a problem with exceptions thrown from; jitted code on M1.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9842:15,test,tests,15,https://root.cern,https://github.com/root-project/root/pull/9842,2,['test'],"['test', 'tests']"
Testability,"This may be useful for applications when to flush a cluster (group). Also a minor type fix of `RNTupleWriter::fUnzippedClusterSizeEst` (according to my current understanding), and moving the model creation into write scope in the `ntuple_storage` test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14120:247,test,test,247,https://root.cern,https://github.com/root-project/root/pull/14120,1,['test'],['test']
Testability,"This memory leak is demonstrated with the following ROOT macro:. ```; {; {; RooExpensiveObjectCache::instance(); // force the standard instance construction (otherwise created in factory method call); cout << ""make ws"" << endl;; RooWorkspace w(""combined"", ""combined"");; cout << ""factory method:"" << endl;; w.factory(""RooGaussian::gaus(x[-5,5],mean[0,-5,5],sigma[1,0.1,3])"");; w.writeToFile(""/tmp/test.root"");; cout << ""reading back"" << endl;; {; TFile f(""/tmp/test.root"");; RooWorkspace *w2 = f.Get<RooWorkspace>(""combined"");; std::cout << ""deleting w2"" << endl;; delete w2;; }; std::cout << ""deleting w"" << endl;; }; }; ```; along with a modification to `RooExpensiveObjectCache` to printout when an instance is being constructed or destructed. Before this fix the above then prints out (I annotated the output a bit):. ```; Processing test.C...; Created 0x12cb8cc68 <--- this is the static instance; make ws; Created 0x7ffee2baaab0 <--- the workspace's cache; factory method:; reading back; Created 0x7fcbc7b39008 <--- the read-back workspace's cache; Created 0x7fcbd45a0b70 <--- memory leaking cache; deleting w2; Destroyed 0x7fcbc7b39008; deleting w; Destroyed 0x7ffee2baaab0; root [1] .q; Destroyed 0x12cb8cc68; ```. After the fix caches are created and destroyed as expected:. ```; Processing test.C...; Created 0x1290a5c68; make ws; Created 0x7ffee623eab0; factory method:; reading back; Created 0x7f9bd8437408; deleting w2; Destroyed 0x7f9bd8437408; deleting w; Destroyed 0x7ffee623eab0; root [1] .q; Destroyed 0x1290a5c68; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12024:396,test,test,396,https://root.cern,https://github.com/root-project/root/pull/12024,4,['test'],['test']
Testability,"This might fix e.g. `-mmacosx-version-min=12.6` not being passed to ACLiC, causing linker warnings about incompatible deployment targets. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12139:203,test,tested,203,https://root.cern,https://github.com/root-project/root/pull/12139,1,['test'],['tested']
Testability,"This might or might not fix the failures at https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=ROOT-ubuntu1804-clangHEAD,SPEC=noimt/10051/testReport/junit/projectroot.tree.dataframe/test/gtest_tree_dataframe_test_dataframe_samplecallback/ , but it's anyway an improvement",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9047:166,test,testReport,166,https://root.cern,https://github.com/root-project/root/pull/9047,2,['test'],"['test', 'testReport']"
Testability,This missing include breaks Minuit2 standalone on MSVC. Can be tested as part of #1680.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1681:63,test,tested,63,https://root.cern,https://github.com/root-project/root/pull/1681,1,['test'],['tested']
Testability,This new release includes some improvements:; * Add support for pushforward- and pullback-style functions; * More supported constructs in forward and reverse mode; * Forward mode support for CUDA programs; * AD-based Floating Point Error Estimation Framework; * Integration with Enzyme. See more at: https://github.com/vgvassilev/clad/blob/v1.0/docs/internalDocs/ReleaseNotes.md. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11544:445,test,tested,445,https://root.cern,https://github.com/root-project/root/pull/11544,1,['test'],['tested']
Testability,"This patch adds `df.DefinePerSample`, a method that lets user define; new columns that are only updated per ""data-block"" rather than per; entry, where a ""data-block"" is made of several entries that have the; same data-block ID (e.g. that belong to the same TTree in a TChain). The data-block ID is passed as an argument to the callback, so that; quantities can be defined based on the sample being processed. Currently a jitted version is not available and RDataSources have; no way to hook into the mechanism (they get one data-block per task; with empty data-block ID). Support for these cases will be added by; later commits. This resolves #6745. This PR should make @stwunsch happy. To do:. - [x] test `RDataBlockID` with entry ranges; - [x] naming: `RDataBlockID -> RDataBlockInfo`? `DefinePerSample -> DefinePerDataBlock`?; - [x] add support for jitted `df.DefinePerSample(""myconstant"", ""rdfdatablock_.Contains(\""MC\"") ? 42. : 8."")`; - [ ] add release notes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8841:701,test,test,701,https://root.cern,https://github.com/root-project/root/pull/8841,1,['test'],['test']
Testability,"This patch adds a few IO benchmarks. Some of them were hosted by @amadio in an external repository. The nature of some of the benchmarks is to create multiple times files on disk. Running repeatedly, this can wear out machines disk drives. For that reason we extend the `TFileMerger` to work with `TFile*` directly. Passing an externally created `TFile*` allows us to pass a `TMemFile`. Being able to benchmark based on in-memory files gives us another advantage: we can emulate very fast drives or certain delay patterns.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1062:25,benchmark,benchmarks,25,https://root.cern,https://github.com/root-project/root/pull/1062,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,This patch affords trimming of redundant Jupyter notebook information contained within TCanvas .JSON objects. Specifically this includes the removing the list of TColors which reduces the size of a benchmark notebook (a compiled test notebook of Root Primer graphics) by up to 80% upon preliminary tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/760:198,benchmark,benchmark,198,https://root.cern,https://github.com/root-project/root/pull/760,3,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,This patch allows TFileMerger to work with externally created TFile-s. Being; able to control the creation of the TFile objects give us a chance to use; in-memory files. This is very helpful in benchmarking when we want to simulate; fast disks or we just want to avoid disk wearout.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1073:194,benchmark,benchmarking,194,https://root.cern,https://github.com/root-project/root/pull/1073,1,['benchmark'],['benchmarking']
Testability,"This patch came from Sean Benson and Wouter Verkerke, and is needed; to allow LHCb's P2VV-style analyses to have different time acceptances; for different categories of events. All tests continue to pass.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3776:181,test,tests,181,https://root.cern,https://github.com/root-project/root/pull/3776,1,['test'],['tests']
Testability,This patch fixes an assertion in the incremental builds.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3802:20,assert,assertion,20,https://root.cern,https://github.com/root-project/root/pull/3802,1,['assert'],['assertion']
Testability,"This patch fixes the histhistv7testUnit test, which was failing with the following errors:. 77: [ OK ] AxisTest.Irregular (0 ms); 77: [ RUN ] AxisTest.Labels; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/5054,8,"['Test', 'test']","['Test', 'test']"
Testability,"This patch is a complementary chenge to root-project/root@d2c0929e0d It will turn off the isOutOfDate checks for transient files with different size on disk. This is quite dangerous but we are supposed to control the build environment which prepares the distributable binaries. This should fix the cmssw issue:. StdDictionaries/src/DataFormatsStdDictionaries/a/DataFormatsStdDictionaries_all_def.xml; input_line_8:1:22: error: file '/usr/include/linux/falloc.h' from the precompiled header has been overridden; ^; rootcling: /build/cmsbld/jenkins/workspace/build-any-ib/w/BUILD/slc7_amd64_gcc820/lcg/root/6.17.01/root-6.17.01/interpreter/llvm/src/tools/clang/include/clang/Serialization/Module.h:72: clang::serialization::InputFile::InputFile(const clang::FileEntry*, bool, bool): Assertion `!(isOverridden && isOutOfDate) && ""an overridden cannot be out-of-date""' failed. The error tells us that `falloc.h` has different file size on the build machine and; on the distribution machine. We should probably rely on an environment variable; to turn off this diagnostic selectively and more the reponsibility if something goes; wrong to the distribution team. They should have better knowledge what is safe to; be ignored anyway. cc: @davidlange6, @oshadura, @smuzaffar",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4495:781,Assert,Assertion,781,https://root.cern,https://github.com/root-project/root/pull/4495,1,['Assert'],['Assertion']
Testability,"This patch is to verify if we really need to store identifiers that; are namespace in GlobalModuleIndex, which greatly increase the maximum; memory pressure. Send this to trigger ROOT's CI so we can have a full; test, and will be closed if the direction is wrong. **No need for code review or merge**. Signed-off-by: Jun Zhang <jun@junz.org>",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10969:212,test,test,212,https://root.cern,https://github.com/root-project/root/pull/10969,1,['test'],['test']
Testability,"This patch reimplemented signal handling in CMSSW. It avoids async-unsafe functions in signal handler. For reference, see the link https://github.com/bbockelm/cmssw/blob/stacktrace_handler_revisit/FWCore/Services/src/InitRootHandlers.cc. I tried this patch with some simple multi-thread test cases and it worked fine. Is there any complicated test cases I can run? I think this patch is not very ready to merge, but it achieved basic functions. Any criticisms are welcome.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/96:287,test,test,287,https://root.cern,https://github.com/root-project/root/pull/96,2,['test'],['test']
Testability,"This patch reimplements the broken patch in clang: ""Fix fwddecls of templates; with tmplt arg defauls coming from dictionaries (CMS / std::less). (#849)"". And partially reimplements:""Disable diags of dupe default args (func, templt); temporarily."". It also fixes the failing cling test Autoloading/AutoForwarding.C which; is visible when building root with -Dclingtest=On.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1268:281,test,test,281,https://root.cern,https://github.com/root-project/root/pull/1268,1,['test'],['test']
Testability,"This patch removes an unnecessary assert, which is probably a left-over from early debugging. Asserts are a way to document certain runtime assumptions that the code makes. They should be only used if the code cannot run correctly if the condition is not fulfilled. This assert here does not serve that purpose. Starting the minimization iteration with an invalid initial state is fine as far as the algorithm is concerned, because it does not make use of that property. Edit: This is not a cosmetic change, because this assert triggers an abort in one of the iminuit tests if the code is compiled in debug mode, while the test runs fine in release mode.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6762:34,assert,assert,34,https://root.cern,https://github.com/root-project/root/pull/6762,6,"['Assert', 'assert', 'test']","['Asserts', 'assert', 'test', 'tests']"
Testability,This patch should fix an assert in the incrementals.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3873:25,assert,assert,25,https://root.cern,https://github.com/root-project/root/pull/3873,2,['assert'],['assert']
Testability,"This prevents an assert (isClingShadowNamespace(D->getDeclContext()) && ""D not in a __cling_N5xxx namespace?""), function hideDecl, file /build/jenkins/night/LABEL/mac1014/SPEC/soversion/V/master/root/interpreter/cling/lib/Interpreter/DefinitionShadower.cpp, line 61",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5371:17,assert,assert,17,https://root.cern,https://github.com/root-project/root/pull/5371,1,['assert'],['assert']
Testability,"This properly initialize the thread pool manager, and fixes the crash in `gtest-tree-treeplayer-test-treeprocessormt` on Windows, but the Jira issue ROOT-10561 has still to be fixed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4947:96,test,test-treeprocessormt,96,https://root.cern,https://github.com/root-project/root/pull/4947,1,['test'],['test-treeprocessormt']
Testability,"This proposed new Strategy in minuit2 is the same migrad behaviour as Strategy=2 but with the following changes to the Hesse calculation:; * The step and g2 tolerances have been zeroed so that the 7 cycles are forced in the diagonal-term calculation. This was found to be necessary in cases where asimov datasets were used for the minimization and there were very few iterations for the approximate covariance to be determined from. ; * Central finite difference is used for mixed partial derivatives. This requires 3 extra function evaluations per derivative, but is necessary in the case of minima where there is high curvature (in the case of high stats) and the forward finite difference (default) behaviour leads incorrectly to a non-positive-definite covariance matrix; * Return the uncorrected covariance matrix, even if it is not positive definite. This useful for checking just how far from positive-definiteness the matrix is by being able to examine the eigenvalues. . Additionally, a lower bound on the precision allowed for the spread of eigenvalues of the ""hessian"" correlation matrix (computing a correlation matrix with the hessian as if it was a covariance matrix) was reduced from 1e-6 to 1e-12 (see MnHesse.cxx) ... it is not clear why 1e-6 was the lower bound previously, but current machine precision can beat that (I get locally 1e-8). I left a comment about whether this lower bound should be made configurable or not... This new strategy was tested with a model with high statistics (almost 50 million events) where the migrad minimization was successful but the hessian was being forced positive definite. With this new Strategy 3 the hessian is accurate and positive definite in all cases tested.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13109:1466,test,tested,1466,https://root.cern,https://github.com/root-project/root/pull/13109,2,['test'],['tested']
Testability,"This pull request addresses Pere's comments and adds some more changes like a simple test for VecCore functionality and better support for latest VecCore changes (from version 0.3.2 to 0.4.0). It should be ready for merging, but I'd like to see all tests pass first. I tested on my own machine with several combinations of `vc=ON/OFF`, `builtin_vc=ON/OFF` and `veccore=ON/OFF`, `builtin_veccore=ON/OFF`. It should all work properly. However, since external VecCore cannot find a builtin Vc, requesting `builtin_vc=ON` and `veccore=ON` will trigger `builtin_veccore=ON` automatically. Please feel free to to make more suggestions for extra changes if necessary.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/497:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/497,3,['test'],"['test', 'tested', 'tests']"
Testability,"This pull request adds RField support for `std::pair<T1, T2>` (see details below). This PR supersedes #8103 (many thanks to @mxxo for the prototype implementation). ## Changes or fixes:; - Add `RPairField` class that represent a type-erased RField of `std::tuple<T1, T2>`. This class inherits from `RRecordField`.; Offsets to the `first` and `second` members are specified manually, either via `offsetof()` (for `RField<std::pair<T1, T2>>`), or using TClass for the type-erased `RPairField`.; - Update `doc/specifications.md`. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR is a follow-up of: #10631. This PR fixes #10324.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10635:548,test,tested,548,https://root.cern,https://github.com/root-project/root/pull/10635,1,['test'],['tested']
Testability,"This pull request adds [VecCore](https://gitlab.cern.ch/VecGeom/VecCore) external project and build options to ROOT. Some comments:. Vc is used by VecCore, and since it is not relocatable, it must be built by the VecCore build system in order to avoid the situation in which VecCore finds a broken temporary installed version of Vc in ROOT's `${CMAKE_BINARY_DIR}`. It is perfectly fine to use a builtin VecCore with an externally installed Vc, however. Ideally, though, both should be externally installed. When both are enabled as builtins, they will get installed at the end along with ROOT into the final prefix, with correct configurations. I can not test the build on ARM, please let me know if Jenkins shows any failures. @xvallspl Since you have been using VecCore within ROOT, could you please try this branch out? I did not find any code currently in ROOT that uses VecCore. I've marked this as work in progress to be able to make sure everything is ok prior to merging.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/393:655,test,test,655,https://root.cern,https://github.com/root-project/root/pull/393,1,['test'],['test']
Testability,"This pull request adds `std::tuple<...>` RField support (see notes below). Follow-up PR of #10631. ## Changes or fixes:; - Amend `RRecordField` offsets computation: account for padding inserted before each member to comply with the alignment requirements of the type.; - Add `std::tuple` RField support.; ISO C++ does not guarantee neither specific layout nor member names for `std::tuple`.; Therefore, for the type-erased `RTupleField`, we guess the offsets assuming that most implementations store it as a standard-layout type with members reversed w.r.t. the type list. A test has been added to check that this renders usable `RTupleField`s in all CI configurations, even when padding is added (see `char` members). ; **EDIT:** most implementations including libstdc++ (gcc), libc++ (llvm), and MSVC name members as `_0`, `_1`, ..., `_N-1`, following the order of the type list.; Use TClass to get their offsets; in case a particular `std::tuple` implementation does not define such members, an assertion will fail.; This fixes the issue of libc++ using a different member ordering w.r.t. other STL implementations (see failing test below).; - Update `specifications.md` accordingly. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #10632.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10652:575,test,test,575,https://root.cern,https://github.com/root-project/root/pull/10652,4,"['assert', 'test']","['assertion', 'test', 'tested']"
Testability,"This pull request adds a keybinding for Ctrl+Del to kill the next word. This keybinding is quite popular, thus desirable to have it in ROOT.; The change is equivalent to the GNU Readline keybinding:; ```bash; ""\e[3;5~"": kill-word; ```. This PR is part of a series to improve line editing at the prompt. See also: PRs #9753 and #10078. ## Changes or fixes:; - The `[3;5~` CSI was added in StreamReaderUnix.cpp. No additional changes required to StreamReaderWin.cpp due to the separation of `dwControlKeyState` and `wVirtualKeyCode`.; - Add Ctrl+Del key binding to `Editor::kCmdCutNextWord`. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10091:611,test,tested,611,https://root.cern,https://github.com/root-project/root/pull/10091,1,['test'],['tested']
Testability,"This pull request adds an intermediate buffering mode between ""normal ROOT IO"" and the prefetching system. When enabled, it will cache a remote file to the local disk (uses the same logic as prefetching to determine what is ""remote"") for as long as it is opened and automatically cleans up afterward. This is useful in cases where you want to hide the effects of network latency (for various use cases which work poorly with `TTreeCache`, such as when an unpredictable set of branches are used or non-sequential scans) but do not want to set aside a directory to use as a persistent cache or have a cache-unfriendly workflow. The approach has been ported from CMSSW (there, it is called `lazy-download`) where it has been in use for several years.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/146:182,log,logic,182,https://root.cern,https://github.com/root-project/root/pull/146,1,['log'],['logic']
Testability,"This pull request adds support for the LZ4 compression algorithm (https://code.google.com/p/lz4/). The code is BSD-licensed. The pull-request includes a source tarball (allowing a ""builtin_lz4"" option in CMake analogous to ""builtin_lzma""). I am unable to test this on Windows currently. The LZ4 algorithm focuses on decompression speed while sacrificing compression ratio. Compression level < 4 uses the ""LZ4 compression"" algorithm while compression level >= 4 uses ""LZ4HC"" (HC = high compression) variant. LZ4HC is comparable to zlib in speeds, but has approximately 20% larger file size. To evaluate, I use the Event executable in the test/ directory. I extend this to allow the compression algorithm be specified via CLI. Example invocation:. time ./Event 4000 6 99 1 1000 4; time ./Event 4000 4 99 0 1000 4. Here, the CLI arguments are:; - 1: Number of events (4000); - 2: Compression ratio (6); - 3: Split level (99); - 4: 1 for write, 0 for read.; - 5: Number of tracks per event (1000).; - 6: Compression algorithm (1 = zlib, 2 = lzma, 4 = lz4. 3 is the deprecated zlib-like algorithm). I extended MainEvent.cxx to include TTreePerfStats information, which gives us access to the compression-time-only rates. Performance results (testing on a 2.6GHz Intel Westmere E56xx-based VM) summary:. LZ4HC compression:; - File size: 231MB; - 14.7MB/s CPU time for writing. ZLIB level-6 compression:; - File size: 189MB; - 10.5MB/s CPU time for writing.; Summary: LZ4HC compression resulted in a file 20% larger. Compression time was 44% faster. LZMA level-6 compression:; - File size: 163MB; - .62MB/s CPU time for writing.; Summary: LZMA compression resulted in a file 13% smaller. Compression time was 16x slower than ZLIB level-6. LZ4 decompression:; - 233MB/s CPU time for decompression only.; - 189MB/s CPU time for reading. ZLIB decompression:; - 118MB/s CPU time for decompression only; - 104MB/s CPU time for reading.; Summary: LZ4 decompression was 97% faster, resulting in 81% faster reading f",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/59:255,test,test,255,https://root.cern,https://github.com/root-project/root/pull/59,2,['test'],['test']
Testability,This pull request adds the Concat Operator in TMVA SOFIE. - [x] Add the ROperator_Concat ; - [x] Add functionality to parse Concat operator from ONNX files; - [ ] Add functionality to parse Concat opreator from Keras' `.h5` files; - [ ] Add functionality to parse Concat operator from PyTorch's `.pt` files; - [ ] Add tests for Concat operator; - [x] ONNX tests; - [ ] PyTorch Tests; - [ ] keras tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9311:318,test,tests,318,https://root.cern,https://github.com/root-project/root/pull/9311,4,"['Test', 'test']","['Tests', 'tests']"
Testability,"This pull request adds the `EmptyBase` class to CustomStructLinkDef.h (required now by the `ntuple_modelext` test). It also renames the class to `EmptyStruct`, which probably makes more sense now. This should fix the `ntuple_modelext` on Windows, that was complaining due to; ```; unknown file: error: C++ exception with description: ""RField: no I/O support for type EmptyBase; At:; _cdecl ROOT::Experimental::RClassField::RClassField(class std::basic_string_view<char,struct std::char_traits<char> >, class std::basic_string_view<char,struct std::char_traits<char> >, class TClass *) [C:\ROOT-CI\src\tree\ntuple\v7\src\RField.cxx:1117]; "" thrown in the test body.; ```. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12979:109,test,test,109,https://root.cern,https://github.com/root-project/root/pull/12979,3,['test'],"['test', 'tested']"
Testability,"This pull request adds the attribute `uint64_t iod_flags`, introduced in DAOS v2.0, to the definition of `daos_iod_t` in our mock implementation of libdaos for development. See: https://docs.daos.io/v2.0/doxygen/html/structdaos__iod__t.html. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11683:125,mock,mock,125,https://root.cern,https://github.com/root-project/root/pull/11683,2,"['mock', 'test']","['mock', 'tested']"
Testability,"This pull request applies a number of fixes after the merge or PR #5913 (see below). ## Changes or fixes:; - Fix issues with documentation generation on macOS. In particular: ; 1. Fix `mktemp` command lines to only use template `X`s at the end.; 2. Use `sysctl -n hw.ncpu` instead to get the number of available CPUs on Darwin.; 3. Move OS-dependent variable assignments to the `Makefile`; - Ensure `libs.C` is ACLiC'ed before `modifyClassWebpage.sh` runs. Specifically, `modifyClassWebpages.sh` might spawn many `modifyClassWebpage.sh` processes via `xargs -P`. In turn, `modifyClassWebpage.sh` depends on `libs.C` which is ACLiC'ed if to generate `libs_C.so` where required.; However, if `libs_C.so` does not exist, multiple processes might race to create it. Thus, ensure that the macro is ACLiC'ed before `modifyClassWebpage.sh` runs. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10930:860,test,tested,860,https://root.cern,https://github.com/root-project/root/pull/10930,1,['test'],['tested']
Testability,"This pull request applies some changes (see below) in the implementation of RRecordField in order to support `std::pair` and `std::tuple` fields (as follow-up PRs). ## Changes or fixes:; - Compute once the offset for each member in the `RRecordField` constructor and reuse this information in other member functions.; - Provide a constructor that takes the list of member offsets and corresponding C++ type. This is required for the implementation of `std::pair` and `std::tuple` fields. Make the private members protected.; - Given that `RRecordField` takes the ownership of the child fields passed in the `std::vector<std::unique_ptr<Detail::RFieldBase>> &itemFields`, provide also a constructor that takes a rvalue reference. ## Checklist:; - [X] tested changes locally. Follow-up PRs: support for `std::pair`; support for `std::tuple` fields.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10631:750,test,tested,750,https://root.cern,https://github.com/root-project/root/pull/10631,1,['test'],['tested']
Testability,"This pull request completes support for big-endian architectures in RNTuple. Specifically, prior to this PR, metadata was serialized to a machine-independent representation, but data pages were still using the native endianness of the CPU. ## Changes or fixes:; - RColumnElement.hxx: Add `CopyElementsBswap<N>()` that byteswaps and copies a number of `N`-size elements from a source buffer to a destination buffer. `N` may be either 16, 32, or 64.; - Provide a base class (`RColumnElementLE`) for columns whose on-storage representation is little-endian according to the v1 specification. The provided `Pack()` and `Unpack()` functions take care of swapping bytes if the target CPU is big-endian.; - Use little-endian on-storage representation for columns of type `std::{,u}int{16,32,64}_t`, `ClusterSize_t`, `float`, and `double`.; For single/double precision floating point numbers, IEEE-754 specifies the encoding but does not mandate a specific byte ordering; however, most architectures use the same endianness as for representing integers.; - Amend implementation of `RColumnElement<std::int64_t, EColumnType::kInt32>::{Pack,Unpack}()`.; - Provide packing / unpacking for `RColumnElement<RColumnSwitch, EColumnType::kSwitch>`, compliant to v1 binary format specification. ## Checklist:; - [X] tested changes locally; - [X] add unit tests; - [x] `RColumnElement<RColumnSwitch>` should implement `Pack()` and `Unpack()` for machine-independent representation.; - [x] revisit former implementation of `RColumnElement<std::int64_t, EColumnType::kInt32>`. Follow-up PR of: https://github.com/root-project/root/pull/10396. This PR fixes #10383.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10402:1299,test,tested,1299,https://root.cern,https://github.com/root-project/root/pull/10402,2,['test'],"['tested', 'tests']"
Testability,"This pull request extends `RPageSink` to allow for vector commit of sealed pages. The prototype of the new functions is as follows:; ```c++; virtual std::vector<RNTupleLocator> CommitSealedPageVImpl(std::span<RPageStorage::RSealedPageGroup> ranges);; void CommitSealedPageV(std::span<RPageStorage::RSealedPageGroup> ranges);; ```. These changes enable (parallel) vector writes in concrete backends, e.g. in DAOS. Derived classes that do not override the base implementation will see a sequence of calls to `CommitSealedPage()`. The first measurements of vector writes on DAOS based on this PR, indicate an improvement of _an order of magnitude_ in the write throughput. The refactor in this PR passes all the RPageSinkBuf tests. ## Changes or fixes:; - Add `CommitSealedPageV()` to the public interface of `RPageSink`. This function carries out a vector write of a number of sealed page ranges. Each range applies to a given columnId.; The default implementation of `CommitSealedPageVImpl()` sequentially calls `CommitSealedPageImpl()` for each page on each range, but derived classes can override it to provide an optimized implementation.; - Use `CommitSealedPageV()` in RPageSinkBuf. If a buffered column contains only sealed pages, commit the whole range; via `CommitSealedPageV()`.; - If all buffered columns consist solely of sealed pages, coalesce all pages to be committed in a single `CommitSealedPageV()` call that includes a sealed page range per column. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #10719.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10775:722,test,tests,722,https://root.cern,https://github.com/root-project/root/pull/10775,2,['test'],"['tested', 'tests']"
Testability,"This pull request fixes a defect in the implementation of `RColumn::AppendV()`, which resulted in `FlushShadowWritePage()` not being called in certain circumstances. This in turn resulted in a [failed assertion](https://github.com/root-project/root/blob/master/tree/ntuple/v7/inc/ROOT/RColumn.hxx#L87) in the next call to `SwapWritePagesIfFull()`:; ```; Fatal: fWritePage[otherIdx].IsEmpty() violated at line 87 of `/home/jalopezg/CERN/repos/root/tree/ntuple/v7/inc/ROOT/RColumn.hxx'; ```. Given that `RPage::GrowUnchecked()` affects the number of elements returned by `RPage::GetNElements()`, the main write page should only be grown after the check for flushing the shadow page. ## Checklist:; - [X] tested changes locally; - [X] `ntuple_storage` test has been updated accordingly against this bug. This PR fixes #12742.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12743:201,assert,assertion,201,https://root.cern,https://github.com/root-project/root/pull/12743,3,"['assert', 'test']","['assertion', 'test', 'tested']"
Testability,"This pull request fixes a misuse of the `TVirtualCollectionProxy` iterator interface. Specifically the `Next()` and `DeleteTwoIterators()` functions take a pointer to the iterator itself (not a pointer-to-pointer). The misuse was most likely due to the lack of proper documentation on the `TVirtualCollectionProxy` class. The documentation for this class should be thus updated in a follow-up PR. The issue was originally introduced in https://github.com/root-project/root/pull/12380 and first noticed by @Nowakus on March 13, when trying to write a `xAOD::DataVector<T>` into RNTuple. This PR should fix the observed misbehavior. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12542:652,test,tested,652,https://root.cern,https://github.com/root-project/root/pull/12542,1,['test'],['tested']
Testability,"This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. After this PR and https://github.com/root-project/root/pull/12853, the remaining tests that still fail are; ```; 1: Failed Tests (2):; 1: Cling :: CodeUnloading/AtExit.C; 1: Cling :: MultipleInterpreters/MultipleInterpreters.C; ```; , which seem to have a common underlying cause: child interpreters are unable to resolve symbols defined in the parent. @hahnjo, @vgvassilev, do you have time to take a look?; ; ## Changes or fixes:; - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`.; The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`; now defaults to 0 in `makeDefaultCompilationOptions()`.; - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`.; - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH.; Per ld(1) manual page: `By default, the new dynamic tags are not created.`; - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to; `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/12855,5,"['Test', 'test']","['Tests', 'tested', 'tests']"
Testability,"This pull request fixes a number of failures in cling tests. See below for the specific tests that are fixed by this PR. This is a backport of PR #12855.; ; ## Changes or fixes:; - SourceCall/ErrorMacro.C: the failure here is due to `diag::warn_falloff_nonvoid_function` not being promoted from warning to error. This should always be done, regardless of the ignoring state in `FilteringDiagConsumer`.; The failure became visible after merging https://github.com/root-project/root/pull/12654, given that `IgnorePromptDiags`; now defaults to 0 in `makeDefaultCompilationOptions()`.; - CodeUnloading/Macros.C: clang diagnostic verification was unhappy with the previous state of affairs. Move affected `expected-(warning|note)` markers to `Macros.h`.; - DynamicLibraryManager/callable_lib_L_AB_order1.C: `--enable-new-dtags` is needed in some toolchains to emit the new ELF dynamic tags, i.e. RUNPATH.; Per ld(1) manual page: `By default, the new dynamic tags are not created.`; - DynamicLibraryManager/cached_realpath.C: fetching the value of `errno` only makes sense after a failed call to; `realpath()`, i.e. if the return value of the function is NULL. Fix that. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12856:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/12856,3,['test'],"['tested', 'tests']"
Testability,This pull request fixes a remaining issue after merging #5913 and #10930 (see below). ## Changes or fixes:; - Remove the `.so` suffix and any trailing whitespace in the output generated by `libs.C`. This should fix the following errors found in the log:; ```; Error: file /home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/master_TMP/html/libRMVA.so __coll__graph.svg not found.; ```; - Remove dead code in `libs.C`. ## Checklist:; - [X] tested changes locally; - [ ] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10943:249,log,log,249,https://root.cern,https://github.com/root-project/root/pull/10943,2,"['log', 'test']","['log', 'tested']"
Testability,"This pull request fixes an issue introduced accidentally in PR #12751. In particular, the `.exe` suffix is not expected in non-Windows builds. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes some failures seen in the nightly builds.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12785:164,test,tested,164,https://root.cern,https://github.com/root-project/root/pull/12785,1,['test'],['tested']
Testability,This pull request fixes failing tests for ROOT builds configured with `-Dimt=OFF`. Those tests incorrectly assumed that multi-threading support is just there after a call to `ROOT::EnableImplictMT()`. ## Checklist:; - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12637:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/12637,3,['test'],"['tested', 'tests']"
Testability,"This pull request fixes the remaining failing cling tests. See below for the concrete changes. @vgvassilev After the changes proposed in this PR, _all_ the cling tests are passing. ## Changes or fixes:; - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols; in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior.; This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C.; - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead.; This fixes the following crash:; ```; 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e); 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56); 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788); 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75); ```. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12900:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/12900,4,['test'],"['tested', 'tests']"
Testability,"This pull request fixes the remaining failing cling tests. See below for the concrete changes. This PR is a backport of #12900. ## Changes or fixes:; - Restore symbol lookup in child interpreters: prior to the upgrade to LLVM13, child interpreters used to also lookup symbols; in their parent. This PR introduces a `DefinitionGenerator` that allows for symbol lookup across different `IncrementalJIT` instances, which restores the old behavior.; This change fixes the following tests: CodeUnloading/AtExit.C, MultipleInterpreters/MultipleInterpreters.C.; - `cling::DeclExtractor::EnforceInitOrder`: do not use `ActOnReturnStmt()`, given that the scope returned by `m_Sema->getCurScope()` might be == m_Sema->TUScope which obviously is not a function scope; use `BuildReturnStmt()` instead.; This fixes the following crash:; ```; 1: https://github.com/root-project/root/pull/3 0x0000556b6a50389e clang::Sema::ActOnReturnStmt(clang::SourceLocation, clang::Expr*, clang::Scope*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0x225389e); 1: https://github.com/root-project/root/pull/4 0x0000556b69215c56 cling::DeclExtractor::EnforceInitOrder(llvm::SmallVector<clang::Stmt*>&) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf65c56); 1: https://github.com/root-project/root/pull/5 0x0000556b69216788 cling::DeclExtractor::ExtractDecl(clang::FunctionDecl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66788); 1: https://github.com/root-project/root/pull/6 0x0000556b69216a75 cling::DeclExtractor::Transform(clang::Decl*) (/home/jalopezg/CERN/repos/root/_build/interpreter/llvm/src/bin/cling+0xf66a75); ```. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12455.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12902:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/12902,3,['test'],"['tested', 'tests']"
Testability,"This pull request fixes the unloading of member functions of templated classes. Specifically, the body of member functions of a templated class only gets instantiated when the function is first used, e.g. in this example below, the body for the member function `T f(T x)` (where `T` is a typename template argument for the templated struct `Foo`) will not get instantiated until `f()` is first used.; ```; `-ClassTemplateDecl; |-TemplateTypeParmDecl referenced typename depth 0 index 0 T; |-CXXRecordDecl struct Foo definition; | |-DefinitionData; | `-CXXMethodDecl f 'T (T)'; | |-ParmVarDecl 0x55e5787cac70 referenced x 'T'; | `-CompoundStmt; | `-ReturnStmt; | `-DeclRefExpr 'T' lvalue ParmVar 0x55e5787cac70 'x' 'T'; `-ClassTemplateSpecializationDecl struct Foo definition; |-DefinitionData; |-TemplateArgument type 'int'; | `-BuiltinType 'int'; |-CXXMethodDecl f 'int (int)' <<<< Instantiation pending; | `-ParmVarDecl x 'int':'int'; |-CXXConstructorDecl implicit used constexpr Foo 'void () noexcept' inline default trivial; ```; Such functions should not be deleted from the AST, but returned to the 'pending instantiation' state. Also, any function template instantiation, even if coming from an external AST source, needs some handling in order for it to be re-emitted the next time. ## Changes or fixes:; - Replace `StaticVarCollector` by simpler code. Static local variables always appear in the enclosing `DeclContext`; - Apply the patch described above. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary); - [x] Passes cling test suite. This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13565:1486,test,tested,1486,https://root.cern,https://github.com/root-project/root/pull/13565,2,['test'],"['test', 'tested']"
Testability,"This pull request fixes value printing of an expression of type `AutoType`, which ended up in calling the general fallback `printValue(const void *)`.; To call the appropriate overload, the deduced type should be used instead. ## Changes or fixes:; - Value printing of expressions of type `AutoType` use the deduced type instead.; - Update CREDITS.txt file. ## Checklist:; - [X] tested changes locally. This PR fixes [ROOT-9687](https://sft.its.cern.ch/jira/browse/ROOT-9687).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9949:379,test,tested,379,https://root.cern,https://github.com/root-project/root/pull/9949,1,['test'],['tested']
Testability,"This pull request generalizes the `RDaos` backend to support multiple attribute keys per read-write operation, grouping requested blobs by their corresponding <object id, distribution key> pairs - defined as a struct `RDaosContainer::ROidDkeyPair(daos_obj_id_t, DistributionKey_t)`. . ## Changes or fixes:. - `RDaosObject::FetchUpdateArgs`, which prepares the arguments for requests to `daos_obj_fetch` or `daos_obj_update`. Now supports multiple attribute keys, I/O operation descriptors and I/O vectors, to send in one RW call to distributed storage.; - `RDaosContainer::RWOperation`, which interfaces between `RPageStorageDaos` and `RDaosObject`, supports multiple attribute keys and I/O vectors. ; - `RPageSourceDaos::LoadClusters` collects requested pages in an `unordered_map<ROidDkeyPair, RWOperation, ROidDkeyPair::Hash>` by their corresponding object IDs and distribution keys (currently, OID: unique page number and Dkey: const, so this PR should have no real effect on performance or results); - `RDaosContainer::VectorReadWrite` and its wrappers `WriteV`, `ReadV` now take an `unordered_map<ROidDkeyPair. RWOperation, ROidDkeyPair::Hash>` instead of `vector<RWOperation>`. This should allow for multiple requests spread throughout the container to be sent out in once call, each of which fetching or updating several blobs at once.; - `RDaosContainer::VectorReadWrite` implementation has been moved to `RDaos.cxx` file, de-templating the function argument (which is always expected to be either a `RDaosObject::Fetch` or a `::Update` non-static method). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10860:1587,test,tested,1587,https://root.cern,https://github.com/root-project/root/pull/10860,1,['test'],['tested']
Testability,"This pull request implements the Ctrl+L keybinding (clear terminal screen) in ROOT's textinput. ## Changes or fixes:; - Adds the `Display::Clear()` member function, which clears the visible part of the screen on a TTY and moves the cursor to the home position. For Windows, this requires to temporarily enable processing of VT control sequences.; - Provide implementation for the `kCmdClearScreen` editor command. ## Checklist:; - [X] tested changes locally. This PR fixes #10057.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10078:435,test,tested,435,https://root.cern,https://github.com/root-project/root/pull/10078,1,['test'],['tested']
Testability,"This pull request improves the definition of the `Rbswap_{16,32,64}()` macros in `Byteswap.h` (see changes below). ## Changes or fixes:; - Define `R__bswap_64(x)` even if the compiler has no intrinsic for it. In that case, provide a fallback (unoptimized) implementation.; - In MSVC, implement `R__bswap_{16,32,64}(x)` in terms of the compiler intrinsic `_byteswap_xxx()`. ## Checklist:; - [X] tested changes locally. Follow-up PR: RNTuple read/write support in big-endian machines.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10396:394,test,tested,394,https://root.cern,https://github.com/root-project/root/pull/10396,1,['test'],['tested']
Testability,"This pull request improves the support for storage of collections that use `TVirtualCollectionProxy`, which was initially landed in #11525. However, `TVirtualCollectionProxy` allows for traversing a collection using iterators, which should be faster than using `TVirtualCollectionProxy::At()`. Also, this interface avoids (where possible) an additional copy during element insertion. ## Changes or fixes:; - Switches from using `TVirtualCollectionProxy::{Size,At}()` to the use of iterators. After merging this PR, an implementation for the following functions is required instead: `TVirtualCollectionProxy::GetFunctionCreateIterators()`, `GetFunctionNext()`, and `GetFunctionDeleteTwoIterators`. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11671.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12380:718,test,tested,718,https://root.cern,https://github.com/root-project/root/pull/12380,1,['test'],['tested']
Testability,"This pull request introduces RField support for C style arrays. In particular, it provides a `RField<T[N]>` template specialization and allows for parsing of types of the form `T[n][m]...` in `RFieldBase::Create()`. Actual RField implementation is provided by RArrayField, which currently does not support multi-dimensional arrays, although it should be trivial to extend it (if need be in a future PR) to support row-major (C order) multi-dimension arrays. Additionally, prior to this PR, class members whose type was an array of the form `T[n]` were stored as a scalar. This is considered a bug (see #11732 for all the details).; The implementation provided here also fixes issue #11732.; ; ## Changes or fixes:; - Add `RField<ItemT[N]>` template specialization that matches single-dimension arrays.; - Update `RFieldBase::Create()` to parse types of the form `T[n][m]...`. As of this PR, it returns `R__FAIL()` for multi-dimensional arrays, though it should be trivial to add support for row-major multi-dimension arrays. ; - RClassField: for class members whose type is a C style array, complete the type name with the size for each dimension, e.g. `int[4][2]`; - Add array unit tests. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR fixes #11732.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11756:1183,test,tests,1183,https://root.cern,https://github.com/root-project/root/pull/11756,2,['test'],"['tested', 'tests']"
Testability,"This pull request introduces ntuple management at the DAOS container level, extending support for more than one ntuple to populate a container. ## Changes or fixes:; - Support for up to 2\^32 - 1 ntuples in a DAOS container, by assigning an index to a previously-unused portion of the DAOS Object ID address space. The index thus induces a subspace dedicated for all objects belonging to a given ntuple. The zeroth space (index `0`) is reserved for any container-wide metadata objects that may need to be stored in the future.; - `ROOT::Experimental::Detail::RDaosContainerNTupleLocator` is a structure that concentrates the functionality for locating and retrieving stored metadata from an ntuple by its name.; - The structure hashes the name into a well-distributed 32-bit index. Collisions are expressly forbidden to simplify implementation; a different ntuple name must be provided to the sink upon creation if an ntuple stored in the container with another name happens to have the same hash (index).; - The sink (in `RPageSinkDaos` ctor) uses the locator to assign an index for a new ntuple, which may fail if the name's resulting hash collides with some other ntuple present unless the name matches. Overwriting (""recreating"") an existing ntuple is allowed in this context.; - The source (in `RPageSourceDaos::AttachImpl()`) locates the ntuple by the name to validate that it is indeed present in storage (otherwise, an exception is thrown). The objects that are read for this validation are reused as part of the ntuple metadata deserialization procedure when attaching. ; - Unit test coverage is provided for the following cases: write and read from different ntuples in a container; and attempt to open an ntuple that was not stored there. ## Checklist:. - [x] tested changes locally + cluster on single client with libdaos 2.2.0; - [x] updated the docs (if necessary). This PR fixes #10958",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11480:1588,test,test,1588,https://root.cern,https://github.com/root-project/root/pull/11480,2,['test'],"['test', 'tested']"
Testability,"This pull request is a backport of PR #13534 (a NFC; makes the code more readable) and PR #13565 (actual fix for unloading member functions of templated classes).; The aforementioned PRs have been reviewed separately. ## Changes or fixes:; For the actual list of changes, see; - https://github.com/root-project/root/pull/13534; - https://github.com/root-project/root/pull/13565. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary); - [x] Passes cling test suite . This PR fixes #10049, #6439, #7970, [ROOT-10848](https://sft.its.cern.ch/jira/browse/ROOT-10848) and [ROOT-8084](https://sft.its.cern.ch/jira/browse/ROOT-8084) and (hopefully also [ROOT-8245](https://sft.its.cern.ch/jira/browse/ROOT-8245)).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13618:400,test,tested,400,https://root.cern,https://github.com/root-project/root/pull/13618,2,['test'],"['test', 'tested']"
Testability,"This pull request is a follow-up from PR #12824. This cannot be in the base class destructor (`~RPageStorage`), given non-static members have been destroyed by the time the base class destructor is invoked. Second try at fixing the ntuple_extended:`RNTuple.SmallClusters` test. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12903:272,test,test,272,https://root.cern,https://github.com/root-project/root/pull/12903,2,['test'],"['test', 'tested']"
Testability,"This pull request is a follow-up of #13197, improving the implementation of the internal class `RCollectionClassField::RCollectionIterableOnce`. ## Changes or fixes:; - Allow for faster iteration of elements in a collection whose elements are guaranteed to be contiguous in memory (e.g. a vector), i.e. the address of each element is known given the base pointer. For such cases, a non-zero value for the `stride` argument can be provided, thus avoiding an indirect call on each `operator++` call.; - Fix and clarify the use of read/write iterators on a proxied collection. The meaning of the `read` argument in many; TVirtualCollectionProxy functions is ""read from disk"", i.e. write in memory. This should improve the situation for the PR introducing support for `std::set<T>` fields (#12948). ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13235:816,test,tested,816,https://root.cern,https://github.com/root-project/root/pull/13235,1,['test'],['tested']
Testability,"This pull request is the result of work done by David Clark as a summer intern at Argonne:; To prepare for multi-threaded workflows, a preloading and retaining clusters feature is introduced. This change will prevent additional reads from occurring when reading events out of sequence.; ; By setting the `MaxVirtualSize` of the tree to a negative value, entire clusters will be loaded into memory and previous clusters will be retained - the absolute value of `MaxVirtualSize` indicates how many additional clusters will be kept in memory.; ; If `TTree MaxVirtualSize` is set to a negative value, `GetEntry()` will load the entire cluster into memory, not just the first basket. `GetBasket()` is modified to call a new function `GetFreshCluster()` if `MaxVirtualSize` is negative. This function is responsible for returning a new basket and clearing out clusters from memory. Because clusters can have varying numbers of baskets, `GetFreshCluster()` reuses the first basket and clear the rest of the baskets. Reusing all baskets may be more efficient, but adds significant complexity and would not affect the typical case where each cluster only contains a single basket (all the baskets will be reused here).; ; To test the performance of the change, I read 1000 entries (about 1 GB) from a tree of randomly generated data consisting of 2000 branches. Every read had a 2.5% chance of reading 10 entries back or a 2.5% chance of reading 10 entries forward from the current entry. - Without the change enables there were 1.5 GB read in 31102 read calls. ; - With MaxVirtualSize set to -1, there were 1.1 GB read in 90 read calls.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/796:1216,test,test,1216,https://root.cern,https://github.com/root-project/root/pull/796,1,['test'],['test']
Testability,"This pull request makes `UnsealPage()` a no-op for the page zero. To this end, the prototype of `RPageSource::UnsealPage()` had to be changed to return an `RPage`, per previous conversation. The buffer for the returned page is usually allocated using the `RPageAllocatorHeap`, and thus `RPageAllocatorHeap::DeletePage()` should be called to delete the returned object. Note that storage backends may still provide their own page unsealing code, e.g. for custom memory allocation. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #12958.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13208:501,test,tested,501,https://root.cern,https://github.com/root-project/root/pull/13208,1,['test'],['tested']
Testability,"This pull request moves helper functions to an anonymous namespace at the beginning of the TU. **There are no functional changes in this PR**; instead it makes the code more readable. The follow-up PR, which is the important thing, fixes a number of issues in the handling of instantiation of member functions of templated classes, which should fix https://github.com/root-project/root/issues/10049 and all the issues mentioned there :rocket:. ## Changes or fixes:; - Move helper functions to anonymous namespace at the beginning of the TU; - Fix unmatched `#pragma clang diagnostic push`; - Fix wrong indentation in some parts of the file. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13534:662,test,tested,662,https://root.cern,https://github.com/root-project/root/pull/13534,1,['test'],['tested']
Testability,"This pull request provides a page allocator that caches previous allocations up to a certain limit. The cache is thread-local and defaults to 16 pages per thread (~1MiB per thread for default-sized pages). This PR is largely based on the concepts in #8634. Reuse of memory allocations in `RPageAllocatorCache` not only reduces calls to the global allocator but also heap fragmentation. The global allocator is thread-safe albeit locked; thus, to also reduce contention, the cache in `RPageAllocatorCache` is thread-local.; Given the small size of the (per-thread) cache, the internal structure is a simple `std::deque`. Anything more complex is not justified at the moment of this writing. . **NOTE:** Performance evaluation (specially for the multi-threaded case) should be inserted here tomorrow. ## Changes or fixes:; - Add `RPageAllocatorCache`: this templated allocator returns pages that have at least the required capacity. `DeletePage()` does not immediately deallocate memory; instead, pages are returned to a thread-local cache, dropping the smallest allocated buffer if the cache is full. If a previous page cannot be recycled, the underlying allocator `AllocT` (`RPageAllocatorHeap` by default) is used to allocate memory.; - Change the signature of `RPageSource::UnsealPage()`: `SealPage()`, the counterpart of `UnsealPage()` takes an RPage and returns an RSealedPage. Make the interface of `UnsealPage()` symmetric and return an RPage.; - Make `UnsealPage()` use `RPageAllocatorCache` by default.; - Remove stray `RPageAllocator{File,Daos}` classes. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). This PR supersedes #8634.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12279:1585,test,tested,1585,https://root.cern,https://github.com/root-project/root/pull/12279,1,['test'],['tested']
Testability,"This pull request removes deprecated RDataFrame functions marked for removal in ROOT v6.30. These changes fix the warnings reported by the CI on pull requests targeting `master`, e.g. ; ```; .../build/include/ROOT/RCsvDS.hxx:112:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attributes]; .../build/include/ROOT/RSqliteDS.hxx:117:1: warning: unknown attribute 'REMOVE_THIS_NOW' ignored [-Wunknown-attribute]; ```. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary). Sibling PR in roottest: https://github.com/root-project/roottest/pull/931",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11994:455,test,tested,455,https://root.cern,https://github.com/root-project/root/pull/11994,1,['test'],['tested']
Testability,This pull request replaces a variable's type from `size_t` to `uint64_t` to avoid warnings on 32-bit platforms. The variable is the output of a hashing function and undergoes shifting by 32 bits as the seeding step of a hash combination between the two-halves of a 64-bit value. The change has no functional impact. It prevents the following compilation warning in 32-bit systems:. ```; In file included from /path/to/src/RPageStorageDaos.cxx:29:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx: In static member function ‘static ROOT::Experimental::Detail::ntuple_index_t ROOT::Experimental::Detail::RDaosContainerNTupleLocator::Hash(const string&)’:; /path/to/src/tree/ntuple/v7/inc/ROOT/RPageStorageDaos.hxx:120:43: warning: right shift count >= width of type [-Wshift-count-overflow]; 120 | auto seed = static_cast<uint32_t>(h >> 32);; ```. ## Checklist:. - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12473:877,test,tested,877,https://root.cern,https://github.com/root-project/root/pull/12473,1,['test'],['tested']
Testability,This pull request replaces old uses of `std::runtime_error` by `RException`. ## Checklist:; - [X] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10606:98,test,tested,98,https://root.cern,https://github.com/root-project/root/pull/10606,1,['test'],['tested']
Testability,"This pull request replaces the implementation of `InputValidator::validate()` by simpler, more maintainable code that also fixes JIRA issue [ROOT-9202](https://sft.its.cern.ch/jira/browse/ROOT-9202). The previous implementation was unable to properly handle line continuation after ',' or '\\'. Specifically, it skipped over non-punctuation tokens, entering continuation mode even if ',' or '\' were not the last tokens in the input, e.g.; ```; int a, b; ```; or; ```; int a \ b; ```; caused cling to request more input, where it shouldn't. ## Changes or fixes:; - MetaLexer:; - Return `/*` and `*/` as independent tokens.; - Added `ReadToEndOfLine()` function (consume input until '\r', '\n', or EOF).; - Added `MetaLexer::RAII` that saves the current lexing position and restores it on destruction.; - Remove unused `LexPunctuatorAndAdvance()`.; - Rewrite of `InputValidator::validate()`. ## Checklist:; - [X] tested changes locally. Fixes [ROOT-9202](https://sft.its.cern.ch/jira/browse/ROOT-9202).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8771:912,test,tested,912,https://root.cern,https://github.com/root-project/root/pull/8771,1,['test'],['tested']
Testability,This pull request simplifies the implementation of `RPageSourceDaos::LoadClusters()` as a prior step to handling the population of the page zero. A follow-up PR factors out common code for handling `kTypePageZero` locators in storage backends + enables their population in the DAOS backend. ## Checklist:; - [x] tested changes locally,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13381:312,test,tested,312,https://root.cern,https://github.com/root-project/root/pull/13381,1,['test'],['tested']
Testability,"This pull request slighly improves RClusterPool to reduce contention (due to `fLockXxxQueue` being held) in I/O and unzip; threads. To this end, each thread keeps its local buffer of elements to be processed. On wakeup, the local copy is swapped with `fXxxQueue`, which not only reduces contention but also reduces the overall number of allocations, as the internal storage of both copies is reused. The local copy should be cleared before the `std::swap()` in the next iteration. Also, the unzip thread is just notified once after all the elements are pushed into the queue. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12044:597,test,tested,597,https://root.cern,https://github.com/root-project/root/pull/12044,1,['test'],['tested']
Testability,"This pull request updates the release notes (sections ""Interpreter"", ""RNTuple"", and ""Build, Configuration, and Testing Infrastructure"") for the upcoming v6.28 release. ## Checklist:; - [X] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11871:111,Test,Testing,111,https://root.cern,https://github.com/root-project/root/pull/11871,1,['Test'],['Testing']
Testability,"This pull request:. 1. Closes #12453, where is was reported that weight errors are lost when splitting weighted datasets.; 2. Avoids the associated errors printed when doing the JSON IO of combined RooDataSets (run the unit test `gtest-roofit-hs3-test-testHS3SimultaneousFit` with ROOT master to see them); 3. Avoids the creation of dummy weight variables when constructing RooDataSets in all of RooFit. More detail in the commit descriptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12459:224,test,test,224,https://root.cern,https://github.com/root-project/root/pull/12459,2,['test'],"['test', 'test-']"
Testability,This pull-request changes RField's `GetNormalizedType()` in order to discard cv-qualifiers. ## Changes or fixes:; - RField does not care about cv-qualifiers. Use `TClassEdit::CleanType()` to discard them in `GetNormalizedType()`. Removed the now redundant `Trim()` function.; - Improve `ntuple_types` test to cover the case described in issue #9140. ## Checklist:; - [X] tested changes locally. This PR fixes #9140.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9158:301,test,test,301,https://root.cern,https://github.com/root-project/root/pull/9158,2,['test'],"['test', 'tested']"
Testability,"This pull-request disables the warning `redundant parentheses surrounding declarator [-Wredundant-parens]` for everything except input parsed via `Interpreter::process()` (e.g., for prompt input). ## Changes or fixes:; - `CompilationOptions::IgnorePromptDiags` extended to >1 bit and renamed to `CompilationOptions::IgnoreDiagsMask`. Several values from the `IgnoreDiags` enumeration can be bitwise-OR'd together. The original purpose of `IgnorePromptDiags` now corresponds to the `IgnoreDiags::kPromptBasic` flag.; - `FilteringDiagConsumer` has been extended to handle groups of diagnostics that can be masked via `CompilationOptions::IgnoreDiagsMask`.; - Default ignore diagnostics mask can be (optionally) specified as an argument to `Interpreter::makeDefaultCompilationOpts()`. All interface functions use `IgnoreDiags::kPromptExtended` except `Interpreter::process()`. ## Checklist:; - [X] tested changes locally. This PR fixes [SPI-2064](https://sft.its.cern.ch/jira/browse/SPI-2064).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9695:895,test,tested,895,https://root.cern,https://github.com/root-project/root/pull/9695,1,['test'],['tested']
Testability,"This pull-request enables fast word movement in the ROOT prompt à la Xterm (by using Ctrl+Left and Ctrl+Right). Most users coming from a GUI (GTK+, Win32, etc.) will find this convenient, but also Archlinux users, given that the default `inputrc` file for GNU Readline provides these bindings (see https://wiki.archlinux.org/title/Readline#Fast_word_movement). EDIT: it seems that `/etc/inputrc` in Fedora also provides this binding by default. :-). ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9753:471,test,tested,471,https://root.cern,https://github.com/root-project/root/pull/9753,1,['test'],['tested']
Testability,"This pull-request fixes `RNTupleWriter::Recreate()` in DAOS 1.2, where the old ntuple was not overwritten (see issue #9032). ## Changes or fixes:; - `DAOS_COND_DKEY_INSERT` was inappropriately used in `daos_obj_update()` calls, which causes `RNTupleWriter::Recreate()` to not overwrite old data. This has been fixed. - Additionally, `DAOS_COND_{D,A}KEY_FETCH` has been added to flags in `daos_obj_fetch()` call (fail if dkey/akey does not exist). ## Checklist:; - [X] tested changes locally. This PR fixes #9032.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9033:468,test,tested,468,https://root.cern,https://github.com/root-project/root/pull/9033,1,['test'],['tested']
Testability,"This pull-request fixes a couple of issues related to `roottest` branch sync'ing. See issue #8783 for more information. ## Changes or fixes:; - Checkout the correct `roottest` head/tag if root is at `latest-stable`. If the current checked out branch is `latest-stable`, resolve it to the latest merged head/tag (i.e. second parent of latest-stable), and use that to clone `roottest`. These two commands illustrate the proposed behavior:; ```bash; $ git for-each-ref --points-at=latest-stable^2 --format=%(refname:short); v6-24-06; $ git clone -b v6-24-06 https://github.com/root-project/roottest.git; ```. - If the checked out ref in `root` is a tag (e.g. as a result of `$ git checkout v6-24-06`), `roottest` is not cloned at the expected revision. The previous implementation relied on `git rev-parse --abbrev-ref HEAD` to get the name of the checked out branch. While this works for branch heads, it fails for tags, i.e.; ```bash; $ git checkout v6-24-06; HEAD is now at 3b796f86a3 ""Update ROOT version files to v6.24/06.""; $ git rev-parse --abbrev-ref HEAD; HEAD; ```; The proposed solution in this case is to use `git for-each-ref` (or alternatively `git describe`), i.e.; ```bash; $ git for-each-ref --points-at=HEAD --format='%(refname:short)'; v6-24-06; ```. ## Checklist:; - [X] tested changes locally. This PR fixes #8783.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9025:1288,test,tested,1288,https://root.cern,https://github.com/root-project/root/pull/9025,1,['test'],['tested']
Testability,"This pull-request fixes a typo in `CustomStructLinkDef.h` that generated a warning during build, i.e.; ```; Warning: Unused class rule: PackedContainer; ```. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9054:179,test,tested,179,https://root.cern,https://github.com/root-project/root/pull/9054,1,['test'],['tested']
Testability,This pull-request is a backport of PR #9781; see details there. A bug in DeclExtractor was preventing names introduced by an anonymous scopeless enum to become available in the parent scope. ## Checklist:; - [X] tested changes locally. This PR fixes ROOT-6095.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9789:212,test,tested,212,https://root.cern,https://github.com/root-project/root/pull/9789,1,['test'],['tested']
Testability,This pull-request makes sure that the enumerators in a (anonymous) scopeless `enum` are made visible in the enclosing scope.; A bug in DeclExtractor was preventing names introduced by an anonymous scopeless enum to become available in the parent scope. ## Changes or fixes:; - Do not skip the `InnerDC->makeDeclVisibleInContext()` call for enumerators of anonymous scopeless `enum`s. . ## Checklist:; - [X] tested changes locally. This PR fixes [ROOT-6095](https://sft.its.cern.ch/jira/browse/ROOT-6095).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9781:407,test,tested,407,https://root.cern,https://github.com/root-project/root/pull/9781,1,['test'],['tested']
Testability,This pull-request modifies the implementation of RField `GetNormalizedType()` to resolve typedefs via `TClassEdit::ResolveTypedef()`. ## Changes or fixes:; - GetNormalizedType: use `TClassEdit::ResolveTypedef()` to resolve type aliases.; - GetNormalizedType: move to a type translation map. ## Checklist:; - [x] tested changes locally. This PR fixes #9202.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9351:312,test,tested,312,https://root.cern,https://github.com/root-project/root/pull/9351,1,['test'],['tested']
Testability,"This pull-request suppresses `-Wunused-result` diagnostics for wrapper functions generated by TClingCallFunc (see below). A TClingCallFunc wrapper function might look as the excerpt below, where the function denoted by `func` may have been annotated as `[[nodiscard]]`. Note that if `ret == nullptr` the result of the call is unused.; ```c++; extern ""C"" void __cf_0(void* obj, int nargs, void** args, void* ret) {; if (ret) {; new (ret) (return_type) ((class_name*)obj)->func(args...);; }; else {; ((class_name*)obj)->func(args...);; }; }; ```. In turn, this triggers warnings when used by cppyy/PyROOT, e.g.; ```python; >>> import ROOT; >>> v = ROOT.std.vector(int)(); >>> v.empty(); input_line_34:10:7: warning; ignoring return value of function declared with 'nodiscard' attribute; [-Wunused-result]; ((const vector<int>*)obj)->empty();; ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; True; >>>; ```. ## Changes or fixes:; - Given the above situation, this commit supresses `-Wunused-result` diagnostics only for TClingCallFunc wrapper functions. ## Checklist:; - [X] tested changes locally. This PR fixes #8622. Sibling PR in roottest: https://github.com/root-project/roottest/pull/791",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9244:1058,test,tested,1058,https://root.cern,https://github.com/root-project/root/pull/9244,1,['test'],['tested']
Testability,"This reduces the time to run Hesse in the ATLAS Higgs benchmark from; 123 s to 92 seconds. Given that some models take hours for this, this is a significant; improvement for the user experience. Further improvement is possible by analyzing the computation graph a bit; more to find more independent parameters (e.g., the different gammas for; stat uncertainties from different bins).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16394:54,benchmark,benchmark,54,https://root.cern,https://github.com/root-project/root/pull/16394,1,['benchmark'],['benchmark']
Testability,This repairs crash seem in [testProxiesAndCategories](https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/139900/testReport/projectroot.roofit.roofitcore/test/gtest_roofit_roofitcore_test_testProxiesAndCategories/) on the v6.24 branches and a few additional issues seen during testing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10230:28,test,testProxiesAndCategories,28,https://root.cern,https://github.com/root-project/root/pull/10230,4,['test'],"['test', 'testProxiesAndCategories', 'testReport', 'testing']"
Testability,"This replaces the `find_package()` macro to be a no-op for packages in the `builtins` list. A new `builtins` directory has been created to hold sources for external packages. Currently only zlib has been moved to this new scheme for testing, but over time all builtins should be moved. Further discussions are needed before merging, in order to make this more automated. The idea is that the build system will only have `find_package(Foo)` or `find_package(Foo REQUIRED)`, etc, and enabling the builtin or not should then happen automatically from within the replaced `find_package()` macro.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1571:233,test,testing,233,https://root.cern,https://github.com/root-project/root/pull/1571,1,['test'],['testing']
Testability,"This requires some changes to the read path of `RColumn`, first to deduplicate the code and then avoid recursive `RColumn::ReadV` which makes the difference on my system between being able to limit test a single `std::vector` element of size 200k.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14390:198,test,test,198,https://root.cern,https://github.com/root-project/root/pull/14390,1,['test'],['test']
Testability,"This resolved https://epsft-jenkins.cern.ch/job/root-incremental-master/BUILDTYPE=Debug,COMPILER=native,LABEL=mac1012/5509/testReport/projectroot.tree.treeplayer/test/gtest_tree_treeplayer_test_dataframe_snapshot/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1401:123,test,testReport,123,https://root.cern,https://github.com/root-project/root/pull/1401,2,['test'],"['test', 'testReport']"
Testability,This resolves ROOT-9374.; To be merged if said tests pass.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2066:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/2066,1,['test'],['tests']
Testability,This restores the old computation before commit f65064583d and instead solves the problem by allowing a small numerical difference from 0. Fixes the test `testPolynomialRoots` on `mac14arm` where floating point operations are fused differently from other platforms.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14291:149,test,test,149,https://root.cern,https://github.com/root-project/root/pull/14291,2,['test'],"['test', 'testPolynomialRoots']"
Testability,This returns the opposite condition (false) from the same code snippet; in ASTContext (true) https://github.com/root-project/root/blob/master/interpreter/llvm/src/tools/clang/lib/AST/ASTContext.cpp#L9091. The idea is to make this as a guard before calling; ASTContext::DeclMustBeEmitted. Or we can also delete ASTContext code.; Testing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2852:328,Test,Testing,328,https://root.cern,https://github.com/root-project/root/pull/2852,1,['Test'],['Testing']
Testability,This revert https://github.com/vgvassilev/clang/commit/d5f1068de9. I have tested it in the cling and it breaks no new tests so I assume it; should be a NFC patch and we should remove it as it makes upstream; test suite failed.; Signed-off-by: Jun Zhang <jun@junz.org>. Let's test it in the ROOT repo.; CC @vgvassilev @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10830:74,test,tested,74,https://root.cern,https://github.com/root-project/root/pull/10830,4,['test'],"['test', 'tested', 'tests']"
Testability,"This revert is in place because python scripts now hang whenever the ROOT module is imported on macos 12, 13 and 14. This reverts commit 06b86c3a3408fec00eaa615790a9298bb9b7eb41. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13754:244,test,tested,244,https://root.cern,https://github.com/root-project/root/pull/13754,1,['test'],['tested']
Testability,"This reverts ae9f8ae62553f9150fdee1f8739be6996d539694. While the patch makes sense to me, it breaks a lot of iminuit's tests. I cannot say why, but the results are very far off in some cases. I can provide a log of the failing tests as proof if needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7085:119,test,tests,119,https://root.cern,https://github.com/root-project/root/pull/7085,3,"['log', 'test']","['log', 'tests']"
Testability,This reverts commit 0363aed.; Use llvm-upstream commit instead!# This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12831:128,test,tested,128,https://root.cern,https://github.com/root-project/root/pull/12831,1,['test'],['tested']
Testability,This reverts commit 180cd90afe663f2e04017d03bc63111d124010c6.; It breaks lookup of functions with 'using ParentClass::Func'; in combination with modules which reuse the hidden flag for; module purposes. See https://reviews.llvm.org/D37180 for a clang test case that; tests for regressions like this in the future.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1034:251,test,test,251,https://root.cern,https://github.com/root-project/root/pull/1034,2,['test'],"['test', 'tests']"
Testability,"This reverts commit 5298b418eec4129351888f41cb7c3bfc90161e22. This commit was mistakenly committed. PR was opened in #1730, but it was; closed and moved to #1761. I didn't notice this and created another PR; in #1980. This change was causing 100+ failures in runtime cxxmodules nightlies.; (Eg. https://epsft-jenkins.cern.ch/job/root-pullrequests-build/29183/testReport/junit/projectroot/runtutorials/tutorial_fit_FittingDemo/); We want to have **proper** PrebuildModulesPaths which information were; extracted from LD_LIBRARY_PATH and DYLD_LIBRARY_PATH, not a random ""."". Because of this commit, we were trying to autoload libraries generated; by roottest on-demand (for example ""./h1analysisTreeReader_C.so"") This; is not an intentional behavior, these autogenerated libraries are; already loaded by roottest and what we want to do is to load **proper**; libraries like libHist.so instead.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2160:359,test,testReport,359,https://root.cern,https://github.com/root-project/root/pull/2160,1,['test'],['testReport']
Testability,This reverts commit 6657223efbc8d356fe3103c7010922dded6791a2.; It caused [failures](http://cdash.cern.ch/testDetails.php?test=40653603&build=483771); in gtest-tree-treeplayer-test-dataframe-snapshot (see discussion at #1800 ).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1813:105,test,testDetails,105,https://root.cern,https://github.com/root-project/root/pull/1813,3,['test'],"['test', 'test-dataframe-snapshot', 'testDetails']"
Testability,This reverts commit 8deb57c04a5ceea96533d095092fcd4f71d1df94 and fixes the Cling test `CodeUnloading/Macros.C` that was previously failing with complaints that the unloaded and then re-included `Macros.h` header had no lines 18 and 19.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12454:81,test,test,81,https://root.cern,https://github.com/root-project/root/pull/12454,1,['test'],['test']
Testability,This reverts commit 8e355c2c565af555f75209ea0f1c2ce255f85cc6 from #10301. /cc @ellert @bellenot . # This Pull request:. ## Changes or fixes:. Sets `builtin_gtest` to `OFF` by default. It is already the case that `builtin_gtest` will be enabled automatically if `GTest` is not found. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12149:304,test,tested,304,https://root.cern,https://github.com/root-project/root/pull/12149,1,['test'],['tested']
Testability,"This reverts commit baf092324e6e2a9301daff36a780cd064b232c2d. We can either merge this as-is if the tests pass, or if they don't I'll close this PR without merging and open a GitHub issue about fixing these tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15596:100,test,tests,100,https://root.cern,https://github.com/root-project/root/pull/15596,2,['test'],['tests']
Testability,This reverts commit d6b623fff5a6d47ae66ec6db09dad26e987deb4e to no longer restrict numba versions to <0.6 which also unlocks support for numpy 2.0. The corresponding PR in rootest (https://github.com/root-project/roottest/pull/1162) updates the error style in the numba test to be backwards compatible. The numpy version is temporarily locked to below 2.0 to prevent both upgrades at the same time. - [X] tested changes locally. Fixes https://github.com/root-project/root/issues/16201,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16209:270,test,test,270,https://root.cern,https://github.com/root-project/root/pull/16209,2,['test'],"['test', 'tested']"
Testability,"This reverts commit e5299b1f790f1450c1545659f4cc869de7ebef70.; We still have to copy headers to the binary directory, so this is; not necessary. Testing before merging.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1455:145,Test,Testing,145,https://root.cern,https://github.com/root-project/root/pull/1455,1,['Test'],['Testing']
Testability,"This reverts commit eb52895d22aaad0a88d47b8e7bb18c7f47ff35be. As discussed, we should try to make clang parse input containing solely a function-style cast (e.g. `bool(i)`) as an expression instead of a declaration. In the interim, this patch is reverted to silence unwanted warnings in third-party code.; The PR https://github.com/root-project/root/pull/9695 will also be closed. ## Checklist:; - [X] tested changes locally. This PR fixes [SPI-2064](https://sft.its.cern.ch/jira/browse/SPI-2064) and reopens issue #8304.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9706:402,test,tested,402,https://root.cern,https://github.com/root-project/root/pull/9706,1,['test'],['tested']
Testability,"This reverts commit f84668d78f3911ad8a67b4ba03145cd5845f14fb.; It leads to test failures on centos7, while all other systems are ok.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3263:75,test,test,75,https://root.cern,https://github.com/root-project/root/pull/3263,1,['test'],['test']
Testability,"This reverts https://github.com/vgvassilev/clang/commit/a5ee33ae48. This patch previous tried to solve some problems with virtual files, but; when trying to upstream it, it brokes the tests below:. * Modules/module-file-modified.c; * Modules/explicit-build-missing-files.cpp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10633:184,test,tests,184,https://root.cern,https://github.com/root-project/root/pull/10633,1,['test'],['tests']
Testability,This should be added so we can test RBDT in the CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15183:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/15183,1,['test'],['test']
Testability,This should bring RDF back to a fully working state (for all cases we test) after the change in valid column names discussed in ROOT-10942 .,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6113:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/6113,1,['test'],['test']
Testability,This should bring RDF back to a fully working state (for all cases; we test) after the change in valid column names discussed in ROOT-10942.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6116:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/6116,2,['test'],['test']
Testability,This should fix a good number of tests on osx. cc: @Axel-Naumann,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4758:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/4758,1,['test'],['tests']
Testability,"This should fix the recent test failures seen in `gtest-tree-treeplayer-test-treetreeplayertestUnit`. Full lldb stack traces at https://codimd.web.cern.ch/s/QKEMHg5H1. # PR description. The test was dynamically allocating the array data members of the `Data` struct, but never deallocating them. This commit polishes the `Data` struct definition and ensures proper management of the data members. The previous way of writing data to the TTree was leading to a bad memory access in the ReadBasicPointer inlined function in TStreamerInfoReadBuffer.cxx while reading the `double*` array. In particular, the issue arises when accessing and then deallocating the array at the current index provided by the `TCompInfo` object. ```; Target 0: (repro.out) stopped.; (lldb); Process 13498 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = step in; frame #0: 0x00000001044cf140 libRIO.so`int TStreamerInfo::ReadBuffer<char**>(this=<unavailable>, b=<unavailable>, arr=<unavailable>, compinfo=<unavailable>, first=<unavailable>, last=<unavailable>, narr=<unavailable>, eoffset=<unavailable>, arrayMode=0) at TStreamerInfoReadBuffer.cxx:923:65 [opt]; 920 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong: ReadBasicPointer(Long_t); continue;; 921 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kLong64: ReadBasicPointer(Long64_t); continue;; 922 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kFloat: ReadBasicPointer(Float_t); continue;; -> 923 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kDouble: ReadBasicPointer(Double_t); continue;; 924 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUChar: ReadBasicPointer(UChar_t); continue;; 925 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUShort: ReadBasicPointer(UShort_t); continue;; 926 	 case TStreamerInfo::kOffsetP + TStreamerInfo::kUInt: ReadBasicPointer(UInt_t); continue;; Target 0: (repro.out) stopped.; (lldb); Process 13498 stopped; * thread #1, queue = 'com.apple.main-thread', stop reason = step in; frame #0: 0x000000010",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16501:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/16501,3,['test'],"['test', 'test-treetreeplayertestUnit']"
Testability,"This should fixe some sporadic failures observed in the CI builds. Before the CrossValidation class was created using the same name as in the `TestCrossValidationMultiProc.cxx`, and with the same `DataLoader` name. For this, the XML file created in the training phase was having the same name and being located in the same directory as the file created by the other tests. This was causing a conflict when the tests are run in parallel. ; This PR changes to use now different names, solving this conflict.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10018:143,Test,TestCrossValidationMultiProc,143,https://root.cern,https://github.com/root-project/root/pull/10018,3,"['Test', 'test']","['TestCrossValidationMultiProc', 'tests']"
Testability,This should hopefully fix sporadic failures happening when deleting the files create in these tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9415:94,test,tests,94,https://root.cern,https://github.com/root-project/root/pull/9415,1,['test'],['tests']
Testability,This should partially solve the issue with the rebuild (linking) of ROOT when building the tests; See also: https://cmake.org/cmake/help/latest/variable/CMAKE_SKIP_TEST_ALL_DEPENDENCY.html; Requires CMake v3.29,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16744:91,test,tests,91,https://root.cern,https://github.com/root-project/root/pull/16744,3,['test'],['tests']
Testability,"This simple code, gives a strange behaviour when running it within the ROOT prompt in 6.28 and master.; In ROOT master and 6,28 it seems the vector is initialised with the values used the first time and not with the new ones. ; It works fine in 6.26, where the second time the vector passed to the DummyBroadCast function is initialised correctly. . ```; .L testBroadCast.hxx; Test1::Session s1;; Test2::Session s2;; ```. Here is the code : `testBroadCast.hxx`. ```; #include <iostream>; #include <vector>. template<class T>; void DummyBroadCast(const T* data, std::vector<size_t> shape, std::vector<size_t> targetShape) {. std::cout << ""target shape "";; for (size_t i = 0; i < targetShape.size(); i++) std::cout << targetShape[i] << "" "";; std::cout << std::endl;. }. namespace Test1 {. struct Session {; ; std::vector<float> fTensor_conv0bias = std::vector<float>(4);; float * tensor_conv0bias = fTensor_conv0bias.data();; std::vector<float> fTensor_conv0biasbcast = std::vector<float>(64);; float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };; std::vector<size_t> targetShape = { 2 , 4 , 4, 4 };; DummyBroadCast(tensor_conv0bias, shape, targetShape);. }. };; }. namespace Test2 {. struct Session {. std::vector<float> fTensor_conv0bias = std::vector<float>(4);; float * tensor_conv0bias = fTensor_conv0bias.data();; std::vector<float> fTensor_conv0biasbcast = std::vector<float>(100);; float * tensor_conv0biasbcast = fTensor_conv0biasbcast.data();. Session() {. std::vector<size_t> shape = { 4 , 1 , 1 };; std::vector<size_t> targetShape = { 2 , 4 , 5, 5 };; DummyBroadCast(tensor_conv0bias, shape, targetShape);; // DummyBroadCast(tensor_conv0bias, { 4 , 1 , 1 }, { 2 , 4 , 5, 5 });. }. };; }; ```; ; This affects some failures seen in SOFIE test like ; https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/LABEL=ROOT-ubuntu2204,SPEC=soversion,V=master/lastCompletedBuild/testReport/projectroo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12164:358,test,testBroadCast,358,https://root.cern,https://github.com/root-project/root/issues/12164,2,['test'],['testBroadCast']
Testability,This solves (and tests) ROOT-9935.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5089:17,test,tests,17,https://root.cern,https://github.com/root-project/root/pull/5089,1,['test'],['tests']
Testability,This sometimes still fails e.g. https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/194564/testReport/projectroot.tmva.sofie/test/gtest_tmva_sofie_test_TestSofieModels/,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14535:112,test,testReport,112,https://root.cern,https://github.com/root-project/root/pull/14535,2,['test'],"['test', 'testReport']"
Testability,"This somewhat huge commit mainly demotes many class-versions to 0. . If wanted, I can for sure squash some things (right now, the commit messages contain the underlying reasoning). . In ROOT, a lot of classes were equipped with class-versions > 0 even though they are not meant for IO / streaming. ; This produces unnecessary overhead (creation of Streamer() functions) and might be misleading for users (especially if they believe streaming of these classes would be ok and then lose parts of their data). That's even more helpful when testing framework's dataobject-code. . These classes were identified by https://github.com/olifre/rootStaticAnalyzer (a new project still in early stages) and I have created this PR to fix almost all these issues. . The last commit in the series also explicitly marks two members (of TSeqCollection and THashList) as transient, even though these classes are already class-version 0. This is purely to make it more explicit that these are not streamed - and allow for programmatic testing (since then the `kTransient` bit of the `TRealData` will be set correctly). . Several issues alerted by `rootStaticAnalyzer` still remain which are probably real bugs in ROOT 6. . Examples: . ```; TMVA/PDF.h:0: error: Data object class 'TMVA::PDF' will not stream the following indirect members: members 'fConfigName, fConfigDescription, fReferenceFile' from class 'TMVA::Configurable' (class-version 0)!; ```. It seems like `TMVA::PDF` is meant for streaming, but inherits from a base which is not. . Similar to that:. ```; include/TTreeResult.h:0: error: Data object class 'TTreeResult' will not stream the following indirect members: members 'fRowCount' from class 'TSQLResult' (class-version 0)!; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/169:537,test,testing,537,https://root.cern,https://github.com/root-project/root/pull/169,2,['test'],['testing']
Testability,"This splits up the file test/stressHistogram.cxx into smaller, more independent files using Google Test that is more maintainable than the existing code.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/843:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/843,2,"['Test', 'test']","['Test', 'test']"
Testability,"This test fails with runtime C++ modules on in v6.18, runs fine in v6.20 and above. Won't fix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5281:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/5281,1,['test'],['test']
Testability,"This test fails with runtime C++ modules on in v6.18, runs fine in v6.20 and above.; Won't fix it in older versions, so it's also disabled if runtime C++ modules are on; in v6.16, just to be sure/consistent.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5306:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/5306,1,['test'],['test']
Testability,"This test is disabled because it is broken in ctest! Even if you install all dependencies in a fresh virtual env with:; ```; pip install -r requirements.txt; ```; it will not notice that some requirements like pytorch or tensorflow are there. This is observed on both macOS and Linux.; Just running the test with python dependency_versions.py works fine, so the problem relates to the ctest configuration. Here is the output when I ran the test with Python in a fresh environment with all dependencies installed:; ```; /home/rembserj/spaces/master/root/src/root/bindings/pyroot/pythonizations/test/dependency_versions.py:2: DeprecationWarning: pkg_resources is deprecated as an API. See https://setuptools.pypa.io/en/latest/pkg_resources.html; import pkg_resources; Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'tensorflow'; Attempting requirement 'torch'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'metakernel>=0.20.0'; Ignore dependency pyspark>=2.4; Ignore dependency dask>=2022.08.1; python_version >= ""3.8""; Ignore dependency distributed>=2022.08.1; python_version >= ""3.8""; .; ----------------------------------------------------------------------; Ran 1 test in 0.149s. OK; ```. And here is the output with ctest:; ```; AILED (errors=1); Attempting requirement 'numpy>=1.4.1'; Attempting requirement 'scikit-learn'; Attempting requirement 'xgboost'; Attempting requirement 'tensorflow'; Attempting requirement 'torch'; Attempting requirement 'numba>=0.47.0; python_version < ""3.11""'; Attempting requirement 'numba>=0.57.0; python_version >= ""3.11"" and python_version < ""3.12""'; Attempting requirement 'cffi>=1.9.1'; Attempting requirement 'notebook>=4.4.1'; Attempting requirement 'me",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15272:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/15272,4,['test'],['test']
Testability,This time testing without the magic word in the PR title and also with multiple commits only using it once in the first commit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14610:10,test,testing,10,https://root.cern,https://github.com/root-project/root/pull/14610,1,['test'],['testing']
Testability,"This updates the following cppyy packages to the indicated versions:; - cppyy: cppyy-1.5.3; - cppyy_backend: clingwrapper-1.10.3; - CPyCppyy: CPyCppyy-1.9.3. This incorporates a fix for the issue reported here:; https://bitbucket.org/wlav/cppyy/issues/160/memoryregulator-and-the-deletion-of-python. and also this PR:; https://bitbucket.org/wlav/cppyy-backend/pull-requests/21/fix-logic-and-silence-wparentheses-warning. There are still two remaining Cppyy issues not solved yet by this update, which affect a few tests:; https://bitbucket.org/wlav/cppyy/issues/136/item-assignment-not-working-in-templated; https://bitbucket.org/wlav/cppyy/issues/145/enum-values-not-defined-as-constants",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4386:381,log,logic-and-silence-wparentheses-warning,381,https://root.cern,https://github.com/root-project/root/pull/4386,2,"['log', 'test']","['logic-and-silence-wparentheses-warning', 'tests']"
Testability,"This warning was first seen in rootbench:. ```c++; root-benchmark/BUILDTYPE/Release/COMPILER/gcc62/LABEL/performance-cc7/build/include/ROOT/TDFActionHelpers.hxx:745:34:; warning: parameter ‘slot’ set but not used [-Wunused-but-set-parameter]; void SetBranches(unsigned int slot, BranchTypes&... values, StaticSeq<S...> /*dummy*/); ^~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1811:56,benchmark,benchmark,56,https://root.cern,https://github.com/root-project/root/pull/1811,1,['benchmark'],['benchmark']
Testability,"This was appending ""roottest"" to the filter string, instead of *also* filtering ""roottest"".; roottest dictionaries will always have full path names, so veto ""/roottest/"".; Fixes 19 incremental failures that ceb925ae1e claimed to fix:. projectroot.roottest.root.meta.roottest_root_meta_drawing; projectroot.roottest.root.tree.split.roottest_root_tree_split_make; projectroot.roottest.root.treeformula.parse.roottest_root_treeformula_parse_make; projectroot.roottest.root.treeformula.sync.roottest_root_treeformula_sync_make; projectroot.roottest.root.tree.selector.roottest_root_tree_selector_make; projectroot.roottest.root.io.fakeClass.roottest_root_io_fakeClass_make; projectroot.roottest.root.tree.addresses.roottest_root_tree_addresses_make; projectroot.roottest.root.treeformula.retobj.roottest_root_treeformula_retobj_make; projectroot.roottest.root.treeproxy.roottest_root_treeproxy_make; projectroot.roottest.root.treeformula.schemaEvolution.roottest_root_treeformula_schemaEvolution_make; projectroot.roottest.root.tree.evolution.roottest_root_tree_evolution_make; projectroot.roottest.root.treeformula.array.roottest_root_treeformula_array_make; projectroot.roottest.root.meta.tclass.roottest_root_meta_tclass_execState; projectroot.roottest.root.meta.roottest_root_meta_runautoload_auto; projectroot.roottest.root.collection.roottest_root_collection_execMissing; projectroot.test.test_stresstmva_interpreted; projectroot.roottest.root.io.evolution.roottest_root_io_evolution_make; projectroot.roottest.root.io.datamodelevolution.roottest_root_io_datamodelevolution_make; projectroot.roottest.root.tree.friend.roottest_root_tree_friend_make.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3624:1386,test,test,1386,https://root.cern,https://github.com/root-project/root/pull/3624,1,['test'],['test']
Testability,"This was applied from a `.patch` from the PR GooFit/Minuit2#1 from @gudlaugu. All credit/blame should be directed to @gudlaugu, I'm just the middleman. This patch is useful because apparently MPI 3 no longer even includes support for the C++ bindings. Once #1680 is merged, this will be much easier to test. For future reference, the ugly use of environment variables instead of CMake option for MPI options in the main ROOT::Minuit2 CMakeLists.txt needs to be fixed, and also could be moved to FindMPI instead of the current hardcoded method.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1689:302,test,test,302,https://root.cern,https://github.com/root-project/root/pull/1689,1,['test'],['test']
Testability,This was causing some test failures in cxx modules and in cling.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1841:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/1841,1,['test'],['test']
Testability,This was detected by redundant loading on libRooStats when we are trying; to resolve _ZN5TTreeC1Ev. libRooStats contains it as an unresolved symbol; but the wrong flag checks did not filter it out. This patch should fix a few subtle test failures which fluctuate depending; on the linker optimizations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2764:233,test,test,233,https://root.cern,https://github.com/root-project/root/pull/2764,1,['test'],['test']
Testability,"This was introduced in 2013 by commit a283dc5847 mentioning `Double32_t`, but all tests pass when removing it. It seems all relevant cases are taken care of by commit c6cfe7cbcd.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13072:82,test,tests,82,https://root.cern,https://github.com/root-project/root/pull/13072,1,['test'],['tests']
Testability,"This was missing in the default constructor. . Found automatically by https://github.com/olifre/rootStaticAnalyzer : . ```; include/TProtoClass.h:78: error: Streamed member 'unsigned int fCheckSum' of dataobject 'TProtoClass' not initialized by constructor!; ```. using the new test https://github.com/olifre/rootStaticAnalyzer/blob/master/src/tests/testStreamingUninitialized.cpp which identifies to-be-streamed members which are not initialized by the default constructors. ; There are likely more, but the other cases seem a bit more complex - I'm still working on improving the test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/171:278,test,test,278,https://root.cern,https://github.com/root-project/root/pull/171,4,['test'],"['test', 'testStreamingUninitialized', 'tests']"
Testability,"This was not in any issue, but I thought this would be very helpful. This way, you don't need to convert theta and phi into Cartesian vectors manually, and vice-versa. I tested it on Ubuntu 20.04 and it works flawlessly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7735:170,test,tested,170,https://root.cern,https://github.com/root-project/root/pull/7735,1,['test'],['tested']
Testability,"This was removed in commit 5ef5d8e8ab (""Do not use gif"") and makes the test fail.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9605:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/9605,1,['test'],['test']
Testability,This was the only test file for Spark backend in the `root` repository. It is better suited in `roottest`. In the sibling PR I also added the corresponding Dask unittests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9361:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/9361,1,['test'],['test']
Testability,"This way, if another process requests the file from the cache while; the file is still being written/downloaded, it does not ""find"" it; and does not read an incomplete file. This should fix failures such as [these](https://github.com/root-project/root/pull/9495#issuecomment-1005637703) where multiple process (in this case multiple ROOT tests) require to cache the same file concurrently.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9479:338,test,tests,338,https://root.cern,https://github.com/root-project/root/pull/9479,1,['test'],['tests']
Testability,This works better for me (i.e. I have multiple clang versions installed and it works as well). Please check that it works for you and let me know so I can merge. The Jenkins builds are not able to actually test this.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3807:206,test,test,206,https://root.cern,https://github.com/root-project/root/pull/3807,1,['test'],['test']
Testability,"Thsi fixes the following error:; ```; MSVCRT.lib(tncleanup.obj) : error LNK2005: ""struct __type_info_node __type_info_root_node"" (?__type_info_root_node@@3U__type_info_node@@A) already defined in libCling.lib(libCling.dll) [C:\build\workspace\root-pullrequests-build\build\core\base\test\CoreBaseTests.vcxproj]; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7265:283,test,test,283,https://root.cern,https://github.com/root-project/root/pull/7265,1,['test'],['test']
Testability,"To avoid fallback to numeric differentiation because the function is not; inlined. The pullbacks were automatically generated with Clad master, and then; manually simplified. It was carefully checked that the updated unit; tests cover all code branches of the pullback.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15501:223,test,tests,223,https://root.cern,https://github.com/root-project/root/pull/15501,1,['test'],['tests']
Testability,To enable setting default draw option before drawing a graph like TH1::SetOption. Fixes https://github.com/root-project/root/issues/14539. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14686:204,test,tested,204,https://root.cern,https://github.com/root-project/root/pull/14686,1,['test'],['tested']
Testability,"To fix the timeouts seen in our CI runs of the distributed RDataFrame with Dask suite. In particular, the Dask version used was 2021.10.0. Version 2021.11.2 fixes a couple of deadlock bugs which were most probably responsible for the timeouts (see https://distributed.dask.org/en/stable/changelog.html#v2021-11-2). We bump the minimum Dask version to 2022.02.0 (; https://distributed.dask.org/en/stable/changelog.html#v2022-02-0) because it is the last version with support for Python 3.7 (the current minimum Python version for distributed RDataFrame). The test suite was run with Dask 2021.10.0 on both Ubuntu and Fedora, showing the timeout. Version 2021.11.2 doesn't timeout.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11371:558,test,test,558,https://root.cern,https://github.com/root-project/root/pull/11371,1,['test'],['test']
Testability,"To have better diagnostics, `TRint::ProcessLineNr()` prepends a `#line 1 ""ROOT_prompt_xxx""` PP directive to each input line. However, this causes problems if the previous line is continued with '\\', e.g.; ```; root [0] #define m(x) printf(""%s"", \; root (cont'ed, cancel with .@) [1]x);; ROOT_prompt_0:2:2: error; '#' is not followed by a macro parameter; ^; ROOT_prompt_0:3:1: error; use of undeclared identifier 'x'; x);; ^; ```. This PR fixes issue #8762. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8772:480,test,tested,480,https://root.cern,https://github.com/root-project/root/pull/8772,1,['test'],['tested']
Testability,"To help cling autoloading. Should fix [these failures in Jenkins](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-master/2889/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/testReport/junit/projectroot/runtutorials/tutorial_dataframe_df024_Display/).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8393:208,test,testReport,208,https://root.cern,https://github.com/root-project/root/pull/8393,1,['test'],['testReport']
Testability,"To reproduce, download http://ccdb-test.cern.ch:8080/download/d64bd450-1619-11ec-a9d5-200114580202 and open it in TBrowser. Works on ubuntu, but on mac I get:. ```; root [2] Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0xdc6299b4 for the class ""array<Long64_t,1>"" in /Users/ktf/Downloads/array<Long64_t,1>_1631706076679.root.; Error in <TBufferFile::CheckByteCount>: object of class array<Long64_t,1> read too few bytes: 6 instead of 14; ```. when clicking on `ccdb_object;1`. Both ROOT 6.24.02 and 6.24.06 seem to be affected.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9001:35,test,test,35,https://root.cern,https://github.com/root-project/root/issues/9001,1,['test'],['test']
Testability,"To reproduce, start ROOT and type `#`.; ```; % root -l ; root [0] #; root.exe: /home/linev/git/webgui/interpreter/cling/lib/MetaProcessor/MetaLexer.cpp:108: void cling::MetaLexer::LexAnyString(cling::Token&): Assertion `Tok.getBufStart() != curPos && ""It must consume at least on char""' failed.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11190:209,Assert,Assertion,209,https://root.cern,https://github.com/root-project/root/issues/11190,1,['Assert'],['Assertion']
Testability,"To reproduce:. ```; xrdcp root://eospublic.cern.ch//eos/root-eos/benchmark/Run2012B_SingleMu.root .; hadd -ff Run2012B_SingleMu10x.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root; ```. On my laptop, with current master, this crashes after a few minutes with:. ```; ~/S/w/coffea-benchmarks (master *=) hadd -ff Run2012B_SingleMu10x.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root Run2012B_SingleMu.root; hadd Target file: Run2012B_SingleMu10x.root; hadd compression setting for all output: 1; hadd Source file 1: Run2012B_SingleMu.root; hadd Source file 2: Run2012B_SingleMu.root; hadd Source file 3: Run2012B_SingleMu.root; hadd Source file 4: Run2012B_SingleMu.root; hadd Source file 5: Run2012B_SingleMu.root; hadd Source file 6: Run2012B_SingleMu.root; hadd Source file 7: Run2012B_SingleMu.root; hadd Source file 8: Run2012B_SingleMu.root; hadd Source file 9: Run2012B_SingleMu.root; hadd Source file 10: Run2012B_SingleMu.root; hadd Target path: Run2012B_SingleMu10x.root:/; Fill: Switching to new file: Run2012B_SingleMu10x_1.root; Fatal in <TFileMerger::RecursiveRemove>: Output file of the TFile Merger (targeting Run2012B_SingleMu10x.root) has been deleted (likely due to a TTree larger than 100Gb); aborting; #0 0x00007fea7e19b48a in wait4 () from /usr/lib/libc.so.6; #1 0x00007fea7e10d09b in do_system () from /usr/lib/libc.so.6; #2 0x00007fea7ea7fdac in TUnixSystem::Exec (this=0x5593666eb200, shellcmd=0x559368e19160 ""/home/blue/ROOT/master/cmake-build-foo/etc/gdb-backtrace.sh 538334 1>&2"") at ../core/unix/src/TUnixSystem.cxx:2108; #3 0x00007fea7ea8069e in TUnixSystem::StackTrace (this=0x5593666eb200) at ../core/unix/src/TUnixSystem.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10102:65,benchmark,benchmark,65,https://root.cern,https://github.com/root-project/root/issues/10102,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Today, I discovered that `ROOT::TestSupport` does not always work as intended: Consider a ROOT7 build without IMT, and the unit tests `tree/ntuple/v7/test/ntuple_extended` and `tree/ntuple/v7/test/ntuple_storage`. Both call `ROOT::EnableImplicitMT()` which results in a warning (this should be fixed separately). `TestSupport.cxx` has a `ForbidDiagnostics noDiagCheckerInstance` that should call `SetErrorHandler` and fail the test if there is an unexpected diagnostic. It turns out this works fine for `ntuple_extended` (which is currently failing in configurations without IMT), but not for `ntuple_storage`. The reason seems to be that `ntuple_storage` doesn't use any other code from `ROOT::TestSupport`, and because it's a static library (since https://github.com/root-project/root/pull/9528) the linker can just skip it. (This was different for the object library before, there you link in the individual object files.). I'm not sure what the best solution is: Is it possible and reasonable to install object libraries? If not, an ugly approach is to emit an undefined symbol from `TestSupport.hxx` that will force the linker to add the static library...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12828:32,Test,TestSupport,32,https://root.cern,https://github.com/root-project/root/issues/12828,8,"['Test', 'test']","['TestSupport', 'test', 'tests']"
Testability,TreePlayer-test: avoid use after delete of TEntryList by TTree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10031:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/10031,1,['test'],['test']
Testability,"Try to diagnose problematic test from #7749. This version of the test checks the success of a minimal ntuple; read-write cycle. If the test fails on CI, we have diagnosed a latent; issue in the RPageSink constructor taking a std::unique_ptr<TFile>&.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7879:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/7879,3,['test'],['test']
Testability,Try to fix PyMVA unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2417:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/2417,1,['test'],['tests']
Testability,"Try to print some hints about why there is this: `Assertion failed: content[posOpenCurly] == '{' && ""No curly at claimed position of opening curly!""`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7297:50,Assert,Assertion,50,https://root.cern,https://github.com/root-project/root/pull/7297,1,['Assert'],['Assertion']
Testability,"Tuple file format will change. Do not store real data with this version of RNTuple!; Error in <TFile::Init>: file test_ntuple_rdf.root has an incorrect header length (1677721600) or incorrect end of file length (-4176807177076801536); *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~; #### gtest-tree-ntuple-v7-test-ntuple-serialize. Endian issue: 256 = 0x0100, expected 0x0001 = 1.; ~~~; 457/1272 Test #432: gtest-tree-ntuple-v7-test-ntuple-serialize ..........................***Failed 0.24 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 14 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 14 tests from RNTuple; [ RUN ] RNTuple.SerializeInt; [ OK ] RNTuple.SerializeInt (0 ms); [ RUN ] RNTuple.SerializeString; [ OK ] RNTuple.SerializeString (0 ms); [ RUN ] RNTuple.SerializeColumnType; [ OK ] RNTuple.SerializeColumnType (0 ms); [ RUN ] RNTuple.SerializeFieldStructure; [ OK ] RNTuple.SerializeFieldStructure (0 ms); [ RUN ] RNTuple.SerializeEnvelope; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_serialize.cxx:121: Failure; Value of: err.what(); Expected: has substring ""CRC32""; Actual: 0x2aa065e7348 pointing to ""The RNTuple format is too new (version 256) (unchecked RResult access!)\nAt:\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t, uint32_t&) [/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:629]\n static RResult<unsigned int> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeEnvelope(const void*, uint32_t) [/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/sr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:11778,test,tests,11778,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['tests']
Testability,"TupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeHeader (0 ms); [ RUN ] RNTuple.SerializeFooter; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeFooter (0 ms); [----------] 14 tests from RNTuple (190 ms total); [----------] Global test environment tear-down; [==========] 14 tests from 1 test suite ran. (190 ms total); [ PASSED ] 12 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.SerializeEnvelope; [ FAILED ] RNTuple.SerializeLocator; 2 FAILED TESTS; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-types. Endian issue:. $ printf '%x\n%x\n' 180388626432 42; 2a00000000; 2a; ~~~; 465/1272 Test #433: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 5.68 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNTuple.TypeName; [ OK ] RNTuple.TypeName (316 ms); [ RUN ] RNTuple.CreateField; [ OK ] RNTuple.CreateField (0 ms); [ RUN ] RNTuple.ArrayField; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:15039,TEST,TESTS,15039,https://root.cern,https://github.com/root-project/root/issues/12426,1,['TEST'],['TESTS']
Testability,Turn the benchmark used to obtain results for CHEP 2023 into a roofit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12839:9,benchmark,benchmark,9,https://root.cern,https://github.com/root-project/root/pull/12839,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Turns out that we forgot to link in ZLIB in libCore. @oshadura could you test? We should make sure the tests are running if we are in `-Dbuiltin_zlib=On/Off`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1189:73,test,test,73,https://root.cern,https://github.com/root-project/root/pull/1189,2,['test'],"['test', 'tests']"
Testability,"Two fixes in CMake, which were in the way for RooFit work:; - Improve documentation/interfaces for passing LinkDefs in `ROOT_STANDARD_LIBRARY_PACKAGE`. Some functions suggest that multiple LinkDefs can be passed, but it doesn't work. I found out when trying to get this done for RooFit. The solution is to refactor all RF linkdefs into one, but with this PR, I want to make it clear that multiple LinkDefs will not work.; - ROOT_ADD_GTEST didn't allow for test labels such as LONGTEST etc. With this change, they are passed on.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4968:456,test,test,456,https://root.cern,https://github.com/root-project/root/pull/4968,1,['test'],['test']
Testability,"Two implementations are provided, i.e. for Python versions older than 3.8, for which PEP 587 is not in force, and newer. # This Pull request:. ## Changes or fixes:; Implements TPython::ExecFile for Python 3. ## Checklist:. - [v] tested changes locally; - [] updated the docs (if necessary). This PR fixes #9058",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13532:229,test,tested,229,https://root.cern,https://github.com/root-project/root/pull/13532,1,['test'],['tested']
Testability,Two more unit tests and a slight refactoring of the existing ones.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1145:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/1145,1,['test'],['tests']
Testability,"Typical example is:. ```; auto h1 = new TH1I(Form(""name%d"",i),Form(""title%d"",i), 100, 0, 100);; ```. Similar interface was used when creating branches. Extreme case when:. ```; Form(""%s_somthing"", Form(""incpsulated%d"", cnt));; ```. In all these places use `TString::Format` instead which returns `TString` instance. Do same in `tmva/tests` and `tmva/tmvagui`. Fixes: https://github.com/root-project/root/issues/13136",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13433:333,test,tests,333,https://root.cern,https://github.com/root-project/root/pull/13433,1,['test'],['tests']
Testability,"UE);; }; ```. Likely disabling template instantiation inside SetClassInfo in this use case. ```; art: /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837: void clang::ClassTemplateSpecializationDecl::setInstantiationOf(clang::ClassTemplatePartialSpecializationDecl*, const clang::TemplateArgumentList*): Assertion `!SpecializedTemplate.is<SpecializedPartialSpecialization*>() && ""Already set to a class template partial specialization!""' failed. . Program received signal SIGABRT, Aborted. 0x00007ffff089a377 in raise () from /lib64/libc.so.6. . #1 0x00007ffff089ba68 in abort () from /lib64/libc.so.6. #2 0x00007ffff0893196 in __assert_fail_base () from /lib64/libc.so.6. #3 0x00007ffff0893242 in __assert_fail () from /lib64/libc.so.6. #4 0x00007fffe33d590f in clang::ClassTemplateSpecializationDecl::setInstantiationOf (this=0x7e8b810, PartialSpec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:1888,test,test-products,1888,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,"UNIX terminals, e.g. vt100, send escape sequences for many special key combinations. Entering the history search mode assigned a specific meaning to the `ESC` character and disabled the processing of escape sequences, thus accidentally printing some characters that are part of a CSI. As a workaround, avoid changing the meaning of `ESC`; users can still use the well-known `ESC ESC` sequence (or any other editor command, e.g. move left/right) to exit the history search mode. This change only affects UNIX terminals. Closes issue #10209. ## Checklist:; - [X] tested changes locally. This PR fixes #10209.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10281:561,test,tested,561,https://root.cern,https://github.com/root-project/root/pull/10281,1,['test'],['tested']
Testability,"UPDATE:; The RDataFrame created in each task can now be modified with the correct entry range of the task via an internal function. The internal representation in case of an RDataFrame with no data source has been modified to store a pair of integers indicating the range, instead of only one integer. This is only for internal purposes, the public API is unchanged. See https://github.com/root-project/roottest/pull/923 for test changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11843:425,test,test,425,https://root.cern,https://github.com/root-project/root/pull/11843,1,['test'],['test']
Testability,Uncomment some different code that is used to compute the discriminat of the; resolvent cubic equation used to find the roots of a quartic equation. ; This different code seems to be better numerically. . This fixes #6900. Add tests for quartic equations to validate code.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6908:227,test,tests,227,https://root.cern,https://github.com/root-project/root/pull/6908,1,['test'],['tests']
Testability,Unconditionally disable multiproc tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12693:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/12693,1,['test'],['tests']
Testability,Undesired behaviour with SetRangeUser & Draw->(“same”) & Log Scale,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12415:57,Log,Log,57,https://root.cern,https://github.com/root-project/root/pull/12415,1,['Log'],['Log']
Testability,Unit tests for Pythonizations,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2449:5,test,tests,5,https://root.cern,https://github.com/root-project/root/pull/2449,1,['test'],['tests']
Testability,"Unlike histograms, `TGraph` points are not necessarily stored in memory in ascending ""X"" coordinate pattern. Generaly speaking, when adding points to the `TGraph`, they are not sorted with respect to their X values. I noticed that this breaks the fitting algorithm. . In my particular case, the `TGraph` was filled ""backwards"" - starting with points with larger X values and adding points in decreasing X. Graph plots just fine and visually looks just the same the same as if it was filled in ascending X manner. However, a simple `""gaus""` fit did not converge and ended up having a negative normalization constant (`Constant` fitting parameter). # This Pull request:; Modifies the way the `BinData` object is populated with `TGraph` points. Instead of adding `TGraph`'s points to the `BinData` in the same pattern they are aligned in the memory, we add points to the `BinData` in strictly ascending order of their X values, starting with lowest. ## Changes or fixes:; An `indexRemap` vector is created prior to populating the `BinData` object for a `TGraph`. This vector governs a new iteration strategy for the `TGraph` points allowing for the adding of the graph points to the `BinData` starting with points with lowest X coordinate values and in ongoing ascending order. ## Checklist:. - [ yes ] tested changes locally; - [ not needed ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11183:1300,test,tested,1300,https://root.cern,https://github.com/root-project/root/pull/11183,1,['test'],['tested']
Testability,"Unlike in the old RooFit, the PDF was not cloned in the BatchMode when a; likelihood object was created with `RooAbsPdf::createNLL`. This caused; trouble in a few places, because changing the state of the NLL changed; the state of the original model. Actually, the model was already cloned when a RooSimultaneous was used,; and because the cloning is only expensive for large simultaneous models,; this change is not expected to have a negative performance impact for; realistic workflows. The `testRooSimultaneous` closure test with a one-channel; RooSimultaneous is now extended to use also the BatchMode, because this; was one of the cases where it failed before the suggested change in this; commit. This PR includes a second technical commit with some code modernization in `stressRooFit`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11406:495,test,testRooSimultaneous,495,https://root.cern,https://github.com/root-project/root/pull/11406,2,['test'],"['test', 'testRooSimultaneous']"
Testability,"Unloading/PCH/VTables.C' FAILED ********************; 1: Script:; 1: --; 1: : 'RUN: at line 1'; mkdir -p ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path"" || true; 1: : 'RUN: at line 2'; rm -f ""CompGen.h.pch"" && rm -f ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch""; 1: : 'RUN: at line 3'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o CompGen.h.pch; 1: : 'RUN: at line 4'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o /srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch; 1: : 'RUN: at line 5'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -Xclang -include-pch -Xclang CompGen.h.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: : 'RUN: at line 6'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -I/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path -include-pch Relative.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: --; 1: Exit Code: 1; 1: ; 1: Command Output (stderr):; 1: --; 1: /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C:11:12: error: CHECK: expected string not found in input; 1: // CHECK: I was executed; 1:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10693:1528,test,test,1528,https://root.cern,https://github.com/root-project/root/issues/10693,1,['test'],['test']
Testability,Until failures on Linux Fedora 39 are understood. This PR is marked as emergency since all fedora39 builds are failing because of this test failure.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16684:135,test,test,135,https://root.cern,https://github.com/root-project/root/pull/16684,1,['test'],['test']
Testability,"Up to now comments were ignored:; ```; ClassDefOverride(name,version) // class comments; ```. Also fix error of accessing transient memory. Solves some test errors in #9932 . And should fix #9900.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9934:152,test,test,152,https://root.cern,https://github.com/root-project/root/pull/9934,1,['test'],['test']
Testability,"Up to now there was no way to draw open marker symbols or marker symbols consisting of lines with higher linewidths than the default 1.; I looked into several ways to implement this feature and at the end just added additional marker smbols above the current maximum of 50 with wider lines as proposed by @couet in #4721 . This example plot demonstrates the feature:; ![c2](https://user-images.githubusercontent.com/5320187/72336265-b7977a80-36c0-11ea-8d25-3e3aa0697211.png). Please note that I tested the feature as far as I could. However, I don't have a ROOT installation on Windows or a Mac, so I could not test the corresponding implementations which is why I consider further tests (and especially a build test) mandatory.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4772:495,test,tested,495,https://root.cern,https://github.com/root-project/root/pull/4772,4,['test'],"['test', 'tested', 'tests']"
Testability,Update Enable If pattern in GenVector Vc test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/431:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/431,1,['test'],['test']
Testability,Update root welcome logo to current year,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1935:20,log,logo,20,https://root.cern,https://github.com/root-project/root/pull/1935,1,['log'],['logo']
Testability,Update zlib to 1.2.8 released in Apr 2013. This is a battle tested; version which is used as a base for QAT and Cloudflare zlib forks. roottest passed with no additional issues. Signed-off-by: David Abdurachmanov <David.Abdurachmanov@cern.ch>,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/663:60,test,tested,60,https://root.cern,https://github.com/root-project/root/pull/663,1,['test'],['tested']
Testability,Updated EvaluateAllMethods to output confusion matrix and 1vsRest data for both test data and training data for easier overtraining check. The TMVAMultiClassGui now supports generating 1v1 roc curves. Fixes bug where generated multiclass roc curves were not save to disk when created. Adds correctness tests for the ROCCurve class.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/707:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/707,2,['test'],"['test', 'tests']"
Testability,"Updated code the test unit, all tests for TMVA are OK!. Cheers,; Omar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/129:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/129,2,['test'],"['test', 'tests']"
Testability,Updated the reference file for ATLAS in stressGeometry test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3175:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/3175,1,['test'],['test']
Testability,Updating CMake typo in tree test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2909:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/2909,1,['test'],['test']
Testability,Updating size of the file for stress test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2938:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/2938,1,['test'],['test']
Testability,"Uploading the logic for discussion. This needs a test that actually pinpoints the problem. Brief description of original issue: ; When launching a distributed RDF application with Dask from SWAN (and only specifically from SWAN) to a cluster of VMs, a `ModuleNotFoundError` is triggered for a missing `pyspark` module, even though the application doesn't use Spark in any way. At the moment this issue cannot be reproduced launching the same application from one of the VMs to the others or on my local machine.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9972:14,log,logic,14,https://root.cern,https://github.com/root-project/root/pull/9972,2,"['log', 'test']","['logic', 'test']"
Testability,"Upon creating an RNTupleInspector, we check whether the compression settings are consistent across all columns. Some column ranges may have been constructed upon read (e.g. in the context of late model extension) and therefore have no compression settings to begin with. These column ranges should not cause the RNTupleInspector to throw. This PR partially addresses #15661. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15759:381,test,tested,381,https://root.cern,https://github.com/root-project/root/pull/15759,1,['test'],['tested']
Testability,"Upstream moved away from manually declaring `*def` and `*inc` files. These are now auto-generated with tablegen. This patch does the same for cling, making it easier to rebase and maintain. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14628:255,test,tested,255,https://root.cern,https://github.com/root-project/root/pull/14628,1,['test'],['tested']
Testability,Use CMAKE_BINARY_DIRECTORY/ginclude instead of /include for tmva/sofie/test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8809:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/8809,1,['test'],['test']
Testability,Use CMake logical operator AND,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5509:10,log,logical,10,https://root.cern,https://github.com/root-project/root/pull/5509,1,['log'],['logical']
Testability,Use RSofieReader in the PyTorch parser to Model. This avoids having some PyTorch error or warnings when generating the models that were triggering a build failure in the CI. Now in the PyTorch parser tests the ; model parsing and evaluation using SOFIE can be done all at once by using the RSofieReader class. Use .keras instead of .h5 for saving keras models in the TestRModelParserKeras to avoid a warning when building. From tensorflow 2.13 it is reccomended to use .keras for the saved keras files instead of .h5.; .h5 file are still used instead for the PyKeras tests to avoid failures seen when using .keras,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13533:200,test,tests,200,https://root.cern,https://github.com/root-project/root/pull/13533,3,"['Test', 'test']","['TestRModelParserKeras', 'tests']"
Testability,"Use RWebWindow for main widget with buttons, help widget with infos and web-based geometry viewer for geometry display. This requires number of changes in base RWebWindow class:. 1. Let configure position and size of RWebWindow, including support in chrome, CEF and Qt5; 2. Make more methods in RWebWindow `const`, declaring used mutexes `mutable`; 3. Let submit data to web window, which is started but not yet connected to server. Redesign visiible nodes selection algorithm in geometry viewer. Now logic is similar to normal TGeoPainter of ROOT. Plus extra control over maximal allowed number of faces/vertices. Update JSROOT with latest changes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4166:501,log,logic,501,https://root.cern,https://github.com/root-project/root/pull/4166,1,['log'],['logic']
Testability,Use __CLING__ flag to test if interpreter is used,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5785:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/5785,1,['test'],['test']
Testability,Use __CLING__ flag to test if interpreter is used and update the help.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5785:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/5785,1,['test'],['test']
Testability,Use __cplusplus to test the existence of std::span,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11311:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/11311,1,['test'],['test']
Testability,Use `/Ob2` (Inline Function Expansion 2) with `RelWithDebInfo`.; This is the default value under `/O1` and `/O2`. Allows the compiler to expand any function not explicitly marked for no inlining.; This fixes the failing `test-check-nullptr` and `roottest-cling-exception-nullderef-e` tests with ROOT built in `RelWithDebInfo`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16477:221,test,test-check-nullptr,221,https://root.cern,https://github.com/root-project/root/pull/16477,2,['test'],"['test-check-nullptr', 'tests']"
Testability,"Use chain->Add(""filename?#treename"") instead of; ""filename?query#treename"" in TTreeProcessorMT. With the latter form, '?query' is appended to the filenames in RDF; logs. Thank you for the tip Vincenzo!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8883:164,log,logs,164,https://root.cern,https://github.com/root-project/root/pull/8883,1,['log'],['logs']
Testability,Use consistent wording of the comments in the different TMVA classification tests to avoid confusion,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12375:76,test,tests,76,https://root.cern,https://github.com/root-project/root/pull/12375,1,['test'],['tests']
Testability,Use correct suffix (`.dll` on Windows and `.so` elsewhere) and test also loading/unloading` in threads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13473:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/13473,1,['test'],['test']
Testability,"Use different file names (instead of `TMVA.root` everywhere), to prevent potential conflicts when running the test concurrently. Trying to solve the following kind of error on Windows:; ```; SysError in <TFile::TFile>: could not delete C:\ROOT-CI\build\runtutorials\TMVA.root (errno: 13) Permission denied; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13576:110,test,test,110,https://root.cern,https://github.com/root-project/root/pull/13576,2,['test'],['test']
Testability,Use file cache when accessing remote files during testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/404:50,test,testing,50,https://root.cern,https://github.com/root-project/root/pull/404,1,['test'],['testing']
Testability,Use for bin edge comparisons an epsilon abs value that is computed a a fraction of bin width. This would give a more robust comparison test.; This PR should fix what has been suggested in ROOT-7752,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3341:135,test,test,135,https://root.cern,https://github.com/root-project/root/pull/3341,1,['test'],['test']
Testability,"Use headless Chrome browser, running from file system.; No any HTTP server required.; Following formats are supported: png, pdf, svg, jpeg, webp; Requires that chrome is installed on all test machines; Tested on Linux, Mac and Windows; Exactly same code used with TWebCanvas",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4855:187,test,test,187,https://root.cern,https://github.com/root-project/root/pull/4855,2,"['Test', 'test']","['Tested', 'test']"
Testability,Use logical operators for boolean operands,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10787:4,log,logical,4,https://root.cern,https://github.com/root-project/root/pull/10787,1,['log'],['logical']
Testability,Use more meaningful name in CSV datasource test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9230:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/9230,1,['test'],['test']
Testability,"Use random numbers in the file names created during unit tests, so that concurrent unit tests don't remove each others files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4208:57,test,tests,57,https://root.cern,https://github.com/root-project/root/pull/4208,2,['test'],['tests']
Testability,Use tolerance to compare floating point numbers in testGenVector.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/498:51,test,testGenVector,51,https://root.cern,https://github.com/root-project/root/pull/498,1,['test'],['testGenVector']
Testability,Users are usually not interested in this level of detail and; they will typically use log level kInfo.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11341:86,log,log,86,https://root.cern,https://github.com/root-project/root/pull/11341,1,['log'],['log']
Testability,"Users can now pass a map to the `RCsvDS` constructor as an additional; argument to specify column types of their choice.; Supported types remain: double, Long64_t, bool, std::string.; Type aliases follow `TTreeReader`, i.e.:; * 'O' for boolean; * 'D' for double; * 'L' for Long64_t; * 'T' for std::string. `RCsvDS` now supports ready empty cells and now introduces special variables ""NaN"" and ""nan"" to be read as `nan`. Note that only double has actual `nan`, so for booleans and Long64_t-s, 0 is set in this case. Corresponding tests are added. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #9561",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10488:529,test,tests,529,https://root.cern,https://github.com/root-project/root/pull/10488,2,['test'],"['tested', 'tests']"
Testability,Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:2211,Test,Test,2211,https://root.cern,https://github.com/root-project/root/pull/5054,8,"['Test', 'test']","['Test', 'test']"
Testability,Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels));,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:6519,Test,Test,6519,https://root.cern,https://github.com/root-project/root/pull/5054,2,"['Test', 'test']","['Test', 'test']"
Testability,Uses the same logic as https://github.com/root-project/root/blob/9d0ae186d7b0556e7673987d3c50594697e73bb3/bindings/pyroot/pythonizations/CMakeLists.txt#L139,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13251:14,log,logic,14,https://root.cern,https://github.com/root-project/root/pull/13251,1,['log'],['logic']
Testability,Using TFile::Open produces an Error message catch by the jenkins rules declaring the doc failure. These changes test the file existence before using them. A warning (not an Error) is printed if not.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10471:112,test,test,112,https://root.cern,https://github.com/root-project/root/pull/10471,1,['test'],['test']
Testability,"Using the same filename can cause races when running the tests in; parallel. I noticed because of this test failure: https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/128243/testReport/projectroot.tree.ntuple.v7/test/gtest_tree_ntuple_v7_test_ntuple_cluster/. And then:. ```; $ rg test_ntuple_clusters.root; tree/ntuple/v7/test/ntuple_basics.cxx; 140: FileRaii fileGuard(""test_ntuple_clusters.root"");. tree/ntuple/v7/test/ntuple_cluster.cxx; 279: FileRaii fileGuard(""test_ntuple_clusters.root"");; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9192:57,test,tests,57,https://root.cern,https://github.com/root-project/root/pull/9192,6,['test'],"['test', 'testReport', 'tests']"
Testability,V ��2V�v�2V��2V ��2V 	��2V not found.; Module @�ĉ7VPh%�2V@h%�2V@s%�2V0s%�2V�N��2V�N��2VQ��2VQ��2V@S��2V0S��2V �8�2V not found.; Module !p�w��:�2 not found.; Module ��=\u��&���g|��Xϭ)��ۡc}n?�ʾ��v� �z�� not found.; Module not found.; Module ��ĉ7V99cl_khr_gVs_�0���2V;;e>khr_fp16 not found.; Module not found.; Module GeneticMinimizer not found.; Module �[h�A�2V�[h�<��[h�0�#\h���K\h� not found.; Module �� not found.; Module module not found.; Module base_1621��7VP\�2Vl_khr_f not found.; Module not found.; Module not found.; Module �'��&E'��'�Q|�~ not found.; Module Q����2V�; ��2V����a3 not found.; Module е8�2V��8�2VP�8�2V@�8�2V��8�2V��8�2V�K�Q7V��2V>��� not found.; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libNet_rdict.pcm file does not exist; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libMathCore_rdict.pcm file does not exist. (int) 2; ```. on the third:. ```; <<< cling interactive line includer >>>: remark: building module 'ROOTVecOps' as '/home/cburr/miniconda3/envs/test/lib/ROOTVecOps.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'ROOTVecOps' [-Rmodule-build]; (truncated but it's similar to above); ```. on the **fourteenth**:. ```; <<< cling interactive line includer >>>: remark: building module 'TMVA' as '/home/cburr/miniconda3/envs/test/lib/TMVA.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'TMVA' [-Rmodule-build]; Module FitterBase not found.; Module (�;cU! ��;cUpJ��� not found.; Module TMVA.pcmoRTTI not found.; Module not found.; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libNet_rdict.pcm file does not exist; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/miniconda3/envs/test/lib/libMathCore_rdict.pcm file does not exist. (int) 2; ```. on the **fifteenth** run it finally becomes stable with this output:. ```; Error in <TCling::LoadPCM>: ROOT PCM /home/cburr/mini,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:4946,test,test,4946,https://root.cern,https://github.com/root-project/root/issues/8518,1,['test'],['test']
Testability,V7 TPadExtent tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1000:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/1000,1,['test'],['tests']
Testability,V7 hist test fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4931:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/4931,1,['test'],['test']
Testability,VA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1761,log,logger,1761,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,Various clean-ups to the even loop logic of TDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/691:35,log,logic,35,https://root.cern,https://github.com/root-project/root/pull/691,1,['log'],['logic']
Testability,"Various developments to prepare the `stressRooFit` executable for the; newly developed batch mode. With the `-q` option, stressRooFit will not log all the errors in a; given test, but will only report the test as FAILED when there were any; errors. Tis is useful during development, allowing the developer to see which; tests pass and fail at one glance without having to endlessly scroll; through the ouput that gets chopped up by the detailed reports on which; comparisons failed in a given test. Furthermore, this PR also introduced a `-b` option to run all fits in batch; mode. Finally, there is a little change such that all datasets in `stressRooFit` use; the vector datastore, including a bugfix in `RooAbsData` to make; `convertToVectorStore` work correctly even if the `storageType` was; wrongly defined in the dataset.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9178:143,log,log,143,https://root.cern,https://github.com/root-project/root/pull/9178,5,"['log', 'test']","['log', 'test', 'tests']"
Testability,"Vec<bool> , ROOT::Detail::RDF::RNodeBase, TH1D>' requested here; ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, ROOT::VecOps::RVec<Bool_t>>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x563bdc7d7910), {""Muon_tightId""}, 1, reinterpret_cast<weak_ptr<TH1D>*>(0x563bdc7d77a0), reinterpret_cast<std::weak_ptr<ROOT::Internal::RDF::RJittedAction>*>(0x563bdc7d7a80), reinterpret_cast<ROOT::Internal::RDF::RBookedCustomColumns*>(0x563bdc7d9150));; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RVec.hxx:387:19: note: selected 'begin' function with iterator type 'ROOT::VecOps::RVec<bool>::const_iterator' (aka 'std::_Bit_const_iterator'); const_iterator begin() const noexcept { return fData.begin(); }; ^; In module 'ROOTDataFrame':; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/ActionHelpers.hxx:190:18: error: non-const lvalue reference to type 'bool' cannot bind to a temporary of type 'std::_Bit_const_iterator::const_reference' (aka 'bool'); for (auto &v : vs) {; ^ ~; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:237:33: note: in instantiation of function template specialization 'ROOT::Internal::RDF::FillHelper::Exec<ROOT::VecOps::RVec<bool>, 0>' requested here; ActionCRTP_t::GetHelper().Exec(slot, std::get<S>(fValues[slot]).Get(entry)...);; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:149:41: note: in instantiation of function template specialization 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::Exec<0>' requested here; static_cast<Action_t *>(this)->Exec(slot, entry, TypeInd_t());; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:223:4: note: in instantiation of member function 'ROOT::Internal::RDF::RActionCRTP<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:4513,test,test-jupyroot,4513,https://root.cern,https://github.com/root-project/root/issues/6675,1,['test'],['test-jupyroot']
Testability,"Very basic CSS parser to have something which produces RStyle from CSS.; Provide correspondent tests; Also improve i/o tests for RHistDrawable, where shared_ptr is involved",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5035:95,test,tests,95,https://root.cern,https://github.com/root-project/root/pull/5035,2,['test'],['tests']
Testability,"Very preliminary prototype for graphical editor elements. Now only TAttLine and TAttFill are handled (again, very primitive) . Idea to test main functionality, see relationship between components. Also testing of OpenUI5 components. Layout and concrete implementation should be improved a lot. I set @Axel-Naumann as reviewers while @bellenot is in vacations.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/862:135,test,test,135,https://root.cern,https://github.com/root-project/root/pull/862,2,['test'],"['test', 'testing']"
Testability,"Veto also tutorial tests of RooStats and HistFactory if ROOT was built without RooFit. Also removes the `fit/RooFitdemo.C` tutorial from the veto list, as this tutorial doesn't exist anymore. Partially closes #11605.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11609:19,test,tests,19,https://root.cern,https://github.com/root-project/root/pull/11609,1,['test'],['tests']
Testability,Veto roostats tutorial TestNonCentral.C when mathmore is not present.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5859:23,Test,TestNonCentral,23,https://root.cern,https://github.com/root-project/root/pull/5859,1,['Test'],['TestNonCentral']
Testability,Veto tests using clad when clad is disabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12403:5,test,tests,5,https://root.cern,https://github.com/root-project/root/pull/12403,1,['test'],['tests']
Testability,Visible in test failure gtest_tree_treeplayer_test_treeprocessormt on ARM with 256 cores,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5049:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/5049,1,['test'],['test']
Testability,"Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tests from 1 test suite ran. (7848 ms total); [ PASSED ] 16 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.StdPair; [ FAILED ] RNTuple.StdTuple; 2 FAILED TESTS. ~~~. gtest-tree-ntuple-v7-test-ntuple-extended fails with:; Fatal: fWritePage[otherIdx].IsEmpty() violated. ~~~; 520/1318 Test #454: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 73.15 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.RealWorld1 (9118 ms); [ RU",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:3553,Test,Test,3553,https://root.cern,https://github.com/root-project/root/issues/12427,1,['Test'],['Test']
Testability,"We *know* C++20 is failing the test suite, make the builds green by adding C++20 support to a PR rather than master. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12837:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/12837,2,['test'],"['test', 'tested']"
Testability,"We accidentially check and annotate the return type of the function twice for; being a pointer/reference type when we do the ""else"" part of the; wrapper. This patch removes this wrong second check and extends; the tests to check that the cast in both branches of the if/else; is correct.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/667:214,test,tests,214,https://root.cern,https://github.com/root-project/root/pull/667,1,['test'],['tests']
Testability,"We always wanted to use ""old"", and my prior attept to convince CMake to use ""DOWNLOAD_EXTRACT_TIMESTAMP false"" did not work. So instead of passing this to each ExternalProject_Add, just switch the global policy to OLD. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11846:284,test,tested,284,https://root.cern,https://github.com/root-project/root/pull/11846,1,['test'],['tested']
Testability,"We always wanted to use ""old"", and my prior attept to convince CMake to use ""DOWNLOAD_EXTRACT_TIMESTAMP false"" did not work. So instead of passing this to each ExternalProject_Add, just switch the global policy to OLD. (cherry picked from commit 51302692c483755d4d70a87dc39706bab72b1bf7). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11845:354,test,tested,354,https://root.cern,https://github.com/root-project/root/pull/11845,1,['test'],['tested']
Testability,"We assumed that we will always have module file and unconditionally disable; header parsing on demand. However, the major use-case is gradual migration; to modules. In this scenario (tested by root-meta-fwdDecls-fwdDeclarations),; we have a dictionary which has no module file and still relies on the old; behavior. This can realistically happen when users gradually migrate to; modules. For example, we have modules-aware ROOT and untouched third party; code. This patch enables header parsing on demand when we have no module file; available.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2721:183,test,tested,183,https://root.cern,https://github.com/root-project/root/pull/2721,1,['test'],['tested']
Testability,"We can't use the interpreter when generating a PCM as this would; generate AST nodes which then would end up in the module, which; is causing a long chain of modules (such as redefinitons as we; suddenly have the same cling warpper function multiple times). In this code path we seem to always have a number that we want; to convert to a string. So let's just use atol instead here if; the argument is just a number, which should avoid the issue with; the generated code. As we also now check if the input is a number, I added an assert; that verifies we only call atol when the string is actually a; number.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/807:530,assert,assert,530,https://root.cern,https://github.com/root-project/root/pull/807,1,['assert'],['assert']
Testability,"We currently don't support numba 0.60.0 yet:; https://github.com/root-project/root/blob/master/requirements.txt#L17. One can see the problem when going into `roottest/python/numba` and running the test there:; ```bash; python PyROOT_numbatests.py; ```. Output with ROOT master and numba 0.59, where it's only a warning:; ```txt; PyROOT_numbatests.py::TestClasNumba::test03_inheritance; /home/rembserj/spaces/master/root/src/root/roottest/python/numba/PyROOT_numbatests.py:107: NumbaPendingDeprecationWarning: Code using Numba extension API maybe depending on 'old_style' error-capturing, which is deprecated and will be replaced by 'new_style' in a future release. See details at https://numba.readthedocs.io/en/latest/reference/deprecation.html#deprecation-of-old-style-numba-captured-errors; Exception origin:; File ""/home/rembserj/spaces/master/install/lib/root/cppyy/numba_ext.py"", line 349, in generic_resolve; f = typ._scope.__dict__[attr]; ~~~~~~~~~~~~~~~~~~~^^^^^^. return obj.get_one(). -- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html; ```. Supporting numba 0.60.0 would be nice, because 0.59.0 doesn't support NumPy 2 yet. Thus, our current environment falls back to NumPy 1 and we are lacking NumPy 2 test support.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16201:197,test,test,197,https://root.cern,https://github.com/root-project/root/issues/16201,3,"['Test', 'test']","['TestClasNumba', 'test']"
Testability,We disabled that test in https://github.com/root-project/root/pull/14281. Relevant test failure output:; ```; ROOT::TestSupport::ForbidDiagnostics::handler(): Diagnostic in 'TUnixSystem::ACLiC':; creating shared library /github/home/ROOT-CI/build/core/metacling/test/concurrent_load_unload_one_lib_per_thread_4_cpp.so; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; CMake Error at /github/home/ROOT-CI/src/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14121:17,test,test,17,https://root.cern,https://github.com/root-project/root/issues/14121,4,"['Test', 'test']","['TestSupport', 'test']"
Testability,"We do not want to remember the build directory, see issue #7108. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9520:130,test,tested,130,https://root.cern,https://github.com/root-project/root/pull/9520,1,['test'],['tested']
Testability,"We do not want to remember the build directory, see issue #7108. (cherry picked from commit c2f028feb6da152ff07020b3b4b2a961c1af315e). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9533:200,test,tested,200,https://root.cern,https://github.com/root-project/root/pull/9533,1,['test'],['tested']
Testability,We don't need any input_line declration from rootmap for startup time. However it may cause a failure on tests when they have custom dictionaries.; ; Should give 5MB improvements for modules.; ; Patch by Yuka Takahashi and me!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3043:105,test,tests,105,https://root.cern,https://github.com/root-project/root/pull/3043,1,['test'],['tests']
Testability,"We don't need any input_line declration from rootmap for startup time.; However it may cause a failure on tests when they have custom; dictionaries. Gives 5MB impr for modules, but still Testing!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2892:106,test,tests,106,https://root.cern,https://github.com/root-project/root/pull/2892,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"We don't use it in our configuration of civetweb, and it will be removed in upcoming versions of Fedora and RHEL:. https://github.com/dotnet/runtime/issues/104775#issuecomment-2229857943. This change is tested by all CI platforms, because globally we set `http=ON`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16749:203,test,tested,203,https://root.cern,https://github.com/root-project/root/pull/16749,1,['test'],['tested']
Testability,"We had test failures in runtime nightlies such as this one:; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/95/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/junit/projectroot.roottest.root.math/smatrix/roottest_root_math_smatrix_testKalman/. Failures were due to what @pcanal commented in #2135, that some so files in; roottest doesn't have external linkage. (It means that if you call; dlopen(libfoo.so), linux kernel can't find dependency libraries and it; emits ""undefined symbol"" error when they try to initialize global; variables in libfoo.so but couldn't find symbol definition); With pch, rootmap files were providing information about the depending library. However we stopped generating rootmap files in #2127 and that's why we; got these failures. To fix this issue, I implemented a callback to; TCling which gets called when DynamicLibraryManager fails with; ""undefined error"". I'm open to suggestion especially in DynamicLibraryManager.cpp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2154:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/2154,2,['test'],"['test', 'testReport']"
Testability,"We had test failures in runtime nightlies such as this one:; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/95/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/testReport/junit/projectroot.roottest.root.math/smatrix/roottest_root_math_smatrix_testKalman/; https://epsft-jenkins.cern.ch/view/ROOT/job/root-nightly-runtime-cxxmodules/BUILDTYPE=Debug,COMPILER=gcc62,LABEL=slc6/lastCompletedBuild/testReport/projectroot.roottest.root.meta/evolution/roottest_root_meta_evolution_execMixedBaseClass_v2/. Failures were due to what @pcanal commented in #2135, that some so files in; roottest doesn't have external linkage. (It means that if you call; dlopen(libfoo.so), linux kernel can't find dependency libraries and it; emits ""undefined symbol"" error when they try to initialize global; variables in libfoo.so but couldn't find symbol definition); With pch, rootmap files were providing information about the depending library. However we stopped generating rootmap files in #2127 and that's why we; got these failures. To fix this issue, I implemented a callback to; TCling which gets called when DynamicLibraryManager fails with; ""undefined error"". I'm open to suggestion especially in DynamicLibraryManager.cpp.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2148:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/2148,3,['test'],"['test', 'testReport']"
Testability,"We have another class with the name Compare in TMatrixTBase.h, so we add a; anonymous namespace here that we don't fail on this test when building with; enabled modules.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/398:128,test,test,128,https://root.cern,https://github.com/root-project/root/pull/398,1,['test'],['test']
Testability,"We have failures in our nightly builds for some MacOS builds, for example [here](https://lcgapp-services.cern.ch/root-jenkins/view/ROOT%20Nightly/job/root-nightly-v6-22-00-patches/LABEL=mac1015,SPEC=noimt,V=6-22/lastCompletedBuild/testReport/) (v6.22, mac10.15). The issue seems to be caused by multiple python versions installed (e.g. system python3 and python3 coming with Xcode 12): it seems that ROOT picks up different versions at different times causing stacktraces that look like this:. ```; Processing /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/root/tutorials/tmva/TMVA_CNN_Classification.C...; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; Reason: image not found; Error in <TCling__LazyFunctionCreatorAutoloadForModule>: Failed to load library /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; cling::DynamicLibraryManager::loadLibrary(): dlopen(/Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so, 9): Library not loaded: @rpath/Python3.framework/Versions/3.8/Python3; Referenced from: /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; Reason: image not found; Error in <TCling__LazyFunctionCreatorAutoloadForModule>: Failed to load library /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/lib/libPyMVA.so; IncrementalExecutor::executeFunction: symbol '_ZN4TMVA12PyMethodBase12PyInitializeEv' unresolved while linking [cling interface function]!; You are probably missing the definition of TMVA::PyMethodBase::PyInitialize(); Maybe you need to load the corresponding shared library?; CMake Error at /Users/sftnight/build/night/LABEL/mac1015/SPEC/noimt/V/6-22/build/RootTestDriver.cmake:237 (message):",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6563:231,test,testReport,231,https://root.cern,https://github.com/root-project/root/issues/6563,1,['test'],['testReport']
Testability,"We have recently discovered a critical bug in RooFit which (under some arcane circumstances) causes the last bin to go missing from a `RooHistFunc`. Notably, the occurence of this effect is a rounding issue that only happens for some values of upper bounds of observables. . I have attached a python test case that showcases the problem. The assertion in the last line will fail in the current master of ROOT, but will succeed using the bugfix in this MR. import ROOT; from math import pi; ; xmin = -25.2; xmax = 6.3; nbins = 35; hfname = ""hists.root""; ; histfile = ROOT.TFile.Open(hfname,""RECREATE""); ; signalSR = ROOT.TH1F(""signalSR"",""signal"",nbins,xmin,xmax); signalSR.FillRandom(""gaus""); ; backgroundSR = ROOT.TH1F(""backgroundSR"",""background"",nbins,xmin,xmax); backgroundSR.FillRandom(""pol0""); ; signalCR = ROOT.TH1F(""signalCR"",""signal"",nbins,xmin,xmax); signalCR.FillRandom(""pol0""); ; backgroundCR = ROOT.TH1F(""backgroundCR"",""background"",nbins,xmin,xmax); backgroundCR.FillRandom(""pol0""); ; histfile.Write(); histfile.Close(); ; sigSR = ROOT.RooStats.HistFactory.Sample(""signal"","""",hfname,""signalSR""); sigSR.AddNormFactor(""mu"",1.,0.,10.,False); bkgSR = ROOT.RooStats.HistFactory.Sample(""background"","""",hfname,""backgroundSR""); bkgSR.AddNormFactor(""norm"",1.,0.,10.,False); ; sr = ROOT.RooStats.HistFactory.Channel(""SR""); sr.AddSample(sigSR); sr.AddSample(bkgSR); ; sigCR = ROOT.RooStats.HistFactory.Sample(""signal"","""",hfname,""signalCR""); sigCR.AddNormFactor(""mu"",1.,0.,10.,False); bkgCR = ROOT.RooStats.HistFactory.Sample(""background"","""",hfname,""backgroundCR""); bkgCR.AddNormFactor(""norm"",1.,0.,10.,False); ; cr = ROOT.RooStats.HistFactory.Channel(""CR""); cr.AddSample(sigCR); cr.AddSample(bkgCR); ; ; meas = ROOT.RooStats.HistFactory.Measurement(""meas""); meas.AddChannel(sr); meas.AddChannel(cr); . meas.CollectHistograms(); ws = ROOT.RooStats.HistFactory.HistoToWorkspaceFactoryFast.MakeCombinedModel(meas); pdf = ws.pdf(""model_SR""); obs = ws.var(""obs_x_SR""); hist = pdf.createHistogram(""hist"",obs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1916:300,test,test,300,https://root.cern,https://github.com/root-project/root/pull/1916,2,"['assert', 'test']","['assertion', 'test']"
Testability,We implement a workaround for ctest. ROOT_ADD_TEST cmake macro adds a test executable by invoking CMAKE_COMMAND -DCMD=... This breaks our FindLibraryName function which depends on dladdr and the cmake executable confuses it. This branch is not taken outside of ctest where the code just works. This was broken before but worked because we scanned all possible dynamic paths for rdict files which is redundant.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3747:70,test,test,70,https://root.cern,https://github.com/root-project/root/pull/3747,1,['test'],['test']
Testability,"We implemented an iterator for field metadata in #5848, which I used to simplify `RNTupleDS` construction. I thought I'd also take the opportunity to start a `RNTupleDS` test suite (as seen at the DataFrame level, there's existing functionality tests over here: https://github.com/root-project/root/blob/master/tree/ntuple/v7/test/ntuple_rdf.cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5910:170,test,test,170,https://root.cern,https://github.com/root-project/root/pull/5910,3,['test'],"['test', 'tests']"
Testability,We incorporate a commit made originally in Cppyy in order to fix a difference of behavior between Linux and MacOs machines. For the full details please refer to:. https://bitbucket.org/wlav/cppyy/issues/132/missing-assignment-of-tp_iternext-in. This commit should make the following test:. tutorial-vecops-vo004_SortAndSelect-py. succeed also on MacOs machines.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4117:283,test,test,283,https://root.cern,https://github.com/root-project/root/pull/4117,1,['test'],['test']
Testability,"We lack a tutorial and/or a documentation of the pythonization for `ROOT.RDF.MakeNumpyDataFrame`. So far, the best documentation is in the tests [here](https://github.com/root-project/root/blob/master/bindings/pyroot/pythonizations/test/rdataframe_makenumpy.py).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6953:139,test,tests,139,https://root.cern,https://github.com/root-project/root/issues/6953,2,['test'],"['test', 'tests']"
Testability,"We might be in a situation where we linked the library into an executable and; our trigger function is inside it. There is no point in trying to load rdict; and pcm files as it will fail. In that case we exit early avoiding the; invalid state pointed by an assert. This patch is another try to fix the assert in the incrementals. @Axel-Naumann, I have tested and this patch fixes the assert. However it does not fix the test failure. I checked with a local alternative patch which did not have the early exit but just avoided the LoadPCM section and the test fails in the same way.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3896:257,assert,assert,257,https://root.cern,https://github.com/root-project/root/pull/3896,6,"['assert', 'test']","['assert', 'test', 'tested']"
Testability,"We need changes because of a new format for compression settings.; We can see failure on Windows. Test 2 : Check size & compression factor of a Root file........ FAILED; last =10034, comp=2.193206",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2938:98,Test,Test,98,https://root.cern,https://github.com/root-project/root/pull/2938,1,['Test'],['Test']
Testability,"We need to be able to build release binaries. This is likely somehow connected also to the new CI :-) @smuzaffar I'd be interested to hear your thoughts on this... Maybe we can address this (and still enable https://github.com/root-project/root/issues/12270) by the following sequence for the regular CI:. 1. build ROOT; 2. build the (tar.gz|rpm|deb|...) package; 4. delete build and source dir; 5. unpack the tar.gz package; 6. run roottest; 7. if release: make package available on root.cern. Installing a `.pkg` file on macOS, or an install package on Windows will be very intrusive, so maybe there we can only do steps 5 and 6 using a tar.gz / zip, but that's already better than what we have today. The goal should be to ""test what we release"".",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12272:727,test,test,727,https://root.cern,https://github.com/root-project/root/issues/12272,1,['test'],['test']
Testability,"We now reset `fMustRunEventLoop` when a new named filter is added.; This fixes ROOT-9117: TDF now correctly re-runs the event-loop if; users ask for a cutflow report for a named filter that has been; added after a first event-loop has already been performed. In the future we might want to improve the inner logic so that; only the new named filters (and possibly new actions) are executed,; but the old filters are not re-run if not needed. [PR 109](https://github.com/root-project/roottest/pull/109) in roottest adds a test for this scenario.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1377:308,log,logic,308,https://root.cern,https://github.com/root-project/root/pull/1377,2,"['log', 'test']","['logic', 'test']"
Testability,"We prefer keeping as much data and logic as possible in the non-template; base classes (RFilterBase, RDefineBase, etc.) rather than in the; concrete templated implementations (RFilter, RDefine) so that compiler; and interpreter have to generate a bit less code. (these changes are a by-product of the work on systematics, but since they are standalone it's possible to review them separately).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9186:35,log,logic,35,https://root.cern,https://github.com/root-project/root/pull/9186,1,['log'],['logic']
Testability,"We removed the pytest shipped with roottest because the source code was from 2014 and incompatible with py3.9 (see #6597). However, this poses now the issue on MacOs with python2 that we have to install pytest. Without a virtual environment, MacOS does not allow to pip packages. Since roottest fails on configuration level without pytest, roottest is currently broken in this configuration. @axel @oshadura What should we do? Our CI always runs roottest against python3, so we currently don't see the issue in our infrastructure. I see three options:; 1. Ditch testing of python2 on MacOS and rely on the test coverage of other platforms (python2 is anyway dead); 2. Use a venv overlay in Jenkins for the MacOS nodes (haven't tested but it should work and is binary compatible with the system python); 3. We change the hard failure of roottest to a soft failure.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6686:562,test,testing,562,https://root.cern,https://github.com/root-project/root/issues/6686,3,['test'],"['test', 'tested', 'testing']"
Testability,We replace it with a combination of a global property and an additional custom target.; The global property is used to collect the dependencies created before the modules.idx target is created.; The custom target is used as a direct dependency of the custom_command (add_dependencies can not be used on the target of a custom_command). Then we can use; this custom target to collect the dependencies created after the modules.idx target. This fixes #10510. To test:. ```; ls -rtl lib/modules.idx lib/libEve.so; rm lib/*Eve*; ninja # or make or cmake --build ; this should update modules.idx; ls -rtl lib/modules.idx lib/libEve.so; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11506:460,test,test,460,https://root.cern,https://github.com/root-project/root/pull/11506,1,['test'],['test']
Testability,We see several timeouts when running in coverage mode; this might help. We also really do not care about coverage of interpreter/: there are dedicated test suites that are not run as part of testing ROOT. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13490:151,test,test,151,https://root.cern,https://github.com/root-project/root/pull/13490,3,['test'],"['test', 'tested', 'testing']"
Testability,"We see the assert ""Specialization is already registered as lazy"" triggered; due to a hash collision of two sets of template arguments: the arguments; are different but the hash happens to be identical. Be more specific when; claiming that the specialization was already registered as lazy, by not; only comparing the hash, but also the template arguments we found under; that hash key (""structurallyEquals"" is good enough here). Fixes macOS builds with assertions enabled:; $ root.exe -l -b tutorials/multicore/mp001_fillHistos.C; where these two specializations have the same hash:. ClassTemplateSpecializationDecl 0x1019a3478 </Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/type_traits:1364:1, col:113> col:50 imported in std.type_traits hidden <undeserialized declarations> struct remove_reference definition; |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init; | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr; | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param; | |-MoveConstructor exists simple trivial needs_implicit; | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param; | |-MoveAssignment exists simple trivial needs_implicit; | `-Destructor simple irrelevant trivial needs_implicit; `-TemplateArgument type '(lambda at /Users/axel/build/root/master/deb/include/nlohmann/json.hpp:17411:24)'. while looking for the argument. RecordType 0x1038b8be0 'class (lambda at /Users/axel/build/root/master/deb/tutorials/multicore/mp001_fillHistos.C:23:20)'. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9248:11,assert,assert,11,https://root.cern,https://github.com/root-project/root/pull/9248,3,"['assert', 'test']","['assert', 'assertions', 'tested']"
Testability,"We should add the infamous Open Data benchmarks to rootbench. Originally meant to showcase the DF programming model (see https://github.com/stwunsch/opendata-benchmarks), it went now a little bit out of hand and it's used for measuring ROOT performance (see the fork here https://github.com/masonproffitt/opendata-benchmarks and the forum entry here https://root-forum.cern.ch/t/scalability-of-rdataframes-on-16-cores/44222). At the end, they have nice properties, which we should profile, like a significant amount of jitted code and quite a lot of allocations due to the missing SBO in RVec.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7745:37,benchmark,benchmarks,37,https://root.cern,https://github.com/root-project/root/issues/7745,3,['benchmark'],['benchmarks']
Testability,"We should put the Python version check at the right place. Right now, the configuration logs tell you that ROOT requires Python; 3.0, because there is no minimum version yet, which can be misleading. Also, remove some redundant comments about the minimum C++ standard for `root7` and `webgui`. This PR should maybe be backported in one of the bulk backports, so the divergence between 6.32 and `master` doesn't increase too much.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15168:88,log,logs,88,https://root.cern,https://github.com/root-project/root/pull/15168,1,['log'],['logs']
Testability,"We uncovered this bug from the changes in fail-on-missing behavior. The test uses only Vc, and uses it directly:. ```; root/test/testGenVectorVc.cxx:67:30: error: ‘Vc’ was not declared in this scope; typedef std::vector<Data, Vc::Allocator<Data>> Vector;; ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1988:72,test,test,72,https://root.cern,https://github.com/root-project/root/pull/1988,3,['test'],"['test', 'testGenVectorVc']"
Testability,"We want to upload any successful build, even if it fails testing (which makes the step and job fail since commit c8c0ea7c59).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12830:57,test,testing,57,https://root.cern,https://github.com/root-project/root/pull/12830,1,['test'],['testing']
Testability,"We were not as general as we wanted to be:; ```c++; auto f = {""f1.root"", ""f2.root""};; TDataFrame(""tree"", f);; ```; could not compile. Move the responsibility to convert collections of; filenames to vector<string> to users. @dpiparo do you agree with this change? (note that it breaks no tests)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1157:287,test,tests,287,https://root.cern,https://github.com/root-project/root/pull/1157,1,['test'],['tests']
Testability,"We would like to have an option to reparametrise shape-factors, i.e. the per-bin normalisation factors in HistFactory. This would be useful for template fits where different histograms represent different values of some parameter, e.g. mass. Currently, it seems that only NormFactors can be reparametrised and the code crashes with a seg fault when trying to reparametrise the shape factors. See the example attached. [shapeFactorCrash.zip](https://github.com/root-project/root/files/10581134/shapeFactorCrash.zip). ### Describe the solution you'd like; We would like to be able to use HistFactory::Measurement::AddPreprocessFunction for shapefactors. ### Describe alternatives you've considered; There is a workaround by doing this reparametrisation manually, but it cumbersome and errorprone. ### Additional context; Note that even if this is not supported, the code should probably not crash with a seg fault (tested with ROOT Version: 6.27/01)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12225:913,test,tested,913,https://root.cern,https://github.com/root-project/root/issues/12225,1,['test'],['tested']
Testability,WebGUI doesn't work with snap sandboxing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16488:30,sandbox,sandboxing,30,https://root.cern,https://github.com/root-project/root/issues/16488,1,['sandbox'],['sandboxing']
Testability,"Well-known branch names, e.g. `master` or `v6-28-00-patches` always use the equivalent upstream roottest branch. However, we should be careful not to match a substring. Concretely, before this patch, `master-14449` was incorrectly taken as a well-known branch causing the error below.; ```; Cloning into 'roottest'...; fatal: Remote branch master-13449 not found in upstream origin; CMake Error at CMakeLists.txt:780 (message): Expected roottest at 'C:/ROOT-CI/src/roottest' (not a directory?); ```. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13504:521,test,tested,521,https://root.cern,https://github.com/root-project/root/pull/13504,1,['test'],['tested']
Testability,"When PR #4279 was initially sent on Aug 25th, the search for Python was; moved to RootBuildMacros in order to avoid a build failure due ot the; search for another package and the declaration of one of the new CMake; variables.; This seem not to be a problem anymore (something changed in the; meantime?), so the search for Python can be put back to the original; place.; This could also fix the tests failing with cxx17 due to a mismatch; between Python executable and libraries.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4686:395,test,tests,395,https://root.cern,https://github.com/root-project/root/pull/4686,1,['test'],['tests']
Testability,"When ROOT macros running, they typically create canvas ""c1"".; If run macro again and again - new canvas will be created but old will be deleted.; This was not handled before in RBrowser.; Now widget is closed if correspondent RWebWindow is destroyed. Also change logic how TCanvas widget handle canvas pointer.; While ROOT manage canvas itself one cannot use `std::unique_ptr<TCanvas>` to hold pointer.; Instead canvas always searched by name and if gone - widget automatically closed. Update slightly client part",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16444:263,log,logic,263,https://root.cern,https://github.com/root-project/root/pull/16444,1,['log'],['logic']
Testability,When building latest ROOT (6.28.02) with latest Protobuf 22.4 tmva/sofie_parsers build fails during linking step with errors of the type:; ```; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `absl::lts_20230125::log_internal::LogMessage::OstreamView::~OstreamView()...; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `absl::lts_20230125::Mutex::~Mutex()'; x86_64-unknown-linux-gnu/bin/ld: ... undefined reference to `utf8_range::IsStructurallyValid(...; ```; The problem seems to be caused by adding new dependency of Protobuf on Abseil in Protobuf 22.x (https://protobuf.dev/news/2022-08-03/). To make the code build I needed to:; Add in file `cmake/modules/SearchInstalledSoftware.cmake` after line ; ```; find_package(Protobuf); ```; lines (probably this should be dependent on version of Protobuf); ```; find_package(absl REQUIRED); find_package(utf8_range REQUIRED); ```; In file `tmva/sofie_parsers/CMakeLists.txt` add inside linking after line; ```; ${Protobuf_LIBRARIES}; ```; lines; ```; absl::str_format_internal; absl::log_internal_message; absl::hash; absl::flat_hash_set; absl::log_internal_check_op; utf8_range::utf8_validity; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12770:239,Log,LogMessage,239,https://root.cern,https://github.com/root-project/root/issues/12770,1,['Log'],['LogMessage']
Testability,"When building with #6385 I get the following error when building with `builtin_cling=OFF`. I haven't investigated in detail so it could be something wrong on my part:. ```log; [ 96%] Generating G__Core.cxx, ../lib/Core.pcm; cd /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/core && /home/conda/feedstock_root/build_artifacts/debug_1613296575343/_build_env/bin/cmake -E env LD_LIBRARY_PATH=/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/lib: /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/core/rootcling_stage1/src/rootcling_stage1 -v2 -f G__Core.cxx -cxxmodule -s /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/lib/libCore.so -excludePath /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source -excludePath /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/ginclude -excludePath /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/externals -excludePath /home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/builtins -writeEmptyRootPCM -m _Builtin_intrinsics -mByproduct _Builtin_intrinsics -mByproduct ROOT_Foundation_Stage1_NoRTTI -mByproduct ROOT_Foundation_C -mByproduct ROOT_Rtypes -D__STDC_NO_COMPLEX__ -D__COMPLEX_H__ -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/include -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/build-dir/ginclude -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/core/base/inc -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/core/foundation/inc -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/core/cont/inc -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/core/gui/inc -I/home/conda/feedstock_root/build_artifacts/debug_1613296575343/work/root-source/c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7206:171,log,log,171,https://root.cern,https://github.com/root-project/root/issues/7206,1,['log'],['log']
Testability,When building with gcc49 on osx a linker assertion happens when linking interpreter module. Trial and error reveal that setting -O0 removes the linker assertion. Dan Riley found that adding the flag -fno-omit-frame-pointer also removed the linker assertion without removing other optimizations.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/64:41,assert,assertion,41,https://root.cern,https://github.com/root-project/root/pull/64,6,['assert'],['assertion']
Testability,"When called repeatedly via TTree::GetBranch, the string allocations in; GetFullName have a notable runtime cost.; Here, the allocation is reduced to a single one in every branch. See here for a performance analysis where repeated invocations produced significant overhead.; ![image](https://user-images.githubusercontent.com/16205615/186901068-80db73be-e32a-47e5-8986-4dfe8d5e8dae.png). This seems to matter most if the branches have mothers, because in this case, the string composition kicks in. @pcanal; - Do you know if there's a test that covers this case?; - Do you agree that this brings down TString allocations?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11255:534,test,test,534,https://root.cern,https://github.com/root-project/root/pull/11255,1,['test'],['test']
Testability,"When cling is embedded and the plugins are linked statically we can rely; on the initialization of the Preprocessor to register the pragmas. Currently, due to the current implementation deficiency we cannot rely; on the same mechanism when loading the plugins as shared objects. This patch fixes the failing cling test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2992:314,test,test,314,https://root.cern,https://github.com/root-project/root/pull/2992,1,['test'],['test']
Testability,"When compiled in with '-Ddev=ON', warning becomes errors. ```; In member function ‘std::string TMVA::Experimental::SOFIE::ROperator_Gemm<T>::Generate(std::string)’:; tmva/sofie/inc/TMVA/ROperator_Gemm.hxxROperator_Gemm.hxx:211:16: error: there are no arguments to ‘assert’ that depend on a template parameter, so a declaration of ‘assert’ must be available [-fpermissive]; 211 | assert(length == ConvertShapeToLength(fShapeC));; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9341:265,assert,assert,265,https://root.cern,https://github.com/root-project/root/pull/9341,3,['assert'],['assert']
Testability,"When compiled with latest gcc / clib, one get warnings like:; ```; /usr/include/string.h:241:27: error: ‘char* __builtin_strchr(const char*, int)’ argument 1 declared attribute ‘nonstring’; ```. It is because of declaration:; ```; char ut_host[UT_HOSTSIZE]; __attribute_nonstring__; /* Hostname for remote login. */; ```. Seems to be, `ut_host` cannot be used as null-terminated string.; Therefore copy value in TString before using it. Plus replace 0 -> nullptr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10688:306,log,login,306,https://root.cern,https://github.com/root-project/root/pull/10688,1,['log'],['login']
Testability,"When configuring ROOT on the new M1 Max chip using Mac OS 12.1 and latest Xcode (Clang 13.0), it does not work when using the option `-Dall=On`.; By using `-Dall=On` the compiler flag `-mach=native` is added by CMake and this option is not recognised by clang.; When configuring:; ```; cmake ../root -Dall=On -Dbuiltin_glew=On; ```; There is an error in cmake caused by this problem, seen in the `CMakeFiles/CMakeError.log` file: . ```; Performing C++ SOURCE FILE Test HAVE_CXX_ATOMICS_WITHOUT_LIB failed with the following output:; Change Dir: /Users/moneta/root/git/temp/CMakeFiles/CMakeTmp. Run Build Command(s):/usr/bin/make -f Makefile cmTC_c3390/fast && /Applications/Xcode.app/Contents/Developer/usr/bin/make -f CMakeFiles/cmTC_c3390.dir/build.make CMakeFiles/cmTC_c3390.dir/build; Building CXX object CMakeFiles/cmTC_c3390.dir/src.cxx.o; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/c++ -DHAVE_CXX_ATOMICS_WITHOUT_LIB -std=c++14 -Wc++11-narrowing -Wsign-compare -Wsometimes-uninitialized -Wconditional-uninitialized -Wheader-guard -Warray-bounds -Wcomment -Wtautological-compare -Wstrncat-size -Wloop-analysis -Wbool-conversion -m64 -pipe -W -Wall -Woverloaded-virtual -fsigned-char -fno-common -Qunused-arguments -pthread -stdlib=libc++ -march=native -Werror=unguarded-availability-new -std=c++11 -arch arm64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX12.1.sdk -std=c++14 -MD -MT CMakeFiles/cmTC_c3390.dir/src.cxx.o -MF CMakeFiles/cmTC_c3390.dir/src.cxx.o.d -o CMakeFiles/cmTC_c3390.dir/src.cxx.o -c /Users/moneta/root/git/temp/CMakeFiles/CMakeTmp/src.cxx; clang: error: the clang compiler does not support '-march=native'; make[1]: *** [CMakeFiles/cmTC_c3390.dir/src.cxx.o] Error 1; make: *** [cmTC_c3390/fast] Error 2. ```. and then the Cmake checks fails and interpret that some libraries (e.g. lib atomic) is missing, but in reality this is not the case. . If configuring with just:. ```; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9687:419,log,log,419,https://root.cern,https://github.com/root-project/root/issues/9687,2,"['Test', 'log']","['Test', 'log']"
Testability,"When creating a TGClient instance in a standalone application. ROOT crashes. ; This reproduces the problem:; ```; #include ""TGClient.h""; #include ""TROOT.h""; #include <iostream>. void test() {; std::cout << "" ROOT is in batch "" << gROOT->IsBatch() << std::endl;; auto g = new TGClient(); ; }. int main() {; test(); ; } . This makes the fix applied for https://sft.its.cern.ch/jira/browse/ROOT-9483 not working anymore in the current master",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6483:183,test,test,183,https://root.cern,https://github.com/root-project/root/issues/6483,2,['test'],['test']
Testability,"When creating the test data sets for the CNN and RNN tutorials, it is better to create the TTree attached to the output file so we can avoid a potential issue when deleting the file and the TTree's",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14368:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/14368,1,['test'],['test']
Testability,"When filling histograms without limits in parallel a problem to be addressed is how to make sure that the ranges are compatible for the final merging.; This PR proposes a technique based on a static reference list of TAxis, kept as a static in TH1, filled/used by the different threads. The first thread calculates the TAxis ranges and saves it into the list, the others use it. The list is protected by a RW lock .; The logic is implemented in TH1::BufferEmpty and holds for TH{1,2,3}, the specificity of each TH{1,2,3} being moved to a set of new member functions called by TH1::BufferEmpty. The change in TH1Merger is required to calculate the axis and dump the internal buffers when the internal buffersize has not yet been reached. This treatment can perhaps be improved to get the same result of the single thread case. The patch also implements the hook for a call back function to implement the same functionality in the case of multi-processing. A patch with adaptation to multiproc will follow. The tutorial mt301_fillHistAutoBin.C illustrates the usage with TThreadedObject . NB: many of the changes in TH1.h come from clang-format-{3.8, 3.9, 4.0}",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/902:421,log,logic,421,https://root.cern,https://github.com/root-project/root/pull/902,1,['log'],['logic']
Testability,"When generating the GQt module in rootcling, we hit the assertions; in forceAppend assertions about ""Duplicates?!"" with this declaration:. ```; CXXRecordDecl 0x55555643fae8 </usr/include/qt4/QtCore/qglobal.h:1658:1, line:1794:1> line:1658:21 in GQt.TGQt.h hidden class QSysInfo definition; |-also in GQt.TQtClientWidget.h; |-CXXRecordDecl 0x55555643fc30 <col:1, col:21> col:21 in GQt.TGQt.h hidden implicit class QSysInfo; |-AccessSpecDecl 0x55555643fce8 <line:1659:1, col:7> col:1 in GQt.TGQt.h public; |-EnumDecl 0x55555643fd18 <line:1660:5, line:1662:5> line:1660:10 in GQt.TGQt.h hidden Sizes; | `-EnumConstantDecl 0x55555643fe98 <line:1661:9, col:38> col:9 in GQt.TGQt.h hidden WordSize 'enum QSysInfo::Sizes'; | `-ImplicitCastExpr 0x55555643fee0 <col:20, col:38> 'unsigned int' <IntegralCast>; | `-ParenExpr 0x55555643fe70 <col:20, col:38> 'unsigned long'; | `-BinaryOperator 0x55555643fe48 <col:21, col:37> 'unsigned long' '<<'; | |-UnaryExprOrTypeTraitExpr 0x55555643fe08 <col:21, col:34> 'unsigned long' sizeof 'void *'; | `-IntegerLiteral 0x55555643fe28 <col:37> 'int' 3; `-EnumDecl 0x55555643ff00 <line:1672:5, line:1685:5> line:1672:10 in GQt.TGQt.h hidden Endian; |-EnumConstantDecl 0x55555643ffd8 <line:1673:9> col:9 in GQt.TGQt.h hidden referenced BigEndian 'enum QSysInfo::Endian'; |-EnumConstantDecl 0x555556440028 <line:1674:9> col:9 in GQt.TGQt.h hidden referenced LittleEndian 'enum QSysInfo::Endian'; `-EnumConstantDecl 0x5555564400a0 <line:1681:11, col:23> col:11 in GQt.TGQt.h hidden ByteOrder 'enum QSysInfo::Endian'; `-ImplicitCastExpr 0x5555564400e8 <col:23> 'unsigned int' <IntegralCast>; `-DeclRefExpr 0x555556440070 <col:23> 'int' EnumConstant 0x555556440028 'LittleEndian' 'enum QSysInfo::Endian'; ```. The reason for this is that we have QSysInfo both in the TQtClientWidget; and TGQt submodules and our current translation (which is supposed to; parse all header in the module) sees them both in one transaction. As we also don't recognize that this decl is from a modu",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1236:56,assert,assertions,56,https://root.cern,https://github.com/root-project/root/pull/1236,2,['assert'],['assertions']
Testability,"When generating unbinned datasets in a `RooMCStudy`, there is a logging; done for each toy dataset at the `PROGRESS` level, which is too verbose.; The logging for each toy has been moved to the `DEBUG` level. In both the case of binned and unbinned toy datasets, there was a; `PROGRESS` log every few toys. Also this is too verbose for large-scale; toy studies. With this commit, a dynamic progress printout is; introduced. While running, it looks like this:. ```; [#0] PROGRESS:Generation -- RooMCStudy::run: 5382 samples:; 78 %; ```. When done, the log looks as follows:. ```; [#0] PROGRESS:Generation -- RooMCStudy::run: 5382 samples:; 100 % Done!; ```. Closes #9489.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10509:64,log,logging,64,https://root.cern,https://github.com/root-project/root/pull/10509,4,['log'],"['log', 'logging']"
Testability,"When getValV() was directly implemented in RooAddPdf, it was missed to; copy-paste the part from RooAbsPdf::getValV() where the normalization; sets for the proxies was synced. A unit test with the reproducer for an issue caused by missing the; syncing is also introduced with this commit, involving the SPlot from; RooStats. Closes #10869.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10885:183,test,test,183,https://root.cern,https://github.com/root-project/root/pull/10885,1,['test'],['test']
Testability,"When importing a `TH1` into a RooDataHist, the RooFit variable ranges are automatically adjusted to the nearest `TH1` bin boundaries. Then, the number of the corresponding `TH1` bin is stored in a ""offset"" variable to be used later when filling the RooDataHist. For this range adjustment, there are two code branches. One for the uniform case, and one for non-uniform binning. The uniform binning code branch was a bit weird, because it also created a non-uniform `RooBinning` object, only used to determine the original `TH1` bin of the lower adjusted boundary via; `RooBinning::rawBinNumber()`. But this can just be done with `TAxis::FindBin()`. Hence, we don't even need this confusing `rawBinNumber()` function as an implementation detail of RooFit and can get rid of it. With this change, we don't need a non-uniform `RooBinning` object in the uniform binning code branch anymore, and also circumvent an crash in the nightlies:. https://lcgapp-services.cern.ch/root-jenkins/job/root-incremental-master/LABEL=ROOT-debian10-i386,SPEC=noimt/12007/testReport/projectroot/test/test_stressroofit/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13853:1049,test,testReport,1049,https://root.cern,https://github.com/root-project/root/pull/13853,2,['test'],"['test', 'testReport']"
Testability,"When installing ROOT 6.24 with a package manager, CMake will try to modify `/usr` directly even when the installation is supposed to happen to a staging area beforehand. We need to change the link creation to respect DESTDIR such that installations like `env DESTDIR=${PWD}/test-install cmake --build . --target install` doesn't try to modify any system directories.; Here is a sandbox violation report from Portage:; ```; * --------------------------- ACCESS VIOLATION SUMMARY ---------------------------; * LOG FILE: ""/var/tmp/portage/sci-physics/root-6.24.00/temp/sandbox.log""; * ; VERSION 1.0; FORMAT: F - Function called; FORMAT: S - Access Status; FORMAT: P - Path as passed to function; FORMAT: A - Absolute Path (not canonical); FORMAT: R - Canonical Path; FORMAT: C - Command Line. F: symlink; S: deny; P: /usr/lib/python3.8/site-packages/libcppyy_backend3_8.so; A: /usr/lib/python3.8/site-packages/libcppyy_backend3_8.so; R: /usr/lib/python3.8/site-packages/libcppyy_backend3_8.so; C: /usr/bin/cmake -E create_symlink /usr/lib64/root-6.24/libcppyy_backend3_8.so /usr/lib/python3.8/site-packages/libcppyy_backend3_8.so . F: symlink; S: deny; P: /usr/lib/python3.8/site-packages/libcppyy3_8.so; A: /usr/lib/python3.8/site-packages/libcppyy3_8.so; R: /usr/lib/python3.8/site-packages/libcppyy3_8.so; C: /usr/bin/cmake -E create_symlink /usr/lib64/root-6.24/libcppyy3_8.so /usr/lib/python3.8/site-packages/libcppyy3_8.so ; * --------------------------------------------------------------------------------; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7964:274,test,test-install,274,https://root.cern,https://github.com/root-project/root/issues/7964,5,"['LOG', 'log', 'sandbox', 'test']","['LOG', 'log', 'sandbox', 'test-install']"
Testability,"When integrating the discretely-sampled RooCurves, the algorithm; implemented in RooCurve::average() was unnecessarily complicated. The existing midpoints were only considered for the trapezoidal rule if; they are away from the interval limits with an arbitrary tolerance,; which seems like a premature optimization to me. In particular, the logic was not correct if all midpoints were close to; the limits without this tolerance, resulting in issue https://github.com/root-project/root/issues/9838. Instead of making that case work correctly by implementing more code; branches, this commit suggests to simply don't do this tolerace check; and use all available midpoints for the trapezoidal integration rule. A unit test with the reproducer from https://github.com/root-project/root/issues/9838 is also implemented. Closes https://github.com/root-project/root/issues/9838. There are two additional commits in this PR with general code improvements.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16099:342,log,logic,342,https://root.cern,https://github.com/root-project/root/pull/16099,2,"['log', 'test']","['logic', 'test']"
Testability,"When it tries to draw the last diagram, it freezes on some builds. Instead, ignore drawing if we are in batch mode. This PR fixes this failing test:; http://cdash.cern.ch/testDetails.php?test=22567643&build=326532",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/377:143,test,test,143,https://root.cern,https://github.com/root-project/root/pull/377,3,['test'],"['test', 'testDetails']"
Testability,"When iterating over the `clients()` to clear the clients caches, the list of clients itself might also be changed during the iteration. We therefore can't do a range-based loop. This fixes the last remaining RooFit ASAN build failure in `testRooAddPdf`. This is a followup to efd468b4947.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11698:238,test,testRooAddPdf,238,https://root.cern,https://github.com/root-project/root/pull/11698,1,['test'],['testRooAddPdf']
Testability,"When linking against gtest/gmock, the include directories are not added; to the newly created targets. This adds INTERFACE includes to these; targets, so includes for all subsequent targets will fall into place. @reikdas This hopefully fixes the problem that you were seeing in `roottest`. Can you try to rebase on this branch, and test?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5366:332,test,test,332,https://root.cern,https://github.com/root-project/root/pull/5366,1,['test'],['test']
Testability,"When multiple threads are touching the list of cleanups, another thread can delete the object retrieved via TObjLink::GetObject(), and then when it is dereferenced in ob->TestBit(...) it causes a crash in ROOT. Stack trace (simplified):; ```; in TObject::TestBit (this=0x0, f=33554432) at TObject.h:159; ^^^; in TList::RecursiveRemove (this=0xb3c3e0, obj=0x7ff3547da6b0); at root/core/cont/src/TList.cxx:717; ^^^; in THashList::RecursiveRemove (this=0xb504b0, obj=0x7ff3547da6b0); at root/core/cont/src/THashList.cxx:286; in TObject::~TObject (this=0x7ff3547da6b0, __in_chrg=<optimized out>); at root/core/base/src/TObject.cxx:88; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/719:171,Test,TestBit,171,https://root.cern,https://github.com/root-project/root/pull/719,2,['Test'],['TestBit']
Testability,"When performing multi-thread reads of ROOT files, we need to pick the number; of TBB tasks among which we will divide the dataset. Our heuristic is ""try to produce around `T = N/ntrees` tasks per tree per; worker thread"": we don't know the number of clusters in each tree before; we open the files, so we don't know the total number of clusters upfront.; Instead we set a ""desired value"" of T tasks per tree and per thread, and; then when each thread opens a file it tries to make T tasks out of it (if; the file turns out to be too small, it might end up producing _less_ tasks than; desired. If we are processing `M > N` small files, we might end up producing; _more_ tasks per worker than N). N is a free parameter, and it represents the desired total number of; tasks per worker. If N is too low, parallelism will be too coarse-grained; and we might get imbalance/tails with bad parallelization.; The higher N is, the more CPU time we spend in task setup/teardown. Empirically, I believe we have set N too high (before this patch we set; it to 24). We often see runtime improvements in benchmarks by setting it; to a lower value, e.g. 10.; Again from experience, N == 10 should be a high-enough value to avoid; load imbalance between threads while it significantly reduces the amount; of tasks spawned (and the overhead that comes with it).; Therefore this patch sets N to 10. More discussion:; - https://mattermost.web.cern.ch/root/pl/8ay6my4pwbru7kzqs97f8xcdre; - https://docs.oneapi.com/versions/latest/onetbb/tbb_userguide/Task-Based_Programming.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8565:1090,benchmark,benchmarks,1090,https://root.cern,https://github.com/root-project/root/pull/8565,1,['benchmark'],['benchmarks']
Testability,"When previous node of a RRange or RFilter node was a RJittedFilter,; we were wrongly downcasting _varied_ filters to the RJittedFilter type,; but varied filters are _not_ jitted filters, they are copies of the; actual concrete filter. With this patch, if the type of the previous node is RJittedFilter,; we treat it everywhere as the generic base class RFilterBase, which; fixes the problem and it is consistent with what we already do in; RVariedAction. The PR comes with the corresponding regression test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10544:502,test,test,502,https://root.cern,https://github.com/root-project/root/pull/10544,1,['test'],['test']
Testability,When querying decls for information we can start a deserialization. This fixes 4 tests for runtime cxxmodules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1298:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/1298,1,['test'],['tests']
Testability,"When reading in-memory trees that have just been filled in the same scope, TTreeReaderValue re-uses, as storage for the values being read, the variable that was used to fill the tree. When the same variable is used to fill more than one branch, this means that the addresses of the values of these branches will be the same when reading them back. This breaks the fundamental assumption in RDataFrame that TTreeReaderValues for different columns will store their values at different addresses. The test happens to work at the moment, but it will break once we switch to bulk I/O because of a different call order inside RDF.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11522:498,test,test,498,https://root.cern,https://github.com/root-project/root/pull/11522,1,['test'],['test']
Testability,"When registering a new specialization, we cannot assert that the; specialization is new, as in: has not been registered as a loadable; specialization before, at least not based on the ODRHash. The ODRHash is not unique for different types (hash collision), i.e.; different specialization template arguments might map to the same; ODRHash value. loadLazySpecializationsImpl() will thus load something,; and claim that the ""Specialization is already registered as lazy"",; but it will in fact be an unrelated specialization. Give up on asserting any of this. NOTE: it is unclear whether the ambiguity in which specialization will; be loaded is causing problems down the road; so far we have not observed; such problems in the wild. If so, the ODRHash must not be the lookup key,; but a mere lookup hint into a multimap or similar, where the search compares; the actual template arguments to identify which lazy specialization to load. Based on discussion with Vassil (and in turn Richard Smith). This fixes e.g.; ```; roottest/cling/threading/clinglock.C...; Assertion failed: (!loadLazySpecializationsImpl(Args) && ""Specialization is already registered as lazy""), function addSpecializationImpl, file /Users/sftnight/build/workspace/root-pullrequests-build/root/interpreter/llvm/src/tools/clang/lib/AST/DeclTemplate.cpp, line 253.; ```; on macOS 11.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9621:49,assert,assert,49,https://root.cern,https://github.com/root-project/root/pull/9621,3,"['Assert', 'assert']","['Assertion', 'assert', 'asserting']"
Testability,"When running RDF/TTreeProcessorMT with large numbers of threads and files with files on xrootd significant lock contention is still present through ```TPluginHandler::LoadPlugin()``` and ```TPluginHandler::ExecPlugin()``` which are called from ```TFile::Open()```. This PR minimizes the use of locks, which are now only needed the first time a given TPluginHandler is called for various initialization steps. This change now completely eliminates the use of the global write lock during RDF event loops also for files read from xrootd and finishes addressing https://github.com/root-project/root/issues/7710. For a simple test case:. Create the files:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();; }. }; ```. run the event loop:; ```python; import ROOT; ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""root://eoscms.cern.ch//store/cmst3/group/wmass/bendavid/iotestinput/test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. Testing with 256 threads:. before:; ```; Percent of CPU this job got: 1077%; Elapsed (wall clock) time (h:mm:ss or m:ss): 1:51.82; ```. after:; ```; Percent of CPU this job got: 5626%; Elapsed (wall clock) time (h:mm:ss or m:ss): 0:54.89; ```; (in fact there is still some possible lock contention/parameter tuning within the xrootd client itself which could improve things further)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11631:622,test,test,622,https://root.cern,https://github.com/root-project/root/pull/11631,3,"['Test', 'test']","['Testing', 'test', 'testwrite']"
Testability,"When running doctest tests with `python -m doctest testfile.py`, doctest changes the current working directory to the directory where `testfile.py` is. This is problematic for our JupyROOT doctest tests, located in `$ROOT_SRC/bindings/pyroot/JupyROOT`, because Python will prepend that directory to the `PYTHONPATH`. Since such directory contains other Python modules, those will have precedence over any other module from the system. This caused a problem e.g. with `$ROOT_SRC/bindings/pyroot/JupyROOT/html`, which was wrongly picked instead of the system's package called html. For example, this can be seen [here](https://epsft-jenkins.cern.ch/job/root-pullrequests-build/50688/testReport/projectroot.roottest.python/JupyROOT/roottest_python_JupyROOT_cppcompleter_doctest/). This commit proposes a reorganization of the Python modules in `$ROOT_SRC/bindings/pyroot/JupyROOT`, in particular those that contain doctest tests, so that the interference caused by doctest does not happen.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3204:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/3204,6,['test'],"['testReport', 'testfile', 'tests']"
Testability,"When running on machines with few cores, enabling multithreading can; give you fewer cores than requested. For most of the tests this does; not matter. However, some tests verify the number of threads used.; This commit adapts those tests for this situation.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8068:123,test,tests,123,https://root.cern,https://github.com/root-project/root/pull/8068,3,['test'],['tests']
Testability,"When setting the branch proxy, report info about a missing branch to the user. This is done in the form of a printed error. The logic is only triggered if there are no other branch names in the list of available branches that begin with the current branch name being searched. This situation could arise for example with a skeleton analysis produced by TTree::MakeProxy and a TTree with a split object. In that case the generated code will try to create a TBranchProxy for the top-level branch, even though that branch is not available from the TTree, only the sub-branches are. See for more details the discussion at https://github.com/root-project/root/pull/3746",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16377:128,log,logic,128,https://root.cern,https://github.com/root-project/root/pull/16377,1,['log'],['logic']
Testability,"When starting root.exe on Windows with a version of Visual Studio different than the one used to build ROOT, it mighty crash with the following error:; Assertion failed: !isNull() && ""Cannot retrieve a NULL type pointer"", file C:\build\ws\BUILDTYPE\Debug\LABEL\windows10\V\6-20\root\interpreter\llvm\src\tools\clang\include\clang/AST/Type.h, line 630; This patch fixes the issue.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5620:152,Assert,Assertion,152,https://root.cern,https://github.com/root-project/root/pull/5620,2,['Assert'],['Assertion']
Testability,When testing #6385 I've had issues with the linking order of the LLVM libs due to CMake not knowing about their dependencies. I don't have a log or reproducer to hand but this patch was enough to fix it:. https://github.com/chrisburr/root-feedstock/blob/4dff10152d66bd0e873b60150e72cf0f9bfa8c19/recipe/patches/0001-Use-find_package-for-llvm-clang.patch. The `get_directory_property` call was also an issue. That patch contains the values copied from a build with `builtin_llvm=ON`.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7176:5,test,testing,5,https://root.cern,https://github.com/root-project/root/issues/7176,2,"['log', 'test']","['log', 'testing']"
Testability,"When testing the refactored signal handler, I noticed that a few obscure (but not impossible!) Unix signals cause ROOT to exit without reseting the TTY state back to its original state. This PR simply adds a few extra signals to `TerminalConfigUnix` and bumps the signal count as appropriate.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/246:5,test,testing,5,https://root.cern,https://github.com/root-project/root/pull/246,1,['test'],['testing']
Testability,"When the column name contains a dot, we replace it with an underscore; and use the modified name as corresponding variable name for jitted; Defines/Filters.; To avoid potential name clashes with pre-existing columns, the; modified name is now prefixed with ""__tdf_arg_"", as it was already; the case before the latest refactoring of jitting. I'd like to introduce a test for this case, but I can't because of a different issue:; given a branch defined as `t.Branch(""v"", &v, ""a/I:b/I"")`, `Define(""a"", ""v.a"")` does not work: `""v""` comes before than `""v.a""` in the list of branches that we create, so it matches first, and later TDF complains that `""v""` is not a branch. @etejedor this is in the new `GetBranchNames`, do you think it might be an easy fix?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1857:365,test,test,365,https://root.cern,https://github.com/root-project/root/pull/1857,1,['test'],['test']
Testability,"When the normalization range for coefficient determination of a; RooAddPdf is changed, the AddPdf's projection cache needs to be reset,; just like it is already done in `RooAddPdf::fixCoefNormalization`.; Otherwise, there will be problems in the pdf evaluation and integration; because the projection cache is invalid. A unit test based on the GitHub issue that reported this problem is also; implemented. Closes https://github.com/root-project/root/issues/10988. Furthermore, another potential RooAddPdf problem is fixed, where several instances of RooRecursiveFraction were created with the same name (which could become problematic for example when using the new BatchMode).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10995:326,test,test,326,https://root.cern,https://github.com/root-project/root/pull/10995,1,['test'],['test']
Testability,"When trying to build the tests using CMake 3.10, `R__DAOS_TEST_POOL` was not; getting defined correctly which caused build errors like:. ```; expected ‘)’ before ‘R__DAOS_TEST_POOL’; 5 | std::string daosUri(""daos://"" R__DAOS_TEST_POOL "":1/a947484e-e3bc-48cb-8f71-3292c19b59a4"");; | ~ ^~~~~~~~~~~~~~~~~~; | ); ```. Moving from `COMPILE_OPTIONS` to `COMPILE_DEFINITIONS` seemed to fix it.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8172:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/8172,1,['test'],['tests']
Testability,"When two histograms created with different upper edges of the last bin are drawn in the same pad with a Log y-axis. The edge of the last bin should be drawn as the minimum y value of the pad, instead, it is always set to 1. This artifact is most noticeable when the histogram values are less than 1. This occurred only when the histogram was drawn as a line, it was correct with a filled area. This patch uses the same algorithm for line drawing as fill area drawing. The problem was seen here: https://github.com/root-project/root/issues/12394. The following macro can be used as a reproducer:; ```; {; gStyle->SetOptStat(0);; gStyle->SetOptTitle(0);. auto C = new TCanvas();; C->Divide(2,1);. auto h15 = new TH1F(""h15"",""h15"", 3, 10, 15);; auto h25 = new TH1F(""h25"",""h25"", 5, 0, 25);. h15->Fill(11,.5);; h15->Fill(12,1.);; h15->Fill(14,.5);; h15->SetLineWidth(3);. h25->Fill(1,1);; h25->Fill(6,2);; h25->Fill(11,3);; h25->Fill(16,2);; h25->Fill(23,1);; h25->SetLineColor(2);; h25->SetLineWidth(3);; h25->SetMinimum(.05);. C->cd(1);; h25->Draw(""hist"");; h15->Draw(""hist same"");; gPad->SetLogy(1);; gPad->SetGridx(1);; gPad->SetGridy(1);. C->cd(2);; h25->Draw(""hist"");; h15->Draw(""hist same"");; gPad->SetGridx(1);; gPad->SetGridy(1);; }; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12448:104,Log,Log,104,https://root.cern,https://github.com/root-project/root/pull/12448,1,['Log'],['Log']
Testability,"When using `RooGenericPdf` to implement custom PDF's, fitting becomes quite slow due to the use of numerical integration. This becomes a big problem when one needs to be perform several fits on the PDF (such as when studying systematical errors or statistical significances). It would be great if we could set an expression for the analytical integral the same way we already do for the PDF itself. As concrete example, if one needed to implement a PDF such as `f(x) = a/x + b*x + c`, it feels like we should be able to do; ```c; // Define custom pdf; RooGenericPdf my_pdf(""my_pdf"", ""x[1]/x[0] + x[2]*x[0] + x[3]"", RooArgList(x, a, b, c));; // Set formula for analytical integral; my_pdf.SetAnalyticalIntegralFormula(""x[1]*TMath::Log(x[0]) + x[2]*x[0]*x[0]/2 + x[0]*x[3]"");; ```. This would be implemented in such way that just creating an `RooGenericPdf` object would set it to numerical integration by default, and then calling `SetAnalyticalIntegralFormula()` would make it use analytical integration based on the supplied formula. Follow up from https://root-forum.cern.ch/t/analytical-integral-for-roogenericpdf/50409",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10763:730,Log,Log,730,https://root.cern,https://github.com/root-project/root/issues/10763,1,['Log'],['Log']
Testability,"When using source bilds, all necessary source includes; will be provided via dependencies. When using installed root,; anyway ${CMAKE_BINARY_DIR}/include has to be used. Reduce usage of `find_package(ROOT)` method. ; If was misused to produce variables like `ROOT_asimage_FOUND` or `ROOT_vc_FOUND`; Now only kept at the place where it can be really used outside ROOT.; Plus two historical files in `test/` and `tutorials/` are mostly unchanged while too many such variables are used",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5577:399,test,test,399,https://root.cern,https://github.com/root-project/root/pull/5577,1,['test'],['test']
Testability,"When we want to autoload contents from namespaces we end up in; Sema::LookupQualifiedName; then we issue a callback to; FindExternallyVisibleName which forwards to LookupObject. Lookup object; takes a DeclContext as an argument. This argument is always the primary; lookup context (which for a NamespaceDecl is the original namespace. Regular autoloading does not consider this (or has chosen not to) because; this reduces the amount of autoloads. Such autoloads can happen when; resolving template specializations when computing a decl's linkage by; clang's CodeGen. This in turn loads unexpected libraries such as RooFit; when trying to resolve all template specializations of __to_raw_pointer; (located in &lt;memory&gt;), including the one taking a HistFactory::Data*.; The amount of deserializations might be reduced by applying [D29951](https://reviews.llvm.org/D29951). That way we end up needlessly loading RooFit and showing it's weird; banner, potentially breaking a lot of tests. This behavior can be considered as broken because we hide information; about possible redeclarations which can affect the linkage computation or; other checks in codegen. If we fix the bug we will probably explode; ROOT's memory footprint and make the gap between standard ROOT and ROOT; with modules even bigger. Since it is not clear how much work and issue resolving is required for; standard ROOT, we can probably only live with the workaround of the missing; concept: moving entities in namespaces whose autoloading requires declarations; to be in the PCH. For instance, ROOT::Experimental::TDataFrame.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1337:984,test,tests,984,https://root.cern,https://github.com/root-project/root/pull/1337,1,['test'],['tests']
Testability,"When writing trained methods to the output file, there was a typo in the target directory. This lead to the results of a method of type ""BDT"" and name ""MyBDT"" being placed (incorrectly) in a folder named; ""Method_MyBDT/MyBDT"". This patch places the data correctly in ""Method_BDT/BDT"". This is important since e.g. the GUI relies on all BDT's being placed in the ""MethodBDT"" folder. This will affect all methods, not only BDT's. This can be seen e.g. in the output of the `TMVAClassification.C` macro with several BDT's enabled: The GUI cannot generate plots for all BDT's. That the previous implementation was a typo is corroborated by this line:; ```; Log() << kDEBUG << Form(""Dataset[%s] : "", datasetName) << "" Base Directory for ""; << GetMethodTypeName() << "" not set yet --> check if already there.."" << Endl;; ```; , where it is implied that a directory of name `GetMethodTypeName()` should be created. However, in the old implementation a directory with name `GetMethodName()` was created instead. The issue was reported [here](https://root-forum.cern.ch/t/tmvagui-not-working-for-multiple-methods-of-bdt-in-file/32267) initially.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3253:653,Log,Log,653,https://root.cern,https://github.com/root-project/root/pull/3253,1,['Log'],['Log']
Testability,"When x is at the bin edge values numerical error can cause the computation of the bin to be the one before (or after). Correct for this case assuming the bin edge are computed as in `TH1::getBinLowEdge` and `TH1::GetBinUpEdge`. It is clear that the bin edge values are represented as floating point, so depending on how they are computed they can be sometime different. However, it is better to have teh consistency to return the correct value when computed as internally in TAxis. This should fix the problem reported in https://root-forum.cern.ch/t/bug-in-taxis-findbin/57210 and #14091. A test is also added for FindBin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14105:592,test,test,592,https://root.cern,https://github.com/root-project/root/pull/14105,1,['test'],['test']
Testability,"While TCanvas, shown in web-browser, marked as batch canvas, all customs object painting performed via gVirtualPS classes. Therefore one need to catch all these calls and record for SVG creation in the client. TWebPadPainter is remained as fall-back solution if some objects painter does not follow strictly the ROOT painting logic. ; Highly optimize data which are transferred to clients - avoid large TObject overhead for simple fill/line/marker attributes. ; Try to merge painting if there are too many objects on the TCanvas - like in tutorials/graphics/greyscale.C macro. In such case simple SVG fails - one should try to combine primitives drawn with same attributes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2862:326,log,logic,326,https://root.cern,https://github.com/root-project/root/pull/2862,1,['log'],['logic']
Testability,"While debugging the failure triggered by a recent PR updating the behavior of `gDirectory`: https://github.com/root-project/root/pull/11908#issuecomment-1361086304 (The reported error is that a name/symbol that should have been detected and loaded by Cling was not found ... the direct cause was that `gDirectory` was unexpectedly `nullptr`), I discovered that notebooks (or a least the way they are run in the test `JupyROOT-ROOT_kernel_notebook`), runs several threads to actually execute the cells. It is also clear from my investigation that it does not enable thread safety. Whether we need to change depends on whether `Jupyter` (or the way it is use here) guaranteed that only one of the thread would ever be run concurrently (if not then we must enable thread safety). However, one more thing to consider is that when thread safety is enabled, each thread get its own thread local gDirectory pointers. If each cell is run in a separate thread, then change to `gDirectory` in one cell will not be reflected in the next cell. (this would be true also for any user level thread local variable).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11955:411,test,test,411,https://root.cern,https://github.com/root-project/root/issues/11955,1,['test'],['test']
Testability,"While investigating performance issues with performing many fits in a RooFit analysis workflow, I discovered this memory leak in my valgrind logs. Getting this fix in as many release streams as possible would be good.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7137:141,log,logs,141,https://root.cern,https://github.com/root-project/root/pull/7137,1,['log'],['logs']
Testability,While playing with godbolt I noticed I wrote the test in a way that improperly deallocates the array https://godbolt.org/z/rnfbaWaKf,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8975:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/8975,1,['test'],['test']
Testability,"While testing my packages which use PyROOT, I stumbled across a little problem with ROOT and pytest which I propose to fix. Assume you have this very minimal (basically empty) python package:; ```; .; ├── setup.py; └── tests; └── test_test.py. 1 directory, 2 files; ```; Content of `setup.py`:; ```python; from setuptools import setup, find_packages. setup(; name=""root_cleanup_test"",; packages=find_packages(),; setup_requires=[""pytest-runner""],; test_suite=""tests"",; ); ```; Content of `test_test.py`; ```; import unittest; import ROOT. class TestTest(unittest.TestCase):; def test_test(self):; pass; ```. Now if you run the tests with `python setup.py pytest` which gives you the warning and error I attach to the bottom of this post. I think this is maybe related to some multithreading in the pytest runner. When you run the test alone with `pytest tests/test_test.py`, you won't get the error. My setup: ROOT 6.16/00 and Python 3.7. Let me know if I can do anything else to test this! It would be great if pytest works smoothly with ROOT. ````; ========== warnings summary ==========; /usr/lib/python3.7/site-packages/ROOT.py:98: DeprecationWarning: invalid escape sequence \S; message='class \S* already in TClassTable$' ). -- Docs: https://docs.pytest.org/en/latest/warnings.html; ========== 1 passed, 1 warnings in 0.41 seconds ==========; Error in atexit._run_exitfuncs:; Traceback (most recent call last):; File ""/usr/lib/python3.7/site-packages/ROOT.py"", line 782, in cleanup; facade = sys.modules[ __name__ ]; KeyError: ""ROOT""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3595:6,test,testing,6,https://root.cern,https://github.com/root-project/root/pull/3595,9,"['Test', 'test']","['TestCase', 'TestTest', 'test', 'testing', 'tests']"
Testability,"While working on a feature, these commits piled up. They could be split off from the feature branch.; I hope they are (mostly) NFCs, but small things are changing. For example, floating point computations are reordered, and `assert(0)` are replaced by `throw` and `#include`s are fixed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6243:225,assert,assert,225,https://root.cern,https://github.com/root-project/root/pull/6243,1,['assert'],['assert']
Testability,Windows: copy the libElementStruct.dll in the test directory,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3314:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/3314,1,['test'],['test']
Testability,Windows: disable (incompatible) stressHistFactory test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3309:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/3309,1,['test'],['test']
Testability,Windows: fix testoptical.C (use only forward slashes in the path),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3315:13,test,testoptical,13,https://root.cern,https://github.com/root-project/root/pull/3315,1,['test'],['testoptical']
Testability,Windows: make sure the files are not present before running the tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3316:64,test,tests,64,https://root.cern,https://github.com/root-project/root/pull/3316,1,['test'],['tests']
Testability,"With `ROOTSYS` unset and no `DISPLAY` variable, this setup causes a spurious warning about an unset `DISPLAY`. `TROOT()` calls `SetBatch(true)`, then cppyy ""agrees"", and `ROOT/__init__.py` tries to revert that. Just let everyone keep their hands off `SetBatch()` (as is done in newer cppyy anyway). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11858:364,test,tested,364,https://root.cern,https://github.com/root-project/root/pull/11858,1,['test'],['tested']
Testability,"With llvm9, the module ptr gets reset upon emission.; Instead, just look for the symbol in the JIT - where it should be found,; as Init() is injecting it there, and we want to find *that* symbol,; not the one from the binary. Fixes `CodeUnloading/AtExit.C` cling test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7506:263,test,test,263,https://root.cern,https://github.com/root-project/root/pull/7506,1,['test'],['test']
Testability,"With master (commit 7f3f3428e4d20) (but has been present for a long time), PyROOT overload resolution of function that takes an enum class is unstable (it appears to depend on the value rather than the type). With the test file below compiled by ACLiC (for example) running the script:; ```python; import ROOT. ROOT.gSystem.Load(""enums_cxx""). h = ROOT.Holder(); for i in range(10, 0, -1):; h.SetTwo(i); ROOT.to_string(h.two); ```; gives; ```txt; Calling to_string for enum EOne with 0; Calling to_string for enum EOne with 1; ...; ```. I.e. even-though the argument is an 'enum ETwo', the overload take an `enum EOne` actually called. In the original example (requires the code for Celeritas and VecGeom to build). For a similar script:; ```python; for i in range(0, 14, 1):; p.process_class = i; ROOT.celeritas.to_cstring(p.process_class); ```; I get:. ```txt; to_cstring ImportPhysicsVectorType called with 0 unknown; to_cstring ImportPhysicsVectorType called with 1 linear; to_cstring ImportPhysicsVectorType called with 2 log; to_cstring ImportPhysicsVectorType called with 3 free; to_cstring ImportTableType called with 4 ionisation_subsec; to_cstring ImportTableType called with 5 csda_range; to_cstring ImportTableType called with 6 range; to_cstring ImportTableType called with 7 secondary_range; to_cstring ImportTableType called with 8 inverse_range; to_cstring ImportTableType called with 9 lambda; to_cstring ImportTableType called with 10 sublambda; to_cstring ImportTableType called with 11 lambda_prim; to_cstring ImportProcessType called with 12 ucn; to_cstring ImportProcessClass called with 13 annihilation; ```. i.e. the *same* code line given the *same* data members (and thus always the *same* type), call 3 different overloads over the loop iterations. (Funnily running the loop in reverse order leads to the expected/correct executions). I could not reproduce this instability with my simple example. . ```c++; #include <stdio.h>; #include <string>. enum class EOne; {; a,; b,; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7077:218,test,test,218,https://root.cern,https://github.com/root-project/root/issues/7077,1,['test'],['test']
Testability,"With multiple concurrent `RNTupleFillContext`s, the order of clusters is generally indeterminate and entries are only partially ordered. With staged cluster committing, this restriction can be partially lifted by splitting a cluster commit into two phases:; 1. Once full, or when manually triggered, all fields are committed which triggers flushing of all columns. All pages are compressed and staged via the page sink. The result is a `RStagedCluster` that records all information for the second phase. This step can be repeated multiple times as entries are filled into the context.; 2. When appropriate for the application, all staged clusters can be committed, which logically appends them to the RNTuple. This is implemented in a single critical section, which guarantees that the clusters and their entries are consecutive. Moreover, by synchronizing the second phase between multiple contexts, the application can enforce a total ordering of all contained entries at reasonable resource consumption: During the first phase, all write buffers are flushed and will be reused for the following cluster. The metadata stored in `RStagedCluster` should require only minimal memory, which will accumulate while staging more clusters. Staged cluster committing is expected to be slightly slower than the default mode, but should still scale well as the second phase only updates the metadata which is a lightweight operation compared to preparing and filling entries, compressing pages, and writing them to disk. A noteworthy disadvantage is that staged cluster committing will lead to non-linear files, where sequentially iterating over clusters may require seeking to distant file offsets. The impact resulting from this will depend on the storage technology and the read pattern. Closes #16326",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16343:671,log,logically,671,https://root.cern,https://github.com/root-project/root/pull/16343,1,['log'],['logically']
Testability,"With optimizations in Cling on Apple M1, it happens that `RuntimeDyld` sees subtraction relocations for minuends in functions that are not in the `GlobalSymbolTable`. Skip over them and do nothing instead of dereferencing an `end()` iterator and crashing. Disclaimer: This is a hack that likely addresses a symptom instead of the cause - there really shouldn't be such relocations. However, this approach is definitely better than crashing and works for the test cases that run into this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10050:458,test,test,458,https://root.cern,https://github.com/root-project/root/pull/10050,1,['test'],['test']
Testability,"With optimizations in Cling on Apple M1, it happens that `RuntimeDyld` sees subtraction relocations for minuends in functions that are not in the `GlobalSymbolTable`. Skip over them and do nothing instead of dereferencing an `end()` iterator and crashing. Disclaimer: This is a hack that likely addresses a symptom instead of the cause - there really shouldn't be such relocations. However, this approach is definitely better than crashing and works for the test cases that run into this. (cherry picked from commit d6104649df2fea76793a4b3d59d9d8dc63130167). Backport of PR #10050.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10084:458,test,test,458,https://root.cern,https://github.com/root-project/root/pull/10084,1,['test'],['test']
Testability,"With some more minimal cmake configurations `assert` is not declared in `RField.hxx` and needs an `#include <cassert>`. `R__ASSERT` is declared however. Additionally, this makes it more consistent with other assertions in `RField`.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14737:45,assert,assert,45,https://root.cern,https://github.com/root-project/root/pull/14737,2,['assert'],"['assert', 'assertions']"
Testability,"With the current logic, if for some reason fAutoFlush is set to 0; for the TTree, the TTreeCache is disabled.; That is undesirable: we still can and want to do pre-fetching even; if auto-flushing was turned off when writing the TTree. Other more direct methods to turn off the TTreeCache still work,; e.g. tree->SetCacheSize(0). ## Checklist:. - [x] tested changes locally (complicated because of https://github.com/root-project/root/issues/7366 , but seems mostly ok) ; - [ ] updated the docs (@pcanal let me know if there are docs to update); - [x] could we set the cachesize to a better value than the autoflush default of ~30MB?. This PR fixes #8713 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8714:17,log,logic,17,https://root.cern,https://github.com/root-project/root/pull/8714,2,"['log', 'test']","['logic', 'tested']"
Testability,"With the function `RooDataHist::interpolateLinear` it is now possible to use; `RooDataHist::weights()` (implemented in https://github.com/root-project/root/pull/11171) to evaluate weights for one; dimensional histograms with up to first order interpolation. `RooDataHist::interpolateLinear` finds the coefficients of a straight line; between two neighboring bin centers by solving a system of two linear; equations. With the coefficients of the straight line, the interpolated weight; for an event between two bin centers can be calculated. If an event in a bin is to the left of the bin center coordinates, the; corresponding weight is found by interpolating between the current bin and the; neighboring bin to the left. If the event is to the right of the bin center,; the weight is found by inteperpolating between the current bin center and the; one to the right. For the first and last bin, the interpolation is performed; either by mirroring the histogram outside its boundaries, or by applying cdf; boundaries. `RooDataHist::weights()` has been updated so that it calls; `RooDataHist::interpolateLinear()` when the interpolation order is one.; Furthermore, `RooDataHist::computeBatch()` and `RooHistFunc::computeBatch()`; have been updated so that they call `RooDatahist::weights()` in the cases; where the histogram is one dimensional and the interpolation order is zero or; one. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11211:1394,test,tested,1394,https://root.cern,https://github.com/root-project/root/pull/11211,1,['test'],['tested']
Testability,"With the function `RooDataHist::interpolateQuadratic()` it is now possible to; use `RooDataHist::weights()` (implemented in #11171) to evaluate weights for; one dimensional histograms with up to second order interpolation. The structure of `RooDataHist::interpolateQuadratic()` is similar to that of; `RooDataHist::interpolateLinear()`, which was implemented in #11211; It finds the coefficients of a second order polynomial between three; neighboring bin centers by solving a system of three quadratic equations. With; the coefficients of the quadratic function, the interpolated weight for an event; between two bin centers can be calculated. If an event in a bin is to the left of the bin center coordinates, the; corresponding weight is found by interpolating between the current bin and the; two neighboring bins to the left. If the event is to the right of the bin center,; the weight is found by interpolating between the current bin center, one bin to; the the left and one bin to the right. For the first two bins and the last bin,; the interpolation is performed either by mirroring the histogram outside its; boundaries or by applying cdf boundaries. `RooDataHist::weights()` has been updated so that it calls; `RooDataHist::interpolateQuadratic()` when the interpolation order is two.; Furthermore, `RooDataHist::computeBatch()` and `RooHistFunc::computeBatch()`; have been updated so that they always call RooDatahist::weights() in the case; where the histogram is one dimensional. Since the old interpolation; implementation `RooDataHist::interpolateDim()` only supported up to second; order interpolation, it has been completely replaced by; `RooDataHist::interpolateLinear()` and `RooDataHist::interpolateQuadratic()`; in these `computeBatch()` functions in the case of one dimensional histograms. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11224:1879,test,tested,1879,https://root.cern,https://github.com/root-project/root/pull/11224,1,['test'],['tested']
Testability,"With the objective of fixing tests, this PR exposes in the ROOT module some functionality of the CPyCppyy extension module. Such functionality is available in the current PyROOT and some tests rely on it. A more exhaustive investigation on which functionality of cppyy we want to expose via the ROOT module is required.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3370:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/3370,2,['test'],['tests']
Testability,"With the patch at the end of this report, the test `roottest-root-io-issue-9899-read_cmssw_class_v3` fails with (partial output):; ```; Error in <readfile>: For entries 0 we have result=19200; ```; This is due to the fact that there is no branch for `w.fPersValue.fPersLowData.fProblems.fContent.fHolder` because the typeof `fHolder` : `RefVectorMemberPointersHolder` only has one transient member. Consequently, the line in `TBranchElement`'s `GatherArtificialElements` function:; ```; if (!foundRelatedSplit) {; continue;; }; ```; which is designed to avoid drilling through data members that are ""new"" in the current (in-memory) class layout. `fContent` also has no explicit branch (it is intentionally elided) but `fContent.fID` has a branch. Since the object (`fContent` is updated during the read, we should be running the I/O rules on its sub-objects ... but we don't. The issue can be senen by applying this patch to `roottest` and running `ctest -R issue-9899`. ```; diff --git a/root/io/issue-9899/read_cmssw_class_v3.cxx b/root/io/issue-9899/read_cmssw_class_v3.cxx; index 58b50a93..e0aef7e1 100644; --- a/root/io/issue-9899/read_cmssw_class_v3.cxx; +++ b/root/io/issue-9899/read_cmssw_class_v3.cxx; @@ -129,10 +129,8 @@ struct PersHighData {; }; int check(int slide = 1) {; int res = 0;; -#ifdef FIXED_ISSUE_99xx; for(auto &d : fPersLowData); res += d.check(slide, 0);; -#endif; for(auto &d : fLowData); res += d.check(slide * BIT(6), 10);; return res;; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9924:46,test,test,46,https://root.cern,https://github.com/root-project/root/issues/9924,1,['test'],['test']
Testability,"With the upgrade to llvm-13, the JIT lost the ability to re-use existing weak symbols that the JIT had already emitted, instead only looking at dlsym. This causes a significant increase in JITted symbols, and thus a significant slow-down of cling / its JIT. This restores the old behavior, with an identical set of symbols that jet jitted. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12018:405,test,tested,405,https://root.cern,https://github.com/root-project/root/pull/12018,1,['test'],['tested']
Testability,"With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by; - using a SimpleCompiler that uses IncrementalJIT::TM;; - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to; - before llvm upgrade: 2.69s; - llvm13, without this commit: ???; - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11945:601,test,tested,601,https://root.cern,https://github.com/root-project/root/pull/11945,1,['test'],['tested']
Testability,"With the upgrade, BackendPasses was modifying a TargetMachine that was not used by SimpleCompiler. Change that by; - using a SimpleCompiler that uses IncrementalJIT::TM;; - moving the TM creation to IncrementalJIT, and giving access to it. This reduces the runtime of https://github.com/root-project/root/issues/11927 to; - before llvm upgrade: 2.69s; - llvm13, without this commit: ???; - llvm13, with this commit: 2.89s i.e, a slow-down of 7% (that is likely caused by the different emission mechanism of Orc-v2; to be confirmed...). (cherry picked from commit d3793f2bb8c5948f4c64947c7f76fb0b0e1a3567). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12096:671,test,tested,671,https://root.cern,https://github.com/root-project/root/pull/12096,1,['test'],['tested']
Testability,"With this (large) patch, RAction, RFilter, RDefine, RRange and RVariation learn how to operate on ranges of N masked entries instead of one entry at a time. Currently ranges are always of size 1, but most of RDF's internal logic has been parameterized over that size. Notably, RAction, RFilter, RDefine and RDefineReader should be now almost completely ""bulkified"" while RVariation and other column readers (e.g. RVariationReader and RTreeColumnReader) still have some logic that assumes a bulk size of 1 (e.g. they only store a single result/value at a time). **Note**: This is still a draft PR because the performance impact of these changes, when using a bulk size of 1, seems to be significant.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11517:223,log,logic,223,https://root.cern,https://github.com/root-project/root/pull/11517,2,['log'],['logic']
Testability,"With this PR, `RNTupleInspector::RColumnInfo` and `RNTupleInspector::RFieldTreeInfo` are renamed to `RNTupleInspector::RColumnInspector` and `RNTupleInspector::RFieldTreeInspector`, along with their getters. The rationale behind this change is to make the class names more symmetric with the general `RNTupleInspector` name and remove any potential ambiguity. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14131:366,test,tested,366,https://root.cern,https://github.com/root-project/root/pull/14131,1,['test'],['tested']
Testability,"With this PR, a proper exception is thrown when a user tries to load an out-of-bounds RNTuple entry (instead of aborting due to a failed assert statement).; To prevent the `RColumn` destructor from attempting to again clean up the page for the entry that was (potentially) loaded prior to attempting to read the out-bounds entry, `fReadPage` in `RColumn` is reset to a null page before attempting to populate it. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14129:137,assert,assert,137,https://root.cern,https://github.com/root-project/root/pull/14129,2,"['assert', 'test']","['assert', 'tested']"
Testability,"With this PR, the normalization integrals are placed as separate objects in the serialized computation graph for the RooFitDriver. This is done by modifying the RooFit computation graph, injecting a `RooNormalizedPdf` on top of every normalized pdf where the normalization is done instead of doing it hardcoded in the `computeBatch` function for each pdf. These changes make all the stressRooFit unit tests pass with the `CPU` and `CUDA` batch mode, so stressRooFit runs with these instances are added as unit tests.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9956:401,test,tests,401,https://root.cern,https://github.com/root-project/root/pull/9956,2,['test'],['tests']
Testability,"With this change, fields are only added to the `REntry` and read when they are referenced in the processor loop. This prevents unecessary reads of unused fields. It also makes the REntry completely transparent from an interface perspective. Pointers to values can be obtained through the processor interface itself *before* the iteration starts, or alternatively via the iterator returned by the processor. Important to note that during iteration, the pointer returned by `RNTupleProcessor::GetPtr` will **not** contain the value for the current entry. The reason for this is that from the `RNTupleProcessor` interface there is (with the current implementation) no way to know what the current entry index is. For now, `RNTupleProcessor::GetPtr` contains a warning and a recommendation to get the pointer through the iterator instead. Alternative solutions could be:; 1. Remove `RNTupleProcessor::GetPtr` altogether and only allow access to the field value pointers through the iterator.; 2. Dispatch the local entry index from `RState` back to the processor on every `Advance`, and (re)load the entry when `RNTupleProcessor::GetPtr` is called. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15939:1166,test,tested,1166,https://root.cern,https://github.com/root-project/root/pull/15939,1,['test'],['tested']
Testability,"With this change, the method invocation request is received directly from civetweb server thread. The changes are executed through REveManager thread execution thread that processes. The REveManger::DoRedraw() method bacame depreciated. It is now possible to apply changes without a client interface after the connection is created. This example is implemented in autoplay of events in tutorials/eve7/event_demo.C. Other changes:; * Fix memory leaks in the client; * Reduce calls of TSystem::ProcessLine; * Add structure to transfer server messages to client log (REveLog).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8114:559,log,log,559,https://root.cern,https://github.com/root-project/root/pull/8114,1,['log'],['log']
Testability,"With this change, the use of TFile when creating an `RNTupleInspector` object from an RNTuple name and source path is removed by directly creating the page source instead. This is in accordance with other places that require the opening of an RNTuple (i.e. `RNTupleReader` and `ROOT::RDF::Experimental::FromRNTuple`). ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14315:339,test,tested,339,https://root.cern,https://github.com/root-project/root/pull/14315,1,['test'],['tested']
Testability,With this change:. 1036/1038 Test #853: tutorial-tmva-TMVA_Higgs_Classification ............................. Passed 1248.66 sec; 1037/1038 Test #854: tutorial-tmva-TMVA_RNN_Classification ............................... Passed 1252.92 sec; 1038/1038 Test #852: tutorial-tmva-TMVA_CNN_Classification ............................... Passed 1273.47 sec. Instead of timing out at 1200 s.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6246:29,Test,Test,29,https://root.cern,https://github.com/root-project/root/pull/6246,3,['Test'],['Test']
Testability,"With:; ```; using name_of_typedef = name_of_class;; ```; and requesting a dictionary entry for both `name_of_typedef` and `name_of_class` (possibly in 2 distinct libraries); when doing:; ```; auto cl = TClass::GetClass(""name_of_typedef"");; ```; we should have the library/libraries corresponding for both the typedef and the class being autooaded. This works properly in the rootmap case. It fails in the dictionary are build requesting the 'cxxmodule'. With [typedef02.tgz](https://github.com/root-project/root/files/10993384/typedef02.tgz); you can reproduce the problem:; ```; tar xfz typedef02.tgz; cd typedef02; cd run_withmodule; sh ../build.rootcling.module; root.exe -b -l -q ../testtypedef.C; ```; and you will get:. ```. Processing ../testtypedef.C...; The TClass for the typedef has IsLoaded: 0; ```; where the last line should not be printed. you can see the rootmap in action with:; ```; cd run_nomodule. sh ../build; root.exe -b -l -q ../testtypedef.C; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12495:687,test,testtypedef,687,https://root.cern,https://github.com/root-project/root/issues/12495,3,['test'],['testtypedef']
Testability,"Without modules, many STL and libc headers are automatically; provided by ROOT via the attached ROOT PCH. This means that; we don't need to have autloading or explicit includes for STL; or libc headers when running with the PCH attached. This leads; to making user code like this working in ROOT:. ```C++; // no includes here that provides assert; int foo() {; assert(false);; }; ```. However, as the modules don't come with this big PCH, we; are now suddenly in the situation where we can't resolve; things such as `assert`. We also can't rely on the; normal autoloading of ROOT as those declarations were; actually never autoloaded, but just provided by the PCH. To simulate this behavior with modules, we automatically load; those headers that we expect to have in the ROOT PCH; (which are probably the STL and libc headers).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1317:340,assert,assert,340,https://root.cern,https://github.com/root-project/root/pull/1317,3,['assert'],['assert']
Testability,"Without this the fix for #7754 breaks some CMSSW use cases (see https://github.com/root-project/roottest/pull/804). This PR *also* includes the content of https://github.com/root-project/root/pull/8429 as they touch the same area and have not been tested separately (it does not make sense to do so). The only *new* code is the last commit ""TBranchElement: do not set fOnfileObject for collection parent (type …""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9585:248,test,tested,248,https://root.cern,https://github.com/root-project/root/pull/9585,1,['test'],['tested']
Testability,"Work in progress branch for simplifying offset column indexing. All the basic vector tests are passing, but I think there is a problem with cluster indexes. There are three failing tests that trigger an assertion at the page storage level: ; https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/src/RPageStorageFile.cxx#L263. 1. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L359; 2. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple.cxx#L534; 3. https://github.com/root-project/root/blob/7e50fa81489e6b33e086d925046548158709d3b7/tree/ntuple/v7/test/ntuple_raw.cxx#L75. which I think means I'm creating bad `clusterIndex` values at some point, probably from `GetCollectionInfo`. . @jblomer would you mind taking a look? I am a little confused about columnIndexes inside `GetCollectionInfo`. I think the problem might be from when we pass a cluster boundary, `idxStart` should be set to some sensible value based on the cluster (0 wasn't working for me).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5714:85,test,tests,85,https://root.cern,https://github.com/root-project/root/pull/5714,6,"['assert', 'test']","['assertion', 'test', 'tests']"
Testability,"Work in progress to fully generalize gradient interfaces, in order to allow vectorization and parallelization of the fitting methods that make use of them. The implementation of Chi2 gradient has been parallelized and vectorized: these new implementations are unit tested and benchmarked against the simple scalar serial case. To do: test the general use case, where the user simply calls the fitting method specifying that the gradient should be used. Early reviews are more than welcome!",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/793:265,test,tested,265,https://root.cern,https://github.com/root-project/root/pull/793,3,"['benchmark', 'test']","['benchmarked', 'test', 'tested']"
Testability,Wouter Verkerke has added some fixes to RooFit for usage in the Higgs Combination working group in ATLAS. These fixes include additions of new classes as well as genuine bugfixes. This is a minimal collection of these fixes that successfully compiles and passes all the tests on an SLC6 machine. @egpbos,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/776:270,test,tests,270,https://root.cern,https://github.com/root-project/root/pull/776,1,['test'],['tests']
Testability,Wouter Verkerke has added some fixes to RooFit for usage in the Higgs Combination working group in ATLAS. These fixes include additions of new classes as well as genuine bugfixes. This is a minimal collection of these fixes that successfully compiles and passes all the tests on an SLC6 machine. @egpbos. [rebased version of this pull request: [https://github.com/root-project/root/pull/776](url)],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/792:270,test,tests,270,https://root.cern,https://github.com/root-project/root/pull/792,1,['test'],['tests']
Testability,Wrong logic ended up returning fFieldZero instead of nullptr.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8724:6,log,logic,6,https://root.cern,https://github.com/root-project/root/pull/8724,1,['log'],['logic']
Testability,[6.28] Fix distributed RDataFrame tests due to error serialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13933:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/13933,1,['test'],['tests']
Testability,[6.28] [tmva] Relax float comparison in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14659:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/14659,1,['test'],['test']
Testability,[6.28][tmva] Completely relax float comparison in TestSofieModels,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14745:50,Test,TestSofieModels,50,https://root.cern,https://github.com/root-project/root/pull/14745,1,['Test'],['TestSofieModels']
Testability,[6.30] Fix distributed RDataFrame tests due to error serialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13932:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/13932,1,['test'],['tests']
Testability,[6.30] [tmva] Completely relax float comparison in TestSofieModels,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14746:51,Test,TestSofieModels,51,https://root.cern,https://github.com/root-project/root/pull/14746,1,['Test'],['TestSofieModels']
Testability,[6.30] [tmva] Relax float comparison in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14658:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/14658,1,['test'],['test']
Testability,[6.32] [pyroot] Isolate potentially leaking function in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16032:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/16032,1,['test'],['test']
Testability,[Backport][TMVA] Use R__ASSERT instead of assert,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13832:42,assert,assert,42,https://root.cern,https://github.com/root-project/root/pull/13832,2,['assert'],['assert']
Testability,[CI] Add a resource lock to GPU tests to reduce contention,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16803:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/16803,1,['test'],['tests']
Testability,[CI] Build is green even if tests are failing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12307:28,test,tests,28,https://root.cern,https://github.com/root-project/root/issues/12307,1,['test'],['tests']
Testability,[CI] Bump `EnricoMi/publish-test-result-action` to latest version,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12688:28,test,test-result-action,28,https://root.cern,https://github.com/root-project/root/pull/12688,1,['test'],['test-result-action']
Testability,[CI] Set `arrow=ON` to test the RDataFrame Arrow data source,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15312:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/15312,1,['test'],['test']
Testability,[CI] Test cdash,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16676:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/16676,1,['Test'],['Test']
Testability,[CI] Test produced binaries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15861:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/issues/15861,1,['Test'],['Test']
Testability,[CI][Windows] Increase the test retries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15429:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/15429,1,['test'],['test']
Testability,[CI][windows] Disable failing tests on Jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15119:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/15119,1,['test'],['tests']
Testability,[CMake] Add `testsupport` option that is `OFF` by default,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16625:13,test,testsupport,13,https://root.cern,https://github.com/root-project/root/pull/16625,1,['test'],['testsupport']
Testability,[CMake] Add scripts to configure/build/test ROOT with CTest,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14999:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/14999,1,['test'],['test']
Testability,[CMake] Don't treat DistRDF tests as features,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15464:28,test,tests,28,https://root.cern,https://github.com/root-project/root/pull/15464,1,['test'],['tests']
Testability,[CMake] Small CMake updates needed for RooFit's LinkDefs and Tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4968:61,Test,Tests,61,https://root.cern,https://github.com/root-project/root/pull/4968,1,['Test'],['Tests']
Testability,[CMake] Tutorials as tests: fail if function not found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16300:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/16300,1,['test'],['tests']
Testability,"[CONTRIBUTING] Move ""we require tests"" / (c) assign from web: [skip-ci]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8671:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/8671,1,['test'],['tests']
Testability,[Cling] Assertion fails with wrong but innocent code,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13965:8,Assert,Assertion,8,https://root.cern,https://github.com/root-project/root/issues/13965,1,['Assert'],['Assertion']
Testability,[Core] Also build test support in case of `testing=OFF`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16568:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/16568,2,['test'],"['test', 'testing']"
Testability,[Core] Revive TSeq tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6536:19,test,tests,19,https://root.cern,https://github.com/root-project/root/pull/6536,1,['test'],['tests']
Testability,[DF] Add Open Data benchmarks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7745:19,benchmark,benchmarks,19,https://root.cern,https://github.com/root-project/root/issues/7745,1,['benchmark'],['benchmarks']
Testability,[DF] Add a couple of tests for regex match/subs in jitted expressions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7585:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/7585,1,['test'],['tests']
Testability,[DF] Add logging to RunGraphs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11342:9,log,logging,9,https://root.cern,https://github.com/root-project/root/pull/11342,1,['log'],['logging']
Testability,[DF] Add more tests for Vary,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10607:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/10607,1,['test'],['tests']
Testability,[DF] Add more tests to dataframe_snapshot.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8753:14,test,tests,14,https://root.cern,https://github.com/root-project/root/pull/8753,1,['test'],['tests']
Testability,[DF] Add regression test for ROOT-9731 (RDF+TBranchObject),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6087:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/6087,1,['test'],['test']
Testability,[DF] Add support and tests for concurrent usage of different RDF objects from different threads,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15080:21,test,tests,21,https://root.cern,https://github.com/root-project/root/issues/15080,1,['test'],['tests']
Testability,[DF] Add test for Fill with object with arbitrary signature,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9495:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/9495,1,['test'],['test']
Testability,[DF] Add test for ROOT-10273,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6524:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/6524,1,['test'],['test']
Testability,[DF] Add test for Snapshot of nested RVecs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7640:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/7640,1,['test'],['test']
Testability,[DF] Add test for Vary call on aliased column name,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11119:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/11119,1,['test'],['test']
Testability,[DF] Add tests for RNTupleDS + RVecs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10621:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/10621,1,['test'],['tests']
Testability,[DF] Backport fix for test logic (v6.26),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9887:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/9887,2,"['log', 'test']","['logic', 'test']"
Testability,[DF] Better name for test file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11150:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/11150,1,['test'],['test']
Testability,[DF] Change test to avoid double free on Fedora39,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14803:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/14803,1,['test'],['test']
Testability,[DF] Clean after test case,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2196:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/2196,1,['test'],['test']
Testability,[DF] Disable cling nullptr checks in RDF internal logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7004:50,log,logic,50,https://root.cern,https://github.com/root-project/root/pull/7004,1,['log'],['logic']
Testability,[DF] Disable splitcoll_arrayview test if runtime modules are on,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5281:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/5281,1,['test'],['test']
Testability,[DF] Do not assume a certain entry order in MT tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5687:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/5687,1,['test'],['tests']
Testability,[DF] Do not jit in GraphAsymmErrors tests unless we mean to,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9842:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/9842,1,['test'],['tests']
Testability,[DF] Expect test death rather than asserting it,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2230:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/2230,2,"['assert', 'test']","['asserting', 'test']"
Testability,"[DF] Fix RVec<bool> display, fix the corresponding test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12598:51,test,test,51,https://root.cern,https://github.com/root-project/root/pull/12598,1,['test'],['test']
Testability,[DF] Fix arrow datasource and tests for recent arrow versions (v6.16),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5427:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/5427,1,['test'],['tests']
Testability,[DF] Fix arrow datasource and tests for recent arrow versions (v6.18),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5426:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/5426,1,['test'],['tests']
Testability,[DF] Fix dataframe_concurrency test on 32bit machines,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6842:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/6842,1,['test'],['test']
Testability,[DF] Fix datasource_more test failures on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8279:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/8279,1,['test'],['test']
Testability,[DF] Fix long int + Snapshot test on 32 bit platforms,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10364:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/10364,1,['test'],['test']
Testability,[DF] Fix the broken RDatasetSpec test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10951:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/10951,1,['test'],['test']
Testability,[DF] Improve Snapshot branch-address-resetting logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8375:47,log,logic,47,https://root.cern,https://github.com/root-project/root/pull/8375,1,['log'],['logic']
Testability,[DF] Improved Display tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2541:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/2541,1,['test'],['tests']
Testability,[DF] Increase test coverage,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3566:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/3566,1,['test'],['test']
Testability,[DF] Let RunGraphs log what code is being jitted,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11832:19,log,log,19,https://root.cern,https://github.com/root-project/root/pull/11832,1,['log'],['log']
Testability,[DF] Lift some data members and logic to non-template base classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9186:32,log,logic,32,https://root.cern,https://github.com/root-project/root/pull/9186,1,['log'],['logic']
Testability,[DF] Log begin/end of event loop and processing of each entry range,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6828:5,Log,Log,5,https://root.cern,https://github.com/root-project/root/pull/6828,1,['Log'],['Log']
Testability,[DF] Minor improvement to a log message,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11340:28,log,log,28,https://root.cern,https://github.com/root-project/root/pull/11340,1,['log'],['log']
Testability,[DF] Misc fixes to a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9882:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/9882,1,['test'],['test']
Testability,[DF] Move all single-thread vary tests together,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13192:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/13192,1,['test'],['tests']
Testability,[DF] Move logging of each task to debug log level,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11341:10,log,logging,10,https://root.cern,https://github.com/root-project/root/pull/11341,2,['log'],"['log', 'logging']"
Testability,[DF] Move mapper logic to create RDF in headnode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9298:17,log,logic,17,https://root.cern,https://github.com/root-project/root/pull/9298,1,['log'],['logic']
Testability,[DF] Re-enable RRootDS test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8763:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/8763,1,['test'],['test']
Testability,[DF] Re-use jitted lambdas for new RDF expressions with same logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5329:61,log,logic,61,https://root.cern,https://github.com/root-project/root/pull/5329,1,['log'],['logic']
Testability,[DF] Reduce amount of jitting in dataframe_simple test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11502:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/11502,1,['test'],['test']
Testability,[DF] Reduce runtimes of kahan tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11711:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/11711,1,['test'],['tests']
Testability,[DF] Remove the extra R__USE_IMT fixture in the RDatasetSpec tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10962:61,test,tests,61,https://root.cern,https://github.com/root-project/root/pull/10962,1,['test'],['tests']
Testability,"[DF] Remove unused ""unique ID"" logic in RDefineBase",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9308:31,log,logic,31,https://root.cern,https://github.com/root-project/root/pull/9308,1,['log'],['logic']
Testability,[DF] Remove wrong RepresentGraph logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8755:33,log,logic,33,https://root.cern,https://github.com/root-project/root/pull/8755,1,['log'],['logic']
Testability,[DF] Removing failing test with shorter friends,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12025:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/12025,1,['test'],['test']
Testability,[DF] Removing failing test with shorter friends (v6.28),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12212:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/12212,1,['test'],['test']
Testability,[DF] Revert to http in datasource_csv test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9232:38,test,test,38,https://root.cern,https://github.com/root-project/root/pull/9232,1,['test'],['test']
Testability,[DF] Run test in IMT mode too,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10715:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/10715,1,['test'],['test']
Testability,[DF] Shorten RDF unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13621:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/13621,1,['test'],['tests']
Testability,[DF] Simplify logic now that lifetimes are simpler,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2594:14,log,logic,14,https://root.cern,https://github.com/root-project/root/pull/2594,2,['log'],['logic']
Testability,[DF] Suppress spurious ResourceWarning in distrdf-pyspark tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8938:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/8938,1,['test'],['tests']
Testability,[DF] Test PR for RDF metadata handling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11885:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/11885,1,['Test'],['Test']
Testability,[DF] Test and workaround for the TLeaf-side part of ROOT-10942,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6113:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/6113,1,['Test'],['Test']
Testability,[DF] Test cast to RNode of RDF with datasource,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2642:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/2642,1,['Test'],['Test']
Testability,[DF] Test new test_snapshot roottests with new CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14393:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/14393,1,['Test'],['Test']
Testability,[DF] Test new test_snapshot roottests with new CI.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14394:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/14394,1,['Test'],['Test']
Testability,[DF] Tests and doc for the Display action,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2514:5,Test,Tests,5,https://root.cern,https://github.com/root-project/root/pull/2514,1,['Test'],['Tests']
Testability,[DF] Throw instead of logging an error if a file or tree is unreadable,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5207:22,log,logging,22,https://root.cern,https://github.com/root-project/root/pull/5207,1,['log'],['logging']
Testability,[DF] Try to fix dataframe_nodes test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2238:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/2238,1,['test'],['test']
Testability,[DF] Unit tests: use EXPECT_ANY_THROW where it makes sense,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3799:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/3799,1,['test'],['tests']
Testability,[DF] Use ROOT_GENERATE_DICTIONARY properly in dataframe/test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8401:56,test,test,56,https://root.cern,https://github.com/root-project/root/pull/8401,1,['test'],['test']
Testability,"[DF] Use `assert`, not `R__ASSERT` when we are checking for bugs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9268:10,assert,assert,10,https://root.cern,https://github.com/root-project/root/pull/9268,1,['assert'],['assert']
Testability,"[DF] Use assert, not R__ASSERT when checks are unnecessary in releases",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9258:9,assert,assert,9,https://root.cern,https://github.com/root-project/root/pull/9258,1,['assert'],['assert']
Testability,[DF] Use different file names in different tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9259:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/9259,1,['test'],['tests']
Testability,[DF] Use different files for different test cases,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9047:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/9047,1,['test'],['test']
Testability,[DF] Use unique file names in tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6121:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/6121,1,['test'],['tests']
Testability,[DF] Use unique file names in tests (6.20),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6122:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/6122,1,['test'],['tests']
Testability,[DF] Use unique file names in tests (6.22),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6123:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/6123,1,['test'],['tests']
Testability,[DF] gtest-tree-dataframe-test-dataframe-snapshot fails with AddressSanitizer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11222:26,test,test-dataframe-snapshot,26,https://root.cern,https://github.com/root-project/root/issues/11222,1,['test'],['test-dataframe-snapshot']
Testability,[DF][NFC] Move logging statement to DEBUG,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10905:15,log,logging,15,https://root.cern,https://github.com/root-project/root/pull/10905,1,['log'],['logging']
Testability,[DF][NFC] Remove unused variable in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2426:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/2426,1,['test'],['test']
Testability,[DF][ROOT-9174] Re-activate RRootDS test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3264:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/3264,1,['test'],['test']
Testability,[DF][ROOT-9457] Move result-readiness logic to RAction,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2461:38,log,logic,38,https://root.cern,https://github.com/root-project/root/pull/2461,1,['log'],['logic']
Testability,[DO NOT MERGE] Test roottest PR 1197,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16545:15,Test,Test,15,https://root.cern,https://github.com/root-project/root/pull/16545,1,['Test'],['Test']
Testability,[DO NOT MERGE] Test the test for #11707,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16766:15,Test,Test,15,https://root.cern,https://github.com/root-project/root/pull/16766,2,"['Test', 'test']","['Test', 'test']"
Testability,[DO NOT MERGE] Test windows failure in datasource root test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11326:15,Test,Test,15,https://root.cern,https://github.com/root-project/root/pull/11326,2,"['Test', 'test']","['Test', 'test']"
Testability,[DO NOT MERGE] Testing CI runs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15184:15,Test,Testing,15,https://root.cern,https://github.com/root-project/root/pull/15184,1,['Test'],['Testing']
Testability,[DO NOT MERGE] Triggers builds including test in roottest PR #1165,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16213:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/16213,1,['test'],['test']
Testability,[DO NOT MERGE] [graphics] Better testing for graphics output,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16127:33,test,testing,33,https://root.cern,https://github.com/root-project/root/pull/16127,1,['test'],['testing']
Testability,"[DO NOT MERGE][graphics] Test better diagnostic, json tests and Linux platform",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16114:25,Test,Test,25,https://root.cern,https://github.com/root-project/root/pull/16114,2,"['Test', 'test']","['Test', 'tests']"
Testability,[DO NOT REVIEW] test to trigger the CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14653:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/14653,1,['test'],['test']
Testability,[DRAFT][TMVA] Unconditionally run all TMVA tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15306:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/15306,1,['test'],['tests']
Testability,[DistRDF] Make logging uniform,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8982:15,log,logging,15,https://root.cern,https://github.com/root-project/root/issues/8982,1,['log'],['logging']
Testability,[Do not merge] PR to test new root-jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4577:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/4577,1,['test'],['test']
Testability,[Do not merge] Test clad master before release.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11166:15,Test,Test,15,https://root.cern,https://github.com/root-project/root/pull/11166,1,['Test'],['Test']
Testability,[Do not merge] Test modules without preloading,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3300:15,Test,Test,15,https://root.cern,https://github.com/root-project/root/pull/3300,1,['Test'],['Test']
Testability,[Draft] Debug test error in TError patches,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5803:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/5803,1,['test'],['test']
Testability,"[EDIT]: 2017-07-20 dropped commit (6953483). See the commit messages for detailed descriptions of the changes. In essence, when comparing some data with the KolmogorovTest an infinite loop was triggered. (bba95dd) We want to get an approximate solution to the test despite there being some bins with neg. content; (06024c8) To prevent the infinite loop in other cases, calling FillRandom with a histogram with negative content is now an error.; (6953483) The caching inside GetRandom can violate an invariant of the function. (Always return NaN when there is a bin with neg. content in the source histogram). [EDIT] Removed after discussion with Lorenzo. The recomputation of the integral here was deemed too expensive as the function is intended to be called in tight loops. Since these changes might have far reaching effects I am up for discussion whether any commits should be dropped. A reproducer in can be found [here](https://gist.github.com/ashlaban/05552ab5f5a7aa05e9c9b73229b2dba4).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/705:260,test,test,260,https://root.cern,https://github.com/root-project/root/pull/705,1,['test'],['test']
Testability,[Exp PyROOT] Add TCollection and TIter pythonisations and tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3298:58,test,tests,58,https://root.cern,https://github.com/root-project/root/pull/3298,1,['test'],['tests']
Testability,"[Exp PyROOT] Add pythonisation for RooWorkspace. RooWorkspace.import() cannot be called from Python. This adds a; pythonisation called RooWorkspace.Import() instead. @etejedor I updated the tutorials accordingly (they also serve as a test). A potential problem is that I didn't write a pythonisation for old PyROOT, so the tutorials won't work if somebody switches back.; Do we want to support also old PyROOT, or do we move on?",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5308:234,test,test,234,https://root.cern,https://github.com/root-project/root/pull/5308,1,['test'],['test']
Testability,[Exp PyROOT] Another round of test disabling for experimental PyROOT builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3275:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/3275,1,['test'],['test']
Testability,[Exp PyROOT] Changed syntax in C++ header jitted in a test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4672:54,test,test,54,https://root.cern,https://github.com/root-project/root/pull/4672,1,['test'],['test']
Testability,[Exp PyROOT] Changes to fix python-cpp tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3832:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/3832,1,['test'],['tests']
Testability,[Exp PyROOT] Fixed 'tutorial-math-Legendre-py' test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4072:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/4072,1,['test'],['test']
Testability,[Exp PyROOT] Fixed two other failing tests (AsNumpyArrays-py and tStudent-py) with commit 832989c,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3980:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/3980,1,['test'],['tests']
Testability,[Exp PyROOT] Fixes for AsNumpy test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5048:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/5048,1,['test'],['test']
Testability,[Exp PyROOT] Flag tutorials and tests that now fail in experimental PyROOT,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3260:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/3260,1,['test'],['tests']
Testability,[Exp PyROOT] Make tests runnable as Python scripts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3372:18,test,tests,18,https://root.cern,https://github.com/root-project/root/pull/3372,1,['test'],['tests']
Testability,[Exp PyROOT] Only run test if Roofit is there,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3220:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/3220,1,['test'],['test']
Testability,[Exp PyROOT] Other test fixed by commit 267179,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4139:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/4139,1,['test'],['test']
Testability,[Exp PyROOT] Prevent double copy of input test file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4442:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/4442,1,['test'],['test']
Testability,[Exp PyROOT] Re-enable RDF tests and tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3519:27,test,tests,27,https://root.cern,https://github.com/root-project/root/pull/3519,1,['test'],['tests']
Testability,"[Exp PyROOT] Re-enable tutorials, fix test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3330:38,test,test,38,https://root.cern,https://github.com/root-project/root/pull/3330,1,['test'],['test']
Testability,[Exp PyROOT] Temporarily disable PyROOT tests and tutorials in experimental mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3255:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/3255,1,['test'],['tests']
Testability,[Exp PyROOT] Test char array branches are properly read as Python str,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2925:13,Test,Test,13,https://root.cern,https://github.com/root-project/root/pull/2925,1,['Test'],['Test']
Testability,[Exp PyROOT] Test pyunittests-dataframe-cache enabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4123:13,Test,Test,13,https://root.cern,https://github.com/root-project/root/pull/4123,1,['Test'],['Test']
Testability,[Exp PyROOT] Trivial changes fixing installation troubles and tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4636:62,test,tests,62,https://root.cern,https://github.com/root-project/root/pull/4636,1,['test'],['tests']
Testability,[Exp PyROOT] Update of Cppyy + test fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4264:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/4264,1,['test'],['test']
Testability,[Exp PyROOT] Warning and logic fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4602:25,log,logic,25,https://root.cern,https://github.com/root-project/root/pull/4602,1,['log'],['logic']
Testability,[For testing - DO NOT MERGE] Do not draw error bars when they are smaller than the marker.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16383:5,test,testing,5,https://root.cern,https://github.com/root-project/root/pull/16383,1,['test'],['testing']
Testability,[FreeBSD] Fix TThread related tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13069:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/13069,1,['test'],['tests']
Testability,[FreeBSD] TThread related tests fail,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13068:26,test,tests,26,https://root.cern,https://github.com/root-project/root/issues/13068,1,['test'],['tests']
Testability,[FreeBSD] library load/unload order vs atexit registered dtors - makes tests fail,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13172:71,test,tests,71,https://root.cern,https://github.com/root-project/root/issues/13172,1,['test'],['tests']
Testability,[FreeBSD] macro compilation fail (evolution test),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13080:44,test,test,44,https://root.cern,https://github.com/root-project/root/issues/13080,1,['test'],['test']
Testability,[FreeBSD] merger tests fail with floating point exception,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13128:17,test,tests,17,https://root.cern,https://github.com/root-project/root/issues/13128,1,['test'],['tests']
Testability,[FreeBSD] roofit tests segfault,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13200:17,test,tests,17,https://root.cern,https://github.com/root-project/root/issues/13200,1,['test'],['tests']
Testability,[GSOC22] TMVA Pythonization Tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11617:28,Test,Tests,28,https://root.cern,https://github.com/root-project/root/pull/11617,1,['Test'],['Tests']
Testability,[GSOC][TMVA][SOFIE] Cast ONNX Operator implemented with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11033:79,test,tests,79,https://root.cern,https://github.com/root-project/root/pull/11033,1,['test'],['tests']
Testability,"[GSOC][TMVA][SOFIE] Comparision ONNX Operators (Less, Greater, LessOrEqual, GreaterOrEqual, Equal) implemented with the corresponding unit tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13171:139,test,tests,139,https://root.cern,https://github.com/root-project/root/pull/13171,1,['test'],['tests']
Testability,[GSOC][TMVA][SOFIE] Error function implemented successfully with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13104:88,test,tests,88,https://root.cern,https://github.com/root-project/root/pull/13104,1,['test'],['tests']
Testability,[GSOC][TMVA][SOFIE] Log ONNX Operator implemented with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12945:20,Log,Log,20,https://root.cern,https://github.com/root-project/root/pull/12945,2,"['Log', 'test']","['Log', 'tests']"
Testability,[GSOC][TMVA][SOFIE] Max ONNX Operator implemented with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11198:78,test,tests,78,https://root.cern,https://github.com/root-project/root/pull/11198,1,['test'],['tests']
Testability,[GSOC][TMVA][SOFIE] Pow ONNX Operator added to SOFIE with the corresponding unit tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10971:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/10971,1,['test'],['tests']
Testability,[GSOC][TMVA][SOFIE] Reduce ONNX Operators implemented with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11258:82,test,tests,82,https://root.cern,https://github.com/root-project/root/pull/11258,1,['test'],['tests']
Testability,[GSOC][TMVA][SOFIE] Shape ONNX Operator implemented with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11086:80,test,tests,80,https://root.cern,https://github.com/root-project/root/pull/11086,1,['test'],['tests']
Testability,[GSOC][TMVA][SOFIE] Tanh ONNX operator added with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10913:73,test,tests,73,https://root.cern,https://github.com/root-project/root/pull/10913,1,['test'],['tests']
Testability,[GSOC][TMVA][SOFIE] TopK ONNX Operator implemented with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12942:79,test,tests,79,https://root.cern,https://github.com/root-project/root/pull/12942,1,['test'],['tests']
Testability,[GSOC][TMVA][SOFIE] Where ONNX Operator implemented with the ccorresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13093:81,test,tests,81,https://root.cern,https://github.com/root-project/root/pull/13093,1,['test'],['tests']
Testability,"[GSOC][TMVA][SOFIE]Added all 4 Basic Binary Operators:- Add,Sub,Mul and Div with the Unit Tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10822:90,Test,Tests,90,https://root.cern,https://github.com/root-project/root/pull/10822,1,['Test'],['Tests']
Testability,[GSOC][TMVA][SOFIE]Neg ONNX Operator implemented in SOFIE with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10946:86,test,tests,86,https://root.cern,https://github.com/root-project/root/pull/10946,1,['test'],['tests']
Testability,[IMT] Remove duplicate unit test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6192:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/6192,1,['test'],['test']
Testability,[IMT] Test thread safety of task arena and TThreadExecutor.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6189:6,Test,Test,6,https://root.cern,https://github.com/root-project/root/pull/6189,1,['Test'],['Test']
Testability,[IO] Add test for hashing of streamer info record + misc fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2188:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/2188,1,['test'],['test']
Testability,[Math] Fix Kolmogorov-Smirnov 1 sample test (in ROOT::Math::GoFTest),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9819:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/9819,1,['test'],['test']
Testability,[Math] Make tolerance less strict on matrix inversion tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/521:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/521,1,['test'],['tests']
Testability,[Math] Respawn genvector tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13633:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/13633,1,['test'],['tests']
Testability,[NFC][skip-ci] Mention why we check cgroup quotas in LogicalCPUBandwidthControl,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8539:53,Log,LogicalCPUBandwidthControl,53,https://root.cern,https://github.com/root-project/root/pull/8539,1,['Log'],['LogicalCPUBandwidthControl']
Testability,[NOT TO MERGE] Enable test TEnum::GetEnum,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16535:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/16535,1,['test'],['test']
Testability,"[PyMVA] Refactoring of sklearn classifier with multi-class capability, unit-testing and ranking",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/343:76,test,testing,76,https://root.cern,https://github.com/root-project/root/pull/343,1,['test'],['testing']
Testability,[PyROOT exp] Add test for passing Python callables to ROOT.TF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3475:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/3475,1,['test'],['test']
Testability,[PyROOT] Add test for implicit import from the ROOT namespace,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5361:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/5361,1,['test'],['test']
Testability,[PyROOT] Add tests for stl containers pythonic behaviour,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14669:13,test,tests,13,https://root.cern,https://github.com/root-project/root/pull/14669,1,['test'],['tests']
Testability,[PyROOT] Fix TTree.AsMatrix unit-test for 32bit systems,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1950:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/1950,1,['test'],['test']
Testability,[PyROOT] Fix distributed RDataFrame tests due to error serialization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13926:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/13926,1,['test'],['tests']
Testability,[PyROOT] Fix test veto if ROOTTEST_IGNORE_NUMBA_PY[23] set.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6041:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/6041,1,['test'],['test']
Testability,[PyROOT] Harden tests of refcounts by invoking GC manually,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6127:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/6127,1,['test'],['tests']
Testability,[PyROOT] Ignore numba tests for specific build nodes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5476:22,test,tests,22,https://root.cern,https://github.com/root-project/root/pull/5476,1,['test'],['tests']
Testability,[PyROOT] Prevent functions from crashing due to Python 3.12 assert,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13912:60,assert,assert,60,https://root.cern,https://github.com/root-project/root/pull/13912,1,['assert'],['assert']
Testability,[PyROOT] Prevent module confusion when running doctest tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3204:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/3204,1,['test'],['tests']
Testability,[PyROOT] Prevent module confusion when running doctest tests (backport 6.16),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3210:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/3210,1,['test'],['tests']
Testability,[PyROOT] Relax memory test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15814:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/15814,1,['test'],['test']
Testability,[PyROOT] Relax overly pedantic `getattr` pythonization tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14706:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/14706,1,['test'],['tests']
Testability,[PyROOT] Remove broken `pyroot_dependency_versions` test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15272:52,test,test,52,https://root.cern,https://github.com/root-project/root/pull/15272,1,['test'],['test']
Testability,[PyROOT] Remove now unnecessary test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15286:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/15286,1,['test'],['test']
Testability,[PyROOT] Replace non-existent assertEquals with assertEqual,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11655:30,assert,assertEquals,30,https://root.cern,https://github.com/root-project/root/pull/11655,2,['assert'],"['assertEqual', 'assertEquals']"
Testability,[PyROOT] Simplify lookup logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5187:25,log,logic,25,https://root.cern,https://github.com/root-project/root/pull/5187,1,['log'],['logic']
Testability,[PyROOT] Test that RVec is accessible from the ROOT namespace,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7687:9,Test,Test,9,https://root.cern,https://github.com/root-project/root/pull/7687,1,['Test'],['Test']
Testability,[PyROOT] [do not merge] Test skimmed init,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14285:24,Test,Test,24,https://root.cern,https://github.com/root-project/root/pull/14285,1,['Test'],['Test']
Testability,[PyROOT][RDF] Fix logic to enable RDF tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10384:18,log,logic,18,https://root.cern,https://github.com/root-project/root/pull/10384,2,"['log', 'test']","['logic', 'tests']"
Testability,[Python] Add requirements.txt and test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5408:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/5408,1,['test'],['test']
Testability,"[RDF,PyROOT] Disable RDF.AsNumpy test on 32bit since RDF is disabled",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3190:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/3190,1,['test'],['test']
Testability,[RDF] Add tests and single-thread support for RDF+TEntryList,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3245:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/3245,1,['test'],['tests']
Testability,[RDF] Fix RDataFrame.AsNumpy unit-tests to be portable among Python v…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3160:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/3160,1,['test'],['tests']
Testability,[RDF] Fix a dependency issue for an RDF test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5716:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/5716,1,['test'],['test']
Testability,[RDF] Fix a dependency issue for an RDF test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5695:40,test,test,40,https://root.cern,https://github.com/root-project/root/pull/5695,2,['test'],['test']
Testability,[RDF] Fix name change in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2085:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/2085,1,['test'],['test']
Testability,[RDF] Move dictionary generation into RDF test to fix dependency issues.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5748:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/5748,2,['test'],['test']
Testability,[RDF] Re-enabled all test cases in dataframe_simple,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2084:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/2084,1,['test'],['test']
Testability,[RDF] Remove linking against dictionary target for RDF test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5720:55,test,test,55,https://root.cern,https://github.com/root-project/root/pull/5720,1,['test'],['test']
Testability,[RDF] Silence -Wunused-const-variable in sqlite test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5369:48,test,test,48,https://root.cern,https://github.com/root-project/root/pull/5369,1,['test'],['test']
Testability,"[RDrawable] change drawable identifier logic, simplify painting",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4469:39,log,logic,39,https://root.cern,https://github.com/root-project/root/pull/4469,2,['log'],['logic']
Testability,[RF] Add back dependency of testHistFactory on RooFitCommon,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11394:28,test,testHistFactory,28,https://root.cern,https://github.com/root-project/root/pull/11394,1,['test'],['testHistFactory']
Testability,[RF] Add logging to dataset feature in RooMinimizer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10609:9,log,logging,9,https://root.cern,https://github.com/root-project/root/pull/10609,1,['log'],['logging']
Testability,[RF] Add missing `override` keywords in `test`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11438:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/11438,1,['test'],['test']
Testability,[RF] Add testRooParamHistFunc inspired by issue #7182,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7322:9,test,testRooParamHistFunc,9,https://root.cern,https://github.com/root-project/root/pull/7322,1,['test'],['testRooParamHistFunc']
Testability,[RF] Add tests ROOT-4580 and ROOT-9528.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5599:9,test,tests,9,https://root.cern,https://github.com/root-project/root/pull/5599,1,['test'],['tests']
Testability,[RF] Add the CHEP'23 AD results as a test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12839:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/12839,1,['test'],['test']
Testability,[RF] Add unit test for pythonization of RooArgList iterator,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8042:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/8042,1,['test'],['test']
Testability,[RF] Add unit test for resetting data of NLL variables,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16353:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/16353,1,['test'],['test']
Testability,[RF] Added disclaimer on offsetting with new teststatistics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11650:45,test,teststatistics,45,https://root.cern,https://github.com/root-project/root/pull/11650,1,['test'],['teststatistics']
Testability,[RF] Added interface changes for TestStatatistics classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11549:33,Test,TestStatatistics,33,https://root.cern,https://github.com/root-project/root/pull/11549,1,['Test'],['TestStatatistics']
Testability,[RF] Added interface changes for TestStatistics classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11577:33,Test,TestStatistics,33,https://root.cern,https://github.com/root-project/root/pull/11577,2,['Test'],['TestStatistics']
Testability,[RF] AddressSanitizer failures in two RooFit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11221:45,test,tests,45,https://root.cern,https://github.com/root-project/root/issues/11221,1,['test'],['tests']
Testability,[RF] Also veto Python version of TestNonCentral when `mathmore=OFF`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15058:33,Test,TestNonCentral,33,https://root.cern,https://github.com/root-project/root/pull/15058,1,['Test'],['TestNonCentral']
Testability,[RF] Avoid RooFit depenency in some RooFitCore unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8792:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/8792,1,['test'],['tests']
Testability,[RF] Avoid including `RooMath.h` in RooFit headers and stress tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9214:62,test,tests,62,https://root.cern,https://github.com/root-project/root/pull/9214,1,['test'],['tests']
Testability,[RF] Avoid instantiating RooNLLVar directly in testRooAbsL.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16468:47,test,testRooAbsL,47,https://root.cern,https://github.com/root-project/root/pull/16468,1,['test'],['testRooAbsL']
Testability,[RF] Avoid using HistFactory class in RooFitCore tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16596:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/16596,1,['test'],['tests']
Testability,[RF] Avoid using test statistics constructors directly in user code,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10610:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/10610,1,['test'],['test']
Testability,[RF] Avoid using variable-length arrays in RooFit multiprocessing tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16777:66,test,tests,66,https://root.cern,https://github.com/root-project/root/pull/16777,1,['test'],['tests']
Testability,[RF] Batch mode returns broken logarithms when `-DVDT=OFF`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7240:31,log,logarithms,31,https://root.cern,https://github.com/root-project/root/issues/7240,1,['log'],['logarithms']
Testability,[RF] Bugfixes in RooFit BatchMode to enable also the passing of RooMCStudy tests in stressRooFit and support extended fits in subrange,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10627:75,test,tests,75,https://root.cern,https://github.com/root-project/root/pull/10627,1,['test'],['tests']
Testability,[RF] Change precision for comparisons in `testLikelihoodJob` and `testRooAbsL`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13261:42,test,testLikelihoodJob,42,https://root.cern,https://github.com/root-project/root/pull/13261,2,['test'],"['testLikelihoodJob', 'testRooAbsL']"
Testability,[RF] Change precision of RooAbsL EventSections tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12832:47,test,tests,47,https://root.cern,https://github.com/root-project/root/issues/12832,1,['test'],['tests']
Testability,[RF] Deprecate old test statistics headers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14179:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/14179,1,['test'],['test']
Testability,[RF] Disable RooFit AD tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15018:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/15018,1,['test'],['tests']
Testability,[RF] Disable RooFit multiprocess ProcessTimer test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12916:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/12916,1,['test'],['test']
Testability,[RF] Disable RooJohnson unit test because of TFormula v5 bug.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3950:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/3950,1,['test'],['test']
Testability,[RF] Disable `rf501_simultaneouspdf.py` tutorial test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11532:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/11532,1,['test'],['test']
Testability,[RF] Disable `rf615` tutorial test and `testLikelihoodJob` test that is prone to time out,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16723:30,test,test,30,https://root.cern,https://github.com/root-project/root/pull/16723,3,['test'],"['test', 'testLikelihoodJob']"
Testability,[RF] Disable `stressHistFactroy` tests if ROOT was not built with XML,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16675:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/16675,1,['test'],['tests']
Testability,[RF] Disable interpreted RooFit/RooStats tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6019:41,test,tests,41,https://root.cern,https://github.com/root-project/root/pull/6019,1,['test'],['tests']
Testability,[RF] Enable AD code-gen test for RooFit.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12451:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/12451,1,['test'],['test']
Testability,[RF] Enable RooCrystalBall test for AD,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15845:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/15845,1,['test'],['test']
Testability,[RF] Enable again the RooJSONFactoryWSTool Python tests on Mac,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9810:50,test,tests,50,https://root.cern,https://github.com/root-project/root/pull/9810,1,['test'],['tests']
Testability,[RF] Explicitly use legacy backend for references in `testRooRealL`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14755:54,test,testRooRealL,54,https://root.cern,https://github.com/root-project/root/pull/14755,1,['test'],['testRooRealL']
Testability,[RF] Final changes to make the ATLAS benchmarks run with `BatchMode`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12157:37,benchmark,benchmarks,37,https://root.cern,https://github.com/root-project/root/pull/12157,1,['benchmark'],['benchmarks']
Testability,[RF] Fix ASAN build test failures in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11192:20,test,test,20,https://root.cern,https://github.com/root-project/root/pull/11192,1,['test'],['test']
Testability,[RF] Fix RooCategory read test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5658:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/5658,1,['test'],['test']
Testability,[RF] Fix `RooAbsReal::computeBatch` and enable stressRooStats with BatchMode as unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11807:85,test,test,85,https://root.cern,https://github.com/root-project/root/pull/11807,1,['test'],['test']
Testability,[RF] Fix architecture logging RooFitDriver,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10352:22,log,logging,22,https://root.cern,https://github.com/root-project/root/pull/10352,1,['log'],['logging']
Testability,[RF] Fix copy-paste error in `rf205` tutorial and related stressRooFit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11985:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/11985,1,['test'],['test']
Testability,[RF] Fix memory leaks in `testRooParamHistFunc` and silence test output,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9477:26,test,testRooParamHistFunc,26,https://root.cern,https://github.com/root-project/root/pull/9477,2,['test'],"['test', 'testRooParamHistFunc']"
Testability,[RF] Fix memory leaks in testRooCrystalBall,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16067:25,test,testRooCrystalBall,25,https://root.cern,https://github.com/root-project/root/pull/16067,1,['test'],['testRooCrystalBall']
Testability,[RF] Fix recently-introduced `RooAbsReal::getPropagatedError` problems and add several new unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11445:96,test,tests,96,https://root.cern,https://github.com/root-project/root/pull/11445,1,['test'],['tests']
Testability,[RF] Fix skipping of zero weights in tests statistic caching,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13639:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/13639,1,['test'],['tests']
Testability,[RF] Fix testHistFactory compilation error on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9640:9,test,testHistFactory,9,https://root.cern,https://github.com/root-project/root/pull/9640,1,['test'],['testHistFactory']
Testability,[RF] Fix testing if fit results are identical.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4114:9,test,testing,9,https://root.cern,https://github.com/root-project/root/pull/4114,1,['test'],['testing']
Testability,[RF] Fix wrong size for gradient output array in testRooFuncWrapper.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12612:49,test,testRooFuncWrapper,49,https://root.cern,https://github.com/root-project/root/pull/12612,1,['test'],['testRooFuncWrapper']
Testability,"[RF] Follow up on ""RooFit::MultiProcess & TestStatistics part 5b: test RooGradMinimizerFcn""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8940:42,Test,TestStatistics,42,https://root.cern,https://github.com/root-project/root/pull/8940,2,"['Test', 'test']","['TestStatistics', 'test']"
Testability,[RF] Implement RooPolyFunc assignment operator and enable Windows test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9447:66,test,test,66,https://root.cern,https://github.com/root-project/root/pull/9447,1,['test'],['test']
Testability,[RF] Improve logging of toy generation in RooMCStudy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10509:13,log,logging,13,https://root.cern,https://github.com/root-project/root/pull/10509,1,['log'],['logging']
Testability,[RF] Improve passing `nullptr` to RooFit message logger,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10546:49,log,logger,49,https://root.cern,https://github.com/root-project/root/pull/10546,1,['log'],['logger']
Testability,[RF] Make old test statistic classes transient with `ClassDef(0)`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11909:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/11909,1,['test'],['test']
Testability,[RF] Make sure RooFit legacy backend is still tested,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14919:46,test,tested,46,https://root.cern,https://github.com/root-project/root/pull/14919,1,['test'],['tested']
Testability,[RF] Minor interface changes for TestStatistics classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11906:33,Test,TestStatistics,33,https://root.cern,https://github.com/root-project/root/pull/11906,1,['Test'],['TestStatistics']
Testability,"[RF] Modernize RooSimPdfBuilder, fix a logic error and implement test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7489:39,log,logic,39,https://root.cern,https://github.com/root-project/root/pull/7489,2,"['log', 'test']","['logic', 'test']"
Testability,[RF] More fixes and unit tests related to the RooAddPdf normalization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11485:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/11485,1,['test'],['tests']
Testability,[RF] More improvements to `roofitcore` unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11995:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/11995,1,['test'],['tests']
Testability,[RF] Move remaining RooFit tests in `test/` into `roofit/`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15490:27,test,tests,27,https://root.cern,https://github.com/root-project/root/pull/15490,2,['test'],"['test', 'tests']"
Testability,[RF] Move vectorised PDF tests from roottest to roofit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16661:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/16661,1,['test'],['tests']
Testability,[RF] New mechanism for logging and throwing errors in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11428:23,log,logging,23,https://root.cern,https://github.com/root-project/root/pull/11428,1,['log'],['logging']
Testability,[RF] Prevent intermittent failures in testActionHelpers.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7583:38,test,testActionHelpers,38,https://root.cern,https://github.com/root-project/root/pull/7583,1,['test'],['testActionHelpers']
Testability,"[RF] ProcessTimer for logging timings in `RooFit::MultiProcess` and `RooFit::TestStatistics`, and HeatmapAnalyzer for analysing them",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11791:22,log,logging,22,https://root.cern,https://github.com/root-project/root/pull/11791,2,"['Test', 'log']","['TestStatistics', 'logging']"
Testability,[RF] Refactor `testLikelihoodGradientJob.cxx`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11793:15,test,testLikelihoodGradientJob,15,https://root.cern,https://github.com/root-project/root/pull/11793,1,['test'],['testLikelihoodGradientJob']
Testability,[RF] Remove logging-related pdf members or make them transient,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11093:12,log,logging-related,12,https://root.cern,https://github.com/root-project/root/pull/11093,1,['log'],['logging-related']
Testability,[RF] Remove tutorials from `root/roofitcore/test`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11361:44,test,test,44,https://root.cern,https://github.com/root-project/root/pull/11361,1,['test'],['test']
Testability,[RF] Reorganize RooFit pythonizations to fix existing unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7753:59,test,tests,59,https://root.cern,https://github.com/root-project/root/pull/7753,1,['test'],['tests']
Testability,[RF] Rewrite `RooProdPdf.TestGetPartIntList` unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12447:25,Test,TestGetPartIntList,25,https://root.cern,https://github.com/root-project/root/pull/12447,2,"['Test', 'test']","['TestGetPartIntList', 'test']"
Testability,[RF] RooBinSamplingPdf fixes to re-enable `IntegrateBins_SubRange` test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10269:67,test,test,67,https://root.cern,https://github.com/root-project/root/pull/10269,1,['test'],['test']
Testability,[RF] RooFit::TestStatistics performance fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10832:13,Test,TestStatistics,13,https://root.cern,https://github.com/root-project/root/pull/10832,1,['Test'],['TestStatistics']
Testability,[RF] RooProdPdf test failure on s390x,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12430:16,test,test,16,https://root.cern,https://github.com/root-project/root/issues/12430,1,['test'],['test']
Testability,[RF] Several test and tutorials fail when roofit is disabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11605:13,test,test,13,https://root.cern,https://github.com/root-project/root/issues/11605,1,['test'],['test']
Testability,[RF] Silence RooWorkspace unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3379:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/3379,1,['test'],['test']
Testability,[RF] Small tests and bugfixes in RooFit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4692:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/4692,1,['test'],['tests']
Testability,[RF] Support RooPolynomial in RooFit JSON IO and improve test suite,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12232:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/12232,1,['test'],['test']
Testability,[RF] Support pdf normalization with error logging in RooBatchCompute,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12677:42,log,logging,42,https://root.cern,https://github.com/root-project/root/pull/12677,1,['log'],['logging']
Testability,[RF] Test developments in the CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9367:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/9367,1,['Test'],['Test']
Testability,[RF] Test failure on i686 only with numpy 1.24.1 (pyunittests-pyroot-roofit-roodataset-numpy),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12162:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/issues/12162,1,['Test'],['Test']
Testability,[RF] Test schema evolution of RooDataHist,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8037:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/issues/8037,1,['Test'],['Test']
Testability,[RF] Test schema evolution of RooDataHist from version 5 and 6,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8090:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/8090,1,['Test'],['Test']
Testability,[RF] The testRooAbsL test compares two doubles and fails due to rounding errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12389:9,test,testRooAbsL,9,https://root.cern,https://github.com/root-project/root/pull/12389,2,['test'],"['test', 'testRooAbsL']"
Testability,[RF] Update ParamHistFunc.cxx - remove bogus assertion,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12725:45,assert,assertion,45,https://root.cern,https://github.com/root-project/root/pull/12725,1,['assert'],['assertion']
Testability,[RF] Update reference files for testProxiesAndCategories,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8790:32,test,testProxiesAndCategories,32,https://root.cern,https://github.com/root-project/root/pull/8790,1,['test'],['testProxiesAndCategories']
Testability,[RF] Use local message level changes in stressRooFit to silence tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8611:64,test,tests,64,https://root.cern,https://github.com/root-project/root/pull/8611,1,['test'],['tests']
Testability,[RF] Veto `.py` tutorial tests of RooStats and HistFactory if ROOT is built without `roofit`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11609:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/11609,1,['test'],['tests']
Testability,"[RF] `rootbench-benchJohnson` fills log with ""use fixCoefNormalization!""",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7639:36,log,log,36,https://root.cern,https://github.com/root-project/root/issues/7639,1,['log'],['log']
Testability,[RF] add LikelihoodJob support and some RooFit::TestStatistics fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10966:48,Test,TestStatistics,48,https://root.cern,https://github.com/root-project/root/pull/10966,1,['Test'],['TestStatistics']
Testability,[RF] compiler-dependent RooNaNPacker tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15908:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/15908,1,['test'],['tests']
Testability,[RF] investigate and fix MultiProcess::Queue test timeout,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15494:45,test,test,45,https://root.cern,https://github.com/root-project/root/issues/15494,1,['test'],['test']
Testability,[RF] testRooGradMinimizerFcn needs to be re-enabled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8697:5,test,testRooGradMinimizerFcn,5,https://root.cern,https://github.com/root-project/root/issues/8697,1,['test'],['testRooGradMinimizerFcn']
Testability,[RF] update MultiProcess/TestStatistics docs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16788:25,Test,TestStatistics,25,https://root.cern,https://github.com/root-project/root/pull/16788,1,['Test'],['TestStatistics']
Testability,[RF][HS3] Fix dicts instead of lists option and general HistFactory test improvements,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13537:68,test,test,68,https://root.cern,https://github.com/root-project/root/pull/13537,1,['test'],['test']
Testability,[RF][PyROOT] Avoid boolean operators on numpy arrays in unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13612:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/13612,1,['test'],['test']
Testability,[RF][PyROOT] Move RooFit pythonization tests from roottest to main repo,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11610:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/11610,1,['test'],['tests']
Testability,[RF][PyROOT] Refactor: move RooWorkspace variable creation logic to C++ backend,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13150:59,log,logic,59,https://root.cern,https://github.com/root-project/root/pull/13150,1,['log'],['logic']
Testability,[RF][Windows] Re-enable `testRooFuncWrapper`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15026:25,test,testRooFuncWrapper,25,https://root.cern,https://github.com/root-project/root/pull/15026,1,['test'],['testRooFuncWrapper']
Testability,"[RHist] Move RAxis to an inheritance-based design, improve tests, fix many bugs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4933:59,test,tests,59,https://root.cern,https://github.com/root-project/root/pull/4933,1,['test'],['tests']
Testability,[RNTupleDS] Test reading data,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6336:12,Test,Test,12,https://root.cern,https://github.com/root-project/root/pull/6336,1,['Test'],['Test']
Testability,[RNTuple] Add test for compression algorithm,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5179:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/5179,1,['test'],['test']
Testability,[ROOT-10190] Excluded fastcloningeventtree test in roottest.git should be re-enabled back,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14579:43,test,test,43,https://root.cern,https://github.com/root-project/root/issues/14579,1,['test'],['test']
Testability,"[ROOT-10277] When creating a lot of datasets in RooFit, TFoam eventually; crashed, since it was using a TRefArray, which does some global UID; magic that overflows. Replacing the TRefArray by a simple vector of; indices fixes that.; This is possible, since the TRefArray only points to active elements in; another collection, so simply storing the index in that collection is; sufficient. A ROOT-6.20 TFoam was created on lxplus, and written to a file. Reading; this file, and generating the 10 next random numbers is tested now. @pcanal ; Please check the schema evolution for me. Is it correct to ""read"" an array of pointers like this?; ```; TFoamCell **fCells;; fCells = onfile.fCells;; ```; It seems to work, but I'm unsure if that's just by luck (e.g. since the file is still open).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5412:518,test,tested,518,https://root.cern,https://github.com/root-project/root/pull/5412,1,['test'],['tested']
Testability,[ROOT-10472] Fix building clingutils tests with builtin_clang=OFF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4749:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/4749,2,['test'],['tests']
Testability,[ROOT-10527][RDF] Split tests and add test for Display action and fix bug for displaying std::string,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4850:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/4850,2,['test'],"['test', 'tests']"
Testability,"[ROOT-10586](https://sft.its.cern.ch/jira/browse/ROOT-10586) is caused by a missing `<cmath>` include, which resulted in old GCC 6 not ""seeing"" the floating-point overloads of `std::abs` and getting confused at which integer overload of `std::abs` it should pick when a `double` is passed in. This was not caught during testing because we test on recent compilers with a C++17-compatible STL implementation, where if you see some overloads of `std::abs`, you see all of them. By switching to `std::fabs` in addition to fixing the include, I guarantee that if this happens again during an overeager include cleanup, the compiler error message will be clearer. Old compilers will now complain about a missing declaration of `std::fabs`, rather than a failed overload resolution of integer `std::abs`. Fixes ROOT-10586.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5062:320,test,testing,320,https://root.cern,https://github.com/root-project/root/pull/5062,2,['test'],"['test', 'testing']"
Testability,"[ROOT-10605] When selecting a slice of a RooSimultaneous for plotting,; the last-active slice was plotted, ignoring the selection. This PR is already in master, and will be tested there on Thursday. This will allow merging the backport in time for Friday.; (Automated testing is tricky, since it's about plotting.). Duplicates: [ROOT-2936]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5134:173,test,tested,173,https://root.cern,https://github.com/root-project/root/pull/5134,2,['test'],"['tested', 'testing']"
Testability,"[ROOT-10713][ROOT-7986] Several objects were leaking when being read from a file. This is because ownership was unclear, and because reading apparently wasn't tested.; Here; - Four leaks are fixed; - A reading test is added (which is reading the object that revealed all the leaks. This tests both for leaks in address sanitizer builds, but also ensures that the updated streamers still work.); - A container overflow detected by address sanitizer is fixed.; - And the includes of RooRealVar are stripped down significantly. This is nice for RooFit, since almost everything includes RooRealVar.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5466:159,test,tested,159,https://root.cern,https://github.com/root-project/root/pull/5466,3,['test'],"['test', 'tested', 'tests']"
Testability,"[ROOT-10810] When RooTreeDataStore is streamed without a TFile (happens; when pickling), a memory-resident tree in RooTreeDataStore fails to; pickle.; It had to be taken out of ROOT's streamer facilities, since it often; exceeds the 1 Gb size limit for streaming operations. Test in [roottest/#530](https://github.com/root-project/roottest/pull/530)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5769:275,Test,Test,275,https://root.cern,https://github.com/root-project/root/pull/5769,1,['Test'],['Test']
Testability,[RooFit] Fix race condition when running tutorial tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2936:50,test,tests,50,https://root.cern,https://github.com/root-project/root/pull/2936,1,['test'],['tests']
Testability,[TChain] Add test for ROOT-10672,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5508:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/5508,1,['test'],['test']
Testability,[TCling] Separate test for GetCppName,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15432:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/15432,1,['test'],['test']
Testability,[TDF] Add a google test for Range,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1652:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/1652,1,['test'],['test']
Testability,[TDF] Add test for Snapshotting of branches with custom titles,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1560:10,test,test,10,https://root.cern,https://github.com/root-project/root/pull/1560,2,['test'],['test']
Testability,[TDF] Add tests for using friend trees in `Define`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1148:10,test,tests,10,https://root.cern,https://github.com/root-project/root/pull/1148,1,['test'],['tests']
Testability,[TDF] Delete all output files at the exit of a test case,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2057:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/2057,3,['test'],['test']
Testability,[TDF] Do not run IMT Snapshot tests in noimt builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1101:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/1101,1,['test'],['tests']
Testability,[TDF] Do not run imt test on noimt builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1222:21,test,test,21,https://root.cern,https://github.com/root-project/root/pull/1222,1,['test'],['test']
Testability,[TDF] Fix dataframe_friends test after array_view->TArrayBranch change,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1309:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/1309,1,['test'],['test']
Testability,[TDF] Fixes and test for callbacks,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1194:16,test,test,16,https://root.cern,https://github.com/root-project/root/pull/1194,1,['test'],['test']
Testability,[TDF] More snapshot tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1691:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/1691,1,['test'],['tests']
Testability,[TDF] Only compile the type guessing logic when needed,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/345:37,log,logic,37,https://root.cern,https://github.com/root-project/root/pull/345,1,['log'],['logic']
Testability,[TDF] ROOT-9227: Implement TLazyDS and its tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1601:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/1601,1,['test'],['tests']
Testability,[TDF] Refactor snapshot tests and add more coverage,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1086:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/1086,1,['test'],['tests']
Testability,[TDF] Rework the cache test about non copiable items,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1134:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/1134,1,['test'],['test']
Testability,[TDF] Simplify action creation logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/348:31,log,logic,31,https://root.cern,https://github.com/root-project/root/pull/348,1,['log'],['logic']
Testability,"[TDF] Simplify logic, reduce instructions in column value reading",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1060:15,log,logic,15,https://root.cern,https://github.com/root-project/root/pull/1060,1,['log'],['logic']
Testability,[TDF] Temporarily disable CArraysFromTree test in dataframe_simple,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2051:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/2051,1,['test'],['test']
Testability,[TDF] Test friend trees' branches which contain arrays,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1145:6,Test,Test,6,https://root.cern,https://github.com/root-project/root/pull/1145,1,['Test'],['Test']
Testability,[TDF] Test that we actually read the friend branch,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1773:6,Test,Test,6,https://root.cern,https://github.com/root-project/root/pull/1773,2,['Test'],['Test']
Testability,"[TDF][TO REVERT] Disable dataframe_{interface,simple} tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1906:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/1906,2,['test'],['tests']
Testability,[TEST DO NOT MERGE] [ci] Ignore architecture dimension in the Mac job matrix,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16448:1,TEST,TEST,1,https://root.cern,https://github.com/root-project/root/pull/16448,1,['TEST'],['TEST']
Testability,[TEST] Checking PRs for cxxmodules and rt cxxmodules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2816:1,TEST,TEST,1,https://root.cern,https://github.com/root-project/root/pull/2816,1,['TEST'],['TEST']
Testability,[TEST] testing RT cxxmodules in PRS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2818:1,TEST,TEST,1,https://root.cern,https://github.com/root-project/root/pull/2818,2,"['TEST', 'test']","['TEST', 'testing']"
Testability,[TMVA exp][ROOT-10417] Fix bug in RTensor tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4663:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/4663,1,['test'],['tests']
Testability,[TMVA experimental] Veto BDT inference tests on 32bit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4464:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/4464,1,['test'],['tests']
Testability,"[TMVA] API-Support for SGD Optimizer:; * Add Base Class VOptimizer.; * Add Derived Class TSGD with Momentum implementation.; * Add Unit Tests for SGD Optimizer.; * Modify the MethodDL Tests to include parsing options for Optimizer. An example Training Strategy string may look like,. ```; ""LearningRate=1e-1,Optimizer=SGD,Momentum=0.9,Repetitions=1,""; ""ConvergenceSteps=20,BatchSize=256,TestRepetitions=10,""; ""WeightDecay=1e-4,Regularization=L2,""; ""DropConfig=0.0+0.5+0.5+0.5, Multithreading=True""; ```. Reference Implementation: Tensorflow; Blog Post: https://www.sravikiran.com/GSOC18//2018/07/09/sgd/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2309:136,Test,Tests,136,https://root.cern,https://github.com/root-project/root/pull/2309,3,['Test'],"['TestRepetitions', 'Tests']"
Testability,[TMVA] Add PyMVA method PyKeras and enable PyMVA specific unit-tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/280:63,test,tests,63,https://root.cern,https://github.com/root-project/root/pull/280,1,['test'],['tests']
Testability,[TMVA] Add bold headers for Train/Test/EvaluateAllMethods,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/273:34,Test,Test,34,https://root.cern,https://github.com/root-project/root/pull/273,1,['Test'],['Test']
Testability,[TMVA] Backport of using a unique XML file for the CV tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10023:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/10023,1,['test'],['tests']
Testability,[TMVA] Correctly link `blas` in PyMVA tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15278:38,test,tests,38,https://root.cern,https://github.com/root-project/root/pull/15278,1,['test'],['tests']
Testability,[TMVA] DNN - Tune minimization test to avoid false positives,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1958:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/1958,1,['test'],['test']
Testability,[TMVA] Disable a crashing cuDNN test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16791:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/16791,1,['test'],['test']
Testability,[TMVA] Enable again all tests on `alma9` and `fedora39`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15439:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/15439,1,['test'],['tests']
Testability,[TMVA] Extra logging for cv multiproc test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2526:13,log,logging,13,https://root.cern,https://github.com/root-project/root/pull/2526,2,"['log', 'test']","['logging', 'test']"
Testability,[TMVA] Fix bug caught by testMinimizationCpu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/492:25,test,testMinimizationCpu,25,https://root.cern,https://github.com/root-project/root/pull/492,1,['test'],['testMinimizationCpu']
Testability,[TMVA] Fix for testDerivativesCpu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/534:15,test,testDerivativesCpu,15,https://root.cern,https://github.com/root-project/root/pull/534,1,['test'],['testDerivativesCpu']
Testability,[TMVA] Make ROC calc O(N log N) instead of O(N * T),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/969:25,log,log,25,https://root.cern,https://github.com/root-project/root/pull/969,1,['log'],['log']
Testability,[TMVA] Prevent double->float conversions in TestMatrixArithmetic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/518:44,Test,TestMatrixArithmetic,44,https://root.cern,https://github.com/root-project/root/pull/518,1,['Test'],['TestMatrixArithmetic']
Testability,[TMVA] Pymva test (Keras) failing on 632 and main,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15396:13,test,test,13,https://root.cern,https://github.com/root-project/root/issues/15396,1,['test'],['test']
Testability,[TMVA] Refactor MethodDL Tests for Optimization.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2379:25,Test,Tests,25,https://root.cern,https://github.com/root-project/root/pull/2379,1,['Test'],['Tests']
Testability,[TMVA] Refactor PyRandomForest method and add multi-class unit-tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/303:63,test,tests,63,https://root.cern,https://github.com/root-project/root/pull/303,1,['test'],['tests']
Testability,[TMVA] TestCrossValidationSerialise memory handling,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1634:7,Test,TestCrossValidationSerialise,7,https://root.cern,https://github.com/root-project/root/pull/1634,1,['Test'],['TestCrossValidationSerialise']
Testability,[TMVA] Use R__ASSERT instead of assert,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13831:32,assert,assert,32,https://root.cern,https://github.com/root-project/root/pull/13831,1,['assert'],['assert']
Testability,[TMVA] Use a unique XML file for the trained model used in the test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10018:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/10018,1,['test'],['test']
Testability,[TMVA] cuDNN LSTM backpropagation test fails on ubuntu2404 cuda 12.6.1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16790:34,test,test,34,https://root.cern,https://github.com/root-project/root/issues/16790,1,['test'],['test']
Testability,[TMVA][CMake] Remove failing keras test from macos battery,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13765:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/13765,1,['test'],['test']
Testability,[TMVA][SOFIE] EyeLike ONNX operator implemented with tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14297:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/14297,1,['test'],['tests']
Testability,[TMVA][SOFIE] Fix SOFIE tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11635:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/11635,1,['test'],['tests']
Testability,[TMVA][SOFIE]Expand ONNX Operator implemented with the corresponding unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11608:74,test,tests,74,https://root.cern,https://github.com/root-project/root/pull/11608,1,['test'],['tests']
Testability,[TMVA][TMVA-Gui] - Generic object to log and present Keras and DNN training history,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4337:37,log,log,37,https://root.cern,https://github.com/root-project/root/pull/4337,1,['log'],['log']
Testability,[TPython] Enable TPython tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16454:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/16454,1,['test'],['tests']
Testability,[TREEPROCMT] Do not build test if not an imt build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2159:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/2159,1,['test'],['test']
Testability,[TThreadedObject] Fix usage of condition variable in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5596:53,test,test,53,https://root.cern,https://github.com/root-project/root/pull/5596,1,['test'],['test']
Testability,[TTreeProcessorMT] Re-enable running test with different amount of th…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8570:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/8570,1,['test'],['test']
Testability,[TTree] Add compression algorithm test for TFile/TTree,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5081:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/5081,1,['test'],['test']
Testability,[Test Issue],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6397:1,Test,Test,1,https://root.cern,https://github.com/root-project/root/issues/6397,1,['Test'],['Test']
Testability,[Testing] Significantly reduce duration of legacy tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13762:1,Test,Testing,1,https://root.cern,https://github.com/root-project/root/pull/13762,1,['Test'],['Testing']
Testability,[TreeProcMT] Fail test early rather than crashing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4956:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/4956,1,['test'],['test']
Testability,[TreeProcMT] Minor improvement to cluster boundaries merging logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6901:61,log,logic,61,https://root.cern,https://github.com/root-project/root/pull/6901,1,['log'],['logic']
Testability,[TreeProcMT] Only run test w/ remote file reads if xrootd is ON,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5531:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/5531,1,['test'],['test']
Testability,[Tree] Add regression test for the issue described in ROOT-10942,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6071:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/6071,1,['test'],['test']
Testability,[Tree] Extend testing of TTreeReader,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16329:14,test,testing,14,https://root.cern,https://github.com/root-project/root/pull/16329,1,['test'],['testing']
Testability,[Tree] Fix tests for parsing of urls,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5060:11,test,tests,11,https://root.cern,https://github.com/root-project/root/pull/5060,1,['test'],['tests']
Testability,[VecOps] Remove expensive asserts from RVec::operator[],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9376:26,assert,asserts,26,https://root.cern,https://github.com/root-project/root/pull/9376,1,['assert'],['asserts']
Testability,[VecOps] Several improvements in the RVec swap tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10343:47,test,tests,47,https://root.cern,https://github.com/root-project/root/pull/10343,1,['test'],['tests']
Testability,[VecOps][Wip] Introduce the RStrongBool type for representing the results of logical operators,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2147:77,log,logical,77,https://root.cern,https://github.com/root-project/root/pull/2147,1,['log'],['logical']
Testability,[WIP Do not touch][VecOps] Test Autoloading on Ubu 16.04 gcc 5.4,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1944:27,Test,Test,27,https://root.cern,https://github.com/root-project/root/pull/1944,1,['Test'],['Test']
Testability,[WIP] DO NOT MERGE! CI TEST.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5402:23,TEST,TEST,23,https://root.cern,https://github.com/root-project/root/pull/5402,1,['TEST'],['TEST']
Testability,[WIP] Testing of buitin glew,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4786:6,Test,Testing,6,https://root.cern,https://github.com/root-project/root/pull/4786,1,['Test'],['Testing']
Testability,[WIP][PyROOT] Add test checking loaded libraries after import,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5256:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/5256,1,['test'],['test']
Testability,[Work Product] This pull request contains the code pertaining to the **Google Summer of Code 2020** project [Development of 3D CNN in TMVA](https://summerofcode.withgoogle.com/projects/#5442246578536448). It implements the following features:. - 3D CNN layer for cpu and and tests for the same; - 3D MaxPool layer for cpu and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is Added backward pass tests([1b82793](https://github.com/root-project/root/pull/6263/commits/1b8279319807d1940b5f4a3d5278e15f74a941fa)). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6263:275,test,tests,275,https://root.cern,https://github.com/root-project/root/pull/6263,3,['test'],['tests']
Testability,[Work Product] This pull request contains the code pertaining to the GSoC 2019 project [Development of LSTM and GRU layers in TMVA](https://summerofcode.withgoogle.com/projects/#5680527699345408). It implements the following features:. - LSTM layer for cpu and ref architecture types and tests for the same; - GRU layer for cpu and ref architecture types and tests for the same. Implementation for CUDA architecture is still WIP. The last commit is **Added comments**(9c94d63). These features are yet to be merged. Detailed updates can be found on my [blog post](https://surya2191997.github.io/),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3924:288,test,tests,288,https://root.cern,https://github.com/root-project/root/pull/3924,2,['test'],['tests']
Testability,"[backport][cmake,test] Get rid of `lsb_release`:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14923:17,test,test,17,https://root.cern,https://github.com/root-project/root/pull/14923,1,['test'],['test']
Testability,[build] Format error as string in dependency_versions.py test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13617:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/13617,1,['test'],['test']
Testability,[c++20] Fix several tests and tutorials with -std:c++20,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12526:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/12526,1,['test'],['tests']
Testability,[ci] A failing test is an error: [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12812:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/12812,1,['test'],['test']
Testability,[ci] Add a workflow that builds cling standalone and runs its tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14972:62,test,tests,62,https://root.cern,https://github.com/root-project/root/issues/14972,1,['test'],['tests']
Testability,[ci] Add test summary to pull requests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12314:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/12314,1,['test'],['test']
Testability,[ci] Also publish test results for scheduled builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14961:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/14961,1,['test'],['test']
Testability,[ci] DO NOT MERGE: test drive roottest PR,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16112:19,test,test,19,https://root.cern,https://github.com/root-project/root/pull/16112,1,['test'],['test']
Testability,[ci] Disable LLVM assertions on mac X86 builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14650:18,assert,assertions,18,https://root.cern,https://github.com/root-project/root/pull/14650,1,['assert'],['assertions']
Testability,"[ci] Disable PR uploads, enable testing",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12275:32,test,testing,32,https://root.cern,https://github.com/root-project/root/pull/12275,1,['test'],['testing']
Testability,[ci] Enable distributed RDataFrame testing on MacOS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15540:35,test,testing,35,https://root.cern,https://github.com/root-project/root/pull/15540,1,['test'],['testing']
Testability,[ci] Fix untar dir in replication log. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13496:34,log,log,34,https://root.cern,https://github.com/root-project/root/pull/13496,1,['log'],['log']
Testability,[ci] Make sure GH log group/endgroup end up on separate lines. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13515:18,log,log,18,https://root.cern,https://github.com/root-project/root/pull/13515,1,['log'],['log']
Testability,"[ci] Move logging to global, pass docker info in: [skip-ci]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13488:10,log,logging,10,https://root.cern,https://github.com/root-project/root/pull/13488,1,['log'],['logging']
Testability,[ci] Remove Ubuntu 23.04 from testing platforms,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14878:30,test,testing,30,https://root.cern,https://github.com/root-project/root/pull/14878,1,['test'],['testing']
Testability,[ci] Remove macOS 12 from the tested platforms,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15127:30,test,tested,30,https://root.cern,https://github.com/root-project/root/pull/15127,1,['test'],['tested']
Testability,[ci] Report summary of failed tests. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13509:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/13509,1,['test'],['tests']
Testability,[ci] Report test failures also for failed tests: [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12823:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/12823,2,['test'],"['test', 'tests']"
Testability,[ci] Test EnricoMi/publish-unit-test-result-action/composite@branch-t…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12663:5,Test,Test,5,https://root.cern,https://github.com/root-project/root/pull/12663,2,"['Test', 'test']","['Test', 'test-result-action']"
Testability,[ci] Try reducing testing parallelism,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12850:18,test,testing,18,https://root.cern,https://github.com/root-project/root/pull/12850,1,['test'],['testing']
Testability,[ci] Upload Test Coverage to codecov [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13414:12,Test,Test,12,https://root.cern,https://github.com/root-project/root/pull/13414,1,['Test'],['Test']
Testability,[ci] Upload TestResults.xml also for Windows. [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12946:12,Test,TestResults,12,https://root.cern,https://github.com/root-project/root/pull/12946,1,['Test'],['TestResults']
Testability,[ci] Upload build artifacts before testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12830:35,test,testing,35,https://root.cern,https://github.com/root-project/root/pull/12830,1,['test'],['testing']
Testability,[ci] Upload test results unless cancelled,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12822:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/12822,1,['test'],['test']
Testability,[ci] Use unique name in publish test result to deconfuse GH Actions:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13151:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/13151,1,['test'],['test']
Testability,[ci]Add test coverage using codecov [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13394:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/13394,1,['test'],['test']
Testability,[ci][win] Testing GH issue #6441 - Do not merge!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15327:10,Test,Testing,10,https://root.cern,https://github.com/root-project/root/pull/15327,1,['Test'],['Testing']
Testability,[clad] Extend test coverage with bigaus function.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9018:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/9018,1,['test'],['test']
Testability,[cling] Assert if the cling::Value is set via the wrong interface,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12229:8,Assert,Assert,8,https://root.cern,https://github.com/root-project/root/pull/12229,1,['Assert'],['Assert']
Testability,[cling] Avoid assert firing on ODRHash collisions:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9248:14,assert,assert,14,https://root.cern,https://github.com/root-project/root/pull/9248,1,['assert'],['assert']
Testability,[cling] Fix `clingtest` build and disable or remove tests [v6.32],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16297:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/16297,1,['test'],['tests']
Testability,[cling] Fix a number of failures in cling tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12855:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/12855,1,['test'],['tests']
Testability,[cling] Fix build with assertions,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15431:23,assert,assertions,23,https://root.cern,https://github.com/root-project/root/pull/15431,1,['assert'],['assertions']
Testability,[cling] Fix clang::CodeGen EH assert on MacOS:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5534:30,assert,assert,30,https://root.cern,https://github.com/root-project/root/pull/5534,1,['assert'],['assert']
Testability,[cling] Fix failing python enum tests in cppyy,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16000:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/16000,1,['test'],['tests']
Testability,[cling] Fix next clang::CodeGen EH assert on MacOS:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6139:35,assert,assert,35,https://root.cern,https://github.com/root-project/root/pull/6139,1,['assert'],['assert']
Testability,[cling] Fix remaining test failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12900:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/12900,1,['test'],['test']
Testability,[cling] Fix test MultipleInterpreters.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13282:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/13282,1,['test'],['test']
Testability,[cling] Fix test/DynamicLibraryManager/callable_lib_L_AB_abs.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10542:12,test,test,12,https://root.cern,https://github.com/root-project/root/pull/10542,1,['test'],['test']
Testability,"[cling] Fix, disable, or remove tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16258:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/16258,1,['test'],['tests']
Testability,[cling] Problems with many DynamicLibraryManager tests on macOS,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16270:49,test,tests,49,https://root.cern,https://github.com/root-project/root/issues/16270,1,['test'],['tests']
Testability,[cling] Remove unneed `assert()` in DynamicLookup.cpp,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9245:23,assert,assert,23,https://root.cern,https://github.com/root-project/root/pull/9245,1,['assert'],['assert']
Testability,[cling] Resolve some of the test failures on osx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13296:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/13296,1,['test'],['test']
Testability,[cling] Test printValue on unutterable types.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2250:8,Test,Test,8,https://root.cern,https://github.com/root-project/root/pull/2250,1,['Test'],['Test']
Testability,[cling] Windows: Fix declaration for C99 and re-enable Gnu.C test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16694:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/16694,1,['test'],['test']
Testability,[cling] added missing include in cling/test/CodeUnloading/DeclShadowing.C,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6958:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/6958,1,['test'],['test']
Testability,[cling] test/Driver/CommandHistory.C: `env -u` also works on macOS.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14183:8,test,test,8,https://root.cern,https://github.com/root-project/root/pull/14183,1,['test'],['test']
Testability,[cling][v6-28] Fix a number of failures in cling tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12856:49,test,tests,49,https://root.cern,https://github.com/root-project/root/pull/12856,1,['test'],['tests']
Testability,[cling][v6-28] Fix remaining test failures,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12902:29,test,test,29,https://root.cern,https://github.com/root-project/root/pull/12902,1,['test'],['test']
Testability,"[cmake,test] Get rid of `lsb_release`:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11029:7,test,test,7,https://root.cern,https://github.com/root-project/root/pull/11029,1,['test'],['test']
Testability,[cmake] Disable llvm-assertions for ROOT=RelWithDebInfo:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11991:21,assert,assertions,21,https://root.cern,https://github.com/root-project/root/pull/11991,1,['assert'],['assertions']
Testability,[cmake] Disable test-stressgraphics-chrome,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16684:16,test,test-stressgraphics-chrome,16,https://root.cern,https://github.com/root-project/root/pull/16684,1,['test'],['test-stressgraphics-chrome']
Testability,"[cmake] If asserts are on, enable them also for llvm.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5572:11,assert,asserts,11,https://root.cern,https://github.com/root-project/root/pull/5572,1,['assert'],['asserts']
Testability,[cmake] Increase the internet connection test timeout.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9405:41,test,test,41,https://root.cern,https://github.com/root-project/root/pull/9405,1,['test'],['test']
Testability,[cmake] Introduce the needs_network flag for tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16328:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/16328,1,['test'],['tests']
Testability,[cmake] Make test building serial on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16273:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/16273,1,['test'],['test']
Testability,[cmake] Re-add python stl_set tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16763:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/16763,1,['test'],['tests']
Testability,[cmake] Test that NDEBUG is disabled if asserts are requested,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6596:8,Test,Test,8,https://root.cern,https://github.com/root-project/root/pull/6596,2,"['Test', 'assert']","['Test', 'asserts']"
Testability,[cmake] do not test chrome version on windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14826:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/14826,1,['test'],['test']
Testability,[cmake] do not test chrome version on windows [6.30],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14827:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/14827,1,['test'],['test']
Testability,[cmake] remove unnecessary include_directories in most ROOT tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5577:60,test,tests,60,https://root.cern,https://github.com/root-project/root/pull/5577,1,['test'],['tests']
Testability,[cmake][tests] Fix and re-enable tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15063:8,test,tests,8,https://root.cern,https://github.com/root-project/root/pull/15063,2,['test'],['tests']
Testability,[core/base/src/TStyle.cxx:1508]: (style) Array index 'i' is used before limits check; [geom/geom/src/TGeoNavigator.cxx:2219]: (style) Array index 'jst' is used before limits check. [geom/geocad/src/TGeoToOCC.cxx:527]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4; [geom/geocad/src/TGeoToOCC.cxx:528]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4; [geom/geocad/src/TGeoToOCC.cxx:529]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4; [geom/geocad/src/TGeoToOCC.cxx:530]: (warning) Logical disjunction always evaluates to true: EXPR > -1e-4 || EXPR < 1e-4; [graf2d/asimage/src/libAfterImage/char2uni.c:814]: (warning) Logical conjunction always evaluates to false: EXPR == 'S' && EXPR == 's'; [graf2d/asimage/src/libAfterImage/char2uni.c:815]: (warning) Logical conjunction always evaluates to false: EXPR == 'O' && EXPR == 'o'. [graf2d/asimage/src/libAfterImage/imencdec.c:376] -> [graf2d/asimage/src/libAfterImage/imencdec.c:376]: (style) Same expression on both sides of '&&'; [geom/geom/src/TGeoParaboloid.cxx:457] -> [geom/geom/src/TGeoParaboloid.cxx:457]: (style) Same expression on both sides of '||',MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1187:228,Log,Logical,228,https://root.cern,https://github.com/root-project/root/pull/1187,6,['Log'],['Logical']
Testability,"[core/winnt/src/TWinNTSystem.cxx:996]: (error) Invalid number of character '(' when these macros are defined: 'ROOTPREFIX'.; [html/src/TDocDirective.cxx:316]: (error) Invalid number of character '{' when these macros are defined: 'R__BEPAEPSTLICHERALSDERPAPST'.; [math/mathcore/src/Delaunay2D.cxx:30]: (error) Invalid number of character '{' when these macros are defined: 'HAS_CGAL'. [graf2d/qt/src/TGQt.cxx:2817]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds.; [graf2d/qt/src/TGQt.cxx:2818]: (error) Array 'shape[15]' accessed at index 16, which is out of bounds.; [graf2d/qt/src/TGQt.cxx:2841]: (error) Array 'shape[15]' accessed at index 15, which is out of bounds.; [net/http/civetweb/handle_form.inl:627]: (style) Array index 'd' is used before limits check. [roofit/roostats/src/MetropolisHastings.cxx:153]: (style) Condition 'i<1000' is always true. [graf2d/qt/src/TQtClientGuard.cxx:289]: (warning) Assert statement modifies 'thisPix'. [roofit/roofitcore/src/BidirMMapPipe.cxx:906]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception.; [roofit/roofitcore/src/BidirMMapPipe.cxx:972]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception.; [roofit/roofitcore/src/BidirMMapPipe.cxx:1394]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception.; [roofit/roofitcore/src/BidirMMapPipe.cxx:1429]: (style) Throwing a copy of the caught exception instead of rethrowing the original exception. [graf3d/eve/src/TEveElement.cxx:1745]: (style) Exception should be caught by reference.; [roofit/histfactory/src/hist2workspace.cxx:76]: (style) Exception should be caught by reference.; [roofit/histfactory/src/hist2workspace.cxx:97]: (style) Exception should be caught by reference.; [roofit/roofitcore/src/RooClassFactory.cxx:786]: (style) Exception should be caught by reference.; [roofit/roofitcore/src/RooFactoryWSTool.cxx:413]: (style) Exception should be",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1435:934,Assert,Assert,934,https://root.cern,https://github.com/root-project/root/pull/1435,1,['Assert'],['Assert']
Testability,[core] Add a stub for proper re-reading of rdicts if the library is reloaded.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5420:13,stub,stub,13,https://root.cern,https://github.com/root-project/root/pull/5420,1,['stub'],['stub']
Testability,[core] Add test for #12108,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16335:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/16335,1,['test'],['test']
Testability,[core] Improve Include PATH handling & add test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14753:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/14753,1,['test'],['test']
Testability,[core] Improve readbility of unit-test-support messages.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12469:34,test,test-support,34,https://root.cern,https://github.com/root-project/root/pull/12469,1,['test'],['test-support']
Testability,[core] Improve the complete memory termination logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4712:47,log,logic,47,https://root.cern,https://github.com/root-project/root/pull/4712,1,['log'],['logic']
Testability,"[core] Update ""logo"" to 2022 (NFC).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10129:15,log,logo,15,https://root.cern,https://github.com/root-project/root/pull/10129,1,['log'],['logo']
Testability,[cxxmodule] Fix df tests by declaring RuntimePrintValue at Interprete…,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2591:19,test,tests,19,https://root.cern,https://github.com/root-project/root/pull/2591,1,['test'],['tests']
Testability,[cxxmodules] Add missing module dependencies to test dictionaries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/914:48,test,test,48,https://root.cern,https://github.com/root-project/root/pull/914,1,['test'],['test']
Testability,[cxxmodules] After root-project/root@52d0d8b the test works.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4324:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/4324,1,['test'],['test']
Testability,[cxxmodules] Also include explicitly assert,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1387:37,assert,assert,37,https://root.cern,https://github.com/root-project/root/pull/1387,1,['assert'],['assert']
Testability,[cxxmodules] Also load TreePlayer to fix TDataFrame tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1328:52,test,tests,52,https://root.cern,https://github.com/root-project/root/pull/1328,1,['test'],['tests']
Testability,"[cxxmodules] Do not push a transaction per LoadModule. Prior to this patch, we push/pop transaction for each LoadModule call. This is reasonable if we assume modules are perfectly layered. That is, no eager module deserialization require definitions from another module. This is hard to achieve for dependent on ROOT codebases during their incremental migration process.; ; The current patch push/pops once per loading of all modules. This should perform slightly better and allow entangled modules to still load. This patch should address the CMSSW Modules IB:; Assertion `OldBuilder->DeferredDeclsToEmit.empty() && ""Should have emitted all decls deferred to emit.""' failed.; ```; 0 0x00007ffff6f113d7 in raise () from /lib64/libc.so.6; 1 0x00007ffff6f12ac8 in abort () from /lib64/libc.so.6; 2 0x00007ffff6f0a1a6 in __assert_fail_base () from /lib64/libc.so.6; 3 0x00007ffff6f0a252 in __assert_fail () from /lib64/libc.so.6; 4 0x00007fffed24ed82 in clang::CodeGeneratorImpl::StartModule; 5 0x00007fffed24d33e in clang::CodeGenerator::StartModule; 6 0x00007fffed0664f1 in cling::IncrementalParser::StartModule; 7 0x00007fffed066f84 in cling::IncrementalParser::codeGenTransaction; 8 0x00007fffed066aec in cling::IncrementalParser::commitTransaction; 9 0x00007fffecf1af2c in cling::Interpreter::PushTransactionRAII::pop; 10 0x00007fffecf1ae72 in cling::Interpreter::PushTransactionRAII::~PushTransactionRAII; 11 0x00007fffece78534 in ClingMemberIterInternal::DCIter::DCIter; 12 0x00007fffece7712c in TClingMemberIter::TClingMemberIter; 13 0x00007fffece7724c in TClingDataMemberIter::TClingDataMemberIter; 14 0x00007fffece750b6 in TClingDataMemberInfo::TClingDataMemberInfo; 15 0x00007fffecd25918 in TCling::DataMemberInfo_Factory; 16 0x00007ffff6b0e33e in TListOfDataMembers::Load; 17 0x00007ffff6ae539d in TClass::CreateListOfDataMembers; 18 0x00007ffff6ae54d4 in TClass::GetListOfDataMembers; 19 0x00007ffff6ae3dd1 in TClass::GetDataMember; 20 0x00007ffff6b259a0 in ROOT::Detail::TSchemaRuleSet::Add",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7398:563,Assert,Assertion,563,https://root.cern,https://github.com/root-project/root/pull/7398,1,['Assert'],['Assertion']
Testability,[cxxmodules] Enable 17 tests and exclude 2 tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2040:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/2040,2,['test'],['tests']
Testability,[cxxmodules] Exclude remaining tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2001:31,test,tests,31,https://root.cern,https://github.com/root-project/root/pull/2001,1,['test'],['tests']
Testability,[cxxmodules] Exclude tree-temperature test from runtime_cxxmodules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2022:38,test,test,38,https://root.cern,https://github.com/root-project/root/pull/2022,1,['test'],['test']
Testability,[cxxmodules] Fix assert failure when printing fwd delcs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1087:17,assert,assert,17,https://root.cern,https://github.com/root-project/root/pull/1087,1,['assert'],['assert']
Testability,[cxxmodules] Fix assert failure with duplicate decls.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1236:17,assert,assert,17,https://root.cern,https://github.com/root-project/root/pull/1236,1,['assert'],['assert']
Testability,[cxxmodules] Fix failing execNestedClasses test for modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2785:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/2785,1,['test'],['test']
Testability,[cxxmodules] Fix failing nightly test stl-stl,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4413:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/4413,1,['test'],['test']
Testability,[cxxmodules] Fix failing runtime_cxxmodules tests by preloading modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814:44,test,tests,44,https://root.cern,https://github.com/root-project/root/pull/1814,1,['test'],['tests']
Testability,[cxxmodules] Fix failing tests by preloading some modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2010:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/2010,1,['test'],['tests']
Testability,[cxxmodules] Fix the test-periodic-build if -Dcxxmodules=On.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2545:21,test,test-periodic-build,21,https://root.cern,https://github.com/root-project/root/pull/2545,1,['test'],['test-periodic-build']
Testability,[cxxmodules] Invert the assert condition.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4302:24,assert,assert,24,https://root.cern,https://github.com/root-project/root/pull/4302,1,['assert'],['assert']
Testability,[cxxmodules] Remove unnecessary assert,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1017:32,assert,assert,32,https://root.cern,https://github.com/root-project/root/pull/1017,1,['assert'],['assert']
Testability,[cxxmodules] Remove veto of tutorial numberCountingCombination test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2779:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/2779,1,['test'],['test']
Testability,[cxxmodules] Remove workarounds in test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2733:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/2733,1,['test'],['test']
Testability,[cxxmodules] Temporary excluding tests for cxxmodules build bot,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1992:33,test,tests,33,https://root.cern,https://github.com/root-project/root/pull/1992,1,['test'],['tests']
Testability,[cxxmodules] Test fedora build,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2707:13,Test,Test,13,https://root.cern,https://github.com/root-project/root/pull/2707,1,['Test'],['Test']
Testability,[cxxmodules] Testing! Do not iterate over subdirectories,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2213:13,Test,Testing,13,https://root.cern,https://github.com/root-project/root/pull/2213,1,['Test'],['Testing']
Testability,[cxxmodules] Testing! Kill preloading allmodules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2255:13,Test,Testing,13,https://root.cern,https://github.com/root-project/root/pull/2255,1,['Test'],['Testing']
Testability,[cxxmodules] Track progress in the failing tests for runtime_cxxmodules.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2717:43,test,tests,43,https://root.cern,https://github.com/root-project/root/pull/2717,1,['test'],['tests']
Testability,[dataframe] Silence RSqliteDS warning / var used only in assert.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9287:57,assert,assert,57,https://root.cern,https://github.com/root-project/root/pull/9287,1,['assert'],['assert']
Testability,[df] Shorten jitted expression in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15824:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/15824,1,['test'],['test']
Testability,[do not merge] testing build failures on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14796:15,test,testing,15,https://root.cern,https://github.com/root-project/root/pull/14796,1,['test'],['testing']
Testability,[eve7] repair logic of mouseup handler [skip-ci],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7330:14,log,logic,14,https://root.cern,https://github.com/root-project/root/pull/7330,1,['log'],['logic']
Testability,[geom] Added test for usage of units for materials (M. Frank).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11094:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/11094,1,['test'],['test']
Testability,[gradients] Re-enable test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6970:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/6970,1,['test'],['test']
Testability,[hadd] rewrite argument parsing logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16090:32,log,logic,32,https://root.cern,https://github.com/root-project/root/pull/16090,1,['log'],['logic']
Testability,[hist] Add test for TFormula autoloading (ROOT-9840).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3138:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/3138,1,['test'],['test']
Testability,"[hist] Prevent ""Replacing existing TH1"" in THn test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5664:47,test,test,47,https://root.cern,https://github.com/root-project/root/pull/5664,1,['test'],['test']
Testability,[hist] Reduce relative tolerance in an assert in test_tprofile2poly.cxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14107:39,assert,assert,39,https://root.cern,https://github.com/root-project/root/pull/14107,1,['assert'],['assert']
Testability,[hist_drawable] load ROOTHistDraw library in test macros ROOT-10336,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4517:45,test,test,45,https://root.cern,https://github.com/root-project/root/pull/4517,1,['test'],['test']
Testability,[histv7] add tests for RHist: ctor,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4941:13,test,tests,13,https://root.cern,https://github.com/root-project/root/pull/4941,1,['test'],['tests']
Testability,[histv7] add tests for RHist::Fill: 2D and 3D,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4950:13,test,tests,13,https://root.cern,https://github.com/root-project/root/pull/4950,1,['test'],['tests']
Testability,[histv7] add tests for RHistConcurrentFill,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4958:13,test,tests,13,https://root.cern,https://github.com/root-project/root/pull/4958,1,['test'],['tests']
Testability,[io] Add error message before assert (#8387).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8461:30,assert,assert,30,https://root.cern,https://github.com/root-project/root/pull/8461,2,['assert'],['assert']
Testability,[io] adjust RRawFile/XRootD unit test to new target,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14053:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/14053,1,['test'],['test']
Testability,[math] Always specify the parameter name used in the assert statement.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5336:53,assert,assert,53,https://root.cern,https://github.com/root-project/root/pull/5336,1,['assert'],['assert']
Testability,[math] Disable `QuarticPolynomial.FindRoots_4RealDegRootsR0` test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14290:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/14290,1,['test'],['test']
Testability,[math] Fix GCC 13 warning in `math/unuran/test/unuranDistr.cxx`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12763:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/12763,1,['test'],['test']
Testability,[math] Tests `roottest_root_math_smatrix_testKalman` and `testOperations` fail since 1st of December 2023 on `debian10-i386`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14306:7,Test,Tests,7,https://root.cern,https://github.com/root-project/root/issues/14306,2,"['Test', 'test']","['Tests', 'testOperations']"
Testability,[math][roofit] Include missing header in two tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16043:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/16043,1,['test'],['tests']
Testability,[mathcore] Disable multi-thread tests when running without imt,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9464:32,test,tests,32,https://root.cern,https://github.com/root-project/root/pull/9464,1,['test'],['tests']
Testability,[meta] Thoroughly test TClingInfo property,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16240:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/16240,1,['test'],['test']
Testability,"[metacling] in TClingLoadUnloadFileTests, assert unloading worked.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13467:42,assert,assert,42,https://root.cern,https://github.com/root-project/root/pull/13467,1,['assert'],['assert']
Testability,"[ntuple, daos] Enable RNTuple DAOS unit tests if `-Dtesting=ON`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8094:40,test,tests,40,https://root.cern,https://github.com/root-project/root/pull/8094,1,['test'],['tests']
Testability,"[ntuple, tutorial] fix bad assert expression",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5152:27,assert,assert,27,https://root.cern,https://github.com/root-project/root/pull/5152,3,['assert'],['assert']
Testability,"[ntuple,daos] Add missing attribute to IOD structure mock definition",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11683:53,mock,mock,53,https://root.cern,https://github.com/root-project/root/pull/11683,1,['mock'],['mock']
Testability,"[ntuple,daos] Improve test suite with fixture class and teardown functionality",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12106:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/12106,1,['test'],['test']
Testability,"[ntuple] API improvements, skimming tutorial stub",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13604:45,stub,stub,45,https://root.cern,https://github.com/root-project/root/pull/13604,1,['stub'],['stub']
Testability,[ntuple] Add RNTupleModel::GetField + test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8696:38,test,test,38,https://root.cern,https://github.com/root-project/root/pull/8696,1,['test'],['test']
Testability,[ntuple] Add first evolution tests for transparently supported cases,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16172:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/16172,1,['test'],['tests']
Testability,[ntuple] Add initial limit testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14365:27,test,testing,27,https://root.cern,https://github.com/root-project/root/pull/14365,1,['test'],['testing']
Testability,[ntuple] Add more test coverage for RNTuple+RVec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10665:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/10665,2,['test'],['test']
Testability,[ntuple] Add test for classes using empty base optimization,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10481:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/10481,1,['test'],['test']
Testability,[ntuple] Add test for reading an unknown column type,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16516:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/16516,1,['test'],['test']
Testability,[ntuple] Add tests for forward compatibility,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15618:13,test,tests,13,https://root.cern,https://github.com/root-project/root/pull/15618,1,['test'],['tests']
Testability,[ntuple] Add unit test for templated user classes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12550:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/12550,1,['test'],['test']
Testability,[ntuple] Assertion `fWritePage[fWritePageIdx].IsEmpty()` violated at line 87 of RColumn.hxx,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12742:9,Assert,Assertion,9,https://root.cern,https://github.com/root-project/root/issues/12742,1,['Assert'],['Assertion']
Testability,[ntuple] Fix DAOS test compilation for old CMake,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8172:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/8172,1,['test'],['test']
Testability,[ntuple] Fix a logic flaw in `RColumn::AppendV()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12743:15,log,logic,15,https://root.cern,https://github.com/root-project/root/pull/12743,1,['log'],['logic']
Testability,[ntuple] Fix compiler warning in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16564:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/16564,1,['test'],['test']
Testability,[ntuple] Fix failing tests for `-Dimt=OFF` builds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12637:21,test,tests,21,https://root.cern,https://github.com/root-project/root/pull/12637,1,['test'],['tests']
Testability,[ntuple] Fix flakey unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4208:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/4208,1,['test'],['tests']
Testability,[ntuple] Fix flaky unit test for RClusterPool,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9135:24,test,test,24,https://root.cern,https://github.com/root-project/root/pull/9135,1,['test'],['test']
Testability,[ntuple] Fix limit testing calls,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14480:19,test,testing,19,https://root.cern,https://github.com/root-project/root/pull/14480,1,['test'],['testing']
Testability,[ntuple] Fix linker error in unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4291:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/4291,1,['test'],['test']
Testability,[ntuple] Fix mismatch class vs struct for test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11877:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/11877,1,['test'],['test']
Testability,[ntuple] Fix vector field unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10595:31,test,test,31,https://root.cern,https://github.com/root-project/root/pull/10595,1,['test'],['test']
Testability,[ntuple] Isolate failing Windows CI TFile test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7879:42,test,test,42,https://root.cern,https://github.com/root-project/root/pull/7879,1,['test'],['test']
Testability,[ntuple] Limit test many small and large pages,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14390:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/14390,1,['test'],['test']
Testability,[ntuple] Move includes in test helpers to correct header file,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14083:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/14083,1,['test'],['test']
Testability,[ntuple] Remove outdated test dependency on RDF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16292:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/16292,1,['test'],['test']
Testability,[ntuple] Remove stub serialization of meta-data envelope,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16345:16,stub,stub,16,https://root.cern,https://github.com/root-project/root/pull/16345,1,['stub'],['stub']
Testability,[ntuple] Run DAOS unit tests if `-Dtesting=ON` was specified,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8074:23,test,tests,23,https://root.cern,https://github.com/root-project/root/issues/8074,1,['test'],['tests']
Testability,[ntuple] Split up ntuple test files (ROOT-10773),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5619:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/5619,1,['test'],['test']
Testability,[ntuple] Temporarily disable the `RNTuple.SmallClusters` test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13023:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/13023,1,['test'],['test']
Testability,[ntuple] Test imposing vector<pair> onto map,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16566:9,Test,Test,9,https://root.cern,https://github.com/root-project/root/pull/16566,1,['Test'],['Test']
Testability,[ntuple] Two test fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12821:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/12821,1,['test'],['test']
Testability,[ntuple] Use `assert` instead of `R__ASSERT` where appropriate,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10618:14,assert,assert,14,https://root.cern,https://github.com/root-project/root/issues/10618,1,['assert'],['assert']
Testability,[ntuple] Use deterministic file names in unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4217:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/4217,1,['test'],['tests']
Testability,[ntuple] Use different filenames in different tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9192:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/9192,1,['test'],['tests']
Testability,[ntuple] add a test for accessing a RNTupleView out of bounds,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16789:15,test,test,15,https://root.cern,https://github.com/root-project/root/pull/16789,1,['test'],['test']
Testability,[ntuple] add test for std::set<std::array<...>>,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15722:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/15722,1,['test'],['test']
Testability,[ntuple] add test for vector of strings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15865:13,test,test,13,https://root.cern,https://github.com/root-project/root/pull/15865,1,['test'],['test']
Testability,[ntuple] add unit test for projection of inner collection,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6549:18,test,test,18,https://root.cern,https://github.com/root-project/root/pull/6549,1,['test'],['test']
Testability,[ntuple] additional testing for std::optional,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15715:20,test,testing,20,https://root.cern,https://github.com/root-project/root/pull/15715,1,['test'],['testing']
Testability,[ntuple] clean-up dependencies of unit tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13351:39,test,tests,39,https://root.cern,https://github.com/root-project/root/pull/13351,1,['test'],['tests']
Testability,"[ntuple] fix change compression in RNTupleMerger, add tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16013:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/16013,1,['test'],['tests']
Testability,[ntuple] fixes and more testing for std::variant,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15582:24,test,testing,24,https://root.cern,https://github.com/root-project/root/pull/15582,1,['test'],['testing']
Testability,[ntuple] improve unit testing of split encodings,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12393:22,test,testing,22,https://root.cern,https://github.com/root-project/root/pull/12393,1,['test'],['testing']
Testability,[ntuple] move all relatively long-running tests (>5s) to the end,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5807:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/5807,1,['test'],['tests']
Testability,[ntuple] remove unnecessary RDF unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13355:37,test,test,37,https://root.cern,https://github.com/root-project/root/pull/13355,1,['test'],['test']
Testability,[ntuple] speed up HTTP test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16307:23,test,test,23,https://root.cern,https://github.com/root-project/root/pull/16307,1,['test'],['test']
Testability,"[pr.log](https://github.com/root-project/root/files/14873477/pr.log); This pull request changes the behavior of the create and recreate functions of the `TFile` class. When a new ROOT file is created, the underlying path may not exist. This commit modifies the logic of `TFile.cxx` such that the underlying path is explicitly created. It works only if `TFile.cxx` is compiled with the C++17 standard, otherwise the relevant code is excluded by the means of the preprocessor. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). ## Quick test; I prepared a small program in C++ (requires C++17) to quickly test the pull request (see at the bottom of the message). In log, with the patched ROOT version the output looks like thit:; ```; Attempt to (re)createa/b/c/test.root; Ok.; ```; while with the ROOT version 6.28 the output looks like this:; ```; Attempt to (re)createa/b/c/test.root; SysError in <TFile::TFile>: file XXXXXX/ftest/XXYqNIoC/a/b/c/test.root can not be opened No such file or directory; Fail.; ```. The program:; ```c++; #include ""TFile.h""; #include <filesystem>; #include <cstdlib>; #include <iostream>; namespace fs = std::filesystem;. char tmpname[] = ""XXXXXXXX"";. char E[] = ""test.root"";; char F[] = ""a/b/c/test.root"";; char H[] = ""a/b/d/atest.root"";. void ok(char *fname); {; if (fs::exists(fs::path(fname))); std::cout << ""Ok."" << std::endl;; else; std::cout << ""Fail."" << std::endl;; }. int main(); {; char *tmpnm = mkdtemp(tmpname);; if (tmpnm == NULL) {; std::cout << ""Error while creating tmp dir"" << std::endl;; return -1;; }; const auto tmp = fs::path(tmpnm);; const auto prev = fs::current_path();. fs::current_path(tmp);; std::cout << ""Attempt to (re)create"" << E << std::endl;; TFile e(E, ""recreate""); e.Close(); ok(E);; std::cout << ""Attempt to (re)create"" << F << std::endl;; TFile f(F, ""recreate""); f.Close(); ok(F);; std::cout << ""Attempt to open"" << F << std::endl;; TFile g(F); g.Close(); ok(F);; std::cout << ""Attempt to open"" << H",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15141:4,log,log,4,https://root.cern,https://github.com/root-project/root/pull/15141,10,"['log', 'test']","['log', 'logic', 'test', 'tested']"
Testability,[pymva] Refactor TestRModelParserPyTorch to use RSofieReader,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13533:17,Test,TestRModelParserPyTorch,17,https://root.cern,https://github.com/root-project/root/pull/13533,1,['Test'],['TestRModelParserPyTorch']
Testability,[pyroot] Fix dependency for pyroot rtensor test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13660:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/13660,1,['test'],['test']
Testability,[pyroot] Isolate potentially leaking function in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16030:49,test,test,49,https://root.cern,https://github.com/root-project/root/pull/16030,1,['test'],['test']
Testability,[pyroot] Whitelist libtbbmalloc in library import test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16016:50,test,test,50,https://root.cern,https://github.com/root-project/root/pull/16016,1,['test'],['test']
Testability,"[rdf,test] Suppress Apple M1 failures due to lack of JIT exceptions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8147:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/8147,1,['test'],['test']
Testability,"[rdf,test] Suppress Apple M1 failures due to lack of JIT exceptions. [6.24]",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8139:5,test,test,5,https://root.cern,https://github.com/root-project/root/pull/8139,1,['test'],['test']
Testability,[rdf] Test updating column register data instead of copying,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14490:6,Test,Test,6,https://root.cern,https://github.com/root-project/root/pull/14490,1,['Test'],['Test']
Testability,[relnotes] Add RooFit::MultiProcess and TestStatistics,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9375:40,Test,TestStatistics,40,https://root.cern,https://github.com/root-project/root/pull/9375,1,['Test'],['TestStatistics']
Testability,[roofit] Disable failing tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14937:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/14937,1,['test'],['tests']
Testability,[roofit][skip-ci] Disable failing tests on Windows (x86),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14629:34,test,tests,34,https://root.cern,https://github.com/root-project/root/pull/14629,1,['test'],['tests']
Testability,[rootcling]Simplify dictionary stream splitting logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5345:48,log,logic,48,https://root.cern,https://github.com/root-project/root/pull/5345,1,['log'],['logic']
Testability,[roottest] Ideas for new tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14319:25,test,tests,25,https://root.cern,https://github.com/root-project/root/issues/14319,1,['test'],['tests']
Testability,[roottest] openSUSE Tumbleweed single test failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8187:38,test,test,38,https://root.cern,https://github.com/root-project/root/issues/8187,1,['test'],['test']
Testability,[skip ci] Test the skipping of the CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14612:10,Test,Test,10,https://root.cern,https://github.com/root-project/root/pull/14612,1,['Test'],['Test']
Testability,[skip-CI][CI] Increase the test retries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14879:27,test,test,27,https://root.cern,https://github.com/root-project/root/pull/14879,1,['test'],['test']
Testability,[skip-CI][CI][v6-30] Increase the test retries,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14880:34,test,test,34,https://root.cern,https://github.com/root-project/root/pull/14880,1,['test'],['test']
Testability,[skip-ci] Add CMakeLists.txt in test/RootShower,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13413:32,test,test,32,https://root.cern,https://github.com/root-project/root/pull/13413,1,['test'],['test']
Testability,[skip-ci] Add test to PR #15078,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15124:14,test,test,14,https://root.cern,https://github.com/root-project/root/pull/15124,1,['test'],['test']
Testability,[skip-ci] Correct assert condition (missing negation).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6402:18,assert,assert,18,https://root.cern,https://github.com/root-project/root/pull/6402,1,['assert'],['assert']
Testability,[skip-ci] Disable a couple of failing roofit tests on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8812:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/8812,1,['test'],['tests']
Testability,[skip-ci] Test GH Actions PLEASE DO NOT MERGE,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14848:10,Test,Test,10,https://root.cern,https://github.com/root-project/root/pull/14848,1,['Test'],['Test']
Testability,[skip-ci] Test github action,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14609:10,Test,Test,10,https://root.cern,https://github.com/root-project/root/pull/14609,1,['Test'],['Test']
Testability,[skip-ci] group log output in CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12188:16,log,log,16,https://root.cern,https://github.com/root-project/root/pull/12188,1,['log'],['log']
Testability,[skip-ci] wrong variable was tested in Makefile,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11670:29,test,tested,29,https://root.cern,https://github.com/root-project/root/pull/11670,1,['test'],['tested']
Testability,"[skip-ci]. # This Pull request:. Makes the CI load OpenStack object-store credentials from files on runners instead of using GitHub secrets. When `pull_request` is a workflow trigger, the job can't access secrets, which means that the S3 secret token is unavailable. Adding S3 credentials to the runners themselves solves this issue. The OpenStack credentials are defined [here](https://gitlab.cern.ch/ai/it-puppet-hostgroup-lcgapp/-/blob/rootci_test/code/manifests/build/root.pp#L43) (using [teigi](https://configdocs.web.cern.ch/secrets/adding.html)). If a malicious actor makes a PR with a job to print the credentials, or to upload a malicious artifact, it would still have to be approved by a maintainer. A safer alternative is not allowing pull request jobs to upload artifacts at all but then we can't run tests in a separate job. It would also cause builds to take more time on average because the object storage will be less populated. ## Checklist:. - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12201:813,test,tests,813,https://root.cern,https://github.com/root-project/root/pull/12201,2,['test'],"['tested', 'tests']"
Testability,[skip-ci]. Pretty much all things worth mentioning that came out of; `git log $(git merge-base master v6-22-00)..$(git merge-base master v6-24-00-rc1) roofit/`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7452:74,log,log,74,https://root.cern,https://github.com/root-project/root/pull/7452,1,['log'],['log']
Testability,"[skip-ci]; # This Pull request:. Adds a lot of changes to address; https://github.com/root-project/root/issues/12270; https://github.com/root-project/root/pull/12201#issuecomment-1417627970. ## Changes or fixes:. - Runs tests on CI (has to be done in the same job for now, at least on PR builds); - Disables use of OpenStack credentials in PR builds; - Loads OpenStack credentials from GitHub secrets on non-PR builds (i.e. valid secrets are no longer stored on runners); - Reduces verbosity in the config files; - Reduces permissions of the build workflow. It can now only read repository (when PR commenting is getting implemented it has to run in a separate workflow anyways); - Re-enables output buffering to improve performance, at the cost of stderr being redirected to stdout. Currently runs tests on **every** type of job, could look into ways to skip it under certain conditions. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12275:220,test,tests,220,https://root.cern,https://github.com/root-project/root/pull/12275,3,['test'],"['tested', 'tests']"
Testability,[skip-ci][Core] Change logo date from 2023 to 2024,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14447:23,log,logo,23,https://root.cern,https://github.com/root-project/root/pull/14447,1,['log'],['logo']
Testability,[skip-ci][RDF] clang-format some RDF tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15794:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/15794,1,['test'],['tests']
Testability,[skip-ci][RNTupleDS] Test reading of RVecs,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6361:21,Test,Test,21,https://root.cern,https://github.com/root-project/root/pull/6361,1,['Test'],['Test']
Testability,[skip-ci][cling-cpt]Fix tar_required logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5606:37,log,logic,37,https://root.cern,https://github.com/root-project/root/pull/5606,1,['log'],['logic']
Testability,[skip-ci][cling][cpt]Move declarations up to fix faulty logic,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5834:56,log,logic,56,https://root.cern,https://github.com/root-project/root/pull/5834,1,['log'],['logic']
Testability,[skip-ci][tree] Add unit test for issue #10556,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14678:25,test,test,25,https://root.cern,https://github.com/root-project/root/pull/14678,1,['test'],['test']
Testability,[skip-ci][v6-28][windows] Fix the webgui ping test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12807:46,test,test,46,https://root.cern,https://github.com/root-project/root/pull/12807,1,['test'],['test']
Testability,[skip-ci][win64] Disable failing test on Windows 64,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10081:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/10081,1,['test'],['test']
Testability,[skip-ci][windows] Fix the webgui ping test on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12806:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/12806,1,['test'],['test']
Testability,"[static-lib-pcm-not-found.tar.gz](https://github.com/root-project/root/files/10179206/static-lib-pcm-not-found.tar.gz). With the attached file:; ```; mkdir static-pcm; cd static-pcm; tar xfz ../static-lib-pcm-not-found.tar.gz; ./build.sh; ```; we get:; ```; Error in <TCling::LoadPCM>: ROOT PCM /home/pcanal/root_working/test/2022-dict/bin/dict_rdict.pcm file does not exist; ```. This is because `TCling::Register` looks for the pcm in the directory in which the .o files was found at run-time. Usually it is found in a shared library. In this case we use a static library (and use the `TriggerDictionaryInitialization_modulename` function to load the dictionary) but, of course, the `pcm` file is in the `lib` directory and not along side the executable (i.e. the `bin` directory). We might want to add a fallback to look a bit further for the pcm files.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11852:321,test,test,321,https://root.cern,https://github.com/root-project/root/issues/11852,1,['test'],['test']
Testability,[tcling][cling] Improve shutdown logic.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4675:33,log,logic,33,https://root.cern,https://github.com/root-project/root/pull/4675,1,['log'],['logic']
Testability,"[test,cxxmodules] stressMathMore depends on Smatrix.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2358:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/2358,1,['test'],['test']
Testability,[test-ci] Dummy changes to test CI,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4843:1,test,test-ci,1,https://root.cern,https://github.com/root-project/root/pull/4843,2,['test'],"['test', 'test-ci']"
Testability,"[test/tutorials/roofit] do not use whole std namespace, only what's needed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14986:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/14986,1,['test'],['test']
Testability,[test] Fix number of iterations in `InterpreterStress::stressSTLDict()`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13567:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/13567,1,['test'],['test']
Testability,[test] Fix several tests on Win64,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9264:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/9264,2,['test'],"['test', 'tests']"
Testability,[test] HistoFit: remove color output:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12908:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/12908,1,['test'],['test']
Testability,[test] Multiplex ast source,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1255:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/1255,1,['test'],['test']
Testability,[test] Remove testTBB:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7855:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/7855,2,['test'],"['test', 'testTBB']"
Testability,[test] Remove testTBB: (v624),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7852:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/7852,2,['test'],"['test', 'testTBB']"
Testability,[test] Test building modules PR,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1272:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/1272,2,"['Test', 'test']","['Test', 'test']"
Testability,[test] Update location of xrootd test files,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7870:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/7870,2,['test'],['test']
Testability,[test] Update location of xrootd test files (6.20),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7868:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/7868,2,['test'],['test']
Testability,[test] Update location of xrootd test files (6.22),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7869:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/7869,2,['test'],['test']
Testability,[test] Update location of xrootd test files:,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7840:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/7840,2,['test'],['test']
Testability,[test] Update location of xrootd test files: (6.16),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7947:1,test,test,1,https://root.cern,https://github.com/root-project/root/pull/7947,2,['test'],['test']
Testability,[testing] assert on fwd delcs with modules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1349:1,test,testing,1,https://root.cern,https://github.com/root-project/root/pull/1349,2,"['assert', 'test']","['assert', 'testing']"
Testability,[testing][cxxmodules] Load module in payload instead,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1370:1,test,testing,1,https://root.cern,https://github.com/root-project/root/pull/1370,1,['test'],['testing']
Testability,[testing][cxxmodules]Reuse def loc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1378:1,test,testing,1,https://root.cern,https://github.com/root-project/root/pull/1378,1,['test'],['testing']
Testability,[tmva] Completely relax float comparison in TestSofieModels,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14738:44,Test,TestSofieModels,44,https://root.cern,https://github.com/root-project/root/pull/14738,1,['Test'],['TestSofieModels']
Testability,[tmva] Fix the dependency of TMVA tutorials and PyMVA tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12211:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/12211,1,['test'],['tests']
Testability,[tmva] Import torch before loading libTMVA in TMVA PyTorch tutorials tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13674:69,test,tests,69,https://root.cern,https://github.com/root-project/root/pull/13674,1,['test'],['tests']
Testability,"[tmva] Impose correct test dependencies, avoid multiple invocations of Declare, avoid races when writing model files",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16711:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/16711,1,['test'],['test']
Testability,"[tmva] RBatchGenerator: fix chunking, add tests, add drop_remainder parameter",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15057:42,test,tests,42,https://root.cern,https://github.com/root-project/root/pull/15057,1,['test'],['tests']
Testability,[tmva] Relax float comparison in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14535:33,test,test,33,https://root.cern,https://github.com/root-project/root/pull/14535,1,['test'],['test']
Testability,"[tmva] Update RBatchGenerator, add tests",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15510:35,test,tests,35,https://root.cern,https://github.com/root-project/root/pull/15510,1,['test'],['tests']
Testability,"[tmva] assert is ignored in Release mode, so return null",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15369:7,assert,assert,7,https://root.cern,https://github.com/root-project/root/pull/15369,1,['assert'],['assert']
Testability,[tmva][pymva] Fix Pymva tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13625:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/13625,1,['test'],['tests']
Testability,[tmva][pymva] Fix finally the PyMVA tests dependency,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12222:36,test,tests,36,https://root.cern,https://github.com/root-project/root/pull/12222,1,['test'],['tests']
Testability,[tmva][pymva] Fix warning when compiling the tests due to numpy headers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11469:45,test,tests,45,https://root.cern,https://github.com/root-project/root/pull/11469,1,['test'],['tests']
Testability,[tmva][pymva] Use correct python executable for the Keras and PyTorch tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12168:70,test,tests,70,https://root.cern,https://github.com/root-project/root/pull/12168,1,['test'],['tests']
Testability,[tmva][sofie-gnn] Increase tolerance for sofie-gnn tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13608:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/13608,1,['test'],['tests']
Testability,[tmva][sofie] Clip Operator implemented along with tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16726:51,test,tests,51,https://root.cern,https://github.com/root-project/root/pull/16726,1,['test'],['tests']
Testability,[tmva][sofie] Exclude SOFIE test when blas is not found,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11721:28,test,test,28,https://root.cern,https://github.com/root-project/root/pull/11721,1,['test'],['test']
Testability,[tmva][sofie] Fix SOFIE tests for nortcxxmodules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11545:24,test,tests,24,https://root.cern,https://github.com/root-project/root/pull/11545,1,['test'],['tests']
Testability,[tmva][sofie] Some improvements in TMVA SOFIE tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11529:46,test,tests,46,https://root.cern,https://github.com/root-project/root/pull/11529,1,['test'],['tests']
Testability,[tmva][sofie] Speed up SOFIE tests configuration,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12070:29,test,tests,29,https://root.cern,https://github.com/root-project/root/pull/12070,1,['test'],['tests']
Testability,[tmva][tutorial] Fix a potential issue when creating the image test dataset,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14367:63,test,test,63,https://root.cern,https://github.com/root-project/root/pull/14367,1,['test'],['test']
Testability,[tmva][tutorial] Fix a potential issue when creating the test data sets for TMVA CNN and RNN tutorials,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14368:57,test,test,57,https://root.cern,https://github.com/root-project/root/pull/14368,1,['test'],['test']
Testability,[tree] Add regression test for `GetEntry` after `Refresh`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14693:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/14693,1,['test'],['test']
Testability,[treeplayer] Fix memory management of C-style array branches in test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16501:64,test,test,64,https://root.cern,https://github.com/root-project/root/pull/16501,1,['test'],['test']
Testability,[v6-26][skip-ci][windows] Disable a couple of failing tests on Windows when tmva-cpu and tmva-gpu are OFF,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11633:54,test,tests,54,https://root.cern,https://github.com/root-project/root/pull/11633,1,['test'],['tests']
Testability,[v6-30][roofit][skip-ci] Disable failing tests on Windows (x86),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14639:41,test,tests,41,https://root.cern,https://github.com/root-project/root/pull/14639,1,['test'],['tests']
Testability,[v6.24] Fix a crash of test-stressmathmore-interpreted with VS 2022,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9822:23,test,test-stressmathmore-interpreted,23,https://root.cern,https://github.com/root-project/root/pull/9822,1,['test'],['test-stressmathmore-interpreted']
Testability,[v6.24][backport] Fix datasource_arrow.cxx test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11649:43,test,test,43,https://root.cern,https://github.com/root-project/root/pull/11649,1,['test'],['test']
Testability,[v6.26] Disable the tests failing on Windows x64,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10048:20,test,tests,20,https://root.cern,https://github.com/root-project/root/pull/10048,1,['test'],['tests']
Testability,[v6.26] Fix TMVA PyTorch tests on Windows. Resolves #9487,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9555:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/9555,1,['test'],['tests']
Testability,[v6.26][win] Fix a couple of failing tests on Windows with VS 2022,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9820:37,test,tests,37,https://root.cern,https://github.com/root-project/root/pull/9820,1,['test'],['tests']
Testability,[v620] Spurious change to enable testing jenkins,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5647:33,test,testing,33,https://root.cern,https://github.com/root-project/root/pull/5647,1,['test'],['testing']
Testability,[v620] Spurious commit to test current CI state.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7906:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/7906,1,['test'],['test']
Testability,[v624] Spurious change to enable CI testing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10189:36,test,testing,36,https://root.cern,https://github.com/root-project/root/pull/10189,1,['test'],['testing']
Testability,[v626] Spurious change to enable CI testing.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10188:36,test,testing,36,https://root.cern,https://github.com/root-project/root/pull/10188,1,['test'],['testing']
Testability,[v626][RF] Enable again the RooJSONFactoryWSTool Python tests on Mac,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9823:56,test,tests,56,https://root.cern,https://github.com/root-project/root/pull/9823,1,['test'],['tests']
Testability,[v626][TMVA] Disable `rbdt_xgboost` test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15187:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/15187,1,['test'],['test']
Testability,[v628][PyROOT] Prevent functions from crashing due to Python 3.12 assert,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13955:66,assert,assert,66,https://root.cern,https://github.com/root-project/root/pull/13955,1,['assert'],['assert']
Testability,[v628][TMVA] Disable `rbdt_xgboost` test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15188:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/15188,1,['test'],['test']
Testability,[v628][pymva] Refactor TestRModelParserPyTorch to use RSofieReader,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13778:23,Test,TestRModelParserPyTorch,23,https://root.cern,https://github.com/root-project/root/pull/13778,1,['Test'],['TestRModelParserPyTorch']
Testability,[v630] Remove concurrent usage of TClass::TestBit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15360:42,Test,TestBit,42,https://root.cern,https://github.com/root-project/root/pull/15360,1,['Test'],['TestBit']
Testability,[v630][TMVA] Disable `rbdt_xgboost` test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15189:36,test,test,36,https://root.cern,https://github.com/root-project/root/pull/15189,1,['test'],['test']
Testability,[v632] Remove concurrent usage of TClass::TestBit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15359:42,Test,TestBit,42,https://root.cern,https://github.com/root-project/root/pull/15359,1,['Test'],['TestBit']
Testability,[v632][CMake] Fix ROOT_ADD_GTEST in builds with `testing=OFF`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16279:49,test,testing,49,https://root.cern,https://github.com/root-project/root/pull/16279,1,['test'],['testing']
Testability,[web] Disable test-webgui-ping on macOS < 13,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15128:14,test,test-webgui-ping,14,https://root.cern,https://github.com/root-project/root/pull/15128,1,['test'],['test-webgui-ping']
Testability,[webgui] add ping.cxx to tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7901:25,test,tests,25,https://root.cern,https://github.com/root-project/root/pull/7901,1,['test'],['tests']
Testability,[webgui] do not use `--no-sandbox` in interactive session,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16699:26,sandbox,sandbox,26,https://root.cern,https://github.com/root-project/root/pull/16699,1,['sandbox'],['sandbox']
Testability,[webgui] exclude new tutorials from testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4038:36,test,testing,36,https://root.cern,https://github.com/root-project/root/pull/4038,1,['test'],['testing']
Testability,[webgui] extend tests for firefox/chrome for Gentoo distribution,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13454:16,test,tests,16,https://root.cern,https://github.com/root-project/root/pull/13454,1,['test'],['tests']
Testability,"[webgui] fix canvas resize logic, adopt `qtweb` tutorial to Qt6",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12931:27,log,logic,27,https://root.cern,https://github.com/root-project/root/pull/12931,1,['log'],['logic']
Testability,[webgui] increase startup time of ping test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10800:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/10800,1,['test'],['test']
Testability,[webgui] increase startup time of ping test [6.26],MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10801:39,test,test,39,https://root.cern,https://github.com/root-project/root/pull/10801,1,['test'],['test']
Testability,[webgui] suppress browsers log output in batch headless mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16395:27,log,log,27,https://root.cern,https://github.com/root-project/root/pull/16395,1,['log'],['log']
Testability,[webgui] suppress log messages from chrome/firefox browsers,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15357:18,log,log,18,https://root.cern,https://github.com/root-project/root/pull/15357,1,['log'],['log']
Testability,"[webgui] test with `tutorials/graphics`, several minor fixes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11737:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/11737,1,['test'],['test']
Testability,"[webgui] use `--single-process` for chrome, improve ping.cxx test",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8574:61,test,test,61,https://root.cern,https://github.com/root-project/root/pull/8574,1,['test'],['test']
Testability,[win64] Fix pointer formatting and test failure,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9964:35,test,test,35,https://root.cern,https://github.com/root-project/root/pull/9964,1,['test'],['test']
Testability,[win] Fix a couple of failing tests on Windows with VS 2022,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9813:30,test,tests,30,https://root.cern,https://github.com/root-project/root/pull/9813,1,['test'],['tests']
Testability,[wincxxmodules] Backport D51910 and add stub windows modulemaps,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5294:40,stub,stub,40,https://root.cern,https://github.com/root-project/root/pull/5294,1,['stub'],['stub']
Testability,[wincxxmodules] Configure tests for modules on Windows,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6179:26,test,tests,26,https://root.cern,https://github.com/root-project/root/pull/6179,1,['test'],['tests']
Testability,[windows] Fix failing test when built in RelWithDebInfo mode,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10118:22,test,test,22,https://root.cern,https://github.com/root-project/root/pull/10118,1,['test'],['test']
Testability,[windows][cmake] Replace all CMAKE_GENERATOR_PLATFORM by CMAKE_SIZEOF_VOID_P to test x86/x64,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11640:80,test,test,80,https://root.cern,https://github.com/root-project/root/pull/11640,1,['test'],['test']
Testability,[wip] Test if build works with ClangModules,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1146:6,Test,Test,6,https://root.cern,https://github.com/root-project/root/pull/1146,1,['Test'],['Test']
Testability,"[workspace.root.zip](https://github.com/root-project/root/files/6196054/workspace.root.zip). ### Describe the bug. RooMinimizer::hesse() fails to find the correct hesse matrix if getVal has been used on the nll after minimize(). ### Expected behavior. The hesse matrix should be independent of the number of calls to getVal(). ### To Reproduce. Run this script on the attached workspace. ```; void test(){; using namespace RooFit;; ; TFile* infile = TFile::Open(""workspace.root"",""READ"");; ; RooWorkspace * ws = (RooWorkspace*)(infile->Get(""Test""));. RooAbsData* data = ws->data(""asimovData"");; RooAbsPdf* pdf = ws->pdf(""simPdf"");. RooAbsReal* nll = pdf->createNLL(*data,NumCPU(1,3),Constrain(ws->argSet(""norm_bkg,gamma_stat_CR_bin_0,gamma_stat_SR_bin_0,gamma_stat_SR_bin_1,gamma_stat_SR_bin_2,gamma_stat_SR_bin_3,gamma_stat_SR_bin_4,gamma_stat_SR_bin_5,gamma_stat_SR_bin_6,gamma_stat_SR_bin_7,gamma_stat_SR_bin_8,gamma_stat_SR_bin_9,gamma_stat_SR_bin_10,norm_bkg,gamma_stat_CR_bin_0,gamma_stat_SR_bin_0,gamma_stat_SR_bin_1,gamma_stat_SR_bin_2,gamma_stat_SR_bin_3,gamma_stat_SR_bin_4,gamma_stat_SR_bin_5,gamma_stat_SR_bin_6,gamma_stat_SR_bin_7,gamma_stat_SR_bin_8,gamma_stat_SR_bin_9,gamma_stat_SR_bin_10"")),GlobalObservables(ws->argSet(""nominalLumi,nom_gamma_stat_CR_bin_0,nom_gamma_stat_SR_bin_0,nom_gamma_stat_SR_bin_1,nom_gamma_stat_SR_bin_2,nom_gamma_stat_SR_bin_3,nom_gamma_stat_SR_bin_4,nom_gamma_stat_SR_bin_5,nom_gamma_stat_SR_bin_6,nom_gamma_stat_SR_bin_7,nom_gamma_stat_SR_bin_8,nom_gamma_stat_SR_bin_9,nom_gamma_stat_SR_bin_10,nominalLumi,nom_gamma_stat_CR_bin_0,nom_gamma_stat_SR_bin_0,nom_gamma_stat_SR_bin_1,nom_gamma_stat_SR_bin_2,nom_gamma_stat_SR_bin_3,nom_gamma_stat_SR_bin_4,nom_gamma_stat_SR_bin_5,nom_gamma_stat_SR_bin_6,nom_gamma_stat_SR_bin_7,nom_gamma_stat_SR_bin_8,nom_gamma_stat_SR_bin_9,nom_gamma_stat_SR_bin_10"")));. std::cout << ""starting point : "" << nll->getVal() << std::endl;; RooArgSet params(*nll->getParameters((RooArgSet*)0));; params.Print(""v"");; ; gErrorIgnoreLe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7659:398,test,test,398,https://root.cern,https://github.com/root-project/root/issues/7659,2,"['Test', 'test']","['Test', 'test']"
Testability,"\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:532:16: error: redefinition of '_Mbstatet'; typedef struct _Mbstatet; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:2880,assert,assert,2880,https://root.cern,https://github.com/root-project/root/pull/5627,4,['assert'],['assert']
Testability,"\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDataFrame.hxx(41): message : see reference to class template instantiation 'ROOT::RDF::RInterface<ROOT::RDF::RInterface<Proxied,DataSource>::RLoopManager,void>' being compiled [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,64): error C3083: 'TreeUtils': the symbol to the left of a '::' must be a type [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,75): error C2039: 'GetTopLevelBranchNames': is not a member of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RSqliteDS.hxx(27): message : see declaration of 'ROOT::RDF::Internal' [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,1): error C3861: 'GetTopLevelBranchNames': identifier not found [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1123,18): error C2737: 'treeBranchNames': const object must be initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1130,1): error C3536: 'treeBranchNames': cannot be used before it is initialized [C:\Users\bellenot\build\x86\release\tree\dataframe\test\datasource_sqlite.vcxproj]; C:\Users\bellenot\git\master\tree\dataframe\inc\ROOT/RDF/RInterface.hxx(1132,1): error C2661: 'std::vector<std::string,std::allocator<std::string>>::insert': no overloaded function takes 1 arguments [C:\Users\bellenot\build\x86",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11153:2520,test,test,2520,https://root.cern,https://github.com/root-project/root/pull/11153,1,['test'],['test']
Testability,\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(o,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:1470,Test,Test,1470,https://root.cern,https://github.com/root-project/root/pull/5054,10,"['Test', 'test']","['Test', 'test']"
Testability,\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabel,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:6855,Test,Test,6855,https://root.cern,https://github.com/root-project/root/pull/5054,2,"['Test', 'test']","['Test', 'test']"
Testability,\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: [ FAILED ] AxisTest.Labels (53 ms); 77: [ RUN ] AxisTest.SameBinning; 77: [ OK ] AxisTest.SameBinning (0 ms),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:12255,Test,Test,12255,https://root.cern,https://github.com/root-project/root/pull/5054,8,"['Test', 'test']","['Test', 'test']"
Testability,"\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmErrorLevel [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: exit /b %1 [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: if %errorlevel% neq 0 goto :VCEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :VCEnd"" exited with code 9009. [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]. ### Expected behavior; Project build successfully. ### To Reproduce; 1. Open a x64 Native Tools Command Prompt for VS 2019; 2. git clone --branch master https:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9487:2483,test,test,2483,https://root.cern,https://github.com/root-project/root/issues/9487,1,['test'],['test']
Testability,"] 9 tests from RColumnElementEndian (13 ms total); [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.RealWorld1 (5260 ms); [ RUN ] RNTuple.RandomAccess; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::stri",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:5764,test,test,5764,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability,"] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper.; cf88615b6e [RF] Improve code in `MinuitFcnGrad`; 17bac5528b [RF] Code improvements in tests for new TestStatistics; afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method; 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`; 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'.; 5964",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:3142,test,testRooDataHist,3142,https://root.cern,https://github.com/root-project/root/pull/12681,9,['test'],['testRooDataHist']
Testability,"_0_X_2021-04-26-1100/lib/slc7_amd64_gcc900/libFWCoreFramework.so; #18 0x000000000040ba11 in tbb::interface7::internal::delegated_function<main::{lambda()#1}::operator()() const::{lambda()#1} const, void>::operator()() const (); #19 0x00007ffff5ef5552 in tbb::interface7::internal::task_arena_base::internal_execute (this=0x7fffffff3100, d=...) at ../../src/tbb/arena.cpp:1105; #20 0x000000000040ca13 in main::{lambda()#1}::operator()() const (); #21 0x000000000040b62c in main (). ```; After using XrootD 5.1.1 to open a file ROOT crashes in TMutex::UnLock. ### Expected behavior. ```. cmsRun src/CalibTracker/SiStripChannelGain/test/testSSTGain_PCL_FromRECO_cfg.py era=A; Using Dataset: /ZeroBias/Run2018A-SiStripCalMinBias-12Nov2019_UL2018-v1/ALCARECO; 27-Apr-2021 14:00:10 CEST Initiating request to open file root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root; 27-Apr-2021 14:00:12 CEST Successfully opened file root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root; %MSG-i SiStripGainsPCLWorker: SiStripGainsPCLWorker:ALCARECOSiStripCalib@beginRun 27-Apr-2021 14:00:20 CEST Run: 315420; Resetting APV struct; %MSG; ```. this -> Successfully opened file root:// ; and then working on the file. ### To Reproduce. Use this install script:. ```; /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/6831/14586/install.sh; cd CMSSW_12_0_X_2021-04-26-1100; cmsenv; cmsRun src/CalibTracker/SiStripChannelGain/test/testSSTGain_PCL_FromRECO_cfg.py era=A; ```. ### Setup. 1. 6-22 - ; https://github.com/cms-sw/root/commits/cms/v6-22-00-patches/d1d36a5f17904f7d3661c97d28da8f3954e02340; 2. SLC7; 3. Installed from source. ### Additional context. The pull request from above ; https://github.com/cms-sw/cmsdist/pull/6831; is setuping cmake release type to Debug for both ROOT and XrootD ; as requested in #7335",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8008:8307,test,test,8307,https://root.cern,https://github.com/root-project/root/issues/8008,1,['test'],['test']
Testability,"_; > source ~/critic/ups/setup_for_development -d; > buildtool --generator=ninja -j12 -T; > ; > The test that demonstrates the MT error often hangs due to a memory error (I believe). If the above tests don't complete, then CTRL+C out of them and try running the single problematic test:; > ; > ctest -V -R ProductMix_wraparound_r; > ; > You will see printout like:; > ; > 213: ...; > 213: Begin processing the 99th record. run: 1 subRun: 0 event: 99 at 09-Dec-2020 14:09:34 CST; > 213: Begin processing the 100th record. run: 1 subRun: 0 event: 100 at 09-Dec-2020 14:09:34 CST; > 213: %MSG-w MixingInputWrap: MixFilterTest:mixFilter@BeginModule 09-Dec-2020 14:09:34 CST run: 1 subRun: 0 event: 103; > 213: Wrapping around to initial input file for mixing after 100 secondary events read.; > 213: %MSG; > 213: ...; > ; > And then the job will usually hang or there will be a segmentation violation, both of which originate from the art::RootIOPolicy destructor.; > ; > If, after running all of the tests, you wish to run the job by hand (not using ctest), do the following:; > ; > cd $CETPKG_BUILD/critic/test/art/product-mixing/ProductMix_wraparound_r.d/; > art -c ProductMix_wraparound_r.fcl -j4; > ; > I have debugged using valgrind, helgrind, gdb, and Arm forge's DDT. Under the covers, it appears there is a spin-lock that just spins at the end of the job. When enabling memory-debugging with DDT, I get a memory error when a ROOT file is closed from the destructor of the RootIOPolicy class, a class used for product-mixing. See the attached screenshots, which include a portion of the stacktrace where the memory error is happening, and the value of the variables at the line in question (null ptrs).; > ; > I would greatly appreciate some guidance or direct help in further debugging this situation. At this point, I'm not sure whether art is using ROOT poorly, or if this is a different issue. Please let me know if it would work best to meet via Zoom.; > ; > Thanks very much,; > Kyle; > ; >",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6939:7836,test,tests,7836,https://root.cern,https://github.com/root-project/root/issues/6939,2,['test'],"['test', 'tests']"
Testability,"_Originally posted by @guitargeek in https://github.com/root-project/root/issues/7859#issuecomment-824967292_. > Hi @hageboeck! For the schema evolution from the previous version, I just made a test myself where I wrote a RooDataHist to a file with ROOT 6.24 and read it back with ROOT master + this PR. Do you think I should implement a unit test for that? I didn't think this was necessary, after all the change is rather trivial (removal of `_realVars` class member). I see that I never really replied to the above:; Yes, I think that kind of a test like this makes sense. Consider this:; - stressRooFit has a reference file that reads in some RooFit objects. This kind of serves as a schema evolution test, but that's more by accident than by design.; - The reference file evolves with ROOT, though! When you find that small things have to be changed, you recreate the reference file by running `./stressRooFit` with the correct arguments.; - Now you are not testing 6.2[02] schema evolution, but whatever was in master when you created that reference. This is not a good and stable test.; - Here's a test suite that tests the I/O of categories across several ROOT versions. It's trivial to extend it by creating another reference file and adding it to the test suite:; https://github.com/root-project/root/blob/2ef9c05a04b4e65d68923737bf115e5410ddf6c3/roofit/roofitcore/test/testProxiesAndCategories.cxx#L57-L130. So the answer is:; It would be preferable to have a similar test to what I pasted above for RooDataHist. A stub is already here for RooDataHistv4:; https://github.com/root-project/root/blob/2ef9c05a04b4e65d68923737bf115e5410ddf6c3/roofit/roofitcore/test/testRooDataHist.cxx#L183-L239. By making it a value-parametrised test as for the categories, you could instantiate it very quickly for all RooDataHist versions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8037:194,test,test,194,https://root.cern,https://github.com/root-project/root/issues/8037,16,"['stub', 'test']","['stub', 'test', 'testProxiesAndCategories', 'testRooDataHist', 'testing', 'tests']"
Testability,"_STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -fno-strict-aliasing -Wwrite-strings -Wno-shadow -Wno-unused-parameter -Wno-deprecated-declarations -fPIC -fno-rtti' '-DCMAKE_INSTALL_PREFIX=/home/mkrzewic/build/root/etc/cling//plugins' '-DLLVM_DIR=/home/mkrzewic/build/root/interpreter/llvm-project/llvm' '-DCLANG_INCLUDE_DIRS=/home/mkrzewic/src/root/interpreter/llvm-project/clang/include' '/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include' '-DCMAKE_CXX_STANDARD=17' '-DClang_DIR=/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/' '-DClang_CONFIG_EXTRA_PATH_HINTS=' '-DLLVM_FORCE_USE_OLD_TOOLCHAIN=ON' '-DCLAD_BUILD_STATIC_ONLY=ON' '-GUnix Makefiles' '-S' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad' '-B' '/home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-build'. See also. /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-*.log. -- stdout output is:; -- Configuring incomplete, errors occurred!. -- stderr output is:; CMake Warning:; Ignoring extra path from command line:. ""/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang/include"". CMake Warning:; Ignoring extra path from command line:. ""/home/mkrzewic/build/root/interpreter/llvm-project/llvm/tools/clang//include"". CMake Error at CMakeLists.txt:86 (message):; Found unsupported version: LLVM 2.13.2;. Please set LLVM_DIR pointing to the llvm version 5.0 to 16.0.x build or; installation folder. CMake Error at /home/mkrzewic/build/root/interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure-Release.cmake:47 (message):; Stopping after outputting logs. gmake[2]: *** [interpreter/cling/tools/plugins/clad/CMakeFiles/clad.dir/build.make:92: interpreter/cling/tools/plugins/clad/clad-prefix/src/clad-stamp/clad-configure] Error 1; gmake[1]: *** [CMakeFiles/Makefile2:44491: interpreter/cling/tools/plugins/clad/CMakeFiles/clad.dir/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14492:2122,log,log,2122,https://root.cern,https://github.com/root-project/root/issues/14492,1,['log'],['log']
Testability,"_SYSCONFDIR=""/opt/local/libexec/root6/etc/root"" -DCMAKE_INSTALL_NAME_DIR=""/opt/local/libexec/root6/lib/root"" -Dfortran=ON -Dbuiltin_davix=OFF -Dbuiltin_freetype=ON -Dbuiltin_glew=ON -Dbuiltin_pcre=OFF -Dbuiltin_zlib=ON -Dbuiltin_lzma=OFF -Dbuiltin_tbb=OFF -Dbuiltin_afterimage=ON -Ddavix=ON -Dfftw3=OFF -Dkrb5=OFF -Dmysql=OFF -Dsqlite=OFF -Dodbc=OFF -Dopengl=ON -Dpythia6=OFF -Dpythia8=OFF -Droofit=ON -Dssl=ON -Dxml=ON -Dpyroot=ON -Dfitsio=OFF -Dgsl_shared=ON -Dbuiltin_gsl=OFF -Dpgsql=OFF -Ddcache=OFF -Dchirp=OFF -Dhdfs=OFF -Druby=OFF -Dminuit2=ON -Dtmva=ON -Dqt=OFF -Dqtgsi=OFF -Dgviz=ON -Dsoversion=ON -Dcxx11=ON -Dcxx14=OFF -Dcxx17=ON -Dlibcxx=ON -Dxrootd=ON -Dbuiltin_ftgl=ON -Dmathmore=ON -Dgenvector=ON -Dmemstat=ON -Dunuran=ON -Dgdml=ON -Dhttp=ON -Dvc=OFF -Dastiff=ON -Dgeocad=OFF -Dr=OFF -Droot7=ON -Dbuiltin_veccore=OFF -DPNG_LIBRARY=/opt/local/lib/libpng.dylib -DPNG_PNG_INCLUDE_DIR=/opt/local/include -Druntime_cxxmodules=OFF -DPYTHON_INCLUDE_DIR=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/Headers"" -DPYTHON_EXECUTABLE=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/bin/python3.8"" -DPYTHON_LIBRARY=""/opt/local/Library/Frameworks/Python.framework/Versions/3.8/lib/libpython3.8.dylib"" -DXROOTD_INCLUDE_DIR=""/opt/local/include/xrootd"" -DGRAPHVIZ_INCLUDE_DIR=""/opt/local/include"" -DGSL_CONFIG_EXECUTABLE=""/opt/local/bin/gsl-config"" -DLIBXML2_INCLUDE_DIR=""/opt/local/include/libxml2"" -DLIBXML2_LIBRARIES=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_LIBRARY=""/opt/local/lib/libxml2.dylib"" -DLIBXML2_XMLLINT_EXECUTABLE=""/opt/local/bin/xmllint"" -Dcocoa=ON -Dx11=OFF -DCMAKE_OSX_ARCHITECTURES=""x86_64"" -DCMAKE_OSX_DEPLOYMENT_TARGET=""10.15"" -DCMAKE_OSX_SYSROOT=""/Library/Developer/CommandLineTools/SDKs/MacOSX10.15.sdk"" -DCMAKE_INSTALL_PREFIX=/Users/chris/Projects/ROOT/install ../root 2>&1 | tee ../configure.log; cmake --build . -- -j8 2>&1 | tee ../build.log; ```. ## Setup; <!--. -->. ## Additional context; <!--; Add any other context about the problem here.; -->",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6366:3868,log,log,3868,https://root.cern,https://github.com/root-project/root/issues/6366,2,['log'],['log']
Testability,"_This PR is not intended to be merged into ROOT! That's why it's a draft!_. The purpose of this PR is to show which private members I had to make public to access RNTuple in a BulkIO style. Two of these changes were just to parameterize the cluster and page sizes:. * `fClusterSizeEntries` was made public so that I could set it and make it apples-to-apples with the other formats.; * `kDefaultElementsPerPage = 2097152` is large, but 8× less than the maximum size that can be compressed. The maximum is `0xffffff` because the header provides 3 bytes to specify the uncompressed size, so that uncompressed size can't exceed that. The number I chose here is `2**21`, which is 8× below that limit, to allow for 8-byte integers and floating point numbers. What's probably missing here is the logic for splitting the data to be compressed into a series of blocks with this maximum size. (TTree and normal serialized objects do that.). The rest of the changes are just turning private/protected members into public ones so that they can be read directly in a BulkIO style. Here's how that's done: suppose you're filling a buffer named `array` using a `view` of type `V` returned by `GetViewCollection` or `GetView<T>`. We know the `length` of elements to read, so the function is. ```c++; template <typename V, typename T>; void read_from_rntuple_view(T* buffer, V& view, int64_t& offset, int64_t length) {; int64_t current = 0;; while (current < length) {; T* data = (T*)view.fField.Map(offset + current);; int32_t num = view.fField.fPrincipalColumn->fCurrentPage.GetNElements();; int32_t skipped = (offset + current) - view.fField.fPrincipalColumn->fCurrentPage.GetGlobalRangeFirst();; int32_t remaining = num - skipped;; if (current + remaining > length) {; remaining = length - current;; }; if (remaining > 0) {; std::memcpy(&buffer[current], data, remaining*sizeof(T));; }; current += remaining;; }; offset += current;; }; ```. Here's a sample usage:. ```c++; auto ntuple = RNTupleReader::Open(std::mo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7112:789,log,logic,789,https://root.cern,https://github.com/root-project/root/pull/7112,1,['log'],['logic']
Testability,"__assert_fail_base.cold.0 () from /lib64/libc.so.6; #3 0x00007ffff66bb3a6 in __assert_fail () from /lib64/libc.so.6; #4 0x00007fffe0dea553 in RooSTLRefCountList<RooAbsArg>::size (this=0x1aa32f8); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:113; #5 RooSTLRefCountList<RooAbsArg>::findByNamePointer (this=this@entry=0x1aa32f8, item=item@entry=0x7fffffff72d0); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooSTLRefCountList.h:153; #6 0x00007fffe0de1848 in RooAbsArg::findServer (this=0x1aa32b0, arg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsArg.h:211; #7 RooAbsArg::dependsOn (this=this@entry=0x1aa32b0, testArg=..., ignoreArg=ignoreArg@entry=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:870; #8 0x00007fffe0de1a80 in RooAbsArg::dependsOn (this=0x1aa32b0, serverList=..., ignoreArg=0x0, valueOnly=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:847; #9 RooAbsArg::observableOverlaps (this=<optimized out>, nset=<optimized out>, testArg=...); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:923; #10 0x00007fffe0e6d04d in RooAddPdf::checkObservables (this=<optimized out>, nset=<optimized out>); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAddPdf.cxx:832; #11 0x00007fffe0de178d in RooAbsArg::recursiveCheckObservables (this=0x7fffffff6bc8, nset=0x7fffffff6360); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsArg.cxx:830; #12 0x00007fffe0e13ade in RooAbsGenContext::RooAbsGenContext (this=0x2934400, model=..., vars=...,; prototype=<optimized out>, auxProto=0x0, verbose=false); at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsGenContext.cxx:63; #13 0x00007fffe0e5e1ce in RooAddGenContext::RooAddGenContext (this=0x2934400, model=..., vars=..., prototype=0x0,; auxProto=0x0, verbose=false) at /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAddGenContext.cxx:55; #14 0x00007fffe0e6e25e in RooAddPdf::genContext (this=0x7fffffff5290, vars=..., prototy",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9547:1619,test,testArg,1619,https://root.cern,https://github.com/root-project/root/issues/9547,1,['test'],['testArg']
Testability,"_map_{};; ClassDef(TestClass, 1);; };; ClassImp(TestClass); ; void test(){; auto* test_obj = new TestClass;; test_obj->Print();; ; auto* file = TFile::Open(""test.root"", ""recreate"");; test_obj->Write(""obj"");; file->Close();; ; delete file;; delete test_obj;; ; file = TFile::Open(""test.root"", ""read"");; test_obj = file->Get<TestClass>(""obj"");; test_obj->Print();; ; file->Close();; delete file;; }; ; int main(int argc, char* argv[]) {; test();; return 0;; }. ### Running the example. With a compiled code everything works as expected:. root -l; root [0] .L test.cpp+; root [1] test(). gives correct output:. aaaa bbbbbb cccc; aaaa bbbbbb cccc. But if I try to read again the same file:. root -l test.root; root [0] gSystem->Load(""test_cpp""); root [1] obj->Print(); Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0x6b3ba626 for the class ""string"" in test.root.; Error in <TBufferFile::CheckByteCount>: object of class string read too many bytes: 72 instead of 24; Warning in <TBufferFile::CheckByteCount>: string::Streamer() not in sync with data on file test.root, fix Streamer(); aaaabbbbbb@ cccc�i�� cccc. With an older version of ROOT (6.18), everything works as expected. ### Some additional information. I tried to compare StreamerInfo for 2 ROOT versions and they are different (last item):. **root 6.18**. root [2] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0x64321048; string first [2] offset= 0 type=320 ,stl=365, ctype=365,; string second offset= 0 type=300 ,stl=365, ctype=365,. **root 6.22,24**. root [3] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f558",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8268:1803,test,test,1803,https://root.cern,https://github.com/root-project/root/issues/8268,1,['test'],['test']
Testability,"_mod"", """", RooArgSet(par, RooConst(10)));. RooGaussian gauss(""gauss"", """", x, parMod, RooConst(2.0));; RooGenericPdf pdf(""pdf"", ""gauss"", gauss);. std::unique_ptr<RooAbsReal> integ1{gauss.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};; integ1->Print(""v"");. std::cout << std::endl;. std::unique_ptr<RooAbsReal> integ2{pdf.createIntegral(x, *pdf.getIntegratorConfig(), nullptr)};; integ2->Print(""v"");; }; ```. The integral of the Gaussian has the correct value (`V`) servers (the parameters of the Gaussian):; ```; (0x7ffc9b9bf798,-S) RooRealVar::x """"; (0x7ffc9b9bf240,--) RooGaussian::gauss """"; (0x7ffc9b9bff68,V-) RooProduct::par_mod """"; (0x55ac531cd470,V-) RooConstVar::2 ""2""; ```. The integral of the `RooGenericPdf` should have the same value servers,; but it doesn't. Instead, it uses the leaves of the computation graph:; ```; (0x7ffc9b9bf798,-S) RooRealVar::x """"; (0x7ffc9b9bec88,--) RooRealSumPdf::pdf """"; (0x7ffc9b9bfb80,V-) RooRealVar::par """"; (0x55ac51984c50,V-) RooConstVar::10 ""10""; (0x55ac531cd470,V-) RooConstVar::2 ""2""; ```. That means, the direct value server `par_mod` is **skipped** now,; misrepresenting the client-server relationship. The new BatchMode makes strong use of the value-server interface for the; `RooFitDriver`, so it's very sensitive to `RooRealIntegrals` getting it; wrong. That's why this commit suggests to change the logic in `RooRealIntegral`; to always add the next direct value servers that don't depend on the; integration variable, and not the leaves. A unit test that verifies that the value servers of the integral are the; mathematically direct value servers and not the computation graph leaves; is also implemented. Closes https://github.com/root-project/root/issues/11578. The PR also fixes the same problem for the RooProjectedPdf, which is essentially a integral wrapper but it also got the server-client interface wrong. Now, it simply takes over the shape and value servers from the underlying integral, which is now implemented correctly.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11597:1648,log,logic,1648,https://root.cern,https://github.com/root-project/root/pull/11597,2,"['log', 'test']","['logic', 'test']"
Testability,"_nolink; - pythia6; - roofit; - roofit_multiprocess; - webgui; - root7; - rpath; - shadowpw; - shared; - soversion; - sqlite; - ssl; - tmva; - tmva-cpu; - tmva-pymva; - spectrum; - uring; - vc; - vdt; - veccore; - x11; - xml; - xrootd; - Debian GNU/Linux ""sid"" ; - GCC 11.3.0. ## The problem . To see the problem first to . 	$ make test ; 	; This will generate the shared library `libFoo.so.1` and associated; files (`libFoo_rdict.pcm`, `libFoo.rootmap`, `libFoo.so`) in the; sub-directory `libs`, and execute the script `Test.C`. This all works; fine:. 	$ LD_LIBRARY_PATH=libs:<ROOTSYS>/lib root -l -b -q Test.C. 	Processing Test.C...; 	this is a Foo; 	hello from a Foo; 	rm libs/Foo_dict.o libs/Foo.o. Next, clean up . 	$ make clean ; 	; so that we start afresh. Then, execute . 	$ make test LIBDIR=.libs ; 	; which will build the above mentioned library and associated files in; the sub-directory `.libs`. This fails somewhat with . 	$ LD_LIBRARY_PATH=.libs:<ROOTSYS>/lib -l -b -q Test.C. 	Processing Test.C...; 	Error in <TCling::RegisterModule>: Cannot open shared library <ROOTSYS>/root.exe for dictionary libFoo:; 	 <ROOTSYS>/root.exe: cannot dynamically load position-independent executable; 	Error in <TCling::LoadPCM>: ROOT PCM <ROOTSYS>/bin/libFoo_rdict.pcm file does not exist; 	this is a Foo; 	hello from a Foo; 	; 	; It does not matter if `LIBDIR` . - is an absolute path (e.g., ` ``pwd``/.libs`); - the end directory is below a directory starting with a dot (e.g.,; ` ``pwd``/.libs/foo`); - if the actual directory starts with a dot, but the library is loaded; via a symbolic link without the dot ; ; 		$ make clean; 		$ make LIBDIR=.libs ; 		$ ln -s .libs libs; 		$ make test LIBDIR=libs; 	 LD_LIBRARY_PATH=libs:<ROOTSYS>/lib root -l -b -q Test.C; 		 ; In all cases, ROOT complains as above. If the dot is _not_ at the; start of a path component (e.g., `LIBDIR=foo.libs`), then all is; fine. . So it seems that somewhere deep in the ROOT code, there is some; assumption about a dot (`",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10704:1572,Test,Test,1572,https://root.cern,https://github.com/root-project/root/issues/10704,1,['Test'],['Test']
Testability,"_src/core/cont/src/TRefArray.cxx:284; 12: 'obj' is non-null in /opt/root_src/core/cont/src/TRefArray.cxx:337; 13: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:337; 14: Assuming 'idx' is >= field 'fLowerBound' in /opt/root_src/core/cont/src/TRefArray.cxx:338; 15: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:338; 16: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:342; 17: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:342; 18: 'uid' declared without an initial value in /opt/root_src/core/cont/src/TRefArray.cxx:346; 19: Calling 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:347; 20: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 21: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 22: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 23: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 24: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:211; 25: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 26: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 27: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 28: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 29: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 30: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:214; 31: 'valid' is false in /opt/root_src/core/cont/src/TRefArray.cxx:215; 32: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:215; 33: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:218; 34: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:218; 35: Assuming 'gDebug' is <= 3 in /opt/root_src/co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:18408,Test,TestBit,18408,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Test'],['TestBit']
Testability,"_src/proof/proofbench/src/TProofBench.cxx:472; 43: Taking false branch in /opt/root_src/proof/proofbench/src/TProofBench.cxx:472; 44: 'isNorm' is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:496; 45: Taking false branch in /opt/root_src/proof/proofbench/src/TProofBench.cxx:496; 46: Called C++ object pointer is null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:499; /opt/root_src/proof/proofbench/src/TProofBench.cxx:1077:30: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'fout' is non-null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 2: Left side of '||' is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 3: 'fout' is non-null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 4: Left side of '&&' is true in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 5: Calling 'TObject::IsZombie' in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 6: Calling 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 10: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:149; 11: Returning from 'TObject::IsZombie' in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 12: Taking false branch in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 13: Assuming 'nmdesc' is null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:993; 14: Taking false branch in /opt/root_src/proof/proofbench/src/TProofBench.cxx:993; 15: '?' condition is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:997; 16: Left side of '||' is true in /opt/root_src/proof/proofbench/src/TProofBench.cxx:998; 17: Left side of '||' is false in /opt/root_src/pro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:58300,Test,TestBit,58300,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Test'],['TestBit']
Testability,"` instead (My guess is that's the default for clang 9). ```; 1: FAIL: Cling :: CodeUnloading/PCH/VTables.C (36 of 185); 1: ******************** TEST 'Cling :: CodeUnloading/PCH/VTables.C' FAILED ********************; 1: Script:; 1: --; 1: : 'RUN: at line 1'; mkdir -p ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path"" || true; 1: : 'RUN: at line 2'; rm -f ""CompGen.h.pch"" && rm -f ""/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch""; 1: : 'RUN: at line 3'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o CompGen.h.pch; 1: : 'RUN: at line 4'; clang -x c++-header -fexceptions -fcxx-exceptions -std=c++14 -pthread /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/Inputs/CompGen.h -o /srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch; 1: : 'RUN: at line 5'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -Xclang -include-pch -Xclang CompGen.h.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: : 'RUN: at line 6'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -I/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path -include-pch Relative.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: --; 1: Exit Code: 1; 1: ; 1: Command Output (stderr):; 1: --",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10693:1331,test,test,1331,https://root.cern,https://github.com/root-project/root/issues/10693,1,['test'],['test']
Testability,"`#include <foo.h>` isn't looked up again after calling `gInterpreter->AddIncludePath()`. We also need a test for a file that gets included, isn't found, is then created by the user, and must then be successfully included (i.e. lookup failure must not be cached.)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12778:104,test,test,104,https://root.cern,https://github.com/root-project/root/issues/12778,1,['test'],['test']
Testability,"`&obj2 - &obj1` is truncated to integer -- previous logic was assuming floating point values were possible. This fixes a rare failure in `dataframe_snaphot --gtest_filter=""*ClonesArray""` as well as possible crashes in user applications. This fixes ROOT-10822.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5787:52,log,logic,52,https://root.cern,https://github.com/root-project/root/pull/5787,1,['log'],['logic']
Testability,`+` test; `+` release notes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9040:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/9040,1,['test'],['test']
Testability,"`: in particular, _(i)_ `RNTupleDescriptorBuilder::BeginHeaderExtension()` marks the beginning of the header extension; and _(ii)_ extension header information, including an iterator over the top-level fields may be obtained via `RNTupleDescriptor::GetHeaderExtension()`.; - Serialize/deserialize an incremental schema description, i.e. schema extension, as part of the footer envelope. This changes the layout of the footer as explained in the [updated binary format specification](https://github.com/jalopezg-git/root/blob/2ed0dd65698c937f0c06017172c6fbcdfbbb9636/tree/ntuple/v7/doc/specifications.md).; **NOTE:** another change required in the serialization code is the use depth-first serialization of columns instead. Rationale: given that; 1. New columns may appear during write as a result of schema extension; and; 2. On-disk IDs for those columns have to be assigned before serializing the next page list,. we have to ensure that these columns get the same ID both when they are seen for the first time (in page lists) and by the time the description for the schema extension is serialized.; This change only affects how the schema is serialized and does not change deserialization, i.e. the change is backwards compatible.; - `RPageSink::UpdateSchema(const RNTupleModelChangeset &)` allows incremental updates to the ntuple descriptor kept internally in the `RPageSink`, which is required, e.g. if new fields were added after the initial call to `RPageSink::Create(RNTupleModel &)`.; - Per the current state of affairs in `RPageSinkBuf`, some adjustments are also needed to keep `fInnerModel` in sync.; - Add class `RNTupleModel::RUpdater`, which provides limited support for incremental updates, e.g. addition of new fields.; - Add `RNTupleWriter::CreateModelUpdater()` that returns a usable `RUpdater` object. ## Checklist:; - [X] tested changes locally; - [X] updated the docs (if necessary); - [x] Update to format version to RC 2 -- to be done after merging both parts + split encoding",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12376:2876,test,tested,2876,https://root.cern,https://github.com/root-project/root/pull/12376,1,['test'],['tested']
Testability,"`AppendImpl()` returns the number of bytes written. For collections, this accounts for the size of the written elements + one element in the index column. However, `sizeof(RColumnElement<T>)` was erroneously taken as the size of the latter. Instead, use the packed size of an element in the principal column. Note that such size may be either 64 or 32 bit, depending on whether small clusters are used. The `RNTuple.SmallClusters` test was adjusted accordingly. As side effect, this PR should fix the RNTuple.SmallClusters test on Win32 (and thus supersedes #13004). ## Changes or fixes:; - Fix return value of `AppendImpl()` for collection fields.; - Adjust RNTuple.SmallClusters; also, set the target zipped cluster size and no compression, as otherwise the estimation of the zipped cluster size hits in. ## Checklist:; - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13021:431,test,test,431,https://root.cern,https://github.com/root-project/root/pull/13021,3,['test'],"['test', 'tested']"
Testability,`EnableImplicitMT` and friends print warnings or do not exist in `noimt` builds. Disable IMT tests in this case. @amadio what is the correct syntax to start a noimt PR build? :),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1101:93,test,tests,93,https://root.cern,https://github.com/root-project/root/pull/1101,1,['test'],['tests']
Testability,"`GetEntriesFast` is not as fast as it could be: it constructs and; destructs a `TReadLockGuard`, and might need to modify `TObjArray::fLast`.; This PR introduced `GetEntriesUnsafe`, a thread-unsafe version of `GetEntriesFast`; that side-steps these operations when possible. Measurements for the benchmarks in the `philippe` branch of the [df_bench](https://gitlab.com/bluehood/df_bench) repository:. With `GetEntriesFast`:; ```; -----------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------; TreeGetEntryOneBranch 192943 ns 192939 ns 3664; TreeGetEntryTwoBranchesAndAllStatusFalse 110524 ns 110521 ns 6433; TreeGetEntryTwoBranches 195864 ns 195859 ns 3430; TreeGetEntryTwoBranchesWithoutSetStatus 317772 ns 317761 ns 2095; BranchGetEntryOneBranch 103652 ns 103650 ns 6730; BranchGetEntryTwoBranches 104072 ns 104070 ns 6707; ```. With `GetEntriesUnsafe`:; ```; -----------------------------------------------------------------------------------; Benchmark Time CPU Iterations; -----------------------------------------------------------------------------------; TreeGetEntryOneBranch 152708 ns 152690 ns 4579; TreeGetEntryTwoBranchesAndAllStatusFalse 91277 ns 91274 ns 7731; TreeGetEntryTwoBranches 173940 ns 173922 ns 4024; TreeGetEntryTwoBranchesWithoutSetStatus 279271 ns 279261 ns 2514; BranchGetEntryOneBranch 104515 ns 104503 ns 6721; BranchGetEntryTwoBranches 104180 ns 104177 ns 6652; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3603:296,benchmark,benchmarks,296,https://root.cern,https://github.com/root-project/root/pull/3603,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,"`NameWithDescription_t` takes a `std::string_view`, but the compiler only attempts one implicit conversion so `std::string` -> `std::string_view` and then to `NameWithDescription_t` doesn't work. Enabling this overload is particularly helpful for programmatically generated field names, as demonstrated by the `Limits_ManyFields` test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14739:330,test,test,330,https://root.cern,https://github.com/root-project/root/pull/14739,1,['test'],['test']
Testability,`NeverWrittenOut.root` is actually written out (because the exception; is thrown during the event loop). Change the file name so that it's deleted at the end of the test.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11150:165,test,test,165,https://root.cern,https://github.com/root-project/root/pull/11150,1,['test'],['test']
Testability,"`Nonzero` simply goes through the input vector and checks whether an element is zero or not. The time complexity is `O(N)`. `Intersect` goes through the vector `v1` and searches each element in the vector `v2`. The approach is sorting `v2` first and loop trivially over `v1`. The resulting time complexity is `O(N1*log(N2))`. A common use-case is shown below:. ```cpp; using namespace ROOT::VecOps;. // user data, e.g., in NanoAOD format; RVec<int> Muon_charge = {1, -1, 1};; RVec<float> Muon_pt = {20.0, 30.0, 10.0};; RVec<float> Muon_eta = {1.0, -2.0, 0.5};. // make first selection based on Muon charge; auto idx_mask = Nonzero(Muon_charge>0);. // get indices that sort Muon pt with descending values and pass the previous selection; auto idx_sorted = Reverse(Argsort(Muon_pt));; auto idx_selection = Intersect(idx_sorted, idx_mask);. // get Muon eta of positive Muons sorted by pt; auto values = Take(Muon_eta, idx_selection);; // Returns: { 1, 0.5 }; ```. This scenario is very common in processing of NanoAOD files. The naming matches the numpy API with [`numpy.nonzero`](https://docs.scipy.org/doc/numpy/reference/generated/numpy.nonzero.html) and [`numpy.intersect1d`](https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.intersect1d.html). **TODO:**. - [x] Write a tutorial when we agreed on the functionality.; - [x] Change the API for `Sorted` and `Reversed` to `Sort` and `Reverse` before merging this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2620:315,log,log,315,https://root.cern,https://github.com/root-project/root/pull/2620,1,['log'],['log']
Testability,"`RClusterDescriptor::ContainsColumn` is called as part of the main read; path and so is a candidate for optimization efforts:. ```; RColumn::MapPage; RPageSourceFile::PopulatePage; RNTupleDescriptor::FindClusterId; RClusterDescriptor::ContainsColumn; ```. A comparison of the test case `ntuple_extended` using perf and g++ 9.3; found that `unordered_map::find` appeared to be faster than; `unordered_map::count`. The generated assembly was also shorter for `find`. perf output for `ROOT::Experimental::RClusterDescriptor::ContainsColumn`:. ```; count: 4.67% 4.67% ntuple_extended libROOTNTuple.so; find: 3.85% 3.85% ntuple_extended libROOTNTuple.so; ```; I'm not sure if I entirely trust the results, because I am running inside a VM. But for every test iteration `find` has been faster than `count`. I do think having better assembly generation for `find` is more persuasive than just the percentage difference. <details>; <summary> Assembly comparison </summary>. ```; 4.67% 4.67% ntuple_extended libROOTNTuple.so [.] ROOT::Experimental::RClusterDescriptor::ContainsColumn; unordered_map.count; Percent│ Disassembly of section .text:; │; │ 0000000000074d80 <ROOT::Experimental::RClusterDescriptor::ContainsColumn(unsigned long) const>:; │ _ZNK4ROOT12Experimental18RClusterDescriptor14ContainsColumnEm():; 1.20 │ mov 0x60(%rdi),%r8; 36.14 │ mov %rsi,%rax; 2.41 │ xor %edx,%edx; │ div %r8; 3.61 │ mov 0x58(%rdi),%rax; 2.41 │ mov (%rax,%rdx,8),%rax; 30.12 │ mov %rdx,%r10; 1.20 │ test %rax,%rax; │ ↓ je 70; │ mov (%rax),%rcx; │ test %rcx,%rcx; │ ↓ je 70; │ mov 0x8(%rcx),%rdi; 21.69 │ xor %r9d,%r9d; │ ↓ jmp 4e; │ nop; │30: test %r9,%r9; │ ↓ jne 78; │ mov (%rcx),%rcx; │ test %rcx,%rcx; │ ↓ je 5f; │3d: mov 0x8(%rcx),%rdi; │ xor %edx,%edx; │ mov %rdi,%rax; │ div %r8; │ cmp %rdx,%r10; │ ↓ jne 5f; │4e: cmp %rsi,%rdi; │ ↑ jne 30; 1.20 │ mov (%rcx),%rcx; │ add $0x1,%r9; │ test %rcx,%rcx; │ ↑ jne 3d; │5f: test %r9,%r9; │ setne %al; │ ← retq; │ nop; │70: xor %eax,%eax; │ ← retq; │ nop; │78: mov $0x1,%ea",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8209:276,test,test,276,https://root.cern,https://github.com/root-project/root/pull/8209,2,['test'],['test']
Testability,"`RColumnElement` template specializations follow the same schema. This pull request proposes judicious use of preprocessor macros, which results in more readable and maintanable code. ## Changes or fixes:; - Define PP macros: `DECLARE_RCOLUMNELEMENT_SPEC` and `DECLARE_RCOLUMNELEMENT_SPEC_SIMPLE`, which can be used to declare `RColumnElement` template specializations.; - Rewrite current specializations in terms of the aforementioned macros. ## Checklist:; - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13220:465,test,tested,465,https://root.cern,https://github.com/root-project/root/pull/13220,1,['test'],['tested']
Testability,"`RDF::Mean()` uses plain doubles. That's better than float, but far from stable. When you run with IMT, it's actually more accurate than without, because less numbers go into one accumulator, and each running sum remains smaller. So IMT/NoIMT can break your tests (even different TBB scheduling does). It was creating problems already in this simple test (note that the precision threshold for testing the mean is pretty bad, 1.E-2):; https://github.com/root-project/root/blob/7e1c74b764a60f811e898c3f6b55c0234b2b307d/roofit/RDataFrameHelpers/test/testActionHelpers.cxx#L28-L33. Maybe it's worth to increase the precision of; https://github.com/root-project/root/blob/7e1c74b764a60f811e898c3f6b55c0234b2b307d/tree/dataframe/inc/ROOT/RDF/ActionHelpers.hxx#L917. with a Kahan or Neumaier sum. Same for StdDev, maybe go for Knuth's algo or the parallel weighted variance.; https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance. For Kahan, you can use; https://root.cern.ch/doc/master/classROOT_1_1Math_1_1KahanSum.html",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7395:258,test,tests,258,https://root.cern,https://github.com/root-project/root/issues/7395,5,['test'],"['test', 'testActionHelpers', 'testing', 'tests']"
Testability,"`RNTupleDescriptor::GetColumnIterable` returns an iterator over all *logical* columns, causing projected fields to be considered as well in the size calculation by the RNTupleInspector. With this fix, projected fields are skipped. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14857:69,log,logical,69,https://root.cern,https://github.com/root-project/root/pull/14857,2,"['log', 'test']","['logical', 'tested']"
Testability,`ROOT::TestSupport` library not working as intended,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12828:7,Test,TestSupport,7,https://root.cern,https://github.com/root-project/root/issues/12828,1,['Test'],['TestSupport']
Testability,"`ROOT::TypeTraits::InvokeResult_t` is a wrapper for `std::invoke_result_t` that falls back to; `std::result_of_t` if the former is not available. It is useful as a; C++-standard-agnostic wrapper for this functionality, as; `std::result_of` has been deprecated in C++17 but `std::invoke_result`; is only available since C++17. I substituted all usages of `std::result_of` in `tree/` and `core/` with usages of `InvokeResult_t`, which removes deprecation warnings when building ROOT with C++17 (esp. with clang) and indirectly provides _a lot_ of test coverage.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10679:545,test,test,545,https://root.cern,https://github.com/root-project/root/pull/10679,1,['test'],['test']
Testability,"`RPageSource` now lives in the `Internal` namespace, so we can make the `UnsealPage` method public. This gives the possibility to get the contents of individual columns for benchmarking and testing purposes. - [x] tested changes locally; - [x] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14847:173,benchmark,benchmarking,173,https://root.cern,https://github.com/root-project/root/pull/14847,3,"['benchmark', 'test']","['benchmarking', 'tested', 'testing']"
Testability,"`RooLinkedList::At(ix)` was implemented using an `ix`-step walk through the list. We found that in HistFactory models, `At` was used to loop over the list, which thus caused a lot of double walking through the list. This PR (a cherry-pick from the [roofit-dev fork](https://github.com/roofit-dev/root/tree/linked_list_at)) improves this situation by replacing `At`'s walk by a direct lookup from a `std::vector` of `RooLinkedListElem` pointers. In our HistFactory-based benchmark, this gave a significant speed boost of 1.6x on a likelihood minimization task. Since this was not the focus of the roofit-dev project, unfortunately, I had no time yet to wrap up this feature into a nice PR, do rigorous testing and benchmarking, etcetera. I would appreciate reviews and suggestions or additional commits for improvements. For instance, I put `//!` behind the index vector (the name of this `//!` feature currently eludes me), so I wouldn't have to update the class version, but I guess this will break the class when it is (de)serialized. I'll gladly take any advice on how to best handle this.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3024:470,benchmark,benchmark,470,https://root.cern,https://github.com/root-project/root/pull/3024,3,"['benchmark', 'test']","['benchmark', 'benchmarking', 'testing']"
Testability,"`Stats` RDF action should accepts systematic variations, but currently does not. Minimal reproducer:; ```cpp; auto h = ROOT::RDataFrame(10); .Define(""x"", [](ULong64_t e) { return int(e); }, {""rdfentry_""}); .Vary(; ""x"",; [](int x) {; return ROOT::RVecI{x - 1, x + 1};; },; {""x""}, 2); .Stats<int>(""x"");; ROOT::RDF::Experimental::VariationsFor(h); // logic error:; // The MakeNew method is not implemented for this action helper (TStatistic<BR/>). Cannot Vary its result.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10545:348,log,logic,348,https://root.cern,https://github.com/root-project/root/issues/10545,1,['log'],['logic']
Testability,"`TLeafElement` is one of the existing holes for offset array generation - if you serialize a class containing data elements whose size is kept in a separate index variable, we can definitely generate the offset array separately. This PR closes that hole. Further, unit tests are included to ensure that the offset array generation is doing as expected. Fixes ROOT-9634.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2775:269,test,tests,269,https://root.cern,https://github.com/root-project/root/pull/2775,1,['test'],['tests']
Testability,"``""_typename""`` was always first member in JSON object.; Therefore every next member add to object was separated with ``"",""`` - very simple.; Now, when typeinfo can be excluded, one must ensure that before first data member no any extra separators are inserted. In the #3203 only simple usecases were tested - now skipping should work everywhere.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3215:301,test,tested,301,https://root.cern,https://github.com/root-project/root/pull/3215,1,['test'],['tested']
Testability,"```; In file included from /builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/RModel.hxx:14,; from /builddir/build/BUILD/root-6.26.00/tmva/sofie/src/RModel.cxx:3:; /builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/SOFIE_common.hxx: In member function 'void TMVA::Experimental::SOFIE::InitializedTensor::CastPersistentToShared()':; /builddir/build/BUILD/root-6.26.00/tmva/sofie/inc/TMVA/SOFIE_common.hxx:75:12: error: 'memcpy' is not a member of 'std'; did you mean 'wmemcpy'?; 75 | std::memcpy(tData.get(), fPersistentData,fSize * sizeof(float));; | ^~~~~~; | wmemcpy; gmake[2]: *** [tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/build.make:79: tmva/sofie/CMakeFiles/ROOTTMVASofie.dir/src/RModel.cxx.o] Error 1; ```. # This Pull request:. ## Changes or fixes:. Add #include \<cstring\> for std::memcpy. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10116:827,test,tested,827,https://root.cern,https://github.com/root-project/root/pull/10116,1,['test'],['tested']
Testability,"```; The following tests FAILED:; 1312 - roottest-python-basic-basic (Failed); 1313 - roottest-python-basic-datatype (Failed); 1315 - roottest-python-basic-overload (Failed); 1409 - roottest-python-pythonizations-pythonizations (Failed); 1410 - roottest-python-pythonizations-smartptr (Failed); 1413 - roottest-python-stl-stl (Failed); 2106 - roottest-root-tree-fastcloning-runabstract-copy (Failed); ```. All tests have the following issue:. ```; Start 1312: roottest-python-basic-basic. 1312: Test command: /usr/bin/cmake ""-DCMD=/usr/bin/timeout^-s^USR2^270s^/home/sftnight/swunsch/python/bin/python3^/home/sftnight/swunsch/root/roottest/python/basic/PyROOT_basictests.py^--fixcling"" ""-DPRE=/home/sftnight/swunsch/build/bin/root.exe^-b^-q^-l^-e^.L ArgumentPassingCompiled.C+"" ""-DOUT=/home/sftnight/swunsch/build/roottest/python/basic/basic.log"" ""-DCWD=/home/sftnight/swunsch/build/roottest/python/basic"" ""-DDIFFCMD=/home/sftnight/swunsch/python/bin/python3^/home/sftnight/swunsch/root/roottest/scripts/custom_diff.py"" ""-DCHECKOUT=true"" ""-DCHECKERR=true"" ""-DSYS=/home/sftnight/swunsch/build"" ""-DENV=LEGACY_PYROOT=False#ROOTSYS=/home/sftnight/swunsch/build#PATH=/home/sftnight/swunsch/build/bin:/home/sftnight/swunsch/python/bin:/home/sftnight/.local/bin:/home/sftnight/bin:/usr/lib64/ccache:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin#PYTHONPATH=/home/sftnight/swunsch/build/lib:#LD_LIBRARY_PATH=/home/sftnight/swunsch/build/lib:/home/sftnight/swunsch/python/lib:"" ""-DCOPY=/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingCompiled.C^/home/sftnight/swunsch/root/roottest/python/basic/ReturnValues.C^/home/sftnight/swunsch/root/roottest/python/basic/SimpleClass.C^/home/sftnight/swunsch/root/roottest/python/basic/ArgumentPassingInterpreted.C"" ""-P"" ""/home/sftnight/swunsch/build/RootTestDriver.cmake""; 1312: Environment variables: ; 1312: ROOT_HIST=0; 1312: Test timeout computed to be: 300; 1312: Info in <TUnixSystem::ACLiC>: creating shared library /home/sftnight/swunsch/build",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6597:19,test,tests,19,https://root.cern,https://github.com/root-project/root/issues/6597,4,"['Test', 'log', 'test']","['Test', 'log', 'tests']"
Testability,"```; build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]; 306 | sprintf(path, ""%s/%s"", *pp, include);; | ^~; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11861:272,test,tested,272,https://root.cern,https://github.com/root-project/root/pull/11861,1,['test'],['tested']
Testability,"```; build/rmkdepend/include.c:306:28: warning: ‘%s’ directive writing up to 8190 bytes into a region of size between 1 and 8191 [-Wformat-overflow=]; 306 | sprintf(path, ""%s/%s"", *pp, include);; | ^~; ```; Apple needs to be told to expose snprintf... (cherry picked from commit 19909eb71a5ce5a066ca4588e62ff012dec0bb7c). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12099:387,test,tested,387,https://root.cern,https://github.com/root-project/root/pull/12099,1,['test'],['tested']
Testability,"```; rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]; 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );; | ^; rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20; 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );; | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ```; # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11702:478,test,tested,478,https://root.cern,https://github.com/root-project/root/pull/11702,1,['test'],['tested']
Testability,"```; rulevisCorr.cxx:173:43: error: ‘snprintf’ output may be truncated before the last format character [-Werror=format-truncation=]; 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );; | ^; rulevisCorr.cxx:173:21: note: ‘snprintf’ output between 11 and 21 bytes into a destination of size 20; 173 | snprintf( cn, 20, ""rulecorr%d_"", countCanvas+1 );; | ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; ```; (backport from master). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11928:502,test,tested,502,https://root.cern,https://github.com/root-project/root/pull/11928,1,['test'],['tested']
Testability,"```c++; auto f = new TFile(""branchobject.root"", ""RECREATE"");; TTree *t = new TTree(""branchobject"", ""test tree for branchobject.cxx"");; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t>> lv(1., 2., 3., 4.);; ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double>> lvd(11., 12., 13., 14.);; t->Branch(""lv32"", ""ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<Double32_t>>"", &lv);; t->Branch(""lvd"", ""ROOT::Math::LorentzVector<ROOT::Math::PtEtaPhiM4D<double>>"", &lvd);; t->Fill();; t->Write();; ```. yields; ```; $ root -l -b branchobject.root. branchobject->Print(); ******************************************************************************; *Tree :branchobject: test tree for branchobject.cxx *; *Entries : 1 : Total = 8657 bytes File Size = 2085 *; * : : Tree compression factor = 1.00 *; ******************************************************************************; *Branch :lv32 *; *Entries : 1 : BranchElement (see below) *; *............................................................................*; *Br 0 :fCoordinates : *; *Entries : 1 : Total Size= 2996 bytes One basket in memory *; *Baskets : 0 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; *Br 1 :fCoordinates.fPt : Double32_t *; *Entries : 1 : Total Size= 628 bytes File Size = 95 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; *Br 2 :fCoordinates.fEta : Double32_t *; *Entries : 1 : Total Size= 633 bytes File Size = 96 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; *Br 3 :fCoordinates.fPhi : Double32_t *; *Entries : 1 : Total Size= 633 bytes File Size = 96 *; *Baskets : 1 : Basket Size= 32000 bytes Compression= 1.00 *; *............................................................................*; *Br 4 :fCoordinates.fM : Double32",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12509:100,test,test,100,https://root.cern,https://github.com/root-project/root/issues/12509,2,['test'],['test']
Testability,"```console; ❯ cat reproducer.def; Bootstrap: docker; From: fedora:36. %post; dnf -y update; dnf -y install git make cmake gcc-c++ gcc binutils ninja-build \; libX11-devel libXpm-devel libXft-devel libXext-devel python openssl-devel; dnf -y clean all. mkdir /reproducer && cd /reproducer; git clone -b master --depth 1 http://github.com/root-project/root source; git -C source log; gcc --version; cmake -GNinja -S source -B build -Dxrootd=OFF; cmake --build build. ```; ```console; ❯ singularity --version; singularity version 3.8.7-1.fc35; ❯ singularity build -f reproducer.sif reproducer.def; (...skip...); + mkdir /reproducer; + cd /reproducer; + git clone -b master --depth 1 http://github.com/root-project/root source; Cloning into 'source'...; (...skip...); + git -C source log; commit 9c12a2a4e707ee75f37bde96772ab53e94f01033 (grafted, HEAD -> master, origin/master, origin/HEAD); Author: Jonas Rembser <jonas.rembser@cern.ch>; Date: Mon Apr 25 11:58:45 2022 +0200. [RF] Also compare parameter errors in RooFitResult::isIdentical(NoCov). The `RooFitResult::isIdentical` method so far only compared parameter; values and covariance matrix values. Even though comparing the final; parameter errors would be redundant with the covariance matrix checks,; it's still important to check parameter errors for two reasons:. 1. Initial parameter errors need to be compared, because the the; initial error determins the initial step size which influences the; minimization path. If initial errors are different, the final; parameter values are almost never identical. Catching differences in initial parameter errors informs the user; that differences in fit result are because of the starting; conditions. 2. In the case of `RooFitResult::isIdenticalNoCov`, we need to check; the error of final parameters because there is no comparison of; covariance matrix values. The signature of the public function `isIdenticalNoCov` is extended by a; tolerance parameter for the error comparison. This is expected ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10478:376,log,log,376,https://root.cern,https://github.com/root-project/root/issues/10478,2,['log'],['log']
Testability,"```cpp; $ cat test.h; int add42(int i);. $ cat test.cpp; int add42(int i) {; return i + 42;; }. $ clang++ test.cpp -shared -fPIC -o libtest.so. $ root -l -b; root [0] #include ""test.h""; root [1] gSystem->Load(""./libtest.so""); (int) 0; root [2] add42(1) // postpone this and all is fine!!; (int) 43; root [3] gInterpreter->Declare(""double add42d(double d) { return d + 42.; }\nint add42(int i) { return i + 42; }""); [IncrementalJIT] addModule() failed: Duplicate definition of symbol '_Z5add42i'; (bool) true; root [4] add42d(1.) // innocent bystander; IncrementalExecutor::executeFunction: symbol '_Z6add42dd' unresolved while linking [cling interface function]!; You are probably missing the definition of add42d(double); Maybe you need to load the corresponding shared library?; root [5] ; ```. I believe the JIT considers `add42` as a strong symbol and when we re-define it we have a problem. I think this is the right behavior however we allowed this in the past and we might be breaking (sometimes silently) existing code. cc: @wlav",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12277:14,test,test,14,https://root.cern,https://github.com/root-project/root/issues/12277,4,['test'],['test']
Testability,"```valgrind --suppressions=/build/vvassilev/root-release-master/etc/valgrind-root.supp root.exe -e ""#define ClingWorkAroundPrintfIssues"" -e ""#define ClingWorkAroundLackOfModule"" -e ""#define ClingWorkAroundProxyConfusion"" -e ""#define ClingWorkAroundMissingDynamicScope"" -e ""#define ClingWorkAroundMultipleInclude"" -e ""#define ClingWorkAroundAutoParseUsingNamespace"" -e ""#define ClingWorkAroundExtraParensWithImplicitAuto"" -e ""#define ClingWorkAroundNoPrivateClassIO"" -e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; ==22765== Memcheck, a memory error detector; ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; ==22765== . Processing assertSparseSelection.C...; ==22765== Conditional jump or move depends on uninitialised value(s); ==22765== at 0x9D9A01A: llvm::Co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:842,assert,assertSparseSelection,842,https://root.cern,https://github.com/root-project/root/issues/11385,1,['assert'],['assertSparseSelection']
Testability,`can't dereference invalidated vector iterator` assertion failure in `SimpleCollectionProxy.hxx`,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13568:48,assert,assertion,48,https://root.cern,https://github.com/root-project/root/issues/13568,1,['assert'],['assertion']
Testability,`cmake -Droottest=On` tests wrong ROOT build!,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7081:22,test,tests,22,https://root.cern,https://github.com/root-project/root/issues/7081,1,['test'],['tests']
Testability,"`gInterpreter::ProcessLine` has an important run-time cost.; Instead of calling it everytime the jitting of an action is required, we now store all the strings that are to jit in TLoopManager and do a single call to `gInterpreter::ProcessLine` before running the event-loop. A couple of life-time issues had to be resolved for this to work properly: in order to let result proxies and action helpers share ownership of the result object, I introduced (simple) manual lifetime management of a shared_ptr (weird, I know). In order to deal with deferred jitting of an action that hangs from a node whose `TInterface` has already been destroyed (can happen due to the deferral of jitting) all `BuildAndBook` functions have been made independent of `TInterface`. In the long term it might be possible to refactor the jitting mechanism so that the `TAction` (and the `TTreeReaderValue/Array`s that it contains) is jitted but the action helpers are not, lifting the requirement of manual lifetime management of a shared_ptr. Although this should be possible in principle, I currently don't see how we could integrate it with the existing logic, so I decided for this much less invasive solution. Before/after runtimes for two extreme scenarios:. `test_inference.cxx` (which performs a lot of jitting).; compile time: ~8s -> ~9s; run time: ~40s -> ~7s. 50 jitted Histo1D calls in a loop (thanks to Attila for the use-case):; run time: ~35s -> <2s. This PR conflicts with #713 . Depending on which one gets merged first I will rebase the other.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/720:1131,log,logic,1131,https://root.cern,https://github.com/root-project/root/pull/720,1,['log'],['logic']
Testability,"`git describe` is used to find the closest head/tag to checkout (see relatedrepo_GetClosestMatch). A failed `git describe`, which happens e.g. in shallow clones, should be handled gracefully. As noted by @hahnjo, however, a call to `relatedrepo_GetClosestMatch()` is not even required provided that the repository was found locally, and that we are not forcing checkout. This is for a follow-up PR though. . ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13198:429,test,tested,429,https://root.cern,https://github.com/root-project/root/pull/13198,1,['test'],['tested']
Testability,"`gtest-roofit-roostats-test-testSPlot` fails with; ```; 253: ==1900901==ERROR: AddressSanitizer: heap-use-after-free on address 0x6150001aed68 at pc 0x7ff68c0e1c43 bp 0x7fff1ea4ee10 sp 0x7fff1ea4ee00; 253: READ of size 8 at 0x6150001aed68 thread T0; 253: #0 0x7ff68c0e1c42 in __gnu_cxx::__normal_iterator<RooAbsArg* const*, std::vector<RooAbsArg*, std::allocator<RooAbsArg*> > >::__normal_iterator(RooAbsArg* const* const&) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_iterator.h:784:20; 253: #1 0x7ff68c0e1c42 in std::vector<RooAbsArg*, std::allocator<RooAbsArg*> >::begin() const /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:708:16; 253: #2 0x7ff68c0e1c42 in std::vector<RooAbsArg*, std::allocator<RooAbsArg*> >::empty() const /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:895:16; 253: #3 0x7ff68c0e1c42 in RooAbsCollection::empty() const /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsCollection.h:254:18; 253: #4 0x7ff68c0e1c42 in RooAbsReal::getVal(RooArgSet const*) const /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsReal.h:97:46; 253: #5 0x7ff68c0e1c42 in RooTemplateProxy<RooAbsReal>::retrieveValue(RooAbsReal const&) const /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooTemplateProxy.h:369:17; 253: #6 0x7ff68c0e1c42 in RooTemplateProxy<RooAbsReal>::operator double() const /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooTemplateProxy.h:221:12; 253: #7 0x7ff68c0e1c42 in RooLinearVar::evaluate() const /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooLinearVar.cxx:115:10; 253: #8 0x7ff68be02e42 in RooAbsReal::traceEval(RooArgSet const*) const /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsReal.cxx:334:18; 253: #9 0x7ff68be02ce7 in RooAbsReal::getValV(RooArgSet const*) const /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsReal.cxx:256:14; 253: #10 0x7ff68cd94a6b in RooAbsReal::getVal(RooArgSet const*) const /home/jhahnfel/ROOT/src/roofit/roofitcor",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11221:23,test,test-testSPlot,23,https://root.cern,https://github.com/root-project/root/issues/11221,1,['test'],['test-testSPlot']
Testability,"`pdf` is `RooAbsPdf*`, and `RooAbsPdf` inherits from `RooAbsReal`,; so the check can only fail if `pdf` is a nullptr, in which case; `pdf->GetName()` would be a nullptr dereference. This fixes the following warning in gcc11:. ```; ../roofit/roofitcore/src/RooAddModel.cxx: In constructor ‘RooAddModel::RooAddModel(const char*, const char*, const RooArgList&, const RooArgList&, Bool_t)’:; ../roofit/roofitcore/src/RooAddModel.cxx:125:106: warning: ‘this’ pointer is null [-Wnonnull]; 125 | coutE(InputArguments) << ""RooAddModel::RooAddModel("" << GetName() << "") pdf "" << pdf->GetName() << "" is not of type RooAbsPdf, ignored"" << endl ;; ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [] tested changes locally; - [] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8432:706,test,tested,706,https://root.cern,https://github.com/root-project/root/pull/8432,1,['test'],['tested']
Testability,`std::iterator<...>` was deprecated in C++17; manually declare the expected member types instead. ## Checklist:; - [X] tested changes locally. This PR fixes #10351.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10457:119,test,tested,119,https://root.cern,https://github.com/root-project/root/pull/10457,1,['test'],['tested']
Testability,`std::iterator<...>` was deprecated in C++17; manually declare the expected member types instead. ## Checklist:; - [X] tested changes locally. This PR fixes #10351.; This PR is a backport of https://github.com/root-project/root/pull/10457 to v6-26-00-patches.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10468:119,test,tested,119,https://root.cern,https://github.com/root-project/root/pull/10468,1,['test'],['tested']
Testability,"`std::make_unique<unsigned char[]>()` has the side effect of zero- initializing the allocated buffer. In the replaced cases, all bytes in the buffer are overwritten after the allocation. Overhead of this initialization has been measured to be around 5-7% in a tight loop that allocates and uses 100k 64KiB buffers. One occurrence in [`UnsealPage()`](https://github.com/root-project/root/blob/master/tree/ntuple/v7/src/RPageStorage.cxx#L153) is not changed by this PR, as that case is addressed in PR #13208. This commit uses `std::unique_ptr<unsigned char[]>(new unsigned char[N])` instead for the cases in which that overhead matters. C++20 offers [`std::make_unique_for_overwrite<T>()`](https://en.cppreference.com/w/cpp/memory/unique_ptr/make_unique), which might be used in the future instead. ## Checklist:; - [x] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13214:819,test,tested,819,https://root.cern,https://github.com/root-project/root/pull/13214,1,['test'],['tested']
Testability,`string_view` support in Cppyy for < cxx14 fixed these tests:. https://github.com/root-project/root/pull/3455,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3519:55,test,tests,55,https://root.cern,https://github.com/root-project/root/pull/3519,1,['test'],['tests']
Testability,"`verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11991:71,assert,assertions,71,https://root.cern,https://github.com/root-project/root/pull/11991,3,"['assert', 'test']","['assertions', 'asserts', 'tested']"
Testability,"`verifyPreservedAnalysis()` is super slow these days. It gets run when assertions are one (!NDEBUG). Turn this off unless told to build a Debug build of ROOT (where time does not matter, and is expected to not be representative for reality) or where LLVM_BUILD_TYPE is turning asserts on. (cherry picked from commit 92c90e8deff323fd2eab700e384dd3944b754471). # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12101:71,assert,assertions,71,https://root.cern,https://github.com/root-project/root/pull/12101,3,"['assert', 'test']","['assertions', 'asserts', 'tested']"
Testability,"a rawhide.; Build architectures are i686, x86_64, aarch64, ppc64le and s390x.; So the failure is on the only 32 bit architecture, so could be 32 bit related. ~~~; 115/1232 Test #69: pyunittests-pyroot-roofit-roodataset-numpy ..........................***Failed 2.72 sec; test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for ... ; RooFit v3.60 -- Developed by Wouter Verkerke and David Kirkby ; Copyright (C) 2000-2013 NIKHEF, University of California & Stanford University; All rights reserved, please read http://roofit.sourceforge.net/license.txt; [#0] WARNING:DataHandling -- FAIL; test_to_numpy_and_from_numpy (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy); Test exporting to numpy and then importing back a non-weighted dataset. ... RooDataSet.from_numpy(dataSetNumpy) Ignored 58 out-of-range events; ok; test_to_numpy_and_from_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_and_from_numpy_weighted); Test exporting to numpy and then importing back a weighted dataset. ... ok; test_to_numpy_basic (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_basic); Basic test with a real value and a category. ... ok; test_to_numpy_derived_weight (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_derived_weight); Test if the optional computation of derived weights works. ... ok; test_to_numpy_weighted (roodataset_numpy.TestRooDataSetNumpy.test_to_numpy_weighted); Test with a weighted dataset. ... ok; ======================================================================; FAIL: test_ignoring_out_of_range (roodataset_numpy.TestRooDataSetNumpy.test_ignoring_out_of_range); Test that rows with out-of-range values are skipped, both for; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.26.10/bindings/pyroot/pythonizations/test/roofit/roodataset_numpy.py"", lin",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12162:1092,Test,TestRooDataSetNumpy,1092,https://root.cern,https://github.com/root-project/root/issues/12162,1,['Test'],['TestRooDataSetNumpy']
Testability,a. Fix the test/stress failure when using the built-in zlib; b. disable new test that uses RDataFrame when it is not available. Tweak TF1 backward compatibility mechanism (switch from using stale data member to using an I/O rule).,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7274:11,test,test,11,https://root.cern,https://github.com/root-project/root/pull/7274,2,['test'],['test']
Testability,"a/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:3896,test,test-products,3896,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,"a7d22f99f85372e3ac7a621f72422b66/etc/cling/std.modulemap:554:10: error: module 'std.bits/uses_allocator_args.h' requires feature 'cplusplus20'; module ""bits/uses_allocator_args.h"" [optional] {; ^; /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/include/c++/11.2.1/memory_resource:42:10: note: submodule of top-level module 'std' implicitly imported here; #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc; ^; ```. this is the stack trace we see when this error occurs; ```; ===========================================================; There was a crash (kSigAbort).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00002b4bd10da72b in waitpid () from /lib64/libc.so.6; #1 0x00002b4bd103bcf7 in do_system () from /lib64/libc.so.6; #2 0x00002b4bd1d2345c in TUnixSystem::Exec (this=0x7472d0, shellcmd=0xc1f5720 ""/pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/gdb-backtrace.sh 43811 1>&2"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:2104; #3 0x00002b4bd1d23cfd in TUnixSystem::StackTrace (this=0x7472d0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:2395; #4 0x00002b4bd1896496 in (anonymous namespace)::do_trace (sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00002b4bd1896526 in (anonymous namespace)::TExceptionHandlerImp::HandleException (",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:1740,test,tests,1740,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,"ableIf<true, _Ty>'; struct _CrtEnableIf<true, _Ty>; ^~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here; struct _CrtEnableIf<true, _Ty>; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.183",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:1542,assert,assert,1542,https://root.cern,https://github.com/root-project/root/pull/5627,2,['assert'],['assert']
Testability,"ace (this=0x558efe2e6c50) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007f3e5f919dd4 in TUnixSystem::DispatchSignals (this=0x558efe2e6c50, sig=kSigSegmentationViolation) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:3615; #5 <signal handler called>; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G\325Y\212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64/libgtest_main.so.1.13.0; #17 0x00007f3e5f048b4a in __libc_start_call_main () from /lib64/libc.so.6; #18 0x00007f3e5f048c0b in __libc_start_main_impl () from /lib64/libc.so.6; #19 0x0000558efc9fc045 in _start (); ===============================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:8028,test,test,8028,https://root.cern,https://github.com/root-project/root/issues/12428,1,['test'],['test']
Testability,"ad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171; #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171; #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11; ===========================================================; ```. ## Expected behavior; No crash. ## To Reproduce; Code. ```; #include <TCanvas.h>; #include <TLine.h>; #include <TPad.h>. int main(int argc, char **argv) {; TCanvas* C= new TCanvas(""canvas"",""canvas"",1024,768);; C->cd();; TPad* c= new TPad();; c->cd();; TLine* l= new TLine(0,1,0,1);; l->Paint();; delete l;; delete c;; delete C;; return 0;; }; ```. compile; ```; g++ pad3.cxx $(root-config --glibs --cflags --libs) -o pad3 -g; ```; run. ```; ./pad3; ```. ## Setup; ROOT 6.22.02 gcc4.8.5 on CentOS7; and. source /cvmfs/sft.cern.ch/lcg/views/dev3python3/latest/x86_64-centos7-gcc10-opt/setup.sh; on lxplus. ## Possible fix; Replace. ```; if (!gPad->IsBatch()); GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);. ```; with. ```; if (!gPad->IsBatch() && GetPainter() ); GetPainter()->DrawLine(x[0], y[0], x[1], y[1]);; ```. in ``void TPad::PaintLine(Double_t x1, Double_t y1, Double_t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6446:1991,test,test,1991,https://root.cern,https://github.com/root-project/root/issues/6446,1,['test'],['test']
Testability,add a function to retrieve the number of logical cores available,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4684:41,log,logical,41,https://root.cern,https://github.com/root-project/root/pull/4684,1,['log'],['logical']
Testability,"ading/PCH/Inputs/CompGen.h -o /srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path/Relative.pch; 1: : 'RUN: at line 5'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -Xclang -include-pch -Xclang CompGen.h.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: : 'RUN: at line 6'; cat /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C | /srv/root/src/build/interpreter/llvm/src/bin/cling --nologo -I/srv/root/src/build/interpreter/llvm/src/tools/clang/include -I/srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH -I/srv/root/src/build/interpreter/cling/test/CodeUnloading/PCH/Output/Rel/Path -include-pch Relative.pch 2>&1 | /srv/root/src/build/interpreter/llvm/src/bin/FileCheck /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C; 1: --; 1: Exit Code: 1; 1: ; 1: Command Output (stderr):; 1: --; 1: /srv/root/src/root/interpreter/cling/test/CodeUnloading/PCH/VTables.C:11:12: error: CHECK: expected string not found in input; 1: // CHECK: I was executed; 1: ^; 1: <stdin>:1:1: note: scanning from here; 1: cling: /srv/root/src/root/interpreter/cling/lib/Interpreter/CIFactory.cpp:926: bool {anonymous}::SetupCompiler(clang::CompilerInstance*, const cling::CompilerOptions&, bool, bool): Assertion `LangOpts.CPlusPlus17 && ""Language version mismatch""' failed.; 1: ^; 1: <stdin>:6:52: note: possible intended match here; 1: #4 0x00007faf5092270e __pthread_kill_implementation /usr/src/debug/sys-libs/glibc-2.35-r5/glibc-2.35/nptl/pthread_kill.c:44:76; 1: ^; 1: ; 1: --; ```; Adding `-DCMAKE_CXX_STANDARD=17` to the command line when configuring did not help, clang is still called with `-std=c++14` in the test and it still fails.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10693:2215,test,test,2215,https://root.cern,https://github.com/root-project/root/issues/10693,4,"['Assert', 'test']","['Assertion', 'test']"
Testability,af3d/eve7/glu/sweep.c:782; 63: Assuming 'eUp->Dst' is not equal to 'eLo->Dst' in /opt/root_src/graf3d/eve7/glu/sweep.c:791; 64: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:791; 65: Assuming the condition is true in /opt/root_src/graf3d/eve7/glu/sweep.c:793; 66: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:793; 67: Field 'fixUpperEdge' is 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:799; 68: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:799; 69: Assuming field 'fixUpperEdge' is not equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:804; 70: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:804; 71: Calling 'DeleteRegion' in /opt/root_src/graf3d/eve7/glu/sweep.c:805; 72: Field 'fixUpperEdge' is not equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:153; 73: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:153; 74: Assuming field 'winding' is equal to 0 in /opt/root_src/graf3d/eve7/glu/sweep.c:158; 75: expanded from macro 'assert' in /usr/include/assert.h:109; 76: Taking true branch in /opt/root_src/graf3d/eve7/glu/sweep.c:158; 77: expanded from macro 'assert' in /usr/include/assert.h:109; 78: Memory is released in /opt/root_src/graf3d/eve7/glu/sweep.c:162; 79: expanded from macro 'memFree' in /opt/root_src/graf3d/eve7/glu/memalloc.h:41; 80: Returning; memory was released via 2nd parameter in /opt/root_src/graf3d/eve7/glu/sweep.c:805; 81: Assuming the condition is false in /opt/root_src/graf3d/eve7/glu/sweep.c:806; 82: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:806; 83: Use of memory after it is freed in /opt/root_src/graf3d/eve7/glu/sweep.c:808; /opt/root_src/graf3d/eve7/glu/sweep.c:885:22: warning: Use of memory after it is freed [clang-analyzer-unix.Malloc]; 1: Assuming the condition is false in /opt/root_src/graf3d/eve7/glu/sweep.c:1321; 2: Taking false branch in /opt/root_src/graf3d/eve7/glu/sweep.c:1321; 3: Assuming the condition is true in /opt/root_src/graf3d/eve7/glu/sweep.c:13,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7531:26703,assert,assert,26703,https://root.cern,https://github.com/root-project/root/issues/7531,2,['assert'],['assert']
Testability,aframe-df002_dataModel-py ............................... Passed 8.55 sec; Start 1079: tutorial-dataframe-df010_trivialDataSource-py; 1077/1231 Test #1079: tutorial-dataframe-df010_trivialDataSource-py ....................... Passed 3.14 sec; Start 1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py; 1078/1231 Test #1078: tutorial-dataframe-df008_createDataSetFromScratch-py ................ Passed 3.91 sec; Start 1081: tutorial-dataframe-df014_CSVDataSource-py; 1079/1231 Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Start 1083: tutorial-dataframe-df017_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Start 1084: tutorial-dataframe-df019_Cache-py; 1082/1231 Test #1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py .............. Passed 5.30 sec; Start 1085: tutorial-dataframe-df021_createTGraph-py; 1083/1231 Test #1082: tutorial-dataframe-df016_vecOps-py .................................. Passed 4.06 sec; Start 1086: tutorial-dataframe-df024_Display-py; 1084/1231 Test #1083: tutorial-dataframe-df017_vecOpsHEP-py ............................... Passed 3.68 sec; Start 1087: tutorial-dataframe-df026_AsNumpyArrays-py; 1085/1231 Test #1081: tutorial-dataframe-df014_CSVDataSource-py ........................... Passed 7.49 sec; Start 1090: tutorial-dataframe-df031_Stats-py; 1087/1231 Test #1085: tutorial-dataframe-df021_createTGraph-py ............................ Passed 3.08 sec; Start 1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py; 1088/1231 Test #1086: tutorial-dataframe-df024_Display-py ................................. Passed 4.99 sec; 1089/1231 Test #1084: tutorial-dataframe-df019_Cache-py ................................... Passed 6.22 sec; 1090/1231 Test #1090: tutorial-dataframe-df031_Stats-py ................................... Passed 3.39 sec; 1095/1231 Test #1087: tu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:12580,Test,Test,12580,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,aframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .................,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:5508,test,test-datasource-sqlite,5508,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-datasource-ntuple', 'test-datasource-sqlite']"
Testability,aframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutori,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:5687,Test,Test,5687,https://root.cern,https://github.com/root-project/root/pull/10300,2,"['Test', 'test']","['Test', 'test-datasource-csv']"
Testability,"ailed); 	220 - gtest-roofit-roofit-test-testRooJohnson (Failed); 	223 - gtest-roofit-roofit-test-testSumW2Error (Failed); 	228 - gtest-roofit-roofitcore-test-testRooBinSamplingPdf (Failed); 	229 - gtest-roofit-roofitcore-test-testRooSimPdfBuilder (Failed); 	230 - gtest-roofit-roofitcore-test-testRooWrapperPdf (Failed); 	231 - gtest-roofit-roofitcore-test-testRooFitDriver (Failed); 	233 - gtest-roofit-roofitcore-test-testRooAbsPdf (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	241 - gtest-roofit-roofitcore-test-testTestStatistics (Failed); 	242 - gtest-roofit-roofitcore-test-testRooProductPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	244 - gtest-roofit-roofitcore-test-testRooSimultaneous (Failed); 	245 - gtest-roofit-roofitcore-test-testRooGradMinimizerFcn (Failed); 	247 - gtest-roofit-roofitcore-test-testLikelihoodSerial (Failed); 	248 - gtest-roofit-roofitcore-test-testRooRealL (Failed); 	249 - gtest-roofit-roofitcore-test-testGlobalObservables (Failed); 	252 - gtest-roofit-roostats-test-testSPlot (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df006_ranges-py (Failed); 	1106 - tutorial-math-exampleFunction-py (Failed); Errors while running CTest; ```; With the proposed change in #10303 to not fail on the warning about RooNaNPacker not being implemented for big endian, the list of failures is shorter:; ```; 99% tests passed, 17 tests failed",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:1632,test,test-testGlobalObservables,1632,https://root.cern,https://github.com/root-project/root/issues/10409,1,['test'],['test-testGlobalObservables']
Testability,"ains the dictionary for `vector<type2>`; ** SInce `c1` exists, it is replaced by the dictionary generated TClass for `vector<type2>`, let's call it `c2`; ** Part of this replacement is to transfer `c1`'s StreamerInfo into `c2` (after 'reseting` it's state); * Then the `StreamerInfos` are copied form the input file to the output ; ** This includes ""building"" and ""compiling"" the StreamerInfo; *** This crasesd when calling `AddReadAction`. An STL collection's TClass (like `c1` and `c2`)'s StreamerInfo contains an artificial StreamerElement (for infrastructures purposes) that points back to its owner. So when the `StreamerInfo` is created it has internally a pointer to `c1`. The deficiency is that when`c1` is replaced by `c2` and then deleted, the StreamerInfo was not updated and thus the later building of the `StreamerInfo` was using a stale pointer to `c1`. ```; #4 <signal handler called>; #5 0x00002af4f3e84290 in TStreamerInfo::AddReadAction (this=0x2af506a31000, readSequence=0x2af536e87740, i=0, compinfo=0x2af59072d588) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc820/lcg/root/6.22.03-1718c3698c5b60720e5f35ab8ee4efc5/root-6.22.03/io/io/src/TStreamerInfoActions.cxx:3317; #6 0x00002af4f3e830c9 in TStreamerInfo::Compile (this=0x2af506a31000) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc820/lcg/root/6.22.03-1718c3698c5b60720e5f35ab8ee4efc5/root-6.22.03/io/io/src/TStreamerInfoActions.cxx:3191; #7 0x00002af4f3e6c1ae in TStreamerInfo::BuildOld (this=0x2af506a31000) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc820/lcg/root/6.22.03-1718c3698c5b60720e5f35ab8ee4efc5/root-6.22.03/io/io/src/TStreamerInfo.cxx:2547; #8 0x00002af4f45f22ad in TClass::GetStreamerInfo (this=0x2af536bcd800, version=6) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc820/lcg/root/6.22.03-1718c3698c5b60720e5f35ab8ee4efc5/root-6.22.03/core/meta/src/TClass.cxx:4",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6767:2085,test,tests,2085,https://root.cern,https://github.com/root-project/root/issues/6767,2,['test'],"['testBuildDir', 'tests']"
Testability,"ainsColumn`:. ```; count: 4.67% 4.67% ntuple_extended libROOTNTuple.so; find: 3.85% 3.85% ntuple_extended libROOTNTuple.so; ```; I'm not sure if I entirely trust the results, because I am running inside a VM. But for every test iteration `find` has been faster than `count`. I do think having better assembly generation for `find` is more persuasive than just the percentage difference. <details>; <summary> Assembly comparison </summary>. ```; 4.67% 4.67% ntuple_extended libROOTNTuple.so [.] ROOT::Experimental::RClusterDescriptor::ContainsColumn; unordered_map.count; Percent│ Disassembly of section .text:; │; │ 0000000000074d80 <ROOT::Experimental::RClusterDescriptor::ContainsColumn(unsigned long) const>:; │ _ZNK4ROOT12Experimental18RClusterDescriptor14ContainsColumnEm():; 1.20 │ mov 0x60(%rdi),%r8; 36.14 │ mov %rsi,%rax; 2.41 │ xor %edx,%edx; │ div %r8; 3.61 │ mov 0x58(%rdi),%rax; 2.41 │ mov (%rax,%rdx,8),%rax; 30.12 │ mov %rdx,%r10; 1.20 │ test %rax,%rax; │ ↓ je 70; │ mov (%rax),%rcx; │ test %rcx,%rcx; │ ↓ je 70; │ mov 0x8(%rcx),%rdi; 21.69 │ xor %r9d,%r9d; │ ↓ jmp 4e; │ nop; │30: test %r9,%r9; │ ↓ jne 78; │ mov (%rcx),%rcx; │ test %rcx,%rcx; │ ↓ je 5f; │3d: mov 0x8(%rcx),%rdi; │ xor %edx,%edx; │ mov %rdi,%rax; │ div %r8; │ cmp %rdx,%r10; │ ↓ jne 5f; │4e: cmp %rsi,%rdi; │ ↑ jne 30; 1.20 │ mov (%rcx),%rcx; │ add $0x1,%r9; │ test %rcx,%rcx; │ ↑ jne 3d; │5f: test %r9,%r9; │ setne %al; │ ← retq; │ nop; │70: xor %eax,%eax; │ ← retq; │ nop; │78: mov $0x1,%eax. unordered_map.find; 3.85% 3.85% ntuple_extended libROOTNTuple.so [.] ROOT::Experimental::RClusterDescriptor::ContainsColumn; Percent│; │; │; │ Disassembly of section .text:; │; │ 0000000000074d80 <ROOT::Experimental::RClusterDescriptor::ContainsColumn(unsigned long) const>:; │ _ZNK4ROOT12Experimental18RClusterDescriptor14ContainsColumnEm():; │ mov 0x60(%rdi),%r8; 17.31 │ mov %rsi,%rax; │ xor %edx,%edx; │ div %r8; 11.54 │ mov 0x58(%rdi),%rax; │ mov (%rax,%rdx,8),%rax; 28.85 │ mov %rdx,%r9; │ test %rax,%rax; │ ↓ je 50; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8209:1479,test,test,1479,https://root.cern,https://github.com/root-project/root/pull/8209,2,['test'],['test']
Testability,"aits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6F2EF9F: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==290973== by 0x6C20B67: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (TCling.cxx:2438); ==290973== by 0x6C215B6: TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (TCling.cxx:2582); ==290973== by 0x6C24E6E: TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (TCling.cxx:3545); ==290973== by 0x4C06042: TApplication::ExecuteFile(char const*, int*, bool) (TApplication.cxx:1865); ==290973== by 0x4C0586B: TApplication::ProcessFile(char const*, int*, bool) (TApplication.cxx:1737); ==290973== by 0x4C05680: TApplication::ProcessLine(char const*, bool, int*) (TApplication.cxx:1710); ==290973== by 0x487A58F: TRint::ProcessLineNr(char const*, char const*, int*) (TRint.cxx:820); ==290973== by 0x4878CD2: TRint::Run(bool) (TRint.cxx:461); ==290973== by 0x401446: main (rmain.cxx:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14433:2985,test,testing,2985,https://root.cern,https://github.com/root-project/root/issues/14433,1,['test'],['testing']
Testability,"aits<char>, std::allocator<char> > const&, cling::CompilationOptions, cling::Value*, cling::Transaction**, unsigned long) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F36428: cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F45003: cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F468D4: cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6F2EF9F: cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) (in /home/vpadulan/Programs/rootproject/rootbuild/fix-tutorial-tmva-cnn-classification-testing/lib/libCling.so); ==292588== by 0x6C20B67: HandleInterpreterException(cling::MetaProcessor*, char const*, cling::Interpreter::CompilationResult&, cling::Value*) (TCling.cxx:2438); ==292588== by 0x6C215B6: TCling::ProcessLine(char const*, TInterpreter::EErrorCode*) (TCling.cxx:2582); ==292588== by 0x6C24E6E: TCling::ProcessLineSynch(char const*, TInterpreter::EErrorCode*) (TCling.cxx:3545); ==292588== by 0x4C06042: TApplication::ExecuteFile(char const*, int*, bool) (TApplication.cxx:1865); ==292588== by 0x4C0586B: TApplication::ProcessFile(char const*, int*, bool) (TApplication.cxx:1737); ==292588== by 0x4C05680: TApplication::ProcessLine(char const*, bool, int*) (TApplication.cxx:1710); ==292588== by 0x487A58F: TRint::ProcessLineNr(char const*, char const*, int*) (TRint.cxx:820); ==292588== by 0x4878CD2: TRint::Run(bool) (TRint.cxx:461); ==292588== by 0x401446: main (rmain.cxx:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14438:3177,test,testing,3177,https://root.cern,https://github.com/root-project/root/issues/14438,1,['test'],['testing']
Testability,"ake 3.1+; - Support for adding as a subdirectory, using from build directory, or installing; - Works inside of ROOT or standalone; - Support for CPack binary `make package`; - Options for MPI and OpenMP integrated with main ROOT build; - Support for macOS, Linux, and Windows; - Version captured from ROOT; - CTest support; - `make docs` support (CMake 3.8+ only); * No need for extra ""prepare"" shell scripts, everything is done cross-platform through CMake and CPack; - Files can be copied in to make redistributable source with `-Dminuit2-standalone=ON`; - `make package_source` on Unix creates `.tar.gz` and `.zip` files (non-binary CPack); - `make purge` can remove copied files; * Helpful `README.md` and `DEVELOP.md` files. ### To produce a source distribution:; Make sure you have CMake 3.1+ (ROOT requires 3.4.3+, so that's likely). Then, from `/math/minuit2/build` run:. ```bash; cmake .. -Dminuit2-standalone=ON; make package_source; make purge; ```. ### You can also build Minuit2 for testing (standalone option on or off) with:. ```; make; ```. ### And you can make a prebuilt binary package with:. ```; make package; ```. (Standard CPack option for different generators apply.). ### Maintenence. If new files are needed by Minuit2 due to additions to ROOT, they should be added to the source files lists in `/math/minuit2/src/Math/CMakeLists.txt` and `/math/minuit2/src/CMakeLists.txt` (depending on if it's a new Math or Minuit2 requirement). ### Windows; This works on Windows; and you can even then create binary installers for Windows trivially. (Though ""package_source"" does not seem to be supported on Windows). This is the procedure on Windows:. First, install Visual Studio 17, Git, CMake, and NSIS. Then from the `math/minuit2/build directory` of your ROOT checkout, run:. ```; ""C:\Program Files\CMake\bin\cmake.exe"" ..; ""C:\Program Files\CMake\bin\cmake.exe"" --build .; ""C:\Program Files\CMake\bin\cmake.exe"" --build . --target package; ```. This creates a `.exe` installer fil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1680:1243,test,testing,1243,https://root.cern,https://github.com/root-project/root/pull/1680,1,['test'],['testing']
Testability,"al integration builds (https://github.com/cms-sw/cmsdist/pull/6746/files ) but looks like pyROOT fails/hangs for some special dictionaries. . While building cmssw , we use https://github.com/cms-sw/cmssw/blob/master/FWCore/Utilities/scripts/edmCheckClassVersion to check for root dictionaries class versions. This works for most of our dictionaries e.g following two run fine ( https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_hlt.xml, https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_1.xml ); ```; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_hlt.xml; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_1.xml; ```; but it fails/hangs for https://github.com/cms-sw/cmssw/blob/master/DataFormats/TauReco/src/classes_def_2.xml; ```; > src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x src/DataFormats/TauReco/src/classes_def_2.xml; ```; Most of the times the above command just hangs with error https://muzaffar.web.cern.ch/root624/err1.log but once I was able to get this error https://muzaffar.web.cern.ch/root624/err.log . Can you please look in to it and see if this log helps? . In case you want to try it yourself then you go to cmsdev25 and do; ```; >cd /build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100; >cmsenv; >/build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100/src/FWCore/Utilities/scripts/edmCheckClassVersion -l libDataFormatsTauReco.so -x /build/muz/r624/w/tmp/BUILDROOT/ea8220342d406ab7dbc2d210a1e9351b/opt/cmssw/slc7_amd64_gcc900/cms/cmssw/CMSSW_11_3_ROOT624_X_2021-03-25-1100/src/DataFormats/TauReco/src/classes_def_2.xml; ```. FYI @mrodozov @makortel @Dr15Jones",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7718:1332,log,log,1332,https://root.cern,https://github.com/root-project/root/issues/7718,3,['log'],['log']
Testability,al-dataframe-df010_trivialDataSource-py ....................... Passed 3.14 sec; Start 1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py; 1078/1231 Test #1078: tutorial-dataframe-df008_createDataSetFromScratch-py ................ Passed 3.91 sec; Start 1081: tutorial-dataframe-df014_CSVDataSource-py; 1079/1231 Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Start 1083: tutorial-dataframe-df017_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Start 1084: tutorial-dataframe-df019_Cache-py; 1082/1231 Test #1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py .............. Passed 5.30 sec; Start 1085: tutorial-dataframe-df021_createTGraph-py; 1083/1231 Test #1082: tutorial-dataframe-df016_vecOps-py .................................. Passed 4.06 sec; Start 1086: tutorial-dataframe-df024_Display-py; 1084/1231 Test #1083: tutorial-dataframe-df017_vecOpsHEP-py ............................... Passed 3.68 sec; Start 1087: tutorial-dataframe-df026_AsNumpyArrays-py; 1085/1231 Test #1081: tutorial-dataframe-df014_CSVDataSource-py ........................... Passed 7.49 sec; Start 1090: tutorial-dataframe-df031_Stats-py; 1087/1231 Test #1085: tutorial-dataframe-df021_createTGraph-py ............................ Passed 3.08 sec; Start 1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py; 1088/1231 Test #1086: tutorial-dataframe-df024_Display-py ................................. Passed 4.99 sec; 1089/1231 Test #1084: tutorial-dataframe-df019_Cache-py ................................... Passed 6.22 sec; 1090/1231 Test #1090: tutorial-dataframe-df031_Stats-py ................................... Passed 3.39 sec; 1095/1231 Test #1087: tutorial-dataframe-df026_AsNumpyArrays-py ........................... Passed 6.89 sec; 1103/1231 Test #1091: tutorial-dataframe-df032_MakeNumpyDataFrame-py ........,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:12738,Test,Test,12738,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,all edges; e4555770c7 [tmva][sofie-gnn] Add support for LayerNormalization and registering additional functions; b6ac312508 [tmva][sofie-gnn] Test LHCb toy model with SOFIE-GNN; 5455f90c3a [tmva][sofie-gnn] Python in-memory parse function and tests; d925d6a805 [tmva][sofie-gnn] Introducing RModel_GraphIndependent; 2df806aa32 [tmva][sofie-gnn] Introducing RFunctions for SOFIE-GNN; 1ca9b4c240 [tmva][sofie-gnn] Introducing SOFIE-GNN; 6cb0d0a957 [TMVA] Don't use the same file name (`TMVA.root`) everywhere (#13576); 4fe2f6ef61 [pymva] Refactor TestRModelParserPyTorch to use RSofieReader; e53fcb7b6a [tmva][sofie] Fix formattting in RModel; f93775a9dc [tmva][sofie] Add options to append generated C++ code and weights; 4f0450b46e [tmva] fix bug in reshape operator when it is used as the first operator of the model; 8fa423de1a [TMVA/SOFIE] Save weights in ROOT binary files (#13423); 91d7dc9cee [tmva] use SetDirectory(nullptr); 34c4a497c5 [tmva] reduce usage of `Form` method; df8ab656e3 [tmvagui] avoid usage of Form function; 5bf591928a [tmva] avoid Form usage in tests; a18373ec99 [tmva] fix wrong Form usage in remaining classes; c251183d62 [tmva] reduce usage of Form; a50b03c9b7 [tmva] fix multiple places where Form is wrongly used twice is same call; 20fa3a3b4d [tmva] fix wrong Form usage is several next classes; 9eba38ba7a [tmva] fix wrong usage of Form in several classes; 9b3e9dc4e0 [tmva] replace Form by TString::Format in several classes; a6c9608215 [tmva] avoid Form usage in Classification.cxx; 50bd755c37 [tmva] fix Form usage in MethodTMlpANN; befd36fdb1 Fix yet another assertion failure on Windows; fb94e0b032 [tmva] Fix RTensor::ExpandDims(); 99378cfba9 Fix Lenght typos (#13281); 8786fa4392 Added cpp files for RBatchGenerator; 3f55b20888 feat: added tutorial links; c432106115 feat: include link for sofie onnx parser; cf5449bd63 fix: email id for communication; 4f8a5972df docs: Update SOFIE documentation; cdb4a81f87 Error function implemented successfully with the corr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13783:1840,Test,TestRModelParserPyTorch,1840,https://root.cern,https://github.com/root-project/root/pull/13783,2,"['Test', 'test']","['TestRModelParserPyTorch', 'tests']"
Testability,"allable=0x7faf4b960e80); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:127; #39 _PyObject_FastCall (nargs=1, args=0x7ffdb628f890, func=0x7faf4b960e80); at /data/hdd-4tb/projects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:147; ...; ```. Unfortunately all I could decipher from this is that things go south while accessing the `DataVector<xAOD::TauJet_v3>` type in Python. That access itself happens in a fairly complicated way itself, in this helper code:. https://gitlab.cern.ch/atlas/athena/-/blob/master/Control/xAODRootAccess/python/GenerateDVIterators.py. As before, I found that by explicitly accessing types ""in the right order"", I can work around the issue. (See: https://gitlab.cern.ch/atlas/athena/-/merge_requests/44843) But I'd really like to understand what the underlying issue actually is. Note that this problem only shows up in a debug build. In an optimised build the test in question runs just fine. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. The code should not encounter an assertion inside LLVM/Cling. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. Unfortunately this would be pretty involved to describe. :frowning: Especially the setup that I used with Cling compiled in Debug mode. So I'm rather just hoping for input on how I myself could debug this further. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; - ROOT 6.24/00; - `x86_64-centos7-gcc8-dbg`; - ROOT built using: https://gitlab.cern.ch/atlas/atlasexternals/-/tree/master/External/ROOT. ### Additional context",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:11431,test,test,11431,https://root.cern,https://github.com/root-project/root/issues/8578,1,['test'],['test']
Testability,"allocator<char> >)::'lambda'()::operator()() const (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::JITSymbol::getAddress() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::orc::LazyEmittingLayer<llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler> >::EmissionDeferredModule::find(llvm::StringRef, bool, llvm::orc::LegacyIRCompileLayer<cling::IncrementalJIT::RemovableObjectLinkingLayer, llvm::orc::SimpleCompiler>&)::'lambda'()::operator()() const (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] llvm::JITSymbol::getAddress() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] cling::IncrementalJIT::getSymbolAddress(std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > const&, bool) (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] cling::IncrementalExecutor::getPointerToGlobalFromJIT(llvm::StringRef) const (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] cling::Interpreter::compileFunction(llvm::StringRef, llvm::StringRef, bool, bool) (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] TClingCallFunc::make_wrapper() (no debug info); [/Users/sftnight/build/workspace/roottest-pullrequests-build/build/lib/libCling.6.27.01.so] TClingCallFunc::IFacePtr() (no debug info); ```. Currently, the interested tests are disabled in roottest https://github.com/root-project/roottest/pull/839 .; The PR https://github.com/root-project/root/pull/10050 wasn't enough to fix these tests, so further debugging is needed. . ### Expected behavior. Tests should pass on all Mac ARM platforms",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10061:4366,test,tests,4366,https://root.cern,https://github.com/root-project/root/issues/10061,3,"['Test', 'test']","['Tests', 'tests']"
Testability,"alue of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-rdf. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 491/1272 Test #431: gtest-tree-ntuple-v7-test-ntuple-rdf ................................***Failed 74.39 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from RNTuple; [ RUN ] RNTuple.RDF; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Error in <TFile::Init>: file test_ntuple_rdf.root has an incorrect header length (1677721600) or incorrect end of file length (-4176807177076801536); *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~; #### gtest-tree-ntuple-v7-test-ntuple-serialize. Endian issue: 256 = 0x0100, expected 0x0001 = 1.; ~~~; 457/1272 Test #432: gtest-tree-ntuple-v7-test-ntuple-serialize ..........................***Failed 0.24 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Te",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:10501,test,test,10501,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability,"ambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...); at /usr/include/c++/8/bits/invoke.h:95; #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674); at /usr/include/c++/8/thread:244; #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674); at /usr/include/c++/8/thread:253; #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670); at /usr/include/c++/8/thread:196; #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6; #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486; #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):; #0 0xb7fa1d61 in __kernel_vsyscall (); #1 0xb6ab449e in __GI___pthread_timedjoin_ex (threadid=2725792576, thread_return=0x0, abstime=0x0, block=true) at pthread_join_common.c:89; #2 0xb6ab4244 in __pthread_join (threadid=2725792576, thread_return=0x0) at pthread_join.c:24; #3 0xb69cf185 in std::thread::join() () from /lib/i386-linux-gnu/libstdc++.so.6; #4 0x0047e4d8 in TThreadedObject_GetNSlots_Test::TestBody (this=0x139bb90); at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:176; #5 0x004ba0ff in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (); #6 0x004aec42 in testing::Test::Run() [clone .part.608] (); #7 0x004af0ab in testing::TestInfo::Run() [clone .part.609] (); #8 0x004af2ce in testing::TestSuite::Run() [clone .part.610] (); #9 0x004b03cf in testing::internal::UnitTestImpl::RunAllTests() (); #10 0x004b0696 in testing::UnitTest::Run() (); #11 0x0047beb1 in main (); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5596:3038,Test,TestBody,3038,https://root.cern,https://github.com/root-project/root/pull/5596,18,"['Test', 'test']","['Test', 'TestBody', 'TestInfo', 'TestSuite', 'test', 'testTThreadedObject', 'testing']"
Testability,"ame build steps but different pytest version, ROOT project build success with pytest version 6.1.1, but SofieCompileModels_PyTorch.vcxproj fails to compile with pytest version 6.2.5, the error as belows. I have checked if pytest version is 6.1.1, there is no pymva folder generated after cmake commands, and for pytest version 6.2.5, pymva folder generated after cmake commands. Could you please help have a look at this issue? Thanks a lot!; ![image](https://user-images.githubusercontent.com/17844901/147636210-34c8102b-8380-4b92-828d-097a6af7829d.png). C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: The command ""setlocal [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: .\emitFromPyTorch [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: if %errorlevel% neq 0 goto :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmErr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9487:1199,test,test,1199,https://root.cern,https://github.com/root-project/root/issues/9487,1,['test'],['test']
Testability,ame-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.32 sec; Start 1076: tutorial-dataframe-df006_ranges-py; 1074/1231 Test #1072: tutorial-dataframe-df001_introduction-py ............................ Passed 7.77 sec; Start 1077: tutorial-dataframe-df007_snapshot-py; 1075/1231 Test #1075: tutorial-dataframe-df004_cutFlowReport-py ........................... Passed 5.88 sec; Start 1078: tutorial-dataframe-df008_createDataSetFromScratch-py; 1076/1231 Test #1073: tutorial-dataframe-df002_dataModel-py ............................... Passed 8.55 sec; Start 1079: tutorial-dataframe-df010_trivialDataSource-py; 1077/1231 Test #1079: tutorial-dataframe-df010_trivialDataSource-py ....................... Passed 3.14 sec; Start 1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py; 1078/1231 Test #1078: tutorial-dataframe-df008_createDataSetFromScratch-py ................ Passed 3.91 sec; Start 1081: tutorial-dataframe-df014_CSVDataSource-py; 1079/1231 Test #1076: tutorial-dataframe-df006_ranges-py .................................. Passed 7.30 sec; Start 1082: tutorial-dataframe-df016_vecOps-py; Start 1083: tutorial-dataframe-df017_vecOpsHEP-py; 1081/1231 Test #1077: tutorial-dataframe-df007_snapshot-py ................................ Passed 9.12 sec; Start 1084: tutorial-dataframe-df019_Cache-py; 1082/1231 Test #1080: tutorial-dataframe-df012_DefinesAndFiltersAsStrings-py .............. Passed 5.30 sec; Start 1085: tutorial-dataframe-df021_createTGraph-py; 1083/1231 Test #1082: tutorial-dataframe-df016_vecOps-py .................................. Passed 4.06 sec; Start 1086: tutorial-dat,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:11712,Test,Test,11712,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,ame-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1231 Test #448: tutorial-dataframe-df001_introduction ............................... Passed 13.89 sec; Start 455: tutorial-dataframe-df008_createDataSetFromScratch; 476/1231 Test #452: tutorial-dataframe-df005_fillAnyObject .............................. Passed 6.60 sec; Start 456: tutorial-dataframe-df009_FromScratchVSTTree; 477/1231 Test #453: tutorial-dataframe-df006_ranges ..................................... Passed 7.33 sec; Start 457: tutorial-dataframe-df010_trivialDataSource; 478/1231 Test #455: tutorial-dataframe-df008_createDataSetFromScratch ................... Passed 3.90 sec; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tre,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:7181,Test,Test,7181,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,ame-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dataframe-test-dataframe-take; 407/1231 Test #382: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataframe-test-dataframe-entrylist; 408/1231 Test #385: gtest-tree-dataframe-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-d,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:3977,test,test-dataframe-merge-results,3977,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-merge-results']"
Testability,"amework/Versions/3.11/Python] slot_tp_init (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] type_call (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] _PyObject_MakeTpCall (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] _PyEval_EvalFrameDefault (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] PyEval_EvalCode (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] pyrun_file (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] _PyRun_SimpleFileObject (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] _PyRun_AnyFileObject (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] pymain_run_file_obj (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] pymain_run_file (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] Py_RunMain (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] pymain_main (no debug info); [/Library/Frameworks/Python.framework/Versions/3.11/Python] Py_BytesMain (no debug info); [/usr/lib/dyld] start (no debug info); Traceback (most recent call last):; File ""/Users/austindestcroix/Desktop/school_holders/projects/sbc/CF4/codeProcess/testWriting.py"", line 140, in <module>; with TFile(""file1.root"", ""recreate"") as outfile:; ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^; File ""/Users/austindestcroix/packages/root_py311_v6_26.10/myInstall_p311/lib/ROOT/_pythonization/_tfile.py"", line 87, in _TFileConstructor; self._OriginalConstructor(*args); TypeError: none of the 2 overloaded methods succeeded. Full details:; TFile::TFile() =>; TypeError: takes at most 0 arguments (2 given); TFile::TFile(const char* fname, const char* option = """", const char* ftitle = """", int compress = ROOT::RCompressionSetting::EDefaults::kUseCompiledDefault) =>; SegmentationViolation: segfault in C++; program state was reset; `",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11823:3837,test,testWriting,3837,https://root.cern,https://github.com/root-project/root/issues/11823,1,['test'],['testWriting']
Testability,"anager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, const vector<string>& columnList, const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()); E ROOT::RDF::RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Snapshot(basic_string_view<char,char_traits<char> > treename, basic_string_view<char,char_traits<char> > filename, basic_string_view<char,char_traits<char> > columnNameRegexp = """", const ROOT::RDF::RSnapshotOptions& options = ROOT::RDF::RSnapshotOptions()) returned a result with an exception set. ak_array_in = <Array [[[1.1], [2.2]], [[3.3], ...]] type='2 * var * var * float64'>; ak_array_out = <Array [{x: [[1.1], [2.2]]}, {...}] type='2 * {x: var * var * float64}'>; data_frame = <cppyy.gbl.ROOT.RDF.RInterface<ROOT::Detail::RDF::RLoopManager,void> object at 0x7f857a496dc0>; filename = '/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0/test-listarray.root'; tmp_path = PosixPath('/private/var/folders/wr/rfy5xgb56ls2dygmfnhx35lc0000gn/T/pytest-of-yana/pytest-15/test_data_frame_vec_of_vec_of_0'). tests/test_1781-rdataframe-snapshot.py:53: SystemError; ```; while running the same code line by line in `Python` or in `lldb`:; ```python; >>> data_frame.Snapshot(""ListArray"", ""listarray.root"", (""x"",)); Error in <TStreamerInfo::Build>: awkward::ArrayView, discarding: long* ptrs_, no [dimension]. TStreamerInfo::Build:0: RuntimeWarning: awkward::ListArray_zKlKkVLNo: base class awkward::ArrayView has no streamer or dictionary it will not be saved; <cppyy.gbl.ROOT.RDF.RResultPtr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void> > object at 0x1dc7b5090>; ```; ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->; The first `TStreamerInfo::Build` error can be avoided by appending a commen",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11602:3336,test,test-listarray,3336,https://root.cern,https://github.com/root-project/root/issues/11602,1,['test'],['test-listarray']
Testability,"anager::Run"") at /builddir/build/BUILD/root-6.28.00/tree/dataframe/src/RDFUtils.cxx:357; #22 0x00007fffa326c338 in ROOT::Detail::RDF::RLoopManager::Jit (this=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:79; #23 0x00007fffa3276608 in ROOT::Detail::RDF::RLoopManager::Run (this=0x173fa4a90, jit=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/src/RLoopManager.cxx:826; #24 0x000000013a4e034c in ROOT::RDF::RResultPtr<double>::TriggerRun (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:360; #25 ROOT::RDF::RResultPtr<double>::Get (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:154; #26 ROOT::RDF::RResultPtr<double>::GetValue (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:196; #27 RooAbsDataHelper_MTConstruction_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/roofit/RDataFrameHelpers/test/testActionHelpers.cxx:66; #28 0x00007fffa3390cbc in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) () from /lib64/libgtest.so.1.8.0; #29 0x00007fffa3381374 in testing::Test::Run() () from /lib64/libgtest.so.1.8.0; #30 0x00007fffa3381578 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.8.0; #31 0x00007fffa33816b4 in testing::TestCase::Run() () from /lib64/libgtest.so.1.8.0; #32 0x00007fffa3381da8 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.8.0; #33 0x00007fffa3382004 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.8.0; #34 0x00007fffa3310988 in main () from /lib64/libgtest_main.so.1.8.0; #35 0x00007fffa0829f5c in generic_start_main.isra () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #36 0x00007fffa082a0f4 in __libc_start_main () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #37 0x0000000000000000 in ?? (); ================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:25114,test,test,25114,https://root.cern,https://github.com/root-project/root/issues/12372,2,['test'],"['test', 'testActionHelpers']"
Testability,and a test.; This PR includes also #3363 just to avoid conflicts,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3364:6,test,test,6,https://root.cern,https://github.com/root-project/root/pull/3364,1,['test'],['test']
Testability,"and assign it to the dataframe/df027_SQliteDependencyOverVersion.C, as a start. ## Checklist:. - [v] tested changes locally; - [v] updated the docs (if necessary). This PR fixes; - [ROOT-9705](https://its.cern.ch/jira/browse/ROOT-9705); - [ROOT-10539](https://its.cern.ch/jira/browse/ROOT-10539)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16328:101,test,tested,101,https://root.cern,https://github.com/root-project/root/pull/16328,1,['test'],['tested']
Testability,"and fitTo() to ModelConfig; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit interface; 3d01cd2e8f [RF] Remove deprecated RooAbsString; 059af6d55a [RF] Remove RooAbsRootFinder; bdc19e090e [RF] Get rid of RooScaledFunc; 88dbb6ad17 [RF] Make RooGenProdProj private; 94ee158ddc [RF] Remove deprecated RooCatType; d46e5fc087 [RF] Remove some unused class rules in roofitcore LinkDef.h; f78558eb0a [RF] Mark template specialization as inline; ca29ccf161 [RF] Some cleanup of public `roofitcore` classes; 9357c9842a [RF] Unify RooAbsSelfCachedPdf and RooAbsSelfCachedReal code; 2e2309327e [RF] Fix ambiguity errors in `CodeSquashContext::buildArg()` overloads; 05e993cf92 [RF] Avoid code duplication in `testRooFuncWrapper`; 47a5c001ea [RF] Add AD support for Roo[RealSumPdf, RealSumFunc, ConstraintSum].; 13479ab9cd [RF] Remove the old BatchMode code path inside RooNLLVar; 16497ee8c4 [RF] Add code generation support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12905:3662,test,testRooFuncWrapper,3662,https://root.cern,https://github.com/root-project/root/pull/12905,1,['test'],['testRooFuncWrapper']
Testability,and test the feature.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2919:4,test,test,4,https://root.cern,https://github.com/root-project/root/pull/2919,1,['test'],['test']
Testability,and unit test,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1159:9,test,test,9,https://root.cern,https://github.com/root-project/root/pull/1159,1,['test'],['test']
Testability,"ang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/inte",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:3283,test,test-products,3283,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,"ange_access.h:107:37: note: previous declaration is here; template<typename _Tp> const _Tp* end(const valarray<_Tp>&);; ^; input_line_1:1:10: fatal error: could not build module 'std'; #include <new>; ~~~~~~~~^; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /home/luowt/Apps/root/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:; In file included from <module-includes>:1:; /home/luowt/Apps/root/root_build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: fatal error:; could not build module 'std'; #include <string>; ~~~~~~~~^; /home/luowt/Apps/root/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error:; could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from input_line_3:1:; In file included from /usr/include/assert.h:35:; In file included from /usr/include/features.h:510:; /usr/include/x86_64-linux-gnu/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /home/luowt/Apps/root/root_build/include/Rtypes.h:23:; In file included from <module-includes>:1:; /home/luowt/Apps/root/root_build/include/RtypesCore.h:28:10: fatal error: could not build module 'std'; #include <cstddef> // size_t, NULL; ~~~~~~~~^; /home/luowt/Apps/root/root_build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /home/luowt/Apps/root/root_build/include/Rtypes.h:197:; In file included from <module-includes>:3:; /home/luowt/Apps/root/root_build/includ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14062:3362,assert,assert,3362,https://root.cern,https://github.com/root-project/root/issues/14062,1,['assert'],['assert']
Testability,aph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers .................................... Passed 3.82 sec; Start 471: tutorial-dataframe-df031_Stats; 492/1231 Test #468: tutorial-dataframe-df023_aggregate .................................. Passed 2.25 sec; 498/1231 Test #470: tutorial-dataframe-df025_RNode ...................................... Passed 2.80 sec; 502/1231 Test #464: tutorial-dataframe-df019_Cache ...................................... Passed 7.71 sec; 506/1231 Test #471: tutorial-dataframe-df031_Stats ...................................... Passed 3.82 sec; 507/1231 Test #469: tutorial-dataframe-df024_Display .................................... Passed 4.58 sec; Start 1071: tutorial-dataframe-df000_simple-py; Start 1072: tutorial-dataframe-df001_introduction-py; Start 1073: tutorial-dataframe-df002_dataModel-py; Start 1074: tutorial-dataframe-df003_profiles-py; 1072/1231 Test #1071: tutorial-dataframe-df000_simple-py .................................. Passed 2.85 sec; Start 1075: tutorial-dataframe-df004_cutFlowReport-py; 1073/1231 Test #1074: tutorial-dataframe-df003_profiles-py ................................ Passed 5.32 sec; Start 1076: tutorial-dataframe-df006_ranges-py; 1074/1231 Test #1072: tutorial-dataframe-df001_introduction-py ............................ Passed 7.77 sec; Start 1077: tutorial-dataframe-df007_snapshot-py; 1075/1231 Test #10,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:10364,Test,Test,10364,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"ar* classesHeaders[] = {; ! ""A"", ""A.h"", ""@"",; ! ""B"", ""B.h"", ""@"",; nullptr; };; ```. and indeed in practice the order of operation are as follow: (macro.cc contains a `#include ""A.h""`):; * Process the `A.h` and then start declaring class `A`:; * While declaring `A`, process the constructor (of anything involving `A` itself in `A` declaration and call ` TCling::AutoParse`; * ` TCling::AutoParse` recognizes `A` for the dictionary's `classesHeaders`; * ` TCling::AutoParse` proceeed to ask for the `payloadCode` to be processed/included (with the 'patch / fix / reversal' this is replaced by `A.h`), this `payloadCode` consist of:; ```; #include ""A.h""; #include ""B.h""; ```; * Thanks to the code guard `A.h` is skipped (well anyway it is actually being processed by the outer code !!); * `B.h` is being included is reached:; ```; class B : public A; ```; which correctly complains that `A` is not yet fully declared .... The commit log corresponding to the change is explicitly referring to this change:; ```; Associate to autoParse entries only the payload ([ROOT-6321](https://sft.its.cern.ch/jira/browse/ROOT-6321)); ; de facto implementing lazy payload parsing instead of header; parsing on demand.; ```. **It is not clear why ` TCling::AutoParse` is called with a symbol that is ""__being__"" declared.**. A work around (why we don't usually see this issue) is to generate a rootmap file (generating the c++ module should also in principle):; ```; diff Makefile.orig Makefile; 25c25; < rootcint -f ${DICT} -c ${DICTHDRS}; ---; > rootcint -rml=A -f ${DICT} -c ${DICTHDRS}; ```. Full stack trace at the starting point of the failing recursive parsing:. ```; #0 TCling::AutoParse (this=0x4c1820, cls=0x7fffffff5670 ""A"") at /local2/pcanal/cint_working/rootcling/root/core/metacling/src/TCling.cxx:6449; #1 0x00007fffea9724aa in TCling__AutoParseCallback (className=0x7fffffff5670 ""A"") at /local2/pcanal/cint_working/rootcling/root/core/metacling/src/TCling.cxx:628; #2 0x00007fffeab15723 in TClingCallba",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13034:3750,log,log,3750,https://root.cern,https://github.com/root-project/root/issues/13034,1,['log'],['log']
Testability,"arning: The value of the smallest subnormal for <class 'numpy.float32'> type is zero.; return self._float_to_str(self.smallest_subnormal); /home/pcanal/.local/lib/python3.9/site-packages/numpy/core/getlimits.py:549: UserWarning: The value of the smallest subnormal for <class 'numpy.float64'> type is zero.; setattr(self, word, getattr(machar, word).flat[0]); /home/pcanal/.local/lib/python3.9/site-packages/numpy/core/getlimits.py:89: UserWarning: The value of the smallest subnormal for <class 'numpy.float64'> type is zero.; return self._float_to_str(self.smallest_subnormal); 2024-09-24 20:01:26.401521: F external/local_tsl/tsl/platform/default/env.cc:74] Check failed: ret == 0 (11 vs. 0)Thread tf_numa_-1_Eigen creation via pthread_create() failed.; [ERROR] Failed to generate model using python; CMake Error at /home/pcanal/root_working/code/quick-devel/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1. <end of output>; Test time = 54.61 sec; ----------------------------------------------------------; Test Failed.; ""PyMVA-Keras-Classification"" end time: Sep 24 20:02 UTC; ""PyMVA-Keras-Classification"" time elapsed: 00:00:54; ```. Other errors:. ```; 14323: system_error: Resource temporarily unavailable; 614356:/bin/sh: fork: retry: Resource temporarily unavailable; 614357:/bin/sh: fork: retry: Resource temporarily unavailable; 614358:/bin/sh: fork: retry: Resource temporarily unavailable; 614359:/bin/sh: fork: retry: Resource temporarily unavailable; 614360:/bin/sh: fork: Resource temporarily unavailable; 614444:/bin/sh: fork: retry: Resource temporarily unavailable; 614445:/bin/sh: fork: retry: Resource temporarily unavailable; 614446:/bin/sh: fork: retry: Resource temporarily unavailable; 614447:/bin/sh: fork: retry: Resource temporarily unavailable; 616571:LLVM ERROR: pthread_create failed: Resource temporarily unavailable; 616573:sh: fork: retry: Resource temporarily unavailable; 616574:sh: fork: retry: Resource temporarily unavailable; 616575:sh: fork:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16552:3854,Test,Test,3854,https://root.cern,https://github.com/root-project/root/issues/16552,1,['Test'],['Test']
Testability,"arrow/compute/test_util.h has been removed from recent versions,; but arrow/testing/gtest_util.h contains what we need and is present; both in v0.15 and v0.17.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6132:76,test,testing,76,https://root.cern,https://github.com/root-project/root/pull/6132,4,['test'],['testing']
Testability,"arser.cpp:118; #25 0x00007fffa2ae4044 in cling::MetaProcessor::process (this=0x11f260fc0, input_line=..., compRes=; 0x7fffff15750c: cling::Interpreter::kSuccess, result=0x7fffff157520, disableValuePrinting=<optimized out>) at /usr/include/c++/8/bits/unique_ptr.h:345; #26 0x00007fffa282b4b0 in HandleInterpreterException (metaProcessor=0x11f260fc0, input_line=0x11efcdaa0 "".X /builddir/build/BUILD/root-6.28.00/tutorials/roofit/rf104_classfactory.C"", compRes=; 0x7fffff15750c: cling::Interpreter::kSuccess, result=result; entry=0x7fffff157520) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ADT/StringRef.h:86; ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running a compiles unit test (gtest):. ~~~; 314/1192 Test #204: gtest-roofit-RDataFrameHelpers-test-testActionHelpers ...............***Failed 111.03 sec; Running main() from gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 2 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 2 tests from RooAbsDataHelper; [ RUN ] RooAbsDataHelper.MTConstruction; *** Break *** segmentation violation; ===========================================================; There was a crash (#5 0x00007fffa13ac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fffa08f2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fffa085a38c in do_system () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #2 0x00007fffa13a9044 in TUnixSystem::Exec (shellcmd=<optimized out>, this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:18687,Test,Test,18687,https://root.cern,https://github.com/root-project/root/issues/12372,1,['Test'],['Test']
Testability,"articles = model->MakeCollection(""particles"", std::move(particleModel));. auto writer = RNTupleWriter::Recreate(std::move(model), ""events"", ""collection_entry.root"");; auto entry = writer->CreateEntry();. *energy = 1.0;; particles->Fill();; writer->Fill(*entry);; }. void collection_entry() {; write();. auto reader = RNTupleReader::Open(""events"", ""collection_entry.root"");; reader->Show(0);; }. int main() {; collection_entry();; return 0;; }; ```. </details>. This doesn't work right now, even for a single entry as in the code example above; when opening the ntuple, the code crashes:; ```; terminate called after throwing an instance of 'std::bad_alloc'; what(): std::bad_alloc; Aborted (core dumped); ```. This is because `RNTupleModel::CreateEntry()` calls; https://github.com/root-project/root/blob/d52f98f56341edaa43bf03c16d218176afc5a17b/tree/ntuple/v7/src/RNTupleModel.cxx#L363-L365; for all top-level field. Conceptually it's possible to fix by applying the same logic as `RNTupleModel::MakeCollection`, something like; ```diff; diff --git a/tree/ntuple/v7/src/RNTupleModel.cxx b/tree/ntuple/v7/src/RNTupleModel.cxx; index c652608bf1..ed02338e2b 100644; --- a/tree/ntuple/v7/src/RNTupleModel.cxx; +++ b/tree/ntuple/v7/src/RNTupleModel.cxx; @@ -347,7 +347,11 @@ std::unique_ptr<ROOT::Experimental::REntry> ROOT::Experimental::RNTupleModel::Cr; ; auto entry = std::unique_ptr<REntry>(new REntry(fModelId));; for (const auto &f : fFieldZero->GetSubFields()) {; - entry->AddValue(f->CreateValue());; + if (auto *collectionField = dynamic_cast<RCollectionField *>(f)) {; + entry->AddValue(f->BindValue(std::shared_ptr<void>(collectionField->fCollectionWriter->GetOffsetPtr(), [](void *) {})));; + } else {; + entry->AddValue(f->CreateValue());; + }; }; return entry;; }; ```; This makes the example work with a single non-default `REntry`, but highlights another problem: There is a 1:1 association of the `RCollectionNTupleWriter` to the `RCollectionField`, which prevents multiple `REntry`'s fr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14642:2625,log,logic,2625,https://root.cern,https://github.com/root-project/root/issues/14642,1,['log'],['logic']
Testability,as is the case with function GetReadStatus. This prevents the crash on line 35 (stack trace by @amadio on https://its.cern.ch/jira/browse/ROOT-11006):. # This Pull request:. ## Changes or fixes:. The test for this PR is the same as in https://github.com/root-project/root/pull/15317/files. ## Checklist:. - [x] tested changes locally; - [x] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15324:200,test,test,200,https://root.cern,https://github.com/root-project/root/pull/15324,2,['test'],"['test', 'tested']"
Testability,"as merged, one can rewrite the Romberg integrator to use batch evaluations. It turned out that the old integrator has a bug: It sometimes stops too early. Here's the performance of different integrators as extracted from tests that come via this PR. The numbers are the relative deviation from the analytic solution:; ```; Integrating log(a*x), relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	0.0016594	0.00161012	0.00193414	0.00225071	0.0168282	t=0.04; 	new:	0.000505525	0.00049051	0.000589222	0.000685661	0.0168282	t=0.03; 	ROOT:	3.45732e-08	3.36752e-08	4.03318e-08	4.62674e-08	0.0168282	t=0.14; Integrating log(a*x), relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	2.45769e-05	2.45769e-05	2.4577e-05	2.4577e-05	2.4577e-05	t=0.19; 	new:	3.25114e-07	3.25114e-07	3.25115e-07	3.25115e-07	2.4577e-05	t=0.41; 	ROOT:	7.94638e-14	7.95337e-14	7.9692e-14	7.98497e-14	2.4577e-05	t=0.3; Old integrator reached poor precision: 2.45769e-05 +/- 4.91464e-11 instead of 1e-06; Integrating log(a*x), relEps = 1e-08; 	 	mean 	median 	q95 	q99 	max; 	old:	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	1.62946e-08	t=1.26; 	new:	3.98296e-10	3.98296e-10	3.98297e-10	3.98297e-10	1.62946e-08	t=1.48; 	ROOT:	7.94604e-14	7.95337e-14	7.96915e-14	7.98493e-14	1.62946e-08	t=0.38; [ OK ] Roo1DIntegrator.ConvergenceSettings_log (4402 ms); [ RUN ] Roo1DIntegrator.ConvergenceSettings_pol4; Integrating Polynomial 4th order, relEps = 0.001; 	 	mean 	median 	q95 	q99 	max; 	old:	3.01835e-16	1.45346e-16	5.65891e-16	2.22915e-15	1.15949e-13	t=0.04; 	new:	3.3408e-16	1.84038e-16	6.31068e-16	2.24297e-15	1.15949e-13	t=0.05; 	ROOT:	3.09356e-16	1.56283e-16	5.63307e-16	2.02418e-15	1.15949e-13	t=0.05; Integrating Polynomial 4th order, relEps = 1e-06; 	 	mean 	median 	q95 	q99 	max; 	old:	1.40432e-16	2.12767e-16	4.25546e-16	4.25569e-16	6.38354e-16	t=0.05; 	new:	1.77284e-16	2.12771e-16	4.25564e-16	6.38325e-16	6.38354e-16	t=0.04; 	ROOT:	1.44538e-16	2.12768e-16	4.25551e-16	4.25569e-16	6.38354e-16	t=0.06; Integrating Pol",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6632:1018,log,log,1018,https://root.cern,https://github.com/root-project/root/pull/6632,1,['log'],['log']
Testability,"as per request by Peter Hristov, ALICE. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13716:105,test,tested,105,https://root.cern,https://github.com/root-project/root/pull/13716,1,['test'],['tested']
Testability,"as support for many data format - not least JSON. . The attached class `TJSON` allows for this in a relatively straight forward manner. For example, one can do . ```c++; TJSON null;; TJSON b(true);; TJSON s(""RawString"");; TJSON s2(std::string(""C++String""));; TJSON i(42);; TJSON f(3.14);; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();; ```; for null, boolean, string, numbers (int and float), arrays or objects (associative container). . A more complex object can be created like . ```c++ ; TJSON o2 = std::map<std::string,TJSON>{; {""key1"",""value""},; {""key2"",true},; {""key3"",; {""key4"", TJSON::Array(""This"",""is"",""an"",""array""),; ""key5"",; {""boolean"", true}; }; }; };; ```. and elements are accessed via `operator[]` . ```c++; assert o2[""key1""] == ""value"";; assert o2[""key3""][""key4""][1] == ""is""; ```. One can loop over arrays or objects via `TJSON::ArrayRange` or `TJSON::ObjectRange` respectively. . ```c++; TJSON a = TJSON::Array();; TJSON o = TJSON::Object();. for (size_t i = 0; i < 4; i++); a[i] = ""Test""+std::to_string(i);. o[""key0""] = ""value1"";; o[""key1""] = a;; o[""key2""] = 123;. std::cout << ""Array: "" << std::endl;; for (auto& e : a.ArrayRange()); std::cout << e << std::endl;. std::cout << ""Object: "" << std::endl;; for (auto& kv : o.ObjectRange()); std::cout << ""o["" << kv.first << ""] = "" << kv.second << std::endl;; ```. JSON can be read and written to streams . ```c++; std::cout << ""=== Loading ==="" << std::endl;; std::string s(""{\""key1\"":\""string\"",""; 		"" \""key2\"": true,""; 		"" \""key3\"": 1234,""; 		"" \""key4\"":null}"");. std::stringstream str(s);. TJSON j;; str >> j;; std::cout << j << std::endl;; ; TJSON j2 = TJSON::Load(s);; std::cout << j2 << std::endl;; ```. I attach `TJSON.h` and `TJSON.cxx` as well as a script with examples `Example.C`. Note, objects of the class are clearly not meant to by stored in ROOT files and thus there is no call to the `ClassImp` macro. . . Feel free to incorporate the code as you see fit. . Yours, . Christian; [TJSON.zip](https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6889:1471,Test,Test,1471,https://root.cern,https://github.com/root-project/root/issues/6889,1,['Test'],['Test']
Testability,as well as their tests.,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1736:17,test,tests,17,https://root.cern,https://github.com/root-project/root/pull/1736,1,['test'],['tests']
Testability,"as-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root"", dirptr=0x0); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/base/src/TSystem.cxx:780; #6 0x00007ffff6864ec4 in TUnixSystem::IsPathLocal (this=0x7ffff2c38000, ; path=0x7fffb0d42060 ""root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root""); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/core/unix/src/TUnixSystem.cxx:1605; #7 0x00007ffff6e1fd33 in TFile::GetType (; name=0x7fffb0d42060 ""root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root"", option=0x7fffffff15b9 """", prefix=0x7fffffff1460); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/io/io/src/TFile.cxx:4685; #8 0x00007ffff6e1db61 in TFile::Open (; url=0x7fffb0d418e0 ""root://eoscms.cern.ch//eos/cms/store/data/Run2018A/ZeroBias/ALCARECO/SiStripCalMinBias-12Nov2019_UL2018-v1/260000/0F90F012-3C97-344E-8E2F-F459A798FA74.root"", options=0x7fffac8d86f9 """", ftitle=0x7fffac8d86f9 """", compress=101, netopt=0); at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_amd64_gcc900/lcg/root/6.22.08-1fec05f50351c1988c4bf604c7ec21c3/root-6.22.08/io/io/src/TFile.cxx:4065; #9 0x00007fffac890f2d in edm::InputFile::InputFile(char const*, char const*, edm::InputType) (); from /build/mrodozov/xrootd/local_install/CMSSW_12_0_X_2021-04-26-1100/lib/slc7_amd64_gcc900/pluginIOPoolInput.so; #10 0x00007fffac8cd35d in edm::RootInputFileSequence::initTheFile(bool, bool, edm::InputSource*, char const*, edm::InputType) (); from /build/mrodozov/xrootd/loc",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8008:3509,test,tests,3509,https://root.cern,https://github.com/root-project/root/issues/8008,2,['test'],"['testBuildDir', 'tests']"
Testability,"ase format version: RC 1; [ OK ] RNTuple.SerializeFooter (0 ms); [----------] 14 tests from RNTuple (190 ms total); [----------] Global test environment tear-down; [==========] 14 tests from 1 test suite ran. (190 ms total); [ PASSED ] 12 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.SerializeEnvelope; [ FAILED ] RNTuple.SerializeLocator; 2 FAILED TESTS; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-types. Endian issue:. $ printf '%x\n%x\n' 180388626432 42; 2a00000000; 2a; ~~~; 465/1272 Test #433: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 5.68 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNTuple.TypeName; [ OK ] RNTuple.TypeName (316 ms); [ RUN ] RNTuple.CreateField; [ OK ] RNTuple.CreateField (0 ms); [ RUN ] RNTuple.ArrayField; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.ArrayField (23 ms); [ RUN ] RNTuple.StdPair; Warning in ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:15679,test,tests,15679,https://root.cern,https://github.com/root-project/root/issues/12426,2,['test'],"['test', 'tests']"
Testability,"ash.; This is the entire stack trace of all threads:; ===========================================================; gdb.printing.register_pretty_printer(gdb.current_objfile(),; #0 0x00007fd0a354d46c in __libc_waitpid (pid=19301, stat_loc=stat_loc; entry=0x7fffd00a2ce0, options=options; entry=0) at ../sysdeps/unix/sysv/linux/waitpid.c:31; #1 0x00007fd0a34caf62 in do_system (line=<optimized out>) at ../sysdeps/posix/system.c:148; #2 0x00007fd0a66ce5dc in TUnixSystem::StackTrace (this=0x1a0b980) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:2408; #3 0x00007fd0a66d106a in TUnixSystem::DispatchSignals (this=0x1a0b980, sig=kSigSegmentationViolation) at /usr/src/debug/root-6.22.02/core/unix/src/TUnixSystem.cxx:3646; #4 <signal handler called>; #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171; #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fd0a58b3774 in TPad::PaintLine (this=0x238b1d0, x1=<optimized out>, y1=<optimized out>, x2=<optimized out>, y2=<optimized out>) at /usr/src/debug/root-6.22.02/graf2d/gpad/src/TPad.cxx:4171; #6 0x0000000000400b7c in main (argc=<optimized out>, argv=<optimized out>) at test/pad3.cxx:11; ===========================================================; ```. ## Expected behavior; No crash. ## To Reproduce; Code. ```; #include <TCanvas.h>; #includ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6446:1203,test,test,1203,https://root.cern,https://github.com/root-project/root/issues/6446,1,['test'],['test']
Testability,asource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyunittests-dataframe-merge-results ................................. Passed 4.48 sec; 446/1231 Test #376: gtest-tree-dataframe-test-dataframe-simple .......................... Passed 38.57 sec; 447/1231 Test #399: pyunittests-dataframe-cache ......................................... Passed 10.50 sec; Start 447: tutorial-dataframe-df000_simple; Start 448: tutorial-dataframe-df001_introduction; Start 449: tutorial-dataframe-df002_dataModel; 470/1231 Test #447: tutorial-dataframe-df000_simple ..................................... Passed 2.85 sec; Start 450: tutorial-dataframe-df003_profiles; Start 451: tutorial-dataframe-df004_cutFlowReport; 472/1231 Test #450: tutorial-dataframe-df003_profiles ................................... Passed 5.31 sec; Start 452: tutorial-dataframe-df005_fillAnyObject; 473/1231 Test #449: tutorial-dataframe-df002_dataModel .................................. Passed 9.46 sec; Start 453: tutorial-dataframe-df006_ranges; 474/1231 Test #451: tutorial-dataframe-df004_cutFlowReport .............................. Passed 6.28 sec; Start 454: tutorial-dataframe-df007_snapshot; 475/1231 Test #448: tutorial-dataframe-df001_introduction ............................... Passed 13.89 sec,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:6570,Test,Test,6570,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"ass, fqn); File ""/cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_pythonization/_stl_vector.py"", line 37, in pythonize_stl_vector ; if klass.value_type == 'char':; AttributeError: <class cppyy.gbl.std.vector<const char*> at 0x78c6370> has no attribute 'value_type'. Full details:; type object 'vector<const char*>' has no attribute 'value_type'; 'std::vector<const char*>::value_type' is not a known C++ class; 'value_type' is not a known C++ template; 'value_type' is not a known C++ enum; ---------------------------------------------------------------------------; AttributeError Traceback (most recent call last); <ipython-input-4-9dea63bfe1b1> in <module>; ----> 1 ROOT.test. /cvmfs/sft.cern.ch/lcg/views/LCG_102rc1/x86_64-centos7-gcc11-opt/lib/ROOT/_facade.py in _fallback_getattr(self, name); 193 if res:; 194 return res; --> 195 raise AttributeError(""Failed to get attribute {} from ROOT"".format(name)); 196; 197 def _finalSetup(self):. AttributeError: Failed to get attribute test from ROOT; ```. Creating the object directly from python does not work either:; ```; In [5]: t = ROOT.std.vector[""const char*""]([""hello""]); ---------------------------------------------------------------------------; TypeError Traceback (most recent call last); <ipython-input-5-fac447a0dff2> in <module>; ----> 1 t = ROOT.std.vector[""const char*""]([""hello""]). TypeError: none of the 2 overloaded methods succeeded. Full details:; void std::vector<const char*>::push_back(const char*&& __x) =>; TypeError: could not convert argument 1; void std::vector<const char*>::push_back(const char*const& __x) =>; TypeError: could not convert argument 1; ```. ### Expected behavior. In ROOT 6.24, I can get a reference to the object:; ```; In [1]: import ROOT. In [2]: ROOT.gInterpreter.Declare('std::vector<const char*> test = {""hello""};'); Out[2]: True. In [3]: ROOT.test; Out[3]: <cppyy.gbl.std.vector<const char*> object at 0x7f2c7fa19020>. In [4]: ROOT.test[0]; Out[4]: <cppyy.LowLevelView ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11581:1673,test,test,1673,https://root.cern,https://github.com/root-project/root/issues/11581,1,['test'],['test']
Testability,"aster (commit d4d1df86b07886d56c4bd1372590d0a62c3987c0) branch changes in cmssw. Though root itself builds fine in both cases but we get CMSSW build errors [a]. Note that we did not see such errors with ROOT 6.28-patches commit a13590901c or ROOT maser commit f499987. . [a]; ```; @@@@ Running edmWriteConfigs for SimG4CoreSaveSimTrackAction. *** Break *** segmentation violation. ===========================================================; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; #0 0x0000152ecd0815db in waitpid () from /lib64/libc.so.6; #1 0x0000152eccfe3ce7 in do_system () from /lib64/libc.so.6; #2 0x0000152ece6e73e2 in TUnixSystem::Exec (this=0x234e8c0, shellcmd=0x51d8ad0 ""/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/etc/gdb-backtrace.sh 1509407 1>&2"") at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:2104; #3 0x0000152ece6e7c83 in TUnixSystem::StackTrace (this=0x234e8c0) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:2395; #4 0x0000152ece6eb6be in TUnixSystem::DispatchSignals (this=0x234e8c0, sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3615; #5 0x0000152ece6e35da in SigHandler (sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:395; #6 0x0000152ece6eb5c1 in sighandler (sig=11) at /data/cmsbld/jenkins",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:1167,test,tests,1167,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,"at needs to be changed with respect to the default one. This makes easier the maintenance, as you do not need to constantly update the Doxyfile when a new doxygen version arises, and prevents warnings when running in older doxygen versions. This will hopefully contribute to next point:; - [ ] https://github.com/root-project/root/issues/9953 in combination with https://github.com/ammaraskar/gcc-problem-matcher; - [ ] Allow in the future for automatic meta-documentation of the CMake flag system. See https://github.com/root-project/root/issues/8999; - [x] Potentially add a flag in the main ROOT CMakeLists.txt, to enable the building of the documentation via a normal ""add_subdirectory()"", so that one does not need to build as a separate process.; - [x] Make the doxygen documentation thread-safe; - [x] Don't let doxygen search for ""input"" files in the output directory (e.g. it looks now for Mathjax output files that one just ""generated""). ## Checklist:. - [x] tested changes locally; - [ ] We would need to update https://github.com/root-project/web/blob/main/for_developers/doxygen/index.md; - [x] Update rootspi scripts to build docu in CI accordingly; - [ ] tutorial generation does not work yet as ""out of source"". To-do...; - [x] require min doxygen version 1.9.4; - [ ] pre-check that output directory is empty ?; - [ ] if GVIZ not found, disable dot; - [ ] Stamp file generation to only recompile when changes; - [x] Remove unneeded unnecessary files Images.dat etc ? (or prevent that they appear in root source); - [x] Make filter.cxx threadsafe but giving unique names to ImageSizes.dat .root etc; - [x] set NUM_PROC_THREADS; - [x] listLibs pass ROOT_CMD as variable; - [x] Understand why libs.C does not find classes such as TBrowserTimer in libCore.so; - [x] check why there are stdout.dat and NumberOfImages not being removed; - [ ] Consider enabling https://www.doxygen.nl/manual/config.html#cfg_clang_assisted_parsing; - [ ] Fix strip_from_path in root-tag https://github.com/r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/15160:2046,test,tested,2046,https://root.cern,https://github.com/root-project/root/pull/15160,1,['test'],['tested']
Testability,ataframe-df009_FromScratchVSTTree; 477/1231 Test #453: tutorial-dataframe-df006_ranges ..................................... Passed 7.33 sec; Start 457: tutorial-dataframe-df010_trivialDataSource; 478/1231 Test #455: tutorial-dataframe-df008_createDataSetFromScratch ................... Passed 3.90 sec; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tree-dataframe-test-dataframe-concurrency ..................... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutorial-dataframe-df009_FromScratchVSTTree ......................... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454: tutorial-dataframe-df007_snapshot ................................... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-dataframe-df010_trivialDataSource .......................... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ................. Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ...........................,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:8774,Test,Test,8774,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,ataframe-friends ......................... Passed 10.87 sec; Start 367: gtest-tree-dataframe-test-dataframe-histomodels; 390/1231 Test #366: gtest-tree-dataframe-test-dataframe-callbacks ....................... Passed 8.60 sec; Start 368: gtest-tree-dataframe-test-dataframe-interface; Start 369: gtest-tree-dataframe-test-dataframe-nodes; 392/1231 Test #369: gtest-tree-dataframe-test-dataframe-nodes ........................... Passed 2.13 sec; Start 370: gtest-tree-dataframe-test-dataframe-regression; 393/1231 Test #367: gtest-tree-dataframe-test-dataframe-histomodels ..................... Passed 19.30 sec; Start 371: gtest-tree-dataframe-test-dataframe-utils; 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400/1231 Test #368: gtest-tree-dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/123,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:1947,test,test-dataframe-splitcoll-arrayview,1947,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-report', 'test-dataframe-splitcoll-arrayview']"
Testability,ataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dataframe-test-dataframe-take; 407/1231 Test #382: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataframe-test-dataframe-entrylist; 408/1231 Test #385: gtest-tree-dataframe-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:3812,test,test-dataframe-entrylist,3812,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-entrylist']"
Testability,"ath-exampleFunction-py (Failed); Errors while running CTest; ```; With the proposed change in #10303 to not fail on the warning about RooNaNPacker not being implemented for big endian, the list of failures is shorter:; ```; 99% tests passed, 17 tests failed out of 1232; Label Time Summary:; longtest = 540.69 sec*proc (27 tests); multithreaded = 678.83 sec*proc (2 tests); python_runtime_deps = 60.39 sec*proc (11 tests); tutorial = 3802.05 sec*proc (786 tests); Total Test time (real) = 2732.59 sec; The following tests FAILED:; 	 16 - pyunittests-pyroot-pyz-stl-vector (Failed); 	 57 - pyunittests-pyroot-pyz-rtensor (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df006_ranges-py (Failed); 	1106 - tutorial-math-exampleFunction-py (Failed); Errors while running CTest; ```; For both lists the proposed change in #10308 was applied. ### Expected behavior. Ideally there should be no test failures. ### To Reproduce. Steps to reproduce the behaviour:; 1. build root for s390x.; 2. run the unit tests. ### Setup; 1. ROOT version 6.26.02.; 2. Fedora rawhide for s390x. The list of failures is similar for other Fedora and EPEL releases. ; 3. Build from source (during package build for Fedora/EPEL). ### Additional context. [The log](https://github.com/root-project/root/files/8501663/s390x.txt)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:2905,test,tests,2905,https://root.cern,https://github.com/root-project/root/issues/10409,16,"['log', 'test']","['log', 'test', 'test-datasource-ntuple', 'test-ntuple-basics', 'test-ntuple-extended', 'test-ntuple-merger', 'test-ntuple-minifile', 'test-ntuple-serialize', 'test-stresshistofit', 'test-stresshistofit-interpreted', 'test-stresshistogram', 'test-stresshistogram-interpreted', 'test-testNaNPacker', 'test-testRooProdPdf', 'tests']"
Testability,"atic schema evolution accounts for differences. The problem appears when two initial files contain objects of the same class (MyClass in the example below) of version A while the Consumer uses higher class version B because:. the 1st updated file happens to have StreamerInfo of its original object together with the StreamerInfo of the added metadata (as shown by gFile->GetStreamerInfoList()->Print() ); the 2nd updated file has StreamerInfo only for added metadata class, reading the object from these files leads to an error.; I am wondering if there is a way to enforce the presence of the original StreamerInfo in the updated file. The reproducer is attached:. tar xvzf tst.tar.gz ; cd tst; chmod +x runTest.sh;; ./runTest.sh; It produces (suppressing ACLIC output):. Creating library for MyClass version 1; Storing object of class version 1 in two identical files; Creating library for MyClass version 2; Updating files containing object of old class version 1 (by writing metadata object of unrelated class OtherClass). Reading 1st (updated) file; Processing testFile.C(""outv1.root"")...; printing GetStreamerInfoList()->Print() for outv1.root; Collection name='TList', class='TList', size=2; OBJ: TStreamerInfo	MyClass	; OBJ: TStreamerInfo	OtherClass	. Reading 2nd (updated) file; Processing testFile.C(""outv2.root"")...; Error in <TBufferFile::CheckByteCount>: object of class MyClass read too many bytes: 12 instead of 6; Warning in <TBufferFile::CheckByteCount>: MyClass::Streamer() not in sync with data on file outv2.root, fix Streamer(); printing GetStreamerInfoList()->Print() for outv2.root; Collection name='TList', class='TList', size=1; OBJ: TStreamerInfo	OtherClass	; ```. ### Reproducer. Unzip attached file [bug.zip](https://github.com/root-project/root/files/13544360/bug.zip); and run the shell script`runTest.sh`. ### ROOT version. 6.28/04; gcc (GCC) 12.2.0. ### Installation method. build from source. ### Operating system. MacOS, Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14171:1895,test,testFile,1895,https://root.cern,https://github.com/root-project/root/issues/14171,2,['test'],['testFile']
Testability,"ation flag). ### Reproducer. ```; gEnv->GetValue(""TFile.v630forwardCompatibility"", 0). TFile file1 = TFile(""file1.root"",""CREATE""); file1.TestBit(TFile::k630forwardCompatibility); file1.Close(). TFile file2 = TFile(""file1.root"",""READ""); file2.TestBit(TFile::k630forwardCompatibility); file2.Close(). TFile* file3 = TFile::Open(""file3.root"",""CREATE""); file3->TestBit(TFile::k630forwardCompatibility); file3->Close(). TFile* file4 = TFile::Open(""file3.root"",""READ""); file4->TestBit(TFile::k630forwardCompatibility); file4->Close(); ```; produces; ```; $ root -l ; root [0] gEnv->GetValue(""TFile.v630forwardCompatibility"", 0); (int) 1; root [1] ; root [1] TFile file1 = TFile(""file1.root"",""CREATE""); (TFile &) Name: file1.root Title: ; root [2] file1.TestBit(TFile::k630forwardCompatibility); (bool) false; root [3] file1.Close(); root [4] ; root [4] TFile file2 = TFile(""file1.root"",""READ""); (TFile &) Name: file1.root Title: ; root [5] file2.TestBit(TFile::k630forwardCompatibility); (bool) true; root [6] file2.Close(); root [7] ; root [7] TFile* file3 = TFile::Open(""file3.root"",""CREATE""); (TFile *) 0x5650bd7edba0; root [8] file3->TestBit(TFile::k630forwardCompatibility); (bool) false; root [9] file3->Close(); root [10] ; root [10] TFile* file4 = TFile::Open(""file3.root"",""READ""); (TFile *) 0x5650bd584570; root [11] file4->TestBit(TFile::k630forwardCompatibility); (bool) true; root [12] file4->Close(); ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.30/02 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 02 2024, 15:34:40 |; | From heads/master@tags/v6-30-02 |; | With g++ (Debian 12.2.0-14) 12.2.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------; ```. ### Installation method. Spack. ### Operating system. Linux, debian. ### Additional context. Ref. #15006 .",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/16189:1487,Test,TestBit,1487,https://root.cern,https://github.com/root-project/root/issues/16189,2,['Test'],['TestBit']
Testability,"ause I am running inside a VM. But for every test iteration `find` has been faster than `count`. I do think having better assembly generation for `find` is more persuasive than just the percentage difference. <details>; <summary> Assembly comparison </summary>. ```; 4.67% 4.67% ntuple_extended libROOTNTuple.so [.] ROOT::Experimental::RClusterDescriptor::ContainsColumn; unordered_map.count; Percent│ Disassembly of section .text:; │; │ 0000000000074d80 <ROOT::Experimental::RClusterDescriptor::ContainsColumn(unsigned long) const>:; │ _ZNK4ROOT12Experimental18RClusterDescriptor14ContainsColumnEm():; 1.20 │ mov 0x60(%rdi),%r8; 36.14 │ mov %rsi,%rax; 2.41 │ xor %edx,%edx; │ div %r8; 3.61 │ mov 0x58(%rdi),%rax; 2.41 │ mov (%rax,%rdx,8),%rax; 30.12 │ mov %rdx,%r10; 1.20 │ test %rax,%rax; │ ↓ je 70; │ mov (%rax),%rcx; │ test %rcx,%rcx; │ ↓ je 70; │ mov 0x8(%rcx),%rdi; 21.69 │ xor %r9d,%r9d; │ ↓ jmp 4e; │ nop; │30: test %r9,%r9; │ ↓ jne 78; │ mov (%rcx),%rcx; │ test %rcx,%rcx; │ ↓ je 5f; │3d: mov 0x8(%rcx),%rdi; │ xor %edx,%edx; │ mov %rdi,%rax; │ div %r8; │ cmp %rdx,%r10; │ ↓ jne 5f; │4e: cmp %rsi,%rdi; │ ↑ jne 30; 1.20 │ mov (%rcx),%rcx; │ add $0x1,%r9; │ test %rcx,%rcx; │ ↑ jne 3d; │5f: test %r9,%r9; │ setne %al; │ ← retq; │ nop; │70: xor %eax,%eax; │ ← retq; │ nop; │78: mov $0x1,%eax. unordered_map.find; 3.85% 3.85% ntuple_extended libROOTNTuple.so [.] ROOT::Experimental::RClusterDescriptor::ContainsColumn; Percent│; │; │; │ Disassembly of section .text:; │; │ 0000000000074d80 <ROOT::Experimental::RClusterDescriptor::ContainsColumn(unsigned long) const>:; │ _ZNK4ROOT12Experimental18RClusterDescriptor14ContainsColumnEm():; │ mov 0x60(%rdi),%r8; 17.31 │ mov %rsi,%rax; │ xor %edx,%edx; │ div %r8; 11.54 │ mov 0x58(%rdi),%rax; │ mov (%rax,%rdx,8),%rax; 28.85 │ mov %rdx,%r9; │ test %rax,%rax; │ ↓ je 50; │ mov (%rax),%rcx; 1.92 │ mov 0x8(%rcx),%rdi; 40.38 │ ┌──jmp 41; │ │ nop; │28:│ mov (%rcx),%rcx; │ │ test %rcx,%rcx; │ │↓ je 50; │ │ mov 0x8(%rcx),%rdi; │ │ xor %edx,%edx; │ │ mo",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8209:1623,test,test,1623,https://root.cern,https://github.com/root-project/root/pull/8209,2,['test'],['test']
Testability,"b.com/root-project/root/issues/11411; * https://github.com/root-project/root/issues/11596. ## Upstream contributions to cppyy in the context of this synchronization. - https://github.com/wlav/CPyCppyy/pull/11; - https://github.com/wlav/CPyCppyy/pull/12; - https://github.com/wlav/CPyCppyy/pull/14; - https://github.com/wlav/CPyCppyy/pull/16 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/17 *(was in PyROOT before)*; - https://github.com/wlav/cppyy-backend/pull/20 *(was in PyROOT before)*; - https://github.com/wlav/CPyCppyy/pull/18; - https://github.com/wlav/CPyCppyy/pull/19; - https://github.com/wlav/CPyCppyy/pull/21; - https://github.com/wlav/CPyCppyy/pull/22; - https://github.com/wlav/CPyCppyy/pull/23. ## Performance validation. To validate the performance, I ran the [Python tests in roottest](https://github.com/root-project/roottest/tree/master/python) and the [PyROOT pythonization tests](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/test) and compared runtimes with and without the cppyy upgrade. The total runtime of these tests reduced by about 4 % from 208 s to 287 s, so the performance impact of this PR is marginal. The runtime comparison for each test can be found in [cppyy_upgrade_test_runtimes.txt](https://github.com/root-project/root/files/14623432/cppyy_upgrade_test_runtimes.txt).; The worst observed performance penalty is 24 %. However, significant speedups are observed in some of the longer tests. For convenience, the 20 tests with the longest runtime are listed here:; ```; title no_cppyy_upgrade cppyy_upgrade ratio; python-regression-regression 32.61 34.30 1.051825; pyroot-pyz-rdataframe-asnumpy 14.30 14.61 1.021678; pyroot-pyz-rdataframe-makenumpy 13.66 9.65 0.706442; python-function-function 12.27 11.08 0.903015; python-cpp-cpp 12.03 11.26 0.935993; python-cpp-advanced 11.55 10.83 0.937662; pyroot-pyz-rdataframe-histo-profile 11.24 7.37 0.655694; python-basic-basic 10.11 9.95 0.984174; python-stl-stl ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:2980,test,test,2980,https://root.cern,https://github.com/root-project/root/pull/14507,1,['test'],['test']
Testability,"bRIO.so; #7 0x00007f93684dd684 in TBufferFile::ApplySequence(TStreamerInfoActions::TActionSequence const&, void*) () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libRIO.so; #8 0x00007f935cc63f51 in TBranchElement::ReadLeavesMember(TBuffer&) () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libTree.so; #9 0x00007f935cc56bd4 in TBranch::GetEntry(long long, int) () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libTree.so; #10 0x00007f935cc6f4f9 in TBranchElement::GetEntry(long long, int) () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libTree.so; #11 0x00007f935ccb5801 in TTree::GetEntry(long long, int) () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libTree.so; #12 0x00007f9335473a51 in fitSignalShapeSimul(int*, int, int, int, int, int, double*, double*, double*, double*, double*, double*) () from /afs/cern.ch/user/m/mnadeem/roottut/CMSSW_10_2_5_patch1/src/ZZAnalysis/AnalysisStep/test/CombInputs/fitSignalShapeSimul_C.so; #13 0x00007f933547ba70 in all(int, int, int, int) () from /afs/cern.ch/user/m/mnadeem/roottut/CMSSW_10_2_5_patch1/src/ZZAnalysis/AnalysisStep/test/CombInputs/fitSignalShapeSimul_C.so; #14 0x00007f9334277091 in ?? (); #15 0x0000000100000000 in ?? (); #16 0x00007f933547b720 in ?? () from /afs/cern.ch/user/m/mnadeem/roottut/CMSSW_10_2_5_patch1/src/ZZAnalysis/AnalysisStep/test/CombInputs/fitSignalShapeSimul_C.so; #17 0x000000012f52f130 in ?? (); #18 0x000000000084ad90 in ?? (); #19 0x00007f9365b486b0 in ?? () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libCling.so; #20 0x00007ffe2f52f560 in ?? (); #21 0x00007f9334277000 in ?? (); #22 0x00007f9365acc1d2 in cling::Interpreter::RunFunction(clang::FunctionDecl const*, cling::Value*) [clone .part.248] () from /cvmfs/cms.cern.ch/slc7_amd64_gcc700/lcg/root/6.12.07-gnimlf5/lib/libCling.so; #23 0x00007f9365ace8b9 in cling::Interpreter::EvaluateInternal(std::__cxx",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7496:7750,test,test,7750,https://root.cern,https://github.com/root-project/root/issues/7496,1,['test'],['test']
Testability,backport for v6.24: Build option for distributed RDF tests that use pyspark,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7416:53,test,tests,53,https://root.cern,https://github.com/root-project/root/pull/7416,1,['test'],['tests']
Testability,"baea8, n_uncollectable=n_uncollectable; entry=0x7ffcb1bbaea0, nofail=nofail; entry=0) at Modules/gcmodule.c:1226; #15 0x00007fc00f8dfe5e in gc_collect_with_callback (tstate=tstate; entry=0x7fc00fbef818 <_PyRuntime+166328>, generation=generation; entry=2) at Modules/gcmodule.c:1400; #16 0x00007fc00f8e042f in PyGC_Collect () at Modules/gcmodule.c:2086; #17 0x00007fc00f8b893d in Py_FinalizeEx () at Python/pylifecycle.c:1830; #18 0x00007fc00f8dd981 in Py_RunMain () at Modules/main.c:682; #19 0x00007fc00f8dd9d4 in pymain_main (args=args; entry=0x7ffcb1bbaf90) at Modules/main.c:710; #20 0x00007fc00f8dda59 in Py_BytesMain (argc=<optimized out>, argv=<optimized out>) at Modules/main.c:734; #21 0x000000000040112f in main (argc=<optimized out>, argv=<optimized out>) at ./Programs/python.c:15; ```. Adding a `del f` at the end doesn't trigger this. . Attaching gdb, the failed assertion is: . ```; 1209	 if (type->tp_flags & Py_TPFLAGS_MANAGED_DICT) {; 1210	 assert(type->tp_dictoffset);; 1211	 int err = _PyObject_VisitInstanceAttributes(self, visit, arg);; 1212	 if (err) {; 1213	 return err;; 1214	 }; ```. So it seems to likely have something to do with #12857. Oddly, it does not seem to affect my system ROOT version (packaged by Fedora) which is also ROOT 6.28.06 and presumably built with Python 3.11, suggesting that there may be something complicated going on (I was only building my own ROOT in hopes of reproducing @clark2668's problem). None of the patches Fedora applies seem to be relevant, but probably there are differences in compilation flags. . Looking at the documentation for Py_TPLAGS_MANAGED_DICT at https://docs.python.org/dev/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT (which wrongly implies it's new in Python 3.12...), it seems like perhaps we want something like the following in MemoryRegulator.cxx ; ```; 139 if (!Py_TYPE(pyobj)->tp_dictoffset); 140 {; 141 CPyCppyy_NoneType.tp_flags |= (Py_TYPE(pyobj)->tp_flags & Py_TPFLAGS_MANAGED_DICT);; 142 }; ```. This does inde",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13694:2446,assert,assert,2446,https://root.cern,https://github.com/root-project/root/issues/13694,1,['assert'],['assert']
Testability,"base/inc/TObject.h:187; 71: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 72: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1057; 73: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1057; 74: 'oldIsNonVersioned' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1058; 75: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1058; 76: Assuming 'file' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1080; 77: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1080; 78: 'done' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1100; 79: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1100; 80: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1116; /opt/root_src/io/io/src/TStreamerInfo.cxx:1847:53: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 2: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 3: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 4: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 5: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 6: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 10: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 11: Assuming 'gDebug' is <= 0 in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 12: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 13: Assuming",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:102339,Test,TestBit,102339,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"be extended with another gradient-enabled `RooAbsMinimizerFcn` instantiation that will also include multi-processing implementations. Since we had to refactor construction, we took the opportunity to also put default parameters in the header declaration, instead of in the constructor initializer lists. Finally, this PR changes the default minimizer from Minuit to Minuit2. **Note that this may require some discussion.** We already briefly touched upon this in a Zoom meeting, but haven't thoroughly mapped out consequences yet. The reason for the switch is that the derivator scheme used in `RooGradMinimizerFcn` replicates that of Minuit2, so comparing to that makes more sense. Also, it just hasn't been tested at all with Minuit 1, I'm not even sure it will work with that version. Other than these `RooMinimizer` changes and the addition of `RooGradMinimizerFcn`, a new test was added called `testRooGradMinimizer`. It also uses a `test_lib.h` header that will also be used later on in tests of other new likelihood minimization implementations. **Do note that the test currently fails.** I originally had carefully made sure the results were bit-wise exactly the same as those from using classic `RooMinimizerFcn`, but there must have been some change in the meantime that I have not been able to integrate yet. I suspect it is caused by a change in Kahan summation, but have to inspect. In any case, the results are minor differences that do not negatively affect the effectiveness, the minimization just takes slightly different paths to the end results that will agree within the desired precision when set high enough. ~~**Final note:** this PR depends on three others: #8369, #8567 and #8569. These branches as they currently are were merged into this branch before making the one commit that adds everything in this actual commit. Do not merge this one before those. Also take care that this branch will be rebased and force pushed after each of those three are merged. In short: probab",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8596:2338,test,tests,2338,https://root.cern,https://github.com/root-project/root/pull/8596,1,['test'],['tests']
Testability,"bin:/usr/bin:/usr/local/bin`; * `ROOT_INCLUDE_PATH`: `/cvmfs/sft-nightlies.cern.ch/lcg/views/devswan/Thu/x86_64-centos7-gcc11-opt/include`. This behaviour has appeared since LCG102, which means ROOT 6.26. On LCG101 (ROOT 6.24.06), the behaviour is not shown. # The long story. ROOT doesn't work on certain platforms, given the following situation particular situation (which could then be extrapolated to more general ones). On SWAN, when spawning Spark executors, their environment is cherry-picked to ensure their proper functioning. In particular, only these environment variables are defined:; ```python; ['CLASSPATH',; 'CONTAINER_ID',; 'HADOOP_COMMON_HOME',; 'HADOOP_CONF_DIR',; 'HADOOP_HDFS_HOME',; 'HADOOP_HOME',; 'HADOOP_TOKEN_FILE_LOCATION',; 'HADOOP_YARN_HOME',; 'HOME',; 'JAVA_HOME',; 'JVM_PID',; 'LANG',; 'LD_LIBRARY_PATH',; 'LOCAL_DIRS',; 'LOCAL_USER_DIRS',; 'LOGNAME',; 'LOG_DIRS',; 'MALLOC_ARENA_MAX',; 'NM_AUX_SERVICE_mapreduce_shuffle',; 'NM_AUX_SERVICE_spark2_shuffle',; 'NM_AUX_SERVICE_spark_shuffle',; 'NM_HOST',; 'NM_HTTP_PORT',; 'NM_PORT',; 'OMP_NUM_THREADS',; 'PATH',; 'PRELAUNCH_ERR',; 'PRELAUNCH_OUT',; 'PWD',; 'PYTHONHASHSEED',; 'PYTHONPATH',; 'PYTHONUNBUFFERED',; 'PYTHON_WORKER_FACTORY_SECRET',; 'SHLVL',; 'SPARK_AUTH_SOCKET_TIMEOUT',; 'SPARK_BUFFER_SIZE',; 'SPARK_DIST_CLASSPATH',; 'SPARK_JOB_ARTIFACT_UUID',; 'SPARK_LOCAL_DIRS',; 'SPARK_PREFER_IPV6',; 'SPARK_REUSE_WORKER',; 'SPARK_USER',; 'SPARK_YARN_STAGING_DIR',; 'USER',; '_']; ```. And in particular these are the contents of `PATH` inside the worker environment:; ![image](https://github.com/root-project/root/assets/15638895/03cc533c-39a9-41f1-b923-1d8dd1ca8000). A [recent patch](https://github.com/root-project/root/pull/13803) has fixed the `import ROOT` issue:; ![image](https://github.com/root-project/root/assets/15638895/cf8df2f6-3d57-44cc-802e-1b9f65d2f9ac). But anything more than that will fail with:. ![image](https://github.com/root-project/root/assets/15638895/f48698a7-6b29-4f0c-9540-6ee292e8b164). T",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13811:1236,LOG,LOGNAME,1236,https://root.cern,https://github.com/root-project/root/issues/13811,1,['LOG'],['LOGNAME']
Testability,"bination with e.g. option 2 if the boxes are supposed to have only half the width of the bin, in this case the option would be s=0.5. Per default the Fill and Line Styles of the Graph are being used for all error dimensions. To use the specific ones add the draw option s to the first block.; In my example plot the drawing options are “A P X Y0 S ; Z ; 5 s=0.5 ; 3” which means the graph is drawn with Axes, Markers, no Errors on X, no errors on points with y = 0 and individual Fill and Line attributes for all error dimensions for the general part. The first error dimension (statistical errors) is drawn with lines without anything on their tip. The second error dimension (Point to Point Systematics) is drawn with boxes of half the width of the X-Errors. The third error dimension (Common Systematics) is drawn as an filled error band. **Individual Fill and Line Attributes for each error dimension**; This is being realized by overloading the Getter and Setter functions of TAttFill and TAttLine with an additional dimension parameter. Furthermore there are Getter and Setter functions for full TAttFill and TAttLine objects to get / set all attributes at once. To keep full compatibility with TGraphAsymmErrors by default the TAttFill and TAttLine attributes of the object are being used for all error dimensions. To activate using the individual ones add the Draw option “S” to the first block of the Draw options like in my example. I hope you find my class as useful as I do and vote for it to become part of ROOT in the future. :smile: . I tried to run the tests, but they failed at files having nothing to do with my implementation. There seem to be a few problem in the master branch which would explain why the nightly build failed. I will try to investigate more. If you encounter any problems, please contact me and I will try to resolve them. All the best,; Simon Spies. ![example](https://user-images.githubusercontent.com/5320187/53024715-dfa23d80-345f-11e9-9fd4-cae2ef3d11a1.png)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3449:5671,test,tests,5671,https://root.cern,https://github.com/root-project/root/pull/3449,1,['test'],['tests']
Testability,"bits are immediately modified again by `_int_free`:. ```cpp; #0 tcache_put (tc_idx=0, chunk=0x55555562e400) at malloc.c:3183; #1 _int_free (av=0x7ffff4dfdbc0 <main_arena>, p=0x55555562e400, have_lock=0) at malloc.c:4481; #2 0x00007ffff4c9c8f3 in __GI___libc_free (mem=<optimized out>) at malloc.c:3391; #3 0x00007ffff7b30e64 in TStorage::ObjectDealloc (vp=0x55555562e410) at ../core/base/src/TStorage.cxx:362; #4 0x00007ffff7b14518 in TObject::operator delete (ptr=0x55555562e410) at ../core/base/src/TObject.cxx:1001; #5 0x00007ffff7b11cba in TObject::~TObject (this=0x55555562e410, __in_chrg=<optimized out>) at ../core/base/src/TObject.cxx:91; #6 0x0000555555556242 in main () at foo.cpp:9; ```. where the line that accidentally sets the bit again is 3181 here:. ```cpp; 3172 /* Caller must ensure that we know tc_idx is valid and there's room; 3173 for more chunks. */; 3174 static __always_inline void; 3175 tcache_put (mchunkptr chunk, size_t tc_idx); 3176 {; 3177 tcache_entry *e = (tcache_entry *) chunk2mem (chunk);; 3178; 3179 /* Mark this chunk as ""in the tcache"" so the test in _int_free will; 3180 detect a double free. */; 3181 e->key = tcache_key;; 3182; 3183 e->next = PROTECT_PTR (&e->next, tcache->entries[tc_idx]);; ```. and this version of the test circumvents that behavior of `_int_free` so it does not crash (at least on my laptop):. ```cpp; void *mem = malloc(sizeof(TObject));; auto o = new (mem) TObject();; auto l = new TList();; l->SetName(""my own list"");; l->Add(o);; o->~TObject();; l->Clear();; free(mem);; ```. If my understanding is correct, this also means that the test failure is real in the sense that the `kNotDeleted` mechanism does not correctly work on platforms where `free` has that behavior. From Philippe (https://github.com/root-project/roottest/pull/880#issuecomment-1239663370):. > We (I) need to extend the core library to detect when there is a memory checker (or similar) that leads to the memory being salted after a delete and in that case disable ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11330:1231,test,test,1231,https://root.cern,https://github.com/root-project/root/issues/11330,1,['test'],['test']
Testability,bj.clangLex.dir/PPCaching.cpp.o -c /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex/PPCaching.cpp; [6494/9540] /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/include -D__ROOFIT_NOBANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility=hidden -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -std=c++17 -MD -MT interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/Lexer.cpp.o -MF interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.d,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:3354,test,tests,3354,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
Testability,"ble implementations could use the GPU or external tools like TensorFlow. The coupling of all these classes to `RooMinimizer` is made via the `MinuitFcnGrad` class, which owns the `...Wrappers` that calculate the likelihood components. ## Todo:. There are still a couple of things that require attention, which I hope the reviewers can help me with:. 1. I have a Kahan summation helper class. This should probably be replaced with the new Kahan summation class in ROOT itself, but I didn't get to this yet. Maybe it is not urgent to do now, up for discussion.; 2. `likelihood_builders.cxx` is still missing the top level entry point function. This should be quite a simple function: it should just check whether the pdf is binned, unbinned or sum and has subsidiary terms. All the building blocks are already present, so it is just a matter of building it, but didn't get to it yet.; 3. `optional_parameter_types.h`: maybe we could replace this with @guitargeek's new configuration structs.; 4. `testRooRealL.getValRooAddition` fails because it doesn't know `RooFormulaVar`... I'm not sure what this means, but I vaguely remember that (I think) @hageboeck and @cburgard were talking about this, so I was hoping you may be able to help me out with fixing that test. Finally, one thing that in an ideal world I would have liked to do is add a serial implementation of the `LikelihoodGradientWrapper` class. Probably, we can reuse a lot of `RooGradMinimizerFcn` for this and it should be rather straightforward. However, I'm rather short on time right now, and these things almost always tend to take longer than one expects, so I'm hesitant to build it now. The **advantage** would be that we could add a test to this PR that covers all that is added, basically by just running a minimization. Note that I do have such a full-coverage test, but only for the `MultiProcess` minimization, where I implemented `LikelihoodGradientWrapper` in the parallel `LikelihoodGradientJob` class. So this test will come",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8700:2086,test,testRooRealL,2086,https://root.cern,https://github.com/root-project/root/pull/8700,1,['test'],['testRooRealL']
Testability,"bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #17 0x00002b4bd39ef4d5 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseStmt(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) [clone .constprop.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #18 0x00002b4bd39ea96d in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseDecl(clang::Decl*) [clone .part.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #19 0x00002b4bd39ee7d1 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::dataTraverseNode(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #20 0x00002b4bd39ef4d5 in clang::RecursiveASTVisitor<cling::(anonymous namespace)::StaticVarCollector>::TraverseStmt(clang::Stmt*, llvm::SmallVectorImpl<llvm::PointerIntPair<clang::Stmt*, 1u, bool, llvm::PointerLikeTypeTraits<clang::Stmt*>, llvm::PointerIntPairInfo<clang::Stmt*, 1u, llvm::PointerLikeTypeTraits<clang::Stmt*> > > >*) [clone .constprop.0] () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_20",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:5663,test,tests,5663,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],['tests']
Testability,"bug. PyROOT related failures on s390x. Endian issus. ### Expected behavior. PyROOT should work on big endian without glitches. ### To Reproduce. Steps to reproduce the behavior:; 1. Build root 6.28.00 for s390x; 2. run unut tests. ### Setup. 1. ROOT version: 6.28.00; 2. Fedora Linux s390x, RHEL+EPEL s390x; 3. Compilation from source. ### Additional context. The failing tests. #### pyunittests-pyroot-pyz-rtensor . This is an endian issue:. $ printf '%08x\n%08x\n' 16777216 1; 01000000; 00000001; ~~~; 109/1272 Test #62: pyunittests-pyroot-pyz-rtensor ......................................***Failed 2.92 sec; test_memoryAdoption (rtensor.ArrayInterface.test_memoryAdoption); Test correct adoption of different datatypes ... ok; test_memoryLayout (rtensor.ArrayInterface.test_memoryLayout); Test adoption of the memory layout ... ok; test_ownData (rtensor.ArrayInterface.test_ownData); Test ownership of adopted numpy array ... ok; test_dtypes (rtensor.AsRTensor.test_dtypes); Test adoption of numpy arrays with different data types ... ok; test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout ... FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:1026,Test,Test,1026,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,"build/master-debug/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; ....; ```. This seems ""reversed and indeed:. ```; ls -lrt lib/RIO.pcm lib/Hist.pcm; -rw-r--r-- 1 pcanal pcanal 5537736 Mar 25 21:11 lib/Hist.pcm; -rw-r--r-- 1 pcanal pcanal 3220264 Mar 25 21:13 lib/RIO.pcm; ```. Maybe either:; ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported module 'RIO' in '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is newer.; ....; ```. ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is newer and all dependent module needs to be rebuilt; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; ....; ```. Cheers,; Philippe. PS Full error message:; ```; <<< cling interactive line includer >>>: fatal error: module file '/home/pcanal/root_working/build/master-debug/lib/RIO.pcm' is out of date and needs to be rebuilt: module file out of date; <<< cling interactive line includer >>>: note: imported by module 'Hist' in '/home/pcanal/root_working/build/master-debug/lib/Hist.pcm'; Failed to load module Hist; Failed to load module RDAVIX; Failed to load module RooFitMore; Failed to load module RooFitRDataFrameHelpers; Failed to load module FITSIO; Failed to load module FFTW; Failed to load module MathMore; root.exe: /home/pcanal/root_working/code/root/interpreter/llvm/src/tools/clang/lib/Lex/Lexer.cpp:3940: bool clang::Lexer::LexTokenInternal(clang::Token&, bool): Assertion `Result.is(tok::eof) && ""Preprocessor did not set tok:eof""' failed. ; Aborted; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7704:2126,Assert,Assertion,2126,https://root.cern,https://github.com/root-project/root/issues/7704,1,['Assert'],['Assertion']
Testability,but rather for the missing dictionary of T given the way in which we treat unique_ptrs.; A test is missing stil...,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2693:91,test,test,91,https://root.cern,https://github.com/root-project/root/pull/2693,1,['test'],['test']
Testability,"by removing invocations to the root-config executable. This executable was invoked twice to check if RDataFrame was available. Such a behaviour causes a severe slowdown, especially on cvmfs. This has been replaced by a simple string comparison. Backport of 4c863d. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13898:330,test,tested,330,https://root.cern,https://github.com/root-project/root/pull/13898,1,['test'],['tested']
Testability,"by using TClass instead of the interpreter. As a side effect, the whole process is much faster. This fixes an incarnation of #14156, mitigating the overall effect of the highlighted behaviour. NOTE: A test is available but not yet pushed to this PR and will be added in stressgraphics.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14960:201,test,test,201,https://root.cern,https://github.com/root-project/root/pull/14960,1,['test'],['test']
Testability,"c(void*, TInterpreterValue*) (TClingCallFunc.cxx:2102); Address 0x1b96f790 is 64 bytes inside a block of size 72 alloc'd; operator new[](unsigned long) (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_helgrind-amd64-linux.so); TStorage::ReAlloc(void*, unsigned long, unsigned long) (TStorage.cxx:238); TOrdCollection::SetCapacity(int) (TOrdCollection.cxx:387); TOrdCollection::AddAt(TObject*, int) (TOrdCollection.cxx:66); TOrdCollection::AddLast(TObject*) (TOrdCollection.cxx:102); TSeqCollection::Add(TObject*) (TSeqCollection.h:38); TSystem::AddTimer(TTimer*) (TSystem.cxx:476); TUnixSystem::AddTimer(TTimer*) (TUnixSystem.cxx:2974); TTimer::TurnOn() (TTimer.cxx:247); TGCommandPlugin::TGCommandPlugin(TGWindow const*, unsigned int, unsigned int) (TGCommandPlugin.cxx:110); MainWindow::MainWindow(TGWindow const*, unsigned int, unsigned int, PulseSurfer*, unsigned int, unsigned int, bool) (MainWindow.cpp:616); main (main.cxx:86); ```. and several more can be seen in helgrind.log in the forum post, or in helgrind.xml attached here. [helgrind.xml.zip](https://github.com/root-project/root/files/6612569/helgrind.xml.zip). When opening the XML with QtCreator, they are rendered nicely:; ![image](https://user-images.githubusercontent.com/10653970/121102408-7e870b00-c7cb-11eb-8436-816dd434bdf3.png). ### Expected behavior; No data races are found. Or they are added to helgrind-root.supp. ### To Reproduce; 0. cd /opt/ && git clone https://github.com/CLIUtils/CLI11; 1. Download https://root-forum.cern.ch/uploads/short-url/z59x8uBIVMEE5S46EWUUHyyO3df.zip and unzip it, cd into it; 2. mkdir build && cd build; 3. cmake -DROOT_DIR=/build-debug-mode-ROOT -DCMAKE_BUILD_TYPE=Debug ../; 4. make; 5. valgrind --xml=yes --xml-file=helgrind.xml --tool=helgrind --suppressions=/pathtoDebugROOT/etc/helgrind-root.supp --log-file=helgrind.log gui/runGUI --prbs 3 -q. ### Setup; 1. ROOT master; 2. Ubuntu 18; 3. Self-built. ### Additional context; https://root-forum.cern.ch/t/trentrantrwlock-thread-lock-pr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8365:5358,log,log,5358,https://root.cern,https://github.com/root-project/root/issues/8365,1,['log'],['log']
Testability,"c++/11.2.1/filesystem:45:10: note: '/data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/bin/../lib/gcc/x86_64-redhat-linux-gnu/11.2.1/../../../../include/c++/11.2.1/bits/fs_path.h' included multiple times, additional include site in header from module 'FWCorePluginManager.CacheParser.h'; #include <bits/fs_path.h>; ^; /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/include/el8_amd64_gcc11/cxxmodules/module.modulemap:249:10: note: FWCorePluginManager.CacheParser.h defined here; module ""CacheParser.h"" { header ""../../../src/FWCore/PluginManager/interface/CacheParser.h"" export * }; ^; /data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/bin/../lib/gcc/x86_64-redhat-linux-gnu/11.2.1/../../../../include/c++/11.2.1/filesystem:45:10: note: '/data/cmsbld/jenkins/workspace/build-any-ib/w/el8_amd64_gcc11/external/gcc/11.2.1-f9b9dfdd886f71cd63f5538223d8f161/bin/../lib/gcc/x86_64-redhat-linux-gnu/11.2.1/../../../../include/c++/11.2.1/bits/fs_path.h' included multiple times, additional include site in header from module 'FWCorePluginManager.PluginInfo.h'; #include <bits/fs_path.h>; ^; /data/cmsbld/jenkins/workspace/build-any-ib/w/tmp/BUILDROOT/8111f4777df89fbcfd3398ad239ef48c/opt/cmssw/el8_amd64_gcc11/cms/cmssw/CMSSW_12_6_CXXMODULE_X_2022-11-22-2300/include/el8_amd64_gcc11/cxxmodules/module.modulemap:255:10: note: FWCorePluginManager.PluginInfo.h defined here; module ""PluginInfo.h"" { header ""../../../src/FWCore/PluginManager/interface/PluginInfo.h"" export * }; ^; ```; Full log is available [here](https://cmssdt.cern.ch/SDT/cgi-bin/buildlogs/el8_amd64_gcc11/CMSSW_12_6_CXXMODULE_X_2022-11-23-2300/Alignment/LaserAlignment), see also https://github.com/cms-sw/cmsdist/issues/8197.; Are you already aware of any fix for that?. Thank you,; Andrea.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11765:9116,log,log,9116,https://root.cern,https://github.com/root-project/root/issues/11765,1,['log'],['log']
Testability,c/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1678,log,logger,1678,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,c/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1903,log,logger,1903,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,"c/TRefArray.cxx:378; 3: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:379; 4: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:379; 5: Assuming 'i' is < field 'fSize' in /opt/root_src/core/cont/src/TRefArray.cxx:381; 6: Loop condition is true. Entering loop body in /opt/root_src/core/cont/src/TRefArray.cxx:381; 7: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:382; 8: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:382; 9: 'uid' declared without an initial value in /opt/root_src/core/cont/src/TRefArray.cxx:384; 10: Calling 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:385; 11: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 12: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 13: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 14: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 15: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:211; 16: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 17: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 18: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 19: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 20: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 21: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:214; 22: 'valid' is false in /opt/root_src/core/cont/src/TRefArray.cxx:215; 23: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:215; 24: Assuming the condition is true in /opt/root_src/core/cont/src/TRefArray.cxx:218; 25: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:218; 26: Assuming 'gDebug' is <= 3 in /opt/root_src/co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:21420,Test,TestBit,21420,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Test'],['TestBit']
Testability,"c/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., diagOnOff=cling::LookupHelper::NoDiagnostics, resultType=0x7fffffff65f0, instantiateTemplate=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/cling/lib/Interpreter/LookupHelper.cpp:703. #20 0x00007fffe26b2ba8 in TClingClassInfo::TClingClassInfo (this=0x3e04b90, interp=0x77e5d0, name=0x6a1ad0 ""art::Wrapper<art::Assns<string,int,void> >"") at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TClingClassInfo.cxx:95. #21 0x00007fffe26cacba in TCling::SetClassInfo (this=0x77bdf0, cl=0x3983b80, reload=true) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/core/metacling/src/TCling.cxx:3785. #22 0x00007ffff74d245f in TClass::SetUnloaded (this=0x3983b80) at /scratch/greenc/test-products/root/v6_20_04/sou",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:6004,test,test-products,6004,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,c; Start 458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings; 479/1231 Test #394: gtest-tree-dataframe-test-dataframe-concurrency ..................... Passed 44.21 sec; Start 459: tutorial-dataframe-df014_CSVDataSource; 480/1231 Test #456: tutorial-dataframe-df009_FromScratchVSTTree ......................... Passed 4.16 sec; Start 460: tutorial-dataframe-df015_LazyDataSource; 481/1231 Test #454: tutorial-dataframe-df007_snapshot ................................... Passed 9.31 sec; Start 461: tutorial-dataframe-df016_vecOps; 482/1231 Test #457: tutorial-dataframe-df010_trivialDataSource .......................... Passed 3.32 sec; Start 462: tutorial-dataframe-df017_vecOpsHEP; 483/1231 Test #458: tutorial-dataframe-df012_DefinesAndFiltersAsStrings ................. Passed 5.07 sec; Start 463: tutorial-dataframe-df018_customActions; 484/1231 Test #461: tutorial-dataframe-df016_vecOps ..................................... Passed 3.80 sec; Start 464: tutorial-dataframe-df019_Cache; 485/1231 Test #462: tutorial-dataframe-df017_vecOpsHEP .................................. Passed 4.31 sec; Start 465: tutorial-dataframe-df020_helpers; 486/1231 Test #459: tutorial-dataframe-df014_CSVDataSource .............................. Passed 6.87 sec; Start 466: tutorial-dataframe-df021_createTGraph; 487/1231 Test #460: tutorial-dataframe-df015_LazyDataSource ............................. Passed 6.11 sec; Start 467: tutorial-dataframe-df022_useKahan; 488/1231 Test #463: tutorial-dataframe-df018_customActions .............................. Passed 3.66 sec; Start 468: tutorial-dataframe-df023_aggregate; 489/1231 Test #466: tutorial-dataframe-df021_createTGraph ............................... Passed 2.94 sec; Start 469: tutorial-dataframe-df024_Display; 490/1231 Test #467: tutorial-dataframe-df022_useKahan ................................... Passed 3.26 sec; Start 470: tutorial-dataframe-df025_RNode; 491/1231 Test #465: tutorial-dataframe-df020_helpers ................................,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:9082,Test,Test,9082,https://root.cern,https://github.com/root-project/root/pull/10300,1,['Test'],['Test']
Testability,"cale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:610:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:617:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:617:16: note: previous definition is here; typedef struct __crt_locale_pointers; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:625:16: error: redefinition of '_Mbstatet'; typedef struct _Mbstatet; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:625:16: note: previous definition is here; typedef struct _Mbstatet; ^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class gGeoManager with content:. ... Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================; ...; ```; This PR fixes #14302",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14335:3066,assert,assert,3066,https://root.cern,https://github.com/root-project/root/pull/14335,2,"['Assert', 'assert']","['Assertion', 'assert']"
Testability,"ccepts a C-style string. In most cases, cppyy will just; tell you that the arguments don't match the function signature, but; there are corner cases in which an uninterpretable stack trace is; created. Here is a reproducer for that, inspired by the; RooAbsDataHelper that cannot be used from pyROOT without this commit:. ```Python; import ROOT. ROOT.gInterpreter.ProcessLine("""""". struct MyClass {. std::shared_ptr<RooAbsData> _dataset;. template<typename... Args_t>; MyClass(Args_t&&... args); : _dataset{ new RooDataSet(std::forward<Args_t>(args)...) }; {; _dataset->Print();; }. };. """"""). x = ROOT.RooRealVar(""x"", ""x"", -5., 5.); y = ROOT.RooRealVar(""y"", ""y"", -50., 50.). argSet = ROOT.RooArgSet(x, y); helper = ROOT.MyClass(""dataset"",""Title of dataset"", argSet); ```. This change should not break much user code, because a; `std::string_view` can also be implicitely constructed from a C-style; string or a TString. There is one problem if one passed a `nullptr` before, a; `std::string_view` can't be constructed from a `nullptr`. But a; `nullptr` for name and title is a mistake anyway, so it can be expected; from the users the fix these error that are caught at compile-time. The other backwards incompatibility is that for builds with the C++14; standard, the `TString` to `string_view` conversion does not work.; However, this problem is solved by templated constructors that take; `ROOT::Internal::TStringView` instead. Here is some code to test that the `RooDataSetHelper` doesn't work without this PR, but works with the PR:; ```Python; import ROOT. ROOT.ROOT.EnableImplicitMT(). d = ROOT.RDataFrame(2000000); dd = d.Define(""x"", ""gRandom->Uniform(-5., 5.)"") \; .Define(""y"", ""gRandom->Gaus(1., 3.)""). x = ROOT.RooRealVar(""x"", ""x"", -5., 5.); y = ROOT.RooRealVar(""y"", ""y"", -50., 50.); x.setBins(10); y.setBins(20). rdhMaker = ROOT.RooDataSetHelper(""dataset"",""Title of dataset"", ROOT.RooArgSet(x, y)); rooDataSet = dd.Book(ROOT.std.move(rdhMaker), (""x"", ""y"")); rooDataSet.GetPtr().Print(); ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8614:1862,test,test,1862,https://root.cern,https://github.com/root-project/root/pull/8614,1,['test'],['test']
Testability,"ce `RooCmdArg()` with `{}` in default parameter lists; d82b617a5b [RF] More use of `RooFit::OwningPtr<T>`; 7f288f1ca8 [RF] Avoid some usage of the non-thread safe `Form()` in RooFit; 0c9b6b6116 [RF][HF] Remove FlexibleInterpVar constructor from RooArgLists; 466f3f689c [RF][HF] Consistent 6th-degree polynomial interpolation in HistFactory; 07b56333f9 [RF] Put members in RooAbsReal class declaration in order; 25db2c78c4 [RF] Add code generation plus AD test for RooLognormal; 37c232f555 [RF] Don't test codegen + AD in testHistFactory on Windows; 1e74086875 [RF] Extend AD tests in `testHistFactory`; 3535820cda [RF] Throw error in RooNLLVarNew code gen when fitting old HistFactory; 33fe9c3ac5 [RF] Add Code-Squash AD support for RooLogNormal.; 344f5f93bf [RF] Add Code-Squash AD support for RooPiecewiseInterpolation.; 51a50839b6 [RF] Extend `testHistFactory` unit test to fit with code generation AD; efecd18bcc [RF] Add `""codegen""` as new option for `BatchMode()`; 6df4d2e80e [RF] Add `RooAbsReal::hasGradient()` and `gradient()` interface; 8adfe677a1 [RF] Only use floating parameters in RooFuncWrapper; 168b9ef861 [RF] Add Code-Squash AD support for RooFlexibleInterpVar.; 79b80a3163 [RF] Add Code-Squash AD support for RooPoisson.; a493684a19 [RF] Add Code-Squash AD support for the Hist* classes.; cc9e2730d0 [RF] Support extended fits in RooFit code generation plus AD; 4925e0c366 [RF] Remove debug output from `RooCurve::shiftCurveToZero()`; f8aa65e0cc [RF] Correctly reset y-axis limits after `RooCurve::shiftCurveToZero()`; cf98956266 [RF] Add exceptions to setter methods for non-existing objects; 1cc5ec46c8 [RF] Forbid resetting RooFormula; b483747192 [RF] Only register actual vars as server in `RooFormulaVar`/`GenericPdf`; b537cbb93d [RF] Add the CHEP'23 AD results as a RooFit test; 40ab6a4d89 [RF] Fix code generation issues with RooAdd* classes; 3dcea7036a [RF] Support simultaneous fits in NLL code generation; a470a3d85e [RF] Remove internal `RooFormula` from public RooFit i",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:3710,test,testHistFactory,3710,https://root.cern,https://github.com/root-project/root/pull/13295,2,['test'],"['test', 'testHistFactory']"
Testability,ce; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLog,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2364,log,logger,2364,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,"cept Exception as e:; print(""helper call failed""); print(e); ```. The output below is now close to optimal for the first instantiation attempt. On the second instantiation attempt the error message is different/less useful because of the imperfect transaction rollback already noted. (but the same happens instantiating the template through ```TInterpreter::Declare``` as said). ```; declare ret True; creating helper; calling helper; call attempt 0; helper call failed; Template method resolution failed:; Failed to instantiate ""call_helper(Helper<vector<double> >&)""; In file included from input_line_52:1:; /home/b/bendavid/pyrootdebug6/test.h:10:9: error: cannot assign to variable 'res' with const-qualified type 'const std::size_t' (aka 'const unsigned long'); res = T{0, 0}.size();; ~~~ ^; /home/b/bendavid/pyrootdebug6/test.h:18:10: note: in instantiation of member function 'Helper<std::vector<double, std::allocator<double> > >::operator()' requested here; return helper();; ^; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > >' requested here; /home/b/bendavid/pyrootdebug6/test.h:9:23: note: variable 'res' declared const here; const std::size_t res = 0;; ~~~~~~~~~~~~~~~~~~^~~~~~~. Failed to instantiate ""call_helper(Helper<vector<double> >*)""; error: called object type 'Helper<std::vector<double, std::allocator<double> > > *' is not a function or function pointer; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > *>' requested here. Failed to instantiate ""call_helper(Helper<vector<double> >)""; error: type 'const Helper<std::vector<double, std::allocator<double> > >' does not provide a call operator; note: in instantiation of function template specialization 'call_helper<Helper<std::vector<double, std::allocator<double> > > >' requested here. call attempt 1; helper call failed; Template method resolution failed:; Failed t",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449:2980,test,test,2980,https://root.cern,https://github.com/root-project/root/pull/12449,1,['test'],['test']
Testability,"ch/src/TProofBench.cxx:496; 46: Called C++ object pointer is null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:499; /opt/root_src/proof/proofbench/src/TProofBench.cxx:1077:30: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Assuming 'fout' is non-null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 2: Left side of '||' is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 3: 'fout' is non-null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 4: Left side of '&&' is true in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 5: Calling 'TObject::IsZombie' in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 6: Calling 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/core/base/inc/TObject.h:149; 10: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:149; 11: Returning from 'TObject::IsZombie' in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 12: Taking false branch in /opt/root_src/proof/proofbench/src/TProofBench.cxx:985; 13: Assuming 'nmdesc' is null in /opt/root_src/proof/proofbench/src/TProofBench.cxx:993; 14: Taking false branch in /opt/root_src/proof/proofbench/src/TProofBench.cxx:993; 15: '?' condition is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:997; 16: Left side of '||' is true in /opt/root_src/proof/proofbench/src/TProofBench.cxx:998; 17: Left side of '||' is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:999; 18: '?' condition is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:999; 19: Left side of '||' is false in /opt/root_src/proof/proofbench/src/TProofBench.cxx:1000; 20: '?' condition is false in /opt/root_src/proof/p",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7534:58569,Test,TestBit,58569,https://root.cern,https://github.com/root-project/root/issues/7534,1,['Test'],['TestBit']
Testability,"chain->Add(""filename/treename"") is ambiguous when filename does not; end in `.root`: in that case `TChain` interprets its argument; as the full path to the file, with no treename specified. We now instead use the unambiguous syntax ""filename?query#treename""; when building chains in TTreeProcessorMT. This fixes #8739 (reading files with no `.root` extension in RDF's; multi-thread event loops). Companion PR https://github.com/root-project/roottest/pull/758 adds a test.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8741:466,test,test,466,https://root.cern,https://github.com/root-project/root/pull/8741,1,['test'],['test']
Testability,"cialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvis",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:3052,test,test-products,3052,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,"clad is a C++ plugin for clang and cling that implements automatic; differentiation of user-defined functions by employing the chain rule in; forward and reverse mode, coupled with source code transformation and AST; constant fold. In mathematics and computer algebra, automatic differentiation (AD) is a; set of techniques to numerically evaluate the derivative of a function; specified by a computer program. AD exploits the fact that every computer; program, no matter how complicated, executes a sequence of elementary; arithmetic operations (addition, subtraction, multiplication, division, etc.); and elementary functions (exp, log, sin, cos, etc.). By applying the chain; rule repeatedly to these operations, derivatives of arbitrary order can; be computed automatically, accurately to working precision, and using at; most a small constant factor more arithmetic operations than the original; program. AD is an alternative technique to symbolic and numerical differentiation.; These classical methods run into problems: symbolic differentiation leads; to inefficient code (unless done carefully) and faces the difficulty of; converting a computer program into a single expression, while numerical; differentiation can introduce round-off errors in the discretization; process and cancellation. Both classical methods have problems with; calculating higher derivatives, where the complexity and errors increase.; Finally, both classical methods are slow at computing the partial; derivatives of a function with respect to many inputs, as is needed for; gradient-based optimization algorithms. Automatic differentiation solves; all of these problems, at the expense of introducing more software; dependencies. This patch allows ROOT to interoperate with clad. Namely, users can ask; the interpreter to produce a derivative or a gradient to a known function. An illustrative example code for first order derivative:. root [0] #include ""Math/CladDerivator.h""; root [1] double my_pow2(double x) { r",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2378:634,log,log,634,https://root.cern,https://github.com/root-project/root/pull/2378,1,['log'],['log']
Testability,"clang might need to find a definition, that ""we"" might have.; But we need to find it based on a type name from clang, from a fwd decl;; or (as in ROOT-10804) based on a typename-from-typeid operation.; So register that as an alias!. The normalized-name-as-known-to-ROOT and typeid-name can be different,; for instance for inline namespaces: stripped by ROOT, kept by typeid. ROOT-10804 has a complex case where a lookup of a template argument failed; because it involves an inline namespace, and LHCb uses typeid demangling.; LHCb's case needed a nested name from a type (`LHCb::Event::v1::Track`); that failed to load because `v1` is an inline namespace, thus failing; instantiation of `KeyedContainer<LHCb::Event::v1::Track,Containers::KeyedObjectManager<Containers::hashmap> >` and making it invalid.; The transaction unloading then fails to completely remove this instantiation; (an unrelated bug), such that the remainders of the invalid decl are picked; up by a subsequent template instantiation which then asserts because of the; incomplete (invalid) declaration. We use the mangle/demangle trick from rootcling.; Now that multiple locations need it, just store it with the AnnotatedRecordDecl.; It will be needed for most classes; the overhead should be bearable. (cherry picked from commit d9e819b82632cf02b3aaa251f5922b457b41624e)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5819:1013,assert,asserts,1013,https://root.cern,https://github.com/root-project/root/pull/5819,1,['assert'],['asserts']
Testability,clang-format some files + add some typedefs to `ntuple_test.hxx` to reduce namespace noise in the tests,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/16237:98,test,tests,98,https://root.cern,https://github.com/root-project/root/pull/16237,1,['test'],['tests']
Testability,"clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::VisitFieldDecl (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiateDecl.cpp:810. #12 0x00007fffe3d807a6 in clang::declvisitor::Base<clang::declvisitor::make_ptr, clang::TemplateDeclInstantiator, clang::Decl*>::Visit (this=0x7fffffff59f0, D=0x51e8548). at /scratch/greenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteTyp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:4586,test,test-products,4586,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,cling assertion crash,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8389:6,assert,assertion,6,https://root.cern,https://github.com/root-project/root/issues/8389,1,['assert'],['assertion']
Testability,cling::printValue() cling-test fixes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1953:26,test,test,26,https://root.cern,https://github.com/root-project/root/pull/1953,1,['test'],['test']
Testability,"clude <cassert>` from `TGeoExtension.h` and move it to the `TGeoExtension.cxx` source file, fixing a potential crash of JupyROOT when running on a machine with a different version of the Windows SDK than the one used to build ROOT, as described in the Github issue #14302 and as shown below. The issue comes from this code in `JupyROOT\helpers\utils.py`:; ```; def GetGeometryDrawer():; if not hasattr(ROOT,'gGeoManager'): return; if not ROOT.gGeoManager: return; if not ROOT.gGeoManager.GetUserPaintVolume(): return; vol = ROOT.gGeoManager.GetTopVolume(); if vol:; return NotebookDrawer(vol); ```; triggering the autoloading of libGeom, leading to this error:; ```; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:260:12: error: redefinition of '_CrtEnableIf<true, _Ty>'; struct _CrtEnableIf<true, _Ty>; ^~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:260:12: note: previous definition is here; struct _CrtEnableIf<true, _Ty>; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:610:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:610:16: note: previous definition is here; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14335:1011,assert,assert,1011,https://root.cern,https://github.com/root-project/root/pull/14335,2,['assert'],['assert']
Testability,"clude/c++/v1/span:430:19: note: candidate template ignored: requirement '__is_span_compatible_container<const std::__wrap_iter<const unsigned long long *>, const unsigned long long, void>::value' was not satisfied [with _Container = std::__wrap_iter<const unsigned long long *>]; constexpr span(const _Container& __c,; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:437:19: note: candidate template ignored: could not match 'span' against '__wrap_iter'; constexpr span(const span<_OtherElementType, _OtherExtent>& __other,; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:402:15: note: candidate constructor not viable: requires 1 argument, but 2 were provided; constexpr span (const span&) noexcept = default;; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:410:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided; constexpr span(element_type (&__arr)[_Sz]) noexcept : __data{__arr}, __size{_Sz} {}; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:415:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided; constexpr span(array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:420:15: note: candidate constructor template not viable: requires single argument '__arr', but 2 arguments were provided; constexpr span(const array<_OtherElementType, _Sz>& __arr) noexcept : __data{__arr.data()}, __size{_Sz} {}; ^; /Library/Developer/CommandLineTools/SDKs/MacOSX13.1.sdk/usr/include/c++/v1/span:400:41: note: candidate constructor not viable: requires 0 arguments, but 2 were provided; _LIBCPP_INLINE_VISIBILITY constexpr span() noexcept : __data{nullptr}, __size{0} {}; ```. ## Checklist:; - [X] tested changes locally",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12697:3865,test,tested,3865,https://root.cern,https://github.com/root-project/root/pull/12697,1,['test'],['tested']
Testability,"commit a13590901c or ROOT maser commit f499987. . [a]; ```; @@@@ Running edmWriteConfigs for SimG4CoreSaveSimTrackAction. *** Break *** segmentation violation. ===========================================================; There was a crash (kSigSegmentationViolation).; This is the entire stack trace of all threads:; ===========================================================; #0 0x0000152ecd0815db in waitpid () from /lib64/libc.so.6; #1 0x0000152eccfe3ce7 in do_system () from /lib64/libc.so.6; #2 0x0000152ece6e73e2 in TUnixSystem::Exec (this=0x234e8c0, shellcmd=0x51d8ad0 ""/data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/etc/gdb-backtrace.sh 1509407 1>&2"") at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:2104; #3 0x0000152ece6e7c83 in TUnixSystem::StackTrace (this=0x234e8c0) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:2395; #4 0x0000152ece6eb6be in TUnixSystem::DispatchSignals (this=0x234e8c0, sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3615; #5 0x0000152ece6e35da in SigHandler (sig=kSigSegmentationViolation) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:395; #6 0x0000152ece6eb5c1 in sighandler (sig=11) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.05-e7deaecb5e40f02a68a0fd8a7c036f40/root-6.28.05/core/unix/src/TUnixSystem.cxx:3586; #7 <signal handler called>; #8 0x0000152ecd023e41 in free ()",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12957:1417,test,tests,1417,https://root.cern,https://github.com/root-project/root/issues/12957,2,['test'],"['testBuildDir', 'tests']"
Testability,"concatenation of pages from the same page-group can achieve.; - `RPageSinkDaos::CommitSealedPageVImpl()` maps pages from the same page-group to the same attribute key, thus concatenating them on the DAOS-side (i.e. relies on scatter-gathered I/O) until the cage limit is reached. The cage sizes can vary due to page compression and the length of page-groups, thus it is calculated and stored to be referenced when reading back.; - `RWOperation` is generalized to allow many IOVs associated with one attribute key in a request, enabling the non-contiguous buffers of sealed pages to be aggregated into a cage under the same position ID in the object store. ; - `RNTupleLocator`: leverages the changes introduced by PR #11828; all DAOS locators use the type `kDaos` and payload format `RNTupleLocatorObject64`. To locate pages within a cage, the 64-bit payload encodes the cage index in the LS half and the offset in the MS half. If caging is disabled, the offset remains zero, and each 'cage' is trivially the sealed page.; - Currently, there are no plans to enable support for page-wise reading without cluster caching if the desired page is caged, as that use-case is not performant and thus not recommended. Caged pages in DAOS should be accessed with the page buffering read option turned on. By disallowing the reading of a single caged page when the wrapping cage size is unknown, the cage sizes - or upper bounds for them - do not need to be passed to `RPageSourceDaos`; they are trivially devised in `RPageSourceDaos::LoadClusters()` by accessing all page locators in a buffered page-group. ; - `RPageSourceDaos::LoadClusters()` and `RPageSourceDaos::PopulatePageFromCluster()` extract the cage position and offset-in-cage from each sealed page's `RNTupleLocator::fPosition`. The former function has been changed to coalesce the page locators by cage index and perform a single read operation per cage. ## Checklist:. - [x] tested changes locally + HPE `delphi` cluster; - [x] updated the docs",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/11466:3311,test,tested,3311,https://root.cern,https://github.com/root-project/root/pull/11466,1,['test'],['tested']
Testability,"const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeHeader (0 ms); [ RUN ] RNTuple.SerializeFooter; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeFooter (0 ms); [----------] 14 tests from RNTuple (190 ms total); [----------] Global test environment tear-down; [==========] 14 tests from 1 test suite ran. (190 ms total); [ PASSED ] 12 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.SerializeEnvelope; [ FAILED ] RNTuple.SerializeLocator; 2 FAILED TESTS; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-types. Endian issue:. $ printf '%x\n%x\n' 180388626432 42; 2a00000000; 2a; ~~~; 465/1272 Test #433: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 5.68 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNTuple.TypeName; [ OK ] RNTuple.TypeName (316 ms); [ RUN ] RNTuple.CreateField; [ OK ] RNTuple.CreateField (0 ms); [ RUN ] RNTuple.ArrayField; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTupl",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:15193,test,test-ntuple-types,15193,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test-ntuple-types']
Testability,"cont/inc/TCollection.h:249; 24: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249; 25: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248; 26: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248; 27: Returning from 'TIter::operator()' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1792; 28: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TStreamerInfo.cxx:1792; 29: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1793; 30: Left side of '||' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1793; 31: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1794; 32: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 33: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 34: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1794; 35: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1793; 36: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1805; 37: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1805; 38: 'shouldHaveInfoLoc' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:2032; 39: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:2032; 40: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:2050; 41: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:2050; 42: Value assigned to 'dm' in /opt/root_src/io/io/src/TStreamerInfo.cxx:2065; 43: Assuming 'dm' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:2066; 44: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:2066; 45: Assuming 'rd' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:2115; 46: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerI",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:110296,Test,TestBit,110296,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"cont/inc/TCollection.h:249; 24: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:249; 25: Returning from 'TIter::Next' in /opt/root_src/core/cont/inc/TCollection.h:248; 26: Returning pointer, which participates in a condition later in /opt/root_src/core/cont/inc/TCollection.h:248; 27: Returning from 'TIter::operator()' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1792; 28: Loop condition is true. Entering loop body in /opt/root_src/io/io/src/TStreamerInfo.cxx:1792; 29: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1793; 30: Left side of '||' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1793; 31: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1794; 32: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 33: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 34: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1794; 35: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1793; 36: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1805; 37: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1805; 38: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1810; 39: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1810; 40: Calling 'TClassRef::operator TClass *' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 41: Assuming field 'fClassPtr' is null in /opt/root_src/core/meta/inc/TClassRef.h:74; 42: Left side of '&&' is false in /opt/root_src/core/meta/inc/TClassRef.h:74; 43: Returning pointer, which participates in a condition later in /opt/root_src/core/meta/inc/TClassRef.h:74; 44: Returning from 'TClassRef::operator TClass *' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 45: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:182",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:105196,Test,TestBit,105196,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,correct for Logx when drawing histogram errors,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4755:12,Log,Logx,12,https://root.cern,https://github.com/root-project/root/pull/4755,1,['Log'],['Logx']
Testability,"cro('~tnanut/public/Stephan/RooThreshold.cpp', 'fO')"" 2>&1 | grep user.*system;; /usr/bin/time python3 -c ""import ROOT; ROOT.gSystem.CompileMacro('~tnanut/public/Stephan/RooThreshold.cpp', 'O')"" 2>&1 | grep user.*system); done; ```. Output:; ```; /cvmfs/sft.cern.ch/lcg/views/LCG_99/x86_64-centos7-gcc10-opt/setup.sh; ROOT Version: 6.22/06; Built for linuxx8664gcc on Nov 27 2020, 15:14:08; From tags/v6-22-06@v6-22-06; 14.56user 22.74system 2:30.29elapsed 24%CPU (0avgtext+0avgdata 869920maxresident)k; 14.52user 21.71system 2:08.49elapsed 28%CPU (0avgtext+0avgdata 870036maxresident)k; 14.26user 21.65system 1:13.75elapsed 48%CPU (0avgtext+0avgdata 869908maxresident)k; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc9-opt/setup.sh; ROOT Version: 6.25/01; Built for linuxx8664gcc on Apr 01 2021, 03:35:00; From heads/master@v6-25-01-520-g875e8fb; 14.66user 24.65system 1:47.89elapsed 36%CPU (0avgtext+0avgdata 936048maxresident)k; 14.36user 23.63system 1:15.73elapsed 50%CPU (0avgtext+0avgdata 936036maxresident)k; 17.88user 26.28system 10:23.67elapsed 7%CPU (0avgtext+0avgdata 936052maxresident)k; ```; ### Expected behavior; Once binaries are created, there should be an option for an almost instantaneous run on the next iterations. . ### To Reproduce; All files are in `/afs/cern.ch/user/t/tnanut/public/Stephan/` (neither format is allowed to be attached).; ```py; python3 /afs/cern.ch/user/t/tnanut/public/Stephan/testRooThreshold.py; ```. ### Setup; 1. ROOT version: 6.22/06 and latest nightlies version; 2. Operating system: lxplus; 3. How you obtained ROOT:; Nightlies:; ```; source /cvmfs/sft.cern.ch/lcg/views/dev3/latest/x86_64-centos7-gcc9-opt/setup.sh; ```; 6.22: through LHCb; ```; /cvmfs/lhcbdev.cern.ch/conda/envs/default/2021-02-03_15-01/linux-64/bin/root; ```. ### Additional context; I'd be also interested if you know an alternative method how to implement the class from the .cpp file into python, that can provide nearly instantaneous loading on reruns.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7774:3065,test,testRooThreshold,3065,https://root.cern,https://github.com/root-project/root/issues/7774,1,['test'],['testRooThreshold']
Testability,"ction between long, long long and pointers it works OK on ix86 when compiled with gcc 12. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). ```; Start 54: pyunittests-pyroot-pyz-rdataframe-asnumpy; Start 55: pyunittests-pyroot-pyz-rdataframe-makenumpy; 134/1231 Test #55: pyunittests-pyroot-pyz-rdataframe-makenumpy ......................... Passed 10.99 sec; 151/1231 Test #54: pyunittests-pyroot-pyz-rdataframe-asnumpy ........................... Passed 23.56 sec; Start 363: gtest-tree-dataframe-test-dataframe-friends; Start 364: gtest-tree-dataframe-test-dataframe-colnames; Start 365: gtest-tree-dataframe-test-dataframe-cache; 388/1231 Test #364: gtest-tree-dataframe-test-dataframe-colnames ........................ Passed 4.40 sec; Start 366: gtest-tree-dataframe-test-dataframe-callbacks; 389/1231 Test #363: gtest-tree-dataframe-test-dataframe-friends ......................... Passed 10.87 sec; Start 367: gtest-tree-dataframe-test-dataframe-histomodels; 390/1231 Test #366: gtest-tree-dataframe-test-dataframe-callbacks ....................... Passed 8.60 sec; Start 368: gtest-tree-dataframe-test-dataframe-interface; Start 369: gtest-tree-dataframe-test-dataframe-nodes; 392/1231 Test #369: gtest-tree-dataframe-test-dataframe-nodes ........................... Passed 2.13 sec; Start 370: gtest-tree-dataframe-test-dataframe-regression; 393/1231 Test #367: gtest-tree-dataframe-test-dataframe-histomodels ..................... Passed 19.30 sec; Start 371: gtest-tree-dataframe-test-dataframe-utils; 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 37",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:1070,test,test-dataframe-histomodels,1070,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-callbacks', 'test-dataframe-histomodels']"
Testability,"ctionUnloader::RevertTransaction(cling::Transaction*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #24 0x00002b4bd39a4afe in cling::Interpreter::unload(cling::Transaction&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #25 0x00002b4bd3a28bcf in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #26 0x00002b4bd3a2b9b9 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #27 0x00002b4bd39a1b64 in cling::Interpreter::parseForModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""\n#line 1 \""DataFormatsBTauReco_xr dictionary payload\""\n\n#ifndef CMS_DICT_IMPL\n #define CMS_DICT_IMPL 1\n#endif\n#ifndef _REENTRANT\n #define _REENTRANT 1\n#endif\n#ifndef GNUSOURCE\n #define GNUSOURCE 1\n#e""..., header=false, interpreter=0x681b00) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6318; #29 0x00002b4bd3782d71 in TCling::AutoParseImplRecurse (this=0x5628c",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:8318,test,tests,8318,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability,"ctionUnloader::RevertTransaction(cling::Transaction*) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #24 0x00002b4bd39a4afe in cling::Interpreter::unload(cling::Transaction&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #25 0x00002b4bd3a28bcf in cling::IncrementalParser::commitTransaction(llvm::PointerIntPair<cling::Transaction*, 2u, cling::IncrementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > >&, bool) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #26 0x00002b4bd3a2b9b9 in cling::IncrementalParser::Compile(llvm::StringRef, cling::CompilationOptions const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #27 0x00002b4bd39a1b64 in cling::Interpreter::parseForModule(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&) () from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""n#line 1 ""DataFormatsBTauReco_xr dictionary payload""nn#ifndef CMS_DICT_IMPLn #define CMS_DICT_IMPL 1n#endifn#ifndef _REENTRANTn #define _REENTRANT 1n#endifn#ifndef GNUSOURCEn #define GNUSOURCE 1n#e""..., header=false, interpreter=0x681b00) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6318; #29 0x00002b4bd3782d71 in TCling::AutoParseImplRecurse (this=0x5628c0, cls=0xc1cf",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:20244,test,tests,20244,https://root.cern,https://github.com/root-project/root/issues/12771,1,['test'],['tests']
Testability,"ctor.STL_vector.test_vec_const_char_p); Test that creating a std::vector<const char*> does not raise any ... ok; ======================================================================; FAIL: test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/stl_vector.py"", line 19, in test_vec_char_data; self.assertEqual(v.data(), ''.join(elems)); AssertionError: '' != 'abc'; + abc; ----------------------------------------------------------------------; Ran 2 tests in 0.174s; FAILED (failures=1); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### tutorial-dataframe-df006_ranges-py. TypeError: none of the 2 overloaded methods succeeded.; ~~~; 1096/1272 Test #1098: tutorial-dataframe-df006_ranges-py ..................................***Failed 7.50 sec; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/tutorials/dataframe/df006_ranges.py"", line 44, in <module>; d_15_end_3 = d.Range(15, 0, 3); ^^^^^^^^^^^^^^^^^; TypeError: none of the 2 overloaded methods succeeded. Full details:; ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Range(unsigned int end) =>; TypeError: takes at most 1 arguments (3 given); ROOT::RDF::RInterface<ROOT::Detail::RDF::RRange<ROOT::Detail::RDF::RLoopManager>,void> ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager,void>::Range(unsigned int begin, unsigned int end, unsigned int stride = 1) =>; runtime_error: Range: stride must be strictly greater than 0 and end must be greater than begin.; CMake Error at /builddir/build/BUILD/root-6.28.00/redhat-linux-build/RootTestDriver.cmake:232 (message):; error co",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:4737,Test,Test,4737,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,"ctor; $4 = false; (gdb) p isTemplate; $5 = false; ```. If i treat this as a special case and add an explicit test on the type. ```; diff --git a/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx b/bindings/pyr; oot/cppyy/CPyCppyy/src/ProxyWrappers.cxx; index bda60720cf..897d7b4967 100644; --- a/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx; +++ b/bindings/pyroot/cppyy/CPyCppyy/src/ProxyWrappers.cxx; @@ -245,14 +245,21 @@ static int BuildScopeProxyDict(Cppyy::TCppScope_t scope, PyObject* pyclass); ; // for operator[]/() that returns by ref, also add __setitem__; if (setupSetItem) {; - TemplateProxy* pysi = (TemplateProxy*)PyObject_GetAttrString(pyclass, const_cast<char*>(""__setitem__""));; - if (!pysi) {; - pysi = TemplateProxy_New(mtCppName, ""__setitem__"", pyclass);; - PyObject_SetAttrString(pyclass, const_cast<char*>(""__setitem__""), (PyObject*)pysi);; + auto setitemMeth = new CPPSetItem(scope, method);; + PyObject* pysi_o = PyObject_GetAttrString(pyclass, const_cast<char*>(""__setitem__""));; + if (pysi_o && CPPOverload_Check(pysi_o)) {; + ((CPPOverload*)pysi_o)->AdoptMethod(setitemMeth);; }; - if (isTemplate) pysi->AdoptTemplate(new CPPSetItem(scope, method));; - else pysi->AdoptMethod(new CPPSetItem(scope, method));; - Py_XDECREF(pysi);; + else {; + TemplateProxy* pysi = (TemplateProxy*)pysi_o;; + if (!pysi) {; + pysi = TemplateProxy_New(mtCppName, ""__setitem__"", pyclass);; + PyObject_SetAttrString(pyclass, const_cast<char*>(""__setitem__""), (PyObject*)pysi);; + }; + if (isTemplate) pysi->AdoptTemplate(setitemMeth);; + else pysi->AdoptMethod(setitemMeth);; + }; + Py_XDECREF(pysi_o);; }; ; } else {; ```. then i can confirm that the problem goes away, both for the reproducer and; the failing unit tests in the ATLAS build. But this seems ugly,; so maybe there's a better fix. thanks,; sss. ### Reproducer. See attached. ### ROOT version. root-6.28.00-patches. ### Installation method. lcg build. ### Operating system. lxplus9. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13410:6260,test,tests,6260,https://root.cern,https://github.com/root-project/root/issues/13410,1,['test'],['tests']
Testability,"curls default behaviour is to not follow HTTP redirects, resulting in some of the tutorials not functioning as users attempt to operate on HTML error pages rather than valid ROOT files. A specific example prior to this commit would be the URL for ClassificationKeras.py. Since it's impossible to know in advance which URL's might end up having redirects in the future, I've simply added '-L' to every invocation of CURL (including in a few tests) which should prevent any issues in the future and otherwise work exactly the same for files which don't have redirects today. (curl behaviour tested on Ubuntu 20.04)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7725:440,test,tests,440,https://root.cern,https://github.com/root-project/root/pull/7725,2,['test'],"['tested', 'tests']"
Testability,"cy issue in 6.24.0 that is already fixed for the next patch release. The second issue is that `MathCore.pcm` fails to build with:. ```bash; <<< cling interactive line includer >>>: remark: building module 'MathCore' as '/home/cburr/miniconda3/envs/test/lib/MathCore.pcm' [-Rmodule-build]; While building module 'MathCore':; In file included from <module-includes>:3:; In file included from /home/cburr/miniconda3/envs/test/include/Fit/Chi2FCN.h:19:; /home/cburr/miniconda3/envs/test/include/Fit/FitUtil.h:404:23: error: no matching constructor for initialization of 'std::vector<double>'; std::vector<double> ones{1, 1, 1, 1};; ^ ~~~~~~~~~~~~~~~~; ```. I can workaround this by using four `ones.push_back(1.0);` lines instead of initialising it as ones though it doesn't explain why this fails. Finally after fixing this it, running `root.exe -b -l -q -e '1+1' -x` repeatedly continues to rebuild modules, e.g. on the second iteration:. ```; <<< cling interactive line includer >>>: remark: building module 'Minuit' as '/home/cburr/miniconda3/envs/test/lib/Minuit.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'Minuit' [-Rmodule-build]; Module a����2V`^��2V`X��2V�N��2VPP��2V��x�2V@!`�k�2V@�:�2V` not found.; Module test__CLING__GNUC__ct_int81����2V���2V-in-extern-ce not found.; Module includeit.pcm not found.; Module lib not found.; Module P�w�P�w� ���2V��'�2V0b(�2V��:�2V���2V����2V�:�2V not found.; Module ���2V@)����2V not found.; Module TFitter not found.; Module; )��o�~�'��'�@5��(�L)�B5��(��)�J5��(�$ not found.; <<< cling interactive line includer >>>: remark: building module 'Genetic' as '/home/cburr/miniconda3/envs/test/lib/Genetic.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'Genetic' [-Rmodule-build]; Module ROOTGpadv7 not found.; Module ���2V8���2V not found.; Module ��=\u��&���g|��Xϭ)��ۡc}n?�ʾ��v� @Eǉ7VP\�2 not found.; Module Ц~�����2V D not found.; Module mi not found",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:2800,test,test,2800,https://root.cern,https://github.com/root-project/root/issues/8518,1,['test'],['test']
Testability,d ... But may be it should be ? ... at least the current code is not consistent: ; ```; tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; ,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1207,log,logger,1207,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,"d `runit` script to configure, build, and execute the tests. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->. 1. Problem verified on 6.24/06 and 6.25/02.; 2. SLF7.; 3. ROOT was compiled for UPS, configured using FNAL/art standard options. See attached ROOT build logs for details. ### Additional context; <!--; Add any other context about the problem here.; -->. The showstopper issue appears to be that when looking for information about `gallery::Event` (defined in an ""old-style"" dictionary rather than a C++ module), it mistakenly identifies the TMVA module as providing `Event` and never loads the dictionary containing the definition for `gallery::Event`. This issue does not occur if we look for the aliased `gallery::GalleryEvent` instead, nor if `runtime_cxxmodules=OFF`. In addition, when `runtime_cxxmodules=ON`—even for the ""good"" case—I get many messages of the form:; ```Console; Error in <TCling::RegisterRdictForLoadPCM>: Rdict '/scratch/greenc/products/root/v6_25_02/Linux64bit+3.10-2.17-e20-p399-debug/lib/libNet_rdict.pcm' is both in Module extension and in File system.; ```. This may be due to the presence of `dev=ON`, `asserts=ON`, `CMAKE_BUILD_TYPE=Debug`, `LLVM_BUILD_TYPE=Debug` or `LLVM_ENABLE_ASSERTIONS=ON`, but regardless: is this a real error, or indicative of another (or the same) bug, or should this be ignored by the art infrastructure which would otherwise convert it to a fatal exception?. ### Attached files:. * [build_root-v6_25_02-e20-p399-debug.log.gz](https://github.com/root-project/root/files/7872239/build_root-v6_25_02-e20-p399-debug.log.gz); * [build_root-v6_25_02-e20-p399-debug-runtime_cxxmodules.log.gz](https://github.com/root-project/root/files/7872240/build_root-v6_25_02-e20-p399-debug-runtime_cxxmodules.log.gz); * [runtime_cxxmodules-reproducer.tar.gz](https://github.com/root-project/root/files/7872241/runtime_cxxmodules-reproducer.tar.gz)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9583:2424,assert,asserts,2424,https://root.cern,https://github.com/root-project/root/issues/9583,5,"['assert', 'log']","['asserts', 'log']"
Testability,"d by ACLiC (for example) running the script:; ```python; import ROOT. ROOT.gSystem.Load(""enums_cxx""). h = ROOT.Holder(); for i in range(10, 0, -1):; h.SetTwo(i); ROOT.to_string(h.two); ```; gives; ```txt; Calling to_string for enum EOne with 0; Calling to_string for enum EOne with 1; ...; ```. I.e. even-though the argument is an 'enum ETwo', the overload take an `enum EOne` actually called. In the original example (requires the code for Celeritas and VecGeom to build). For a similar script:; ```python; for i in range(0, 14, 1):; p.process_class = i; ROOT.celeritas.to_cstring(p.process_class); ```; I get:. ```txt; to_cstring ImportPhysicsVectorType called with 0 unknown; to_cstring ImportPhysicsVectorType called with 1 linear; to_cstring ImportPhysicsVectorType called with 2 log; to_cstring ImportPhysicsVectorType called with 3 free; to_cstring ImportTableType called with 4 ionisation_subsec; to_cstring ImportTableType called with 5 csda_range; to_cstring ImportTableType called with 6 range; to_cstring ImportTableType called with 7 secondary_range; to_cstring ImportTableType called with 8 inverse_range; to_cstring ImportTableType called with 9 lambda; to_cstring ImportTableType called with 10 sublambda; to_cstring ImportTableType called with 11 lambda_prim; to_cstring ImportProcessType called with 12 ucn; to_cstring ImportProcessClass called with 13 annihilation; ```. i.e. the *same* code line given the *same* data members (and thus always the *same* type), call 3 different overloads over the loop iterations. (Funnily running the loop in reverse order leads to the expected/correct executions). I could not reproduce this instability with my simple example. . ```c++; #include <stdio.h>; #include <string>. enum class EOne; {; a,; b,; c,; d; };. enum class ETwo; {; a = 2,; b,; c,; d; };. enum class EThree; {; a = 3,; b,; c,; d; };. struct Holder; {; EOne one;; ETwo two;; EThree three;. void SetTwo(int value); {; two = (ETwo)value;; }; };. std::string to_string(EOne value)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7077:1026,log,log,1026,https://root.cern,https://github.com/root-project/root/issues/7077,1,['log'],['log']
Testability,"d for the install with relative paths, so use these; get_filename_component(_ROOT_INCLUDE_DIRS ""${_thisdir}/../../../include"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_INCLUDE_DIRS ""${_ROOT_INCLUDE_DIRS}"" REALPATH). # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_LIBRARY_DIR ""${_thisdir}/../../root"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_LIBRARY_DIR ""${_ROOT_LIBRARY_DIR}"" REALPATH). # ROOT configured for the install with relative paths, so use these; get_filename_component(_ROOT_BINDIR ""${_thisdir}/../../../bin"" REALPATH). # resolve relative paths to absolute system paths; get_filename_component(ROOT_BINDIR ""${_ROOT_BINDIR}"" REALPATH). # Deprecated value, please don't use it and use ROOT_BINDIR instead.; get_filename_component(ROOT_BINARY_DIR ""${ROOT_BINDIR}"" REALPATH); ```; - CMake runtime check:; ```bash; $ cmake --find-package -DNAME=ROOT -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=EXIST --log-level=DEBUG -N --trace-expand 2>&1 | grep ROOT_BIN; /usr/lib64/cmake/ROOT/ROOTConfig.cmake(83): get_filename_component(_ROOT_BINDIR /usr/lib64/cmake/ROOT/../../../bin REALPATH ); /usr/lib64/cmake/ROOT/ROOTConfig.cmake(87): get_filename_component(ROOT_BINDIR /usr/bin REALPATH ); /usr/lib64/cmake/ROOT/ROOTConfig.cmake(91): get_filename_component(ROOT_BINARY_DIR /usr/bin REALPATH ). $ cmake --find-package -DNAME=ROOT -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=EXIST --log-level=DEBUG -N --trace-expand 2>&1 | grep ROOT_INC; /usr/lib64/cmake/ROOT/ROOTConfig.cmake(67): get_filename_component(_ROOT_INCLUDE_DIRS /usr/lib64/cmake/ROOT/../../../include REALPATH ); /usr/lib64/cmake/ROOT/ROOTConfig.cmake(71): get_filename_component(ROOT_INCLUDE_DIRS /usr/include REALPATH ). $ cmake --find-package -DNAME=ROOT -DCOMPILER_ID=GNU -DLANGUAGE=CXX -DMODE=EXIST --log-level=DEBUG -N --trace-expand 2>&1 | grep ROOT_LIB; /usr/lib64/cmake/ROOT/ROOTConfig.cmake",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5084:2112,log,log-level,2112,https://root.cern,https://github.com/root-project/root/pull/5084,1,['log'],['log-level']
Testability,"d frameworks. The commit history also contains the proof of concept version, the benchmark results of which were presented at [ACAT19](https://indico.cern.ch/event/708041/contributions/3276177/) and [CHEP19](https://doi.org/10.1051/epjconf/202024506027) (and [preliminary results at the 2018 ROOT Users workshop in Sarajevo](https://indico.cern.ch/event/697389/contributions/3062028/)). That version was redesigned starting from 2019 to better integrate with the rest of the code and at the same time untangle the test statistics classes to conceptually bring them closer to the math, instead of the more implementation-detail oriented existing design (RooAbsTestStatistic et al.). The new packages include the following tests, which should probably still be added to the testing infrastructure somehow:. 1. MultiProcess:; 1. test_RooFitMultiProcess_Messenger; 2. test_RooFitMultiProcess_ProcessManager; 3. test_RooFitMultiProcess_Job; 2. TestStatistics:; 1. testLikelihoodGradientJob; 2. testLikelihoodSerial; 3. testRooRealL; 3. RooFitZMQ:; 1. test_RooFitZMQ; 2. test_RooFitZMQ_polling; 3. test_RooFitZMQ_HWM; 4. test_RooFitZMQ_load_balancing; 4. RooFitCore:; 1. testRooGradMinimizer; 2. testBidirMMapPipe; 3. testMPFEnll. From my side (and that of the NL eScience Center), the project has ended and time has run out to make any further major contributions to it, except, of course finishing this PR and providing help to get it working and to possibly hand over further development :). Here are some notes for possible future work:; - RooFitZMQ includes an extension of ZeroMQ itself: a ppoll function. This function should ideally be contributed to ZeroMQ, but I have had no time for this. The motivation behind ppoll is given in this [blog post](https://blog.esciencecenter.nl/combining-zeromq-posix-signals-b754f6f29cd6).; - At the last moment, I decided to reimplement part of the Queue functionality. The task distribution and parameter updating functionalities are now done directly using app",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8294:4248,test,testLikelihoodSerial,4248,https://root.cern,https://github.com/root-project/root/pull/8294,1,['test'],['testLikelihoodSerial']
Testability,"d from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:524:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:1958,assert,assert,1958,https://root.cern,https://github.com/root-project/root/pull/5627,2,['assert'],['assert']
Testability,"d here; module ""memory_resource"" [optional] {; ^; input_line_1:1:10: fatal error: could not build module 'std'; #include <new>; ~~~~~~~~^; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /opt/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:; In file included from <module-includes>:1:; /opt/root_build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: fatal error: could not build module 'std'; #include <string>; ~~~~~~~~^; /opt/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error: could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from input_line_3:1:; In file included from /opt/root_build/etc/cling/lib/clang/13.0.0/include/assert.h:8:; In file included from /usr/include/assert.h:35:; In file included from /usr/include/features.h:515:; /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /opt/root_build/include/Rtypes.h:23:; In file included from <module-includes>:1:; /opt/root_build/include/RtypesCore.h:28:10: fatal error: could not build module 'std'; #include <cstddef> // size_t, NULL; ~~~~~~~~^; /opt/root_build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /opt/root_build/include/Rtypes.h:195:; In file included from <module-includes>:2:; /opt/root_build/include/ROOT/RStringView.hxx:25:10: fatal error: could not build module 'std'; #include <string_view>; ~~~~~~~~^; Error: Error loading the default ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13450:2467,assert,assert,2467,https://root.cern,https://github.com/root-project/root/issues/13450,1,['assert'],['assert']
Testability,"d it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because I have other versions of LLVM/Clang in the system, z3 got installed and picked up by the builtin LLVM from the ROOT build. Ideally, this sort of behavior of automatically picking whatever is installed on the system should be avoided, as it can cause problems, so I recommend looking into the configuration of the builtin LLVM more closely and either disabling z3 if not used, or adding it to the dependencies of ROOT and enabling by force. - Test tutorial-v7-ntuple-ntpl005_introspection failure is related to uring support, is that tested in nightlies? It could also be a permissions issue that I don't have configured properly, I don't know.; ```sh; Start 995: tutorial-v7-ntuple-ntpl005_introspection; 7/18 Test #995: tutorial-v7-ntuple-ntpl005_introspection ...........***Failed 1.57 sec; ...; terminate called after throwing an instance of 'std::runtime_error'; what(): Fatal Error: failed to allocate memory for the smallest possible io_uring instance. 'memlock' memory has been exhausted for this user; CMake Error at /srv/root/build/RootTestDriver.cmake:237 (message):; error code: Subprocess aborted; ```; - The dataframe tests all fail with something like this; ```sh; Processing /srv/root/src/roottest/root/dataframe/test_ctors.C+...; Info in <TUnixSystem::ACLiC>: creating shared library /srv/root/build/roottest/root/dataframe/test_ctors_C.so; /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: _ZTISt16invalid_argument: invalid version 7 (max 0); /usr/lib/gcc/x86_64-pc-linux-gnu/8.4.0/../../../../x86_64-pc-linux-gnu/bin/ld: /srv/root/build/roottest/root/dataframe/par: error adding symbols: bad value; collect2: error: ld returned 1 exit status; ```; Could it be a mismatch between Clang and GCC ABIs? Or maybe an issue with my linker? (I am using binutils version 2.35.2). Please let me know if you have any questions.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:4360,test,tests,4360,https://root.cern,https://github.com/root-project/root/issues/7936,1,['test'],['tests']
Testability,"d); 	994 - tutorial-v7-ntuple-ntpl005_introspection (Failed); 	1335 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1336 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1437 - roottest-python-pickle-read (Failed); 	1496 - roottest-root-dataframe-regression_snapshot (Failed); 	1499 - roottest-root-dataframe-test_snapshot (Failed); 	1500 - roottest-root-dataframe-test_stringfiltercolumn (Failed); 	1501 - roottest-root-dataframe-test_glob (Failed); 	1502 - roottest-root-dataframe-test_reduce (Failed); 	1513 - roottest-root-dataframe-ctors (Failed); ```. *__Update__: JupyROOT tests using wrong Python version were due to a configuration issue in jupyter on my machine. Please ignore those. For the other tests, I repeated the build with GCC 10.3 and I still see the same failures.*. Please click [here](https://github.com/root-project/root/files/6343199/output.txt) for the full output for each test.; Some things to note:. - Test pyunittests-pyroot-import-load-libs fails with; ```sh; ERROR: test_import (import_load_libs.ImportLoadLibs); Test libraries loaded after importing ROOT; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/srv/root/src/root/bindings/pyroot/pythonizations/test/import_load_libs.py"", line 117, in test_import; raise Exception('Found not whitelisted libraries after importing ROOT:' \; Exception: Found not whitelisted libraries after importing ROOT:; - libz3; If the test fails with a library that is loaded on purpose, please add it to the whitelist.; ```; Note that z3 is a library used by LLVM. It may be that because I have other versions of LLVM/Clang in the system, z3 got installed and picked up by the builtin LLVM from the ROOT build. Ideally, this sort of behavior of automatically picking whatever is installed on the system should be avoided, as it can cause problems, so I recommend looking into the configuration of the builtin LLVM more closely and either disabling z",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:2543,Test,Test,2543,https://root.cern,https://github.com/root-project/root/issues/7936,1,['Test'],['Test']
Testability,"d6.cxx:9; ===========================================================. The lines below might hint at the cause of the crash.; You may get help by asking at the ROOT forum http://root.cern.ch/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at http://root.cern.ch/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #5 0x00007fc0d9056288 in TPad::Close(char const*) () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #6 0x00007fc0d905f746 in TPad::~TPad() [clone .part.0] () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #7 0x00007fc0d905f919 in TPad::~TPad() () from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3python3/Fri/x86_64-centos7-gcc10-opt/lib/libGpad.so; #8 0x000000000040124b in main (argc=<optimized out>, argv=<optimized out>) at /test/pad6.cxx:9; ===========================================================. ```. ## Expected behavior; No crash. ## To Reproduce; Code ; ```; #include <TCanvas.h>. int main(int argc, char **argv) {; TCanvas* C= new TCanvas(""cnvas"",""canvas"",1024,768);; C->cd();; TPad* c= new TPad();; c->SetPad(0,0,1,1);; c->cd(1);; delete c;; delete C;; return 0;; }. ```; Compile; ```; g++ pad6.cxx $(root-config --glibs --cflags --libs) -o pad6 -g; ```. Run; ```; ./pad6; ```. ## Setup; EPEL ROOT 62202/gcc485/CentOS7; ROOT night buil/gcc10/lxplus; ; ## Additional context; Possible fix in Tpad::Close; Replace; ```; if (fCanvas->GetPadSave() == this); fCanvas->ClearPadSave();; if (fCanvas->GetSelectedPad() == this); fCanvas->SetSelectedPad(0);; if (fCanvas->GetClickSelectedPad() == this); fCanvas->SetClickSelectedPad(0);; ```; with. ```; if (fCanvas); {; if (fCanvas->GetPadSave() == this); fCanvas->ClearPadSave();; if (fCanvas->GetSelectedPad() == this); fCanvas->SetSe",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6453:2414,test,test,2414,https://root.cern,https://github.com/root-project/root/issues/6453,1,['test'],['test']
Testability,"d_wait (cond=0xbf9af3bc, mutex=0xbf9af424) at pthread_cond_wait.c:655; #4 0xb69c905e in std::condition_variable::wait(std::unique_lock<std::mutex>&) () from /lib/i386-linux-gnu/libstdc++.so.6; #5 0x0047e8d7 in std::condition_variable::wait<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()>::<lambda()> >(std::unique_lock<std::mutex> &, TThreadedObject_GetNSlots_Test::<lambda()>::<lambda()>) (this=0xbf9af3bc, __lock=..., __p=...) at /usr/include/c++/8/condition_variable:99; #6 0x0047e11a in TThreadedObject_GetNSlots_Test::<lambda()>::operator()(void) const (__closure=0xa1e00674); at /home/sftnight/build/wsincrmaster/LABEL/ROOT-debian10-i386/SPEC/cxx14/root/core/thread/test/testTThreadedObject.cxx:167; #7 0x0047f5fc in std::__invoke_impl<void, TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(std::__invoke_other, TThreadedObject_GetNSlots_Test::<lambda()> &&) (; __f=...) at /usr/include/c++/8/bits/invoke.h:60; #8 0x0047f2b8 in std::__invoke<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> >(TThreadedObject_GetNSlots_Test::<lambda()> &&) (__fn=...); at /usr/include/c++/8/bits/invoke.h:95; #9 0x00480966 in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::_M_invoke<0>(std::_Index_tuple<0>) (this=0xa1e00674); at /usr/include/c++/8/thread:244; #10 0x0048090b in std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > >::operator()(void) (this=0xa1e00674); at /usr/include/c++/8/thread:253; #11 0x004808c1 in std::thread::_State_impl<std::thread::_Invoker<std::tuple<TThreadedObject_GetNSlots_Test::TestBody()::<lambda()> > > >::_M_run(void) (this=0xa1e00670); at /usr/include/c++/8/thread:196; #12 0xb69cef1d in ?? () from /lib/i386-linux-gnu/libstdc++.so.6; #13 0xb6ab2fd2 in start_thread (arg=<optimized out>) at pthread_create.c:486; #14 0xb67236d6 in clone () at ../sysdeps/unix/sysv/linux/i386/clone.S:108. Thread 1 (Thread 0xb64429c0 (LWP 4562)):; #0 0xb7fa1d61 in __kernel_vsyscall ();",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5596:1667,Test,TestBody,1667,https://root.cern,https://github.com/root-project/root/pull/5596,1,['Test'],['TestBody']
Testability,dataframe-test-dataframe-interface ....................... Passed 21.83 sec; Start 378: gtest-tree-dataframe-test-dataframe-vecops; 401/1231 Test #378: gtest-tree-dataframe-test-dataframe-vecops .......................... Passed 3.95 sec; Start 379: gtest-tree-dataframe-test-dataframe-snapshot; 402/1231 Test #377: gtest-tree-dataframe-test-dataframe-helpers ......................... Passed 8.48 sec; Start 380: gtest-tree-dataframe-test-dataframe-display; 403/1231 Test #365: gtest-tree-dataframe-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dataframe-test-dataframe-take; 407/1231 Test #382: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataframe-test-dataframe-entrylist; 408/1231 Test #385: gtest-tree-dataframe-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtes,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:3652,test,test-dataframe-take,3652,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-leaves', 'test-dataframe-take']"
Testability,dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:5017,test,test-datasource-csv,5017,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-vary', 'test-datasource-csv']"
Testability,dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-dataframe-test-datasource-sqlite; 419/1231 Test #395: gtest-tree-dataframe-test-datasource-ntuple ......................... Passed 1.80 sec; Start 397: pyunittests-dataframe-misc; 420/1231 Test #393: gtest-tree-dataframe-test-datasource-csv ............................ Passed 3.56 sec; Start 398: pyunittests-dataframe-histograms; 421/1231 Test #391: gtest-tree-dataframe-test-datasource-trivial ........................ Passed 6.48 sec; Start 399: pyunittests-dataframe-cache; 422/1231 Test #396: gtest-tree-dataframe-test-datasource-sqlite ......................... Passed 4.60 sec; Start 400: pyunittests-dataframe-merge-results; 423/1231 Test #397: pyunittests-dataframe-misc .......................................... Passed 3.66 sec; 424/1231 Test #398: pyunittests-dataframe-histograms .................................... Passed 3.40 sec; 444/1231 Test #400: pyu,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:5345,test,test-datasource-ntuple,5345,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-datasource-more', 'test-datasource-ntuple']"
Testability,"de <new>; ^; input_line_1:1:10: remark: finished building module 'std' [-Rmodule-build]; input_line_2:1:10: remark: building module 'Cling_Runtime' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime.pcm' [-Rmodule-build]; #include ""cling/Interpreter/RuntimeUniverse.h""; ^; While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:3:; /home/cburr/miniconda3/envs/test/etc//cling/Interpreter/DynamicLookupRuntimeUniverse.h:16:10: remark: building module 'Cling_Runtime_Extra' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime_Extra.pcm' [-Rmodule-build]; #include ""cling/Interpreter/DynamicExprInfo.h""; ^; ```. I don't know if ROOT is supposed to be able to recover from this but I run in to three issues, the first is the known `tbb` dependency issue in 6.24.0 that is already fixed for the next patch release. The second issue is that `MathCore.pcm` fails to build with:. ```bash; <<< cling interactive line includer >>>: remark: building module 'MathCore' as '/home/cburr/miniconda3/envs/test/lib/MathCore.pcm' [-Rmodule-build]; While building module 'MathCore':; In file included from <module-includes>:3:; In file included from /home/cburr/miniconda3/envs/test/include/Fit/Chi2FCN.h:19:; /home/cburr/miniconda3/envs/test/include/Fit/FitUtil.h:404:23: error: no matching constructor for initialization of 'std::vector<double>'; std::vector<double> ones{1, 1, 1, 1};; ^ ~~~~~~~~~~~~~~~~; ```. I can workaround this by using four `ones.push_back(1.0);` lines instead of initialising it as ones though it doesn't explain why this fails. Finally after fixing this it, running `root.exe -b -l -q -e '1+1' -x` repeatedly continues to rebuild modules, e.g. on the second iteration:. ```; <<< cling interactive line includer >>>: remark: building module 'Minuit' as '/home/cburr/miniconda3/envs/test/lib/Minuit.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'Minuit' [-Rmodule-build]; Module a��",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:2000,test,test,2000,https://root.cern,https://github.com/root-project/root/issues/8518,1,['test'],['test']
Testability,dedent does not work because {log} is not indented. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12562:30,log,log,30,https://root.cern,https://github.com/root-project/root/pull/12562,2,"['log', 'test']","['log', 'tested']"
Testability,defect when drawing multiple histograms with Log Y axis,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12394:45,Log,Log,45,https://root.cern,https://github.com/root-project/root/issues/12394,1,['Log'],['Log']
Testability,"dex 7a094cc01f..d74c69aa2b 100644; --- a/tree/dataframe/inc/ROOT/RDataFrame.hxx; +++ b/tree/dataframe/inc/ROOT/RDataFrame.hxx; @@ -73,4 +73,6 @@ namespace cling {; std::string printValue(ROOT::RDataFrame *tdf);; } // ns cling; ; +static ROOT::RDataFrame thisWillBeBadForTheModulesIdx(17);; +; #endif // ROOT_RDATAFRAME; ```. This causes; ```; [522/527] Generating lib/modules.idx; [runStaticInitializersOnce]: Failed to materialize symbols: { (main, { __cxx_global_var_initcling_module_1_.2, __cxx_global_var_initcling_module_1_, _ZL29thisWillBeBadForTheModulesIdx, _ZN4ROOT8InternalL13gVersionCheckE, $.cling-module-1.__inits.0, _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv, _ZNSt10shared_ptrIN4ROOT6Detail3RDF12RLoopManagerEED2Ev, _ZNSt12__shared_ptrIN4ROOT6Detail3RDF12RLoopManagerELN9__gnu_cxx12_Lock_policyE2EED2Ev, _ZN4ROOT10RDataFrameD2Ev, _ZN4ROOT3RDF10RInterfaceINS_6Detail3RDF12RLoopManagerEvED2Ev, _ZN4ROOT10RDataFrameD1Ev, _ZN4ROOT3RDF14RInterfaceBaseD2Ev, _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE19_M_release_last_useEv, _GLOBAL__sub_I_cling_module_1, _ZNSt10shared_ptrIN4ROOT6Detail3RDF12RLoopManagerEED1Ev, _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED2Ev, _ZStL8__ioinit, __cxx_global_var_initcling_module_1_.1, _ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv, __orc_init_func.cling-module-1, _ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE2EED1Ev }) }. [523/527] Generating tutorials/hsimple.root. Processing hsimple.C...; hsimple : Real Time = 0.04 seconds Cpu Time = 0.04 seconds; (TFile *) 0x56335b1cf6e0; [527/527] Linking CXX executable tree/dataframe/test/dataframe_simple; ```. As you can see, the RDataFrame library is built happily, no missing symbols. Yet the JIT complains because it cannot load the library. ### ROOT version. master + modification. ### How did you install ROOT?. built myself. ### Which operating system are you using?. Ubuntu 22.04. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12988:2360,test,test,2360,https://root.cern,https://github.com/root-project/root/issues/12988,1,['test'],['test']
Testability,"dian issues.; There are way fewer failures in 6.28.00 than in earlier versions, this report is about remaining ones. ### Expected behavior. RNTuple should work for big-endian too. ### To Reproduce. 1. Build root 6.28.00 for s390x; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora Linux on s390x, RHEL+EPEL on s390x; 3. Compilation from source. ### Additional context. The failing tests . #### gtest-tree-ntuple-v7-test-ntuple-basics. Fatal: nread == nbytes violated; ~~~; 474/1272 Test #421: gtest-tree-ntuple-v7-test-ntuple-basics .............................***Failed 63.64 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 17 tests from 2 test suites.; [----------] Global test environment set-up.; [----------] 13 tests from RNTuple; [ RUN ] RNTuple.ReconstructModel; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.ReconstructModel (160 ms); [ RUN ] RNTuple.MultipleInFile; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:1080,test,tests,1080,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['tests']
Testability,"dir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 151, in test_transpose; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ----------------------------------------------------------------------; Ran 11 tests in 2.036s; FAILED (failures=3); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### pyunittests-pyroot-pyz-stl-vector; ~~~; 61/1272 Test #18: pyunittests-pyroot-pyz-stl-vector ...................................***Failed 0.84 sec; test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Python string ... FAIL; test_vec_const_char_p (stl_vector.STL_vector.test_vec_const_char_p); Test that creating a std::vector<const char*> does not raise any ... ok; ======================================================================; FAIL: test_vec_char_data (stl_vector.STL_vector.test_vec_char_data); Test that calling std::vector<char>::data() returns a Py",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:3072,test,test,3072,https://root.cern,https://github.com/root-project/root/issues/12429,1,['test'],['test']
Testability,"discussion [here](https://root-forum.cern.ch/t/error-in-tcollectionlessstlreader-getcp-read-error-in-tbranchproxy/47178). During the event loop over the friend `TTree` with `ROOT.EnableImplicitMT()` enabled using `RDataFrame` at some point, many errors pop up:; `Error in <TCollectionLessSTLReader::GetCP()>: Read error in TBranchProxy.`. I couldn't reproduce this behavior with manually produced fresh root files, so I assume something might have gone wrong with a root file itself during the creation.. However, without using ""Friend"" `TTree` or with `TTree` with `ROOT.EnableImplicitMT()` disabled, the file is analized correctly without any errors. This makes me wonder is this is a bug, or what is an explanation for such a behavior?. ### Expected behavior. No errors should appear... ### To Reproduce. Run following code snippet:. ```; import ROOT; # Commenting MT line makes this example work; ROOT.EnableImplicitMT(). ch = ROOT.TChain(""lumical""); ch.Add(""test_default.root""); ch.AddFriend(""emv=lumical"", ""test_emv.root""); # Adding test_emv.root as the only one but not as a friend, also works...; # ch = ROOT.TChain(""lumical""); # ch.Add(""test_emv.root""). h_emv = ROOT.RDataFrame(ch).Filter(""if (rdfentry_ % 500000 == 0){cout<<rdfentry_<<endl;} return true;"")\; .Histo1D((""h_emv"", ""emv"", 100, -100, 100), ""emv.mc_cont_posy"" ); h_emv.Draw(); input(""wait""); ```. The links for the root files:; https://syncandshare.desy.de/index.php/s/2Lf6469S22sYt3T. ### Setup; Tested with:; `source /cvmfs/sft.cern.ch/lcg/views/LCG_100rc2/x86_64-centos7-gcc10-opt/setup.sh`. 1. ROOT version 6.24/00; 2. Operating system Centos7; 3. Python 3.8.6. ### Additional context. After stopping and killing the job which produces errors above, restarting the script can sometimes produce following error:; `Error in <TTreeReaderArrayBase::GetBranchAndLeaf()>: The tree does not have a branch called emv.mc_cont_posy. You could check with TTree::Print() for available branches.`. Which disappears on the next relaunch...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9106:1557,Test,Tested,1557,https://root.cern,https://github.com/root-project/root/issues/9106,1,['Test'],['Tested']
Testability,"distributed RDataFrame tests that use `pyspark` will report `ResourceWarning`s like the ones seen here; https://lcgapp-services.cern.ch/root-jenkins/job/root-nightly-master/LABEL=ROOT-ubuntu18.04,SPEC=nortcxxmod,V=master/2956/testReport/projectroot.roottest.python/distrdf/roottest_python_distrdf_spark_test_reducer_merge/. This kind of warning is apparently common in Python unittests that use socket, both with [pyspark](https://stackoverflow.com/questions/49361286/unittesting-with-pyspark-unclosed-socket-warnings) and [others](https://stackoverflow.com/questions/14938716/socket-resourcewarning-using-urllib-in-python-3). The reason they are shown is that in Python3 the unittest module has been updated to use the ""default"" level of warnings filters, as mentioned [in the docs](https://docs.python.org/3.5/library/warnings.html#updating-code-for-new-versions-of-python). For the particular case of `pyspark`, these warnings are actually present in any application that uses the same ""default"" level:; ```py; $: cat sparktest.py ; import pyspark; import warnings. warnings.simplefilter(""default"", ResourceWarning). sc = pyspark.SparkContext.getOrCreate(). sc.parallelize([1,2,3,4,5]).map(lambda x: 1).reduce(lambda x,y: x+y); ```. ```bash; $: python sparktest.py ; 21/08/30 11:04:59 WARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable; Using Spark's default log4j profile: org/apache/spark/log4j-defaults.properties; Setting default log level to ""WARN"".; To adjust logging level use sc.setLogLevel(newLevel). For SparkR, use setLogLevel(newLevel).; /usr/lib64/python3.8/socket.py:740: ResourceWarning: unclosed <socket.socket fd=7, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6, laddr=('127.0.0.1', 35374), raddr=('127.0.0.1', 36167)>; self._sock = None; ResourceWarning: Enable tracemalloc to get the object allocation traceback; ```. This commit adds an extra call in the setup part of unittests that",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8938:23,test,tests,23,https://root.cern,https://github.com/root-project/root/pull/8938,2,['test'],"['testReport', 'tests']"
Testability,"dition is false in /opt/root_src/core/cont/src/TRefArray.cxx:379; 9: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:379; 10: Calling 'TRefArray::AddLast' in /opt/root_src/core/cont/src/TRefArray.cxx:393; 11: Calling 'TRefArray::AddAtAndExpand' in /opt/root_src/core/cont/src/TRefArray.cxx:284; 12: 'obj' is non-null in /opt/root_src/core/cont/src/TRefArray.cxx:337; 13: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:337; 14: Assuming 'idx' is >= field 'fLowerBound' in /opt/root_src/core/cont/src/TRefArray.cxx:338; 15: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:338; 16: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:342; 17: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:342; 18: 'uid' declared without an initial value in /opt/root_src/core/cont/src/TRefArray.cxx:346; 19: Calling 'TRefArray::GetObjectUID' in /opt/root_src/core/cont/src/TRefArray.cxx:347; 20: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 21: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 22: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 23: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:211; 24: Taking false branch in /opt/root_src/core/cont/src/TRefArray.cxx:211; 25: Calling 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 26: Assuming the condition is true in /opt/root_src/core/base/inc/TObject.h:187; 27: Returning the value 1, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 28: Returning from 'TObject::TestBit' in /opt/root_src/core/cont/src/TRefArray.cxx:213; 29: Taking true branch in /opt/root_src/core/cont/src/TRefArray.cxx:213; 30: Assuming the condition is false in /opt/root_src/core/cont/src/TRefArray.cxx:214; 31: 'valid' is false in /opt/root_src/core/cont/src/TRefArray.cxx:215; 32: Taki",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7424:18132,Test,TestBit,18132,https://root.cern,https://github.com/root-project/root/issues/7424,1,['Test'],['TestBit']
Testability,"dition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1810; 39: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1810; 40: Calling 'TClassRef::operator TClass *' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 41: Assuming field 'fClassPtr' is null in /opt/root_src/core/meta/inc/TClassRef.h:74; 42: Left side of '&&' is false in /opt/root_src/core/meta/inc/TClassRef.h:74; 43: Returning pointer, which participates in a condition later in /opt/root_src/core/meta/inc/TClassRef.h:74; 44: Returning from 'TClassRef::operator TClass *' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 45: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 46: Left side of '&&' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 47: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 48: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 49: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 50: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 51: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1828; 52: '?' condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1828; 53: Assuming 'rule' is non-null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 54: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 55: 'targets' initialized here in /opt/root_src/io/io/src/TStreamerInfo.cxx:1843; 56: Assuming 'targets' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 57: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 58: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1847; /opt/root_src/io/io/src/TStreamerInfo.cxx:2408:50: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 2: Assuming ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:106504,Test,TestBit,106504,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"doption); Test correct adoption of different datatypes ... ok; test_memoryLayout (rtensor.ArrayInterface.test_memoryLayout); Test adoption of the memory layout ... ok; test_ownData (rtensor.ArrayInterface.test_ownData); Test ownership of adopted numpy array ... ok; test_dtypes (rtensor.AsRTensor.test_dtypes); Test adoption of numpy arrays with different data types ... ok; test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout ... FAIL; test_strides (rtensor.AsRTensor.test_strides); Test adoption of the strides ... ok; test_expandDims (rtensor.NumpyCompliance.test_expandDims); Test np.expand_dims vs RTensor::ExpandDims ... ok; test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape ... FAIL; test_slice (rtensor.NumpyCompliance.test_slice); Test slicing operations ... ok; test_squeeze (rtensor.NumpyCompliance.test_squeeze); Test np.squeeze vs RTensor::Squeeze ... ok; test_transpose (rtensor.NumpyCompliance.test_transpose); Test np.transpose vs RTensor::Transpose ... FAIL; ======================================================================; FAIL: test_memoryLayout (rtensor.AsRTensor.test_memoryLayout); Test adoption of the memory layout; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 42, in test_memoryLayout; self.assertEqual(root_obj.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ======================================================================; FAIL: test_reshape (rtensor.NumpyCompliance.test_reshape); Test np.reshape vs RTensor::Reshape; ----------------------------------------------------------------------; Traceback (most recent call last):; File ""/builddir/build/BUILD/root-6.28.00/bindings/pyroot/pythonizations/test/rtensor.py"", line 218, in test_reshape; self.assertEqual(x.GetMemoryLayout(), 1); AssertionError: 16777216 != 1; ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12429:1720,Test,Test,1720,https://root.cern,https://github.com/root-project/root/issues/12429,1,['Test'],['Test']
Testability,"ds/v6-28-00-patches@v6-28-04-96-g9248a09 |; | With g++ (GCC) 12.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] std::span<int> s; (std::span<int> &) {}; root [1] ; ```; which looks wrong to me. ### What is the expected behaviour?. `__has_include(<span>)` should evaluate to false in C++17 builds. ### How to reproduce?. from lxplus.cern.ch; ```; ❯ . /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Thu/x86_64-centos7-gcc12-dbg/setup.sh; ❯ root; ------------------------------------------------------------------; | Welcome to ROOT 6.28/05 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Jun 13 2023, 00:22:00 |; | From heads/v6-28-00-patches@v6-28-04-96-g9248a09 |; | With g++ (GCC) 12.1.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] #include <range/v3/range/access.hpp>; /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Thu/ROOT/v6-28-00-patches/x86_64-centos7-gcc12-dbg/etc/cling/std.modulemap:312:10: error: module 'std.span' requires feature 'cplusplus20'; module ""span"" {; ^; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev4/Thu/x86_64-centos7-gcc12-dbg/include/range/v3/range/access.hpp:25:10: note: submodule of top-level module 'std' implicitly imported here; #include <span>; ^; root.exe: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-28-00-patches/src/ROOT/v6-28-00-patches/interpreter/llvm/src/tools/clang/lib/AST/DeclBase.cpp:1517: void clang::DeclContext::removeDecl(clang::Decl*): Assertion `Pos != Map->end() && ""no lookup entry for decl""' failed.; ```. ### ROOT version. v6-28-00-patches@v6-28-04-96-g9248a09. ### How did you install ROOT?. LCG nightly builds in /cvmfs/sft-nightlies.cern.ch. ### Which operating system are you using?. Linux CentOS 7. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13032:2675,Assert,Assertion,2675,https://root.cern,https://github.com/root-project/root/issues/13032,1,['Assert'],['Assertion']
Testability,"dule (this=0x5555557aaed0, T=...); at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:184; #15 0x00007fffec0320a6 in cling::IncrementalExecutor::unloadModule (this=0x555555750eb0, T=...); at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/IncrementalExecutor.h:181; #16 0x00007fffec031858 in cling::TransactionUnloader::RevertTransaction (this=0x7fffffff9610, T=0x55555886b420); at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:119; #17 0x00007fffec004b0f in cling::Interpreter::unload (this=0x555555607950, T=...); at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1551; #18 0x00007fffec004c64 in cling::Interpreter::unload (this=0x555555607950, numberOfTransactions=1); at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/Interpreter/Interpreter.cpp:1572; #19 0x00007fffec28e780 in cling::MetaSema::actOnUCommand (this=0x5555561e0910, file=...); at /home/axel/build/root/llvmupgrade/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:222; #20 0x00007fffec2a04dd in cling::MetaParser::isUCommand (this=0x7fffffff9940, ; actionResult=@0x7fffffff993c: cling::MetaSema::AR_Success); ```. This leaves `TClingCallFunc::fWrapper` point to invalid memory and causes test failures at least in `roottest-root-meta-callfunc-assertUnload-auto`. I have disabled the deletion of the code segments, but that's just a temporary hack to make progress. We need a callback from the unloading to inform all `TClingCallFunc`s that use unloaded sections (including an update of `gWrapperStore` and friends), such that they can re-emit/-JIT the code if their `Decl` has not been unloaded. This serves as a marker to re-enable the deletion of the Sections, by enabling the `#if 0`'ed code around `interpreter/cling/lib/Interpreter/IncrementalJIT.cpp:189` (in `IncrementalJIT::removeModule(const Transaction& T)`), as introduced by the llvm 13 upgrade.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10898:4943,test,test,4943,https://root.cern,https://github.com/root-project/root/issues/10898,2,"['assert', 'test']","['assertUnload-auto', 'test']"
Testability,"dule MathMore; Failed to load module RooFitXRooFit; Failed to load module RooFitHS3; Failed to load module Foam; Failed to load module SpectrumPainter; Failed to load module Minuit2; Failed to load module MLP; Failed to load module ROOTDataFrame; Failed to load module GenVector; Failed to load module ROOTBrowserv7; Failed to load module Minuit; Failed to load module Graf3d; Failed to load module TMVA; Failed to load module ROOTNTupleUtil; Failed to load module ASImageGui; Failed to load module Graf; Failed to load module GX11; Failed to load module Gdml; Failed to load module ROOTTreeViewer; Failed to load module MathCore; Failed to load module Gviz3d; Failed to load module WebGui6; Failed to load module ROOTHist; Failed to load module TreePlayer; Failed to load module ROOTGeomViewer; Failed to load module ROOTFitPanelv7; Failed to load module Smatrix; root.exe: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/llvm-project/clang/lib/Lex/Lexer.cpp:4370: bool clang::Lexer::LexTokenInternal(clang::Token&, bool): Assertion `Result.is(tok::eof) && ""Preprocessor did not set tok:eof""' failed. ```. According to `strace` previous version ROOT would first try the `/build/...` folder to find Vc.pcm, and then look parallel to other ROOT libraries (not sure how that is decided). But now only the build path is tried and nothing else. Vc.pcm is present; ```; ls -l /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/lib/Vc.pcm; lrwxrwxrwx. 1 cvmfs cvmfs 93 Mar 13 12:58 /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/latest/x86_64-el9-gcc13-dbg/lib/Vc.pcm -> /cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev3/Wed/ROOT/HEAD/x86_64-el9-gcc13-dbg/lib/Vc.pcm; ```. ### ROOT version. master. ### Installation method. lcgcmake from source: options https://gitlab.cern.ch/sft/lcgcmake/-/blob/master/projects/CMakeLists.txt?ref_type=heads#L82. ### Operating system. alma9, alma8, ubuntu20, ubuntu22. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14964:3616,Assert,Assertion,3616,https://root.cern,https://github.com/root-project/root/issues/14964,1,['Assert'],['Assertion']
Testability,"dules disabled (i.e. builds with `-Druntime_cxxmodules=off`). This is observed in the `ntuple_types.cxx` tests for `std::map` fields. These fields have an inner field of type `std::pair` representing the key and value of each item. For this specific build configuration, it is required to explicitly add the dictionary entry for this `std::pair` type. In other words, for a `std::map<char, long>`, we need to define the following two dictionary entries:; ```cpp; #pragma link C++ class std::map<char, long>+;; #pragma link C++ class std::pair<char, long>+;; ```; instead of only the first one. This does not only pertain to `std::map`. For example, the same error is observed for a `std::set<std::pair<int, CustomStruct>>` field (but not for`std::set<std::pair<int, int>>`, for example). ## Steps to reproduce; 1. Use a ROOT master build with `-Druntime_cxxmodules=off`.; 2. Remove/comment out the following dictionary entries: https://github.com/root-project/root/blob/1dbb35307ed55a1017b4620eb15f2aa22bd8514f/tree/ntuple/v7/test/ProxiedSTLContainerLinkDef.h#L28-L34; 4. Add the following snippet to the constructor for `RPairField`, after this line: https://github.com/root-project/root/blob/1dbb35307ed55a1017b4620eb15f2aa22bd8514f/tree/ntuple/v7/src/RField.cxx#L2935 (also make sure to `#include <TVirtualStreamerInfo.h>:; ```cpp; if (fClass->GetDataMember(""first"") == nullptr || fClass->GetDataMember(""second"") == nullptr) {; std::cerr << ""The TClass for "" << GetType() << "" is in state: "" << fClass->GetState() << "" and has: \n"";; fClass->GetListOfDataMembers()->ls();; fClass->GetStreamerInfo()->ls();; throw RException(R__FAIL(""Insufficient information for "" + GetType()));; }; ```; ## Observed output; ### From the snippet added above:; ```; The TClass for std::pair<char,std::int64_t> is in state: 2 and has: ; OBJ: TListOfDataMembers	TListOfDataMembers	List of TDataMembers for a class : 0. StreamerInfo for class: pair<char,long>, checksum=0xb5fb752; char first offset= 0 type= 1 Emulation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14084:1255,test,test,1255,https://root.cern,https://github.com/root-project/root/issues/14084,1,['test'],['test']
Testability,"duplicates. ### Describe the bug. Two RNTuple tests fail on ix86 (Intel 32 bit). ### Expected behavior. The tests should pass. ### To Reproduce. 1. Compile root 6.28.00 for ix86.; 2. Run unit tests. ### Setup. 1. ROOT version: 6.28.00; 2. Operating system: Fedora Linux 36/37/38/39 on i686; 3. How you obtained ROOT: compilation from source. ### Additional context. Logs for the two failing tests:. gtest-tree-ntuple-v7-test-ntuple-types fails due to alignment differences for std::tuple and std::pair. ~~~; 479/1318 Test #444: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 13.57 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNTuple.StdPair; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:102: Failure; Expected equality of these values:; (alignof(std::pair<int64_t, float>)); Which is: 4; otherField->GetAlignment(); Which is: 8; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdPair (287 ms); [ --- ]; [ RUN ] RNTuple.StdTuple; /builddir/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:1009,test,tests,1009,https://root.cern,https://github.com/root-project/root/issues/12427,1,['test'],['tests']
Testability,"e ""#define ClingWorkAroundBrokenUnnamedReturn"" -e ""#define ClingWorkAroundUnnamedDetection2"" -e ""#define ClingWorkAroundUnnamedInclude"" -e ""#define ClingWorkAroundJITfullSymbolResolution"" -e ""#define ClingWorkAroundNoDotNamespace"" -e ""#define ClingWorkAroundNoDotInclude"" -e ""#define ClingWorkAroundTClassUpdateDouble32"" -e ""#define ClingWorkAroundUnloadingVTABLES"" -q -l -b assertSparseSelection.C; ==22765== Memcheck, a memory error detector; ==22765== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.; ==22765== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info; ==22765== Command: root.exe -e #define\ ClingWorkAroundPrintfIssues -e #define\ ClingWorkAroundLackOfModule -e #define\ ClingWorkAroundProxyConfusion -e #define\ ClingWorkAroundMissingDynamicScope -e #define\ ClingWorkAroundMultipleInclude -e #define\ ClingWorkAroundAutoParseUsingNamespace -e #define\ ClingWorkAroundExtraParensWithImplicitAuto -e #define\ ClingWorkAroundNoPrivateClassIO -e #define\ ClingWorkAroundBrokenUnnamedReturn -e #define\ ClingWorkAroundUnnamedDetection2 -e #define\ ClingWorkAroundUnnamedInclude -e #define\ ClingWorkAroundJITfullSymbolResolution -e #define\ ClingWorkAroundNoDotNamespace -e #define\ ClingWorkAroundNoDotInclude -e #define\ ClingWorkAroundTClassUpdateDouble32 -e #define\ ClingWorkAroundUnloadingVTABLES -q -l -b assertSparseSelection.C; ==22765== . Processing assertSparseSelection.C...; ==22765== Conditional jump or move depends on uninitialised value(s); ==22765== at 0x9D9A01A: llvm::ConstantExpr::getGetElementPtr(llvm::Type*, llvm::Constant*, llvm::ArrayRef<llvm::Value*>, bool, llvm::Optional<unsigned int>, llvm::Type*) (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x93F2CBA: (anonymous namespace)::SymbolicallyEvaluateGEP(llvm::GEPOperator const*, llvm::ArrayRef<llvm::Constant*>, llvm::DataLayout const&, llvm::TargetLibraryInfo const*) (in /build/vvassilev/root-release-master/lib/libCling.so); ==22765== by 0x93F35A1:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11385:1823,assert,assertSparseSelection,1823,https://root.cern,https://github.com/root-project/root/issues/11385,1,['assert'],['assertSparseSelection']
Testability,"e (219 ms); [ RUN ] LikelihoodJobTest.UnbinnedGaussianND; [ OK ] LikelihoodJobTest.UnbinnedGaussianND (331 ms); [ RUN ] LikelihoodJobTest.SimBinned; [ OK ] LikelihoodJobTest.SimBinned (323 ms); [ RUN ] LikelihoodJobTest.BinnedConstrained; [ OK ] LikelihoodJobTest.BinnedConstrained (311 ms); [ RUN ] LikelihoodJobTest.SimUnbinned; [ OK ] LikelihoodJobTest.SimUnbinned (281 ms); [ RUN ] LikelihoodJobTest.SimUnbinnedNonExtended; [ OK ] LikelihoodJobTest.SimUnbinnedNonExtended (264 ms); [ RUN ] LikelihoodJobTest.BatchedUnbinnedGaussianND; [ OK ] LikelihoodJobTest.BatchedUnbinnedGaussianND (362 ms); [----------] 9 tests from LikelihoodJobTest (2698 ms total); [----------] 2 tests from LikelihoodJobBinnedDatasetTest; [ RUN ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf; [ OK ] LikelihoodJobBinnedDatasetTest.UnbinnedPdf (152 ms); [ RUN ] LikelihoodJobBinnedDatasetTest.BinnedNLL; [ OK ] LikelihoodJobBinnedDatasetTest.BinnedNLL (325 ms); [----------] 2 tests from LikelihoodJobBinnedDatasetTest (480 ms total); [----------] 2 tests from LikelihoodJobSimBinnedConstrainedTest; [ RUN ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters; [ OK ] LikelihoodJobSimBinnedConstrainedTest.BasicParameters (452 ms); [ RUN ] LikelihoodJobSimBinnedConstrainedTest.ConstrainedAndOffset; /usr/include/c++/14/bits/stl_vector.h:1130: std::vector<_Tp, _Alloc>::reference std::vector<_Tp, _Alloc>::operator[](size_type) [with _Tp = ROOT::Math::KahanSum<double>; _Alloc = std::allocator<ROOT::Math::KahanSum<double> >; reference = ROOT::Math::KahanSum<double>&; size_type = long unsigned int]: Assertion '__n < this->size()' failed.; ```; The test hangs at this point, and is eventually killed by the timeout limit. ### Reproducer. Compile ROOT with `-Wp,-D_GLIBCXX_ASSERTIONS` in CXXFLAGS. This is part of the default flags for Fedora package builds. ### ROOT version. 6.32.00. ### Installation method. Package build on Fedora from source. ### Operating system. Fedora Linux. ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15730:1617,test,tests,1617,https://root.cern,https://github.com/root-project/root/issues/15730,4,"['Assert', 'test']","['Assertion', 'test', 'tests']"
Testability,"e arcane circumstances) causes the last bin to go missing from a `RooHistFunc`. Notably, the occurence of this effect is a rounding issue that only happens for some values of upper bounds of observables. . I have attached a python test case that showcases the problem. The assertion in the last line will fail in the current master of ROOT, but will succeed using the bugfix in this MR. import ROOT; from math import pi; ; xmin = -25.2; xmax = 6.3; nbins = 35; hfname = ""hists.root""; ; histfile = ROOT.TFile.Open(hfname,""RECREATE""); ; signalSR = ROOT.TH1F(""signalSR"",""signal"",nbins,xmin,xmax); signalSR.FillRandom(""gaus""); ; backgroundSR = ROOT.TH1F(""backgroundSR"",""background"",nbins,xmin,xmax); backgroundSR.FillRandom(""pol0""); ; signalCR = ROOT.TH1F(""signalCR"",""signal"",nbins,xmin,xmax); signalCR.FillRandom(""pol0""); ; backgroundCR = ROOT.TH1F(""backgroundCR"",""background"",nbins,xmin,xmax); backgroundCR.FillRandom(""pol0""); ; histfile.Write(); histfile.Close(); ; sigSR = ROOT.RooStats.HistFactory.Sample(""signal"","""",hfname,""signalSR""); sigSR.AddNormFactor(""mu"",1.,0.,10.,False); bkgSR = ROOT.RooStats.HistFactory.Sample(""background"","""",hfname,""backgroundSR""); bkgSR.AddNormFactor(""norm"",1.,0.,10.,False); ; sr = ROOT.RooStats.HistFactory.Channel(""SR""); sr.AddSample(sigSR); sr.AddSample(bkgSR); ; sigCR = ROOT.RooStats.HistFactory.Sample(""signal"","""",hfname,""signalCR""); sigCR.AddNormFactor(""mu"",1.,0.,10.,False); bkgCR = ROOT.RooStats.HistFactory.Sample(""background"","""",hfname,""backgroundCR""); bkgCR.AddNormFactor(""norm"",1.,0.,10.,False); ; cr = ROOT.RooStats.HistFactory.Channel(""CR""); cr.AddSample(sigCR); cr.AddSample(bkgCR); ; ; meas = ROOT.RooStats.HistFactory.Measurement(""meas""); meas.AddChannel(sr); meas.AddChannel(cr); . meas.CollectHistograms(); ws = ROOT.RooStats.HistFactory.HistoToWorkspaceFactoryFast.MakeCombinedModel(meas); pdf = ws.pdf(""model_SR""); obs = ws.var(""obs_x_SR""); hist = pdf.createHistogram(""hist"",obs,ROOT.RooFit.IntrinsicBinning(1)). assert(hist.GetNbinsX() == nbins)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1916:2036,assert,assert,2036,https://root.cern,https://github.com/root-project/root/pull/1916,1,['assert'],['assert']
Testability,"e best solution we have right now to avoid circular dependencies in the build system. . * The status of the different executors' interfaces at the end of this PR is sumarized in the following table, where TExecutor has chunking interfaces but will only chunk if the policy is multithreaded, ignoring the chunking parameter otherwise:. Executor | Map | Reduce | MapReduce | Foreach | Chunking | Parallel reduction | ; ---------- | ----- | -------- | ------------- | -------- | ----------- | ------------------ |; TExecutorCRTP | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TExecutor | ✔️ | ✔️ | ✔️ | ❌ | ✓ | ❌ |; TThreadExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ | ✔️ |; TProcessExecutor | ✔️ | ✔️ | ✔️ | ❌ | ❌ | ❌ |; TSequentialExecutor | ✔️ | ✔️ | ✔️ | ✔️ | ❌ | ❌ |. * [WIP] All common interfaces (no chunking, no foreach, no parallel reduction) are declared in the base class, TExecutorCRTP. Among these, the only three differing Map implementations call MapImpl, deleted functions on the base class and expected to be implemented by the child classes. * Every other interface (chunking, foreach, parallel reduction) is declared and implemented in the executor that supports it. ### TODO. Some things still left to work on/agree/doublecheck:. - [x] Naming?. - [x] Formatting. - [x] Check question 2 in: https://indico.cern.ch/event/870356/contributions/3670548/attachments/1961441/3260066/3_PPP_Questions.pdf (EDIT: I think this is provided by chunking). - [x] Extend the initializer_list interface to all the executors. - [x] Add tests. - [x] Discuss the build system and the new dependencies. - [x] Improve documentation. Left for the end, potentially for following PRs:; - [ ] Adapt ROOT Fitting; - [x] Change the policies to kSequential, kMultiThread and KMultiProcess; - [ ] Moving it out of the Internal namespace; - [x] Refactoring the switch statements if possible; - [ ] Adapt the Mapreduce signature to allow returning [something other than T](https://github.com/root-project/root/pull/6327#discussion_r526016153)",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6327:2857,test,tests,2857,https://root.cern,https://github.com/root-project/root/pull/6327,1,['test'],['tests']
Testability,"e configuration output](https://github.com/root-project/root/files/7709954/cmake.log), [CMakeCache.txt](https://github.com/root-project/root/files/7709963/CMakeCache.txt), the full [build log](https://github.com/root-project/root/files/7709957/build.log), and the [log for failed tests](https://github.com/root-project/root/files/7710157/ctest-failed.log). To save you some time looking over these files, here is the full list of tests that fail:. ```; The following tests FAILED:; 	 1 - clingtest-check-cling (Failed); 	 13 - pyunittests-pyroot-dependency-versions (Failed); 	 68 - pyunittests-pyroot-numbadeclare (Not Run); 	 69 - test-import-numba (Failed); 	160 - gtest-math-mathcore-test-stressMathCoreUnit (Failed); 	282 - test-stressmathcore (Failed); 	307 - test-TFormulaTests (Failed); 	800 - tutorial-pythia-pythiaExample (Failed); 	1142 - tutorial-pyroot-pyroot004_NumbaDeclare-py (Not Run); 	1143 - test-import-numba (Failed); 	1358 - roottest-cling-stl-dicts-build (Failed); 	1611 - roottest-root-dataframe-test_snapshot_copyaddresses (Failed); 	1753 - roottest-root-io-transient-base-WriteFile (Failed); 	1754 - roottest-root-io-transient-base-hadd_autoload (Failed); 	1799 - roottest-root-meta-countIncludePaths (Failed); 	1841 - roottest-root-meta-MakeProject-runaliceesd (Failed); 	1852 - roottest-root-meta-ROOT-7462-make (Failed); 	2229 - roottest-root-tree-cache-perfstattest-libevent-build (Failed); 	2230 - roottest-root-tree-cache-perfstattest (Failed); ```; * You can ignore the failures for numba, as I don't have that installed.; * The math tests seem to fail because of strict tolerances and errors related to SIMD being enabled (I used `-march=native` on a machine that has AVX2 support). I suggest enabling SIMD on at least one of the CI builds in Jenkins to cover that if that's not the case now. ; * The test `roottest-root-tree-cache-perfstattest-libevent-build` and some others fail because of a build type not being set (I just set `CMAKE_CXX_FLAGS` and not `CMAKE_BU",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9436:1144,test,tests,1144,https://root.cern,https://github.com/root-project/root/issues/9436,6,['test'],"['test-TFormulaTests', 'test-import-numba', 'test-stressMathCoreUnit', 'test-stressmathcore', 'tests']"
Testability,e logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger;,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2281,log,logger,2281,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,"e(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-endian. Here the bytes are in the right order, but shifted 4 bytes. $ printf '%016x\n%016x\n' 1234605615003729920 287454020; 1122334400000000; 0000000011223344; $ printf '%016x\n%016x\n' 6153737371142586367 1432778632; 55667788ffffffff; 0000000055667788; ~~~; 449/1272 Test #424: gtest-tree-ntuple-v7-test-ntuple-endian .............................***Failed 0.04 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 9 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndian.Float (6 ms); [ RUN ] RColumnElementEndian.Double; [ OK ] RColumnElementEndian.Double (3 ms); [ RUN ] RColumnElementEndian.Int16; [ OK ] RColumnElementEndian.Int16 (0 ms); [ RUN ] RColumnElementEndian.UInt16; [ OK ] RColumnElementEndian.UInt16 (0 ms); [ RUN ] RColumnElementEndian.Int32; [ OK ] RColumnElementEndian.Int32 (0 ms); [ RUN ] RColumnElementEndia",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:3117,Test,Test,3117,https://root.cern,https://github.com/root-project/root/issues/12426,2,"['Test', 'test']","['Test', 'test-ntuple-endian']"
Testability,e-test-dataframe-cache ........................... Passed 44.39 sec; Start 381: gtest-tree-dataframe-test-dataframe-ranges; Start 382: gtest-tree-dataframe-test-dataframe-leaves; 405/1231 Test #381: gtest-tree-dataframe-test-dataframe-ranges .......................... Passed 2.10 sec; Start 383: gtest-tree-dataframe-test-dataframe-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dataframe-test-dataframe-take; 407/1231 Test #382: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataframe-test-dataframe-entrylist; 408/1231 Test #385: gtest-tree-dataframe-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-datafr,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:4146,test,test-dataframe-samplecallback,4146,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-samplecallback', 'test-dataframe-take']"
Testability,"e-test-testRooFitDriver` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testRooAbsPdf` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testTestStatistics` (`heap-use-after-free`); * `gtest-roofit-roofitcore-test-testLikelihoodSerial` (`heap-use-after-free`); * ~`gtest-roofit-roofit-test-testRooPoisson` (`stack-use-after-return`)~; * `gtest-roofit-roofitcore-test-testSumW2Error` (`heap-use-after-free`); * `gtest-roofit-roostats-test-testSPlot` (`heap-use-after-free`); * ~`test-stressroofit` (`heap-use-after-free`)~; * ~`test-stressroofit-interpreted` (`heap-use-after-free`)~; * `tutorial-roofit-rf611_weightedfits` (`heap-use-after-free`); * ~`tutorial-roofit-rf705_linearmorph` (`stack-use-after-return`)~; * ~`tutorial-roofit-rf705_linearmorph-py` (`stack-use-after-return`)~; * `gtest-roottest-root-roofitstats-vectorisedPDFs-*` (`heap-use-after-free`). The top of the stack trace (for the first failing test) is:; ```; 229: WRITE of size 8 at 0x61d000a37370 thread T0; 229: #0 0x7f5aa5163db3 in RooAbsArg::setDataToken(unsigned long) /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsArg.h:720:53; 229: #1 0x7f5aa5163db3 in ROOT::Experimental::NodeInfo::~NodeInfo() /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooFitDriver.cxx:100:15; 229: #2 0x7f5aa515d8f7 in void std::_Destroy<ROOT::Experimental::NodeInfo>(ROOT::Experimental::NodeInfo*) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_construct.h:98:19 ; 229: #3 0x7f5aa515d8f7 in void std::_Destroy_aux<false>::__destroy<ROOT::Experimental::NodeInfo*>(ROOT::Experimental::NodeInfo*, ROOT::Experimental::NodeInfo*) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_construct.h:108:6 ; 229: #4 0x7f5aa515d8f7 in void std::_Destroy<ROOT::Experimental::NodeInfo*>(ROOT::Experimental::NodeInfo*, ROOT::Experimental::NodeInfo*) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_construct.h:136:7 ; 229: #5 0x7f5aa515d8f7 in void std::_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10009:1070,test,test,1070,https://root.cern,https://github.com/root-project/root/issues/10009,1,['test'],['test']
Testability,e.g.; ```; bitwise operation between different enumeration types ‘TBranch::EStatusBits’ and ‘TBranchElement::EStatusBits’ is deprecated [-Wdeprecated-enum-enum-conversion]; ```; ```; implicit capture of ‘this’ via ‘[=]’ is deprecated in C++20 [-Wdeprecated]. ```. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12776:329,test,tested,329,https://root.cern,https://github.com/root-project/root/pull/12776,1,['test'],['tested']
Testability,e.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Reader.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Results.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsClassification.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsMulticlass.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ResultsRegression.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RootFinder.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Rule.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleCut.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleEnsemble.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/RuleFit.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/RuleFitAPI.h: mutable MsgLogger fLogger; // message logger; tmva/inc/TMVA/RuleFitParams.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVKernelMatrix.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SVWorkingSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/SimulatedAnnealing.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/TActivationChooser.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/TransformationHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Types.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/VarTransformHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/VariableTransformBase.h: mutable MsgLogger* fLogger; //! message logger; ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:2665,log,logger,2665,https://root.cern,https://github.com/root-project/root/issues/9792,13,['log'],['logger']
Testability,"e/cburr/miniconda3/envs/test/lib/Cling_Runtime.pcm' [-Rmodule-build]; #include ""cling/Interpreter/RuntimeUniverse.h""; ^; While building module 'Cling_Runtime' imported from input_line_2:1:; In file included from <module-includes>:3:; /home/cburr/miniconda3/envs/test/etc//cling/Interpreter/DynamicLookupRuntimeUniverse.h:16:10: remark: building module 'Cling_Runtime_Extra' as '/home/cburr/miniconda3/envs/test/lib/Cling_Runtime_Extra.pcm' [-Rmodule-build]; #include ""cling/Interpreter/DynamicExprInfo.h""; ^; ```. I don't know if ROOT is supposed to be able to recover from this but I run in to three issues, the first is the known `tbb` dependency issue in 6.24.0 that is already fixed for the next patch release. The second issue is that `MathCore.pcm` fails to build with:. ```bash; <<< cling interactive line includer >>>: remark: building module 'MathCore' as '/home/cburr/miniconda3/envs/test/lib/MathCore.pcm' [-Rmodule-build]; While building module 'MathCore':; In file included from <module-includes>:3:; In file included from /home/cburr/miniconda3/envs/test/include/Fit/Chi2FCN.h:19:; /home/cburr/miniconda3/envs/test/include/Fit/FitUtil.h:404:23: error: no matching constructor for initialization of 'std::vector<double>'; std::vector<double> ones{1, 1, 1, 1};; ^ ~~~~~~~~~~~~~~~~; ```. I can workaround this by using four `ones.push_back(1.0);` lines instead of initialising it as ones though it doesn't explain why this fails. Finally after fixing this it, running `root.exe -b -l -q -e '1+1' -x` repeatedly continues to rebuild modules, e.g. on the second iteration:. ```; <<< cling interactive line includer >>>: remark: building module 'Minuit' as '/home/cburr/miniconda3/envs/test/lib/Minuit.pcm' [-Rmodule-build]; <<< cling interactive line includer >>>: remark: finished building module 'Minuit' [-Rmodule-build]; Module a����2V`^��2V`X��2V�N��2VPP��2V��x�2V@!`�k�2V@�:�2V` not found.; Module test__CLING__GNUC__ct_int81����2V���2V-in-extern-ce not found.; Module includeit.pcm not",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8518:2170,test,test,2170,https://root.cern,https://github.com/root-project/root/issues/8518,1,['test'],['test']
Testability,"e/ntuple/v7/test/ntuple_endian.cxx:286: Failure; Expected equality of these values:; ints[0]; Which is: 1234605615003729920; 0x0000000011223344; Which is: 287454020; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:287: Failure; Expected equality of these values:; ints[1]; Which is: 6153737371142586367; 0x0000000055667788; Which is: 1432778632; [ FAILED ] RColumnElementEndian.Int64Int32 (0 ms); [----------] 9 tests from RColumnElementEndian (13 ms total); [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RRes",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:5333,Test,Test,5333,https://root.cern,https://github.com/root-project/root/issues/12426,2,"['Test', 'test']","['Test', 'test-ntuple-extended']"
Testability,"e/v7/src/RField.cxx:370; #11 0xf7e2c3e0 in ROOT::Experimental::RNTupleWriter::CommitCluster (this=0xd7486120, commitClusterGroup=true) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:370; #12 0xf7e2c674 in ROOT::Experimental::RNTupleWriter::~RNTupleWriter (this=0xd7486120, __in_chrg=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTuple.cxx:327; #13 0x56560f58 in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=0xd7486120, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:100; #14 0x565606cf in std::default_delete<ROOT::Experimental::RNTupleWriter>::operator() (__ptr=<optimized out>, this=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:94; #15 std::unique_ptr<ROOT::Experimental::RNTupleWriter, std::default_delete<ROOT::Experimental::RNTupleWriter> >::~unique_ptr (this=0xffde8b50, __in_chrg=<optimized out>) at /usr/include/c++/13/bits/unique_ptr.h:405; #16 RNTuple_LargeFile2_Test::TestBody (this=0x57246b80) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_extended.cxx:260; #17 0xf7d7159c in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib/libgtest.so.1.13.0; #18 0xf7d5cf46 in testing::Test::Run() () from /lib/libgtest.so.1.13.0; #19 0xf7d5d17a in testing::TestInfo::Run() () from /lib/libgtest.so.1.13.0; #20 0xf7d5d327 in testing::TestSuite::Run() () from /lib/libgtest.so.1.13.0; #21 0xf7d6a95b in testing::internal::UnitTestImpl::RunAllTests() () from /lib/libgtest.so.1.13.0; #22 0xf7d695cb in testing::UnitTest::Run() () from /lib/libgtest.so.1.13.0; #23 0xf7d1e137 in main () from /lib/libgtest_main.so.1.13.0; #24 0xf6837969 in __libc_start_call_main () from /lib/libc.so.6; #25 0xf6837a2c in __libc_start_main_impl () from /lib/libc.so.6; #26 0x56560e0b in _start (); CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:11360,Test,TestBody,11360,https://root.cern,https://github.com/root-project/root/issues/12427,1,['Test'],['TestBody']
Testability,"e; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: C:/Program Files (x86)/Microsoft Visual Studio/2019/Community/VC/Tools/MSVC/14.29.30037/bin/Hostx64/x64/cl.exe - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found Git: C:/Program Files/Git/cmd/git.exe (found version ""2.30.0.windows.2""); -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Could NOT find Python3 (missing: Python3_NumPy_INCLUDE_DIRS NumPy) (found version ""3.9.2""); -- Could NOT find Python2 (missing: Python2_EXECUTABLE Python2_LIBRARIES Python2_INCLUDE_DIRS Python2_NumPy_INCLUDE_DIRS Interpreter Development NumPy Development.Module Development.Embed); Reason given by package:; Interpreter: Wrong major version for the interpreter ""C:/Program Files/Python39/python.exe"". -- Looking for pthread.h; -- Looking for pthread.h - not found; -- Found Threads: TRUE; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Failed; -- ROOT Platform: win32; -- ROOT Compiler: MSVC 19.29.30037.0; -- ROOT Processor: AMD64; -- ROOT Architecture: win32; -- Build Type: '' (flags = ''); -- Compiler Flags: -nologo -IC:/dev/root/build/win -FIw32pragma.h -FIsehmap.h -Zc:__cplusplus -MD -GR -EHsc- -W3 -wd4141 -wd4291 -wd4244 -wd4049 -D_WIN32 -D_XKEYCHECK_H -DNOMINMAX -D_CRT_SECURE_NO_WARNINGS; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 3.9.2; -- Looking for ZLib; CMake Error at D:/dev/vcpkg/scripts/buildsystems/vcpkg.cmake:693 (set):; Maximum recursion depth of 1000 exceeded; Call Stack (most recent call first):; D:/dev/vcpkg/scripts/buildsystems/vcpkg.cmake:771 (_find_package); ... // many stack frames; D:/dev/vcpkg/scripts/buildsystems/vcpkg.cmake:771 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:16 (_find_package); cmake/modules/SearchInstalledSoftware.cmake:55 (find_package); CMakeLists.txt:220 (include); ```. ### Setup. ROOT mas",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8633:2478,Test,Test,2478,https://root.cern,https://github.com/root-project/root/issues/8633,2,['Test'],['Test']
Testability,"e; else if (c == 'v') {; verbose = true;; }; // If the output file is set, print the output file name; else if (c == 'o') {; outputFile = optarg;. } else if (c == -1) {; break;; } else if (c == '?') {; print_help();; return 1;; } else {; print_help();; return 1;; }; }; if (optind < argc) {; inputFile = argv[optind];; }; debug(""Output file: "" + outputFile);; if (inputFile.empty()) {; error(""Missing input file"");; }; debug(""Input file: "" + inputFile);. // Open the input file using ROOT, iterate over all the TFolders starting with DF_ and; // convert the TTrees inside such folder an RNTuple in the output file in the same folder. TFile* in = TFile::Open(inputFile.c_str(), ""READ"");; if (!in) {; error(""Cannot open input file"");; }; TFile* out = TFile::Open(outputFile.c_str(), ""RECREATE"");; if (!out) {; error(""Cannot open output file"");; }; // Iterate over the directories in the file; TIter next(in->GetListOfKeys());; TKey* key;; while ((key = (TKey*)next())) {; std::cout << key->GetClassName() << std::endl;; if (std::string(key->GetClassName()) == ""TDirectoryFile"") {; std::string name = key->GetName();; log(""Found TDirectoryFile: "" + name);; auto* dir = (TDirectoryFile*)key->ReadObj();; if (!out->GetDirectory(name.c_str())) {; out->mkdir(name.c_str());; }; out->cd(name.c_str());; // Iterate over the objects in the directory; TIter next2(dir->GetListOfKeys());; TKey* key2;; while ((key2 = (TKey*)next2())) {; if (std::string(key2->GetClassName()) == ""TTree"") {; std::string name2 = key2->GetName();; log(""Found TTree: "" + name2);; auto* tree = (TTree*)key2->ReadObj();; debug(""Converting to RNTuple"");; // Create the folder in the output file if it does not exist; using namespace ROOT::Experimental;; // Create a model from the input tree; auto model = RNTupleModel::CreateBare();. for (auto b : TRangeDynCast<TBranch>(*tree->GetListOfBranches())) {; // The dynamic cast to TBranch should never fail for GetListOfBranches(); assert(b);. // We assume every branch has a single leaf; a",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996:11143,log,log,11143,https://root.cern,https://github.com/root-project/root/issues/13996,1,['log'],['log']
Testability,"e=6816316); /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_minifile.cxx:84: Failure; Value of: file; Actual: false; Expected: true; [ FAILED ] MiniFile.Stream (191 ms); [ RUN ] MiniFile.Proper; Fatal: nread == nbytes violated at line 1083 of `/builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RMiniFile.cxx'; aborting; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: Subprocess aborted; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-rdf. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 491/1272 Test #431: gtest-tree-ntuple-v7-test-ntuple-rdf ................................***Failed 74.39 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 1 test from 1 test suite.; [----------] Global test environment set-up.; [----------] 1 test from RNTuple; [ RUN ] RNTuple.RDF; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Error in <TFile::Init>: file test_ntuple_rdf.root has an incorrect header length (1677721600) or incorrect end of file length (-4176807177076801536); *** Break *** segmentation violation; [ --- ]; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 139; ~~~; #### gtest-tree-ntuple-v7-test-ntuple-serialize. Endian issue: 256 = 0x0100, expected 0x0001 = 1.; ~~~; 457/1272 Test #432: gtest-tree-ntuple-v7-test-ntuple-serialize ..........................***Failed 0.24 sec; Runni",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:10415,test,test,10415,https://root.cern,https://github.com/root-project/root/issues/12426,2,['test'],['test']
Testability,"e>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""...); at /home/vpadulan/programs/rootproject/rootsrc/tree/dataframe/src/RDFUtils.cxx:340; #6 0x00007f132bf6def9 in ROOT::Internal::RDF::InterpreterCalc (; code=""ROOT::Internal::RDF::CallBuildAction<ROOT::Internal::RDF::ActionTags::Histo1D, Int_t>(reinterpret_cast<std::shared_ptr<ROOT::Detail::RDF::RNodeBase>*>(0x7f130be1a880), new const char*[1]{\""b1\""}, 1, 1, ""..., context=""RLoopManager::Run""); ```. Which as a first instinct hints at some possible contention between the different things cling is doing in the two threads. For the moment I cannot come up with an easier reproducer, see next section for more details. # How to reproduce. Here is the patch to print the statements that show the PID (as .txt so that I can attach it to this issue):; [0001-Print-statements-for-DistRDF-Cling-failure.txt](https://github.com/root-project/root/files/9735187/0001-Print-statements-for-DistRDF-Cling-failure.txt). The following is a Python script with the test; ```py; import os. import pyspark; from dask.distributed import Client, LocalCluster. import ROOT; RunGraphs = ROOT.RDF.Experimental.Distributed.RunGraphs; SparkDF = ROOT.RDF.Experimental.Distributed.Spark.RDataFrame; DaskDF = ROOT.RDF.Experimental.Distributed.Dask.RDataFrame; # verbosity = ROOT.Experimental.RLogScopedVerbosity(ROOT.Detail.RDF.RDFLogChannel(), ROOT.Experimental.ELogLevel.kDebug+10). def connection():; daskconn = Client(LocalCluster(n_workers=2, threads_per_worker=1, processes=True, memory_limit=""2GiB"")). conf = {""spark.master"": ""local[2]"", ""spark.driver.memory"": ""4g"", ""spark.app.name"": ""roottest-distrdf-common""}; sparkconf = pyspark.SparkConf().setAll(conf.items()); sparkconn = pyspark.SparkContext(conf=sparkconf). return daskconn, sparkconn. def test_rungraphs_sparkanddask_3histos(daskconn, sparkconn):; """"""; Submit three different RDF graphs concurrently to Spark and Dask; """"""; # Create a test file for processing; treename = ""myTree""; filename = ""2clust",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11515:12153,test,test,12153,https://root.cern,https://github.com/root-project/root/issues/11515,1,['test'],['test']
Testability,"eCB.C](https://gitlab.cern.ch/lhcb/Erasmus/blob/b58c1441bb4233b11b0b5bb5816fa268add7c97c/Bu2D0H/Bu2D0H_FIT/src/RooDoubleCB.C). This suggestion can be taken as an opportunity to improve the crystal ball shapes in RooFit in general. Right now there is the [RooCBShape](https://github.com/root-project/root/blob/master/roofit/roofit/src/RooCBShape.cxx) that only has a left non-Gaussian tail and [RooDSCBShape](https://github.com/root-project/root/blob/master/roofit/roofit/src/RooDSCBShape.cxx) that has two separately parametrized tails. The implementation of the RooDSCBShape is not super elegant because it has a lot of code duplication that would only get worse with the further parametrzation. To clear this up, we could implement one modern and fully parametrized crystal ball shape with a clear name like **RooCrystalBall** that can serve as a drop-in replacement for both RooCBShape and RooDSCBShape as well as cover the usecase of the asymmetric Gaussian core. Such a class and a rigurous test is implemented in https://github.com/root-project/root/pull/7257, which can serve as a starting point for this development. In addition to the commit suggested in the PR, there are a few more things that could be done to make RooCrystalBall the new standard:. * Write documentation.; * Implement batch computation interface.; * Maybe even deprecate the old shapes somehow. They probably need to be kept for backwards compatibility, but they could be put in RooFitMore and the user gets a nudge to use the new shape if it is used. Probably we should also look at the crystal ball implementation in Higgs combine to see if we can take some of the improvements upstream:; * [RooDoubleCBFast.h](https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit/blob/102x/interface/RooDoubleCBFast.h); * [RooDoubleCBFast.cc](https://github.com/cms-analysis/HiggsAnalysis-CombinedLimit/blob/102x/src/RooDoubleCBFast.cc). More things to consider:; * The RooDSCB shape was **only merged last summer in https://gith",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7258:1503,test,test,1503,https://root.cern,https://github.com/root-project/root/issues/7258,1,['test'],['test']
Testability,"eCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: if %errorlevel% neq 0 goto :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: endlocal & call :cmErrorLevel %errorlevel% & goto :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmErrorLevel [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: exit /b %1 [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :cmDone [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: if %errorlevel% neq 0 goto :VCEnd [F:\gitP\root-project\root\build_amd64\tmva\pymva\test\SofieCompileModels_PyTorch.vcxproj]; C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\MSBuild\Microsoft\VC\v160\Microsoft.CppCommon.targets(155,5): error MSB3073: :VCEnd"" exited with code 9009. [F:\git",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9487:2240,test,test,2240,https://root.cern,https://github.com/root-project/root/issues/9487,1,['test'],['test']
Testability,"eamerInfo.cxx:1058; 76: Assuming 'file' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1080; 77: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1080; 78: 'done' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1100; 79: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1100; 80: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1116; /opt/root_src/io/io/src/TStreamerInfo.cxx:1847:53: warning: Called C++ object pointer is null [clang-analyzer-core.CallAndMessage]; 1: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 2: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 3: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 4: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 5: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1700; 6: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 7: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 8: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 9: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 10: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1703; 11: Assuming 'gDebug' is <= 0 in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 12: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1709; 13: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 14: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1715; 15: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 16: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1758; 17: Assuming 'ruleSet' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1784; 18: Taking false branch in /opt/",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:102768,Test,TestBit,102768,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"ears in several classes. Sometimes it is persistant ( a `! ` in the online comment) and sometimes it is not. Making a ""log message"" persistant sounds a bit weird ... But may be it should be ? ... at least the current code is not consistent: ; ```; tmva/inc/TMVA/ClassInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/Config.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/Configurable.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataInputHandler.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSet.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetFactory.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetInfo.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/DataSetManager.h: MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ExpectedErrorPruneTool.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/FitterBase.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticAlgorithm.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/GeneticPopulation.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/KDEKernel.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/LDA.h: mutable MsgLogger *fLogger; // message logging service; tmva/inc/TMVA/ModulekNN.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/OptimizeConfigParameters.h: mutable MsgLogger* fLogger; // message logger; tmva/inc/TMVA/PDEFoam.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDEFoamDensityBase.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/PDEFoamKernelBase.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/PDF.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCalc.h: mutable MsgLogger* fLogger; //! message logger; tmva/inc/TMVA/ROCCurve.h: mutable MsgLogger *fLogger; //! message logger; tmva/inc/TMVA/Ranking.h: mutable MsgLogger* fLogger; //! m",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9792:1044,log,logger,1044,https://root.cern,https://github.com/root-project/root/issues/9792,1,['log'],['logger']
Testability,"eatures - done; -- Found Git: /usr/bin/git (found version ""2.31.1"") ; -- Detected ROOT_VERSION 6.25.01; -- Looking for Python; -- Found Python3: /usr/bin/python3.8 (found version ""3.8.10"") found components: Interpreter Development NumPy Development.Module Development.Embed ; -- The Fortran compiler identification is GNU 10.3.0; -- Detecting Fortran compiler ABI info; -- Detecting Fortran compiler ABI info - done; -- Check for working Fortran compiler: /usr/bin/x86_64-pc-linux-gnu-gfortran - skipped; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90; -- Checking whether /usr/bin/x86_64-pc-linux-gnu-gfortran supports Fortran 90 - yes; -- Found GCC. Major version 10, minor version 3; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD; -- Performing Test CMAKE_HAVE_LIBC_PTHREAD - Failed; -- Looking for pthread_create in pthreads; -- Looking for pthread_create in pthreads - not found; -- Looking for pthread_create in pthread; -- Looking for pthread_create in pthread - found; -- Found Threads: TRUE ; -- Performing Test GLIBCXX_USE_CXX11_ABI; -- Performing Test GLIBCXX_USE_CXX11_ABI - Success; -- ROOT Platform: linux; -- ROOT Compiler: GNU 10.3.0; -- ROOT Processor: x86_64; -- ROOT Architecture: linuxx8664gcc; -- Build Type: 'Debug' (flags = ''); -- Compiler Flags: -march=native -O2 -pipe -Og -fno-omit-frame-pointer -g -ggdb -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread ; -- ROOT default compression algorithm: zlib; -- PyROOT will be built for version 3.8.10; CMake Error at CMakeLists.txt:139 (string):; string sub-command REGEX, mode REPLACE needs at least 6 arguments total to; command. CMake Error at CMakeLists.txt:140 (string):; string sub-command REGEX, mode REPLACE needs at least 6 arguments total to; command.; ```. Note that the default flags for 'Debug' build are empty (on purpose, because compile flags are contr",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8193:3958,Test,Test,3958,https://root.cern,https://github.com/root-project/root/issues/8193,4,['Test'],['Test']
Testability,"ec=0x3b75340, TemplateArgs=0x7e91418). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/AST/DeclTemplate.h:1837. #5 0x00007fffe3d4911d in getPatternForClassTemplateSpecialization (S=..., PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2500. #6 0x00007fffe3d492c6 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8b810, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2538. #7 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff53a0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #8 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #9 0x00007fffe3e0b5cb in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., DiagID=2479) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7398. #10 0x00007fffe363cdc7 in clang::Sema::CheckFieldDecl (this=0x7da020, Name=..., T=..., TInfo=0x7e913e0, Record=0x7e8ed10, Loc=..., Mutable=false, BitWidth=0x0, InitStyle=clang::ICIS_ListInit, TSSL=..., AS=clang::AS_private,. PrevDecl=0x0, D=0x0) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaDecl.cpp:14482. #11 0x00007fffe3d8c4de in clang::TemplateDeclInstantiator::Visi",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:2819,test,test-products,2819,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,"ecOps::RVec<bool>::const_iterator' (aka 'std::_Bit_const_iterator'); const_iterator begin() const noexcept { return fData.begin(); }; ^; In module 'ROOTDataFrame':; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/ActionHelpers.hxx:190:18: error: non-const lvalue reference to type 'bool' cannot bind to a temporary of type 'std::_Bit_const_iterator::const_reference' (aka 'bool'); for (auto &v : vs) {; ^ ~; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:237:33: note: in instantiation of function template specialization 'ROOT::Internal::RDF::FillHelper::Exec<ROOT::VecOps::RVec<bool>, 0>' requested here; ActionCRTP_t::GetHelper().Exec(slot, std::get<S>(fValues[slot]).Get(entry)...);; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:149:41: note: in instantiation of function template specialization 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::Exec<0>' requested here; static_cast<Action_t *>(this)->Exec(slot, entry, TypeInd_t());; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/include/ROOT/RDF/RAction.hxx:223:4: note: in instantiation of member function 'ROOT::Internal::RDF::RActionCRTP<ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > > >::Run' requested here; RAction(Helper &&h, const ColumnNames_t &bl, std::shared_ptr<PrevDataFrame> pd,; ^; /home/stefan/src/miniconda3/envs/test-jupyroot/bin/../lib/gcc/x86_64-conda-linux-gnu/7.5.0/../../../../x86_64-conda-linux-gnu/include/c++/7.5.0/bits/unique_ptr.h:821:34: note: in instantiation of member function 'ROOT::Internal::RDF::RAction<ROOT::Internal::RDF::FillHelper, ROOT::Detail::RDF::RNodeBase, ROOT::TypeTraits::TypeList<ROOT::VecOps::RVec<bool> > >::RAction' requested here; { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }; ^; /home",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/6675:5210,test,test-jupyroot,5210,https://root.cern,https://github.com/root-project/root/issues/6675,1,['test'],['test-jupyroot']
Testability,"echanism for redirecting cling diagnostics to a user provided ostream and use this in cppyy to capture the diagnostic output and append it to the python exceptions or warnings as appropriate. This PR fixes https://github.com/root-project/root/issues/11854. There are still some remaining problems with the transaction rollback, however template instantiation from cppyy now behaves the same as calling ```TInterpreter::Declare``` in this respect. This is likely related to the issues described by @jalopezg-git in https://github.com/root-project/root/pull/12449#issuecomment-1467860880 and can be fixed in a future PR. Consider the following test case:. test.h:; ```cpp; template <typename T>; class Helper {. public:. Helper() {}. std::size_t operator() () const {; const std::size_t res = 0;; res = T{0, 0}.size();; return res;; }. };. template <typename H>; std::size_t call_helper(const H &helper) {; return helper();; }; ```. test.py; ```python; import ROOT. ret = ROOT.gInterpreter.Declare('#include ""test.h""'); print(""declare ret"", ret). print(""creating helper""); helper = ROOT.Helper[ROOT.std.vector[""double""]](). print(""calling helper""). for i in range(2):; print(f""call attempt {i}""); try:; res = ROOT.call_helper(helper); print(""helper call succeeded:"", res); except Exception as e:; print(""helper call failed""); print(e); ```. The output below is now close to optimal for the first instantiation attempt. On the second instantiation attempt the error message is different/less useful because of the imperfect transaction rollback already noted. (but the same happens instantiating the template through ```TInterpreter::Declare``` as said). ```; declare ret True; creating helper; calling helper; call attempt 0; helper call failed; Template method resolution failed:; Failed to instantiate ""call_helper(Helper<vector<double> >&)""; In file included from input_line_52:1:; /home/b/bendavid/pyrootdebug6/test.h:10:9: error: cannot assign to variable 'res' with const-qualified type 'const st",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12449:1551,test,test,1551,https://root.cern,https://github.com/root-project/root/pull/12449,1,['test'],['test']
Testability,"ect output:. aaaa bbbbbb cccc; aaaa bbbbbb cccc. But if I try to read again the same file:. root -l test.root; root [0] gSystem->Load(""test_cpp""); root [1] obj->Print(); Error in <TBufferFile::ReadVersion>: Could not find the StreamerInfo with a checksum of 0x6b3ba626 for the class ""string"" in test.root.; Error in <TBufferFile::CheckByteCount>: object of class string read too many bytes: 72 instead of 24; Warning in <TBufferFile::CheckByteCount>: string::Streamer() not in sync with data on file test.root, fix Streamer(); aaaabbbbbb@ cccc�i�� cccc. With an older version of ROOT (6.18), everything works as expected. ### Some additional information. I tried to compare StreamerInfo for 2 ROOT versions and they are different (last item):. **root 6.18**. root [2] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0x64321048; string first [2] offset= 0 type=320 ,stl=365, ctype=365,; string second offset= 0 type=300 ,stl=365, ctype=365,. **root 6.22,24**. root [3] _file0->ShowStreamerInfo(); OBJ: TList TList Doubly linked list : 0; ; StreamerInfo for class: TestClass, version=1, checksum=0x84f55819; TObject BASE offset= 0 type=66 Basic ROOT object; map<array<string,2>,string> test_map_ offset= 0 type=300 (nodelete) ,stl=4, ctype=61,; ; StreamerInfo for class: pair<array<string,2>,string>, version=1, checksum=0xb5fb752; array<string,2> first offset= 0 type=62 Emulation; string second offset= 0 type=300 ,stl=365, ctype=365, Emulation; ; StreamerInfo for class: array<string,2>, version=1, checksum=0x6b3ba626; string _M_elems offset= 0 type=320 ,stl=365, ctype=365. Unfortunately, I don't how to proceed further. ### Setup. 1. Reproduced with ROOT 6.22.08, 6.24 (today's version from the",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8268:2166,Test,TestClass,2166,https://root.cern,https://github.com/root-project/root/issues/8268,1,['Test'],['TestClass']
Testability,"ects/ATLASG-1602/externals/build/AnalysisBaseExternals/src/Python/Include/cpython/abstract.h:147; ...; ```. Unfortunately all I could decipher from this is that things go south while accessing the `DataVector<xAOD::TauJet_v3>` type in Python. That access itself happens in a fairly complicated way itself, in this helper code:. https://gitlab.cern.ch/atlas/athena/-/blob/master/Control/xAODRootAccess/python/GenerateDVIterators.py. As before, I found that by explicitly accessing types ""in the right order"", I can work around the issue. (See: https://gitlab.cern.ch/atlas/athena/-/merge_requests/44843) But I'd really like to understand what the underlying issue actually is. Note that this problem only shows up in a debug build. In an optimised build the test in question runs just fine. ### Expected behavior; <!--; A clear and concise description of what you expected to happen.; -->. The code should not encounter an assertion inside LLVM/Cling. ### To Reproduce; <!--; Steps to reproduce the behavior:; 1. Your code that triggers the issue: at least a part; ideally something we can run ourselves.; 2. Don't forget to attach the required input files!; 3. How to run your code and / or build it, e.g. `root myMacro.C`, ...; -->. Unfortunately this would be pretty involved to describe. :frowning: Especially the setup that I used with Cling compiled in Debug mode. So I'm rather just hoping for input on how I myself could debug this further. ### Setup; <!--; 1. ROOT version; 2. Operating system; 3. How you obtained ROOT, such as `dnf install` / binary download / you built it yourself.; -->; - ROOT 6.24/00; - `x86_64-centos7-gcc8-dbg`; - ROOT built using: https://gitlab.cern.ch/atlas/atlasexternals/-/tree/master/External/ROOT. ### Additional context; <!--; Add any other context about the problem here.; -->. I guess my question is how I could get enough information out of of the `clang::DeclContext` object that the assertion fails on, to understand why the code ended up where it did...",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8578:12603,assert,assertion,12603,https://root.cern,https://github.com/root-project/root/issues/8578,1,['assert'],['assertion']
Testability,"ed (this=0x7ffff83eb1c8, namecycle=<optimized out>, expectedClass=0x10a596170) at /builddir/build/BUILD/root-6.28.00/io/io/src/TDirectoryFile.cxx:1111; #48 0x0000000108cd56c0 in TDirectory::GetObject<TMVA::Experimental::SOFIE::RModel> (ptr=<synthetic pointer>: <optimized out>, namecycle=0x108cd6d08 ""model"", this=0x7ffff83eb1c8) at /builddir/build/BUILD/root-6.28.00/core/meta/inc/TClass.h:651; #49 EmitModel (inputfile=..., outname=""Add"") at /builddir/build/BUILD/root-6.28.00/ppc64le-redhat-linux-gnu/tmva/sofie/test/EmitFromRoot_all.cxx:26; #50 0x0000000108cd23dc in main (argc=<optimized out>, argv=<optimized out>) at /usr/include/c++/8/ext/new_allocator.h:79; ===========================================================; pure virtual method called; terminate called without an active exception; Subprocess aborted; ~~~. Disabling the SOFIE parser, so that the build completes. There are error during testing:. There are failures when running in interpreter mode:. ~~~; 98/1192 Test #779: tutorial-roofit-rf104_classfactory ..................................***Failed Error regular expression found in output. Regex=[segmentation violation]126.58 sec; Processing /builddir/build/BUILD/root-6.28.00/tutorials/roofit/rf104_classfactory.C...; *** Break *** segmentation violation; ===========================================================; There was a crash (#5 0x00007fffa8bac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fffa80f2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fffa805a38c in do_system () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #2 0x00007fffa8ba9044 in TUnixSystem::Exec (shellcmd=<optimized out>, this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x11eee5850) at /builddir/buil",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:11894,Test,Test,11894,https://root.cern,https://github.com/root-project/root/issues/12372,1,['Test'],['Test']
Testability,"ed here; #include <bits/uses_allocator_args.h> // uninitialized_construct_using_alloc; ^; ```. this is the stack trace we see when this error occurs; ```; ===========================================================; There was a crash (kSigAbort).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00002b4bd10da72b in waitpid () from /lib64/libc.so.6; #1 0x00002b4bd103bcf7 in do_system () from /lib64/libc.so.6; #2 0x00002b4bd1d2345c in TUnixSystem::Exec (this=0x7472d0, shellcmd=0xc1f5720 ""/pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/gdb-backtrace.sh 43811 1>&2"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:2104; #3 0x00002b4bd1d23cfd in TUnixSystem::StackTrace (this=0x7472d0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:2395; #4 0x00002b4bd1896496 in (anonymous namespace)::do_trace (sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00002b4bd1896526 in (anonymous namespace)::TExceptionHandlerImp::HandleException (this=0x2a96890, sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:201; #6 0x00002b4bd1d276e5 in TUnixSystem::DispatchSignals (this=0x7472d0, sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:2172,test,tests,2172,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,"ed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidParameters (Failed); 	1077 - tutorial-dataframe-df006_ranges-py (Failed); 	1106 - tutorial-math-exampleFunction-py (Failed); Errors while running CTest; ```; With the proposed change in #10303 to not fail on the warning about RooNaNPacker not being implemented for big endian, the list of failures is shorter:; ```; 99% tests passed, 17 tests failed out of 1232; Label Time Summary:; longtest = 540.69 sec*proc (27 tests); multithreaded = 678.83 sec*proc (2 tests); python_runtime_deps = 60.39 sec*proc (11 tests); tutorial = 3802.05 sec*proc (786 tests); Total Test time (real) = 2732.59 sec; The following tests FAILED:; 	 16 - pyunittests-pyroot-pyz-stl-vector (Failed); 	 57 - pyunittests-pyroot-pyz-rtensor (Failed); 	237 - gtest-roofit-roofitcore-test-testRooProdPdf (Failed); 	243 - gtest-roofit-roofitcore-test-testNaNPacker (Failed); 	274 - test-stresshistogram (Failed); 	275 - test-stresshistogram-interpreted (Failed); 	296 - test-stresshistofit (Failed); 	297 - test-stresshistofit-interpreted (Failed); 	396 - gtest-tree-dataframe-test-datasource-ntuple (Failed); 	402 - gtest-tree-ntuple-v7-test-ntuple-basics (Failed); 	406 - gtest-tree-ntuple-v7-test-ntuple-merger (Failed); 	412 - gtest-tree-ntuple-v7-test-ntuple-serialize (Failed); 	420 - gtest-tree-ntuple-v7-test-ntuple-minifile (Failed); 	423 - gtest-tree-ntuple-v7-test-ntuple-extended (Failed); 	870 - tutorial-roofit-rf612_recoverFromInvalidPara",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10409:2712,test,tests,2712,https://root.cern,https://github.com/root-project/root/issues/10409,1,['test'],['tests']
Testability,"eenc/test-products/root/v6_20_04/build/Linux64bit+3.10-2.17-e20-p382-debug/interpreter/llvm/src/tools/clang/include/clang/AST/DeclNodes.inc:369. #13 0x00007fffe3d4796c in clang::Sema::InstantiateClass (this=0x7da020, PointOfInstantiation=..., Instantiation=0x7e8ed10, Pattern=0x51e4900, TemplateArgs=..., TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2083. #14 0x00007fffe3d49340 in clang::Sema::InstantiateClassTemplateSpecialization (this=0x7da020, PointOfInstantiation=..., ClassTemplateSpec=0x7e8ed10, TSK=clang::TSK_ImplicitInstantiation, Complain=true). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaTemplateInstantiate.cpp:2543. #15 0x00007fffe3e0b218 in clang::Sema::RequireCompleteTypeImpl (this=0x7da020, Loc=..., T=..., Diagnoser=0x7fffffff5ff0). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7331. #16 0x00007fffe3e0a679 in clang::Sema::RequireCompleteType (this=0x7da020, Loc=..., T=..., Diagnoser=...) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaType.cpp:7109. #17 0x00007fffe35607f9 in clang::Sema::RequireCompleteType<clang::SourceRange> (this=0x7da020, Loc=..., T=..., DiagID=2588). at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/include/clang/Sema/Sema.h:1653. --Type <RET> for more, q to quit, c to continue without paging--c. #18 0x00007fffe355c52a in clang::Sema::RequireCompleteDeclContext (this=0x7da020, SS=..., DC=@0x7fffffff61e0: 0x7e8ed48) at /scratch/greenc/test-products/root/v6_20_04/source/root-6.20.04/interpreter/llvm/src/tools/clang/lib/Sema/SemaCXXScopeSpec.cpp:235. #19 0x00007fffe28426bb in cling::LookupHelper::findScope (this=0x78a0e0, className=..., ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5462:5197,test,test-products,5197,https://root.cern,https://github.com/root-project/root/pull/5462,1,['test'],['test-products']
Testability,"efinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:610:16: note: previous definition is here; typedef struct __crt_locale_data_public; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:617:16: error: redefinition of '__crt_locale_pointers'; typedef struct __crt_locale_pointers; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:617:16: note: previous definition is here; typedef struct __crt_locale_pointers; ^; In file included from libGeom dictionary payload:17:; In file included from C:/root-dev/root\include\TGeoExtension.h:15:; In file included from C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.38.33130\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\include\10.0.22621.0\ucrt\corecrt.h:625:16: error: redefinition of '_Mbstatet'; typedef struct _Mbstatet; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.22000.0\ucrt\corecrt.h:625:16: note: previous definition is here; typedef struct _Mbstatet; ^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class gGeoManager with content:. ... Assertion failed: !m_Unloading && ""Must not nest within unloading transaction"", file C:\root-dev\git\master\interpreter\cling\lib\Interpreter\Transaction.cpp, line 98; *** Break *** abort. ==========================================; =============== STACKTRACE ===============; ==========================================; ...; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14346:3066,assert,assert,3066,https://root.cern,https://github.com/root-project/root/pull/14346,2,"['Assert', 'assert']","['Assertion', 'assert']"
Testability,"efore)*; - https://github.com/wlav/CPyCppyy/pull/18; - https://github.com/wlav/CPyCppyy/pull/19; - https://github.com/wlav/CPyCppyy/pull/21; - https://github.com/wlav/CPyCppyy/pull/22; - https://github.com/wlav/CPyCppyy/pull/23. ## Performance validation. To validate the performance, I ran the [Python tests in roottest](https://github.com/root-project/roottest/tree/master/python) and the [PyROOT pythonization tests](https://github.com/root-project/root/tree/master/bindings/pyroot/pythonizations/test) and compared runtimes with and without the cppyy upgrade. The total runtime of these tests reduced by about 4 % from 208 s to 287 s, so the performance impact of this PR is marginal. The runtime comparison for each test can be found in [cppyy_upgrade_test_runtimes.txt](https://github.com/root-project/root/files/14623432/cppyy_upgrade_test_runtimes.txt).; The worst observed performance penalty is 24 %. However, significant speedups are observed in some of the longer tests. For convenience, the 20 tests with the longest runtime are listed here:; ```; title no_cppyy_upgrade cppyy_upgrade ratio; python-regression-regression 32.61 34.30 1.051825; pyroot-pyz-rdataframe-asnumpy 14.30 14.61 1.021678; pyroot-pyz-rdataframe-makenumpy 13.66 9.65 0.706442; python-function-function 12.27 11.08 0.903015; python-cpp-cpp 12.03 11.26 0.935993; python-cpp-advanced 11.55 10.83 0.937662; pyroot-pyz-rdataframe-histo-profile 11.24 7.37 0.655694; python-basic-basic 10.11 9.95 0.984174; python-stl-stl 8.35 7.87 0.942515; pyroot-pyz-rtensor 6.94 2.32 0.334294; python-ttree-ttree 6.15 5.70 0.926829; python-basic-datatype 5.87 5.86 0.998296; python-pickle-write 5.56 5.56 1.000000; python-basic-overload 5.29 5.30 1.001890; python-pythonizations-pythonizations 5.27 5.20 0.986717; python-pythonizations-smartptr 5.04 4.89 0.970238; python-basic-operator 4.79 4.74 0.989562; python-cpp-cpp11 4.72 4.69 0.993644; python-memory-memory 4.62 4.48 0.969697; python-regression-root_6023 4.61 4.44 0.963124; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14507:3487,test,tests,3487,https://root.cern,https://github.com/root-project/root/pull/14507,1,['test'],['tests']
Testability,"egmentation fault.; 0x00007f1251f78110 in __do_global_dtors_aux () from /lib64/libopenblaso.so.0; (gdb) ; (gdb) bt; #0 0x00007f1251f78110 in __do_global_dtors_aux () from /lib64/libopenblaso.so.0; #1 0x00007f1279ebef9e in _dl_fini () at dl-fini.c:142; #2 0x00007f12796574dd in __run_exit_handlers (status=0, listp=0x7f12797fa838 <__exit_funcs>, run_list_atexit=run_list_atexit@entry=true, ; run_dtors=run_dtors@entry=true) at exit.c:116; #3 0x00007f1279657620 in __GI_exit (status=<optimized out>) at exit.c:146; #4 0x00007f127963feb7 in __libc_start_call_main (main=main@entry=0x557932280160 <main>, argc=argc@entry=2, argv=argv@entry=0x7ffe94d9b838); at ../sysdeps/nptl/libc_start_call_main.h:74; #5 0x00007f127963ff60 in __libc_start_main_impl (main=0x557932280160 <main>, argc=2, argv=0x7ffe94d9b838, init=<optimized out>, fini=<optimized out>, ; rtld_fini=<optimized out>, stack_end=0x7ffe94d9b828) at ../csu/libc-start.c:389; #6 0x0000557932280095 in _start (); ```. And the same stacktrace is produced for all three tests. This may or may not be linked to https://github.com/wlav/cppyy/issues/227 and the fact that complex Python packages (in this case it's xgboost, but also pytorch is notorious for this behaviour) seem to not handle well C++ symbols. Our current understanding of the situation with RBDT is the following:; * The implementation that is currently in master never actually worked on multiple levels (largely untested, tutorials did not check for correctness of results); * Even if it worked, it lacked the ability to handle imbalanced trees which is pretty common when using xgboost models; * The re-implementation of the feature available at https://github.com/root-project/root/pull/15173 vastly improves the functionality; * There seems to be a major issue with complex Python packages and C++ which looks like we can't solve and will make at least one platform always red on our CI if we leave things as they are. ### Reproducer. At least on Alma9, the following is the sma",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15197:2285,test,tests,2285,https://root.cern,https://github.com/root-project/root/issues/15197,1,['test'],['tests']
Testability,"eing switching ON 'builtin_ftgl' option; -- Checking for module 'davix>=0.6.4'; -- Package 'davix', required by 'virtual:world', not found; -- Looking for uuid_generate_random in uuid; -- Looking for uuid_generate_random in uuid - found; -- Found libuuid: /usr/include; -- Davix dependencies not found, switching OFF 'davix' option.; -- Looking for TBB; -- Found TBB: /usr (Required is at least version ""2018""); -- Looking for VDT; -- Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY) (Required is at least version ""0.4""); -- VDT not found. Ensure that the installation of VDT is in the CMAKE_PREFIX_PATH; -- Switching ON 'builtin_vdt' option; -- Cannot select cudnn without selecting cuda or tmva-gpu. Option is ignored; -- Looking for BLAS for optional parts of TMVA; -- Looking for sgemm_; -- Looking for sgemm_ - not found; -- Looking for sgemm_; -- Looking for sgemm_ - found; -- Found BLAS: /usr/lib/libblas.so; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB; -- Performing Test ROOT_HAVE_CXX_ATOMICS_WITHOUT_LIB - Success; -- Building LLVM in 'Release' mode.; -- The ASM compiler identification is GNU; -- Found assembler: /usr/bin/cc; -- Could NOT find Z3: Found unsuitable version ""0.0.0"", but required is at least ""4.7.1"" (found Z3_LIBRARIES-NOTFOUND); -- Looking for backtrace; -- Looking for backtrace - found; -- backtrace facility detected in default set of libraries; -- Found Backtrace: /usr/include; -- Native target architecture is X86; -- Threads disabled.; -- Doxygen disabled.; -- Go bindings disabled.; -- Could NOT find OCaml (missing: OCAMLFIND OCAML_VERSION OCAML_STDLIB_PATH); -- OCaml bindings disabled.; -- Found Python module pygments; -- Found Python module pygments.lexers.c_cpp; -- Found Python module yaml; -- LLVM host triple: x86_64-unknown-linux-gnu; -- LLVM default target triple: x86_64-unknown-linux-gnu; -- Building with -fPIC; -- Found PythonInterp: /usr/bin/python3.10 (found version ""3.10.4""); -- Constructing LLVMBuild project information; -- ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10528:8130,Test,Test,8130,https://root.cern,https://github.com/root-project/root/issues/10528,2,['Test'],['Test']
Testability,"elFor(unsigned int, unsigned int, unsigned int, std::function<void (unsigned int)> const&)::{lambda()#1} const, void>::operator()() const (in /home/axel/build/root/24/rel/lib/libImt.so); ==30221== by 0x6707E65: tbb::interface7::internal::task_arena_base::internal_execute(tbb::interface7::internal::delegate_base&) const (in /usr/lib/x86_64-linux-gnu/libtbb.so.2); ==30221== by 0x4AD4917: ROOT::TThreadExecutor::ParallelFor(unsigned int, unsigned int, unsigned int, std::function<void (unsigned int)> const&) (in /home/axel/build/root/24/rel/lib/libImt.so); ==30221== by 0x153BD2: SimpleParallelRDFs() (in /home/axel/build/root/24/rel/tree/dataframe/test/dataframe_concurrency); ==30221== by 0x19B770: void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) (in /home/axel/build/root/24/rel/tree/dataframe/test/dataframe_concurrency); ==30221== by 0x189F39: testing::Test::Run() [clone .part.0] (in /home/axel/build/root/24/rel/tree/dataframe/test/dataframe_concurrency); ==30221== by 0x18A3D1: testing::TestInfo::Run() [clone .part.0] (in /home/axel/build/root/24/rel/tree/dataframe/test/dataframe_concurrency); ==30221== by 0x18A5DD: testing::TestSuite::Run() [clone .part.0] (in /home/axel/build/root/24/rel/tree/dataframe/test/dataframe_concurrency); ==30221== by 0x18B69C: testing::internal::UnitTestImpl::RunAllTests() (in /home/axel/build/root/24/rel/tree/dataframe/test/dataframe_concurrency); ==30221== by 0x18BC07: testing::UnitTest::Run() (in /home/axel/build/root/24/rel/tree/dataframe/test/dataframe_concurrency); ==30221== by 0x19C4D3: main (in /home/axel/build/root/24/rel/tree/dataframe/test/dataframe_concurrency); ==30221== Uninitialised value was created by a stack allocation; ==30221== at 0x9D13320: (anonymous namespace)::DAGCombiner::visitOR(llvm::SDNode*) (in /home/axel/build/root/24/rel/lib/libCling.so); ==30221== . ```. ### Setup; 1. ROOT version: tip of 6-24; 2. Operating system: Mint 20.1",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8899:6488,test,test,6488,https://root.cern,https://github.com/root-project/root/issues/8899,12,"['Test', 'test']","['TestInfo', 'TestSuite', 'test', 'testing']"
Testability,"elp), I think it doesn't require anything except standardised list of type_info-derived types [8]; > 3) Take a closer look at noop1() and noop2() virtual methods above [6]. I suspect they were added to make libcxxabi type_info's vtable compatible with one of type_info from libsupc++, because libsupc++'s type_info also has a couple of virtual methods before the method which does catching check (see above [3]). The only difference is that __do_catch() has additional third argument whilst libcxxabi's can_catch() has only two. I think it won't cause problems if one calls two-argument method with three arguments, but doing the opposite might be troublesome. So, finally, if I'm right, we may try to call the method using vtable offset directly.; > ; > [1] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#dynamic_cast-algorithm; > [2] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#exception-matching-algorithm; > [3] https://github.com/gcc-mirror/gcc/blob/8805daa6d1a973e4e85698d7cf65a46c8cc85aac/libstdc%2B%2B-v3/libsupc%2B%2B/typeinfo#L163; > [4] https://github.com/llvm-mirror/libcxx/blob/68fdad67e334de18451c749550908274a5fd2542/include/typeinfo; > [5] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L20; > [6] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.h#L26; > [7] https://github.com/llvm-mirror/libcxxabi/blob/1f4353379227ba3d8b44a8694fc54e0ca6de39cd/src/private_typeinfo.cpp#L147; > [8] https://itanium-cxx-abi.github.io/cxx-abi/abi.html#rtti-layout. On 26/03/17 16:54, Berserker Troll wrote:; > I've implemented cast based on direct vtable access [9]. It should work for both libstdc++/libsupc++ and libcxx(abi).; > Also I've updated my TDirectory test so they have the same output format [a]; >; > [9] https://gist.github.com/BerserkerTroll/01debd56c2987ab89b0a94b783373e35; > [a] https://gist.github.com/BerserkerTroll/b94c2d3e3a5848be7c7dd53e323e1cdb",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/463:3976,test,test,3976,https://root.cern,https://github.com/root-project/root/pull/463,1,['test'],['test']
Testability,"emaining uses of the global write lock in typical RDataFrame event loops. There are two parts to this. 1) A bug fix in the hashing of streamer info when opening files. (The hash was including the TKey timestamp and therefore ended up being unique even for files with identical streamer info). 2) Since TTreeProcessorMT can carefully manage its TChains and corresponding TFile and TTree objects, global lists/cleanup and thread safety features can be bypassed or disabled. Together these changes are enough to almost completely eliminate the use of the global write lock in typical event loops. The only remaining using is the calls from ```TFile``` to ```TProcessUUID::AddUUID``` and ```TProcessUUID::RemoveUUID``` There are still several remaining places where the global read lock is taken, and these still have some cost in light of the remaining global write lock usage. These changes have the biggest impact when analyzing a large number of files. A test case is below. Produce the test dataset:; ```cpp; #include ""TFile.h""; #include ""TTree.h""; #include ""TString.h""; #include <thread>. void testwrite() {. const unsigned int nfiles = 4000;; const unsigned int nentries = 1000*1000;. float outval = 1.;. for (unsigned int ifile = 0; ifile < nfiles; ++ifile) {; TFile *fout = TFile::Open(TString::Format(""test_%i.root"", ifile), ""RECREATE"");; TTree *tree = new TTree(""tree"", """");; tree->Branch(""outval"", &outval);; for (unsigned int ientry = 0; ientry < nentries; ++ientry) {; tree->Fill();; }; tree->Write();; fout->Close();. // make sure that each key has a distinct timestamp to maximally; // provoke different hashes for streamer info in each file; std::this_thread::sleep_for(1100ms);; }. }; ```. Test event loop:; ```python; import ROOT; ROOT.gInterpreter.ProcessLine("".O3""); ROOT.ROOT.EnableImplicitMT(). chain = ROOT.TChain(""tree""); chain.Add(""test_*.root""). d = ROOT.ROOT.RDataFrame(chain); res = d.Sum(""outval""). resval = res.GetValue(); print(resval); ```. With 256 threads:. + Baseline:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/9486:1004,test,test,1004,https://root.cern,https://github.com/root-project/root/pull/9486,1,['test'],['test']
Testability,"ementalParser::EParseResult, llvm::PointerLikeTypeTraits<cling::Transaction*>, llvm::PointerIntPairInfo<cling::Transaction*, 2u, llvm::PointerLikeTypeTraits<cling::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0; #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0; #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17; #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7; #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16; #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4; #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555); #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89); <snip/>; ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempt",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:5716,test,test-products,5716,https://root.cern,https://github.com/root-project/root/issues/10861,1,['test'],['test-products']
Testability,"enkins/workspace/ib-run-pr-tests/testBuildDir/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/etc/gdb-backtrace.sh 43811 1>&2"") at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:2104; #3 0x00002b4bd1d23cfd in TUnixSystem::StackTrace (this=0x7472d0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:2395; #4 0x00002b4bd1896496 in (anonymous namespace)::do_trace (sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:182; #5 0x00002b4bd1896526 in (anonymous namespace)::TExceptionHandlerImp::HandleException (this=0x2a96890, sig=5) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:201; #6 0x00002b4bd1d276e5 in TUnixSystem::DispatchSignals (this=0x7472d0, sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3610; #7 0x00002b4bd1d1f654 in SigHandler (sig=kSigAbort) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:395; #8 0x00002b4bd1d2763b in sighandler (sig=6) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/unix/src/TUnixSystem.cxx:3586;",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:2774,test,tests,2774,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,"eport, for instance ""issue still exists in today's master"".; -->; hi -. We've been seing a crash in genreflex/rootcling in root-6.26.06-patches; when processing gcc12 headers. (See ATEAM-854.). To reproduce:. sel.xml:; ```; <lcgdict>; <class pattern=""*iterator<*pair<const*,const*""/>; </lcgdict>; ```. x.h:; ```; #include <string>; #include <map>; void foo (std::map<unsigned, std::string>& m, const std::string& s); {; m.emplace (0, s);; }; ```. On lxplus7:; ```; $ export LCGPROJECTPATH=/cvmfs/sft-nightlies.cern.ch/lcg/nightlies/dev4/Thu # Adjust if needed.; $ . $LCGPROJECTPATH/gcc/12.1.0/x86_64-centos7/setup.sh; $ . $LCGPROJECTPATH/ROOT/v6-26-00-patches/x86_64-centos7-gcc12-dbg/ROOT-env.sh ; $ genreflex x.h --selection_file=sel.xml -o x_gen.cxx; genreflex: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-26-00-patches/src/ROOT/v6-26-00-patches/interpreter/llvm/src/tools/clang/include/clang/AST/TemplateBase.h:257: clang::QualType clang::TemplateArgument::getAsType() const: Assertion `getKind() == Type && ""Unexpected kind""' failed.; ```. It also crashes in the opt build, just a bit further on. Stack trace:. ```; #4 0x00007ffff2f71cf3 in clang::TemplateArgument::getAsType (; this=0x7fffef6df2e8); at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-26-00-patches/src/ROOT/v6-26-00-patches/interpreter/llvm/src/tools/clang/include/clang/AST/TemplateBase.h:257; #5 0x00007ffff2f85aeb in ROOT::TMetaUtils::ReSubstTemplateArg (input=..., ; instance=0x7fffef6df2c0); at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-26-00-patches/src/ROOT/v6-26-00-patches/core/clingutils/src/TClingUtils.cxx:4768; #6 0x00007ffff2f85c07 in ROOT::TMetaUtils::ReSubstTemplateArg (input=..., ; instance=0x7fffef6df2c0); at /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-v6-26-00-patches/src/ROOT/v6-26-00-patches/core/clingutils/src/TClingUtils.cxx:4791; #7 0x00007ffff32362a4 in TClingBaseClassInfo::InternalNext (; this=0x7fffff",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11259:1300,Assert,Assertion,1300,https://root.cern,https://github.com/root-project/root/issues/11259,1,['Assert'],['Assertion']
Testability,"er declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper.; cf88615b6e [RF] Improve code in `MinuitFcnGrad`; 17bac5528b [RF] Code improvements in tests for new TestStatistics; afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method; 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`; 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'.; 5964158260 [RF] Add observables as another parameter in RooFuncWrapper.; cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`; 333e857cc6 Add AD based derivatives for RooFuncWrapper.; 46ba2eefd0 [cxxmodules] Enab",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12681:3199,test,test,3199,https://root.cern,https://github.com/root-project/root/pull/12681,9,['test'],['test']
Testability,"er seemingly unrelated changes in the RooAbsArg base class; * the memory layout and checksums of the RooRealVar classes didn't change between 6.24 (version of the reference file) and ROOT master. Here is the streamer info of RooRealVar in master:; ```; root [7] TClass::GetClass(""RooRealVar"")->GetStreamerInfo()->ls(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset=720 type= 8 Symmetric error associated with current value; double _asymErrLo offset=728 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset=736 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset=744 type=64 ; i= 0, RooAbsRealLValue type= 0, offset= 0, len=1, method=0; i= 1, _error type= 28, offset=720, len=3, method=0 [optimized]; i= 2, _binning type= 64, offset=744, len=1, method=0; ```; Here is the streamer info for RooRealVar from the [categories_v624.root reference file](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/categories_v624.root):; ```; root [6] _file0->ShowStreamerInfo(). StreamerInfo for class: RooRealVar, version=7, checksum=0xfd173f72; RooAbsRealLValue BASE offset= 0 type= 0 Abstract modifiable real-valued object; double _error offset= 0 type= 8 Symmetric error associated with current value; double _asymErrLo offset= 0 type= 8 Low side of asymmetric error associated with current value; double _asymErrHi offset= 0 type= 8 High side of asymmetric error associated with current value; RooAbsBinning* _binning offset= 0 type=64; ```. ### Expected behavior. There should be no warnings in `TStreamerInfo::BuildCheck` and `TStreamerInfo::CompareContent`. ### To Reproduce. Open the [categories_v624.root reference file](https://github.com/root-project/root/blob/master/roofit/roofitcore/test/categories_v624.root) with ROOT master plus commit 068465e cherry-picked on top.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/8791:2130,test,test,2130,https://root.cern,https://github.com/root-project/root/issues/8791,2,['test'],['test']
Testability,"er>(nullptr, validCols));; {code}; and one of the component of make_shared is the call to the following shared_ptr constructor; {code:c++}; // This constructor is non-standard, it is used by allocate_shared.; template<typename _Alloc, typename... _Args>; shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,; _Args&&... __args); : __shared_ptr<_Tp>(__tag, __a, std::forward<_Args>(__args)...); { }; {code}; Note the use of std::forward. The snapshot test has 2 steps:. 1. Do the work, including a call to SnapshotImpl which contains the problem line, with only compiled code; 2. Do the same work relying on interpreted code, in which case SnapshotImpl is called via the interpreter. The symptoms of the failure is that **if** the snapshot test is compiled with optimization then. a. The compiled version works fine; b. In the interpreted version the constructor of the RInterface is wrong because the shared_ptr its constructor sees is **not** initialized. If the snapshot test is compiled without optimization then both steps succeeds. The main difference between the two is the amount of fully realized (i.e. non-inlined) functions emitted by the compiler. In the success fully case we have a stack like. {code}; interp SnapshotImpl calls; compiled std::make_shared<ROOT::Detail::RDF::RLoopManager … [in debug mode. this routine and down are used compiled]; compiled std::allocate_shared<ROOT::Detail::RDF::RLoopManager; ... implementation details .. all compiled.; compiled ROOT::Detail::RDF::RLoopManager::RLoopManager; compiled std::make_shared<ROOT::RDF::RInterface …; compiled std::allocate_shared<ROOT::RDF::RInterface …; compiled std::shared_ptr< ROOT::RDF::RInterface; compiled std::__shared_ptr<ROOT::RDF::RInterface<ROOT::Detail::RDF::RLoopManager; {code}. {code}; interp SnapshotImpl calls; interp std::make_shared<ROOT::Detail::RDF::RLoopManager …; interp std::allocate_shared<ROOT::Detail::RDF::RLoopManager; ... implementation details .. all interpreted.; compiled ROOT::Detail::R",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/2158:1220,test,test,1220,https://root.cern,https://github.com/root-project/root/pull/2158,1,['test'],['test']
Testability,"eration support for RooLandau and RooGamma; f3d9863ef8 [RF] Use RooWorkspace in `testRooFuncWrapper`; b5e7f383ac [RF] Use variable names based on `RooAbsArg` names in code generation; 4f7c3b0a6c [RF] Add AD support for RooChebychev and RooAddPdf.; 6438fdb78a [RF] Format RooPolyVar.(h/cxx) and RooPolynomial.(h/cxx) files.; 75d5e3d4b7 [RF] Add code-squash support for RooPolyVar and RooPolynomial.; e826686911 [RF] Remove the `RooAbsReal::evaluateSpan()` family of functions; 3608bc02fb [RF] Don't put scalar intermediate results into loops in generated code; 249131f739 [RF] Generalize and reuse some of the BatchMode code in code squashing; 7a12837f66 [RF] Split up CodeSquashContext in `.h` and `.cxx` file; 1985b1b8d7 [RF] Reuse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12723:1703,test,testRooFuncWrapper,1703,https://root.cern,https://github.com/root-project/root/pull/12723,5,['test'],['testRooFuncWrapper']
Testability,"ere be anything I could try to ""persuade"" similar quirks, from either C++ or Python to make them work?. Thank you very much for your time!. ### Reproducer. ```py; import cppyy. cppyy.cppdef('''; // some ""expression"" out of which a std::function can be constructed; template <typename Fn> struct expression {; using function_type = decltype(std::function(std::declval<Fn>()));; };. // some ""equation"" specialized to handle such expressions; template <typename T> class equation;; template <typename Ret, typename... Args> class equation<Ret(Args...)> {};. // deduce what equation to make from std::function; template <typename Fn> struct deduce_equation;; template <typename Ret, typename... Args>; struct deduce_equation<std::function<Ret(Args...)>> {; using type = equation<std::decay_t<Ret>(; std::decay_t<Args>...)>;; };. // shortcut for expression -> function -> equation; template <typename Fn>; using equation_t = typename deduce_equation<; typename expression<Fn>::function_type>::type;. // testing...; auto lmbd = [](int x){return x;};; using simple_equation_t = equation_t<decltype(lmbd)>;; auto simple_equation = simple_equation_t();; '''). # ...it worked; print(cppyy.gbl.simple_equation) # <cppyy.gbl.equation<int(int)> object at 0x108b4d000>. # things stop mid-way in cppyy ; expression_function_type = cppyy.gbl.expression['std::function<int(int)>'].function_type # <class cppyy.gbl.std.function<int(int)> at 0x7fc1ddfa8f30>; simple_deduction = cppyy.gbl.deduce_equation['std::function<int(int)>'].type # AttributeError; # simple_equation = cppyy.gbl.equation_t['std::function<int(int)>']() # works fine with cppyy 3.0.0 from here; # print(simple_equation); ```; ```py; # importing cppyy and my C++ library; import cppyy; cppyy.include('queryosity.h'); from cppyy.gbl import queryosity as q. # JIT and get some C++ function; cppyy.cppdef('''auto fn = std::function([](){return 1;});'''); fn = cppyy.gbl.fn. # use it in my templated library; df = q.dataflow(); expr = q.column.expression",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/15062:2230,test,testing,2230,https://root.cern,https://github.com/root-project/root/issues/15062,1,['test'],['testing']
Testability,"erimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.SerializeFooter (0 ms); [----------] 14 tests from RNTuple (190 ms total); [----------] Global test environment tear-down; [==========] 14 tests from 1 test suite ran. (190 ms total); [ PASSED ] 12 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.SerializeEnvelope; [ FAILED ] RNTuple.SerializeLocator; 2 FAILED TESTS; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-types. Endian issue:. $ printf '%x\n%x\n' 180388626432 42; 2a00000000; 2a; ~~~; 465/1272 Test #433: gtest-tree-ntuple-v7-test-ntuple-types ..............................***Failed 5.68 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 18 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 18 tests from RNTuple; [ RUN ] RNTuple.TypeName; [ OK ] RNTuple.TypeName (316 ms); [ RUN ] RNTuple.CreateField; [ OK ] RNTuple.CreateField (0 ms); [ RUN ] RNTuple.ArrayField; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(con",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:15497,Test,Test,15497,https://root.cern,https://github.com/root-project/root/issues/12426,1,['Test'],['Test']
Testability,"ern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ===========================================================; #6 ROOT::Experimental::RClassField::RClassField (this=0x7ffc9edb22f0, fieldName=..., className=..., classp=<optimized out>) at /usr/include/c++/13/bits/new_allocator.h:88; #7 0x00007f3e5fcafc66 in ROOT::Experimental::RClassField::RClassField (this=this; entry=0x7ffc9edb22f0, fieldName=""klass"", className=""8G325Y212U"") at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RField.cxx:841; #8 0x0000558efca002c2 in ROOT::Experimental::RField<TestEBO, void>::RField (name=..., this=0x7ffc9edb22f0) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/inc/ROOT/RField.hxx:643; #9 RNTuple_TClassEBO_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_types.cxx:387; #10 0x00007f3e5fc02eb3 in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) [clone .constprop.0] () from /lib64/libgtest.so.1.13.0; #11 0x00007f3e5fbef17e in testing::Test::Run() () from /lib64/libgtest.so.1.13.0; #12 0x00007f3e5fbef385 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.13.0; #13 0x00007f3e5fbef4d7 in testing::TestSuite::Run() () from /lib64/libgtest.so.1.13.0; #14 0x00007f3e5fbfc090 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.13.0; #15 0x00007f3e5fbfae98 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.13.0; #16 0x00007f3e5fbac116 in main () from /lib64/libgtest_main.so.1.13.0; #17 0x00007f3e5f048b4a in __libc_start_call_main () from /lib64/libc.so.6; #18 0x00007f3e5f048c0b in __libc_start_main_impl () from /lib64/libc.so.6; #19 0x0000558efc9fc045 in _start (); ===========================================================; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (mess",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12428:10386,test,testing,10386,https://root.cern,https://github.com/root-project/root/issues/12428,7,"['Test', 'test']","['Test', 'testing']"
Testability,erpreter/llvm/src/tools/clang/lib/Lex/PPCaching.cpp; [6494/9540] /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/include -D__ROOFIT_NOBANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility=hidden -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -std=c++17 -MD -MT interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/Lexer.cpp.o -MF interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/Lexer.cpp.o.d -o interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/Lexer.cpp.o -c /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:3546,test,tests,3546,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
Testability,"error: reference to 'Experimental' is ambiguous; Experimental::RH2D hist{{100, 0., 1.}, {{0., 1., 2., 3., 10.}}};; ^; ...root.../include/ROOT/RLogger.hxx:28:11: note: candidate found by name lookup is 'ROOT::Experimental'; namespace Experimental {; ^; ...root.../include/TMVA/RBDT.hxx:31:11: note: candidate found by name lookup is 'TMVA::Experimental'; namespace Experimental {. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8492:445,test,tested,445,https://root.cern,https://github.com/root-project/root/pull/8492,1,['test'],['tested']
Testability,"error: std::map<std::basic_string<char>, double, std::less<std::basic_string<char> >, std::allocator<std::pair<const std::basic_string<char>, double> > >' has different definitions in different modules; first difference is defined here found end of class\n/usr/lib/gcc/aarch64-redhat-linux/4.8.5/../../../../include/c++/4.8.5/bits/stl_map.h:941:9: note: but in 'std.bits/stl_map.h' found friend declaration\n operator==(const map<_K1, _T1, _C1, _A1>&,\n ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nroot.exe: ../../../../../../../../root/interpreter/cling/lib/Interpreter/Transaction.cpp:138: void cling::Transaction::append(cling::Transaction::DelayCallInfo): Assertion getState() == kCollecting && Cannot append declarations in current state.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4520:660,Assert,Assertion,660,https://root.cern,https://github.com/root-project/root/pull/4520,1,['Assert'],['Assertion']
Testability,ers\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)),MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:7598,Test,Test,7598,https://root.cern,https://github.com/root-project/root/pull/5054,2,"['Test', 'test']","['Test', 'test']"
Testability,ers\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(531): Labeled axis w/o title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_label)); 77: Which is: 1; 77: To be equal to: RAxisLabels::kLabelsCmpSubset | RAxisLabels::kLabelsCmpSuperset; 77: Which is: 3; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(484): error: Expected: caxis.CompareBinLabels(RAxisLabels(swapped_labels)); 77: Which is: 4; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset | RAxisLabels::kLabelsCmpDisordered; 77: Which is: 6; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(469): error: Expected: caxis.CompareBinLabels(RAxisLabels(one_extra_label)); 77: Which is: 0; 77: To be equal to: RAxisLabels::kLabelsCmpSuperset; 77: Which is: 2; 77: Google Test trace:; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(537): Labeled axis with title; 77: C:\Users\bellenot\git\master\hist\histv7\test\axis.cxx(477): error: Expected: caxis.CompareBinLabels(RAxisLabels(changed_one_lab,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5054:7226,Test,Test,7226,https://root.cern,https://github.com/root-project/root/pull/5054,2,"['Test', 'test']","['Test', 'test']"
Testability,"ery strict source compatibility requirements: ""we should only break source compatibility if the ROOT constructs were actively harmful in some way, the volume of affected ROOT code is relatively small, and we can provide source compatibility and migration"". As discussed with @pcanal, and with TExecutor introduced in ROOT 6.08, there's little possibilities any user has implemented a new derived class from TExecutor. If this happened, the user is most probably advanced enough to be able to change the implementation. In any case, the volume of affected ROOT code will be relatively small. . As suggested by @dpiparo, for the moment we will keep the new ```TExecutor``` in ```ROOT::Internals```, not exposing it to the user. The executor usage will look as following:. ```cpp ; ROOT::Internal::TExecutor pool(ROOT::Fit::ExecutionPolicy::kSerial);; auto mapFunction = [](unsigned i){return 1u;};; auto reductionFunction = [](const std::vector<unsigned> &v) {; return std::accumulate(v.begin(), v.end(), 0u);; };. pool.MapReduce(ROOT::Fit::ExecutionPolicy::kSerial, mapFunction, ROOT::TSeq<unsigned>(20), reductionFunction);; ```. **TLDR;** This PR changes the behaviour of existing executors and introduces; new ones:. * TExecutor: changes its functionality to be a general Executor, while; TExecutorBaseImpl takes the role of the previous TExecutor. TExecutor; now acts as a general interface to the executors. The executor it will; resolve to is specified by a execution policy parameter in its; constructor. * TExecutorBaseImpl: Plays the previous role of TExecutor. * TSequentialExecutor: provides a sequential implementation of the; executor model, defined by TExecutorBaseImpl. This PR is not finished, but I'm opening it for discussion. Things left:; - [x] Change kSerial to kSequential. - [x] Move Execution Policies to ROOT::Internal. - [x] Adapt Fitting functions to use the new TExecutor instead of if statements. A test can be found here: https://github.com/root-project/roottest/pull/106",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1312:2797,test,test,2797,https://root.cern,https://github.com/root-project/root/pull/1312,1,['test'],['test']
Testability,"es displayed when starting ROOT compiled with a different version of Visual Studio than the one installed on the system:; ```; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: error: redefinition of '_CrtEnableIf<true, _Ty>'; struct _CrtEnableIf<true, _Ty>; ^~~~~~~~~~~~~~~~~~~~~~~; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:142:12: note: previous definition is here; struct _CrtEnableIf<true, _Ty>; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h:517:16: error: redefinition of '__crt_locale_data_public'; typedef struct __crt_locale_data_public; ^; C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.23.28105\include\crtdefs.h:10:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:10: note: 'C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt.h' included multiple times, additional include; site here; ^; In file included from input_line_3:38:; In file included from C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\VC\Tools\MSVC\14.25.28610\\include\cassert:9:; In file included from C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.0\ucrt\assert.h:12:; C:\Program Files (x86)\Windows Kits\10\Include\10.0.18362.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/5627:1030,assert,assert,1030,https://root.cern,https://github.com/root-project/root/pull/5627,2,['assert'],['assert']
Testability,"es in the file; TIter next(in->GetListOfKeys());; TKey* key;; while ((key = (TKey*)next())) {; std::cout << key->GetClassName() << std::endl;; if (std::string(key->GetClassName()) == ""TDirectoryFile"") {; std::string name = key->GetName();; log(""Found TDirectoryFile: "" + name);; auto* dir = (TDirectoryFile*)key->ReadObj();; if (!out->GetDirectory(name.c_str())) {; out->mkdir(name.c_str());; }; out->cd(name.c_str());; // Iterate over the objects in the directory; TIter next2(dir->GetListOfKeys());; TKey* key2;; while ((key2 = (TKey*)next2())) {; if (std::string(key2->GetClassName()) == ""TTree"") {; std::string name2 = key2->GetName();; log(""Found TTree: "" + name2);; auto* tree = (TTree*)key2->ReadObj();; debug(""Converting to RNTuple"");; // Create the folder in the output file if it does not exist; using namespace ROOT::Experimental;; // Create a model from the input tree; auto model = RNTupleModel::CreateBare();. for (auto b : TRangeDynCast<TBranch>(*tree->GetListOfBranches())) {; // The dynamic cast to TBranch should never fail for GetListOfBranches(); assert(b);. // We assume every branch has a single leaf; auto* l = static_cast<TLeaf*>(b->GetListOfLeaves()->First());. // Create an ntuple field with the same name and type than the tree branch; auto field = Detail::RFieldBase::Create(l->GetName(), l->GetTypeName()).Unwrap();; std::cout << ""Convert leaf "" << l->GetName() << "" ["" << l->GetTypeName() << ""]""; << "" --> ""; << ""field "" << field->GetName() << "" ["" << field->GetType() << ""]"" << std::endl;. // Hand over ownership of the field to the ntuple model. This will also create a memory location attached; // to the model's default entry, that will be used to place the data supposed to be written; model->AddField(std::move(field));; }; auto ntuple = RNTupleWriter::Append(std::move(model), name2, *out);; auto entry = ntuple->GetModel()->CreateEntry();. for (auto b : TRangeDynCast<TBranch>(*tree->GetListOfBranches())) {; auto l = static_cast<TLeaf*>(b->GetListOfLeaves()->Fir",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13996:11970,assert,assert,11970,https://root.cern,https://github.com/root-project/root/issues/13996,1,['assert'],['assert']
Testability,"esPlugins.so; #3 0x00002aac78b8ba0b in sig_dostack_then_abort () from /cvmfs/cms-ci.cern.ch/week0/cms-sw/cmsdist/7911/25338/CMSSW_12_5_ROOT6_X_2022-06-06-2300/lib/el8_amd64_gcc10/pluginFWCoreServicesPlugins.so; #4 <signal handler called>; #5 __cxxabiv1::(anonymous namespace)::adjust_pointer<void> (offset=<error reading variable: Cannot access memory at address 0xfffffffffffffff0>, base=0x7ffc4c62b5b0) at ../../../../libstdc++-v3/libsupc++/tinfo.h:65; #6 __cxxabiv1::__dynamic_cast (src_ptr=0x7ffc4c62b5b0, src_type=0x2aac6e5a6df0 <typeinfo for ROOT::Math::IBaseFunctionMultiDimTempl<double>>, dst_type=0x2aac6e5a69f0 <typeinfo for ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDimTempl<double>, ROOT::Math::IParametricFunctionMultiDimTempl<double>, ROOT::Fit::BinData>>, src2dst=0) at ../../../../libstdc++-v3/libsupc++/dyncast.cc:55; #7 0x00002aac6e40b2d0 in ROOT::Fit::Fitter::GetDataFromFCN<ROOT::Fit::BasicFCN<ROOT::Math::IBaseFunctionMultiDimTempl<double>, ROOT::Math::IParametricFunctionMultiDimTempl<double>, ROOT::Fit::BinData> > (this=0x2aacc8992140) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc10/lcg/root/6.27.01-c963ca4826d5b69bf3ff29bd97e3fad4/root-6.27.01/math/mathcore/inc/Fit/Fitter.h:560; #8 0x00002aac6e407b8e in ROOT::Fit::Fitter::ExamineFCN (this=0x2aacc8992140) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc10/lcg/root/6.27.01-c963ca4826d5b69bf3ff29bd97e3fad4/root-6.27.01/math/mathcore/src/Fitter.cxx:984; #9 0x00002aac6e4023a1 in ROOT::Fit::Fitter::FitFCN (this=0x2aacc8992140) at /data/cmsbld/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc10/lcg/root/6.27.01-c963ca4826d5b69bf3ff29bd97e3fad4/root-6.27.01/math/mathcore/src/Fitter.cxx:305; #10 0x00002aace777dc21 in ProtonReconstructionAlgorithm::reconstructFromMultiRP(edm::RefVector<std::vector<CTPPSLocalTrackLite, std::allocator<CTPPSLocalTrackLite> >, CTPPSLocalTrackLite, edm::refhelper::FindUsingAdvance<std::vector<C",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10732:2217,test,tests,2217,https://root.cern,https://github.com/root-project/root/issues/10732,2,['test'],"['testBuildDir', 'tests']"
Testability,"eserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ FAILED ] RNTuple.StdTuple (317 ms); [ --- ]; [----------] 18 tests from RNTuple (7848 ms total); [----------] Global test environment tear-down; [==========] 18 tests from 1 test suite ran. (7848 ms total); [ PASSED ] 16 tests.; [ FAILED ] 2 tests, listed below:; [ FAILED ] RNTuple.StdPair; [ FAILED ] RNTuple.StdTuple; 2 FAILED TESTS. ~~~. gtest-tree-ntuple-v7-test-ntuple-extended fails with:; Fatal: fWritePage[otherIdx].IsEmpty() violated. ~~~; 520/1318 Test #454: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 73.15 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet; [==========] Running 4 tests from 1 test suite.; [----------] Global test environment set-up.; [----------] 4 tests from RNTuple; [ RUN ] RNTuple.RealWorld1; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::string_view, const ROOT::Experimental::RNTupleWriteOptions&)>: The RNTuple file format will change. Do not store real data with this version of RNTuple!; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RNTupleSerialize.cxx:1148 in static ROOT::Experimental::RResult<void> ROOT::Experimental::Internal::RNTupleSerializer::DeserializeHeaderV1(const void*, uint32_t, ROOT::Experimental::RNTupleDescriptorBuilder&)>: Pre-release format version: RC 1; [ OK ] RNTuple.RealWorld1 (9118 ms); [ RUN ] RNTuple.RandomAccess; Warning in <[ROOT.NTuple] Warning /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/src/RPageStorageFile.cxx:51 in ROOT::Experimental::Detail::RPageSinkFile::RPageSinkFile(std::stri",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12427:3762,test,test,3762,https://root.cern,https://github.com/root-project/root/issues/12427,1,['test'],['test']
Testability,"est environment set-up.; [----------] 9 tests from RColumnElementEndian; [ RUN ] RColumnElementEndian.Float; [ OK ] RColumnElementEndian.Float (6 ms); [ RUN ] RColumnElementEndian.Double; [ OK ] RColumnElementEndian.Double (3 ms); [ RUN ] RColumnElementEndian.Int16; [ OK ] RColumnElementEndian.Int16 (0 ms); [ RUN ] RColumnElementEndian.UInt16; [ OK ] RColumnElementEndian.UInt16 (0 ms); [ RUN ] RColumnElementEndian.Int32; [ OK ] RColumnElementEndian.Int32 (0 ms); [ RUN ] RColumnElementEndian.UInt32; [ OK ] RColumnElementEndian.UInt32 (0 ms); [ RUN ] RColumnElementEndian.Int64; [ OK ] RColumnElementEndian.Int64 (0 ms); [ RUN ] RColumnElementEndian.UInt64; [ OK ] RColumnElementEndian.UInt64 (0 ms); [ RUN ] RColumnElementEndian.Int64Int32; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:286: Failure; Expected equality of these values:; ints[0]; Which is: 1234605615003729920; 0x0000000011223344; Which is: 287454020; /builddir/build/BUILD/root-6.28.00/tree/ntuple/v7/test/ntuple_endian.cxx:287: Failure; Expected equality of these values:; ints[1]; Which is: 6153737371142586367; 0x0000000055667788; Which is: 1432778632; [ FAILED ] RColumnElementEndian.Int64Int32 (0 ms); [----------] 9 tests from RColumnElementEndian (13 ms total); [----------] Global test environment tear-down; [==========] 9 tests from 1 test suite ran. (13 ms total); [ PASSED ] 8 tests.; [ FAILED ] 1 test, listed below:; [ FAILED ] RColumnElementEndian.Int64Int32; 1 FAILED TEST; CMake Error at /builddir/build/BUILD/root-6.28.00/cmake/modules/RootTestDriver.cmake:232 (message):; error code: 1; ~~~. #### gtest-tree-ntuple-v7-test-ntuple-extended. This looks like an endian error:. $ printf '%x\n' 1677721600; 64000000. Header length shoud be 0x00000064 = 100; ~~~; 501/1272 Test #443: gtest-tree-ntuple-v7-test-ntuple-extended ...........................***Failed 81.93 sec; Running main() from /builddir/build/BUILD/googletest-1.13.0/googletest/src/gtest_main.cc; Note: Google Test filter ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12426:4548,test,test,4548,https://root.cern,https://github.com/root-project/root/issues/12426,1,['test'],['test']
Testability,est of a Composite Object (containing Vector's and Matrices); ******************************************************************************; Test Using CINT library; TrackD creation 		................ OK; TrackD addition 		................ OK; TrackD write 		................ OK; TrackD read 		................ OK; TrackD after read 		................ OK; TrackD32 creation 		................ OK; TrackD32 addition 		................ OK; TrackD32 write 		................ OK; TrackD32 read 		................ OK; TrackD32 after read 		................ OK; TrackD32 Double32 test 		................ OK; TrackErrD creation 		................ OK; TrackErrD addition 		................ OK; TrackErrD write 		................ OK; TrackErrD read 		................ OK; TrackErrD after read 		................ OK; TrackErrD32 creation 		................ OK; TrackErrD32 addition 		................ OK; TrackErrD32 write 		................ OK; TrackErrD32 read 		................ OK; TrackErrD32 after read 		................ OK; TrackErrD32 Double32 test 		................ OK; VecTrack<TrackD> creation 		................ OK; VecTrack<TrackD> addition 		................ OK; VecTrack<TrackD> write 		................ OK; VecTrack<TrackD> read 		................ OK; VecTrack<TrackD> after read 		................ OK; VecTrack<TrackErrD> creation 		................ OK; VecTrack<TrackErrD> addition 		................ OK; VecTrack<TrackErrD> write 		................ OK; VecTrack<TrackErrD> read 		................ OK; VecTrack<TrackErrD> after read 		................ OK; ******************************************************************************; stressMathCore: Real Time = 2.70 seconds Cpu Time = 2.02 seconds; ROOTMARKS = 3022.77 ROOT version: 6.08/06	v6-08-06@v6-08-06; *******************************************************************************; stressMathCore Test Failed !!; CMake Error at /builddir/build/BUILD/root-6.08.06/cmake/modules/RootTestDriver.cmake:201 (message):; error code: 1,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/401:10555,test,test,10555,https://root.cern,https://github.com/root-project/root/pull/401,2,"['Test', 'test']","['Test', 'test']"
Testability,"estfunc` will correctly print the values of the branches and `testfunc` column in the Scan will show the correct output of the formula `a+b*c`. When run with ROOT 6.30, the `cout` will print `0 0 0` and the `testfunc` column will always be 0. ```; #include <iostream>; #include <string>; #include <TFile.h>; #include <TTree.h>. using namespace std;. float testfunc(int a, int b, float c); {; cout << a << "" "" << b << "" "" << c << endl;; return a + b * c;; }. void createTree(const string &filename); {; cout << ""Creating tree in file "" << filename << endl;; TFile *f = TFile::Open(filename.c_str(), ""RECREATE"");; TTree *t = new TTree(""t"", ""t"");; int a;; int b;; float c;; t->Branch(""a"", &a, ""a/I"");; t->Branch(""b"", &b, ""b/I"");; t->Branch(""c"", &c, ""c/F"");; for (int i = 0; i < 10; ++i); {; a = i;; b = i + 1;; c = i + 2;; t->Fill();; }; t->Write();; f->Close();; cout << ""Tree created"" << endl;; }. void runExampleScan(const string &filename); {; cout << ""Running example scan"" << endl;; TFile *f = TFile::Open(filename.c_str());; TTree *t = (TTree *)f->Get(""t"");; t->Scan(""a:b:c:testfunc(a,b,c)"", """", ""colsize=20"");; delete t;; delete f;; }. void runExampleDraw(const string &filename); {; gROOT->SetBatch();; TCanvas *c = new TCanvas(""c"", ""c"", 800, 600);; cout << ""Running example draw"" << endl;; TFile *f = TFile::Open(filename.c_str());; TTree *t = (TTree *)f->Get(""t"");; t->Draw(""testfunc(a,b,c)"", """");; delete t;; delete f;; c->SaveAs(""test.png"");; }. int test(); {; string filename = ""test.root"";; createTree(filename);; runExampleScan(filename);; runExampleDraw(filename);; return 0;; }. ```. ### ROOT version. ```; ROOT v6.30/02; Built for linuxx8664gcc on Dec 20 2023, 18:59:44; From heads/master@tags/v6-30-02; With g++ (GCC) 13.1.0; Binary directory: /cvmfs/sft.cern.ch/lcg/releases/ROOT/6.30.02-fb5be/x86_64-el9-gcc13-opt/bin; ```. ### Installation method. Pre-built binary. ### Operating system. Red Hat Enterprise Linux 9.3 (tested also on Centos7). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14405:1783,test,testfunc,1783,https://root.cern,https://github.com/root-project/root/issues/14405,6,['test'],"['test', 'tested', 'testfunc']"
Testability,"esting=""ON"" -Droottest=""ON"" /srv/root/src/root; ```; and the following features were enabled:; ```; -- Enabled support for: asimage builtin_clang builtin_cling builtin_llvm builtin_openui5 cefweb clad dataframe davix exceptions fftw3 fitsio fortran gdml gviz http fcgi imt mathmore mlp minuit2 mysql odbc opengl pgsql pyroot pythia6 pythia8 qt5web r roofit webgui root7 rpath runtime_cxxmodules shadowpw shared sqlite ssl tmva tmva-cpu tmva-pymva tmva-rmva spectrum unuran uring x11 xml xrootd; ```; The [CMakeCache.txt](https://github.com/root-project/root/files/6343170/CMakeCache.txt) file is attached. The test failures are as follows:. ```sh; The following tests FAILED:; 	 10 - pyunittests-pyroot-import-load-libs (Failed); 	 85 - gtest-core-metacling-test-TClingTest (Failed); 	994 - tutorial-v7-ntuple-ntpl005_introspection (Failed); 	1335 - roottest-python-JupyROOT-importROOT_notebook (Failed); 	1336 - roottest-python-JupyROOT-simpleCppMagic_notebook (Failed); 	1437 - roottest-python-pickle-read (Failed); 	1496 - roottest-root-dataframe-regression_snapshot (Failed); 	1499 - roottest-root-dataframe-test_snapshot (Failed); 	1500 - roottest-root-dataframe-test_stringfiltercolumn (Failed); 	1501 - roottest-root-dataframe-test_glob (Failed); 	1502 - roottest-root-dataframe-test_reduce (Failed); 	1513 - roottest-root-dataframe-ctors (Failed); ```. *__Update__: JupyROOT tests using wrong Python version were due to a configuration issue in jupyter on my machine. Please ignore those. For the other tests, I repeated the build with GCC 10.3 and I still see the same failures.*. Please click [here](https://github.com/root-project/root/files/6343199/output.txt) for the full output for each test.; Some things to note:. - Test pyunittests-pyroot-import-load-libs fails with; ```sh; ERROR: test_import (import_load_libs.ImportLoadLibs); Test libraries loaded after importing ROOT; ----------------------------------------------------------------------; Traceback (most recent call last):; F",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7936:1472,test,tests,1472,https://root.cern,https://github.com/root-project/root/issues/7936,2,['test'],"['test-TClingTest', 'tests']"
Testability,"ests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TGenericClassInfo.cxx:286; #41 0x00002b4bd1cac20b in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false, hint_pair_offset=0, hint_pair_size=0) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:3039; #42 0x00002b4bd1cabf33 in TClass::GetClass (name=0xc24d320 ""reco::btag::TrackData"", load=true, silent=false) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/meta/src/TClass.cxx:2970; #43 0x00002b4bf68090a5 in ?? (); #44 0x0000000000000001 in ?? (); #45 0x00000001951b6c50 in ?? (); #46 0x00007ffd951b6840 in ?? (); #47 0x00007ffd951b6948 in ?? (); #48 0x00007ffd951b6910 in ?? (); #49 0x00002b4bd18990fd in WrapperCall (method=47604637311029, nargs=140727105054640, args_=0x7ffd951b6760, self=0x7ffd951b6750, result=0x7ffd951b6748) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/bindings/pyroot/cppyy/cppyy-backend/clingwrapper/src/clingwrapper.cxx:774; ===========================================================. The lines below might hint at the cause of the crash. If you see question; marks as part of the stack trace, try to recompile with debugging information; enabled and export CLING_DEBUG=1 environment variable before running.; You may get help by asking at the ROOT forum https://root.cern/forum; Only if you are really convinced it is a bug in ROOT then please submit a; report at https://root.cern/bugs Please post the ENTIRE stack trace; from above as an attachment in addition to anything else; that might help us fixing this issue.; ============================================",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:14832,test,tests,14832,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,"euse BatchMode code to fill observables vector in RooFuncVector; 022e9fbd49 [RF] Improved implementation of `RooHelpers::Detail::snapshotImpl()`; d2bb816269 [RF] Move implemenation of `RooAbsArg::cloneTree()` to RooHelpers; cf515dec74 [RF] Optimize implementation of `cloneTreeWithSameParameters()`; 3d258d8a4c [RF] Mode `RooAbsCollection::snapshot()` implementation to RooHelpers; f4fc140268 [RF] Remove RooMomentMorphND; d677b811d9 [RF] Increase version number of `RooRealVar` from 9 to 10; 13d83d5808 [RF] Fix wrong size for gradient output array in testRooFuncWrapper.; 912c32c5e2 [RF] Remove deprecated `Format(const char*, int)` command argument; 6dcc352289 [RF] Move loop management for code generation into CodeSquashContext; ad2361c6ea [RF] Avoid need for buildLoopBegin() by recursive calls to translate(); c43c1ff1f3 [RF] Add 'translate' to RooNllVarNew.; 666a4fcbde [RF] Minor improvements to RooFit evaluation code generation; c51376731b [RF][NFC] Fix typo.; 826a6b38f4 [RF] Disable RooFuncWrapper test if clad is off.; 4148a05e5a [RF] Remove wrong header declaration from roofit/roofit.; 98d004c200 [RF] Fix visibility of the res/ directories.; e97347056c [RF] Make RooBatchCompute dependency public.; 4483b01b7f [RF] Add initial interface and implementation for code-squashing.; f230374eb5 [RF] Enable passing of gradient function directly to RooMinimizer; 0e5633535a [RF] Add support for differentiating Gaussian integrals using AD. This commits adds support for including analytical integrals into the mock code-squashing test by introducing a private header that stores the stateless implementation details.; 7d39c0769c [RF] Enable analytic integration of RooHistPdfs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ce",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12723:2161,test,test,2161,https://root.cern,https://github.com/root-project/root/pull/12723,5,['test'],['test']
Testability,"evaluateSpan() is a fallback for classes that don't implement an optimised; version of the batch computation function. It used to visit the entire; subtree in single-value mode to compute a batch of values.; Using RooAbsReal::writeToCache(), one should be able to get away with; visiting only the next level. This should speed up computations, because; less nodes are visited. Also: Silence a test that was printing useless things.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8616:393,test,test,393,https://root.cern,https://github.com/root-project/root/pull/8616,1,['test'],['test']
Testability,"ew>; ~~~~~~~~^; Warning in cling::IncrementalParser::CheckABICompatibility():; Failed to extract C++ standard library version.; While building module 'Core':; While building module 'Cling_Runtime' imported from input_line_2:1:; While building module 'Cling_Runtime_Extra' imported from /opt/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:; In file included from <module-includes>:1:; /opt/root_build/etc/cling/Interpreter/DynamicExprInfo.h:13:10: fatal error: could not build module 'std'; #include <string>; ~~~~~~~~^; /opt/root_build/etc/cling/Interpreter/RuntimeUniverse.h:27:10: fatal error: could not build module 'Cling_Runtime_Extra'; #include ""cling/Interpreter/Visibility.h""; ~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~; In file included from input_line_3:1:; In file included from /opt/root_build/etc/cling/lib/clang/13.0.0/include/assert.h:8:; In file included from /usr/include/assert.h:35:; In file included from /usr/include/features.h:515:; /usr/include/gnu/stubs.h:7:11: fatal error: 'gnu/stubs-32.h' file not found; # include <gnu/stubs-32.h>; ^~~~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Rtypes' imported from /opt/root_build/include/Rtypes.h:23:; In file included from <module-includes>:1:; /opt/root_build/include/RtypesCore.h:28:10: fatal error: could not build module 'std'; #include <cstddef> // size_t, NULL; ~~~~~~~~^; /opt/root_build/include/ThreadLocalStorage.h:60:10: fatal error: could not build module 'ROOT_Rtypes'; #include ""RtypesCore.h""; ~~~~~~~~^~~~~~~~~~~~~~; While building module 'Core':; While building module 'ROOT_Foundation_Stage1_NoRTTI' imported from /opt/root_build/include/Rtypes.h:195:; In file included from <module-includes>:2:; /opt/root_build/include/ROOT/RStringView.hxx:25:10: fatal error: could not build module 'std'; #include <string_view>; ~~~~~~~~^; Error: Error loading the default rootcling header files.; gmake[2]: *** [core/CMakeFiles/G__Core.dir/build.make:476: core/G__Core.cxx] Error 1; gmake[1]: ***",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13450:2582,stub,stubs-,2582,https://root.cern,https://github.com/root-project/root/issues/13450,1,['stub'],['stubs-']
Testability,"example usage:. ```c++; ROOT::Experimental::TDataFrame d(""reduceTree"", &f, {""i""});; auto r = d.Reduce([](int a, int b) { return a + b; }, {""i""}); // sum all branch values; auto rDefBranch = d.Filter([]() { return true; }); .Reduce([](int a, int b) { return a*b; }, {}, 1); // multiply all branch values. ```. A PR with a unit test has been submitted to the roottest repo.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/357:326,test,test,326,https://root.cern,https://github.com/root-project/root/pull/357,1,['test'],['test']
Testability,execInitOrder test crash with AddressSanitizer,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11867:14,test,test,14,https://root.cern,https://github.com/root-project/root/issues/11867,1,['test'],['test']
Testability,"f file a #pragma instruction on how to transform v1 into v2. When this #pragma line is omitted, we obviously read the wrong information from the input file, because the definition in the code does not correspond to the definition on file (as expected). But when using the #pragma line, we simply get a segfault while trying to read the TTree. I have prepared a self-contained minimal working example attached to this topic: [mwe.tgz|attachment](upload://34Fdg60DY7tGGh6cw40YICFFhLy.tgz) (224.3 KB) . The archive contains the following README.md with more details on how to reproduce the issue, and on the exact content of the archive:. Steps to reproduce issue on Minimal Working Example (MWE); =============================; - Set the ROOT_INCLUDE_PATH and LD_LIBRARY_PATH; `source env.sh`; - Compile the minimal persistency library; `make`; - Run test code on new persistency (opens pluto_newpers.root and reads the tree successfully); `root read_updated.C\(1\)`; or; `read_updated 1`; - Run test code on old persistency (opens pluto_oldpers.root and crashes when trying to read the tree); `root read_updated.C(\(0\)`; or; `read_updated 0`. The crash is traced back to line 109 of PersistencyDICT.cxx; `static Long_t offset_Onfile_TVHit_fMCTrackID = oldObj->GetClass()->GetDataMemberOffset(""fMCTrackID"");`; where GetClass returns a nullptr. Content of the archive; ======================; - The header files in include contain the current definition of the minimal persistency necessary to ; read the input files (TVHit version 2).; - The source files in src are there for the sake of compilation but should not; have an influence on reading the input file (right?). ; - The header files in include_oldpers are included for documentation and correspond to the difference; between the old persistency (TVHit version 1) and the new persistency (TVHit version 2).; - PersistencyLinkDef.hh is the current linkdef file. The ""#pragma"" line at the end is our attempts; to make the previous persistency comp",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7754:1471,test,test,1471,https://root.cern,https://github.com/root-project/root/issues/7754,1,['test'],['test']
Testability,"f it's there. ```; CMake Error at /usr/share/cmake-3.25/Modules/CMakeFindDependencyMacro.cmake:47 (find_package):; By not providing ""Findnlohmann_json.cmake"" in CMAKE_MODULE_PATH this; project has asked CMake to find a package configuration file provided by; ""nlohmann_json"", but CMake did not find one. Could not find a package configuration file provided by ""nlohmann_json""; (requested version 3.10.5) with any of the following names:. nlohmann_jsonConfig.cmake; nlohmann_json-config.cmake. Add the installation prefix of ""nlohmann_json"" to CMAKE_PREFIX_PATH or set; ""nlohmann_json_DIR"" to a directory containing one of the above files. If; ""nlohmann_json"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; /tmp/newroot/cmake/ROOTConfig.cmake:122 (find_dependency); gui/CMakeLists.txt:28 (find_package); ```. A hack workaround is using sudo apt install nlohmann-json3-dev. Next error is:. ```; cmake ../testroot/; -- The C compiler identification is GNU 11.4.0; -- The CXX compiler identification is GNU 11.4.0; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Check for working C compiler: /usr/bin/cc - skipped; -- Detecting C compile features; -- Detecting C compile features - done; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/c++ - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found nlohmann_json: /usr/lib/cmake/nlohmann_json/nlohmann_jsonConfig.cmake (found suitable version ""3.10.5"", minimum required is ""3.10.5"") ; CMake Error at /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:230 (message):; Could NOT find Vdt (missing: VDT_INCLUDE_DIR VDT_LIBRARY); Call Stack (most recent call first):; /usr/share/cmake-3.25/Modules/FindPackageHandleStandardArgs.cmake:600 (_FPHSA_FAILURE_MESSAGE); /opt/root/cmake/modules/FindVdt.cmake:63 (find_package_handle_st",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/14163:1227,test,testroot,1227,https://root.cern,https://github.com/root-project/root/issues/14163,1,['test'],['testroot']
Testability,"f, cling::Transaction**) /home/jhahnfel/ROOT/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:0:9; #36 0x000000000231f147 cling::MetaSema::actOnxCommand(llvm::StringRef, llvm::StringRef, cling::Value*) /home/jhahnfel/ROOT/src/interpreter/cling/lib/MetaProcessor/MetaSema.cpp:0:9; #37 0x000000000231a569 cling::MetaParser::isXCommand(cling::MetaSema::ActionResult&, cling::Value*) /home/jhahnfel/ROOT/src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:315:20; #38 0x0000000002319e27 cling::MetaParser::isCommand(cling::MetaSema::ActionResult&, cling::Value*) /home/jhahnfel/ROOT/src/interpreter/cling/lib/MetaProcessor/MetaParser.cpp:119:48; #39 0x000000000231c971 cling::MetaProcessor::process(llvm::StringRef, cling::Interpreter::CompilationResult&, cling::Value*, bool) /home/jhahnfel/ROOT/src/interpreter/cling/lib/MetaProcessor/MetaProcessor.cpp:316:9; #40 0x00000000023cedbb cling::UserInterface::runInteractively(bool) /home/jhahnfel/ROOT/src/interpreter/cling/lib/UserInterface/UserInterface.cpp:0:0; #41 0x000000000232e151 main /home/jhahnfel/ROOT/src/interpreter/cling/tools/driver/cling.cpp:138:12; #42 0x00007fdc3a8c0d85 __libc_start_main (/lib64/libc.so.6+0x3ad85); #43 0x00000000021b9c0e _start (/home/jhahnfel/ROOT/build-cling-clang/interpreter/llvm/src/bin/cling+0x21b9c0e); PLEASE submit a bug report to https://bugs.llvm.org/ and include the crash backtrace.; Stack dump:; 0. Program arguments: /home/jhahnfel/ROOT/build-cling-clang/interpreter/llvm/src/bin/cling --nologo -I/home/jhahnfel/ROOT/build-cling-clang/interpreter/llvm/src/tools/clang/include -I/home/jhahnfel/ROOT/src/interpreter/cling/test/CodeUnloading; 1. /home/jhahnfel/ROOT/src/interpreter/cling/test/CodeUnloading/templatedfunc.h:4:8: Mangling declaration 'lambda'; ```. The test was added as part of commit cd9d087eea24cb2e1982da06ee15b19ecbffc7b4. Curiously, the assertion is exactly the same as #9850, but to the uneducated eye it looks to be a different reason (and the fix is definitely still present).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12457:7759,test,test,7759,https://root.cern,https://github.com/root-project/root/issues/12457,4,"['assert', 'test']","['assertion', 'test']"
Testability,"f.; -->; 1. ROOT version: 6.27.* on the master branch (f9d15227e4c92eac7c6499379912d1ed24d0142b).; 2. Operating system: NixOS (Linux), on a x86_64 machine.; - system: `""x86_64-linux""`; - host os: `Linux 5.10.156, NixOS, 22.11 (Raccoon), 22.11.20221130.596a8e8`; - multi-user?: `yes`; - sandbox: `yes`; - version: `nix-env (Nix) 2.11.0`; - nixpkgs: `/nix/store/qwgw2b19ga8dr7c6wfpd6p87bdjyrnha-source`; 4. Build with Nix and get dependencies from Nixpkgs. ### Additional context. Here is the build steps to reproduce the issue with Nix. It can be proceed as long as `nix` or `docker` is available. Copyright notice: The `default.nix` is derived/taken from [pkgs/applications/science/misc/root/default.nix](https://github.com/NixOS/nixpkgs/blob/2787fc7d1e51404678614bf0fe92fc296746eec0/pkgs/applications/science/misc/root/default.nix) in [Nixpkgs](https://github.com/NixOS/nixpkgs). The original work is licensed under the MIT license by Eelco Dolstra and the Nixpkgs/NixOS contributors. 1. Run `mkdir test-root-6.27`; 2. Place the following files into the `test-root-6.27` directory:. `setup-hook.sh` and `sw_vers.patch` from https://github.com/NixOS/nixpkgs/tree/2787fc7d1e51404678614bf0fe92fc296746eec0/pkgs/applications/science/misc/root. `default.nix`. ```Nix; { stdenv; , lib; , callPackage; , fetchFromGitHub; , fetchpatch; , makeWrapper; , cmake; , coreutils; , git; , davix; , ftgl; , gl2ps; , glew; , gnugrep; , gnused; , gsl; , lapack; , libX11; , libXpm; , libXft; , libXext; , libGLU; , libGL; , libxcrypt; , libxml2; , llvm_13; , lsof; , lz4; , xz; , man; , openblas; , openssl; , pcre; , nlohmann_json; , pkg-config; , procps; , python; , which; , xxHash; , zlib; , zstd; , libAfterImage; , giflib; , libjpeg; , libtiff; , libpng; , patchRcPathCsh; , patchRcPathFish; , patchRcPathPosix; , tbb; , Cocoa; , CoreSymbolication; , OpenGL; , noSplash ? false; }:. stdenv.mkDerivation rec {; pname = ""root"";; version = ""6.27.00"";. src = fetchFromGitHub {; owner = ""root-project"";; repo = ""root",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11920:3544,test,test-root-,3544,https://root.cern,https://github.com/root-project/root/issues/11920,1,['test'],['test-root-']
Testability,"fd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:154; #26 ROOT::RDF::RResultPtr<double>::GetValue (this=0x7fffd51c8a38) at /builddir/build/BUILD/root-6.28.00/tree/dataframe/inc/ROOT/RResultPtr.hxx:196; #27 RooAbsDataHelper_MTConstruction_Test::TestBody (this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/roofit/RDataFrameHelpers/test/testActionHelpers.cxx:66; #28 0x00007fffa3390cbc in void testing::internal::HandleExceptionsInMethodIfSupported<testing::Test, void>(testing::Test*, void (testing::Test::*)(), char const*) () from /lib64/libgtest.so.1.8.0; #29 0x00007fffa3381374 in testing::Test::Run() () from /lib64/libgtest.so.1.8.0; #30 0x00007fffa3381578 in testing::TestInfo::Run() () from /lib64/libgtest.so.1.8.0; #31 0x00007fffa33816b4 in testing::TestCase::Run() () from /lib64/libgtest.so.1.8.0; #32 0x00007fffa3381da8 in testing::internal::UnitTestImpl::RunAllTests() () from /lib64/libgtest.so.1.8.0; #33 0x00007fffa3382004 in testing::UnitTest::Run() () from /lib64/libgtest.so.1.8.0; #34 0x00007fffa3310988 in main () from /lib64/libgtest_main.so.1.8.0; #35 0x00007fffa0829f5c in generic_start_main.isra () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #36 0x00007fffa082a0f4 in __libc_start_main () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #37 0x0000000000000000 in ?? (); ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running from Python:. ~~~; 427/1192 Test #397: pyunittests-dataframe-histograms ....................................***Failed 191.35 sec; test_histo1D (dataframe_histograms.HistogramsFromRDF) ... *** Break *** segmentation violation; ===========================================================; There was a crash (#8 0x00007fff7c7ac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ==",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:25726,test,testing,25726,https://root.cern,https://github.com/root-project/root/issues/12372,1,['test'],['testing']
Testability,"ferent numeric integration methods (more detail in the PR description).; It will also make porting the numerical integration with the Romberg method to the GPU much easier. The changes were validated with the following script:; ```c++; // runNumIntValidation.C. #include <RooFormulaVar.h>; #include <RooNumIntConfig.h>; #include <RooRealVar.h>. void testIntegrationMethod(int ndim, std::string const &label); {; RooRealVar x{""x"", ""x"", 0, 10};; RooRealVar y{""y"", ""y"", 0, 10};. std::string funcName = std::string(""func"") + label;; RooFormulaVar func{funcName.c_str(), ""x*std::sqrt(x) + y*std::sqrt(y) + x*y"", {x, y}};. std::cout << label << "":"" << std::endl;. RooNumIntConfig cfg(*func.getIntegratorConfig());. if (ndim == 2) {; cfg.method2D().setLabel(label.c_str());; }; if (ndim == 1) {; cfg.method1D().setLabel(label.c_str());; }. RooArgSet iset{x};; if (ndim > 1); iset.add(y);; std::unique_ptr<RooAbsReal> integ{func.createIntegral(iset, RooFit::NumIntConfig(cfg))};; double val = integ->getVal();; std::cout << std::setprecision(15) << val << std::endl;. std::cout << std::endl;; }. void runNumIntValidation(); {; RooHelpers::LocalChangeMsgLevel changeMsgLvl(RooFit::WARNING);. std::vector<std::string> methods1d{""RooIntegrator1D"", ""RooSegmentedIntegrator1D""};; std::vector<std::string> methods2d{""RooAdaptiveIntegratorND"", ""RooIntegrator2D"", ""RooSegmentedIntegrator2D""};. for (auto const &label : methods1d) {; testIntegrationMethod(1, label);; }. for (auto const &label : methods2d) {; testIntegrationMethod(2, label);; }; }; ```. The output with this PR is the same as with ROOT master:; ```; RooIntegrator1D:; 488.294986988088. RooSegmentedIntegrator1D:; 488.294680086881. RooAdaptiveIntegratorND:; 5029.82213550336. RooIntegrator2D:; 5029.84276464679. RooSegmentedIntegrator2D:; 5029.82506801992; ```. A new unit test that checks these numbers is also implemented. This is a follow up to #13350, which made it possible to implement different numeric integration plugins with the same class.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13384:1730,test,testIntegrationMethod,1730,https://root.cern,https://github.com/root-project/root/pull/13384,3,['test'],"['test', 'testIntegrationMethod']"
Testability,"ff68be02e42 in RooAbsReal::traceEval(RooArgSet const*) const /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsReal.cxx:334:18; 253: #9 0x7ff68be02ce7 in RooAbsReal::getValV(RooArgSet const*) const /home/jhahnfel/ROOT/src/roofit/roofitcore/src/RooAbsReal.cxx:256:14; 253: #10 0x7ff68cd94a6b in RooAbsReal::getVal(RooArgSet const*) const /home/jhahnfel/ROOT/src/roofit/roofitcore/inc/RooAbsReal.h:105:49; 253: #11 0x7ff68cd94a6b in RooStats::SPlot::AddSWeight(RooAbsPdf*, RooArgList const&, RooArgSet const&, bool, RooCmdArg const&, RooCmdArg const&, RooCmdArg const&, RooCmdArg const&) /home/jhahnfel/ROOT/src/roofit/roostats/src/SPlot.cxx:459:71; 253: #12 0x7ff68cd93a9d in RooStats::SPlot::SPlot(char const*, char const*, RooDataSet&, RooAbsPdf*, RooArgList const&, RooArgSet const&, bool, bool, char const*, RooCmdArg const&, RooCmdArg const&, RooCmdArg const&, RooCmdArg const&) /home/jhahnfel/ROOT/src/roofit/roostats/src/SPlot.cxx:225:9; 253: #13 0x37f7dd in SPlot_UseWithRooLinearVar_Test::TestBody() /home/jhahnfel/ROOT/src/roofit/roostats/test/testSPlot.cxx:31:19; ```. `tutorial-roofit-rf110_normintegration-py` shows very similar symptoms:; ```; 1160: ==1901172==ERROR: AddressSanitizer: heap-use-after-free on address 0x60c0000973d8 at pc 0x7fb8e12c7528 bp 0x7ffc12245550 sp 0x7ffc12245540; 1160: READ of size 8 at 0x60c0000973d8 thread T0; 1160: #0 0x7fb8e12c7527 in __gnu_cxx::__normal_iterator<RooAbsArg* const*, std::vector<RooAbsArg*, std::allocator<RooAbsArg*> > >::__normal_iterator(RooAbsArg* const* const&) /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_iterator.h:784:20; 1160: #1 0x7fb8e12c7527 in std::vector<RooAbsArg*, std::allocator<RooAbsArg*> >::begin() const /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:708:16; 1160: #2 0x7fb8e12c7527 in std::vector<RooAbsArg*, std::allocator<RooAbsArg*> >::empty() const /usr/bin/../lib/gcc/x86_64-redhat-linux/8/../../../../include/c++/8/bits/stl_vector.h:895:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11221:2621,Test,TestBody,2621,https://root.cern,https://github.com/root-project/root/issues/11221,3,"['Test', 'test']","['TestBody', 'test', 'testSPlot']"
Testability,"ffff157520, disableValuePrinting=<optimized out>) at /usr/include/c++/8/bits/unique_ptr.h:345; #26 0x00007fffa282b4b0 in HandleInterpreterException (metaProcessor=0x11f260fc0, input_line=0x11efcdaa0 "".X /builddir/build/BUILD/root-6.28.00/tutorials/roofit/rf104_classfactory.C"", compRes=; 0x7fffff15750c: cling::Interpreter::kSuccess, result=result; entry=0x7fffff157520) at /builddir/build/BUILD/root-6.28.00/interpreter/llvm/src/include/llvm/ADT/StringRef.h:86; ===========================================================; pure virtual method called; terminate called without an active exception; ~~~. There are failures running a compiles unit test (gtest):. ~~~; 314/1192 Test #204: gtest-roofit-RDataFrameHelpers-test-testActionHelpers ...............***Failed 111.03 sec; Running main() from gtest_main.cc; Note: Google Test filter = -RCsvDS.Remote:RRawFile.Remote:RSqliteDS.Davix:TFile.ReadWithoutGlobalRegistrationWeb:TFile.ReadWithoutGlobalRegistrationNet:RNTuple.TClassEBO; [==========] Running 2 tests from 1 test case.; [----------] Global test environment set-up.; [----------] 2 tests from RooAbsDataHelper; [ RUN ] RooAbsDataHelper.MTConstruction; *** Break *** segmentation violation; ===========================================================; There was a crash (#5 0x00007fffa13ac284 in SigHandler (sig=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:395).; This is the entire stack trace of all threads:; ===========================================================; #0 0x00007fffa08f2f04 in waitpid () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #1 0x00007fffa085a38c in do_system () from /lib64/glibc-hwcaps/power9/libc-2.28.so; #2 0x00007fffa13a9044 in TUnixSystem::Exec (shellcmd=<optimized out>, this=<optimized out>) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2104; #3 TUnixSystem::StackTrace (this=0x173f45850) at /builddir/build/BUILD/root-6.28.00/core/unix/src/TUnixSystem.cxx:2395; #4 0x00007fffa13ac1c8 in TU",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12372:18868,test,tests,18868,https://root.cern,https://github.com/root-project/root/issues/12372,2,['test'],"['test', 'tests']"
Testability,"finally working. This patch enables ROOT to preload all modules at startup time. In my; environment, this patch fixes 14 tests for runtime cxxmodules. Preloading all the modules has several advantages. 1. We do not have to; rely on rootmap files which don't support some features (namespaces and; templates) 2. Lookup would be faster because we don't have to do; trampoline via rootmap files. The only disadvantage of preloading all the modules is the startup time performance.; `root.exe -q -l memory.C`; This is a release build without modules:; ```; cpu time = 0.091694 seconds; sys time = 0.026187 seconds; res memory = 133.008 Mbytes; vir memory = 217.742 Mbytes; ```; This is a release build with modules, with this patch:; ```; cpu time = 0.234134 seconds; sys time = 0.066774 seconds; res memory = 275.301 Mbytes; vir memory = 491.832 Mbytes; ```; As you can see, preloading all the modules makes both time and memory 2; to 3 times worse **at a startup time**. **Edit** : With hsimple.C; `root.exe -l -b tutorials/hsimple.C -q ~/CERN/ROOT/memory.C`; Release build without modules:; ```; Processing tutorials/hsimple.C... ; hsimple : Real Time = 0.04 seconds Cpu Time = 0.05 seconds ; (TFile *) 0x555ae2a9d560 ; Processing /home/yuka/CERN/ROOT/memory.C... ; cpu time = 0.173591 seconds ; sys time = 0.011835 seconds ; res memory = 135.32 Mbytes ; vir memory = 209.664 Mbytes ; ```; Release build with modules, with this patch:; ```; Processing tutorials/hsimple.C...; hsimple : Real Time = 0.04 seconds Cpu Time = 0.04 seconds; (TFile *) 0x55d1b036d230; Processing /home/yuka/CERN/ROOT/memory.C...; cpu time = 0.290742 seconds; sys time = 0.043851 seconds; res memory = 256.844 Mbytes; vir memory = 438.484 Mbytes; ```. However, it is a matter of course that we get slower startup time if we; try to load all the modules at startup time, not on-demand. I haven't had a good benchmark for this but, in theory, it reduces execution time instead as we're anyway loading modules after the startup.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/1814:2093,benchmark,benchmark,2093,https://root.cern,https://github.com/root-project/root/pull/1814,1,['benchmark'],['benchmark']
Testability,fix https://lcgapp-services.cern.ch/root-jenkins/job/root-pullrequests-build/173434/testReport/projectroot/test/test_stressgraphics_interpreted/. The relevant part of the output is:; ```; Test 28: TGraph 3 (Fitting and log scales)......................... OK; PDF output......................................... 28 FAILED; Result = 16465; Reference = 16889; Error = 424 (was 400); ```,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/12728:84,test,testReport,84,https://root.cern,https://github.com/root-project/root/pull/12728,4,"['Test', 'log', 'test']","['Test', 'log', 'test', 'testReport']"
Testability,fix iminuit tests run with gradient,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/7085:12,test,tests,12,https://root.cern,https://github.com/root-project/root/pull/7085,1,['test'],['tests']
Testability,"fixed crash from the issue tracker ROOT-8563; ""TMVA Multiclass example crash when running with argument ""DNN""""; The problem during logging the output from the last layer, due to the difference of sizes of testPattern and Output. Now the code takes into account the fact that there may be multiple outputs from the last layer of the Neural Net.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/452:131,log,logging,131,https://root.cern,https://github.com/root-project/root/pull/452,2,"['log', 'test']","['logging', 'testPattern']"
Testability,fixes #11190. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14109:79,test,tested,79,https://root.cern,https://github.com/root-project/root/pull/14109,1,['test'],['tested']
Testability,fixes #13965. # This Pull request:. ## Changes or fixes:. ## Checklist:. - [x] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #13965,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14451:79,test,tested,79,https://root.cern,https://github.com/root-project/root/pull/14451,1,['test'],['tested']
Testability,"fixes #7584 . This PR shows a possible refactor of the logic that finally creates the ranges to send to the distributed resources. It works in the following steps:; 1. Split the big HeadNode class in differente head node types according to the original data source (e.g. EntriesHeadNode, TreeHeadNode, in the future also RNTupleHeadNode). Use a factory to get the correct head node type according to user provided arguments to the RDataFrame constructor; 2. Create a different Range type per each head node type. This makes the passing of information more modular, allowing sending only a couple of integers in the case of empty RDF , or adding info about friend trees in the case of a tree based RDF; 3. Better support friends with the recently introduced `ROOT::Internal::TreeUtils` functions; 4. NEW: Cache the created `Range`s for reuse in the same python session. This still doesn't improve the initial startup time discussed in #8232",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8391:55,log,logic,55,https://root.cern,https://github.com/root-project/root/pull/8391,1,['log'],['logic']
Testability,"fixes the following:; ```; /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:48:14: error: #elif with no expression; 48 | #elif DNNCUDA; | ^; /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:51:2: error: #error ""This should not happen. Can only compile with CPU or CUDA implementations.""; 51 | #error ""This should not happen. Can only compile with CPU or CUDA implementations.""; | ^~~~~; ```; and; ```; /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx: In member function ‘size_t TMVA::TestMethodDNNValidationSize::GetProcessedValidationOption(TString)’:; /build/root/src/root-6.22.00-cuda/tmva/tmva/test/Method/TestMethodDNNValidationSize.cxx:54:80: error: ‘defualtOptions’ was not declared in this scope; 54 | IMethod *m = fFactory->BookMethod(fDataLoader.get(), Types::kDNN, ""DNN"", defualtOptions + options);; | ^~~~~~~~~~~~~~; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/6148:71,test,test,71,https://root.cern,https://github.com/root-project/root/pull/6148,9,"['Test', 'test']","['TestMethodDNNValidationSize', 'test']"
Testability,fixing issue. # This Pull request:. ## Changes or fixes:; https://github.com/root-project/root/issues/14914. ## Checklist:. - [ ] tested changes locally; - [ ] updated the docs (if necessary). This PR fixes #,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14915:130,test,tested,130,https://root.cern,https://github.com/root-project/root/pull/14915,1,['test'],['tested']
Testability,"float, default=0.001,; help=""Run only on a fraction of the total available 10 fb^-1 (only usable together with --full-dataset)""); parser.add_argument(""--full-dataset"", action=""store_true"", default=False,; help=""Use the full dataset (use --lumi-scale to run only on a fraction of it)""); parser.add_argument(""-b"", action=""store_true"", default=False, help=""Use ROOT batch mode""); parser.add_argument(""-t"", action=""store_true"", default=False, help=""Use implicit multi threading (for the full dataset only possible with --lumi-scale 1.0)""); args = parser.parse_args(). if args.b: ROOT.gROOT.SetBatch(True); if args.t: ROOT.EnableImplicitMT(). if not args.full_dataset: lumi_scale = 0.001 # The preskimmed dataset contains only 0.01 fb^-1; else: lumi_scale = args.lumi_scale; lumi = 10064.0; print('Run on data corresponding to {:.2f} fb^-1 ...'.format(lumi * lumi_scale / 1000.0)). if args.full_dataset: dataset_path = ""root://eospublic.cern.ch//eos/opendata/atlas/OutreachDatasets/2020-01-22""; else: dataset_path = ""root://eospublic.cern.ch//eos/root-eos/reduced_atlas_opendata/w""; ------------------. An exception has occurred, use %tb to see the full traceback. SystemExit: 2. SystemExit: 2. NOTEBOOK_CONVERSION_WARNING: Nbconvert failed for notebook df105_WBosonAnalysis.py.ipynb with return code 1; [NbConvertApp] Converting notebook /home/sftnight/rootdoc/notebooks/df105_WBosonAnalysis.py.ipynb to notebook; [NbConvertApp] Writing 14399 bytes to /home/sftnight/rootdoc/notebooks/df105_WBosonAnalysis.py.nbconvert.ipynb; 4.87410593033; ```. ### Expected behavior. It should convert . ### To Reproduce. Execute the command above. ### Possible Fix. I looks like the argument parsing cannot be handled properly in the notebook. It is not possible to fix (I tried) this tutorial easily as the `args` variable is used every where. I suggest to not generate the notebook (for the time being)on this example as it polutes the log of the ref guide build. Experts (@etejedor ? @vepadulano ?) eyes are needed.",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10430:4445,log,log,4445,https://root.cern,https://github.com/root-project/root/issues/10430,1,['log'],['log']
Testability,"fo.cxx:1793; 36: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1805; 37: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1805; 38: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1810; 39: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1810; 40: Calling 'TClassRef::operator TClass *' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 41: Assuming field 'fClassPtr' is null in /opt/root_src/core/meta/inc/TClassRef.h:74; 42: Left side of '&&' is false in /opt/root_src/core/meta/inc/TClassRef.h:74; 43: Returning pointer, which participates in a condition later in /opt/root_src/core/meta/inc/TClassRef.h:74; 44: Returning from 'TClassRef::operator TClass *' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 45: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 46: Left side of '&&' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 47: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 48: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 49: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 50: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1827; 51: Assuming the condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1828; 52: '?' condition is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1828; 53: Assuming 'rule' is non-null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 54: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1834; 55: 'targets' initialized here in /opt/root_src/io/io/src/TStreamerInfo.cxx:1843; 56: Assuming 'targets' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 57: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1844; 58: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1847; /opt/root_src/io/io/src/TStreame",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:106309,Test,TestBit,106309,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,"fo.cxx:965; 57: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:965; 58: Left side of '&&' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:966; 59: Assuming field 'fOldVersion' is > 2 in /opt/root_src/io/io/src/TStreamerInfo.cxx:971; 60: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:971; 61: 'match' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:976; 62: Left side of '&&' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:976; 63: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:976; 64: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:976; 65: Assuming the condition is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1033; 66: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1033; 67: 'match' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1057; 68: Left side of '&&' is true in /opt/root_src/io/io/src/TStreamerInfo.cxx:1057; 69: Calling 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1057; 70: Assuming the condition is false in /opt/root_src/core/base/inc/TObject.h:187; 71: Returning zero, which participates in a condition later in /opt/root_src/core/base/inc/TObject.h:187; 72: Returning from 'TObject::TestBit' in /opt/root_src/io/io/src/TStreamerInfo.cxx:1057; 73: Taking true branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1057; 74: 'oldIsNonVersioned' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1058; 75: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1058; 76: Assuming 'file' is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1080; 77: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1080; 78: 'done' is false in /opt/root_src/io/io/src/TStreamerInfo.cxx:1100; 79: Taking false branch in /opt/root_src/io/io/src/TStreamerInfo.cxx:1100; 80: Called C++ object pointer is null in /opt/root_src/io/io/src/TStreamerInfo.cxx:1116; /opt/root_src/io/io/src/TStreamerInfo.cxx:1847:53:",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7431:101227,Test,TestBit,101227,https://root.cern,https://github.com/root-project/root/issues/7431,1,['Test'],['TestBit']
Testability,for build testing,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/882:10,test,testing,10,https://root.cern,https://github.com/root-project/root/pull/882,1,['test'],['testing']
Testability,frame-resptr; 406/1231 Test #383: gtest-tree-dataframe-test-dataframe-resptr .......................... Passed 0.61 sec; Start 384: gtest-tree-dataframe-test-dataframe-take; 407/1231 Test #382: gtest-tree-dataframe-test-dataframe-leaves .......................... Passed 2.14 sec; Start 385: gtest-tree-dataframe-test-dataframe-entrylist; 408/1231 Test #385: gtest-tree-dataframe-test-dataframe-entrylist ....................... Passed 0.90 sec; Start 386: gtest-tree-dataframe-test-dataframe-merge-results; 409/1231 Test #386: gtest-tree-dataframe-test-dataframe-merge-results ................... Passed 0.54 sec; Start 387: gtest-tree-dataframe-test-dataframe-samplecallback; 410/1231 Test #384: gtest-tree-dataframe-test-dataframe-take ............................ Passed 2.19 sec; Start 388: gtest-tree-dataframe-test-dataframe-vary; 411/1231 Test #387: gtest-tree-dataframe-test-dataframe-samplecallback .................. Passed 1.09 sec; Start 389: gtest-tree-dataframe-test-datasource-more; 412/1231 Test #380: gtest-tree-dataframe-test-dataframe-display ......................... Passed 10.54 sec; Start 390: gtest-tree-dataframe-test-datasource-root; Start 391: gtest-tree-dataframe-test-datasource-trivial; 414/1231 Test #390: gtest-tree-dataframe-test-datasource-root ........................... Passed 4.54 sec; Start 392: gtest-tree-dataframe-test-datasource-lazy; 415/1231 Test #392: gtest-tree-dataframe-test-datasource-lazy ........................... Passed 0.28 sec; Start 393: gtest-tree-dataframe-test-datasource-csv; 416/1231 Test #388: gtest-tree-dataframe-test-dataframe-vary ............................ Passed 6.93 sec; Start 394: gtest-tree-dataframe-test-dataframe-concurrency; 417/1231 Test #379: gtest-tree-dataframe-test-dataframe-snapshot ........................ Passed 20.68 sec; Start 395: gtest-tree-dataframe-test-datasource-ntuple; 418/1231 Test #389: gtest-tree-dataframe-test-datasource-more ........................... Passed 7.48 sec; Start 396: gtest-tree-da,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:4476,test,test-datasource-more,4476,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-display', 'test-datasource-more']"
Testability,friends; Start 364: gtest-tree-dataframe-test-dataframe-colnames; Start 365: gtest-tree-dataframe-test-dataframe-cache; 388/1231 Test #364: gtest-tree-dataframe-test-dataframe-colnames ........................ Passed 4.40 sec; Start 366: gtest-tree-dataframe-test-dataframe-callbacks; 389/1231 Test #363: gtest-tree-dataframe-test-dataframe-friends ......................... Passed 10.87 sec; Start 367: gtest-tree-dataframe-test-dataframe-histomodels; 390/1231 Test #366: gtest-tree-dataframe-test-dataframe-callbacks ....................... Passed 8.60 sec; Start 368: gtest-tree-dataframe-test-dataframe-interface; Start 369: gtest-tree-dataframe-test-dataframe-nodes; 392/1231 Test #369: gtest-tree-dataframe-test-dataframe-nodes ........................... Passed 2.13 sec; Start 370: gtest-tree-dataframe-test-dataframe-regression; 393/1231 Test #367: gtest-tree-dataframe-test-dataframe-histomodels ..................... Passed 19.30 sec; Start 371: gtest-tree-dataframe-test-dataframe-utils; 394/1231 Test #371: gtest-tree-dataframe-test-dataframe-utils ........................... Passed 1.38 sec; Start 372: gtest-tree-dataframe-test-dataframe-report; 395/1231 Test #370: gtest-tree-dataframe-test-dataframe-regression ...................... Passed 12.11 sec; Start 373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview; 396/1231 Test #372: gtest-tree-dataframe-test-dataframe-report .......................... Passed 0.79 sec; Start 374: gtest-tree-dataframe-test-dataframe-redefine; 397/1231 Test #373: gtest-tree-dataframe-test-dataframe-splitcoll-arrayview ............. Passed 1.07 sec; Start 375: gtest-tree-dataframe-test-dataframe-definepersample; 398/1231 Test #374: gtest-tree-dataframe-test-dataframe-redefine ........................ Passed 3.63 sec; Start 376: gtest-tree-dataframe-test-dataframe-simple; 399/1231 Test #375: gtest-tree-dataframe-test-dataframe-definepersample ................. Passed 3.06 sec; Start 377: gtest-tree-dataframe-test-dataframe-helpers; 400,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/10300:1623,test,test-dataframe-utils,1623,https://root.cern,https://github.com/root-project/root/pull/10300,3,"['Test', 'test']","['Test', 'test-dataframe-utils']"
Testability,"from /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/CMSSW_13_2_ROOT628_X_2023-05-04-2300/external/el8_amd64_gcc11/lib/libCling.so; #28 0x00002b4bd37824e9 in ExecAutoParse (what=0x2b4bf4038162 ""\n#line 1 \""DataFormatsBTauReco_xr dictionary payload\""\n\n#ifndef CMS_DICT_IMPL\n #define CMS_DICT_IMPL 1\n#endif\n#ifndef _REENTRANT\n #define _REENTRANT 1\n#endif\n#ifndef GNUSOURCE\n #define GNUSOURCE 1\n#e""..., header=false, interpreter=0x681b00) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6318; #29 0x00002b4bd3782d71 in TCling::AutoParseImplRecurse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""..., topLevel=true) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6423; #30 0x00002b4bd37833f1 in TCling::AutoParse (this=0x5628c0, cls=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/lcg/root/6.28.03-a7d22f99f85372e3ac7a621f72422b66/root-6.28.03/core/metacling/src/TCling.cxx:6508; #31 0x00002b4bd376ab6b in TClingLookupHelper__AutoParse (cname=0xc1cf750 ""reco::TemplatedSecondaryVertexTagInfo<reco::IPTagInfo<edm::RefVector<vector<reco::Track>,reco::Track,edm::refhelper::FindUsingAdvance<vector<reco::Track>,reco::Track> >,reco::JTATagInfo>,reco::Vertex>""...) at /pool/condor/dir_43945/jenkins/workspace/ib-run-pr-tests/testBuildDir/BUILD/el8_amd64_gcc11/l",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/12771:9565,test,tests,9565,https://root.cern,https://github.com/root-project/root/issues/12771,2,['test'],"['testBuildDir', 'tests']"
Testability,"from ADictUX dictionary payload:6:; ./B.h:5:18: error: base class has incomplete type; class B : public A {; ~~~~~~~^; ./A.h:5:7: note: definition of 'A' is not complete until the closing '}'; class A {; ^; In file included from ADictUX dictionary payload:6:; ./B.h:7:15: error: type 'A' is not a direct or virtual base of 'B'; B(int arg) : A(arg) {}; ^; Error in <TInterpreter::AutoParse>: Error parsing payload code for class A with content:. #line 1 ""ADictUX dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H; // Inline headers; #include ""A.h""; #include ""B.h"". #undef _BACKWARD_BACKWARD_WARNING_H. Error in <TInterpreter::AutoParse>: Error parsing payload code for class B with content:. #line 1 ""ADictUX dictionary payload"". #define _BACKWARD_BACKWARD_WARNING_H; // Inline headers; #include ""A.h""; #include ""B.h"". #undef _BACKWARD_BACKWARD_WARNING_H; ```. ### What is the expected behaviour?. The correct output is:; ```. Loading A.sl. Processing macro.cc...; init A with arg=0; test A; init A with arg=0; test A; ```. ### How to reproduce?. ```; unzip linker_example.zip; make; root.exe -b -q -q macro.cc; ```. ### ROOT version. Any v6 version. ### How did you install ROOT?. any. ### Which operating system are you using?. linux. ### Additional context. The problem might have been introduced by commit 3081bf5e006. In particular applying this diff 'fixes' the problem:; ```; diff --git a/core/dictgen/src/rootcling_impl.cxx b/core/dictgen/src/rootcling_impl.cxx; index f56ce23b7a..7cd24d2c63 100644; --- a/core/dictgen/src/rootcling_impl.cxx; +++ b/core/dictgen/src/rootcling_impl.cxx; @@ -4971,7 +4971,7 @@ int RootClingMain(int argc,; if (!gOptCxxModule) {; headersClassesMapString = GenerateStringFromHeadersForClasses(headersDeclsMap,; detectedUmbrella,; - true);; + false);; if (!gDriverConfig->fBuildingROOTStage1) {; if (!gOptWriteEmptyRootPCM); fwdDeclsString = GenerateFwdDeclString(scan, interp);; ```; This introduces the following diff in the generated dictionary:; ```; ro",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13034:1436,test,test,1436,https://root.cern,https://github.com/root-project/root/issues/13034,2,['test'],['test']
Testability,"from https://github.com/root-project/root/issues/11130#issuecomment-1207464193; ```; [ 91%] Building CXX object roofit/roofitcore/CMakeFiles/RooFitCore.dir/src/TestStatistics/RooSumL.cxx.o; In file included from /build/root/src/root-6.26.06/graf3d/eve7/src/REveBoxSet.cxx:20:; /usr/include/nlohmann/json.hpp:5085:8: error: reference to ‘json’ is ambiguous; 5085 | inline nlohmann::json operator """" _json(const char* s, std::size_t n); | ^~~~~~~~; In file included from /usr/include/nlohmann/detail/meta/type_traits.hpp:22,; from /usr/include/nlohmann/detail/exceptions.hpp:22,; from /usr/include/nlohmann/detail/conversions/from_json.hpp:23,; from /usr/include/nlohmann/adl_serializer.hpp:14,; from /usr/include/nlohmann/json.hpp:35:; /usr/include/nlohmann/json_fwd.hpp:61:7: note: candidates are: ‘using json = class nlohmann::json_v3_11_1::basic_json<>’; 61 | using json = basic_json<>;; | ^~~~; .....; ```. ---. <details>; <summary>Original bug report regarding glibc 2.36</summary>. ### Describe the bug; ArchLinux recently upgraded to `glibc 2.36`, and that resulted in ROOT not compiling with either GCC 11.3.0 or GCC 12.1.1. ### Expected behaviour; ROOT should compile with `glibc 2.36`. ### To Reproduce; 1. Install `glibc 2.36` and relevant compilers; 2. Try to build ROOT; 3. Error during build. ### Setup; 1. ROOT version: 6.26/06 (or any other version); 2. Operating system: Arch Linux x86; 3. Build from source with GCC 11.3.0 / 12.1.1. ### Additional context; An interesting caveat is that it seems ROOT also requires 32-bit specific headers (`gnu/stubs-32.h`) as well.; Error log:; ```cpp; ...; [ 73%] Built target Thread; [ 73%] Generating G__RIO.cxx, ../../lib/libRIO.rootmap; In file included from <built-in>:400:; <command line>:1:9: error: macro name must be an identifier; #define -compilerI/usr/include/c++/12.1.1 1; ^; In file included from input_line_3:1:; In file included from /build/root/src/build/etc/cling/lib/clang/9.0.1/include/assert.h:8:; In file included from /usr/in",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/11130:160,Test,TestStatistics,160,https://root.cern,https://github.com/root-project/root/issues/11130,1,['Test'],['TestStatistics']
Testability,"from one entry to another.; It can happen that the size of C arrays stored in branches varies a lot; from event to event. It can happen also that a very small array becomes; suddently very big. This triggers a reallocation of the buffer ROOT; uses internally to hold the read content.; When snapshotting, RDataFrame, was setting the addresses of the output; tree only once at the 1st event processed (per slot). This of course could; lead to the persistification of corrupted values. This change allow to keep track of the changing addresses and properly; handle them via the TBranch::SetAddress method. A test is also added to the suite in order to avoid regressions in the; future. Nota bene: this **does also** fix ROOT-9860",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/3153:606,test,test,606,https://root.cern,https://github.com/root-project/root/pull/3153,1,['test'],['test']
Testability,"fs with RooLinearVars; fce73f0565 [RF] Replace `RooAbsReal::_lastNSet` pointer with ID of last normSet; 7e9c10b714 [RF] Remove `evaluateSpan()` from RooGenericPdf and RooFormulaVar; bf4990c5d4 [RF] Exclude RooHistError from IO; 79edfbafa6 [RF] Remove `add(row, weight, weightError)` from RooAbsData interface; f355c3ced4 [RF] Code-format `testRooDataHist.cxx`; 3fd99f7679 [RF] Enable AD code-gen test for RooFit.; a654d915e5 [RF] Less manual memory management in RooAbsArg and RooProdGenContext; 1367091202 [RF] Code modernization of RooAbsReal; 5c20fdc652 [RF] Add intiial minimizer interface for RooFuncWrapper.; cf88615b6e [RF] Improve code in `MinuitFcnGrad`; 17bac5528b [RF] Code improvements in tests for new TestStatistics; afcb2d3931 [RF] Composition over inheritance in RooAbsMinimizerFcn implementations; 3a52e89a99 [RF] No need for `RooAbsMinimizerFcn::fit()` method; 3869282efb Fix modules and modules.idx generation on Windows and disable a few more modules causing potential crashes (#12252); 55bc2c0484 [RF] Define infinity as `std::numeric_limits<double>::infinity()`; 026a1a701b [RF] Split RooFuncWrapper into '.h' and '.cxx'.; 5964158260 [RF] Add observables as another parameter in RooFuncWrapper.; cca7c59a08 [RF] Test rough prototype of code generation in `testRooFuncWrapper`; 333e857cc6 Add AD based derivatives for RooFuncWrapper.; 46ba2eefd0 [cxxmodules] Enable a few modules for Windows. Now we can run hsimple.C.; 1ca66d2949 [RF] Add a C/C++ function wrapper class in roofit.; f457ca57c1 [RF] Fix implementation error from typo in `RooGenProdProj`; cc9d4e8025 [RF] New mechanism to implicitly convert numbers to RooRealVar&; 8798fca2a3 [RF] Remove RooFormula code for gcc <= 4.8; a89130ac51 [RF] Remove `RooGenFunction` and `RooMultiGenFunction`; 1554fba5e2 [RF] More use of `snapshot()` overload with output parameter; 72cfdc9192 [RF] Bring back `RooStats::FeldmanCousins::SetData()`; faea4c9de4 [RF] Remove deprecated RooFit parts that are marked for removal in 6.30; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/13295:9327,Test,Test,9327,https://root.cern,https://github.com/root-project/root/pull/13295,2,"['Test', 'test']","['Test', 'testRooFuncWrapper']"
Testability,"g at any time may be lower than the limit due to demand on the CPU. 3. The 'Real Time' is similar to 'CPU Time / number of threads' AND 'Compressed Throughput' is lower than expected for your storage medium:; This would imply that your CPU threads aren't decompressing data as fast as your storage medium can provide it, and so decompression is the bottleneck. The best way to decrease your runtime would be to utilise a system with a faster CPU, or make use use of more threads when running, or use a compression algorithm with a higher decompression rate such as LZ4, possibly at the cost of some extra file size. A note on caching:. If your data is stored on a local disk, the system may cache some/all of the file in memory after it is first read. If this is realistic of how your analysis will run - then there is no concern. However, if you expect to only read files once in a while - and as such the files are unlikely to be in the cache - consider clearing the cache before running rootreadspeed. On Linux this can be done by running `echo 3 > /proc/sys/vm/drop_caches` as a superuser or a specific file can be dropped from the cache with `dd of=<FILENAME> oflag=nocache conv=notrunc,fdatasync count=0 > /dev/null 2>&1`. Known overhead of TTreeReader, RDataFrame:. rootreadspeed is designed to read all data present in the specified branches, trees and files at the highest possible speed. When the application bottleneck is not in the computations performed by analysis logic, higher-level interfaces built on top of TTree such as TTreeReader and RDataFrame are known to add a significant runtime overhead with respect to the runtimes reported by rootreadspeed (up to a factor 2). In realistic analysis applications it has been observed that a large part of that overhead is compensated by the ability of TTreeReader and RDataFrame to read branch values selectively, based on event cuts, and this overhead will be reduced significantly when using RDataFrame in conjunction with RNTuple.; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/14039:6007,log,logic,6007,https://root.cern,https://github.com/root-project/root/pull/14039,1,['log'],['logic']
Testability,"g here the provided example. ### Reproducer. Create the following two files:. test.hh:; ```C++; #ifndef test_hh; #define test_hh; #include <iostream>; #include <filesystem>; namespace fs = std::filesystem;. class test; {; public:; test();; ~test();. private:; fs::path path;; };. #endif; ```. test.cpp:; ```C++; #include ""test.hh""; test::test(); {; std::cout << ""test constructor"" << std::endl;; this->path = ""."";; }. test::~test(); {; std::cout << ""test destructor"" << std::endl;; }; ```. Then load with ACLiC:; ```; $ root; ------------------------------------------------------------------; | Welcome to ROOT 6.28/06 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |; | From tags/v6-28-06@v6-28-06 |; | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 |; | Try '.help'/'.?', '.demo', '.license', '.credits', '.quit'/'.q' |; ------------------------------------------------------------------. root [0] .L test.cpp+; Info in <TUnixSystem::ACLiC>: creating shared library /data/giraudpf/tmp/./test_cpp.so; input_line_11:6:22: error: '_List' is a private member of 'std::filesystem::path'; filesystem::path::_List::_Impl_deleter _1;; ^; /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here; struct _List; ^; input_line_11:7:22: error: '_List' is a private member of 'std::filesystem::path'; filesystem::path::_List::_Impl* _0;; ^; /usr/include/c++/11/bits/fs_path.h:636:12: note: declared private here; struct _List; ^; Error in <Load>: Could not declare TEmulatedTuple<filesystem::path::_List::_Impl*,filesystem::path::_List::_Impl_deleter>; ```. ### ROOT version. ```; ------------------------------------------------------------------; | Welcome to ROOT 6.28/06 https://root.cern |; | (c) 1995-2023, The ROOT Team; conception: R. Brun, F. Rademakers |; | Built for linuxx8664gcc on Aug 30 2023, 16:45:00 |; | From tags/v6-28-06@v6-28-06 |; | With c++ (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 ",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13574:1257,test,test,1257,https://root.cern,https://github.com/root-project/root/issues/13574,1,['test'],['test']
Testability,g vector<unsigned char>(100000000) : RSS: 477.64(delta = 16.00) VMEM: 767.83(delta = 95.37) MB; Iter: 3 Memory after writing vector<unsigned char>(100000000) : RSS: 493.64(delta = 16.00) VMEM: 863.20(delta = 95.37) MB; Iter: 4 Memory after writing vector<unsigned char>(100000000) : RSS: 509.65(delta = 16.00) VMEM: 958.57(delta = 95.37) MB; Iter: 5 Memory after writing vector<unsigned char>(100000000) : RSS: 525.65(delta = 16.00) VMEM: 1053.94(delta = 95.37) MB; Iter: 6 Memory after writing vector<unsigned char>(100000000) : RSS: 541.66(delta = 16.00) VMEM: 1149.31(delta = 95.37) MB; Iter: 7 Memory after writing vector<unsigned char>(100000000) : RSS: 557.66(delta = 16.00) VMEM: 1244.68(delta = 95.37) MB; Iter: 8 Memory after writing vector<unsigned char>(100000000) : RSS: 573.66(delta = 16.00) VMEM: 1340.05(delta = 95.37) MB; Iter: 9 Memory after writing vector<unsigned char>(100000000) : RSS: 589.67(delta = 16.00) VMEM: 1435.43(delta = 95.37) MB; Memory at start of memory-based file test : write vector<float>(25000000); RSS: 684.80(delta = 95.13) VMEM: 1530.80(delta = 95.37) MB; Iter: 0 Memory after writing vector<float>(25000000) : RSS: 685.59(delta = 0.79) VMEM: 1532.98(delta = 2.19) MB; Iter: 1 Memory after writing vector<float>(25000000) : RSS: 685.59(delta = 0.00) VMEM: 1532.98(delta = 0.00) MB; Iter: 2 Memory after writing vector<float>(25000000) : RSS: 685.59(delta = 0.00) VMEM: 1532.98(delta = 0.00) MB; Iter: 3 Memory after writing vector<float>(25000000) : RSS: 685.59(delta = 0.00) VMEM: 1532.98(delta = 0.00) MB; Iter: 4 Memory after writing vector<float>(25000000) : RSS: 685.59(delta = 0.00) VMEM: 1532.98(delta = 0.00) MB; Iter: 5 Memory after writing vector<float>(25000000) : RSS: 685.59(delta = 0.00) VMEM: 1532.98(delta = 0.00) MB; Iter: 6 Memory after writing vector<float>(25000000) : RSS: 685.59(delta = 0.00) VMEM: 1532.98(delta = 0.00) MB; Iter: 7 Memory after writing vector<float>(25000000) : RSS: 685.59(delta = 0.00) VMEM: 1532.98(delta = 0.00) MB;,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7236:1835,test,test,1835,https://root.cern,https://github.com/root-project/root/issues/7236,1,['test'],['test']
Testability,"g::Transaction*> > > >&, bool) IncrementalParser.cpp:0:0; #32 0x000000000151d992 cling::Interpreter::Interpreter(int, char const* const*, char const*, std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > > const&, bool, cling::Interpreter const*) Interpreter.cpp:0:0; #33 0x00000000014a5117 std::__2::vector<std::__2::shared_ptr<clang::ModuleFileExtension>, std::__2::allocator<std::__2::shared_ptr<clang::ModuleFileExtension> > >::~vector() /scratch/greenc/test-products/clang/v14_0_6b/Linux64bit+3.10-2.17/bin/../include/c++/v1/vector:399:17; #34 0x00000000014a5117 RootClingMain(int, char**, bool) /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:4315:7; #35 0x00000000014b2135 ROOT_rootcling_Driver /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/dictgen/src/rootcling_impl.cxx:0:16; #36 0x00000000014f6b7e main /scratch/greenc/test-products/root/v6_26_04/source/root-6.26.04/core/rootcling_stage1/src/rootcling_stage1.cxx:46:4; #37 0x00007f1551302555 __libc_start_main (/lib64/libc.so.6+0x22555); #38 0x000000000143eb89 _start (/scratch/greenc/test-products/root/v6_26_04/build/Linux64bit+3.10-2.17-c13-p3912-prof/core/rootcling_stage1/src/rootcling_stage1+0x143eb89); <snip/>; ```. ### Expected behavior. Successful build. ### To Reproduce. Attempt to build ROOT with LLVM/Clang 14.0.6 and C++17 / `libc++` (precise configuration should be irrelevant provided `runtime_cxxmodules` is `ON`). ### Additional context. This was a second, simplified attempt after `rootcling` failed to find PSTL headers (_e.g._ `__pstl_memory`) in `<clang-lib>/clang/14.0.6/include` during the ROOT build when LLVM/Clang was compiled with parallel algorithms enabled in `libc++`. ~Currently attempting to reproduce on `master` branch.~. Fail with identical error on master (https://github.com/root-project/root/tree/7b7983fa8ab9e1a4af98776f7f80bea1f9b2b0b0).",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/10861:6067,test,test-products,6067,https://root.cern,https://github.com/root-project/root/issues/10861,1,['test'],['test-products']
Testability,"gcc 4.8.5 says the template overload is ambiguous:; ```; .../tree/dataframe/inc/ROOT/RDF/RInterface.hxx: In instantiation of 'ROOT::RDF::RResultPtr<typename Helper::Result_t> ROOT::RDF::RInterface<T, V>::Book(Helper&&, const ColumnNames_t&) [with FirstColumn = ROOT::Detail::RDF::RInferredType; OtherColumns = {}; Helper = CounterHelper; Proxied = ROOT::Detail::RDF::RLoopManager; DataSource = void; typename Helper::Result_t = std::__atomic_base<unsigned int>; ROOT::RDF::RInterface<T, V>::ColumnNames_t = std::vector<std::basic_string<char> >]':; .../tree/dataframe/test/dataframe_interface.cxx:765:4: required from here; .../tree/dataframe/inc/ROOT/RDF/RInterface.hxx:2430:54: error: call of overloaded 'CallCreateActionWithoutColsIfPossible(std::shared_ptr<std::__atomic_base<unsigned int> >&, std::shared_ptr<CounterHelper>&, ROOT::TypeTraits::TypeList<ROOT::Detail::RDF::RInferredType>)' is ambiguous; return CallCreateActionWithoutColsIfPossible<Helper>(resPtr, hPtr, TTraits::TypeList<FirstColumn>{});; ^; .../tree/dataframe/inc/ROOT/RDF/RInterface.hxx:2430:54: note: candidates are:; .../tree/dataframe/inc/ROOT/RDF/RInterface.hxx:2738:9: note: decltype ((hPtr->.Exec(0u), ROOT::RDF::RResultPtr<T2>{})) ROOT::RDF::RInterface<T, V>::CallCreateActionWithoutColsIfPossible(const std::shared_ptr<ActionResultType>&, const std::shared_ptr<_Tp1>&, ROOT::TypeTraits::TypeList<ROOT::Detail::RDF::RInferredType>) [with Helper = CounterHelper; ActionResultType = std::__atomic_base<unsigned int>; Proxied = ROOT::Detail::RDF::RLoopManager; DataSource = void; decltype ((hPtr->.Exec(0u), ROOT::RDF::RResultPtr<T2>{})) = ROOT::RDF::RResultPtr<std::__atomic_base<unsigned int> >]; auto CallCreateActionWithoutColsIfPossible(const std::shared_ptr<ActionResultType> &resPtr,; ^; .../tree/dataframe/inc/ROOT/RDF/RInterface.hxx:2748:4: note: ROOT::RDF::RResultPtr<T2> ROOT::RDF::RInterface<T, V>::CallCreateActionWithoutColsIfPossible(const std::shared_ptr<ActionResultType>&, Others ...) [with Helper = Count",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/8407:568,test,test,568,https://root.cern,https://github.com/root-project/root/pull/8407,1,['test'],['test']
Testability,gcc49 build on osx fix linker assertion,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/64:30,assert,assertion,30,https://root.cern,https://github.com/root-project/root/pull/64,1,['assert'],['assertion']
Testability,gcc49 build on osx fix linker assertion #64 resubmit,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/65:30,assert,assertion,30,https://root.cern,https://github.com/root-project/root/pull/65,1,['assert'],['assertion']
Testability,"gcc9-dbg/include/GaudiKernel/StatEntity.h:12:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/Gaudi/Accumulators.h:14:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/Gaudi/MonitoringHub.h:15:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/json.hpp:49:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/adl_serializer.hpp:5:; In file included from /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/detail/conversions/from_json.hpp:18:; /cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/detail/meta/type_traits.hpp:11:10: fatal error: cannot open file '/build/jenkins/workspace/lcg_nightly_pipeline/install/dev3/jsonmcpp/3.9.1/x86_64-centos7-gcc9-dbg/include/nlohmann/json_fwd.hpp': No such file or directory; #include <nlohmann/json_fwd.hpp>; ^; python: /build/jenkins/workspace/lcg_nightly_pipeline/build/projects/ROOT-HEAD/src/ROOT/HEAD/interpreter/cling/lib/Interpreter/TransactionUnloader.cpp:72: bool cling::TransactionUnloader::unloadFromPreprocessor(cling::Transaction*, cling::DeclUnloader&): Assertion `Successful && ""Cannot handle that yet!""' failed.; *** Break *** abort; ...; ```; The header file being loaded is in `/cvmfs/sft-nightlies.cern.ch/lcg/views/dev3/Tue/x86_64-centos7-gcc9-dbg/include/nlohmann/json_fwd.hpp`, which is included in `ROOT_INCLUDE_PATH `. According to Vassil. This is due to some bug/feature in clang when it resolves include paths with symlinks. The problem is avoided if the realpath of the directory containing the header is prepended explicitely to `ROOT_INCLUDE_PATH`. ```; $ export ROOT_INCLUDE_PATH=/cvmfs/sft.cern.ch/lcg/releases/jsonmcpp/3.9.1-72770/x86_64-centos7-gcc9-dbg/include:$ROOT_INCLUDE_PATH; $ python -c 'import GaudiPython'; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/7950:2055,Assert,Assertion,2055,https://root.cern,https://github.com/root-project/root/issues/7950,1,['Assert'],['Assertion']
Testability,"ger.SetPrintLevel(1);. // Set a selective list of objects to hadd ; // The rest of objects will not be considered in the input files ; fileMerger.AddObjectNames(""hist1"");; fileMerger.AddObjectNames(""hist2"");. // Set output file ; fileMerger.OutputFile(""myExclusiveFile.root"",""recreate"");. // Set input file(s) ; fileMerger.AddFile(""myFileWithHists.root"");. if (numTest == 1){; ; // In that case add a dummy file i.e. empty file ; // In order to avoid the bug in in the TFileMerger class ; // if there is only one input file used. std::string tmpDir = gSystem->TempDirectory();; // create a unique empty file ; std::string dummyFileName = tmpDir +""/dummyEmptyFile-"" + std::string(TUUID().AsString()) + "".root"";. std::cout << ""Creating a dummy empty file to avoid a bug in TFileMerger class: "" << dummyFileName << std::endl;; // Just create dummy file ; TFile *file = TFile::Open(dummyFileName.c_str(),""recreate"");; delete file;; fileMerger.AddFile(dummyFileName.c_str());; }; ; // Will only merge in the output files ; // the list of objects specified ; Int_t mode = (TFileMerger::kAll | TFileMerger::kRegular | TFileMerger::kOnlyListed);; ; fileMerger.PartialMerge(mode);; ; return 0;; }. void createFileWithHists(const std::string &fileName){; TFile *file = TFile::Open(fileName.c_str(), ""recreate""); . TH1F *hist1 = new TH1F(""hist1"", ""hist1"", 1 , 0 , 2);; TH1F *hist2 = new TH1F(""hist2"", ""hist2"", 1 , 0 , 2);; TH1F *hist3 = new TH1F(""hist3"", ""hist3"", 1 , 0 , 2);; TH1F *hist4 = new TH1F(""hist4"", ""hist4"", 1 , 0 , 2);. hist1->Fill(1);. hist2->Fill(1);; hist2->Fill(2);. hist3->Fill(1);; hist3->Fill(1);; hist3->Fill(1);. hist4->Fill(1);; hist4->Fill(1);; hist4->Fill(1);; hist4->Fill(1);. // Write and close file; file->Write();; delete file;; }; ```. ### ROOT version. Tested with ROOT Version: 6.26/10; But I believe all versions are affected . ### Installation method. Build from source. ### Operating system. Tested on Linux (I believe all OS are affected). ### Additional context. _No response_",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/13359:4504,Test,Tested,4504,https://root.cern,https://github.com/root-project/root/issues/13359,2,['Test'],['Tested']
Testability,"git dpkg-dev cmake binutils libx11-dev libxpm-dev \; libxft-dev libxext-dev; sudo apt-get install gfortran libssl-dev libpcre3-dev \; xlibmesa-glu-dev libglew1.5-dev libftgl-dev \; libmysqlclient-dev libfftw3-dev libcfitsio-dev \; graphviz-dev libavahi-compat-libdnssd-dev \; libldap2-dev python-dev libxml2-dev libkrb5-dev \; libgsl0-dev libqt4-dev; sudo apt install gdb. sudo apt install libstdc++ # then add flag -stdlib=libstdc++. wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh; (echo ''; echo 'yes'; echo ''; echo 'yes';) | bash ./Miniconda3-latest-Linux-x86_64.sh; source .bashrc; source activate base; pip install numpy sklearn xgboost matplotlib. #################################### install projects #############################3; # Get ROOT; cd; git clone git@github.com:LucaZampieri/root.git. # build with gcc; mkdir build_gcc && cd build_gcc && cmake ../root && make -j8. ## Google bench; cd; # Check out the library.; git clone https://github.com/google/benchmark.git; # Benchmark requires Google Test as a dependency. Add the source tree as a subdirectory.; git clone https://github.com/google/googletest.git benchmark/googletest. # Go to the library root directory; cd benchmark ; mkdir build_gcc; cd build_gcc ; cmake -DCMAKE_BUILD_TYPE=Release ../root && make -j8. # XGBoost; cd; git clone --recursive https://github.com/dmlc/xgboost; cd xgboost; mkdir build_gcc; cd build_gcc; cmake -DCMAKE_BUILD_TYPE=Release ../. # Setup aliases; echo ""alias bdt='cd ~/root/tmva/tmva/src/BDT'"" >> ~/.bashrc; source .bashrc. # Add the folders missing from github (add them directly in github?) ; cd; bdt ; git checkout backend/FastInference; mkdir build. # For ROOT; echo 'export ROOTSYS=""~/root/""' >> ~/.bashrc; echo 'export ROOTBUILD=""~/build_gcc/""' >> ~/.bashrc; echo 'source $ROOTBUILD/bin/thisroot.sh' >> ~/.bashrc. echo 'export XGBOOST_ROOT=""~/xgboost""' >> ~/.bashrc. echo 'export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:~/xgboost/lib/' >> ~/.bashrc. source .bashrc; ```",MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/pull/4351:3391,Benchmark,Benchmark,3391,https://root.cern,https://github.com/root-project/root/pull/4351,4,"['Benchmark', 'Test', 'benchmark']","['Benchmark', 'Test', 'benchmark']"
Testability,github.com/cms-sw/cmsdist/pull/7500#issuecomment-992272002; ```; /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/gcc/10.3.0-84898dea653199466402e67d73657f10/bin/g++ -DGTEST_HAS_RTTI=0 -D_GNU_SOURCE -D__STDC_CONSTANT_MACROS -D__STDC_FORMAT_MACROS -D__STDC_LIMIT_MACROS -Iinterpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/lib/Lex -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/tools/clang/include -Iinterpreter/llvm/src/tools/clang/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/slc7_ppc64le_gcc10/external/libxml2/2.9.10-32fb6ccc7a5c1482269c150e9287ec24/include/libxml2 -Iinterpreter/llvm/src/include -I/scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7_ppc64le_gcc10/lcg/root/6.24.07-12a11ac5dbf21d7c2a6a8cef92c99bc0/root-6.24.07/interpreter/llvm/src/include -D__ROOFIT_NOBANNER -fdiagnostics-color=always -std=c++17 -Wno-implicit-fallthrough -Wno-noexcept-type -pipe -Wshadow -Wall -W -Woverloaded-virtual -fsigned-char -pthread -fno-semantic-interposition -fPIC -fvisibility-inlines-hidden -Werror=date-time -std=c++1z -w -fdiagnostics-color -ffunction-sections -fdata-sections -fno-common -Woverloaded-virtual -fno-strict-aliasing -O3 -DNDEBUG -fvisibility=hidden -fvisibility-inlines-hidden -fno-exceptions -fno-rtti -std=c++17 -MD -MT interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -MF interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o.d -o interpreter/llvm/src/tools/clang/lib/Lex/CMakeFiles/obj.clangLex.dir/PPCaching.cpp.o -c /scratch/cmsbuild/jenkins_b/workspace/ib-run-pr-tests/testBuildDir/BUILD/slc7,MatchSource.ISSUE,root-project,root,v6-32-06,https://github.com/root-project/root/issues/9424:1465,test,tests,1465,https://root.cern,https://github.com/root-project/root/issues/9424,2,['test'],"['testBuildDir', 'tests']"
