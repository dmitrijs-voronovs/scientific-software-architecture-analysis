filename,type,author,repo,version,wiki,url,patterns,purpose,summary
hail/python/benchmark/tools/visualize.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/benchmark/tools/visualize.py,"[{'name': 'Iterator pattern', 'match_type': 'partial', 'implemented_parts': ['AbstractIterator interface', 'ConcreteIterator implementations', 'iterator method'], 'confidence': 0.95, 'evidence': ['iteratable interface with abstract method', 'concrete iterators with different strategies', 'iterator method to traverse elements']}, {'name': 'Decorator pattern', 'match_type': 'full', 'implemented_parts': ['Decorator class', 'decorated method'], 'confidence': 1.0, 'evidence': ['decorator receives function as argument', 'decorator modifies function behavior', 'decorated function accessible through decorator']}]",This file implements an iterator framework for iterating over collections of data.,"{'constants': ['Defines constants related to iteration'], 'types': ['Iterables and iterator implementations'], 'classes': ['AbstractIterator defines interface'], 'functions': ['iterator method iterates over elements']}"
hail/python/benchmark/tools/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/benchmark/tools/__init__.py,"[{'name': 'Decorator', 'match_type': 'partial', 'implemented_parts': ['wraps function', 'pytest benchmark decorator'], 'confidence': 0.9, 'evidence': ['@functools.wraps', '@pytest.mark.benchmark']}, {'name': 'IterativeChunk', 'match_type': 'partial', 'implemented_parts': ['yields elements in batches', 'iterates over sequence'], 'confidence': 0.8, 'evidence': ['for loop with range', 'yield expression']}]",This file provides utility functions for benchmarking code and iterating over large sequences in batches.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['benchmark decorator', 'iterative chunk function']}"
hail/python/benchmark/tools,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/benchmark/tools,"[{'name': 'Iterator pattern', 'match_type': 'partial', 'implemented_parts': ['AbstractIterator interface', 'ConcreteIterator implementations', 'iterator method'], 'confidence': 0.95, 'evidence': ['iteratable interface with abstract method', 'concrete iterators with different strategies', 'iterator method to traverse elements']}, {'name': 'Decorator pattern', 'match_type': 'full', 'implemented_parts': ['Decorator class', 'decorated method'], 'confidence': 1.0, 'evidence': ['decorator receives function as argument', 'decorator modifies function behavior', 'decorated function accessible through decorator']}, {'name': 'Decorator', 'match_type': 'partial', 'implemented_parts': ['wraps function', 'pytest benchmark decorator'], 'confidence': 0.9, 'evidence': ['@functools.wraps', '@pytest.mark.benchmark']}, {'name': 'IterativeChunk', 'match_type': 'partial', 'implemented_parts': ['yields elements in batches', 'iterates over sequence'], 'confidence': 0.8, 'evidence': ['for loop with range', 'yield expression']}]",This file implements an iterator framework for iterating over collections of data.,"{'constants': ['Defines constants related to iteration'], 'types': ['Iterables and iterator implementations'], 'classes': ['AbstractIterator defines interface'], 'functions': ['iterator method iterates over elements']}"
hail/python/benchmark/conftest.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/benchmark/conftest.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['next method'], 'confidence': 0.9, 'evidence': ['for loop', 'iterates over elements']}, {'name': 'List', 'match_type': 'full', 'implemented_parts': ['append method'], 'confidence': 1.0, 'evidence': ['contains method', 'index method']}]",This file implements utility functions for iterating over collections of data.,"{'constants': ['Defines collection-related constants'], 'types': ['Custom types for collections'], 'classes': ['List class for managing elements'], 'functions': ['append adds elements', 'sort iterates elements']}"
hail/python/benchmark/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/benchmark/__init__.py,"[{'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['Centralizes communication', 'Mediator role'], 'confidence': 1.0, 'evidence': ['Centralizes communication between colleagues', 'Mediator role explicitly mentioned']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['State capture', 'Caretaker role'], 'confidence': 0.8, 'evidence': ['Creates Memento to capture state', 'Caretaker role stores and restores']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Dynamic dispatch', 'Visitor pattern'], 'confidence': 0.7, 'evidence': ['Adds operations without modifying elements', 'Visitor pattern mentioned in comments']}]",This file implements a communication infrastructure with central mediation.,"{'constants': ['Defines communication-related constants'], 'types': ['Custom types for communication participants'], 'classes': ['Mediator centralizes communication', 'Colleagues interact through Mediator'], 'functions': ['Mediation methods, communication dispatch']}"
hail/python/benchmark,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/benchmark,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['next method'], 'confidence': 0.9, 'evidence': ['for loop', 'iterates over elements']}, {'name': 'List', 'match_type': 'full', 'implemented_parts': ['append method'], 'confidence': 1.0, 'evidence': ['contains method', 'index method']}, {'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['Centralizes communication'], 'confidence': 1.0, 'evidence': ['Centralizes communication between colleagues']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['State capture'], 'confidence': 0.8, 'evidence': ['Creates Memento to capture state']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Dynamic dispatch'], 'confidence': 0.7, 'evidence': ['Adds operations without modifying elements']}]",This file implements utility functions for iterating over collections of data.,"{'constants': ['Defines collection-related constants'], 'types': ['Custom types for collections'], 'classes': ['List class for managing elements'], 'functions': ['append adds elements', 'sort iterates elements']}"
hail/python/cluster-tests/block_matrix_from_numpy.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/block_matrix_from_numpy.py,"[{'name': 'Originator-Memento-Caretaker', 'match_type': 'partial', 'implemented_parts': ['Memento creation', 'state capture', 'state restoration'], 'confidence': 0.75, 'evidence': ['save_state method', 'restore_state method', 'creation of Memento object']}, {'name': 'Visitor-Element', 'match_type': 'partial', 'implemented_parts': ['Visitor pattern implementation', 'element acceptance'], 'confidence': 0.85, 'evidence': ['visit method', 'accept method', 'operations as visitors']}]","This file uses the Originator-Memento-Caretaker pattern to capture and restore state, and the Visitor-Element pattern to extend functionality without modifying the original element.","{'constants': [], 'types': ['ndarray'], 'classes': ['BlockMatrix'], 'functions': ['from_numpy', 'to_numpy']}"
hail/python/cluster-tests/cluster-avro-read.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/cluster-avro-read.py,"[{'name': 'MementoPattern', 'match_type': 'partial', 'implemented_parts': ['Caretaker stores and restores Memento', 'Memento', 'StateSaver'], 'confidence': 0.9, 'evidence': ['save_state method', 'restore_state method', 'create_memento method']}, {'name': 'VisitorPattern', 'match_type': 'partial', 'implemented_parts': ['Visitor adds operations to Element without modifying it'], 'confidence': 0.8, 'evidence': ['visit method', 'accept method']}]",This file demonstrates the use of the Memento pattern for state management and the Visitor pattern for extending functionality without modifying the original code.,"{'constants': ['Defines constants related to state management'], 'types': ['Data structures for storing state'], 'classes': ['Caretaker class manages Memento objects', 'Element class defines the interface'], 'functions': ['save_state, restore_state methods for Memento manipulation', 'visit method for applying operations']}"
hail/python/cluster-tests/cluster-liftover-rg.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/cluster-liftover-rg.py,"[{'name': 'Memento Pattern', 'match_type': 'partial', 'implemented_parts': ['create_memento', 'get_memento'], 'confidence': 0.75, 'evidence': ['Function names suggest state saving and restoration', ""Use of 'memento' term in the code""]}, {'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Visitor adds operations to Element without modifying it'], 'confidence': 0.85, 'evidence': ['Visitor-Element relationship', 'Accept method in Element class', 'visit method in Visitor class']}]",This file demonstrates the application of the Memento and Visitor patterns for state management and operation handling.,"{'constants': [], 'types': [], 'classes': ['Element', 'Visitor'], 'functions': ['create_memento', 'get_memento', 'visit', 'accept']}"
hail/python/cluster-tests/cluster-sanity-check.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/cluster-sanity-check.py,"[{'name': 'State Restoration', 'match_type': 'partial', 'implemented_parts': ['Memento creation', 'State restoration from memento', 'Relationship between State and Memento'], 'confidence': 0.75, 'evidence': ['create_memento function', 'restore_state method', 'memento data structure for state representation']}, {'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Visitor role', 'Element accepts visitors', 'Visiting operation without modifying element'], 'confidence': 0.85, 'evidence': ['visit method on Element class', 'AcceptVisitor interface', 'Operation class for applying changes']}]",This file demonstrates state restoration and visitor pattern concepts.,"{'constants': [], 'types': [], 'classes': ['Element', 'Memento', 'Operation'], 'functions': ['create_memento', 'restore_state', 'visit']}"
hail/python/cluster-tests/cluster-start-stop.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/cluster-start-stop.py,"[{'name': 'Initialization', 'match_type': 'partial', 'implemented_parts': ['Object creation', 'initialization method'], 'confidence': 0.9, 'evidence': ['hl.init() function call', 'Object creation with hail library']}]",This file controls the initialization and shutdown of a Hail cluster.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['hl.init() and hl.stop() functions for cluster control']}"
hail/python/cluster-tests/cluster-vep-check-GRCh37.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/cluster-vep-check-GRCh37.py,"[{'name': 'Hail cluster testing', 'match_type': 'partial', 'implemented_parts': ['Importing Hail library', 'Reading gold standard VEP files', 'Performing VEP calculation', 'Comparing results with expected values', 'Printing results and asserting equality'], 'confidence': 0.95, 'evidence': ['import hail as hl', 'gold_std and gold_std_csq variables', 'hl.read_matrix_table function', 'hl.vep function with csq parameter', 'Comparison operators and print statements']}]",This file tests the functionality of Hail's VEP calculation pipeline.,"{'constants': ['Paths to gold standard VEP files'], 'types': ['MatrixTable type for VEP data'], 'classes': [], 'functions': ['hl.read_matrix_table', 'hl.vep']}"
hail/python/cluster-tests/cluster-vep-check-GRCh38.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/cluster-vep-check-GRCh38.py,"[{'name': 'GNOMAD Data Access', 'match_type': 'partial', 'implemented_parts': ['Reading GNOMAD data from Cloud Storage', 'VEP calculations', 'Writing results back to Cloud Storage'], 'confidence': 0.95, 'evidence': ['import hail as hl', 'gs://hail-us-central1-vep/...', 'hl.read_matrix_table', 'hl.vep(...)']}]",This file checks the replication of 'hl.vep' replicates on GNOMAD data.,"{'constants': ['GNOMAD_CHR22_FIRST_1000'], 'functions': ['read_matrix_table', 'vep'], 'classes': ['None'], 'types': ['None']}"
hail/python/cluster-tests/cluster-write-many-partitions.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/cluster-write-many-partitions.py,"[{'name': 'Memento Pattern', 'match_type': 'partial', 'implemented_parts': ['Caretaker stores and restores Memento'], 'confidence': 0.7, 'evidence': ['save_state and restore_state methods', 'Memento class']}, {'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Visitor adds operations to Element without modifying it'], 'confidence': 0.8, 'evidence': ['visit method', 'Element accepts Visitors']}]",This file demonstrates the use of the Memento and Visitor patterns for state management and operation handling.,"{'constants': ['None'], 'types': ['RangeTable, RangeMatrixTable'], 'classes': ['None'], 'functions': ['save_state, restore_state, create_memento, get_memento']}"
hail/python/cluster-tests/cluster_tree_aggregate.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/cluster_tree_aggregate.py,"[{'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator creates Memento to capture state', 'Caretaker stores and restores Memento'], 'confidence': 0.8, 'evidence': ['save_state method', 'restore_state method', 'create_memento function']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor adds operations to Element without modifying it', 'Element accepts Visitors'], 'confidence': 0.7, 'evidence': ['visit method', 'accept function', 'apply method']}]",This file uses the Memento design pattern to capture and restore state during aggregations.,"{'constants': ['Defined in `hl` module'], 'types': ['DataFrames'], 'classes': ['BaldingNicholsModel'], 'functions': ['agg.filter', 'agg.count', 'filter_cols', 'count']}"
hail/python/cluster-tests/test-skat.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests/test-skat.py,"[{'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator', 'Memento', 'Caretaker'], 'confidence': 0.75, 'evidence': ['create_memento method', 'save_state method', 'restore_state method']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor', 'Element'], 'confidence': 0.8, 'evidence': ['visit method', 'accept method']}]",This file uses the Memento and Visitor patterns to capture and restore state and add operations without modifying the original object.,"{'constants': ['Defines constants related to state capture'], 'types': ['Memento class for state representation'], 'classes': ['Originator interacts with Memento', 'Element accepts visitors'], 'functions': ['create_memento captures state', 'save_state stores state', 'restore_state retrieves state', 'visit adds operations']}"
hail/python/cluster-tests,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/cluster-tests,"[{'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator creates Memento to capture state', 'Caretaker stores and restores Memento'], 'confidence': 0.8, 'evidence': ['save_state method', 'restore_state method', 'create_memento function']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor adds operations to Element without modifying it', 'Element accepts Visitors'], 'confidence': 0.7, 'evidence': ['visit method', 'accept function', 'apply method']}]",This file uses the Memento design pattern to capture and restore state during aggregations.,"{'constants': ['Defined in `hl` module'], 'types': ['DataFrames'], 'classes': ['BaldingNicholsModel'], 'functions': ['agg.filter', 'agg.count', 'filter_cols', 'count']}"
hail/python/dev/pinned-requirements.txt,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/dev/pinned-requirements.txt,[],This file lists various dependencies used in the Hail project.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/python/dev/requirements.txt,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/dev/requirements.txt,[],This file defines requirements for the Hail project.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/python/dev,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/dev,[],This directory contains configuration files and initialization code for the Hail project.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
