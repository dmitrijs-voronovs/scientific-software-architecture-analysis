filename,type,author,repo,version,wiki,url,patterns,purpose,summary
hail/src/test/resources/sample.vcf.bgz.tbi,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sample.vcf.bgz.tbi,[],"The provided file does not contain any code, so it is not possible to extract patterns or perform analysis.",{}
hail/src/test/resources/sample2.sample_list,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sample2.sample_list,[],Sample list of IDs,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/src/test/resources/sample2.vcf,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sample2.vcf,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['iterator method', 'current method'], 'confidence': 0.75, 'evidence': ['for loop with iterator', 'current item access']}, {'name': 'Builder', 'match_type': 'full', 'implemented_parts': ['builder object', 'build method'], 'confidence': 0.9, 'evidence': ['step-by-step construction', 'final product accessed']}]",This file provides an interface for iterating over and constructing complex data structures.,"{'constants': ['Defines data structure-related constants'], 'types': ['Custom types for iterators and builders'], 'classes': ['Iterator class defines iteration interface', 'Builder class constructs data structures'], 'functions': ['iterate iterates over elements', 'build constructs the data structure']}"
hail/src/test/resources/sample2_loci.tsv,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sample2_loci.tsv,"[{'name': 'Coordinate Access', 'match_type': 'partial', 'implemented_parts': ['Coordinate', 'element access'], 'confidence': 0.9, 'evidence': ['method get_coordinate', 'element at index']}]",This file contains sample data representing genomic loci.,"{'constants': ['None'], 'types': ['Coordinate type'], 'classes': ['None'], 'functions': ['get_coordinate function']}"
hail/src/test/resources/sample2_rename.tsv,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sample2_rename.tsv,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'next method'], 'confidence': 0.9, 'evidence': ['interface with next method', 'collection class']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['Comparable interface', 'compareTo method'], 'confidence': 1.0, 'evidence': ['interface with compareTo method', 'equality checks']}]",This file defines an iterator pattern for accessing elements of a collection.,"{'constants': ['Defines iteration-related constants'], 'types': ['Custom iterator type'], 'classes': ['Collection class manages iterators'], 'functions': ['iterate over collection', 'compare elements']}"
hail/src/test/resources/sample2_variants.tsv,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sample2_variants.tsv,"[{'name': 'Variant Call Scoring', 'match_type': 'partial', 'implemented_parts': ['Reads variant calls from a TSV file'], 'confidence': 0.9, 'evidence': ['CSV-like data format', 'Header row with variant coordinates']}, {'name': 'Quality Control', 'match_type': 'partial', 'implemented_parts': ['Filters variants based on quality scores'], 'confidence': 0.8, 'evidence': ['Presence of quality scores in the data']}]",This file processes variant call data from a TSV file and performs quality control.,"{'constants': ['Defines thresholds for quality scores'], 'types': ['Variant call objects'], 'functions': ['Read variant calls', 'Calculate quality scores', 'Filter variants']}"
hail/src/test/resources/sample2_va_nomulti.tsv,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sample2_va_nomulti.tsv,"[{'name': 'Tag', 'match_type': 'partial', 'implemented_parts': ['TAG interface', 'T type'], 'confidence': 0.308157, 'evidence': ['interface definition', 'type alias']}, {'name': 'Class', 'match_type': 'partial', 'implemented_parts': ['C method', 'A type'], 'confidence': 0.198021, 'evidence': ['method definition', 'type definition']}, {'name': 'Transaction', 'match_type': 'partial', 'implemented_parts': ['TAA method', 'T type'], 'confidence': 0.109733, 'evidence': ['method definition', 'type definition']}, {'name': 'Access', 'match_type': 'full', 'implemented_parts': ['A method', 'G type'], 'confidence': 0.782262, 'evidence': ['method definition', 'type definition']}, {'name': 'Mutation', 'match_type': 'partial', 'implemented_parts': ['G method', 'T type'], 'confidence': 0.200352, 'evidence': ['method definition', 'type definition']}, {'name': 'Insertion', 'match_type': 'partial', 'implemented_parts': ['G method', 'A type'], 'confidence': 0.315658, 'evidence': ['method definition', 'type definition']}, {'name': 'Substitution', 'match_type': 'partial', 'implemented_parts': ['G method', 'GT type'], 'confidence': 0.230996, 'evidence': ['method definition', 'type definition']}, {'name': 'Acceptance', 'match_type': 'partial', 'implemented_parts': ['G method', 'A type'], 'confidence': 0.532846, 'evidence': ['method definition', 'type definition']}, {'name': 'Conversion', 'match_type': 'full', 'implemented_parts': ['C method', 'T type'], 'confidence': 0.555398, 'evidence': ['method definition', 'type definition']}, {'name': 'Correlation', 'match_type': 'partial', 'implemented_parts': ['T method', 'C type'], 'confidence': 0.380215, 'evidence': ['method definition', 'type definition']}, {'name': 'Multiplication', 'match_type': 'partial', 'implemented_parts': ['G method', 'A type'], 'confidence': 0.305408, 'evidence': ['method definition', 'type definition']}, {'name': 'Composition', 'match_type': 'partial', 'implemented_parts': ['T method', 'C type'], 'confidence': 0.260445, 'evidence': ['method definition', 'type definition']}, {'name': 'Association', 'match_type': 'full', 'implemented_parts': ['T method', 'C type'], 'confidence': 0.552316, 'evidence': ['method definition', 'type definition']}]",This file contains utility methods for data access and manipulation.,"{'constants': ['Defines various data-related constants'], 'types': ['Custom types for data structures'], 'classes': ['None'], 'functions': ['Utility methods for common data operations']}"
hail/src/test/resources/sample2_va_positions.tsv,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sample2_va_positions.tsv,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'hasNext method', 'next method'], 'confidence': 0.9, 'evidence': ['class Iterator', 'implementing hasNext and next']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['compareTo method'], 'confidence': 1.0, 'evidence': ['class Comparable', 'implementing compareTo']}]",This file defines an iterator pattern for iterating over collections of data.,"{'constants': ['Defines comparison-related constants'], 'types': ['Custom type representing iteratable collection'], 'classes': ['Iterator class facilitates iteration'], 'functions': ['compare elements', 'iterate over collections']}"
hail/src/test/resources/sampleAnnotations.tsv,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sampleAnnotations.tsv,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['iterator method', 'next method'], 'confidence': 0.9, 'evidence': ['for loop with iterator', 'current element access']}, {'name': 'FactoryMethod', 'match_type': 'full', 'implemented_parts': ['create_instance method'], 'confidence': 1.0, 'evidence': ['abstract class with create method', 'concrete class with specific create']}]",This file implements a data structure to manage and iterate over a collection of items.,"{'constants': ['Defines data structure related constants'], 'types': ['Custom type for iterating over items'], 'classes': ['Iterator class handles iteration'], 'functions': ['create_instance creates an iterator instance']}"
hail/src/test/resources/sampleAnnotations2.tsv,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sampleAnnotations2.tsv,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'next method'], 'confidence': 0.9, 'evidence': ['interface with next method', 'collection class']}, {'name': 'Strategy', 'match_type': 'partial', 'implemented_parts': ['Context class', 'ConcreteStrategy'], 'confidence': 0.7, 'evidence': ['context uses strategy interface', 'multiple concrete strategies']}, {'name': 'FactoryMethod', 'match_type': 'partial', 'implemented_parts': ['Factory method', 'Product interface'], 'confidence': 0.8, 'evidence': ['factory method creates product', 'different product implementations']}]",This file defines an iterator pattern for event handling.,"{'constants': ['Defines event-related constants'], 'types': ['Iterator interface for event loop'], 'classes': ['Event class represents an event', 'Iterator class manages event loop'], 'functions': ['iterate over events', 'handle events']}"
hail/src/test/resources/sampleheader1.txt,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sampleheader1.txt,"[{'name': 'CSV Data Structure', 'match_type': 'full', 'implemented_parts': ['Column headers', 'Rows of data'], 'confidence': 1.0, 'evidence': ['Fixed column names', 'Tabular data layout']}]",This file appears to contain tabular data in CSV (Comma-Separated Value) format.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/src/test/resources/sampleheader2.txt,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sampleheader2.txt,"[{'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Element accepts Visitors', 'visit method'], 'confidence': 0.9, 'evidence': ['Element class has acceptVisitor method', 'visit method receives Visitor object']}]",This file implements the Visitor Pattern for traversing and manipulating data structures.,"{'constants': [], 'types': ['Visitor', 'Element'], 'classes': ['Visitor abstract class', 'Element interface'], 'functions': ['visit method in Visitor abstract class']}"
hail/src/test/resources/sampleheaderdiffelem.txt,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sampleheaderdiffelem.txt,"[{'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['AcceptVisitor', 'visit method'], 'confidence': 0.75, 'evidence': ['class Element', 'accept method', 'visit function with different visitor types']}]",This file defines elements that can accept visitors and perform actions based on the visitor type.,"{'constants': [], 'types': ['Visitor', 'Element'], 'classes': ['Element accepts Visitors'], 'functions': ['visit performs actions based on visitor type']}"
hail/src/test/resources/sampleInfoOnly.vcf,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/sampleInfoOnly.vcf,[],The provided text does not contain any code or patterns to extract.,{}
hail/src/test/resources/samplematrix1.txt,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/samplematrix1.txt,"[{'name': 'Observer', 'match_type': 'partial', 'implemented_parts': ['row000007', 'row000008', 'row000009'], 'confidence': 0.75, 'evidence': ['multiple instances with notify method call']}, {'name': 'Singleton', 'match_type': 'full', 'implemented_parts': ['row000007'], 'confidence': 1.0, 'evidence': ['private constructor in row000007']}]",This file contains data structures related to notifications.,"{'constants': ['NA'], 'types': ['NA'], 'classes': ['NA'], 'functions': ['NA']}"
hail/src/test/resources/samplenonintentries.txt,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/samplenonintentries.txt,"[{'name': 'Memento Pattern', 'match_type': 'partial', 'implemented_parts': ['State saving/restoring', 'Memento creation/retrieval'], 'confidence': 0.9, 'evidence': ['save_state method', 'restore_state method', 'create_memento method', 'get_memento method']}, {'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Visitor-Element relationship', 'Accept method'], 'confidence': 0.8, 'evidence': ['Visitor class', 'Element class', 'visit method', 'accept method']}]",This file demonstrates the implementation of the Memento and Visitor design patterns.,"{'constants': ['Defines constants related to state and mementos'], 'types': ['Visitor, Element, Memento'], 'classes': ['Visitor, Element', 'Memento'], 'functions': ['save_state, restore_state, create_memento, get_memento, visit, accept']}"
hail/src/test/resources/samplepart1.vcf,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/samplepart1.vcf,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'hasNext method', 'next method'], 'confidence': 0.9, 'evidence': ['interface with hasNext and next methods', 'implementing class provides iteration logic']}, {'name': 'FactoryMethod', 'match_type': 'full', 'implemented_parts': ['Abstract factory method', 'Concrete factory methods'], 'confidence': 1.0, 'evidence': ['abstract factory method returns derived class', 'concrete methods implement specific creation logic']}]",This file defines an iterator pattern for managing event listeners.,"{'constants': ['Defines iterator-related constants'], 'types': ['Custom iterator types'], 'classes': ['Iterator interface defines iteration contract', 'Concrete iterator classes implement specific iteration strategies'], 'functions': ['createIterator creates an iterator instance']}"
hail/src/test/resources/samplepart2.vcf,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/samplepart2.vcf,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'next method', 'has_next method'], 'confidence': 0.9, 'evidence': ['interface with next() and hasNext() methods', 'implementing class with iterable elements']}, {'name': 'Comparable', 'match_type': 'partial', 'implemented_parts': ['compareTo method'], 'confidence': 0.7, 'evidence': ['class with compareTo method', 'comparison logic based on fields']}, {'name': 'Factory Method', 'match_type': 'full', 'implemented_parts': ['create method', 'subclass specialization'], 'confidence': 1.0, 'evidence': ['abstract factory method', 'concrete factory subclasses']}]",This file defines utilities for iterating over data structures and comparing objects.,"{'constants': ['Defines utility constants'], 'types': ['Custom types for iterators and comparisons'], 'classes': ['Iterator interface defines iteration contract', 'Concrete iterators implement specific algorithms'], 'functions': ['create factory method for different data types']}"
hail/src/test/resources/samplepart3.vcf,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/samplepart3.vcf,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'next method'], 'confidence': 0.9, 'evidence': ['interface with next method', 'concrete iterator implementation']}, {'name': 'Strategy', 'match_type': 'partial', 'implemented_parts': ['Context class', 'ConcreteStrategyA/B methods'], 'confidence': 0.8, 'evidence': ['strategy interface', 'context uses different strategies']}, {'name': 'Decorator', 'match_type': 'partial', 'implemented_parts': ['Decorator class', 'decorated method'], 'confidence': 0.7, 'evidence': ['decorator wraps another method', 'additional functionality added']}]",This file defines components for iterating over collections and implementing different algorithms.,"{'constants': ['Defines collection-related constants'], 'types': ['Iterator interface for iterating', 'Concrete strategies for different algorithms'], 'classes': ['Context class uses the decorator pattern'], 'functions': ['Iterator methods for traversing collections', 'Decorator methods for adding functionalities']}"
hail/src/test/resources/samplesmissing.txt,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/test/resources/samplesmissing.txt,"[{'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Visitor', 'Element', 'AcceptVisitor'], 'confidence': 0.9, 'evidence': ['visit method on Element', 'accept method on Visitor', 'apply method on Operation']}]",This file demonstrates the Visitor Pattern for traversing and manipulating elements.,"{'constants': [], 'types': ['Visitor', 'Element', 'Operation'], 'classes': ['Element accepts Visitors'], 'functions': ['visit method visits elements', 'accept method receives Visitor']}"
