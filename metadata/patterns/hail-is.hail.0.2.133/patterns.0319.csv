filename,type,author,repo,version,wiki,url,patterns,purpose,summary
batch/sql/increase-test-and-dev-pool-sizes.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/increase-test-and-dev-pool-sizes.py,"[{'name': 'DataAccessor', 'match_type': 'partial', 'implemented_parts': ['database connection', 'CRUD operations'], 'confidence': 0.9, 'evidence': ['Database class', 'execute_update method', 'async_init method']}]",This file interacts with a database to update pool and instance configurations.,"{'constants': [], 'types': ['Database class'], 'classes': ['Database class'], 'functions': ['async_init connects to the database', 'execute_update performs CRUD operations']}"
batch/sql/increase_test_max_idle_time.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/increase_test_max_idle_time.py,"[{'name': 'Memento Pattern', 'match_type': 'partial', 'implemented_parts': ['Caretaker stores and restores Memento'], 'confidence': 0.7, 'evidence': ['save_state method', 'restore_state method', 'create_memento method']}, {'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Visitor adds operations to Element without modifying it'], 'confidence': 0.8, 'evidence': ['visit method', 'accept method']}]",This file uses the Memento and Visitor patterns to update database records.,"{'constants': [], 'types': ['Database class for interacting with the database'], 'classes': ['Database class', 'Visitor pattern implementation'], 'functions': ['async_init method', 'execute_update method']}"
batch/sql/initial.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/initial.sql,"[{'name': 'Job Completion Handler', 'match_type': 'partial', 'implemented_parts': ['Batch completion update', 'Job state synchronization', 'Cancellation handling'], 'confidence': 0.95, 'evidence': ['Batch time_completed update', 'Job state transition based on parent count', 'Cancellation updates tracked in n_cancelled']}]",This code handles the completion of jobs within a batch.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
batch/sql/insert_attempt_resources_format_version_lt_3.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/insert_attempt_resources_format_version_lt_3.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['__iter__ method', 'next method'], 'confidence': 0.9, 'evidence': ['implements iterable protocol', 'supports iteration over list-like objects']}, {'name': 'Decorator', 'match_type': 'full', 'implemented_parts': ['@decorator decorator function'], 'confidence': 1.0, 'evidence': ['wraps function with additional functionality', 'allows reusable code enhancement']}]",This file implements utilities for iterating over data structures and applying functions to them.,"{'constants': ['Defines constants for iterator-related functions'], 'types': ['Custom iterator types'], 'classes': ['Iterator utility class'], 'functions': ['apply function over iterable', 'compose multiple iterables']}"
batch/sql/insert_globals.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/insert_globals.py,"[{'name': 'Environment-based Configuration', 'match_type': 'partial', 'implemented_parts': ['Loading environment variables'], 'confidence': 0.9, 'evidence': [""os.environ['HAIL_SCOPE']""]}, {'name': 'Conditional Configuration', 'match_type': 'partial', 'implemented_parts': ['Branching based on environment variable'], 'confidence': 0.85, 'evidence': [""if scope == 'deploy': ... else: ...""]}, {'name': 'Database Initialization', 'match_type': 'full', 'implemented_parts': ['Database connection and initialization'], 'confidence': 1.0, 'evidence': ['Database() instance', 'await db.async_init()']}, {'name': 'Random Instance ID Generation', 'match_type': 'partial', 'implemented_parts': ['Generating random string'], 'confidence': 0.9, 'evidence': [""''.join([secrets.choice(sigma) for _ in range(22)])""]}, {'name': 'SQL Insert Statement', 'match_type': 'full', 'implemented_parts': ['Executing SQL statement'], 'confidence': 1.0, 'evidence': ['await db.execute_insertone(...)']}]",This file initializes a database and inserts a new global configuration record.,"{'constants': ['None'], 'types': ['Database connection object'], 'classes': ['Database class'], 'functions': ['Database.async_init()']}"
batch/sql/insert_local_ssd_resource.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/insert_local_ssd_resource.py,"[{'name': 'Database Connection', 'match_type': 'partial', 'implemented_parts': ['Database connection establishment', 'Async initialization method', 'Executing SQL statements'], 'confidence': 0.95, 'evidence': ['import Database class', 'async_init method', 'execute_many and execute_insertone methods for SQL execution']}]",This file interacts with a Google Cloud SQL database.,"{'constants': ['N/A'], 'types': ['Database class for interacting with SQL'], 'classes': ['Database class'], 'functions': ['async_init for database connection', 'execute_many and execute_insertone for SQL execution']}"
batch/sql/insert_nonpreemptible_resources.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/insert_nonpreemptible_resources.py,"[{'name': 'Database CRUD', 'match_type': 'partial', 'implemented_parts': ['Database connection', 'CRUD operations'], 'confidence': 0.9, 'evidence': ['Database class', 'async_init method', 'execute_many method']}]",This file inserts non-preemptible resources into a database.,"{'constants': ['None'], 'types': ['Database'], 'classes': ['Database'], 'functions': ['async_init connects to database', 'execute_many inserts data']}"
batch/sql/insert_resources.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/insert_resources.py,"[{'name': 'Rate Calculator', 'match_type': 'partial', 'implemented_parts': ['Functions for converting various resource rates to different units', 'Retrieval of rates from online pricing page'], 'confidence': 0.95, 'evidence': ['Rate functions with different input parameters', 'Use of external pricing data source', 'Conversion of rates to different units of measurement']}]",This file calculates resource costs based on various rates and quantities.,"{'constants': ['Defines constants for different resource types'], 'types': ['Custom types for resource rates'], 'functions': ['Calculates costs for different resource types'], 'classes': ['Database connection'], 'variables': ['Rates for different resources']}"
batch/sql/insert_standing_worker_globals.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/insert_standing_worker_globals.py,"[{'name': 'Database Connection', 'match_type': 'partial', 'implemented_parts': ['Database connection establishment', 'Transaction management', 'SQL execution methods'], 'confidence': 0.9, 'evidence': ['Database class initialization', 'async_init method for database connection', 'execute_update method for SQL updates']}]",This file initializes and interacts with a database for data storage.,"{'constants': ['Defines database connection parameters'], 'types': ['Database class for interacting with the database'], 'classes': ['Database class handles database connection'], 'functions': ['async_init method to connect', 'execute_update method to update data']}"
batch/sql/jobs-after-update-simple.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/jobs-after-update-simple.sql,"[{'name': 'Cancellable Jobs', 'match_type': 'partial', 'implemented_parts': ['start_cancellable_jobs function'], 'confidence': 0.9, 'evidence': ['cancellable flag in job parameters', 'cancel function call']}, {'name': 'Resource Tracking', 'match_type': 'full', 'implemented_parts': ['user_inst_coll_resources table'], 'confidence': 1.0, 'evidence': ['Metrics for ready, running, creating, cancelled jobs', 'Resource allocation tracking']}]",This code manages cancellable background jobs and tracks resource utilization.,"{'constants': ['Defines constants for job status'], 'types': ['Data structures for job information'], 'classes': ['Job management class handles job scheduling'], 'functions': ['Track resource usage', 'Cancel running jobs']}"
batch/sql/kill-mjc-deadlocks.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/kill-mjc-deadlocks.sql,"[{'name': 'Job Completion Tracking', 'match_type': 'partial', 'implemented_parts': ['Batch tracking table', 'Job state transitions', 'Exclusive lock mechanism'], 'confidence': 0.95, 'evidence': ['`batches` table with `time_completed` and `state` fields', '`jobs` table with `state` and `cancelled` fields', '`job_parents` table for tracking job dependencies']}, {'name': 'Concurrency Control', 'match_type': 'full', 'implemented_parts': ['Job dependency tracking', 'Lock acquisition'], 'confidence': 1.0, 'evidence': ['`job_parents` table with `parent_id` field', '`IF` statement to acquire exclusive lock']}]","This code manages job execution in a batch, tracking completion and ensuring concurrency control.","{'constants': ['Defines batch and job-related constants'], 'types': ['Custom types for job states'], 'classes': ['Batch class for managing batches'], 'functions': ['Track job completion', 'Control concurrent job execution']}"
batch/sql/kill-more-deadlocks.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/kill-more-deadlocks.sql,"[{'name': 'Job Start Event', 'match_type': 'full', 'implemented_parts': ['Job state update', 'Attempt creation', 'Start time update'], 'confidence': 1.0, 'evidence': ['SELECT state FROM jobs', 'CALL add_attempt', 'UPDATE attempts']}, {'name': 'Job State Monitoring', 'match_type': 'partial', 'implemented_parts': ['Job state check'], 'confidence': 0.9, 'evidence': ['SELECT cur_job_state FROM jobs']}]","This function handles the job start event, updating job state and creating a new attempt.","{'constants': [], 'types': [], 'classes': [], 'functions': []}"
batch/sql/kill-more-deadlocks2.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/kill-more-deadlocks2.sql,"[{'name': 'Transaction Processing', 'match_type': 'partial', 'implemented_parts': ['Batch processing', 'Job tracking', 'State management'], 'confidence': 0.9, 'evidence': ['Jobs grouped into batches', 'State transitions tracked', 'Rollback mechanism for failures']}, {'name': 'Concurrency Control', 'match_type': 'full', 'implemented_parts': ['Job dependencies', 'Parallel execution', 'Lock management'], 'confidence': 1.0, 'evidence': ['Job relationships defined through `job_parents` table', 'Parallel execution of independent jobs', 'Mutexes for shared resources']}]",This file manages concurrent job execution and tracks their state.,"{'constants': ['Defines job status codes'], 'types': ['Job class represents a running job'], 'classes': ['Batch class manages job batches'], 'functions': ['Submit jobs for execution', 'Track job state transitions', 'Rollback failed jobs']}"
batch/sql/list-jobs-extra-indices.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/list-jobs-extra-indices.sql,"[{'name': 'Index Creation', 'match_type': 'full', 'implemented_parts': ['Index creation with specific columns'], 'confidence': 1.0, 'evidence': ['CREATE INDEX statement with batch_id, key, value columns']}]",This file creates two indexes on the job_attributes table.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
batch/sql/minimize-deadlock-errors.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/minimize-deadlock-errors.sql,"[{'name': 'StatefulController', 'match_type': 'partial', 'implemented_parts': ['StatefulController instance', 'handle_event method', 'state field'], 'confidence': 0.9, 'evidence': ['StatefulController class stores state', 'handle_event updates state based on event', 'state field persists state across event calls']}, {'name': 'CommandPattern', 'match_type': 'full', 'implemented_parts': ['Command interface', 'ConcreteCommand classes'], 'confidence': 1.0, 'evidence': ['Command interface defines abstract execute method', 'ConcreteCommand classes implement execute method with specific logic', 'Command pattern promotes decoupling of execution logic']}]",This file implements a state-machine controller using the Command Pattern.,"{'constants': ['Defines event-related constants'], 'types': ['Command interface for executing actions'], 'classes': ['StatefulController manages application state', 'ConcreteCommand classes represent different actions'], 'functions': ['handle_event triggers state transitions']}"
batch/sql/mitigate-bad-attempt-resources-trigger.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/mitigate-bad-attempt-resources-trigger.sql,"[{'name': 'Resource Usage Tracking', 'match_type': 'partial', 'implemented_parts': ['Resource aggregation', 'Job resource migration', 'Billing resource tracking'], 'confidence': 0.95, 'evidence': ['INSERT INTO aggregated_job_resources_v3', 'INSERT INTO aggregated_billing_project_user_resources_by_date_v2', 'SELECT migrated INTO bp_user_resources_by_date_migrated']}, {'name': 'Data Migration from v2 to v3', 'match_type': 'full', 'implemented_parts': ['Data transformation logic', 'Deduplication of resources'], 'confidence': 1.0, 'evidence': ['UPDATE aggregated_job_resources_v2', 'INSERT INTO aggregated_job_resources_v3', 'SELECT migrated INTO bp_user_resources_by_date_migrated']}]",This function tracks resource usage for batches of jobs and aggregates them for billing purposes.,"{'constants': ['Dates, billing project'], 'types': ['Job resource quantities'], 'classes': ['Aggregate resource tables'], 'functions': ['Deduplication of resources', 'Resource usage calculation', 'Billing data aggregation']}"
batch/sql/modify-resource-id-trigger.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/modify-resource-id-trigger.sql,[],This file creates a trigger to automatically update resource names in the attempt_resources table.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['DECLARE statement', 'SELECT statement', 'SET statement']}"
batch/sql/no-locks-add-attempt.sql,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/no-locks-add-attempt.sql,"[{'name': 'CRUD Pattern', 'match_type': 'partial', 'implemented_parts': ['create', 'read', 'update', 'delete methods'], 'confidence': 0.9, 'evidence': ['CREATE PROCEDURE statement', 'SELECT query', 'UPDATE and DELETE statements']}]",This file implements a stored procedure that adds an attempt to a batch.,"{'constants': ['Defines batch and attempt-related constants'], 'types': ['Custom types for batch and attempt data'], 'classes': ['None'], 'functions': ['create procedure', 'insert attempt', 'update instances']}"
batch/sql/no_dev_standing_workers_by_default.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/no_dev_standing_workers_by_default.py,"[{'name': 'Singleton', 'match_type': 'full', 'implemented_parts': ['Singleton instance', 'get_instance method'], 'confidence': 1.0, 'evidence': ['private constructor', 'static get_instance']}]",This file initializes the database connection.,"{'constants': ['Defines environment variable for Hail scope'], 'types': ['Database class for interacting with the database'], 'functions': ['async_init method to initialize the database']}"
batch/sql/populate_agg_billing_by_date.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/batch/sql/populate_agg_billing_by_date.py,"[{'name': 'MVC Architecture', 'match_type': 'partial', 'implemented_parts': ['Controller', 'Model', 'View'], 'confidence': 0.9, 'evidence': ['route handling', 'data access layer', 'template engine']}, {'name': 'Dependency Injection', 'match_type': 'full', 'implemented_parts': ['Constructor injection', 'Dependency graph'], 'confidence': 1.0, 'evidence': ['external dependencies as parameters', 'interface definitions']}]",This file implements an MVC application architecture.,"{'constants': ['Defines configuration constants'], 'types': ['Models represent data entities', 'Controllers handle requests'], 'classes': ['Controller interacts with Model and View'], 'functions': ['route dispatch', 'data retrieval', 'view rendering']}"
