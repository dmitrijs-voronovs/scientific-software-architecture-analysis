filename,type,author,repo,version,wiki,url,patterns,purpose,summary
hail/src/main/scala/is/hail/types/physical/stypes/interfaces,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/interfaces,"[{'name': 'Stateful Stream Processing', 'match_type': 'partial', 'implemented_parts': ['Producer dependency', 'getProducer method'], 'confidence': 0.8, 'evidence': ['Producer dependency injected through method', 'getProducer method with method check']}, {'name': 'Trait Definition', 'match_type': 'full', 'implemented_parts': ['Trait declaration with constructor method'], 'confidence': 1.0, 'evidence': ['trait SString extends SType { ... }', 'constructFromString method']}, {'name': 'Value Class Extension', 'match_type': 'partial', 'implemented_parts': ['Hashing method', 'Value class methods'], 'confidence': 0.9, 'evidence': ['hash method overrides default implementation', 'loadLength, loadString methods']}, {'name': 'Unit Type', 'match_type': 'full', 'implemented_parts': ['Empty value representation'], 'confidence': 1.0, 'evidence': ['Case object definition', 'virtualType field']}]",This file defines a stateful stream processing system.,"{'constants': ['Defines constants for stream processing'], 'types': ['Custom types for stream processing'], 'classes': ['SStreamConcreteSettable class manages stateful stream'], 'functions': ['store method for persisting state', 'getProducer method for retrieving producer']}"
hail/src/main/scala/is/hail/types/physical/stypes/primitives/SBoolean.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/primitives/SBoolean.scala,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterable', 'iterator method'], 'confidence': 0.9, 'evidence': ['class Iterable', 'iterator method with loop', 'element access operator']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['Comparable interface', 'compareTo method'], 'confidence': 1.0, 'evidence': ['interface definition', 'compareTo implementation with return value']}]",This file defines an iterable collection of values and provides a way to compare them.,"{'constants': ['Defines comparison-related constants'], 'types': ['Custom types implementing Comparable'], 'classes': ['Iterable class manages collection'], 'functions': ['iterate over elements', 'compare values using compareTo']}"
hail/src/main/scala/is/hail/types/physical/stypes/primitives/SFloat32.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/primitives/SFloat32.scala,"[{'name': 'Iterator pattern', 'match_type': 'partial', 'implemented_parts': ['hasNext method', 'next method'], 'confidence': 0.9, 'evidence': ['class has iterable elements', 'looping over elements']}, {'name': 'Decorator pattern', 'match_type': 'full', 'implemented_parts': ['decorated method', 'decorator class'], 'confidence': 1.0, 'evidence': ['wrapping existing functionality', 'adding additional behavior']}]",This file implements utility functions for iterating over collections and decorating methods with additional behavior.,"{'constants': ['Defines utility constants'], 'types': ['Custom iterator types'], 'classes': ['Decorator class wraps existing methods'], 'functions': ['iterates over elements', 'adds functionality to methods']}"
hail/src/main/scala/is/hail/types/physical/stypes/primitives/SFloat64.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/primitives/SFloat64.scala,"[{'name': 'Stateful Observer Pattern', 'match_type': 'partial', 'implemented_parts': ['Stateful observer class', 'update method with state', 'store/retrieve state'], 'confidence': 0.9, 'evidence': ['Stateful class maintains internal state', 'update method receives state as argument', 'store/retrieve methods for state management']}, {'name': 'Value Object Pattern', 'match_type': 'partial', 'implemented_parts': ['Immutable value class', 'equals/hashCode methods'], 'confidence': 0.8, 'evidence': ['Class has defensive copying in constructor', 'Immutable fields prevent modification', 'Custom equality and hashing implemented']}]",This file implements a stateful notification system using observers.,"{'constants': ['Defines event-related constants'], 'types': ['Custom types for event handling and state'], 'classes': ['SFloat64Value represents immutable state', 'SFloat64Settable allows state modification'], 'functions': ['Methods for notifying observers and managing state']}"
hail/src/main/scala/is/hail/types/physical/stypes/primitives/SInt32.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/primitives/SInt32.scala,"[{'name': 'Comparable', 'match_type': 'partial', 'implemented_parts': ['compare method'], 'confidence': 0.95, 'evidence': ['interface with compare method', 'equality checks in code']}, {'name': 'Iterator', 'match_type': 'full', 'implemented_parts': ['iterator method'], 'confidence': 1.0, 'evidence': ['generic type parameter', 'next and peek methods']}]",This file defines utilities for comparing and iterating over various data structures.,"{'constants': ['Defines constants for comparison'], 'types': ['Custom iterator type'], 'classes': ['Comparison utility class'], 'functions': ['compare method', 'iterate over collections']}"
hail/src/main/scala/is/hail/types/physical/stypes/primitives/SInt64.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/primitives/SInt64.scala,"[{'name': 'Stateful Singleton', 'match_type': 'full', 'implemented_parts': ['Singleton instance', 'get_instance method', 'storage field'], 'confidence': 1.0, 'evidence': ['private storage field', 'constructor initializes field', 'get_instance retrieves field']}, {'name': 'Command Design Pattern', 'match_type': 'partial', 'implemented_parts': ['Command interface', 'ConcreteCommand classes', 'execute method'], 'confidence': 0.9, 'evidence': ['Command interface defines abstract execute method', 'ConcreteCommand classes implement execute with specific actions']}]",This file implements a command design pattern for executing actions.,"{'constants': ['Defines constants related to commands'], 'types': ['Command interface defines abstract execute method', 'ConcreteCommand classes implement specific actions'], 'classes': ['Command interface', 'ConcreteCommand classes'], 'functions': ['execute command method', 'register command functionality']}"
hail/src/main/scala/is/hail/types/physical/stypes/primitives/SPrimitive.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/primitives/SPrimitive.scala,"[{'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Accepter', 'Visitor', 'visit method'], 'confidence': 0.85, 'evidence': ['visit method', 'accepts type with Visitor trait']}]",This file defines the `SPrimitive` type and associated value class for representing physical data types.,"{'constants': [], 'types': ['SPrimitive', 'SPrimitiveValue'], 'classes': ['SPrimitive defines physical data types', 'SPrimitiveValue represents values of physical data types'], 'functions': ['visit method for interacting with elements']}"
hail/src/main/scala/is/hail/types/physical/stypes/primitives,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/primitives,"[{'name': 'Stateful Singleton', 'match_type': 'full', 'implemented_parts': ['Singleton instance', 'get_instance method', 'storage field'], 'confidence': 1.0, 'evidence': ['private storage field', 'constructor initializes field', 'get_instance retrieves field']}, {'name': 'Command Design Pattern', 'match_type': 'partial', 'implemented_parts': ['Command interface', 'ConcreteCommand classes', 'execute method'], 'confidence': 0.9, 'evidence': ['Command interface defines abstract execute method', 'ConcreteCommand classes implement execute with specific actions']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Accepter', 'Visitor', 'visit method'], 'confidence': 0.85, 'evidence': ['visit method', 'accepts type with Visitor trait']}, {'name': 'SPrimitive Data Type', 'match_type': 'partial', 'implemented_parts': ['SPrimitive type', 'SPrimitiveValue'], 'confidence': 0.8, 'evidence': ['defines enumeration of physical data types', 'represents values of physical data types']}]",This file defines utilities for comparing and iterating over various data structures.,"{'constants': ['Defines constants related to comparisons'], 'types': ['Custom iterator type'], 'classes': ['Comparison utility class'], 'functions': ['compare method', 'iterate over collections']}"
hail/src/main/scala/is/hail/types/physical/stypes/SCode.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/SCode.scala,"[{'name': 'ArrayValue', 'match_type': 'partial', 'implemented_parts': ['asLocus', 'asCall', 'asStream', 'asRNGState'], 'confidence': 0.95, 'evidence': ['multiple constructors from different types']}, {'name': 'Settable', 'match_type': 'full', 'implemented_parts': ['store', 'settableTuple'], 'confidence': 1.0, 'evidence': ['newSettable method with custom name and type']}, {'name': 'UnrealizableValue', 'match_type': 'full', 'implemented_parts': [], 'confidence': 1.0, 'evidence': ['sizeToStoreInBytes throws an exception']}]",This file defines utility types for working with values and data structures.,"{'constants': [], 'types': ['Custom types for various data structures'], 'classes': [], 'functions': ['Casting and copying methods for different types']}"
hail/src/main/scala/is/hail/types/physical/stypes/SingleCodeSCode.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/SingleCodeSCode.scala,"[{'name': 'Stateful Stream Processing', 'match_type': 'full', 'implemented_parts': ['Stateful element storage', 'Memory management per element', 'Stream processing API'], 'confidence': 0.95, 'evidence': ['Requires memory management per element', 'Element type definition', 'Stream processing methods']}, {'name': 'PType Reference', 'match_type': 'partial', 'implemented_parts': ['External type reference', 'Loading from memory'], 'confidence': 0.85, 'evidence': ['PType as external reference', 'Cheap loading from memory', 'Virtual type definition']}]",This code implements a stateful streaming engine that manages memory for individual elements.,"{'constants': ['Defines streaming-related constants'], 'types': ['Custom types for stream processing'], 'classes': ['StreamSingleCodeType handles stateful elements'], 'functions': ['Stream processing methods for element management']}"
hail/src/main/scala/is/hail/types/physical/stypes/SType.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes/SType.scala,"[{'name': 'Settable Tuple', 'match_type': 'partial', 'implemented_parts': ['storageType', 'copiedType', 'typeWithRequiredness'], 'confidence': 0.9, 'evidence': ['settable tuple types', 'requiredness flag']}, {'name': 'Deep Copy', 'match_type': 'partial', 'implemented_parts': ['coerceOrCopy method'], 'confidence': 0.8, 'evidence': ['deep copy flag', 'recursive coercion']}]","This file defines a data structure that can be used to store and retrieve values, while also providing mechanisms for deep copying.","{'constants': ['Defines constants related to settable tuples'], 'types': ['Custom types for settable tuples'], 'classes': ['Settable class represents the settable tuple'], 'functions': ['deep copy function']}"
hail/src/main/scala/is/hail/types/physical/stypes,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/stypes,"[{'name': 'Stateful Stream Processing', 'match_type': 'full', 'implemented_parts': ['Stateful element storage', 'Memory management per element', 'Stream processing API'], 'confidence': 0.95, 'evidence': ['Requires memory management per element', 'Element type definition', 'Stream processing methods']}, {'name': 'PType Reference', 'match_type': 'partial', 'implemented_parts': ['External type reference', 'Loading from memory'], 'confidence': 0.85, 'evidence': ['PType as external reference', 'Cheap loading from memory', 'Virtual type definition']}, {'name': 'Settable Tuple', 'match_type': 'partial', 'implemented_parts': ['storageType', 'copiedType', 'typeWithRequiredness'], 'confidence': 0.9, 'evidence': ['settable tuple types', 'requiredness flag']}, {'name': 'Deep Copy', 'match_type': 'partial', 'implemented_parts': ['coerceOrCopy method'], 'confidence': 0.8, 'evidence': ['deep copy flag', 'recursive coercion']}]",This code implements a stateful streaming engine that manages memory for individual elements.,"{'constants': ['Defines streaming-related constants'], 'types': ['Custom types for stream processing'], 'classes': ['StreamSingleCodeType handles stateful elements'], 'functions': ['Stream processing methods for element management']}"
hail/src/main/scala/is/hail/types/physical/package.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/package.scala,"[{'name': 'Type Mapping', 'match_type': 'partial', 'implemented_parts': ['Type inference from physical types'], 'confidence': 0.9, 'evidence': ['case-based mapping of physical types to TypeInfo']}, {'name': 'Default Values', 'match_type': 'partial', 'implemented_parts': ['Determining default values based on type information'], 'confidence': 0.8, 'evidence': ['lookup of default values based on TypeInfo']}]",This file provides utilities for mapping physical data types to their corresponding TypeInfo representation and retrieving default values.,"{'constants': ['Defines type metadata'], 'types': ['Custom type representing TypeInfo'], 'functions': ['typeToTypeInfo', 'defaultValue']}"
hail/src/main/scala/is/hail/types/physical/PArray.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/PArray.scala,"[{'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor pattern', 'accept method'], 'confidence': 0.8, 'evidence': ['Visitor trait', 'accept method with Visitor parameter']}]","This file defines the PArray class, which implements a visitor pattern for physical data types.","{'constants': [], 'types': ['PArray represents physical data'], 'classes': ['PArray extends PArrayBackedContainer'], 'functions': ['elementIterator iterates over elements', 'genNonmissingValue generates non-missing values']}"
hail/src/main/scala/is/hail/types/physical/PArrayBackedContainer.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/PArrayBackedContainer.scala,"[{'name': 'IndexableArray', 'match_type': 'partial', 'implemented_parts': ['SIndexablePointer', 'loadCheapSCode', 'store', 'storeAtAddress', 'loadFromNested', 'unstagedLoadFromNested'], 'confidence': 0.95, 'evidence': ['SIndexablePointer class with load/store methods', 'loadCheapSCode for efficient indexed access', 'multiple store overloads for different scenarios']}, {'name': 'JavaObjectArray', 'match_type': 'partial', 'implemented_parts': ['unstagedStoreJavaObjectAtAddress', 'loadFromNested'], 'confidence': 0.85, 'evidence': ['method to store Java objects at address', 'loadFromNested to access nested elements']}]",This file defines an indexable array data structure for storing and retrieving Java objects.,"{'constants': ['Defines array-related constants'], 'types': ['Custom indexable pointer type'], 'classes': ['IndexableArray class implements the data structure'], 'functions': ['Methods for indexing, storing, and retrieving objects']}"
hail/src/main/scala/is/hail/types/physical/PBaseStruct.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/PBaseStruct.scala,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['iterator method', 'next method'], 'confidence': 0.9, 'evidence': ['for loop', 'iterates over collection', 'current element access']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['compare method'], 'confidence': 1.0, 'evidence': ['interface with compare method', 'equality checks']}]",This file defines utilities for iterating over collections and comparing values.,"{'constants': ['Defines constants related to iteration'], 'types': ['Custom types for iterating'], 'classes': ['Iterator class provides iteration methods'], 'functions': ['compare values for equality', 'iterates over elements']}"
hail/src/main/scala/is/hail/types/physical/PBinary.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/PBinary.scala,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'hasNext method', 'next method'], 'confidence': 0.9, 'evidence': ['class implementing Iterator', 'implements Iterable interface', 'iterator methods']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['compareTo method'], 'confidence': 1.0, 'evidence': ['class with compareTo method', 'implements Comparable interface']}]",This file defines utilities for iterating over collections of data and comparing objects.,"{'constants': ['Defines constants for iteration'], 'types': ['Custom iterators'], 'classes': ['Iterable class', 'Iterator interface'], 'functions': ['compareTo for object comparison']}"
hail/src/main/scala/is/hail/types/physical/PBoolean.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/PBoolean.scala,"[{'name': 'Optional Boolean', 'match_type': 'partial', 'implemented_parts': ['PBooleanOptional class'], 'confidence': 0.95, 'evidence': ['lazy val virtualType: TBoolean.type', 'PBooleanOptional extends PBoolean(false)']}, {'name': 'Required Boolean', 'match_type': 'partial', 'implemented_parts': ['PBooleanRequired class'], 'confidence': 0.95, 'evidence': ['lazy val virtualType: TBoolean.type', 'PBooleanRequired extends PBoolean(true)']}]",This code defines a custom boolean type with optional and required variants.,"{'constants': [], 'types': ['PBoolean type for optional and required boolean values'], 'classes': ['PBoolean class with required and optional variants'], 'functions': []}"
hail/src/main/scala/is/hail/types/physical/PCall.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/PCall.scala,"[{'name': 'Abstract Factory', 'match_type': 'partial', 'implemented_parts': ['Abstract factory method', 'Concrete factory method'], 'confidence': 0.75, 'evidence': ['PCall abstract class', 'TCall concrete type']}]",This file defines an abstract representation of a call to an action.,"{'constants': [], 'types': ['PCall abstract class', 'TCall concrete type'], 'classes': ['PCall abstract class'], 'functions': ['defines an interface for creating concrete calls']}"
hail/src/main/scala/is/hail/types/physical/PCanonicalArray.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/physical/PCanonicalArray.scala,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['iterating over collection', 'next element', 'element access'], 'confidence': 0.9, 'evidence': ['for loop', 'iterator class', 'element index access']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['comparison operators', 'equals method'], 'confidence': 1.0, 'evidence': ['hashcode and equals methods', 'comparison using if-else']}]",This file defines utilities for iterating over collections of data and comparing values.,"{'constants': ['Defines constants for iteration'], 'types': ['Custom iterator class'], 'classes': ['Iterator class facilitates iteration'], 'functions': ['compare values', 'iterate over elements']}"
