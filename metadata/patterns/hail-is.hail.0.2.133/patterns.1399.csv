filename,type,author,repo,version,wiki,url,patterns,purpose,summary
hail/python/hail/experimental/interact.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/interact.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator instance', 'next method'], 'confidence': 0.9, 'evidence': ['class with __iter__ method', 'iterates over elements']}, {'name': 'Comparable', 'match_type': 'partial', 'implemented_parts': ['Comparison methods', 'equals method'], 'confidence': 0.8, 'evidence': ['defines comparison operators', 'supports equality check']}, {'name': 'Decorator', 'match_type': 'full', 'implemented_parts': ['Decorator function', 'wraps another function'], 'confidence': 1.0, 'evidence': ['wraps target function', 'adds new functionality']}]","This file defines utilities for iterating, comparing, and decorating functions.","{'constants': ['Defines utility constants'], 'types': ['Custom types for iterators and decorators'], 'classes': ['Iterator class facilitates iteration'], 'functions': ['wraps functions with decorators', 'supports iteration over collections']}"
hail/python/hail/experimental/ldscore.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/ldscore.py,"[{'name': 'Iterator pattern', 'match_type': 'partial', 'implemented_parts': ['Iterator object', 'hasNext method', 'next method'], 'confidence': 0.9, 'evidence': ['class MyIterator implements Iterator', ""hasNext() method checks if there's more to iterate"", 'next() method retrieves and removes next element']}, {'name': 'Decorator pattern', 'match_type': 'full', 'implemented_parts': ['Decorator class', 'wrapping method', 'enhanced functionality'], 'confidence': 1.0, 'evidence': ['class LoggingDecorator wraps another class', 'wrapping method adds logging functionality', 'enhanced class has logging capabilities']}]",This file implements reusable functionalities using various design patterns.,"{'constants': ['Defines utility constants'], 'types': ['Custom data structures for iterating'], 'classes': ['Iterator class provides iterating capabilities', 'Decorator class enhances functionality'], 'functions': ['Iterating over lists', 'Adding logging functionality', 'Improving reusability and maintainability']}"
hail/python/hail/experimental/ldscsim.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/ldscsim.py,"[{'name': 'Binarization by Prevalence', 'match_type': 'partial', 'implemented_parts': ['Inverse CDF threshold setting', 'Ranking-based threshold determination'], 'confidence': 0.95, 'evidence': ['Annotation of phenotype column with binarization results', 'Use of Gaussian CDF for threshold setting']}]",This function binarizes a phenotype column in a MatrixTable object based on a desired population prevalence.,"{'constants': ['Population prevalence', 'Threshold setting methods'], 'types': ['MatrixTable', 'Expression'], 'classes': ['MatrixTable'], 'functions': ['Binarization function with prevalence control']}"
hail/python/hail/experimental/ld_score_regression.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/ld_score_regression.py,"[{'name': 'LinearModelFitter', 'match_type': 'partial', 'implemented_parts': ['LinearModel', 'fit method', 'coefficients', 'intercept', 'mse'], 'confidence': 0.95, 'evidence': ['linear model class', 'coefficients calculation', 'intercept estimation', 'MSE calculation']}, {'name': 'FeatureImportanceCalculator', 'match_type': 'full', 'implemented_parts': ['FeatureImportance', 'calculate_importance method'], 'confidence': 1.0, 'evidence': ['feature importance class', 'permutation importance algorithm']}]",This file contains classes for fitting linear models and calculating feature importance.,"{'constants': ['Defines constants related to linear models'], 'types': ['LinearModel class for linear regression'], 'classes': ['FeatureImportance class for feature selection'], 'functions': ['fit method to train a model', 'calculate_importance method to assess feature relevance']}"
hail/python/hail/experimental/lens.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/lens.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['__iter__ method', 'next method'], 'confidence': 0.9, 'evidence': ['class has iterable interface', 'iterates over elements']}, {'name': 'Comparable', 'match_type': 'partial', 'implemented_parts': ['__eq__ method'], 'confidence': 0.7, 'evidence': ['class can be compared to others', 'equality check implemented']}]",This file defines a data structure that can be iterated over and compared.,"{'constants': ['Defines constants for comparison'], 'types': ['Custom types with comparison capabilities'], 'classes': ['Data structure class'], 'functions': ['iterates over elements', 'compares elements']}"
hail/python/hail/experimental/loop.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/loop.py,"[{'name': 'Loop Induction', 'match_type': 'partial', 'implemented_parts': ['Iterating over collection', 'Recursive call within loop body', 'Accumulating results'], 'confidence': 0.95, 'evidence': ['contains ir.Recur expression', 'loop parameter type matches recursive call type', 'result assigned to loop variable']}, {'name': 'Tail Recursive Loop', 'match_type': 'full', 'implemented_parts': ['Tail recursion pattern', 'Unifying arguments'], 'confidence': 1.0, 'evidence': ['recursive call appears in tail position', 'arguments of recursive call and loop iteration match', 'unification of arguments before recursive call']}]",This function implements a loop with recursive call for parallel iteration.,"{'constants': [], 'types': ['Custom type for loop parameters'], 'classes': [], 'functions': ['Recursive loop function']}"
hail/python/hail/experimental/pca.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/pca.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterates over collection', 'next method'], 'confidence': 0.9, 'evidence': ['for loop', 'collection type', 'current item variable']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['Comparison methods', 'equals method'], 'confidence': 1.0, 'evidence': ['hash code and compare methods', 'implements interface']}]",This file contains utilities for iterating over collections of data and comparing values.,"{'constants': ['Defines constants for comparison'], 'types': ['Generic collection types'], 'classes': ['Collection utilities class'], 'functions': ['iterate over elements', 'compare values']}"
hail/python/hail/experimental/phase_by_transmission.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/phase_by_transmission.py,"[{'name': 'Trio Analysis', 'match_type': 'full', 'implemented_parts': ['Sample creation from trio entries', 'Column extraction'], 'confidence': 1.0, 'evidence': ['Custom selection of trio entries', 'Key column transformation']}]",This function performs trio-based analysis on a given dataset.,"{'constants': [], 'types': ['Trio MatrixTable'], 'classes': [], 'functions': ['Sample transformation from trio entries']}"
hail/python/hail/experimental/plots.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/plots.py,"[{'name': 'Iterator pattern', 'match_type': 'partial', 'implemented_parts': ['__iter__ method', 'next method'], 'confidence': 0.9, 'evidence': ['class Loop implements __iter__', 'loop.next() iterates over elements']}, {'name': 'Decorator pattern', 'match_type': 'full', 'implemented_parts': ['@decorator decorator function'], 'confidence': 1.0, 'evidence': ['function decorator modifies parameters', 'decorator returns decorated function']}]",This file contains utility functions for iterating over lists and applying decorators to functions.,"{'constants': ['Defines constants for loop behavior'], 'types': ['Custom iterator type'], 'classes': ['Loop class implements iterator protocol'], 'functions': ['decorator function modifies function behavior', 'iterative functions for lists']}"
hail/python/hail/experimental/table_ndarray_utils.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/table_ndarray_utils.py,"[{'name': 'Iterator pattern', 'match_type': 'partial', 'implemented_parts': ['start_select', 'temp_file_name2', 'checkpoint'], 'confidence': 0.9, 'evidence': ['array manipulation with start_select', 'temporary file creation with temp_file_name2', 'checkpointing of the result']}, {'name': 'Trailing window aggregation', 'match_type': 'full', 'implemented_parts': ['trailing_blocks', 'rekey_map', 'read_table', 'group_within_partitions'], 'confidence': 1.0, 'evidence': ['Calculation of trailing blocks', 'Rekeying based on trailing blocks and window size', 'Reading data from temporary file with read_table', 'Grouping data within partitions based on window size']}]",This code implements a notification system using an iterator pattern and trailing window aggregation.,"{'constants': ['None'], 'types': ['Arrays, temporary files'], 'classes': ['None'], 'functions': ['start_select for iterating over an array', 'trailing window aggregation to track changes over time']}"
hail/python/hail/experimental/tidyr.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/tidyr.py,"[{'name': 'Table Separation', 'match_type': 'partial', 'implemented_parts': ['Separate function', 'field splitting'], 'confidence': 0.95, 'evidence': ['Table splitting based on delimiter character or position']}, {'name': 'Field Annotation', 'match_type': 'full', 'implemented_parts': ['Annotation of new fields', 'Field name customization'], 'confidence': 1.0, 'evidence': ['Field splitting results are annotated with custom names']}]",This function separates a field in a Hail table into multiple fields based on a delimiter character or position.,"{'constants': ['None'], 'types': ['Table', 'String', 'Sequence of Strings'], 'classes': ['None'], 'functions': ['separate function']}"
hail/python/hail/experimental/time.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/time.py,[],This function parses time strings from various formats.,{'functions': ['strptime function for time parsing']}
hail/python/hail/experimental/write_multiple.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/write_multiple.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['iterating over collections', 'next and index methods'], 'confidence': 0.9, 'evidence': ['for loop', 'list comprehension', 'iter function']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['comparison operators', 'equals and hashcode methods'], 'confidence': 1.0, 'evidence': ['== and != operators', 'hash table implementation']}]",This file defines utility functions for iterating over collections of data and comparing values.,"{'constants': ['Defines constants for common iterators'], 'types': ['Custom types for iterating over collections'], 'classes': ['Iterator class provides methods for iterating'], 'functions': ['compare values', 'iterate over lists']}"
hail/python/hail/experimental/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/__init__.py,"[{'name': 'LD score regression', 'match_type': 'partial', 'implemented_parts': ['Haplotype frequency estimation', 'LD score calculation', 'Linear regression model fitting'], 'confidence': 0.95, 'evidence': ['haplotype_freq_em function', 'ld_score function', 'ld_score_regression function']}, {'name': 'Phenotype simulation', 'match_type': 'partial', 'implemented_parts': ['Simulating heritability', 'Adding noise'], 'confidence': 0.85, 'evidence': ['simulate_phenotypes function']}, {'name': 'Phase inference', 'match_type': 'partial', 'implemented_parts': ['Phase trio analysis', 'Transmission-based phasing'], 'confidence': 0.9, 'evidence': ['phase_by_transmission function', 'phase_trio_matrix_by_transmission function']}, {'name': 'Haplotype frequency estimation', 'match_type': 'full', 'implemented_parts': ['Expectation-maximization algorithm'], 'confidence': 1.0, 'evidence': ['haplotype_freq_em function']}]",This file contains tools for performing linkage disequilibrium (LD) analysis and simulating phenotypes.,"{'constants': ['Genetic parameters for LD analysis'], 'types': ['Haplotypes, LD scores'], 'classes': ['HaplotypeFrequencyCalculator', 'LDScoreCalculator'], 'functions': ['haplotype_freq_em', 'ld_score', 'ld_score_regression', 'simulate_phenotypes']}"
hail/python/hail/experimental,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental,"[{'name': 'Evidence Extraction', 'match_type': 'partial', 'implemented_parts': ['Comparison operators', 'Hash table implementation'], 'confidence': 0.95, 'evidence': ['== and != operators in file1.py', 'hash table implementation in file2.py']}, {'name': 'LD Score Analysis', 'match_type': 'partial', 'implemented_parts': ['Haplotype frequency estimation', 'LD score calculation', 'Linear regression model fitting'], 'confidence': 0.95, 'evidence': ['haplotype_freq_em function in file3.py', 'ld_score function in file4.py', 'ld_score_regression function in file5.py']}, {'name': 'Phenotype Simulation', 'match_type': 'partial', 'implemented_parts': ['Simulating heritability', 'Adding noise'], 'confidence': 0.85, 'evidence': ['simulate_phenotypes function in file6.py']}, {'name': 'Phase Inference', 'match_type': 'partial', 'implemented_parts': ['Phase trio analysis', 'Transmission-based phasing'], 'confidence': 0.9, 'evidence': ['phase_by_transmission function in file7.py', 'phase_trio_matrix_by_transmission function in file8.py']}, {'name': 'Haplotype Frequency Estimation', 'match_type': 'full', 'implemented_parts': ['Expectation-maximization algorithm'], 'confidence': 1.0, 'evidence': ['haplotype_freq_em function in file9.py']}]",This file contains tools for performing linkage disequilibrium (LD) analysis and simulating phenotypes.,"{'constants': ['Genetic parameters for LD analysis'], 'types': ['Haplotypes, LD scores'], 'classes': ['HaplotypeFrequencyCalculator', 'LDScoreCalculator'], 'functions': ['haplotype_freq_em', 'ld_score', 'ld_score_regression', 'simulate_phenotypes']}"
hail/python/hail/expr/aggregators/aggregators.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/expr/aggregators/aggregators.py,"[{'name': 'Fold Aggregation', 'match_type': 'full', 'implemented_parts': ['Initial value, sequence operation, combination operation'], 'confidence': 1.0, 'evidence': ['`_fold` function usage with custom operators']}, {'name': 'Custom Aggregation', 'match_type': 'partial', 'implemented_parts': ['Fold function with custom operators'], 'confidence': 0.9, 'evidence': ['`hl.agg.fold` function definition with specific operators']}]",This file defines a custom aggregation function using the `fold` function.,"{'constants': [], 'types': ['Custom functions for aggregation'], 'classes': [], 'functions': ['`fold` function for arbitrary aggregation']}"
hail/python/hail/expr/aggregators/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/expr/aggregators/__init__.py,"[{'name': 'Aggregation Functions', 'match_type': 'partial', 'implemented_parts': ['Statistical aggregations'], 'confidence': 0.95, 'evidence': ['count function', 'mean function', 'max function']}, {'name': 'Data Manipulation', 'match_type': 'full', 'implemented_parts': ['Filter', 'Group By', 'Downsample'], 'confidence': 1.0, 'evidence': ['filter function definition', 'group by method implementation', 'downsample function signature']}]",This file provides utility functions for aggregating and manipulating data.,"{'constants': ['Defined constants for aggregation'], 'types': ['Custom types for aggregated data'], 'classes': ['Aggregate base class'], 'functions': ['Aggregate functions for various statistics']}"
hail/python/hail/expr/aggregators,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/expr/aggregators,"[{'name': 'Custom Aggregation', 'match_type': 'partial', 'implemented_parts': ['Fold function with custom operators'], 'confidence': 0.9, 'evidence': ['`hl.agg.fold` function definition with specific operators']}, {'name': 'Aggregation Functions', 'match_type': 'partial', 'implemented_parts': ['Statistical aggregations'], 'confidence': 0.95, 'evidence': ['count function', 'mean function', 'max function']}, {'name': 'Data Manipulation', 'match_type': 'full', 'implemented_parts': ['Filter', 'Group By', 'Downsample'], 'confidence': 1.0, 'evidence': ['filter function definition', 'group by method implementation', 'downsample function signature']}]",This directory defines custom aggregation functions and utility functions for aggregating and manipulating data.,"{'constants': ['Defined constants for aggregation'], 'types': ['Custom types for aggregated data'], 'classes': ['Aggregate base class'], 'functions': ['Aggregate functions for various statistics']}"
hail/python/hail/expr/expressions/base_expression.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/expr/expressions/base_expression.py,"[{'name': 'StatefulIterator', 'match_type': 'partial', 'implemented_parts': ['Stateful iterators', 'fetch method', 'update method'], 'confidence': 0.9, 'evidence': ['Stateful Iteator class', 'fetch updates data', 'update state based on input']}, {'name': 'Coroutine', 'match_type': 'full', 'implemented_parts': ['Coroutine class', 'run method', 'suspend method'], 'confidence': 1.0, 'evidence': ['Coroutine state machine', 'run method initiates execution', 'suspend method saves state']}]",This file implements a stateful iterator pattern for fetching and processing data incrementally.,"{'constants': ['Defines constants for iterator state'], 'types': ['Stateful iterator class'], 'classes': ['StatefulIterator class manages state'], 'functions': ['fetch fetches new data', 'update updates internal state', 'run initiates and manages coroutine']}"
hail/python/hail/expr/expressions/expression_typecheck.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/expr/expressions/expression_typecheck.py,"[{'name': 'Comparable', 'match_type': 'partial', 'implemented_parts': ['Comparison methods', 'equals method'], 'confidence': 0.9, 'evidence': ['interface Comparable', 'overridden equals method']}, {'name': 'Iterator', 'match_type': 'full', 'implemented_parts': ['Iteration methods', 'iterator class'], 'confidence': 1.0, 'evidence': ['generic iterator interface', 'iterator class with next and peek methods']}]",This file defines utilities for comparing and iterating over data structures.,"{'constants': ['Defines constants for comparison'], 'types': ['Custom iterator type'], 'classes': ['Iterator class for traversing collections'], 'functions': ['compare functions for various types', 'iterate over collections']}"
