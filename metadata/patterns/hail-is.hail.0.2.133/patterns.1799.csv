filename,type,author,repo,version,wiki,url,patterns,purpose,summary
hail/python/test/hail/genetics,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/genetics,"[{'name': 'Exception Handling', 'match_type': 'full', 'implemented_parts': ['FatalError handling', 'Custom resource loading'], 'confidence': 0.9, 'evidence': ['exception handling with FatalError', 'custom resource loading']}, {'name': 'Reference Genome Management', 'match_type': 'full', 'implemented_parts': ['ReferenceGenome class', 'locus_from_global_position method'], 'confidence': 1.0, 'evidence': ['custom reference genome definition', 'position conversion from global to locus']}, {'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['Centralizes communication', 'Mediator role', 'notify method'], 'confidence': 1.0, 'evidence': ['Centralizes communication between Colleagues', 'Colleagues communicate through the Mediator']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['State capture', 'Memento pattern elements'], 'confidence': 0.7, 'evidence': ['Originator creates Memento', 'Caretaker stores and restores Memento']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Adds operations', 'Visitor pattern elements'], 'confidence': 0.8, 'evidence': ['Visitor adds operations to Element', 'Element accepts Visitors']}]",This file provides functionalities for managing custom reference genomes and interacting with them.,"{'constants': ['Defines custom reference genome resource'], 'types': ['Custom reference genome class'], 'classes': ['ReferenceGenome class manages reference genomes'], 'functions': ['load_matrix_table reads matrix table from resource', 'locus_from_global_position converts global positions to locus']}"
hail/python/test/hail/ggplot/test_ggplot.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/ggplot/test_ggplot.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['iterator method', 'current element access', 'next element access'], 'confidence': 0.9, 'evidence': ['for loop with iterator', 'current element assigned to variable', 'next element called until end']}, {'name': 'Data Structure', 'match_type': 'full', 'implemented_parts': ['array or list data structure', 'insertion and deletion methods'], 'confidence': 1.0, 'evidence': ['data structure definition with size', 'element access using index', 'insertion and deletion methods']}]",This file defines a data structure that efficiently stores and retrieves elements.,"{'constants': ['Defines data structure capacity'], 'types': ['Custom data structure type'], 'classes': ['Data structure class'], 'functions': ['insert inserts elements', 'delete removes elements', 'get retrieves elements']}"
hail/python/test/hail/ggplot/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/ggplot/__init__.py,"[{'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['Mediator roles, relationships, methods'], 'confidence': 1.0, 'evidence': ['roles: Mediator, Colleague, centralizes communication', 'methods: mediate, notify']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator, Memento roles, relationships'], 'confidence': 0.8, 'evidence': ['roles: Originator, Memento, Caretaker', 'creation and restoration of state']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor, Element roles, accept method'], 'confidence': 0.7, 'evidence': ['roles: Visitor, Element, Operation', 'accept method for applying operations']}]",This file defines core components for facilitating communication and state management in a decentralized system.,"{'constants': ['Defines communication and state-related constants'], 'types': ['Custom types for communication and state management'], 'classes': ['Mediator centralizes communication', 'Memento captures system state'], 'functions': ['Mediator methods for communication', 'Memento methods for state management']}"
hail/python/test/hail/ggplot,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/ggplot,"[{'name': 'Data Structure', 'match_type': 'full', 'implemented_parts': ['array or list data structure', 'insertion and deletion methods'], 'confidence': 1.0, 'evidence': ['data structure definition with size', 'element access using index', 'insertion and deletion methods']}, {'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['Mediator roles, relationships, methods'], 'confidence': 1.0, 'evidence': ['roles: Mediator, Colleague, centralizes communication', 'methods: mediate, notify']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator, Memento roles, relationships'], 'confidence': 0.8, 'evidence': ['roles: Originator, Memento, Caretaker', 'creation and restoration of state']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor, Element roles, accept method'], 'confidence': 0.7, 'evidence': ['roles: Visitor, Element, Operation', 'accept method for applying operations']}]",This file defines core components for facilitating communication and state management in a decentralized system.,"{'constants': ['Defines communication and state-related constants'], 'types': ['Custom types for communication and state management'], 'classes': ['Mediator centralizes communication', 'Memento captures system state'], 'functions': ['Mediator methods for communication', 'Memento methods for state management']}"
hail/python/test/hail/linalg/test_linalg.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/linalg/test_linalg.py,"[{'name': 'Closure', 'match_type': 'partial', 'implemented_parts': ['lambda function', 'capture context'], 'confidence': 0.9, 'evidence': ['lambda expression', 'accessing outer variables']}, {'name': 'Iterator', 'match_type': 'full', 'implemented_parts': ['iterator class', 'next method'], 'confidence': 1.0, 'evidence': ['implements iterating protocol', 'supports iteration over collections']}]",This code utilizes lambda functions and iterators to perform repeated tasks efficiently.,"{'constants': ['Defines constants for iteration'], 'types': ['Custom iterator type'], 'classes': ['Iterator class manages iteration process'], 'functions': ['lambda functions capture context', 'next method iterates over elements']}"
hail/python/test/hail/linalg/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/linalg/__init__.py,"[{'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['Centralizes communication', 'Mediator role', 'communication relationships'], 'confidence': 0.98, 'evidence': ['Centralizes communication between Colleagues', 'Colleagues communicate through Mediator']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['State capturing', 'Memento pattern elements'], 'confidence': 0.85, 'evidence': ['Originator creates Memento', 'Caretaker stores and restores Memento']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Dynamic dispatch', 'Visitor pattern elements'], 'confidence': 0.78, 'evidence': ['Visitor adds operations', 'Element accepts Visitors']}]",This file implements communication and state management patterns.,"{'constants': ['Defines communication-related constants'], 'types': ['Custom types for communication and state management'], 'classes': ['Mediator facilitates communication', 'Memento captures state'], 'functions': ['Mediate between colleagues', 'Capture and restore state', 'Add operations dynamically']}"
hail/python/test/hail/linalg,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/linalg,"[{'name': 'Closure', 'match_type': 'partial', 'implemented_parts': ['lambda function', 'capture context'], 'confidence': 0.9, 'evidence': ['lambda expression', 'accessing outer variables']}, {'name': 'Iterator', 'match_type': 'full', 'implemented_parts': ['iterator class', 'next method'], 'confidence': 1.0, 'evidence': ['implements iterating protocol', 'supports iteration over collections']}, {'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['Centralizes communication', 'Mediator role', 'communication relationships'], 'confidence': 0.98, 'evidence': ['Centralizes communication between Colleagues', 'Colleagues communicate through Mediator']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['State capturing', 'Memento pattern elements'], 'confidence': 0.85, 'evidence': ['Originator creates Memento', 'Caretaker stores and restores Memento']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Dynamic dispatch', 'Visitor pattern elements'], 'confidence': 0.78, 'evidence': ['Visitor adds operations', 'Element accepts Visitors']}]",This code utilizes lambda functions and iterators to perform repeated tasks efficiently.,"{'constants': ['Defines constants for iteration'], 'types': ['Custom iterator type'], 'classes': ['Iterator class manages iteration process'], 'functions': ['lambda functions capture context', 'next method iterates over elements']}"
hail/python/test/hail/matrixtable/test_file_formats.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/matrixtable/test_file_formats.py,"[{'name': 'Resource Management', 'match_type': 'partial', 'implemented_parts': ['Resource directory listing', 'File contents retrieval'], 'confidence': 0.9, 'evidence': ['fs.listfiles', 'contents_if_present function', 'async iteration over directory contents']}, {'name': 'Backward Compatibility', 'match_type': 'partial', 'implemented_parts': ['Table reading functionality', 'Data selection from older versions'], 'confidence': 0.8, 'evidence': ['read_matrix_table and read_table functions', 'select_globals, select_rows, select_cols methods']}]",This code manages resources by listing directory contents and reading files from various versions.,"{'constants': ['Resource directory path'], 'types': ['Data structures for resource versions'], 'classes': ['Functions for reading tables and matrices'], 'functions': ['Collecting paths of resources from different versions']}"
hail/python/test/hail/matrixtable/test_grouped_matrix_table.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/matrixtable/test_grouped_matrix_table.py,"[{'name': 'Iterator Pattern', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'Concrete Iterator class'], 'confidence': 0.9, 'evidence': [""interface with 'iterator' method"", ""class implements 'Iterator' interface"", ""use of 'next' and 'current' attributes""]}, {'name': 'Decorator Pattern', 'match_type': 'partial', 'implemented_parts': ['Decorator class', 'Method decorator pattern'], 'confidence': 0.8, 'evidence': ['decorator class receives original object as argument', 'decorator adds additional functionality to method', 'original method still accessible through decorator']}]",This file defines an iterator pattern for iterating over collections of data.,"{'constants': ['Defines constants for iterator state'], 'types': ['Custom iterator type'], 'classes': ['Iterator interface defines iteration contract', 'Concrete Iterator class implements interface'], 'functions': ['Iterator methods for traversing collection']}"
hail/python/test/hail/matrixtable/test_matrix_table.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/matrixtable/test_matrix_table.py,"[{'name': 'Unique User IDs', 'match_type': 'full', 'implemented_parts': ['assert_unique_uids method'], 'confidence': 1.0, 'evidence': ['assert statement checks for unique user IDs']}, {'name': 'Upcasting Tuples', 'match_type': 'partial', 'implemented_parts': ['annotate_cols, explode_cols methods'], 'confidence': 0.9, 'evidence': ['column annotation and explosion based on tuple elements']}, {'name': 'Sample Entries', 'match_type': 'partial', 'implemented_parts': ['sample method'], 'confidence': 0.8, 'evidence': ['randomly selects a subset of entries from the table']}, {'name': 'Struct of Arrays Encoding', 'match_type': 'full', 'implemented_parts': ['custom encoding of structural data'], 'confidence': 1.0, 'evidence': ['modification of metadata and checkpointing process']}]",This code defines and analyzes a range matrix table.,"{'constants': [], 'types': ['Custom data structures for matrix tables'], 'classes': [], 'functions': ['Methods for manipulation and analysis of matrix tables']}"
hail/python/test/hail/matrixtable/test_matrix_table_from_parts.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/matrixtable/test_matrix_table_from_parts.py,"[{'name': 'Data Assertation', 'match_type': 'partial', 'implemented_parts': ['assert_no_globals', 'assert_matches_rows', 'assert_matches_cols', 'assert_matches_entries'], 'confidence': 0.95, 'evidence': ['pytest assertions', 'matrix table construction from parts']}, {'name': 'Matrix Table Construction', 'match_type': 'full', 'implemented_parts': ['from_parts method'], 'confidence': 1.0, 'evidence': ['Explicit matrix table construction from rows, cols, and entries']}]",This file defines unit tests for a MatrixTable data structure.,"{'constants': [], 'types': ['MatrixTable class'], 'classes': ['MatrixTable class'], 'functions': ['from_parts method']}"
hail/python/test/hail/matrixtable/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/matrixtable/__init__.py,"[{'name': 'Mediator', 'match_type': 'partial', 'implemented_parts': ['Centralizes communication', 'mediates method'], 'confidence': 0.75, 'evidence': ['centralizes communication', ""methods like 'mediate'""]}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Creates snapshots', 'saves state'], 'confidence': 0.6, 'evidence': ['save_state', 'create_memento methods']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Adds operations', 'accepts visitors'], 'confidence': 0.8, 'evidence': ['accept method', 'visit operations']}]",This file defines core data structures and functions for manipulating and visualizing Hail tables.,"{'constants': ['Defines constants related to Hail tables'], 'types': ['Data structures for Hail tables'], 'classes': ['MatrixTable represents a Hail table'], 'functions': ['Functions for manipulating Hail tables']}"
hail/python/test/hail/matrixtable,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/matrixtable,"[{'name': 'Data Assertation', 'match_type': 'partial', 'implemented_parts': ['assert_no_globals', 'assert_matches_rows', 'assert_matches_cols', 'assert_matches_entries'], 'confidence': 0.95, 'evidence': ['pytest assertions', 'matrix table construction from parts']}, {'name': 'Matrix Table Construction', 'match_type': 'full', 'implemented_parts': ['from_parts method'], 'confidence': 1.0, 'evidence': ['Explicit matrix table construction from rows, cols, and entries']}]",This file defines unit tests for a MatrixTable data structure.,"{'constants': [], 'types': ['MatrixTable class'], 'classes': ['MatrixTable class'], 'functions': ['from_parts method']}"
hail/python/test/hail/methods/relatedness/test_identity_by_descent.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/methods/relatedness/test_identity_by_descent.py,"[{'name': 'Identity by Descent', 'match_type': 'full', 'implemented_parts': ['Matching genotypes', 'IBD calculation', 'Quality control checks'], 'confidence': 1.0, 'evidence': ['PLINK comparison with IBD estimates', 'Hail validation against genotype data', 'Unit tests for identity-by-descent calculations']}, {'name': 'Handling Missing Values', 'match_type': 'partial', 'implemented_parts': ['Handling genotype missing values', 'Imputing missing values', 'Filtering outliers'], 'confidence': 0.95, 'evidence': ['Ancestors with missing values are excluded', 'Multiple imputation methods are implemented', 'Quality control metrics track missing value handling']}]",This code implements the Identity by Descent (IBD) algorithm for estimating pairwise relatedness among individuals.,"{'constants': ['Thresholds for minimum and maximum allele frequency'], 'types': ['Genotype data with missing values'], 'classes': ['Haplotype object represents individuals'], 'functions': ['Calculate IBD scores', 'Filter individuals based on quality control']}"
hail/python/test/hail/methods/relatedness/test_pc_relate.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/methods/relatedness/test_pc_relate.py,"[{'name': 'Self-kin inclusion in PCRelate', 'match_type': 'partial', 'implemented_parts': ['Including self-kin in PCRelate statistics', 'Filtering out self-kin from results', 'Comparing results with and without self-kin'], 'confidence': 0.9, 'evidence': ['PCRelate statistics with `include_self_kinship=True`', 'Filtering rows with `sample_idx` equal to `j.sample_idx`', 'Comparison of results with and without self-kin filtering']}, {'name': 'Reproducing PCRelate Issue 5263', 'match_type': 'full', 'implemented_parts': ['Simulating genotype selection', 'Comparing PCRelate results with and without genotype selection', 'Testing with different genotypes and selection probabilities'], 'confidence': 1.0, 'evidence': ['Code simulating genotype selection', 'Comparison of PCRelate outputs with different genotype sampling strategies', 'Verification of results with expected output']}]",This code tests and demonstrates aspects of the PCRelate algorithm related to self-kin inclusion and genotype selection.,"{'constants': ['Model parameters for simulations'], 'types': ['Genotype data, statistical measures'], 'classes': ['Balding-Nichols model', 'PCRelate algorithm'], 'functions': ['Statistical analysis of kinship', 'Simulation of genotype selection']}"
hail/python/test/hail/methods/relatedness/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/methods/relatedness/__init__.py,"[{'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['centralizes communication', 'mediates between colleagues'], 'confidence': 1.0, 'evidence': ['centralizes communication between Colleagues', 'Colleagues communicate through the Mediator']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['state capture', 'state restoration'], 'confidence': 0.8, 'evidence': ['Originator creates Memento', 'Caretaker stores and restores Memento']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['adds operations', 'accepts visitors'], 'confidence': 0.7, 'evidence': ['Visitor adds operations to Element', 'Element accepts Visitors']}]",This file implements communication and state management patterns.,"{'constants': ['Defines communication-related constants'], 'types': ['Custom types for communication and state management'], 'classes': ['Mediator facilitates communication', 'Memento captures state'], 'functions': ['Mediate between colleagues', 'Capture and restore state', 'Add operations dynamically']}"
hail/python/test/hail/methods/relatedness,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/methods/relatedness,"[{'name': 'Mediator', 'match_type': 'full', 'implemented_parts': ['centralizes communication', 'mediates between colleagues'], 'confidence': 1.0, 'evidence': ['centralizes communication between Colleagues', 'Colleagues communicate through the Mediator']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['state capture', 'state restoration'], 'confidence': 0.8, 'evidence': ['Originator creates Memento', 'Caretaker stores and restores Memento']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['adds operations', 'accepts visitors'], 'confidence': 0.7, 'evidence': ['Visitor adds operations to Element', 'Element accepts Visitors']}]",This file implements communication and state management patterns.,"{'constants': ['Defines communication-related constants'], 'types': ['Custom types for communication and state management'], 'classes': ['Mediator facilitates communication', 'Memento captures state'], 'functions': ['Mediate between colleagues', 'Capture and restore state', 'Add operations dynamically']}"
hail/python/test/hail/methods/test_family_methods.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/methods/test_family_methods.py,"[{'name': 'Filtering by Predicate', 'match_type': 'partial', 'implemented_parts': ['filter_rows method', 'predicate based on u column', 'count of rows violating the predicate'], 'confidence': 0.9, 'evidence': ['rows with u column violation are counted', 'count is compared to zero to determine violation']}, {'name': 'de novo Calling', 'match_type': 'full', 'implemented_parts': ['de_novo function', 'Pedigree and VCF data input', 'prioritization of results', 'filtering based on kid_id, dad_id, mom_id'], 'confidence': 1.0, 'evidence': ['Matching with reference truth table', 'Validation of confidence and de novo probability', 'Outer join to combine results with truth table']}]",This code involves filtering rows based on a user-defined predicate and performing de novo calling to identify genetic mutations.,"{'constants': ['ESP value for de novo calling'], 'types': ['Pedigree, VCF data structures'], 'classes': ['de_novoResult class holds de novo findings'], 'functions': ['de_novo function performs de novo calling', 'filtering methods select relevant rows']}"
hail/python/test/hail/methods/test_impex.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/methods/test_impex.py,"[{'name': 'Matrix row key transformation', 'match_type': 'partial', 'implemented_parts': ['Key row transformation by index', 'Row index access'], 'confidence': 0.9, 'evidence': ['`key_rows_by` method with index argument', 'row index access in `write` method']}, {'name': 'Partial row key extraction', 'match_type': 'partial', 'implemented_parts': ['Row key extraction by arbitrary criteria', 'Row filtering'], 'confidence': 0.8, 'evidence': ['`key_rows_by` method with arbitrary key selection criteria', 'rows() method with filtering criteria']}, {'name': 'Intervals handling in read operations', 'match_type': 'full', 'implemented_parts': ['Interval-aware reading', 'Row counting'], 'confidence': 1.0, 'evidence': ['`_intervals` argument in read methods', '`_force_count_rows` and `_force_count` methods']}]",This file implements utility functions for reading and manipulating data from Avro files.,"{'constants': ['None'], 'types': ['Custom types for Avro data structures'], 'classes': ['DatumReader class for Avro file reading'], 'functions': ['`read_matrix_table` function for reading Avro tables with custom key transformations']}"
hail/python/test/hail/methods/test_king.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/test/hail/methods/test_king.py,"[{'name': 'Filtering based on failures', 'match_type': 'partial', 'implemented_parts': ['Filtering rows based on failures'], 'confidence': 0.9, 'evidence': ['hl.king function uses expected.filter with failure criterion']}, {'name': 'King statistic implementation', 'match_type': 'full', 'implemented_parts': ['King statistic calculation'], 'confidence': 1.0, 'evidence': ['hl.king function utilizes kinship matrix to compute King statistic']}]",This code utilizes the King statistic for kinship inference.,"{'constants': ['Threshold for filtering failing rows'], 'types': ['Genotype data, kinship matrix'], 'classes': ['King statistic calculation functions'], 'functions': ['King statistic computation', 'Filtering rows based on failures']}"
