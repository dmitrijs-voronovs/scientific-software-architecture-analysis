filename,type,author,repo,version,wiki,url,patterns,purpose,summary
hail/src/main/scala/is/hail/types/virtual/TBinary.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TBinary.scala,"[{'name': 'Case Object', 'match_type': 'full', 'implemented_parts': ['Type definition', 'toPretty method', '_typeCheck method'], 'confidence': 1.0, 'evidence': ['case object definition', 'method for human-readable representation', 'type checking function']}]",Defines a custom type representing a binary value.,"{'constants': [], 'types': ['TBinary represents a binary value'], 'classes': [], 'functions': ['toPretty converts to human-readable string', '_typeCheck checks type compatibility']}"
hail/src/main/scala/is/hail/types/virtual/TBoolean.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TBoolean.scala,"[{'name': 'Case Class', 'match_type': 'full', 'implemented_parts': ['Companion object', 'apply method'], 'confidence': 1.0, 'evidence': ['class TBoolean', 'object TBoolean', 'apply(s: String): Annotation']}, {'name': 'Type Extension', 'match_type': 'partial', 'implemented_parts': ['_toPretty method', '_typeCheck method'], 'confidence': 0.9, 'evidence': ['_toPretty returns human-readable name', '_typeCheck checks data type']}, {'name': 'Annotation Handling', 'match_type': 'partial', 'implemented_parts': ['_showStr method', 'parse method'], 'confidence': 0.8, 'evidence': ['_showStr formats annotation as True/False', 'parse method converts string to Annotation']}]",This file defines a custom type called TBoolean and associated annotations for handling Boolean values.,"{'constants': ['None'], 'types': ['TBoolean custom type'], 'classes': ['TBoolean type'], 'functions': ['parse converts string to annotation', '_toPretty formats annotation']}"
hail/src/main/scala/is/hail/types/virtual/TCall.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TCall.scala,"[{'name': 'Case Class', 'match_type': 'full', 'implemented_parts': ['Primary constructor', 'equals and hashcode methods'], 'confidence': 1.0, 'evidence': ['case object TCall', 'constructor takes Int argument', 'overridden equals and hashcode']}, {'name': 'Type Representation', 'match_type': 'partial', 'implemented_parts': ['representation field', 'typeCheck method'], 'confidence': 0.9, 'evidence': ['representation field initialized to TInt32', 'typeCheck method checks if value is Int']}]",This file defines a type called TCall which represents a call to an annotation.,"{'constants': [], 'types': ['TCall type representing calls'], 'classes': [], 'functions': ['toPretty method for human-readable representation']}"
hail/src/main/scala/is/hail/types/virtual/TContainer.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TContainer.scala,"[{'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['AcceptVisitor', 'visit method'], 'confidence': 0.8, 'evidence': ['visit method with accept parameter', 'Element class accepts visitors']}]",This file defines a container class that can accept visitor objects and perform actions based on their visit.,"{'constants': [], 'types': ['TContainer', 'Annotation'], 'classes': ['TContainer'], 'functions': ['valuesSimilar', 'arrayElementsRepr']}"
hail/src/main/scala/is/hail/types/virtual/TDict.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TDict.scala,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterating over collections', 'next/current methods'], 'confidence': 0.9, 'evidence': ['for loop', 'iterator interface', 'current element access']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['Comparison methods', 'equals/hashCode'], 'confidence': 1.0, 'evidence': ['class implements Comparable', 'comparison logic', 'hash code generation']}]",This file defines utility functions for iterating over collections of data and comparing objects.,"{'constants': ['Defines utility constants'], 'types': ['Custom iterators'], 'classes': ['Comparable class for object comparisons'], 'functions': ['iterate over lists', 'compare objects', 'hash code generation']}"
hail/src/main/scala/is/hail/types/virtual/TFloat32.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TFloat32.scala,"[{'name': 'Stateful Actor', 'match_type': 'partial', 'implemented_parts': ['State management', 'receive method'], 'confidence': 0.9, 'evidence': ['class State', 'receive messages', 'state update logic']}, {'name': 'Serialization', 'match_type': 'full', 'implemented_parts': ['Serialization methods', 'deserialization methods'], 'confidence': 1.0, 'evidence': ['read and write methods for TFloat32', 'implicit serialization']}]",This file defines a mutable and serializable data type for representing floating-point numbers.,"{'constants': ['None'], 'types': ['Custom type for representing floats'], 'classes': ['TFloat32 class provides serialization'], 'functions': ['Serialization and deserialization methods for TFloat32']}"
hail/src/main/scala/is/hail/types/virtual/TFloat64.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TFloat64.scala,"[{'name': 'Numeric type handling', 'match_type': 'partial', 'implemented_parts': ['toPretty method', 'pyString method', 'typeCheck method'], 'confidence': 0.9, 'evidence': ['Scala class Double', 'reflection API']}, {'name': 'Value comparison and tolerance', 'match_type': 'partial', 'implemented_parts': ['valuesSimilar method'], 'confidence': 0.8, 'evidence': ['Custom tolerance parameter', 'absolute and relative tolerance options']}]",This file defines a virtual numeric type with specific handling for `Double` values.,"{'constants': ['None'], 'types': ['TFloat64 custom numeric type'], 'classes': ['None'], 'functions': ['Methods for handling and comparing `Double` values']}"
hail/src/main/scala/is/hail/types/virtual/TInt32.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TInt32.scala,"[{'name': 'Case Class', 'match_type': 'full', 'implemented_parts': ['Primary constructor', 'equality method'], 'confidence': 1.0, 'evidence': ['`case object TInt32 extends TIntegral { ... }`', '`def equals(that: Any): Boolean = this == that`']}, {'name': 'Custom Annotation', 'match_type': 'partial', 'implemented_parts': ['`genNonmissingValue` method'], 'confidence': 0.9, 'evidence': ['`def genNonmissingValue(sm: HailStateManager): Gen[Annotation] = arbitrary[Int]`']}]",This file defines a type representing an integer value and associated metadata.,"{'constants': [], 'types': ['`TInt32` type for integer'], 'classes': ['`TInt32` class represents the integer type'], 'functions': ['Various methods for handling and representing integer values']}"
hail/src/main/scala/is/hail/types/virtual/TInt64.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TInt64.scala,"[{'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['AcceptVisitor method', 'visit method'], 'confidence': 0.9, 'evidence': ['visit method takes a Visitor parameter', 'AcceptVisitor method is defined in TInt64 class']}]",This file defines a virtual data type TInt64 that uses the Visitor Pattern for type-specific operations.,"{'constants': [], 'types': ['Virtual data type TInt64'], 'classes': ['TInt64 class'], 'functions': ['visit method for type-specific operations', 'AcceptVisitor method for visitor registration']}"
hail/src/main/scala/is/hail/types/virtual/TIntegral.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TIntegral.scala,"[{'name': 'Marker', 'match_type': 'partial', 'implemented_parts': ['Originator', 'Marker'], 'confidence': 0.8, 'evidence': ['create marker method', 'marker used as state identifier']}]",This file defines an abstract class representing a virtual integer type.,"{'classes': ['TIntegral abstract class'], 'functions': ['extends TNumeric abstract class']}"
hail/src/main/scala/is/hail/types/virtual/TInterval.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TInterval.scala,"[{'name': 'Interval type', 'match_type': 'partial', 'implemented_parts': ['Point type as children', 'start/end attributes'], 'confidence': 0.9, 'evidence': ['Type definition with children', 'attributes named start and end']}, {'name': 'Point type is immutable', 'match_type': 'partial', 'implemented_parts': ['Immutability methods not implemented'], 'confidence': 0.8, 'evidence': ['no define methods like set or update']}]",This file defines an Interval type for representing ranges of values.,"{'constants': [], 'types': ['Custom type for representing intervals'], 'classes': [], 'functions': []}"
hail/src/main/scala/is/hail/types/virtual/TIterable.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TIterable.scala,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Abstract class with `elementType` method', 'FastSeq collection'], 'confidence': 0.8, 'evidence': ['`children` method iterates over elements', '`elementType` returns element type']}]",This file defines an abstract class for iterating over elements of a certain type.,"{'constants': [], 'types': ['TIterable abstract class'], 'classes': ['TIterable'], 'functions': ['elementType', 'children']}"
hail/src/main/scala/is/hail/types/virtual/TLocus.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TLocus.scala,"[{'name': 'Type Definition', 'match_type': 'partial', 'implemented_parts': ['TLocus class'], 'confidence': 0.9, 'evidence': ['TStruct representation', 'rgName field']}, {'name': 'Representation Retrieval', 'match_type': 'partial', 'implemented_parts': ['schemaFromRG function'], 'confidence': 0.8, 'evidence': ['Option[String] argument', 'TLocus type return']}]",This file defines the TLocus type to represent locus information and provides functions for retrieving its representation based on reference genomes.,"{'constants': ['None'], 'types': ['Custom type for locus representation'], 'classes': ['TLocus class'], 'functions': ['schemaFromRG function to retrieve representation']}"
hail/src/main/scala/is/hail/types/virtual/TNDArray.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TNDArray.scala,"[{'name': 'Iterator pattern', 'match_type': 'partial', 'implemented_parts': ['data traversal', 'element access methods'], 'confidence': 0.9, 'evidence': ['data.iterator method', 'element access through index or iterator']}, {'name': 'Nested data structure', 'match_type': 'full', 'implemented_parts': ['recursive data representation', 'data manipulation methods'], 'confidence': 1.0, 'evidence': ['recursive data structure definition', 'nested data access methods']}]",This file represents a data structure with nested elements and provides methods for iterating and manipulating the data.,"{'constants': ['Defines data-related constants'], 'types': ['Custom data types for nested elements'], 'classes': ['Row class represents the nested data structure'], 'functions': ['ndarray method for printing nested data']}"
hail/src/main/scala/is/hail/types/virtual/TNumeric.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TNumeric.scala,"[{'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor pattern', 'visit method'], 'confidence': 0.8, 'evidence': ['abstract class TNumeric', 'visit method takes Type as parameter']}]",This file defines an abstract class TNumeric and provides a visit method for handling type-specific operations.,"{'classes': ['TNumeric abstract class'], 'functions': ['visit method for type-specific operations']}"
hail/src/main/scala/is/hail/types/virtual/TRNGState.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TRNGState.scala,"[{'name': 'Case Object', 'match_type': 'full', 'implemented_parts': ['Type definition with companion object', 'toPretty method', 'genNonmissingValue method'], 'confidence': 1.0, 'evidence': ['case object TRNGState', 'toPretty method signature', 'genNonmissingValue method definition']}]",This file defines a case object representing a random number generator state.,"{'constants': [], 'types': ['TRNGState type'], 'classes': [], 'functions': ['toPretty method', 'genNonmissingValue method']}"
hail/src/main/scala/is/hail/types/virtual/TSet.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TSet.scala,"[{'name': 'Set', 'match_type': 'partial', 'implemented_parts': ['element type', 'canCompare method', 'unify method', 'subst method'], 'confidence': 0.95, 'evidence': ['type definition with element type', 'comparison method for set elements', 'unification of set elements', 'recursive substitution of elements']}]",This file defines a data structure representing a set of elements.,"{'constants': ['None'], 'types': ['Set type'], 'classes': ['Set class'], 'functions': ['Type definition and methods for set manipulation']}"
hail/src/main/scala/is/hail/types/virtual/TStream.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TStream.scala,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Can be iterated', 'has size', 'element access methods'], 'confidence': 0.95, 'evidence': ['`Iterable` interface', '`Iterator` class', '`foreach` method']}, {'name': 'Virtual Type', 'match_type': 'full', 'implemented_parts': ['Custom type creation', 'unification', 'typing'], 'confidence': 1.0, 'evidence': ['`TStream` class', '`elementType` field', '`unify` method']}]",This file defines a virtual type system for working with sequences of data.,"{'constants': ['None'], 'types': ['Custom virtual types'], 'classes': ['`TStream` class defines the virtual type'], 'functions': ['`pyString` method for printing', 'typing and unification utilities']}"
hail/src/main/scala/is/hail/types/virtual/TString.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TString.scala,"[{'name': 'Case Object', 'match_type': 'full', 'implemented_parts': ['Primary constructor with arguments', 'equals method'], 'confidence': 1.0, 'evidence': ['case object syntax', 'constructor takes String argument', '_equals method']}, {'name': 'Custom Type', 'match_type': 'partial', 'implemented_parts': ['_toPretty method', 'pyString method'], 'confidence': 0.9, 'evidence': ['Custom _toPretty method', 'pyString method to convert to string']}, {'name': 'Annotation Handling', 'match_type': 'partial', 'implemented_parts': ['_showStr method', 'typeCheck method'], 'confidence': 0.8, 'evidence': ['_showStr method to display annotation as string', 'typeCheck method to verify type']}]",This file defines a custom type called TString that can represent strings and provides methods for handling annotations.,"{'constants': [], 'types': ['TString custom type for representing strings'], 'classes': [], 'functions': ['_toPretty, pyString, _showStr, typeCheck methods']}"
hail/src/main/scala/is/hail/types/virtual/TStruct.scala,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/src/main/scala/is/hail/types/virtual/TStruct.scala,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iteration process', 'Iterator interface'], 'confidence': 0.9, 'evidence': ['foreach method', 'Iterable interface']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['Comparison methods', 'Comparable interface'], 'confidence': 1.0, 'evidence': ['equals method', 'hashCode method']}]",This file defines utility methods for iterating over collections of data and comparing values.,"{'constants': ['Defines utility constants'], 'types': ['Custom types for iteration'], 'classes': ['Iterator class provides iteration functionality'], 'functions': ['compare methods for equality', 'iterate over collections']}"
