filename,type,author,repo,version,wiki,url,patterns,purpose,summary
hail/python/hail/docs/root_api.rst,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/docs/root_api.rst,[],This file provides documentation for the Python API of Hail libraries.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/python/hail/docs/scans.rst,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/docs/scans.rst,"[{'name': 'Variant Quality Control', 'match_type': 'partial', 'implemented_parts': ['Non-reference allele counting', 'Quality control metrics calculation', 'Visualization of results'], 'confidence': 0.95, 'evidence': ['ds.variant_qc.n_non_ref function', 'ds_scan rows().show method', 'Output of variant quality control statistics']}, {'name': 'Aggregation Functions', 'match_type': 'full', 'implemented_parts': ['Hardy-Weinberg test'], 'confidence': 0.85, 'evidence': ['Documentation on aggregators module']}]",This code snippet demonstrates variant quality control and aggregation functions.,"{'constants': ['None identified'], 'types': ['Dataframes for variant and scan information'], 'classes': ['None identified'], 'functions': ['Aggregation functions for statistical analysis']}"
hail/python/hail/docs/tutorials-landing.rst,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/docs/tutorials-landing.rst,[],This file provides documentation for Hail tutorials.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/python/hail/docs/types.rst,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/docs/types.rst,"[{'name': 'Dict Construction', 'match_type': 'partial', 'implemented_parts': ['Valid Python dictionary syntax'], 'confidence': 0.9, 'evidence': [""{'a': 1, 'b': 'b'} is a valid dictionary""]}, {'name': 'Type Constructing', 'match_type': 'full', 'implemented_parts': ['Using both type objects and parsing from strings'], 'confidence': 1.0, 'evidence': ['tstruct and dtype examples demonstrate constructing types']}]",This code snippet demonstrates the construction of dictionaries and types in Hail.,"{'constants': [], 'types': ['Custom types for various data structures'], 'classes': [], 'functions': []}"
hail/python/hail/docs/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/docs/__init__.py,"[{'name': 'Mediator', 'match_type': 'partial', 'implemented_parts': ['Centralizes communication', 'mediates between roles'], 'confidence': 0.75, 'evidence': ['centralizes communication', 'roles communicate through mediator']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['State capture and restoration'], 'confidence': 0.85, 'evidence': ['creating Memento', 'restoring saved state']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Dynamically adds operations'], 'confidence': 0.7, 'evidence': ['accept method', 'visiting elements']}]",This file defines roles and patterns for communication and state management.,"{'constants': ['Defines communication and state related constants'], 'types': ['Custom types for roles and patterns'], 'classes': ['Mediator centralizes communication', 'Memento captures state'], 'functions': ['Mediate between roles', 'Capture and restore state', 'Dynamically add operations']}"
hail/python/hail/experimental/sparse_mt/densify.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/sparse_mt/densify.py,"[{'name': 'Densification of Sparse Matrix', 'match_type': 'partial', 'implemented_parts': [""Conversion of sparse matrix row key to 'locus' field"", ""Verification of 'END' entry field type"", 'Extraction of column key fields', 'Annotation of rows with contig index', 'Annotation of entries with contig', 'Densification of matrix using scan function'], 'confidence': 0.95, 'evidence': [""Code references to 'locus' field as row key"", ""Code checks 'END' entry field type"", 'Column key fields listed in the output', 'Annotation functions documented in the code', 'Densification algorithm based on scan function implementation']}]",This function densifies a sparse matrix by interpolating missing values from neighboring defined values.,"{'constants': ['None'], 'types': ['Sparse matrix type'], 'classes': ['None'], 'functions': ['Densification function with scan algorithm']}"
hail/python/hail/experimental/sparse_mt/sparse_split_multi.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/sparse_mt/sparse_split_multi.py,"[{'name': 'Data Transformation', 'match_type': 'partial', 'implemented_parts': ['Fold function iterates over entries', 'Conditional logic based on local_a_index', 'Extraction of LPL values based on index call'], 'confidence': 0.9, 'evidence': ['hl.fold function with conditional logic', 'Access to local_a_index variable', 'Indexing into old_entry.LPL array']}, {'name': 'New Row Annotations', 'match_type': 'partial', 'implemented_parts': ['Adding new columns to existing DataFrame', 'Mapping values from old DataFrame to new columns', 'Dropping redundant row from DataFrame'], 'confidence': 0.8, 'evidence': ['ds.row.annotate function with custom column data', 'Mapping logic based on entries and cols', 'Dropping of new_id column']}]",This code snippet involves data transformation from an old DataFrame to a new DataFrame.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/python/hail/experimental/sparse_mt/__init__.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/sparse_mt/__init__.py,[],"This file simply exposes two functions: `densify` and `sparse_split_multi`, from the `densify` and `sparse_split_multi` modules respectively.","{'constants': [], 'types': [], 'classes': [], 'functions': ['densify', 'sparse_split_multi']}"
hail/python/hail/experimental/sparse_mt,FileType.DIR,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/sparse_mt,"[{'name': 'Data Transformation', 'match_type': 'partial', 'implemented_parts': ['Fold function iterates over entries', 'Conditional logic based on local_a_index', 'Extraction of LPL values based on index call'], 'confidence': 0.9, 'evidence': ['hl.fold function with conditional logic', 'Access to local_a_index variable', 'Indexing into old_entry.LPL array']}, {'name': 'New Row Annotations', 'match_type': 'partial', 'implemented_parts': ['Adding new columns to existing DataFrame', 'Mapping values from old DataFrame to new columns', 'Dropping redundant row from DataFrame'], 'confidence': 0.8, 'evidence': ['ds.row.annotate function with custom column data', 'Mapping logic based on entries and cols', 'Dropping of new_id column']}]",This code snippet involves data transformation from an old DataFrame to a new DataFrame.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/python/hail/experimental/datasets.json,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/datasets.json,[],This file provides access to various datasets related to the UK Biobank pan-ancestry GWAS analyses.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
hail/python/hail/experimental/datasets.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/datasets.py,"[{'name': 'Data Loader', 'match_type': 'partial', 'implemented_parts': ['Dataset import', 'version check', 'reference genome download'], 'confidence': 0.9, 'evidence': ['dataset metadata retrieval', 'version comparison logic', 'reference genome download function']}, {'name': 'Cloud Storage Access', 'match_type': 'full', 'implemented_parts': ['Cloud platform selection', 'region determination', 'data retrieval'], 'confidence': 1.0, 'evidence': ['cloud platform options', 'region filter', 'S3 or S3a access methods']}]",This code fetches and preprocesses datasets from various cloud storage platforms.,"{'constants': ['Defines cloud storage configurations'], 'types': ['Dataset metadata', 'Cloud platform options'], 'classes': ['Dataset loader class manages dataset access'], 'functions': ['load dataset', 'fetch metadata', 'download data']}"
hail/python/hail/experimental/datasets_metadata.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/datasets_metadata.py,"[{'name': 'Decorator', 'match_type': 'partial', 'implemented_parts': ['wraps function with additional behavior'], 'confidence': 0.7, 'evidence': ['__resource function', 'open method', 'json.load function']}, {'name': 'Data Access Object', 'match_type': 'partial', 'implemented_parts': ['retrieves data from persistent storage'], 'confidence': 0.8, 'evidence': ['file access through open method', 'json data loading']}]",This file provides access to datasets metadata stored in a JSON file.,"{'constants': ['None'], 'types': ['JSON data'], 'classes': ['None'], 'functions': ['get_datasets_metadata']}"
hail/python/hail/experimental/db.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/db.py,"[{'name': 'DataAnnotation', 'match_type': 'partial', 'implemented_parts': ['relational object', 'dataset names', 'annotation of datasets', 'gene field handling'], 'confidence': 0.95, 'evidence': ['relational object annotation API', 'dataset indexing and compatibility checks', 'handling gene-keyed datasets']}]",This function adds annotations to a relational object based on multiple datasets.,"{'constants': [], 'types': ['MatrixTable, Table'], 'classes': ['RowLenser'], 'functions': ['annotate function']}"
hail/python/hail/experimental/export_entries_by_col.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/export_entries_by_col.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['for loop', 'index variable', 'element access using index'], 'confidence': 0.9, 'evidence': ['iterating over collection of values', 'assignment of index to loop variable', 'accessing element at given index']}, {'name': 'FunctionalDataStructure', 'match_type': 'full', 'implemented_parts': ['Hash table implementation', 'Key-value pairs'], 'confidence': 1.0, 'evidence': ['key-value pairs as data elements', 'hash table data structure', 'efficient lookup by key']}]",This function iteratively exports columns of a matrix table in batches.,"{'constants': ['Batch size for exporting columns'], 'types': ['Matrix table representation'], 'classes': ['Functions for exporting data'], 'functions': ['Column batch export function']}"
hail/python/hail/experimental/expressions.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/expressions.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iteration process', 'iterator object'], 'confidence': 0.9, 'evidence': ['for loop', 'next method', 'current element access']}, {'name': 'FunctionalComposition', 'match_type': 'full', 'implemented_parts': ['Function composition', 'higher-order functions'], 'confidence': 1.0, 'evidence': ['lambda functions', 'compose function', 'recursive composition']}]",This file defines utilities for iterating over collections of data and composing functions.,"{'constants': ['Defines utility constants'], 'types': ['Custom types for iterators'], 'classes': ['Iterator class provides iteration methods'], 'functions': ['map applies function to collection', 'filter selects elements']}"
hail/python/hail/experimental/filtering_allele_frequency.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/filtering_allele_frequency.py,"[{'name': 'Filtering Allele Frequency', 'match_type': 'partial', 'implemented_parts': ['Function definition with arguments: ac, an, ci', 'Calculation of filtering allele frequency based on confidence interval', 'Return value: Float64Expression'], 'confidence': 0.9, 'evidence': [""Code comments describing the function's purpose"", 'References to scientific publication', 'Specific formulas used for confidence interval calculation']}]",Calculates the filtering allele frequency for genetic variants based on observed allele counts and confidence intervals.,"{'constants': ['Disease-specific maximum credible allele frequency'], 'types': ['Int32 for allele count, Float64 for confidence interval'], 'functions': ['Filtering allele frequency function']}"
hail/python/hail/experimental/full_outer_join_mt.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/full_outer_join_mt.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['collection', 'iterator method'], 'confidence': 0.9, 'evidence': ['for loop with index', 'iterator object']}, {'name': 'Comparable', 'match_type': 'partial', 'implemented_parts': ['compare method'], 'confidence': 0.8, 'evidence': ['generic type parameter', 'comparison logic']}]",This file defines utilities for iterating and comparing values.,"{'constants': ['Defines collection size constant'], 'types': ['Custom types for iterating'], 'functions': ['iterate over collections', 'compare values']}"
hail/python/hail/experimental/function.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/function.py,"[{'name': 'StatefulFunction', 'match_type': 'partial', 'implemented_parts': ['Stateful function state', 'update state method'], 'confidence': 0.9, 'evidence': ['Stateful class', 'update method takes state as input']}, {'name': 'FunctionalDependency', 'match_type': 'full', 'implemented_parts': ['Function arguments', 'result depends on arguments'], 'confidence': 1.0, 'evidence': ['Function takes arguments of different types', 'Result changes based on arguments']}]",This file defines a stateful function that can be used to compute values based on input.,"{'constants': ['Defines constants for function parameters'], 'types': ['Custom types for function arguments and results'], 'classes': ['StatefulFunction class manages state'], 'functions': ['compute function performs computations based on state']}"
hail/python/hail/experimental/haplotype_freq_em.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/haplotype_freq_em.py,"[{'name': 'EMAlgorithm', 'match_type': 'partial', 'implemented_parts': ['EM algorithm implementation', 'Excoffier & Slatkin EM function call', 'Genotype count input & haplotype output'], 'confidence': 0.95, 'evidence': ['Function name: haplotype_freq_em', 'Input: Array of genotype counts', 'Returns: Array of haplotype frequencies', 'EM algorithm reference in comments']}]",Estimates haplotype frequencies from genotype counts using the Excoffier & Slatkin EM algorithm.,"{'constants': [], 'types': ['ArrayExpression', 'tarray', 'tfloat64'], 'classes': [], 'functions': ['haplotype_freq_em']}"
hail/python/hail/experimental/import_gtf.py,FileType.FILE,hail-is,hail,0.2.133,https://hail.is,https://github.com/hail-is/hail/tree/0.2.133/hail/python/hail/experimental/import_gtf.py,"[{'name': 'Gene Interval Retrieval', 'match_type': 'partial', 'implemented_parts': ['Gene information retrieval', 'Gene interval extraction'], 'confidence': 0.95, 'evidence': ['_load_gencode_gtf function', 'Gene annotation GTF file parsing', 'Gene interval extraction algorithm']}, {'name': 'Gene Annotation Retrieval', 'match_type': 'full', 'implemented_parts': ['Gene ID and transcript ID annotation', 'Gene annotation retrieval'], 'confidence': 1.0, 'evidence': ['Annotation import from GTF file', 'Gene ID and transcript ID mapping']}]",This code retrieves gene annotations and intervals from a Gencode GTF file.,"{'constants': ['Gene-related constants'], 'types': ['Gene annotations', 'Gene intervals'], 'classes': ['GeneInfo class represents gene annotations'], 'functions': ['_load_gencode_gtf function', 'Gene annotation retrieval methods']}"
