filename,type,author,repo,version,wiki,url,patterns,purpose,summary
.git/hooks/applypatch-msg.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/applypatch-msg.sample,[],This file defines a hook script to check the commit log message associated with a patch.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['Executes custom commit message handler']}"
.git/hooks/commit-msg.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/commit-msg.sample,"[{'name': 'Hook Script', 'match_type': 'partial', 'implemented_parts': ['Command-line interface', 'file processing', 'message validation'], 'confidence': 0.9, 'evidence': ['shebang line', 'git command usage', 'message parsing logic']}]",This file is a Git commit hook that checks the commit message.,"{'constants': ['None'], 'types': ['String'], 'classes': ['None'], 'functions': ['grep', 'sort', 'uniq', 'sed']}"
.git/hooks/fsmonitor-watchman.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/fsmonitor-watchman.sample,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'hasNext method'], 'confidence': 0.9, 'evidence': ['interface with hasNext method', 'implementing class provides next method']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['Comparable interface', 'compareTo method'], 'confidence': 1.0, 'evidence': ['interface defines compareTo method', 'class implementing interface defines compareTo']}]",This file defines an iterator pattern for iterating over collections of data.,"{'constants': ['Defines comparison-related constants'], 'types': ['Custom iterator type'], 'classes': ['Iterator interface defines iteration methods'], 'functions': ['hasNext checks if iteration is finished', 'next retrieves next element']}"
.git/hooks/post-update.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/post-update.sample,"[{'name': 'Command', 'match_type': 'partial', 'implemented_parts': ['execute method'], 'confidence': 0.7, 'evidence': ['function named execute']}, {'name': 'Decorator', 'match_type': 'partial', 'implemented_parts': ['wraps function with decorator'], 'confidence': 0.8, 'evidence': ['function decorated with @decorator syntax']}]",This file contains utility functions for interacting with Git.,{'functions': ['executes shell commands']}
.git/hooks/pre-applypatch.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/pre-applypatch.sample,"[{'name': 'Caretaker', 'match_type': 'partial', 'implemented_parts': ['saves and restores state', 'Memento pattern'], 'confidence': 0.9, 'evidence': ['save_state', 'restore_state', 'Memento class']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['accepts visitors', 'Visitor pattern'], 'confidence': 0.8, 'evidence': ['visit method', 'AcceptVisitor interface']}]",This file demonstrates the use of the Memento and Visitor patterns.,"{'constants': [], 'types': [], 'classes': ['Memento', 'Caretaker'], 'functions': ['save_state', 'restore_state']}"
.git/hooks/pre-commit.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/pre-commit.sample,"[{'name': 'Dependency Injection', 'match_type': 'partial', 'implemented_parts': ['Constructor injection', 'Field injection'], 'confidence': 0.9, 'evidence': ['parameterized constructors', 'field annotations']}, {'name': 'Factory Method', 'match_type': 'full', 'implemented_parts': ['Abstract Factory method', 'Concrete Factory methods'], 'confidence': 1.0, 'evidence': ['abstract factory interface', 'concrete factory implementations']}]",This file promotes loose coupling and testability through dependency injection and factory methods.,"{'constants': ['Defines constants for dependencies'], 'types': ['Injects dependencies as parameters', 'Creates dependencies with factories'], 'classes': ['Abstract Factory', 'Concrete Factories'], 'functions': ['Abstract factory method', 'Concrete factory methods']}"
.git/hooks/pre-merge-commit.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/pre-merge-commit.sample,"[{'name': 'Memento Pattern', 'match_type': 'partial', 'implemented_parts': ['Caretaker stores and restores Memento'], 'confidence': 0.7, 'evidence': ['save_state', 'restore_state', 'Memento class']}, {'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Visitor adds operations to Element without modifying it'], 'confidence': 0.8, 'evidence': ['visit method', 'Element accepts Visitors']}]",This file implements a pre-merge commit hook to verify changes before committing.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['executes pre-commit hook']}"
.git/hooks/pre-push.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/pre-push.sample,"[{'name': 'Remote Branch Detection', 'match_type': 'partial', 'implemented_parts': ['Checking remote branch status', 'Comparing local and remote branch hashes', 'Handling delete and new branch scenarios'], 'confidence': 0.9, 'evidence': ['git hash-object', 'git rev-list', 'remote branch comparison']}, {'name': 'WIP Commit Filter', 'match_type': 'partial', 'implemented_parts': [""Searching commit history for lines matching 'WIP'"", 'Exiting with non-zero status if a WIP commit is detected'], 'confidence': 0.8, 'evidence': [""grep '^WIP'"", 'exit code 1']}]",This pre-push hook verifies pushes by checking for WIP commits and refusing pushes with such commits.,"{'constants': ['N/A'], 'types': ['N/A'], 'classes': ['N/A'], 'functions': ['N/A']}"
.git/hooks/pre-rebase.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/pre-rebase.sample,"[{'name': 'Branch Merge Detection', 'match_type': 'partial', 'implemented_parts': ['git rev-list command', 'comparison of branch history'], 'confidence': 0.9, 'evidence': ['Checking if branch has been merged into next using git rev-list', 'Comparing branch history of master and topic to determine merge status']}, {'name': 'Branch Deletion Policy', 'match_type': 'partial', 'implemented_parts': ['conditionally deleting merged branches'], 'confidence': 0.8, 'evidence': ['Deleting branches fully merged to master using git rev-list', 'Encouraging rebase of unmerged branches instead of building on them']}]",This code defines workflows for managing topic branches in a Git repository.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
.git/hooks/pre-receive.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/pre-receive.sample,"[{'name': 'Hook Script', 'match_type': 'partial', 'implemented_parts': ['Processing push options', 'Conditional logic based on options'], 'confidence': 0.9, 'evidence': ['git push option handling loop', 'case statement for options']}]",This shell script handles pre-receive Git hook.,"{'constants': ['None'], 'types': ['Shell scripting'], 'classes': ['None'], 'functions': ['Processing loop iterates over push options']}"
.git/hooks/prepare-commit-msg.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/prepare-commit-msg.sample,"[{'name': 'MVC Architecture', 'match_type': 'partial', 'implemented_parts': ['Model layer', 'View layer', 'Controller layer', 'Routing mechanism'], 'confidence': 0.9, 'evidence': ['Separate directories for models, views, and controllers', 'Database access layer in models', 'Template engine in views', 'Route handler in controllers']}, {'name': 'Dependency Injection', 'match_type': 'full', 'implemented_parts': ['Constructor injection', 'Dependency graph'], 'confidence': 1.0, 'evidence': ['Constructor receives dependencies as arguments', 'Dependency type annotations', 'Use of dependency injection framework']}]",This file demonstrates the implementation of a web application following the MVC architectural pattern.,"{'constants': ['Defines application-related constants'], 'types': ['Models represent data entities', 'Views handle user interaction', 'Controllers handle business logic'], 'classes': ['Model, View, Controller classes are defined'], 'functions': ['Route handler dispatches requests to controllers']}"
.git/hooks/push-to-checkout.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/push-to-checkout.sample,"[{'name': 'Push-to-checkout Hook', 'match_type': 'full', 'implemented_parts': ['Updates working tree to new commit'], 'confidence': 1.0, 'evidence': ['git update-index', 'git diff-files', 'git read-tree']}]",This hook ensures that the working tree is in a consistent state after receiving a push.,"{'constants': ['None'], 'types': ['Git objects'], 'classes': ['None'], 'functions': ['Updates working tree based on new commit']}"
.git/hooks/update.sample,FileType.FILE,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks/update.sample,"[{'name': 'Validation', 'match_type': 'partial', 'implemented_parts': ['Input validation', 'Error handling'], 'confidence': 0.9, 'evidence': ['regex patterns', 'exception handling']}, {'name': 'Authentication', 'match_type': 'full', 'implemented_parts': ['User authentication flow', 'JWT authentication'], 'confidence': 1.0, 'evidence': ['login endpoint', 'token validation']}]",This file handles user authentication and data validation.,"{'constants': ['Defines authentication-related constants'], 'types': ['Custom types for authentication'], 'classes': ['User model validates data', 'Authentication service handles login'], 'functions': ['validate input data', 'generate authentication token']}"
.git/hooks,FileType.DIR,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io,https://github.com/scverse/scanpy/tree/1.10.2/.git/hooks,"[{'name': 'Dependency Injection', 'match_type': 'full', 'implemented_parts': ['Constructor injection', 'Dependency graph'], 'confidence': 1.0, 'evidence': ['Constructor receives dependencies as arguments', 'Dependency type annotations', 'Use of dependency injection framework']}, {'name': 'Push-to-checkout Hook', 'match_type': 'full', 'implemented_parts': ['Updates working tree to new commit'], 'confidence': 1.0, 'evidence': ['git update-index', 'git diff-files', 'git read-tree']}, {'name': 'Validation', 'match_type': 'partial', 'implemented_parts': ['Input validation', 'Error handling'], 'confidence': 0.9, 'evidence': ['regex patterns', 'exception handling']}, {'name': 'Authentication', 'match_type': 'full', 'implemented_parts': ['User authentication flow', 'JWT authentication'], 'confidence': 1.0, 'evidence': ['login endpoint', 'token validation']}]",This file demonstrates the implementation of a web application following the MVC architectural pattern.,"{'constants': ['Defines application-related constants'], 'types': ['Models represent data entities', 'Views handle user interaction', 'Controllers handle business logic'], 'classes': ['Model, View, Controller classes are defined'], 'functions': ['Route handler dispatches requests to controllers']}"
