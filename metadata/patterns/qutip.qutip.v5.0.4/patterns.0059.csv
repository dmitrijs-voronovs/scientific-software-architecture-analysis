filename,type,author,repo,version,wiki,url,patterns,purpose,summary
.github/ISSUE_TEMPLATE/bug_report.yaml,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/ISSUE_TEMPLATE/bug_report.yaml,"[{'name': 'Quantum State Representation', 'match_type': 'partial', 'implemented_parts': ['Qubit', 'basis states', 'superposition'], 'confidence': 0.9, 'evidence': ['qubit class', 'eigenvalues', 'amplitude calculation']}, {'name': 'Quantum Algorithm Implementation', 'match_type': 'full', 'implemented_parts': ['Quantum circuit', 'gate operations', 'measurement'], 'confidence': 1.0, 'evidence': ['gate application', 'circuit visualization', 'measurement results']}]",This code utilizes the QuTiP library to represent and manipulate quantum states.,"{'constants': ['Quantum gates and measurements'], 'types': ['Qubit', 'DensityMatrix'], 'classes': ['QuantumCircuit'], 'functions': ['apply quantum gates', 'measure quantum states']}"
.github/ISSUE_TEMPLATE/feature_request.yaml,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/ISSUE_TEMPLATE/feature_request.yaml,"[{'name': 'Form', 'match_type': 'partial', 'implemented_parts': ['Input fields', 'Validation rules', 'Submit button'], 'confidence': 0.95, 'evidence': ['type: textarea elements', 'validations attribute', 'placeholder attribute']}]",This file defines a feature request form.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
.github/ISSUE_TEMPLATE/others.yaml,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/ISSUE_TEMPLATE/others.yaml,"[{'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Caretaker', 'Memento creation and restoration'], 'confidence': 0.75, 'evidence': ['create_memento method', 'restore_state method', 'Caretaker class']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor-Element interaction', 'accept method'], 'confidence': 0.8, 'evidence': ['visit method', 'Element class with accept method', 'Visitor-Element relationship']}]",This file defines patterns for state management and object interaction.,"{'constants': ['Defines state-related constants'], 'types': ['Memento', 'Caretaker'], 'classes': ['Memento represents saved state', 'Caretaker manages state transitions'], 'functions': ['save_state', 'restore_state', 'visit']}"
.github/ISSUE_TEMPLATE,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/ISSUE_TEMPLATE,"[{'name': 'Quantum Algorithm Implementation', 'match_type': 'full', 'implemented_parts': ['Quantum circuit', 'gate operations', 'measurement'], 'confidence': 1.0, 'evidence': ['gate application', 'circuit visualization', 'measurement results']}, {'name': 'Form', 'match_type': 'partial', 'implemented_parts': ['Input fields', 'Validation rules', 'Submit button'], 'confidence': 0.95, 'evidence': ['type: textarea elements', 'validations attribute', 'placeholder attribute']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Caretaker', 'Memento creation and restoration'], 'confidence': 0.75, 'evidence': ['create_memento method', 'restore_state method', 'Caretaker class']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor-Element interaction', 'accept method'], 'confidence': 0.8, 'evidence': ['visit method', 'Element class with accept method', 'Visitor-Element relationship']}]",This code utilizes the QuTiP library to represent and manipulate quantum states.,"{'constants': ['Quantum gates and measurements'], 'types': ['Qubit', 'DensityMatrix'], 'classes': ['QuantumCircuit'], 'functions': ['apply quantum gates', 'measure quantum states']}"
.github/workflows/build.yml,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/workflows/build.yml,"[{'name': 'Python Version Validation', 'match_type': 'full', 'implemented_parts': ['Python version installation'], 'confidence': 1.0, 'evidence': ['python -m pip install wheels/-cp39-cp39-manylinux*.whl']}, {'name': 'Package Installation', 'match_type': 'full', 'implemented_parts': ['Pip install from TestPyPI'], 'confidence': 0.9, 'evidence': ['python -m pip install twine', 'python -m twine upload ...']}]",This workflow installs a specific version of Python and a package from a custom repository.,"{'constants': ['Defines the target Python version'], 'types': ['Pip commands for package installation'], 'classes': ['N/A'], 'functions': ['N/A']}"
.github/workflows/build_documentation.yml,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/workflows/build_documentation.yml,"[{'name': 'Documentation Installation', 'match_type': 'full', 'implemented_parts': ['Python version selection', 'Documentation dependencies installation', 'QuTiP installation from GitHub', 'PDF documentation generation', 'HTML documentation generation'], 'confidence': 1.0, 'evidence': ['Python version specified in with statement', 'Pip installation of documentation dependencies', 'QuTiP installation from GitHub using editable mode', 'PDF documentation built using make command', 'HTML documentation built using make command']}]",This action installs QuTiP quantum library documentation.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
.github/workflows/tests.yml,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/workflows/tests.yml,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['iteration method', 'element access methods', 'size method'], 'confidence': 0.95, 'evidence': ['for loop implementation', 'access elements using index or iterator', 'calculates size of the iterable']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['comparison methods', 'equality checking'], 'confidence': 1.0, 'evidence': ['__eq__ and __ne__ methods defined', 'hash code implemented']}]",This file provides utilities for iterating over collections of data and checking for equality.,"{'constants': ['Defines constants for common iterable types'], 'types': ['Custom iterable types'], 'classes': ['Iterators for different data structures'], 'functions': ['iterates over elements', 'compares equality of iterables', 'supports different comparison operators']}"
.github/workflows,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/workflows,"[{'name': 'Documentation Installation', 'match_type': 'full', 'implemented_parts': ['Python version selection', 'Documentation dependencies installation', 'QuTiP installation from GitHub', 'PDF documentation generation', 'HTML documentation generation'], 'confidence': 1.0, 'evidence': ['Python version specified in with statement', 'Pip installation of documentation dependencies', 'QuTiP installation from GitHub using editable mode', 'PDF documentation built using make command', 'HTML documentation built using make command']}, {'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['iteration method', 'element access methods', 'size method'], 'confidence': 0.95, 'evidence': ['for loop implementation', 'access elements using index or iterator', 'calculates size of the iterable']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['comparison methods', 'equality checking'], 'confidence': 1.0, 'evidence': ['__eq__ and __ne__ methods defined', 'hash code implemented']}]",This workflow installs QuTiP quantum library documentation.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
.github/pull_request_template.md,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github/pull_request_template.md,[],This markdown file provides a pull request template for QuTiP contributions.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
.github,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/.github,[],This directory holds source code related to Quantum Information Processing (QIP) algorithms and functionalities.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/apidoc/apidoc.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/apidoc/apidoc.rst,"[{'name': 'Mediator', 'match_type': 'partial', 'implemented_parts': ['Originator', 'Mediator', 'Recipient'], 'confidence': 0.8, 'evidence': ['create_message method', 'coordinate function', 'common terms: mediator, coordination']}, {'name': 'Memento', 'match_type': 'full', 'implemented_parts': ['Originator', 'Memento', 'Caretaker'], 'confidence': 1.0, 'evidence': ['save_state method', 'restore_state method', 'common terms: memento, state']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor', 'Element'], 'confidence': 0.8, 'evidence': ['visit method', 'accept method', 'common terms: visitor, operation']}]",This file defines API documentation for QuTiP library.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/apidoc/classes.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/apidoc/classes.rst,"[{'name': 'Implicit Taylor Expansion', 'match_type': 'partial', 'implemented_parts': ['Taylor expansion', 'numeric methods'], 'confidence': 0.9, 'evidence': ['autoclass: qutip.solver.sode.sode.PlatenSODE', 'autoclass: qutip.solver.sode.itotaylor.Explicit1_5_SODE']}, {'name': 'Predictive Correction', 'match_type': 'partial', 'implemented_parts': ['Error correction techniques'], 'confidence': 0.8, 'evidence': ['autoclass: qutip.solver.sode.sode.PredCorr_SODE']}]",This file defines solvers for differential equations using numerical methods and Taylor expansions.,"{'constants': ['Solver parameters'], 'types': ['Differential equation representations'], 'classes': ['SODE solvers with different methods'], 'functions': ['Solving differential equations numerically']}"
doc/apidoc/functions.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/apidoc/functions.rst,"[{'name': 'Quantum Algorithm', 'match_type': 'partial', 'implemented_parts': ['Quantum circuit', 'measurement', 'optimization'], 'confidence': 0.95, 'evidence': ['qiskit library', 'circuit construction', 'gate operations']}, {'name': 'Quantum Simulation', 'match_type': 'full', 'implemented_parts': ['Hamiltonian simulation', 'density matrix', 'quantum state'], 'confidence': 1.0, 'evidence': ['qutip library', 'hamiltonian construction', 'quantum state manipulation']}]",This file implements quantum algorithms and performs numerical simulations.,"{'constants': ['Quantum-related constants'], 'types': ['Quantum states', 'Hamiltonians'], 'classes': ['QuantumCircuit class for representing circuits'], 'functions': ['simulate quantum circuits', 'calculate eigenvalues']}"
doc/apidoc,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/apidoc,"[{'name': 'Implicit Taylor Expansion', 'match_type': 'partial', 'implemented_parts': ['Taylor expansion', 'numeric methods'], 'confidence': 0.9, 'evidence': ['autoclass: qutip.solver.sode.sode.PlatenSODE', 'autoclass: qutip.solver.sode.itotaylor.Explicit1_5_SODE']}, {'name': 'Predictive Correction', 'match_type': 'partial', 'implemented_parts': ['Error correction techniques'], 'confidence': 0.8, 'evidence': ['autoclass: qutip.solver.sode.sode.PredCorr_SODE']}, {'name': 'Quantum Algorithm', 'match_type': 'partial', 'implemented_parts': ['Quantum circuit', 'measurement', 'optimization'], 'confidence': 0.95, 'evidence': ['qiskit library', 'circuit construction', 'gate operations']}, {'name': 'Quantum Simulation', 'match_type': 'full', 'implemented_parts': ['Hamiltonian simulation', 'density matrix', 'quantum state'], 'confidence': 1.0, 'evidence': ['qutip library', 'hamiltonian construction', 'quantum state manipulation']}]",This file defines solvers for differential equations using numerical methods and Taylor expansions.,"{'constants': ['Solver parameters'], 'types': ['Differential equation representations'], 'classes': ['SODE solvers with different methods'], 'functions': ['Solving differential equations numerically']}"
doc/changes/.gitignore,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/changes/.gitignore,[],This file is used to track changes made to the QuTiP documentation.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/changes,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/changes,[],This directory holds documentation changes made to QuTiP.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/contrib/sim_ent_qkd/sim_ent_qkd.html,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/contrib/sim_ent_qkd/sim_ent_qkd.html,"[{'name': 'Set labels', 'match_type': 'partial', 'implemented_parts': ['xlabel', 'ylabel'], 'confidence': 0.9, 'evidence': ['plot command with label arguments']}, {'name': 'Add subplot', 'match_type': 'full', 'implemented_parts': ['fig.add_subplot'], 'confidence': 1.0, 'evidence': ['figure object and subplot position arguments']}]",This code snippet demonstrates the creation of a plot using matplotlib in Python.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['matplotlib plotting functions']}"
doc/contrib/sim_ent_qkd/sim_ent_qkd.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/contrib/sim_ent_qkd/sim_ent_qkd.py,"[{'name': 'Secure Key Generation', 'match_type': 'partial', 'implemented_parts': ['twofolds variable', 'real function', 'H2 parameter', 'qber variable', 'skr variable', 'coinc_window variable'], 'confidence': 0.9, 'evidence': ['Calculation of secure key rate based on twofolds', 'Use of real function to extract real part', 'H2 parameter related to loss', 'qber variable for quantum bit error rate', 'skr variable for secure key rate', 'Coinc_window variable for time window']}, {'name': 'Loss Impact', 'match_type': 'partial', 'implemented_parts': ['Loss_db variable', 'exp_loss variable', 'qber array', 'skr array', 'twofolds array'], 'confidence': 0.8, 'evidence': ['Variation of loss parameter', 'Exponential function for loss impact', 'Correlation between loss and qber', 'Correlation between loss and skr', 'Correlation between loss and twofolds']}]",This code simulates quantum key distribution with entanglement under varying loss conditions.,"{'constants': ['N is the dimension of the fock space', 'eps is the squeezing parameter'], 'types': ['qber: quantum bit error rate', 'skr: secure key rate'], 'classes': ['Sim_qkd_entanglement function for simulation'], 'functions': ['Calculation of secure key rate and quantum bit error rate', 'Simulation of quantum key distribution protocol', 'Visualization of results']}"
doc/contrib/sim_ent_qkd,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/contrib/sim_ent_qkd,"[{'name': 'Plot with Label Arguments', 'match_type': 'full', 'implemented_parts': ['fig.add_subplot'], 'confidence': 1.0, 'evidence': ['figure object and subplot position arguments']}, {'name': 'Secure Key Generation', 'match_type': 'partial', 'implemented_parts': ['twofolds variable', 'real function', 'H2 parameter', 'qber variable', 'skr variable', 'coinc_window variable'], 'confidence': 0.9, 'evidence': ['Calculation of secure key rate based on twofolds', 'Use of real function to extract real part', 'H2 parameter related to loss', 'qber variable for quantum bit error rate', 'skr variable for secure key rate', 'Coinc_window variable for time window']}, {'name': 'Loss Impact', 'match_type': 'partial', 'implemented_parts': ['Loss_db variable', 'exp_loss variable', 'qber array', 'skr array', 'twofolds array'], 'confidence': 0.8, 'evidence': ['Variation of loss parameter', 'Exponential function for loss impact', 'Correlation between loss and qber', 'Correlation between loss and skr', 'Correlation between loss and twofolds']}]",This code simulates quantum key distribution with entanglement under varying loss conditions.,"{'constants': ['N is the dimension of the fock space', 'eps is the squeezing parameter'], 'types': ['qber: quantum bit error rate', 'skr: secure key rate'], 'classes': ['Sim_qkd_entanglement function for simulation'], 'functions': ['Calculation of secure key rate and quantum bit error rate', 'Simulation of quantum key distribution protocol', 'Visualization of results']}"
doc/contrib/qpt.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/contrib/qpt.py,"[{'name': 'Quantum Gate Representation', 'match_type': 'partial', 'implemented_parts': ['Qubit manipulation functions', 'Gate construction methods'], 'confidence': 0.95, 'evidence': ['Qobj data structure', 'Gate operators', 'Quantum circuit construction']}, {'name': 'Quantum Object Design', 'match_type': 'full', 'implemented_parts': ['Qubit definition', 'Quantum gate application'], 'confidence': 1.0, 'evidence': ['Qubit initialization', 'Gate application methods']}]",This code represents quantum gates and objects.,"{'constants': ['Quantum gate parameters'], 'types': ['Qubit class', 'Gate class'], 'functions': ['Quantum gate operations', 'Qubit manipulation functions']}"
