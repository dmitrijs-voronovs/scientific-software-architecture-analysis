filename,type,author,repo,version,wiki,url,patterns,purpose,summary
doc/guide/dynamics/dynamics-stochastic.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-stochastic.rst,"[{'name': 'Stochastic Solver', 'match_type': 'full', 'implemented_parts': ['H matrix handling', 'rho_0 initialization', 'times evolution', 'c_ops', 'sc_ops', 'e_ops', 'measurement tracking'], 'confidence': 0.95, 'evidence': ['H matrix appears in the solver function', 'rho_0 is defined as a coherent state', 'Evolution times are specified', 'Various operator types are defined', 'Measurement tracking is enabled']}]",This code solves the Stochastic Master Equation (SME) for quantum dynamics simulations.,"{'constants': ['H matrix, intensity, kappa'], 'types': ['Density matrix, times, operators'], 'classes': ['Solver class for SME'], 'functions': ['smesolve function performs the simulation']}"
doc/guide/dynamics/dynamics-time.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-time.rst,"[{'name': 'Function-Based Coefficients', 'match_type': 'full', 'implemented_parts': ['User-defined functions for coefficients'], 'confidence': 0.95, 'evidence': ['Compilation into C++ code']}, {'name': 'String-Based Coefficients', 'match_type': 'full', 'implemented_parts': ['String representation of coefficients'], 'confidence': 0.85, 'evidence': ['Run-time efficiency']}, {'name': 'Spline Coefficients', 'match_type': 'full', 'implemented_parts': ['Spline function representation of coefficients'], 'confidence': 0.9, 'evidence': ['Fixed coefficient structure']}]",This code implements numerical methods for solving differential equations.,"{'constants': ['Coefficients for differential equations'], 'types': ['Numerical methods for differential equations'], 'classes': ['Differential equation solvers'], 'functions': ['Solving differential equations with different coefficient representations']}"
doc/guide/dynamics,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics,"[{'name': 'Quantum Dynamics Solver', 'match_type': 'full', 'implemented_parts': ['Hamiltonian defining the dynamics', 'Quantum states', 'Operators'], 'confidence': 0.98, 'evidence': ['H matrix appears in the solver function', 'rho_0 is defined as a coherent state', 'Evolution times are specified', 'Various operator types are defined', 'Measurement tracking is enabled']}, {'name': 'Coefficient Representation', 'match_type': 'full', 'implemented_parts': ['Function-Based Coefficients', 'String-Based Coefficients', 'Spline Coefficients'], 'confidence': 0.95, 'evidence': ['Compilation into C++ code', 'Run-time efficiency', 'Fixed coefficient structure']}]",This code solves the Stochastic Master Equation (SME) for quantum dynamics simulations.,"{'constants': ['H matrix, intensity, kappa'], 'types': ['Density matrix, times, operators'], 'classes': ['Solver class for SME'], 'functions': ['smesolve function performs the simulation']}"
doc/guide/figures,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/figures,[],This directory contains documentation figures for the QUnit framework.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/guide/heom/figures,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/heom/figures,[],This directory holds figures illustrating concepts covered in the Quantum Information Processing and Measurement (HEOM) guide.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/guide/heom/bosonic.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/heom/bosonic.rst,"[{'name': 'Quantum System Liouvillian Construction', 'match_type': 'full', 'implemented_parts': ['Bath construction from projector operators', 'System Hamiltonian construction', 'Liouvillian construction from Hamiltonian and bath terminators', 'HEOM solver initialization'], 'confidence': 1.0, 'evidence': ['Projection operators used for bath construction', 'Hamiltonian terms involving system positions and momenta', 'Liouvillian includes bath terminators for coherence control', 'HEOM solver designed for Liouvillian dynamics']}, {'name': 'Population Dynamics Simulation', 'match_type': 'partial', 'implemented_parts': ['Density matrix initialization', 'Time evolution simulation', 'Population extraction from simulation results'], 'confidence': 0.95, 'evidence': ['Basis state representation used for density matrix', 'Evolution operator derived from Liouvillian', 'Population values extracted from simulation output']}]",This code simulates the dynamics of a quantum system interacting with a thermal bath.,"{'constants': ['Quantum system parameters, bath parameters'], 'types': ['Density matrix, projector operators'], 'classes': ['Liouvillian object'], 'functions': ['Liouvillian evolution operator, population extraction']}"
doc/guide/heom/fermionic.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/heom/fermionic.rst,"[{'name': 'FermionicBath', 'match_type': 'full', 'implemented_parts': ['Quantum system interaction', 'Bath construction from complex functions', 'Padé expansion support'], 'confidence': 0.95, 'evidence': ['FermionicBath class definition', 'C and vk function definitions', 'Lorentzian and Padé expansion methods']}, {'name': 'HEOMSolver', 'match_type': 'full', 'implemented_parts': ['Hamiltonian evolution equation solver', 'Inclusion of fermionic baths', 'Iterative solution methods'], 'confidence': 0.9, 'evidence': ['HEOMSolver class definition', 'FermionicBath integration support', 'Iterative solution algorithms']}]",This file introduces tools for solving quantum systems interacting with fermionic baths.,"{'constants': ['Quantum system parameters, bath properties'], 'types': ['Hamiltonians, baths, solutions'], 'classes': ['FermionicBath, HEOMSolver'], 'functions': ['Solving the Hamiltonian evolution equation']}"
doc/guide/heom/heom.bib,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/heom/heom.bib,"[{'name': 'Virtual Excitations', 'match_type': 'partial', 'implemented_parts': ['Ultra-strongly-coupled spin-boson model', 'Virtual excitations', 'Unphysical modes'], 'confidence': 0.85, 'evidence': ['title mentions virtual excitations', 'journal focuses on spin-boson models']}, {'name': 'Hierarchical Equations of Motion', 'match_type': 'full', 'implemented_parts': ['Open quantum dynamics', 'Hierarchical equations of motion'], 'confidence': 1.0, 'evidence': ['title and abstract discuss HEOM', 'journal publishes articles on quantum dynamics']}]",This paper explores virtual excitations in the context of strongly-coupled spin-boson models. It proposes the use of hierarchical equations of motion to analyze open quantum dynamics.,"{'constants': ['Not mentioned'], 'types': ['Quantum systems', 'Bosons'], 'classes': ['Spin-boson model'], 'functions': ['Solving open quantum dynamics']}"
doc/guide/heom/history.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/heom/history.rst,"[{'name': 'HEOM Solver', 'match_type': 'partial', 'implemented_parts': ['Solving HEOM equations', 'Support for various baths', 'Correlation function expansion coefficients'], 'confidence': 0.9, 'evidence': ['HSolverDL class', 'BoFiN-HEOM solver', 'Correlation function bath support']}, {'name': 'Flexible Bath Support', 'match_type': 'full', 'implemented_parts': ['Customizable bath implementation', 'Multiple bath support'], 'confidence': 1.0, 'evidence': ['BoFiN-HEOM', 'BoFiN-fast', 'Current implementation']}]",This file implements solvers for the Heisenberg-Landau equations of motion (HEOM) with support for various thermal baths.,"{'constants': ['Thermodynamic constants for baths'], 'types': ['Density matrices', 'Correlation functions'], 'classes': ['Solver classes for different baths'], 'functions': ['Solving HEOM equations with different baths']}"
doc/guide/heom/intro.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/heom/intro.rst,"[{'name': 'Hierarchical Equations of Motion', 'match_type': 'full', 'implemented_parts': ['Quantum system interaction with environment', 'Bosonic and fermionic bath support', 'Solver for dynamics and steady-states'], 'confidence': 1.0, 'evidence': ['Hamiltonian with bath interaction', 'Spectral density selection', 'Correlation function decomposition']}, {'name': 'Spectral Density Selection', 'match_type': 'partial', 'implemented_parts': ['Drude-Lorentz', 'Under-damped Brownian motion'], 'confidence': 0.9, 'evidence': ['Definition of both spectral densities', 'Use in Hamiltonian interaction term']}, {'name': 'Correlation Function Decomposition', 'match_type': 'partial', 'implemented_parts': ['Expansion in exponentials'], 'confidence': 0.8, 'evidence': ['Code examples in :doc:`bosonic`', 'Passing expansions to solver']}]",This file defines the Hierarchical Equations of Motion (HEOM) method for solving quantum systems interacting with thermal environments.,"{'constants': ['Temperature', 'Spectral density'], 'types': ['Hamiltonian', 'Correlation functions'], 'classes': ['HEOMSolver'], 'functions': ['Solving dynamics and steady-states']}"
doc/guide/heom/references.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/heom/references.rst,"[{'name': 'Mediator', 'match_type': 'partial', 'implemented_parts': ['Centralizes communication', 'Mediates between Colleagues'], 'confidence': 0.75, 'evidence': ['Communicates through Mediator', 'Common methods: mediate, notify']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['State capture and restoration', 'Originator and Caretaker roles'], 'confidence': 0.8, 'evidence': ['save_state, restore_state methods', 'Originator creates Memento']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Dynamically adds operations', 'Element accepts Visitors'], 'confidence': 0.7, 'evidence': ['visit method', 'Accept class for accepting Visitors']}]",This file defines concepts related to event handling and communication.,"{'constants': ['None identified'], 'types': ['None identified'], 'classes': ['Mediator, Memento, Originator, Caretaker'], 'functions': ['mediate, notify, save_state, restore_state, visit, accept']}"
doc/guide/heom,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/heom,"[{'name': 'Hierarchical Equations of Motion', 'match_type': 'partial', 'implemented_parts': ['Hamiltonian interaction term', 'Spectral density'], 'confidence': 0.9, 'evidence': ['Definition of both spectral densities', 'Use in Hamiltonian interaction term']}, {'name': 'Correlation Function Decomposition', 'match_type': 'partial', 'implemented_parts': ['Expansion in exponentials'], 'confidence': 0.8, 'evidence': ['Code examples in :doc:`bosonic`', 'Passing expansions to solver']}]",This file defines the Hierarchical Equations of Motion (HEOM) method for solving quantum systems interacting with thermal environments.,"{'constants': ['Temperature', 'Spectral density'], 'types': ['Hamiltonian', 'Correlation functions'], 'classes': ['HEOMSolver'], 'functions': ['Solving dynamics and steady-states']}"
doc/guide/scripts/bloch_ex1.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/scripts/bloch_ex1.py,"[{'name': 'Memento Pattern', 'match_type': 'partial', 'implemented_parts': ['Caretaker', 'Memento', 'save_state/restore_state methods'], 'confidence': 0.7, 'evidence': ['class Bloch', 'save_state method', 'restore_state method']}, {'name': 'Visitor Pattern', 'match_type': 'partial', 'implemented_parts': ['Visitor', 'Element', 'accept method'], 'confidence': 0.8, 'evidence': ['class Bloch', 'accept method', 'visit method']}]",This file demonstrates the use of the Memento and Visitor patterns for manipulating quantum states.,"{'constants': ['None'], 'types': ['Bloch state'], 'classes': ['Bloch class'], 'functions': ['save_state, restore_state, accept']}"
doc/guide/scripts/correlation_ex1.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/scripts/correlation_ex1.py,"[{'name': 'Correlation Measurement', 'match_type': 'partial', 'implemented_parts': ['Quantum state preparation', 'Time evolution', 'Correlation function calculation', 'Visualization'], 'confidence': 0.95, 'evidence': ['qutip library for quantum state manipulation', 'Timeseries data for correlation measurements', 'Correlation functions with different coupling strengths', 'Plot of correlation vs. time']}]",This file calculates and visualizes the correlation between quantum states over time.,"{'constants': ['Quantum state parameters'], 'types': ['Quantum states', 'Correlation functions'], 'classes': ['Correlation function calculation routines'], 'functions': ['Correlation measurement for two-op quantum states']}"
doc/guide/scripts/correlation_ex2.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/scripts/correlation_ex2.py,"[{'name': 'Quantum State Measurement', 'match_type': 'partial', 'implemented_parts': ['Qubit preparation', 'Density matrix calculation', 'Correlation measurement'], 'confidence': 0.9, 'evidence': ['qutip.destroy function for qubit preparation', 'qutip.coherent_dm function for density matrix calculation', 'qutip.correlation_2op_2t function for correlation measurement']}]",This file demonstrates quantum state correlation measurement.,"{'constants': ['Quantum state related constants'], 'types': ['Qubit, density matrix'], 'classes': ['None'], 'functions': ['Qubit preparation and measurement', 'Density matrix calculation', 'Correlation measurement']}"
doc/guide/scripts/correlation_ex3.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/scripts/correlation_ex3.py,"[{'name': 'Evolution', 'match_type': 'partial', 'implemented_parts': ['Hamiltonian evolution', 'initial coherent state', 'measurement and correlation extraction'], 'confidence': 0.9, 'evidence': ['creation of a Hamiltonian', 'application of collapse operator', 'calculation of occupation number and correlation function']}, {'name': 'Correlation Measurement', 'match_type': 'full', 'implemented_parts': ['Correlation function calculation', 'normalization with occupation number', 'visualization of results'], 'confidence': 1.0, 'evidence': ['definition of correlation function', 'calculation with respect to initial state', 'plotting of real part of correlation function and occupation number']}]",This file simulates the decay of a coherent state into a thermal state and measures the correlation function.,"{'constants': ['Correlation parameter G1', 'bath temperature n_th'], 'types': ['Hamiltonian, density matrix'], 'classes': ['Qudit library quantum operators'], 'functions': ['Mesolve solver for time evolution', 'Correlation function calculation']}"
doc/guide/scripts/correlation_ex4.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/scripts/correlation_ex4.py,"[{'name': 'TimeCorrelation', 'match_type': 'partial', 'implemented_parts': ['Hamiltonian evolution', 'Correlation function calculation', 'Normalization with occupation number'], 'confidence': 0.9, 'evidence': ['tau argument in mesolve function', 'correlation_3op_1t function call', 'Division by n(0)n(t) in g2 calculation']}, {'name': 'StateDependence', 'match_type': 'partial', 'implemented_parts': ['Initialization of different states', 'Evolution under the same Hamiltonian', 'Correlation function calculation for each state'], 'confidence': 0.85, 'evidence': ['Different initial states defined', 'H Hamiltonian applied to all states', 'Correlation functions plotted for each state']}]",This file simulates the dynamics of correlated systems using qutip library.,"{'constants': ['Bath temperature n_th'], 'types': ['Hamiltonian', 'Density matrix'], 'classes': ['qutip.destroy'], 'functions': ['mesolve', 'correlation_3op_1t']}"
doc/guide/scripts/ex_bloch_animation.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/scripts/ex_bloch_animation.py,"[{'name': 'QubitEvolution', 'match_type': 'partial', 'implemented_parts': ['Hamiltonian construction', 'Collapse operators inclusion', 'Evolution and expectation calculation'], 'confidence': 0.95, 'evidence': ['sigma operators manipulation', 'relaxation and dephasing rates implementation', 'mesolve function utilization for quantum evolution']}, {'name': 'QuantumMeasurement', 'match_type': 'full', 'implemented_parts': ['Measurement of observables', 'Expectation value tracking'], 'confidence': 1.0, 'evidence': ['Observables defined for position, momentum, and spin', 'Expectation values obtained for each observable', 'Time evolution of quantum state reflected in measurements']}]",This code simulates the dynamics of a qubit under the influence of relaxation and dephasing processes.,"{'constants': ['Qubit angular frequency, relaxation and dephasing rates'], 'types': ['Qubit state representation'], 'classes': ['None'], 'functions': ['Qubit integration function for dynamics tracking']}"
doc/guide/scripts/ex_steady.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/scripts/ex_steady.py,"[{'name': 'Quantum Interaction', 'match_type': 'partial', 'implemented_parts': ['Hamiltonian', 'collapse operators', 'steady-state solution', 'particle number expectation'], 'confidence': 0.9, 'evidence': ['qutip library usage for quantum computations', 'Hamiltonian with coupling term', 'collapse operators for decay and excitation', 'steady-state calculation and expectation value extraction']}, {'name': 'Thermal Environment', 'match_type': 'partial', 'implemented_parts': ['Average excitation number', 'rate constants for decay and excitation', 'Monte Carlo simulation', 'Master equation simulation'], 'confidence': 0.8, 'evidence': ['Calculation of average excitation number', 'Inclusion of rate constants in collapse operators', 'Monte Carlo and master equation simulations for time evolution', 'Comparison of simulation results with analytical steady-state solution']}]",This code simulates the interaction of a quantum system with a thermal environment.,"{'constants': ['Temperature parameter for thermal environment'], 'types': ['Quantum operators for system and environment'], 'classes': ['Hamiltonian represents the quantum system'], 'functions': ['Solving quantum master equation', 'Calculating steady-state solution']}"
doc/guide/scripts/floquet_ex1.py,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/scripts/floquet_ex1.py,"[{'name': 'FloquetExpansion', 'match_type': 'full', 'implemented_parts': ['Hamiltonian time dependence', 'Floquet basis transformation', 'Expansion of initial state'], 'confidence': 0.95, 'evidence': ['Sigmax and sigmaz operators', 'Sin function dependence on time', 'FloquetBasis class usage']}, {'name': 'LindbladComparison', 'match_type': 'partial', 'implemented_parts': ['Measurement of occupation probability', 'Comparison with Lindblad master equation', 'Visualization of results'], 'confidence': 0.85, 'evidence': ['Num operator usage', 'Mesolve solver comparison', 'Occupation probability plots']}]",This code implements the Floquet expansion technique for solving a time-dependent quantum system and compares the results with the Lindblad master equation approach.,"{'constants': ['Delta, eps0, A'], 'types': ['FloquetBasis, Psi, Hamiltonian'], 'classes': ['Hamiltonian class for time dependence'], 'functions': ['FloquetBasis creation', 'Expansion of initial state', 'Occupation probability measurement']}"
