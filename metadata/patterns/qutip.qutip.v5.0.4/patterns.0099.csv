filename,type,author,repo,version,wiki,url,patterns,purpose,summary
doc/figures/home,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/figures/home,[],This directory contains figures and documentation related to the QUTIP quantum computing library.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/figures/nav,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/figures/nav,[],This directory contains documentation figures and navigation.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/figures/support,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/figures/support,[],This directory contains documentation figures and support materials related to QuTip.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/figures/updates,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/figures/updates,[],This directory contains documentation figures related to updates to the QuTiP project.,{}
doc/figures,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/figures,[],This directory contains documentation figures for QUTIP.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/gallery/src/README.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/gallery/src/README.rst,"[{'name': 'Mediator', 'match_type': 'partial', 'implemented_parts': ['Mediator role', 'coordinate method'], 'confidence': 0.7, 'evidence': ['class Mediator', 'coordinate function', 'communication between colleagues']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator captures state', 'restore_state method'], 'confidence': 0.8, 'evidence': ['class Memento', 'save_state and restore_state methods']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor pattern', 'accept method'], 'confidence': 0.9, 'evidence': ['class Visitor', 'accept function']}]",This file defines patterns for common design elements and relationships.,"{'constants': ['Defines patterns-related constants'], 'types': ['Patterns for various design elements'], 'classes': ['Mediator, Memento, Visitor patterns'], 'functions': ['Various methods related to the patterns']}"
doc/gallery/src,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/gallery/src,"[{'name': 'Mediator', 'match_type': 'partial', 'implemented_parts': ['Mediator role', 'coordinate method'], 'confidence': 0.7, 'evidence': ['class Mediator', 'coordinate function', 'communication between colleagues']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator captures state', 'restore_state method'], 'confidence': 0.8, 'evidence': ['class Memento', 'save_state and restore_state methods']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor pattern', 'accept method'], 'confidence': 0.9, 'evidence': ['class Visitor', 'accept function']}]",This directory defines patterns for common design elements and relationships.,"{'constants': ['Defines patterns-related constants'], 'types': ['Patterns for various design elements'], 'classes': ['Mediator, Memento, Visitor patterns'], 'functions': ['Various methods related to the patterns']}"
doc/gallery,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/gallery,[],This directory contains documentation examples showcasing the features of the QuTip quantum library.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/guide/doc,FileType.DIR,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/doc,[],This directory contains documentation for the QUTIP quantum library.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/guide/dynamics/dynamics-bloch-redfield.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-bloch-redfield.rst,"[{'name': 'TimeDependentCoupling', 'match_type': 'partial', 'implemented_parts': ['Hermitian coupling operator', 'time-dependent evolution', 'noise power spectrum'], 'confidence': 0.95, 'evidence': ['QobjEvo with time dependence', 'kappa parameter', 'noise term']}, {'name': 'BlochRedfieldSimulation', 'match_type': 'full', 'implemented_parts': ['Hamiltonian with coupling', 'initial state', 'measurement operators'], 'confidence': 1.0, 'evidence': ['brmesolve function', 'Hamiltonian with coupling term', 'measurement operators defined']}]",This code performs a time-dependent Bloch-Redfield simulation of a quantum system coupled to a reservoir.,"{'constants': ['Kappa parameter for coupling strength'], 'types': ['Quantum operators for system and reservoir'], 'classes': ['Hamiltonian class for system and reservoir'], 'functions': ['brmesolve function for solving the master equation']}"
doc/guide/dynamics/dynamics-class.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-class.rst,"[{'name': 'Solver State Access', 'match_type': 'partial', 'implemented_parts': ['Solver classes', 'StateFeedback', 'ExpectFeedback'], 'confidence': 0.9, 'evidence': ['State access methods in solver classes', 'Argument passing of StateFeedback and ExpectFeedback', 'Usage in time-dependent systems']}, {'name': 'Evolution Operator Feedback', 'match_type': 'partial', 'implemented_parts': ['Feedback from evolution operators', 'Passing solver state as arguments', 'Accessing state information during evolution'], 'confidence': 0.8, 'evidence': ['Mention of feedback from evolution operators', 'Argument passing of solver state to evolution methods', 'Accessing state properties within the solver class']}]",This code demonstrates accessing the solver state during the evolution process using feedback from evolution operators.,"{'constants': ['Solver-related constants'], 'types': ['Solver classes', 'Evolution operator arguments'], 'classes': ['Solver classes with state feedback methods'], 'functions': ['Passing solver state to evolution methods', 'Accessing state information during evolution']}"
doc/guide/dynamics/dynamics-data.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-data.rst,"[{'name': 'Average State Tracking', 'match_type': 'partial', 'implemented_parts': ['Calculating average state vectors or density matrices at each timestep', 'Storing final state vectors or density matrices', 'Providing expectation values and standard deviations', 'Outputting dictionary of expectation values and standard deviations'], 'confidence': 0.95, 'evidence': ['Average state calculation function', 'Final state storage method', 'Expectation value retrieval API', 'Standard deviation calculation logic']}, {'name': 'Multi-Trajectories Merging', 'match_type': 'full', 'implemented_parts': ['Adding multiple trajectory results', 'Preserving trajectory seeds for reproducibility', 'Providing an option to merge trajectories'], 'confidence': 1.0, 'evidence': ['Trajectory merging function', 'Seed storage and retrieval mechanism', 'Improved statistical analysis with merged data']}]",This code snippet showcases advanced state tracking and trajectory management capabilities.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['SMSolve function for trajectory calculation', 'Seed storage and retrieval functions', 'Trajectory merging function']}"
doc/guide/dynamics/dynamics-floquet.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-floquet.rst,"[{'name': 'Floquet Solver', 'match_type': 'partial', 'implemented_parts': ['Floquet-Markov master equation solver', 'Initial state and time-dependent Hamiltonian', 'Environment coupling operators and spectral densities', 'Dissipation through noise spectral density'], 'confidence': 0.95, 'evidence': ['fmmesolve function definition', 'Arguments for initial state, Hamiltonian, coupling operators', 'Callback function for noise spectral density']}, {'name': 'Dissipative Environment', 'match_type': 'partial', 'implemented_parts': ['Environment spectral density function', 'Influence on system dynamics through coupling', 'Extraction of coupling strength from spectral density'], 'confidence': 0.85, 'evidence': ['Mention of spectral density function in noise_spectrum callback', 'Exclusion of explicit dissipation rates in favor of spectral density', 'Comparison with Bloch-Redfield master equation solver']}]","This code implements a solver for the Floquet-Markov master equation, which describes the dynamics of a quantum system coupled to a dissipative environment.","{'constants': ['Units for energy, time, and temperature'], 'types': ['Hamiltonian, density operator, coupling operator'], 'classes': ['Result object stores solution data'], 'functions': ['fmmesolve function performs numerical solution']}"
doc/guide/dynamics/dynamics-intro.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-intro.rst,"[{'name': 'Solver', 'match_type': 'full', 'implemented_parts': ['Non-Markovian Monte Carlo solver', 'Bloch-Redfield master equation solver', 'Floquet-Markov master equation solver', 'Stochastic Schr√∂dinger equation solver', 'Stochastic master equation solver', 'Transfer Tensor Method time-evolution solver', 'Hierarchical Equations of Motion evolution solver'], 'confidence': 1.0, 'evidence': ['nm_mcsolve function for Non-Markovian Monte Carlo', 'brmesolve and fmmesolve functions for master equation solvers', 'ssesolve and smesolve functions for stochastic methods', 'ttmsolve function for Transfer Tensor Method', 'heomsolve function for Hierarchical Equations of Motion']}]",This file provides solvers for quantum systems dynamics.,"{'constants': ['Quantum system parameters'], 'types': ['Solver results'], 'classes': ['NonMarkovianMCSolver', 'BRSolver', 'FMESolver', 'SSESolver', 'SMESolver', 'HEOMSolver'], 'functions': ['nm_mcsolve', 'brmesolve', 'fmmesolve', 'ssesolve', 'smesolve', 'ttmsolve', 'heomsolve']}"
doc/guide/dynamics/dynamics-krylov.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-krylov.rst,"[{'name': 'Krylov Solver', 'match_type': 'full', 'implemented_parts': ['Krylov subspace evolution algorithm', 'Sesolve-like function for Krylov evolution', 'Hamiltonian and initial state input', 'Krylov subspace dimension selection'], 'confidence': 1.0, 'evidence': ['Function name: krylovsolve', 'Arguments include Hamiltonian, initial state, time list, and Krylov dimension', 'Use of Krylov subspace for efficient evolution calculation']}, {'name': 'Master Equation Evolution', 'match_type': 'partial', 'implemented_parts': ['Evolution algorithm based on master equation', 'Time-dependent Hamiltonian input'], 'confidence': 0.9, 'evidence': ['Function name: sesolve', 'Arguments include Hamiltonian and initial state', 'Calculates propagator for time-dependent evolution']}, {'name': 'Quantum State Evolution', 'match_type': 'full', 'implemented_parts': ['Quantum state evolution framework', 'Solving of differential equations for state evolution'], 'confidence': 1.0, 'evidence': ['Usage of differential equation solvers for state evolution', 'Input of Hamiltonian and initial state to the solver', 'Output of state at different time points']}]",This file implements algorithms for quantum state evolution in the QuTiP quantum programming platform.,"{'constants': ['None'], 'types': ['Hamiltonians', 'Quantum states'], 'classes': ['Evolution algorithms'], 'functions': ['Krylov evolution solver', 'Master equation evolution solver', 'Quantum state evolution solver']}"
doc/guide/dynamics/dynamics-master.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-master.rst,"[{'name': 'Dipole Interaction', 'match_type': 'partial', 'implemented_parts': ['Dipole coupling', 'quantum exchange'], 'confidence': 0.95, 'evidence': ['interaction term with dipole operator', 'coherent exchange of quanta']}, {'name': 'Leaky Cavity', 'match_type': 'partial', 'implemented_parts': ['Single-mode cavity', 'dipole-photon coupling'], 'confidence': 0.9, 'evidence': ['loss operator with rate 0.05', 'interaction between cavity and atom']}, {'name': 'Master Equation', 'match_type': 'partial', 'implemented_parts': ['Evolution operator', 'measurement operators'], 'confidence': 0.85, 'evidence': ['mesolve function solves master equation', 'expectation values of operators']}]",This code simulates the dynamics of a two-level atom coupled to a leaky single-mode cavity.,"{'constants': ['Rate of cavity leakage: 0.05'], 'types': ['Quantum operators representing interaction and loss'], 'classes': ['Master equation solver'], 'functions': ['Evolution operator describes system dynamics', 'Measurement operators track cavity photon number and atom excitation']}"
doc/guide/dynamics/dynamics-monte.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-monte.rst,"[{'name': 'Partial Detection', 'match_type': 'partial', 'implemented_parts': ['Quantum state collapses partially', 'Measured photons are a subset of emitted photons', 'Reduced photocurrent compared to full detection'], 'confidence': 0.95, 'evidence': ['Randomly emitted photons are detected with probability 0.5', 'Photocurrent measurement includes only half the emitted photons', 'Comparison with full detection scenario demonstrates reduction']}]","This code simulates a quantum system interacting with a detector, where only half of the emitted photons are detected.","{'constants': ['Emission and detection probabilities'], 'types': ['Quantum states, operators'], 'classes': ['Liouvillian describes the interaction'], 'functions': ['Monte Carlo simulation calculates photocurrent']}"
doc/guide/dynamics/dynamics-nmmonte.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-nmmonte.rst,"[{'name': 'Lindblad dissipator', 'match_type': 'full', 'implemented_parts': ['interaction Hamiltonian', 'dissipative terms'], 'confidence': 1.0, 'evidence': ['lindblad_dissipator function', 'gamma1 and gamma2 parameters']}, {'name': 'Monte Carlo simulation', 'match_type': 'full', 'implemented_parts': ['numerically tracing density matrix', 'measurement operators'], 'confidence': 0.95, 'evidence': ['nm_mcsolve function', 'MCSol result object']}]",This code simulates the time evolution of a quantum system interacting with a reservoir.,"{'constants': ['Reservoir parameters'], 'types': ['Density matrix', 'Observables'], 'classes': ['Hamiltonian'], 'functions': ['Lindblad dissipator', 'Monte Carlo simulation']}"
doc/guide/dynamics/dynamics-options.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-options.rst,"[{'name': 'Dynamics Options', 'match_type': 'partial', 'implemented_parts': ['Option dictionary', 'Solver and ODE integration method options', 'Keyword arguments for dynamics functions'], 'confidence': 0.9, 'evidence': ['Dictionary assignment for options', 'Access to solver and integrator methods', 'Usage of options keyword argument in dynamics functions']}]",This file defines options for controlling the dynamics solvers.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
doc/guide/dynamics/dynamics-propagator.rst,FileType.FILE,qutip,qutip,v5.0.4,https://qutip.org,https://github.com/qutip/qutip/tree/v5.0.4/doc/guide/dynamics/dynamics-propagator.rst,"[{'name': 'Propagator', 'match_type': 'full', 'implemented_parts': ['Hamiltonian evolution', 'operator propagation', 'initial state preparation'], 'confidence': 1.0, 'evidence': ['Quantum evolution operator', 'initial Fock state preparation', 'propagator function']}, {'name': 'Solver', 'match_type': 'partial', 'implemented_parts': ['Solving quantum equations', 'initial state setting', 'propagator computation'], 'confidence': 0.9, 'evidence': ['Solving operator input', 'identity state initialisation', 'propagator solution methods']}]",This file implements a quantum propagator for solving quantum equations of motion.,"{'constants': ['Hamiltonian defining the dynamics'], 'types': ['Quantum states', 'operators'], 'classes': ['Propagator class for time evolution'], 'functions': ['Solving quantum equations', 'Propagating initial states']}"
