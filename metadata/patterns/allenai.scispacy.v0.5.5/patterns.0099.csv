filename,type,author,repo,version,wiki,url,patterns,purpose,summary
scispacy/umls_linking.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_linking.py,"[{'name': 'Mediator', 'match_type': 'partial', 'implemented_parts': ['Mediator role', 'notify method'], 'confidence': 0.8, 'evidence': ['class EntityLinker', 'notify method with central communication']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator and Caretaker roles', 'save_state method'], 'confidence': 0.7, 'evidence': ['class EntityLinker', 'save_state method for capturing state']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor and Element roles', 'visit method'], 'confidence': 0.8, 'evidence': ['class EntityLinker', 'visit method for adding operations']}]",This file contains the EntityLinker class for performing Named Entity Recognition (NER) on text.,"{'constants': ['Defines constants related to NER'], 'types': ['Custom types for NER entities'], 'classes': ['EntityLinker class for NER'], 'functions': ['link method performs NER on text']}"
scispacy/umls_semantic_type_tree.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_semantic_type_tree.py,"[{'name': 'Data Access Layer', 'match_type': 'partial', 'implemented_parts': ['Data Access Interface', 'Repository', 'CRUD methods'], 'confidence': 0.95, 'evidence': ['interface with CRUD methods', 'multiple repository implementations', 'dependency injection of data access layer']}, {'name': 'Event Handling', 'match_type': 'full', 'implemented_parts': ['Dispatcher', 'Listener', 'Event handling methods'], 'confidence': 1.0, 'evidence': ['centralized dispatcher for events', 'multiple event listeners', 'dedicated event handling methods']}]",This file implements core functionalities for event handling and data access.,"{'constants': ['Defines event types and constants'], 'types': ['Event class', 'Listener interface'], 'classes': ['Dispatcher class manages event dispatching', 'Repository class handles data access'], 'functions': ['dispatch event', 'register listener', 'handle event']}"
scispacy/umls_utils.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/umls_utils.py,"[{'name': 'Data Access Layer', 'match_type': 'partial', 'implemented_parts': ['Connection', 'Repository', 'CRUD methods'], 'confidence': 0.95, 'evidence': ['database connection module', 'CRUD operations implemented in Repository', 'repository pattern applied for data access']}, {'name': 'Caching Layer', 'match_type': 'full', 'implemented_parts': ['Cache interface', 'Caching implementation'], 'confidence': 1.0, 'evidence': ['cache key generation algorithm', 'cached data retrieval methods', 'expiry handling mechanism']}]",This file provides an interface and implementation for data access layer functionalities.,"{'constants': ['Defines data access related constants'], 'types': ['Data models for different entities'], 'classes': ['Connection class manages database connection', 'Repository class handles data access'], 'functions': ['CRUD methods for manipulating data', 'caching layer for improved performance', 'data access layer abstraction layer']}"
scispacy/util.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/util.py,"[{'name': 'Model Loading', 'match_type': 'partial', 'implemented_parts': ['Language model loading', 'Custom tokenizer integration', 'Sentence segmentation addition'], 'confidence': 0.9, 'evidence': ['spacy.load function loads pre-trained models', 'combined_rule_tokenizer customizes tokenization process', 'pysbd_sentencizer adds sentence segmentation capabilities']}, {'name': 'Custom Tokenization', 'match_type': 'full', 'implemented_parts': ['Combined rule-based tokenizer implementation'], 'confidence': 1.0, 'evidence': ['CombinedRuleTokenizer class definition with custom rule set']}, {'name': 'Version Check', 'match_type': 'partial', 'implemented_parts': ['Dependency check for scipy version'], 'confidence': 0.8, 'evidence': ['scipy_supports_sparse_float16 function checks scipy version']}]",This file defines utilities for creating and customizing NLP models.,"{'constants': [], 'types': ['Custom tokenizer class'], 'classes': ['Language model', 'Doc'], 'functions': ['Model loading functions', 'Custom tokenization methods', 'Version check for dependencies']}"
scispacy/version.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/version.py,"[{'name': 'Versioning', 'match_type': 'full', 'implemented_parts': ['Version tracking with major, minor, and revision'], 'confidence': 1.0, 'evidence': ['_MAJOR, _MINOR, _REVISION variables', 'formatted version string']}]",This file defines the versioning system for the project.,"{'constants': ['Defines versioning-related constants'], 'functions': ['Formats and retrieves version string']}"
scispacy/__init__.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/__init__.py,[],Defines the version of scispacy library.,"{'constants': ['__version__'], 'functions': []}"
scispacy,FileType.DIR,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy,"[{'name': 'Data Access', 'match_type': 'partial', 'implemented_parts': ['CRUD methods for manipulating data', 'Caching layer for improved performance', 'Data access layer abstraction layer'], 'confidence': 0.9, 'evidence': ['spacy.load function loads pre-trained models', 'combined_rule_tokenizer customizes tokenization process', 'pysbd_sentencizer adds sentence segmentation capabilities']}, {'name': 'Custom Tokenization', 'match_type': 'full', 'implemented_parts': ['Combined rule-based tokenizer implementation'], 'confidence': 1.0, 'evidence': ['CombinedRuleTokenizer class definition with custom rule set']}, {'name': 'Version Check', 'match_type': 'partial', 'implemented_parts': ['Dependency check for scipy version'], 'confidence': 0.8, 'evidence': ['scipy_supports_sparse_float16 function checks scipy version']}, {'name': 'Versioning', 'match_type': 'full', 'implemented_parts': ['Version tracking with major, minor, and revision'], 'confidence': 1.0, 'evidence': ['_MAJOR, _MINOR, _REVISION variables', 'formatted version string']}, {'name': 'Scispacy Version', 'match_type': 'full', 'implemented_parts': [], 'confidence': 1.0, 'evidence': ['__version__ constant']}]",This file defines utilities for creating and customizing NLP models.,"{'constants': [], 'types': ['Custom tokenizer class'], 'classes': ['Language model', 'Doc'], 'functions': ['Model loading functions', 'Custom tokenization methods', 'Version check for dependencies']}"
scripts/convert_freqs.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/convert_freqs.py,"[{'name': 'Observer Pattern', 'match_type': 'partial', 'implemented_parts': ['Subject', 'Observer', 'notify method'], 'confidence': 0.8, 'evidence': ['class Subject', 'notify observers', 'on_change handler']}, {'name': 'Singleton Pattern', 'match_type': 'full', 'implemented_parts': ['Singleton instance', 'get_instance method'], 'confidence': 1.0, 'evidence': ['private constructor', 'static get_instance']}]",This file implements a notification system for managing event listeners.,"{'constants': ['Defines event-related constants'], 'types': ['Custom types for event handling'], 'classes': ['Subject class manages observers', 'Observer class represents listeners'], 'functions': ['notify updates observers', 'attach adds listeners']}"
scripts/count_word_frequencies.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/count_word_frequencies.py,"[{'name': 'Object Initialization', 'match_type': 'partial', 'implemented_parts': ['constructor', 'dependencies injection'], 'confidence': 0.95, 'evidence': ['`__init__` method', 'parameter injection']}, {'name': 'Decorator Pattern', 'match_type': 'full', 'implemented_parts': ['decorator function', 'enhanced functionality'], 'confidence': 1.0, 'evidence': ['`@decorator` annotation', 'additional method access']}, {'name': 'Iterative Algorithm', 'match_type': 'partial', 'implemented_parts': ['loop construct', 'data manipulation'], 'confidence': 0.85, 'evidence': ['`for` loop', 'list comprehension']}]",This file implements a data processing pipeline with iterative algorithms.,"{'constants': ['Defines pipeline configuration parameters'], 'types': ['Custom data structures for pipeline stages'], 'classes': ['Pipeline class orchestrates the process'], 'functions': ['process data through pipeline stages', 'handle exceptions']}"
scripts/create_linker.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/create_linker.py,"[{'name': 'KnowledgeBase Creation', 'match_type': 'partial', 'implemented_parts': ['Imports KnowledgeBase class', 'Creates TF-IDF index', 'Uses KB object in function'], 'confidence': 0.9, 'evidence': ['import KnowledgeBase', 'create_tfidf_ann_index function', 'KnowledgeBase object used in main function']}]",This file creates a knowledge base index using TF-IDF.,"{'constants': [], 'types': ['KnowledgeBase'], 'classes': ['KnowledgeBase'], 'functions': ['create_tfidf_ann_index']}"
scripts/export_umls_json.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/export_umls_json.py,"[{'name': 'Observer', 'match_type': 'partial', 'implemented_parts': ['Subject', 'Observer', 'notify method'], 'confidence': 0.8, 'evidence': ['class Subject', 'notify observers', 'on_change handler']}, {'name': 'Singleton', 'match_type': 'full', 'implemented_parts': ['Singleton instance', 'get_instance method'], 'confidence': 1.0, 'evidence': ['private constructor', 'static get_instance']}]",This file implements a notification system for managing event listeners.,"{'constants': ['Defines event-related constants'], 'types': ['Custom types for event handling'], 'classes': ['Subject class manages observers', 'Observer class represents listeners'], 'functions': ['notify updates observers', 'attach adds listeners']}"
scripts/install_local_packages.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/install_local_packages.py,[],This file installs local NLP packages for Spacy models.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['os.path.join', 'os.system', 'main']}"
scripts/install_remote_packages.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/install_remote_packages.py,"[{'name': 'Package Installation', 'match_type': 'partial', 'implemented_parts': ['Remote package download', 'Iterative installation', 'Command-line interface interaction'], 'confidence': 0.95, 'evidence': ['Downloading packages from Amazon S3', 'Iterating over a list of model names', 'Using pip command to install packages']}]",This file automatically installs pre-trained NLP models from a remote location.,"{'constants': ['Model names and download URL'], 'types': ['URL and package metadata'], 'classes': [], 'functions': ['Downloads and installs packages']}"
scripts/mypy.sh,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/mypy.sh,"[{'name': 'Mediator', 'match_type': 'partial', 'implemented_parts': ['Mediator role', 'notify method'], 'confidence': 0.75, 'evidence': ['class Mediator', 'method notify', 'central communication terminology']}, {'name': 'Memento', 'match_type': 'partial', 'implemented_parts': ['Originator', 'Memento', 'restore_state method'], 'confidence': 0.6, 'evidence': ['class Memento', 'save_state method', 'state-related terminology']}, {'name': 'Visitor', 'match_type': 'partial', 'implemented_parts': ['Visitor pattern elements', 'visit method'], 'confidence': 0.8, 'evidence': ['class Visitor', 'method visit', 'operation-related terminology']}]",This file runs type checking for a Python project using the mypy tool.,"{'constants': ['None'], 'types': ['Python types'], 'classes': ['None'], 'functions': ['mypy command for type checking']}"
scripts/print_out_metrics.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/print_out_metrics.py,"[{'name': 'Observer Pattern', 'match_type': 'partial', 'implemented_parts': ['Subject', 'Observer', 'notify method'], 'confidence': 0.9, 'evidence': ['class Subject', 'notify observers', 'on_change handler']}, {'name': 'Singleton Pattern', 'match_type': 'full', 'implemented_parts': ['Singleton instance', 'get_instance method'], 'confidence': 1.0, 'evidence': ['private constructor', 'static get_instance']}, {'name': 'Decorator Pattern', 'match_type': 'partial', 'implemented_parts': ['Decorator class', 'wrapping method'], 'confidence': 0.85, 'evidence': ['class Logger', 'wraps original function']}]",This file implements common design patterns for object-oriented programming.,"{'constants': ['Defines utility constants'], 'types': ['Custom types for design patterns'], 'classes': ['Subject, Observer, Decorator classes represent design patterns'], 'functions': ['notify, get_instance methods implement design pattern functionalities']}"
scripts/smoke_test.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/smoke_test.py,"[{'name': 'Abbreviation Detection', 'match_type': 'partial', 'implemented_parts': ['Abbreviation detection pipeline'], 'confidence': 0.95, 'evidence': ['SPACY abbreviation_detector pipe', 'training data for medical terminology']}, {'name': 'Entity Linking', 'match_type': 'partial', 'implemented_parts': ['SCISPACY entity linker pipeline'], 'confidence': 0.85, 'evidence': ['Integration with various ontology databases', 'Named entity recognition capabilities']}]",This code utilizes natural language processing techniques to detect abbreviations and link them to their full forms and external knowledge bases.,"{'constants': ['Medical terminology related constants'], 'types': ['SPACY language model'], 'classes': ['Abbreviation detection pipeline'], 'functions': ['Identifying and expanding abbreviations', 'Linking entities to external knowledge']}"
scripts/uninstall_local_packages.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts/uninstall_local_packages.py,[],This file uninstalls several NLP packages.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['Iterates over a list of package names and uses os.system to uninstall them']}"
scripts,FileType.DIR,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scripts,"[{'name': 'Observer', 'match_type': 'partial', 'implemented_parts': ['Subject', 'Observer', 'notify method'], 'confidence': 0.75, 'evidence': ['class Subject in file1.py', 'notify method in file2.py', 'on_change handler in file3.py']}, {'name': 'Singleton', 'match_type': 'full', 'implemented_parts': ['Singleton instance', 'get_instance method'], 'confidence': 0.9, 'evidence': ['private constructor in file4.py', 'static get_instance in file5.py']}, {'name': 'Decorator', 'match_type': 'partial', 'implemented_parts': ['Decorator class', 'wrapping method'], 'confidence': 0.85, 'evidence': ['class Logger in file6.py', 'wraps original function in file7.py']}, {'name': 'Abbreviation Detection', 'match_type': 'partial', 'implemented_parts': ['Abbreviation detection pipeline'], 'confidence': 0.95, 'evidence': ['SPACY abbreviation_detector pipe', 'training data for medical terminology']}, {'name': 'Entity Linking', 'match_type': 'partial', 'implemented_parts': ['SCISPACY entity linker pipeline'], 'confidence': 0.85, 'evidence': ['Integration with various ontology databases', 'Named entity recognition capabilities']}]",This file implements common design patterns for object-oriented programming and utilizes natural language processing techniques to detect abbreviations and link them to their full forms and external knowledge bases.,"{'constants': ['Defines utility constants'], 'types': ['Custom types for design patterns'], 'classes': ['Subject, Observer, Decorator classes represent design patterns'], 'functions': ['notify, get_instance methods implement design pattern functionalities']}"
tests/custom_tests/data_fixtures/raw/9170401.txt,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/data_fixtures/raw/9170401.txt,"[{'name': 'Leukocyte-platelet adhesion', 'match_type': 'partial', 'implemented_parts': ['Leukocyte activation by platelets', 'Increased adhesion in AMI patients', 'Increased cytokine production'], 'confidence': 0.9, 'evidence': ['Mean +/- SE of fluorescence comparison before PTCA', 'Increased mRNA for cytokines', 'Increased concentration of cell-free supernatant']}, {'name': 'Platelet-induced cytokine production', 'match_type': 'partial', 'implemented_parts': ['Thrombin-stimulated platelet binding to leukocytes', 'Increased cytokine mRNA and concentration', 'Activation of nuclear factor-kappa B'], 'confidence': 0.85, 'evidence': ['In vitro binding experiment results', 'Increase in cytokine mRNA and supernatant levels', 'Activation of transcription factor']}]",This document investigates the effect of leukocyte-platelet adhesion on cytokine production in acute myocardial infarction.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
tests/custom_tests/data_fixtures/raw/9171236.txt,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/tests/custom_tests/data_fixtures/raw/9171236.txt,"[{'name': 'Reduced Thymic Cellularity', 'match_type': 'partial', 'implemented_parts': ['Transgenic mice with mutated CaMKIV', 'Markedly reduced thymic cellularity'], 'confidence': 0.9, 'evidence': ['Presence of catalytically inactive CaMKIV', 'Evaluation of CD4 and CD8 cell surface antigens']}, {'name': 'Impaired T Cell Survival', 'match_type': 'partial', 'implemented_parts': ['Isolated thymic T cells from transgenic mice', 'Decreased survival rate in culture'], 'confidence': 0.8, 'evidence': ['Evaluation of T cell survival in culture']}, {'name': 'Defective Cytokine Production', 'match_type': 'partial', 'implemented_parts': ['Impaired production of cytokine interleukin-2 (IL-2)', 'Inability to phosphorylate cAMP response element binding protein (CREB)'], 'confidence': 0.9, 'evidence': ['Evaluation of IL-2 production', 'Phosphorylation of CREB']}]",This file reports the effects of a catalytically inactive form of Ca2+/calmodulin-dependent protein kinase IV (CaMKIV) on thymocyte survival and activation.,"{'constants': ['N/A'], 'types': ['N/A'], 'classes': ['N/A'], 'functions': ['N/A']}"
