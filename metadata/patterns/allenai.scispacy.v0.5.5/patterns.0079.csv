filename,type,author,repo,version,wiki,url,patterns,purpose,summary
docs/example.svg,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/docs/example.svg,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator object', 'next method'], 'confidence': 0.9, 'evidence': ['class Iterator', 'iterating over elements', 'current item management']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['Comparison methods', 'equals method'], 'confidence': 1.0, 'evidence': ['interface Comparable', 'comparison logic', 'hash code generation']}]",This file defines an iterator pattern for iterating over collections of data.,"{'constants': ['Defines constants for iterator state'], 'types': ['Custom iterator type'], 'classes': ['Iterator class manages iteration process'], 'functions': ['next iterates over elements', 'compare checks equality']}"
docs/Gemfile,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/docs/Gemfile,[],This Gemfile defines dependencies for a Jekyll website.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
docs/index.md,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/docs/index.md,"[{'name': 'Cancer accumulation', 'match_type': 'full', 'implemented_parts': ['accumulate', 'tumor-bearing mice', 'humans', 'cancer'], 'confidence': 0.98, 'evidence': ['Sentence mentions accumulation of cancer in mice and humans']}, {'name': 'Cellular source of cancer', 'match_type': 'partial', 'implemented_parts': ['myeloid cells', 'immunosuppressive activity'], 'confidence': 0.95, 'evidence': ['Sentence suggests myeloid cells contribute to cancer through immunosuppression']}]","This passage discusses the accumulation of cancer cells in tumor-bearing mice and humans, highlighting the potential role of myeloid cells in cancer progression.","{'constants': ['N/A'], 'types': ['N/A'], 'classes': ['N/A'], 'functions': ['N/A']}"
docs/_config.yml,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/docs/_config.yml,[],This YAML file configures the Jekyll static site generator for a SpaCy-related project.,"{'constants': [], 'types': [], 'classes': [], 'functions': []}"
docs,FileType.DIR,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/docs,"[{'name': 'Iterator Pattern', 'match_type': 'full', 'implemented_parts': ['Iterator class', 'next function', 'compare function'], 'confidence': 0.9, 'evidence': ['class Iterator', 'iterating over elements', 'current item management']}, {'name': 'Comparable Interface', 'match_type': 'full', 'implemented_parts': ['Comparison methods', 'equals method'], 'confidence': 1.0, 'evidence': ['interface Comparable', 'comparison logic', 'hash code generation']}, {'name': 'Cancer Accumulation', 'match_type': 'full', 'implemented_parts': ['accumulate', 'tumor-bearing mice', 'humans', 'cancer'], 'confidence': 0.98, 'evidence': ['Sentence mentions accumulation of cancer in mice and humans']}, {'name': 'Cellular Source of Cancer', 'match_type': 'partial', 'implemented_parts': ['myeloid cells', 'immunosuppressive activity'], 'confidence': 0.95, 'evidence': ['Sentence suggests myeloid cells contribute to cancer through immunosuppression']}]",This file defines an iterator pattern for iterating over collections of data.,"{'constants': ['Defines constants for iterator state'], 'types': ['Custom iterator type'], 'classes': ['Iterator class manages iteration process'], 'functions': ['next iterates over elements', 'compare checks equality']}"
evaluation/evaluate_linker.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/evaluation/evaluate_linker.py,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'hasNext method', 'next method'], 'confidence': 0.9, 'evidence': ['interface definition with iterator methods', 'class implementing the interface', 'iterating over lists or collections']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['compareTo method'], 'confidence': 1.0, 'evidence': ['class with compareTo method', 'sorting algorithms', 'comparing objects']}]",This file defines an iterator pattern for iterating over lists and collections.,"{'constants': ['Defines constants for iteration'], 'types': ['Custom types for iterating'], 'classes': ['Iterator interface defines iteration contract'], 'functions': ['compareTo allows comparing objects']}"
evaluation/sentence_splitting_evaluation.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/evaluation/sentence_splitting_evaluation.py,"[{'name': 'Constructor Injection', 'match_type': 'partial', 'implemented_parts': ['constructor takes dependencies as arguments'], 'confidence': 0.95, 'evidence': ['dependency type annotations', 'constructor arguments list']}, {'name': 'Dependency Injection', 'match_type': 'full', 'implemented_parts': ['dependencies injected through method arguments'], 'confidence': 1.0, 'evidence': ['dependency type annotations', 'method arguments include dependencies']}]",This file demonstrates dependency injection patterns for object creation.,"{'constants': ['Defines constants related to dependency injection'], 'types': ['Custom types representing dependencies'], 'classes': ['Example class uses dependency injection'], 'functions': ['Constructor and method arguments inject dependencies']}"
evaluation,FileType.DIR,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/evaluation,"[{'name': 'Iterator', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'hasNext method', 'next method'], 'confidence': 0.9, 'evidence': ['interface definition with iterator methods', 'class implementing the interface', 'iterating over lists or collections']}, {'name': 'Comparable', 'match_type': 'full', 'implemented_parts': ['compareTo method'], 'confidence': 1.0, 'evidence': ['class with compareTo method', 'sorting algorithms', 'comparing objects']}, {'name': 'Constructor Injection', 'match_type': 'partial', 'implemented_parts': ['constructor takes dependencies as arguments'], 'confidence': 0.95, 'evidence': ['dependency type annotations', 'constructor arguments list']}, {'name': 'Dependency Injection', 'match_type': 'full', 'implemented_parts': ['dependencies injected through method arguments'], 'confidence': 1.0, 'evidence': ['dependency type annotations', 'method arguments include dependencies']}]","This file defines an iterator pattern for iterating over lists and collections, and demonstrates dependency injection patterns for object creation.","{'constants': ['Defines constants for iteration'], 'types': ['Custom types for iterating'], 'classes': ['Iterator interface defines iteration contract'], 'functions': ['compareTo allows comparing objects']}"
scispacy/abbreviation.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/abbreviation.py,"[{'name': 'Data Access Layer', 'match_type': 'partial', 'implemented_parts': ['Database connection', 'CRUD operations'], 'confidence': 0.95, 'evidence': ['sql statements', 'connection pool', 'repository pattern']}, {'name': 'Caching Strategy', 'match_type': 'full', 'implemented_parts': ['Cache implementation', 'Cache refresh'], 'confidence': 1.0, 'evidence': ['hash tables', 'cache expiration', 'invalidate cache']}]",This file defines the data access layer for an application.,"{'constants': ['Database connection parameters'], 'types': ['Data models representing database entities'], 'classes': ['DataAccess class handles data access operations'], 'functions': ['fetch data', 'insert/update/delete records']}"
scispacy/base_project_code.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/base_project_code.py,"[{'name': 'Augmentation Pipeline', 'match_type': 'full', 'implemented_parts': ['Text augmentation techniques', 'Language model integration'], 'confidence': 0.95, 'evidence': ['importing transformers library', 'text_transformer function', 'language model training data']}, {'name': 'Mixed Corpus', 'match_type': 'full', 'implemented_parts': ['Data mixing strategy', 'Main corpus enrichment'], 'confidence': 0.85, 'evidence': ['mixing main corpus with mixin_corpus', 'data_percent parameter for mixing ratio', 'iter_sample function for batching']}]",This code snippet defines two data augmentation techniques for language models.,"{'constants': ['Mixin data path', 'Data percentage'], 'types': ['Language model', 'Corpus'], 'classes': ['Example class for training instances'], 'functions': ['main_corpus iterates over main data', 'mixin_corpus adds mixin data']}"
scispacy/candidate_generation.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/candidate_generation.py,"[{'name': 'Dependency Injection', 'match_type': 'partial', 'implemented_parts': ['constructor injection', 'field injection'], 'confidence': 0.95, 'evidence': ['constructor receives dependencies', 'field annotated with @Inject']}, {'name': 'Factory Method', 'match_type': 'full', 'implemented_parts': ['create method', 'abstract factory'], 'confidence': 1.0, 'evidence': ['method returns derived type', 'factory class implements interface']}]",This file implements dependency injection and factory methods for object creation.,"{'constants': ['Defines constants for dependency types'], 'types': ['Abstract factory and derived types'], 'classes': ['AbstractFactory class', 'ConcreteFactory classes'], 'functions': ['create method', 'inject dependencies']}"
scispacy/consts.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/consts.py,[],This file defines a collection of commonly used abbreviations.,"{'constants': ['List of abbreviations for various terms'], 'types': [], 'classes': [], 'functions': []}"
scispacy/custom_sentence_segmenter.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_sentence_segmenter.py,"[{'name': 'Sentence boundary detection', 'match_type': 'full', 'implemented_parts': ['Sentence segmentation', 'Token annotation'], 'confidence': 0.95, 'evidence': ['PysBD library', 'Sentence start detection based on char offsets']}]",This code adds sentence boundaries to spaCy documents using the pysBD library.,"{'constants': [], 'types': [], 'classes': [], 'functions': ['Annotates sentence start for each token']}"
scispacy/custom_tokenizer.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/custom_tokenizer.py,"[{'name': 'Tokenizer Configuration', 'match_type': 'full', 'implemented_parts': ['Custom tokenization rules for specific characters and patterns'], 'confidence': 1.0, 'evidence': ['Splitting on specific punctuation marks', 'Handling ellipses and icons', ""Matching strings like 's' and 'S'"", 'Recognizing various units and currency symbols']}]",Customizes the tokenization process for improved accuracy in identifying meaningful units of text.,"{'constants': ['Defined tokenization rules'], 'types': ['Custom token type for recognized units'], 'classes': ['Tokenizer class with custom rules'], 'functions': ['Custom tokenization function for specific patterns']}"
scispacy/file_cache.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/file_cache.py,"[{'name': 'Repository', 'match_type': 'partial', 'implemented_parts': ['CRUD methods', 'data persistence', 'dependency injection'], 'confidence': 0.9, 'evidence': ['interface with database', 'transaction handling', 'data access layer']}, {'name': 'Decorator', 'match_type': 'full', 'implemented_parts': ['decorator class', 'method wrapping', 'runtime customization'], 'confidence': 1.0, 'evidence': ['metaprogramming techniques', 'dynamic method dispatch', 'inheritance extension']}]",This file implements a repository pattern for managing data access.,"{'constants': ['Defines data-related constants'], 'types': ['Domain models representing data entities'], 'classes': ['Repository class provides CRUD operations'], 'functions': ['save', 'get', 'update', 'delete']}"
scispacy/hyponym_detector.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/hyponym_detector.py,"[{'name': 'Hypernym-Hyponym', 'match_type': 'partial', 'implemented_parts': ['Subject-Predicate-Object pattern', 'Dependency parsing'], 'confidence': 0.95, 'evidence': ['Uses dependency parsing to identify compound nouns', 'Extracts hypernym-hyponym relationships from predicate-argument structure', 'Expands noun phrases to capture broader contexts']}]",Identifies hypernym-hyponym relationships within text.,"{'constants': ['List of stop words'], 'types': ['Doc object representing the text'], 'classes': ['HearstPattern class for storing identified patterns'], 'functions': ['Runs matcher on Doc object to identify patterns']}"
scispacy/linking.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking.py,"[{'name': 'Candidate Generation', 'match_type': 'partial', 'implemented_parts': ['CandidateGenerator class', 'mention processing', 'candidates scoring'], 'confidence': 0.95, 'evidence': ['CandidateGenerator class takes mentions and number k as input', 'Mention processing extracts spans from documents', 'Candidates are ranked based on similarity scores']}, {'name': 'Knowledge Base Integration', 'match_type': 'partial', 'implemented_parts': ['cui linking', 'definition retrieval'], 'confidence': 0.85, 'evidence': ['Candidate concepts are linked to KB entities', 'Definitions are retrieved for concepts with missing definitions', 'Score threshold filters candidates based on definition availability']}]",This code snippet implements a candidate generation and knowledge base integration system.,"{'constants': ['Thresholds for candidate selection'], 'types': ['Candidate concepts'], 'classes': ['CandidateGenerator class'], 'functions': ['CandidateGenerator generates candidate concepts from document mentions']}"
scispacy/linking_utils.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/linking_utils.py,"[{'name': 'KnowledgeBase', 'match_type': 'full', 'implemented_parts': ['file path handling', 'data loading'], 'confidence': 0.95, 'evidence': ['super().__init__() method', 'file_path parameter']}, {'name': 'UMLS Semantic Type Tree', 'match_type': 'partial', 'implemented_parts': ['tree construction from TSV file'], 'confidence': 0.85, 'evidence': ['construct_umls_tree_from_tsv function']}, {'name': 'KnowledgeBase Inheritance', 'match_type': 'partial', 'implemented_parts': ['base class inheritance'], 'confidence': 0.9, 'evidence': ['super().__init__() call in subclasses']}]",This code defines a KnowledgeBase class that provides an interface for accessing and manipulating knowledge bases.,"{'constants': ['DEFAULT_UMLS_PATH', 'DEFAULT_UMLS_TYPES_PATH'], 'types': ['KnowledgeBase class', 'UMLSSemanticTypeTree'], 'classes': ['Base KnowledgeBase class', 'UMLS-specific subclasses'], 'functions': ['Loading knowledge bases from files']}"
scispacy/per_class_scorer.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/per_class_scorer.py,"[{'name': 'Iterator pattern', 'match_type': 'partial', 'implemented_parts': ['Iterator interface', 'iterator method'], 'confidence': 0.9, 'evidence': ['class AbstractIterator', 'iterator method with collection argument']}, {'name': 'Decorator pattern', 'match_type': 'full', 'implemented_parts': ['Decorator class', 'wrapping method'], 'confidence': 1.0, 'evidence': ['class Decorator takes receiver as argument', ""wrapping method around receiver's method""]}]",This file implements various utility classes for common operations.,"{'constants': ['Defines constants for collection sizes'], 'types': ['Custom types for collections'], 'classes': ['AbstractIterator interface defines iteration methods'], 'functions': ['iterator method creates an iterator object']}"
scispacy/train_utils.py,FileType.FILE,allenai,scispacy,v0.5.5,https://allenai.github.io/scispacy/,https://github.com/allenai/scispacy/tree/v0.5.5/scispacy/train_utils.py,"[{'name': 'Language Evaluation', 'match_type': 'partial', 'implemented_parts': ['Evaluate NER', 'Scorer'], 'confidence': 0.95, 'evidence': ['import Language', 'evaluate_ner function', 'PerClassScorer class', 'Evaluation with trained model and gold spans']}, {'name': 'Metrics Reporting', 'match_type': 'partial', 'implemented_parts': ['Metrics collection', 'Dumping results'], 'confidence': 0.85, 'evidence': ['get_metric function', 'Dumping metrics to file', 'Printing metrics periodically']}]",This file evaluates Named Entity Recognition (NER) performance on a given dataset.,"{'constants': ['Evaluation parameters'], 'types': ['Language model', 'Evaluation data'], 'classes': ['Scorer class tracks NER performance'], 'functions': ['evaluate_ner function runs evaluation', 'get_metric function collects performance metrics']}"
