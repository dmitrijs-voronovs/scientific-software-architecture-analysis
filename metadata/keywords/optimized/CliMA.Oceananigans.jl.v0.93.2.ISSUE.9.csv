quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Testability,": 16× 16× 16 AnisotropicDiffusivity [CPU, Float64]...; Running benchmark: 16× 16× 16 SmagorinskyLilly [CPU, Float64]...; Running benchmark: 16× 16× 16 VerstappenAnisotropicMinimumDissipation [CPU, Float64]...; Running benchmark: 16× 16× 16 IsotropicDiffusivity [GPU, Float64]...; Running benchmark: 16× 16× 16 AnisotropicDiffusivity [GPU, Float64]...; Running benchmark: 16× 16× 16 SmagorinskyLilly [GPU, Float64]...; Running benchmark: 16× 16× 16 VerstappenAnisotropicMinimumDissipation [GPU, Float64]... Oceananigans v0.34.1; 1 module _Test_turbulence_closures_; 2 using Printf; 3 using TimerOutputs; 4 using Oceananigans; 5 using Oceananigans.TurbulenceClosures; 6 using Oceananigans.Utils; 7 ; 8 include(""benchmark_utils.jl""); 9 ; 10 #####; 11 ##### Benchmark setup and parameters; 12 #####; 13 ; 14 const timer = TimerOutput(); 15 ; 16 Nt = 10 # Number of iterations to use for benchmarking time stepping.; 17 ; 18 # Run benchmark across these parameters.; 19 Ns = [(16, 16, 16)]; 20 float_types = [Float64] # Float types to benchmark.; 21 archs = [CPU()] # Architectures to benchmark on.; 22 @hascuda archs = [CPU(), GPU()] # Benchmark GPU on systems with CUDA-enabled GPUs.; 23 closures = [IsotropicDiffusivity, AnisotropicDiffusivity, SmagorinskyLilly,; 24 	 VerstappenAnisotropicMinimumDissipation]; 25 ; 26 #####; 27 ##### Run benchmarks; 28 #####; 29 ; 30 for arch in archs, FT in float_types, N in Ns, Closure in closures; 31 	grid = RegularCartesianGrid(FT, size=N, extent=(1, 1, 1)); 32 model = IncompressibleModel(architecture=arch, float_type=FT, grid=grid, closure=Closure(FT)); 33 ; 34 time_step!(model, 1) # precompile; 35 ; 36 bn = benchmark_name(N, string(Closure), arch, FT); 37 @printf(""Running benchmark: %s...\n"", bn); 38 for i in 1:Nt; 39 @timeit timer bn time_step!(model, 1); 40 end; 41 end; 42 ; 43 #####; 44 ##### Print benchmark results; 45 #####; 46 ; 47 println(); 48 println(oceananigans_versioninfo()); 49 println(versioninfo_with_gpu()); 50 print_timer(timer, titl",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:112018,benchmark,benchmark,112018,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['benchmark'],['benchmark']
Testability,": 85px; color: white; font-size: 12px; padding: 0px 0px 15px; width: 1108px;""><div class=""JobLogOutputComponent__Body"" style=""box-sizing: border-box; font-family: SFMono-Regular, Monaco, Menlo, Consolas, &quot;Liberation Mono&quot;, Courier, monospace;"">; > ; > $ trap 'kill -- $' INT TERM QUIT; wget -N -P /storage7/buildkite-agent https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.1-linux-x86_64.tar.gz; > ; >   | tar xf /storage7/buildkite-agent/julia-1.6.1-linux-x86_64.tar.gz -C /storage7/buildkite-agent; >   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.instantiate(; verbose=true)'; >   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.precompile()'; >   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.status()'; >   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'; >   | /storage7/buildkite-agent/julia-1.6.1/bin/julia -O0 --color=yes --project -e 'using MPI; MPI.install_mpiexecjl()'; >   | --2021-07-31 21:29:43-- https://julialang-s3.julialang.org/bin/linux/x64/1.6/julia-1.6.1-linux-x86_64.tar.gz; >   | Resolving julialang-s3.julialang.org (julialang-s3.julialang.org)... 199.232.38.49, 2a04:4e42:46::561; >   | Connecting to julialang-s3.julialang.org (julialang-s3.julialang.org)\|199.232.38.49\|:443... connected.; >   | HTTP request sent, awaiting response... 304 Not Modified; >   | File ‘/storage7/buildkite-agent/julia-1.6.1-linux-x86_64.tar.gz’ not modified on server. Omitting download.; >   |  ; >   | Downloading artifact: MPICH; >   | Downloading artifact: MPICH; >   | ERROR: Unable to automatically install 'MPICH' from '/storage7/buildkite-agent/.julia-3575/packages/MPICH_jll/6N1Sn/Artifacts.toml'; >   | Stacktrace:; >   | [1] error(s::String); >   | @ Base ./error.jl:33; >   | [2] ensure_artifact_installed(name::String, meta::Dict{String, Any}, artifacts_t",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1915#issuecomment-890522628:1671,test,test,1671,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1915#issuecomment-890522628,1,['test'],['test']
Testability,": Forcing functions will not be serialized!; [Checkpointer] Serializing model to disk: ./test_model_checkpoint_0.jld; [Checkpointer] Reconstructing FFT plans...; WARNING: Forcing functions will not be serialized!; [Checkpointer] Serializing model to disk: ./test_model_checkpoint_5.jld; [Checkpointer] Reconstructing FFT plans...; Deserializing model from disk: test_model_checkpoint_5.jld; ┌ Warning: type Oceananigans.FaceFieldX{OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}},Oceananigans.RegularCartesianGrid{Core.Float64,Base.StepRangeLen{Core.Float64,Base.TwicePrecision{Core.Float64},Base.TwicePrecision{Core.Float64}}}} not present in workspace; reconstructing; └ @ JLD ~/.julia/packages/JLD/1BoSz/src/jld_types.jl:703; ┌ Warning: type OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}} not present in workspace; reconstructing; └ @ JLD ~/.julia/packages/JLD/1BoSz/src/jld_types.jl:703; Checkpointing: Error During Test at /home/alir/Oceananigans.jl/test/runtests.jl:293; Got exception outside of a @test; MethodError: Cannot `convert` an object of type getfield(JLD, Symbol(""##Oceananigans.FaceFieldX{OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}},Oceananigans.RegularCartesianGrid{Core.Float64,Base.StepRangeLen{Core.Float64,Base.TwicePrecision{Core.Float64},Base.TwicePrecision{Core.Float64}}}}#384"")) to an object of type FaceFieldX; Closest candidates are:; convert(::Type{T}, !Matched::T) where T at essentials.jl:154; Stacktrace:; [1] jlconvert(::Type{VelocityFields}, ::JLD.JldFile, ::Ptr{UInt8}) at /home/alir/.julia/packages/JLD/1BoSz/src/jld_types.jl:434; [2] read_scalar(::JLD.JldDataset, ::HDF5.HDF5Datatype, ::Type) at /home/alir/.julia/packages/JLD/1BoSz/src/JLD.jl:398; [3] read(::JLD.JldDataset) at /home/alir/.julia/packages/JLD/1BoSz/src/JLD.jl:370; [4] read_ref(::JLD.JldFile, ::HDF5.HDF5ReferenceObj) at /home/alir/.julia/packages/JLD/1BoSz/src/JLD.jl:502; [5] jlconvert(::Type{Model{CPU}}, ::JLD.JldFile, ::Ptr{UI",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/177:1201,test,test,1201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/177,1,['test'],['test']
Testability,://codecov.io/gh/CliMA/Oceananigans.jl/commit/d1008534316cf7cfe509ae725b9fdc2582cb2a9b?el=desc) will **increase** coverage by `2.57%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #1047 +/- ##; ==========================================; + Coverage 69.73% 72.31% +2.57% ; ==========================================; Files 160 228 +68 ; Lines 3512 6562 +3050 ; ==========================================; + Hits 2449 4745 +2296 ; - Misses 1063 1817 +754 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.25% <0.00%> (ø)` | |; | [test/test\_buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2J1b3lhbmN5Lmps) | `100.00% <0.00%> (ø)` | |; | [...ergence\_tests/one\_dimensional\_advection\_schemes.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9hZHZlY3Rpb25fc2NoZW1lcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <0.00%> (ø)` | |; | [...ests/ConvergenceTests/DoublyPeriodicTaylorGreen.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvRG91Ymx5UGVyaW9kaWNUYXlsb3JHcmVlbi5qbA==) | `0.00% <0.00%> (ø)` | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/1047/diff?src=pr&el=tree#diff-ZXhhbXBsZXM,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132:1194,test,test,1194,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1047#issuecomment-707893132,2,['test'],['test']
Testability,"::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] (),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:327; &nbsp; | [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:314; &nbsp; | [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; &nbsp; | [7] test(; name::Nothing, uuid::Nothing, version::Nothing, url::Nothing, rev::Nothing, path::Nothing, mode::Pkg.Types.PackageMode, subdir::Nothing, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:80; &nbsp; | [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; &nbsp; | [9] top-level scope at none:1; &nbsp; | ::test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; &nbsp; | [2] coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; &nbsp; | [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{ERROR: failed p",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:3927,test,test,3927,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,1,['test'],['test']
Testability,"::RegularRectilinearGrid) = grid.Δz; +@inline Δzᶜᶠᶜ(i, j, k, grid::VerticallyStretchedRectilinearGrid) = @inbounds grid.Δzᵃᵃᶜ[k]; +; #####; ##### ""Spacings"" in Flat directions for rectilinear grids.; ##### Here we dispatch all spacings to `one`. This abuse of notation; diff --git a/test/runtests.jl b/test/runtests.jl; index 246192f6..d9d520f0 100644; --- a/test/runtests.jl; +++ b/test/runtests.jl; @@ -131,6 +131,7 @@ group = get(ENV, ""TEST_GROUP"", :all) |> Symbol; include(""test_vertical_vorticity_field.jl""); include(""test_implicit_free_surface_solver.jl""); include(""test_hydrostatic_free_surface_immersed_boundaries_apply_surf_bc.jl""); + include(""test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl""); end; end; ; diff --git a/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl b/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; new file mode 100644; index 00000000..5241929b; --- /dev/null; +++ b/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; @@ -0,0 +1,56 @@; +using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; +using Oceananigans.TurbulenceClosures: VerticallyImplicitTimeDiscretization; +; +@testset ""Immersed boundaries with hydrostatic free surface models"" begin; + @info ""Testing immersed boundaries vertical integrals""; +; + for arch in archs; + Nx = 5; + Ny = 5; +; + # A spherical domain; + underlying_grid =; + RegularRectilinearGrid(size=(Nx, Ny, 3), extent=(Nx, Ny, 3), topology=(Periodic,Periodic,Bounded)); +; + B = [-3. for i=1:Nx, j=1:Ny ]; + B[2:Nx-1,2:Ny-1] .= [-2. for i=2:Nx-1, j=2:Ny-1 ]; + B[3:Nx-2,3:Ny-2] .= [-1. for i=3:Nx-2, j=3:Ny-2 ]; + grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(B)); +; + free_surface = ImplicitFreeSurface(gravitational_acceleration=0.1); +; + model = HydrostaticFreeSurfaceModel(grid = grid,; + architecture = arch,; + #free_surface = ExplicitFreeSurface(),; + #free_surface = ImplicitFreeSu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406:4521,test,test,4521,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406,1,['test'],['test']
Testability,":Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; Test Summary: | Pass Fail Total; Oceananigans | 4 2 6; Shallow Water Regression | 4 2 6; Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation] | 2 1 3; Shallow Water Bickley jet simulation [GPU, ConservativeFormulation] | 2 1 3; ERROR: LoadError: Some tests did not pass: 4 passed, 2 failed, 0 errored, 0 broken.; in expression starting at /g/data/v45/nc3020/OC.jl/test/runtests.jl:3; ERROR: Package Oceananigans errored during testing. (Oceananigans) pkg> st; Project Oceananigans v0.76.5; Status `/g/data/v45/nc3020/OC.jl/Project.toml`; [79e6a3ab] Adapt v3.3.3; [052768ef] CUDA v3.10.0; [72cfdca4] CUDAKernels v0.3.3; [a8cc5b0e] Crayons v4.1.1; [7445602f] CubedSphere v0.2.0; [ffbed154] DocStringExtensions v0.8.6; [7a1cc6ca] FFTW v1.4.6; [c27321d9] Glob v1.3.0; [40713840] IncompleteLU v0.2.0; [42fd0dbc] IterativeSolvers v0.9.2; [033835bb] JLD2 v0.4.22; [63c18a36] KernelAbstractions v0.7.2; [da04e1cc] MPI v0.19.2; [85f8d34a] NCDatasets v0.12.4; [6fe1bfb0] OffsetArrays v1.11.2; [bac558e1] OrderedCollections v1.4.1; [0e08944d] PencilArrays v0.17.2; [4a48f351] PencilFFTs v0.13.6; [6038ab10] Rotations v1.3.1; [1bc83da4] SafeTestsets v0.0.1; [d496a93d] SeawaterPolynomials v0.2.3; [09ab397b] StructArrays v0.6.7; [bc48ee85] Tullio v0.3.4; [ade2ca70] Dates; [b77e0a4c] InteractiveUtils; [37e2e46d] LinearAlgebra; [56ddb016] Logging; [44cfe95a] Pkg; [de0858da] Printf;",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:17484,test,test,17484,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,":v, :w), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}, Oceananigans.Fields.ZeroField{Int64, 3}}}, NamedTuple{(:b,), Tuple{Oceananigans.Fields.ZeroField{Int64, 3}}}}}, NamedTuple{(:u, :v, :w), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, NamedTuple{(:b,), Tuple{OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}}}, Tuple{Nothing, Nothing}, NamedTuple{(:u, :v, :w, :b), NTuple{4, typeof(Oceananigans.Forcings.zeroforcing)}}, OffsetArrays.OffsetArray{Float64, 3, CUDA.CuDeviceArray{Float64, 3, 1}}, NamedTuple{(:time, :iteration, :stage), Tuple{Float64, Int64, Int64}}) resulted in invalid LLVM IR; Reason: unsupported dynamic function invocation (call to overdub); ```. Click to download the full [log file](https://github.com/CliMA/Oceananigans.jl/files/8258026/log.txt). I had no problem to run this with CPU or constant coefficients. Below is the full code for the simulation I am running:. ```; using Plots; using LaTeXStrings; using Oceananigans; using Oceananigans.Units. Ny = 4000 # number of points in y; Nz = 50 # number of points in z; H = 1000 # maximum depth. grid = RectilinearGrid(GPU(),; size=(Ny, Nz),; halo=(3,3),; y=(0, Ny*kilometers), ; z=(H * cos.(LinRange(π/2,0,Nz+1)) .- H)meters,; topology=(Flat, Bounded, Bounded); ). coriolis = BetaPlane(β=2.3e-11,latitude=0) # equatorial beta plane. width=100kilometers; @inline ν(x,y,z,t) = ifelse(abs(y-Ny*kilometers/2)<Ny*kilometers/2-width, 1, 10) # sponge layers; horizontal_closure = HorizontalScalarDiffusivity(ν=ν, κ=ν); vertical_closure = ScalarDiffusivity(ν=1e-4, κ=1e-4). model = NonhydrostaticModel(grid = grid,; advection = UpwindBiasedFifthOrder(),; coriolis = coriolis,; closure=(horizontal_closure,vertical_closure),; tracers=:b, buoyancy=BuoyancyTracer()). h = 50meters # mld; Hv ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2359:3788,log,log,3788,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2359,1,['log'],['log']
Testability,"; ## master #956 +/- ##; ==========================================; + Coverage 72.52% 72.55% +0.03% ; ==========================================; Files 203 204 +1 ; Lines 5944 5962 +18 ; ==========================================; + Hits 4311 4326 +15 ; - Misses 1633 1636 +3 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/AbstractOperations/interpolation\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9pbnRlcnBvbGF0aW9uX3V0aWxzLmps) | `64.51% <0.00%> (-6.92%)` | :arrow_down: |; | [src/Fields/Fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9GaWVsZHMuamw=) | `75.00% <ø> (ø)` | |; | [src/AbstractOperations/binary\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9iaW5hcnlfb3BlcmF0aW9ucy5qbA==) | `92.30% <100.00%> (+0.20%)` | :arrow_up: |; | [src/Fields/pressure\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9wcmVzc3VyZV9maWVsZC5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.38% <100.00%> (+0.04%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956?src=pr&el=footer). Last update [d6ce0fe...fbba909](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/956?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/956#issuecomment-694370946:1826,test,test,1826,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/956#issuecomment-694370946,2,['test'],['test']
Testability,"; ---; > git-tree-sha1 = ""6842ce83a836fbbc0cfeca0b5a4de1a4dcbdb8d1""; 675c712; < version = ""2.2.7""; ---; > version = ""2.2.8""; 748c785; < git-tree-sha1 = ""30449ee12237627992a99d5e30ae63e4d78cd24a""; ---; > git-tree-sha1 = ""3bac05bc7e74a75fd9cba4295cde4045d9fe2386""; 750c787; < version = ""1.2.0""; ---; > version = ""1.2.1""; 759c796; < git-tree-sha1 = ""04bdff0b09c65ff3e06a05e3eb7b120223da3d39""; ---; > git-tree-sha1 = ""0e7508ff27ba32f26cd459474ca2ede1bc10991f""; 761c798; < version = ""1.4.0""; ---; > version = ""1.4.1""; 771c808; < git-tree-sha1 = ""c60ec5c62180f27efea3ba2908480f8055e17cee""; ---; > git-tree-sha1 = ""5165dfb9fd131cf0c6957a3a7605dede376e7b63""; 773c810; < version = ""1.1.1""; ---; > version = ""1.2.0""; 895c932; < git-tree-sha1 = ""a1f34829d5ac0ef499f6d84428bd6b4c71f02ead""; ---; > git-tree-sha1 = ""cb76cf677714c095e535e3501ac7954732aeea2d""; 897c934; < version = ""1.11.0""; ---; > version = ""1.11.1""; 927,928c964; < deps = [""Random"", ""Test""]; < git-tree-sha1 = ""9a6ae7ed916312b41236fcef7e0af564ef934769""; ---; > git-tree-sha1 = ""1fbeaaca45801b4ba17c251dd8603ef24801dd84""; 930c966,970; < version = ""0.9.13""; ---; > version = ""0.10.2""; > weakdeps = [""Random"", ""Test""]; >; > [deps.TranscodingStreams.extensions]; > TestExt = [""Test"", ""Random""]; 987a1028,1033; > [[deps.libevent_jll]]; > deps = [""Artifacts"", ""JLLWrappers"", ""Libdl"", ""OpenSSL_jll""]; > git-tree-sha1 = ""f04ec6d9a186115fb38f858f05c0c4e1b7fc9dcb""; > uuid = ""1080aeaf-3a6a-583e-a51c-c537b09f60ec""; > version = ""2.1.13+1""; >; 996a1043,1048; >; > [[deps.prrte_jll]]; > deps = [""Artifacts"", ""Hwloc_jll"", ""JLLWrappers"", ""Libdl"", ""PMIx_jll"", ""libevent_jll""]; > git-tree-sha1 = ""5adb2d7a18a30280feb66cad6f1a1dfdca2dc7b0""; > uuid = ""eb928a42-fffd-568d-ab9c-3f5d54fc65b9""; > version = ""3.0.2+0""; ```. </details>. There are quite a few differences to some suspicious packages (eg those involved in LLVM) so... (PS, is there a better way to compare Manifests? I wonder.). It might not be anything to do with our code. Nevertheless, @navidcy and I comb",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361:10768,Test,Test,10768,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1807091361,1,['Test'],['Test']
Testability,; ==========================================; + Coverage 71.22% 71.77% +0.55% ; ==========================================; Files 188 192 +4 ; Lines 5251 5552 +301 ; ==========================================; + Hits 3740 3985 +245 ; - Misses 1511 1567 +56 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/905?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/AbstractOperations/show\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/905/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9zaG93X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `16.66% <ø> (ø)` | |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/905/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <ø> (ø)` | |; | [src/Grids/regular\_cartesian\_grid.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/905/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL3JlZ3VsYXJfY2FydGVzaWFuX2dyaWQuamw=) | `96.96% <100.00%> (+15.15%)` | :arrow_up: |; | [test/test\_grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/905/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2dyaWRzLmps) | `100.00% <100.00%> (ø)` | |; | [src/BoundaryConditions/boundary\_function.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/905/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9ib3VuZGFyeV9mdW5jdGlvbi5qbA==) | `81.48% <0.00%> (-4.24%)` | :arrow_down: |; | [...lementations/anisotropic\_biharmonic\_diffusivity.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/905/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL2FuaXNvdHJvcGljX2JpaGFybW9uaWNfZGlmZnVzaXZpdHkuamw=) | `96.66% <0.00%> (-3.34%)` | :arrow_down: |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/905/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `94.20% <0.00%> (-1.04%)` | :arrow_down: |; | [...rbulenceClosures/turbulence\_closure\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pu,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/905#issuecomment-686484714:1632,test,test,1632,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/905#issuecomment-686484714,2,['test'],['test']
Testability,; ==========================================; + Coverage 71.67% 71.91% +0.23% ; ==========================================; Files 184 124 -60 ; Lines 4781 2482 -2299 ; ==========================================; - Hits 3427 1785 -1642 ; + Misses 1354 697 -657 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.22% <66.66%> (+0.48%)` | :arrow_up: |; | [src/OutputWriters/output\_writer\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `64.28% <100.00%> (+5.31%)` | :arrow_up: |; | [...ion/convergence\_tests/ConvergenceTests/analysis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvYW5hbHlzaXMuamw=) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [...nvergence\_tests/ConvergenceTests/file\_wrangling.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvZmlsZV93cmFuZ2xpbmcuamw=) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [...\_tests/ConvergenceTests/TwoDimensionalDiffusion.jl](https://codecov.io/gh/CliMA/O,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968:1680,test,test,1680,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968,2,['test'],['test']
Testability,"; > - Use Dicts in NaN checker and give a sensible default; > - Add test for NaN checker; > - Architecture-dispatching zeros function for any 3D shape; > - Parallel cumulative sum CUDA kernel for horizontal averages.; > - Diagnostic for computing horizontally averaged vertical profiles.; > - Computing horizontal means on the GPU; > - Aha just use the Poisson solver storage for tmp reduction array; > - Finishing touches on vertical profiler; > - Test for horizontally averaged vertical profile; > - Add const second = 1 lol; > - Fix usual typos; >; > File Changes; >; > - *M* src/Oceananigans.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/352/files#diff-0>; > (4); > - *M* src/diagnostics.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/352/files#diff-1>; > (169); > - *M* src/output_writers.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/352/files#diff-2>; > (2); > - *M* src/planetary_constants.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/352/files#diff-3>; > (1); > - *M* src/utils.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/352/files#diff-4>; > (6); > - *M* test/runtests.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/352/files#diff-5>; > (1); > - *A* test/test_diagnostics.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/352/files#diff-6>; > (46); >; > Patch Links:; >; > - https://github.com/climate-machine/Oceananigans.jl/pull/352.patch; > - https://github.com/climate-machine/Oceananigans.jl/pull/352.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/pull/352?email_source=notifications&email_token=AKXUEQWYMACBLRAXFNYWEFDQD47ALA5CNFSM4IK2PVG2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4HERXFDA>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKXUEQUCDFLNKXBQNBAUFS3QD47ALANCNFSM4IK2PVGQ>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520187010:4748,test,test,4748,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520187010,2,['test'],['test']
Testability,"; FFT-based Poisson solver relative performance (GPU); ┌───────────────┬─────┬────────────────────────────────┬──────────┬─────────┬─────────┐; │ Architectures │ Ns │ Topologies │ slowdown │ memory │ allocs │; ├───────────────┼─────┼────────────────────────────────┼──────────┼─────────┼─────────┤; │ GPU │ 192 │ (Bounded, Bounded, Bounded) │ 4.83605 │ 76.8 │ 29.1613 │; │ GPU │ 192 │ (Bounded, Bounded, Periodic) │ 3.90501 │ 52.5714 │ 21.0 │; │ GPU │ 192 │ (Bounded, Periodic, Bounded) │ 3.91006 │ 52.4 │ 20.8065 │; │ GPU │ 192 │ (Bounded, Periodic, Periodic) │ 5.59024 │ 25.4571 │ 9.48387 │; │ GPU │ 192 │ (Periodic, Bounded, Bounded) │ 3.88581 │ 52.5714 │ 21.0 │; │ GPU │ 192 │ (Periodic, Bounded, Periodic) │ 2.96267 │ 28.0 │ 12.4516 │; │ GPU │ 192 │ (Periodic, Periodic, Bounded) │ 2.03389 │ 25.4571 │ 9.48387 │; │ GPU │ 192 │ (Periodic, Periodic, Periodic) │ 1.0 │ 1.0 │ 1.0 │; └───────────────┴─────┴────────────────────────────────┴──────────┴─────────┴─────────┘; ```. # Static ocean benchmarks for all topologies. ## Raw numbers. ```; Topologies benchmarks; ┌───────────────┬─────┬────────────────────────────────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼────────────────────────────────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┤; │ CPU │ 192 │ (Bounded, Bounded, Bounded) │ 2.402 s │ 2.412 s │ 2.413 s │ 2.424 s │ 405.84 KiB │ 2460 │; │ CPU │ 192 │ (Bounded, Bounded, Periodic) │ 2.247 s │ 2.250 s │ 2.252 s │ 2.259 s │ 363.28 KiB │ 2162 │; │ CPU │ 192 │ (Bounded, Periodic, Bounded) │ 1.890 s │ 1.890 s │ 1.890 s │ 1.890 s │ 363.28 KiB │ 2162 │; │ CPU │ 192 │ (Bounded, Periodic, Periodic) │ 1.923 s │ 1.933 s │ 1.931 s │ 1.936 s │ 317.00 KiB │ 1806 │; │ CPU │ 192 │ (Periodic, Bounded, Bounded) │ 1.864 s │ 1.869 s │ 1.868 s │ 1.871 s │ 363.28 KiB │ 2162 │; │ CPU │ 192 │ (Periodic, Bounded, Periodic) │ 1.685 s │ 1.686 s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296:5688,benchmark,benchmarks,5688,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-773394296,1,['benchmark'],['benchmarks']
Testability,"; Found 19 tag-pointing refs : refs/tags/v0.10.0, refs/tags/v0.10.1, refs/tags/v0.11.0, ...; Found 273 commit-pointing refs : HEAD, refs/heads/ar/lid-driven-cavity, refs/heads/ar/more-solvers, ... Protected commits; -----------------. These are your protected commits, and so their contents will NOT be altered:. * commit 91e5626e (protected by 'HEAD'). Cleaning; --------. Found 3270 commits; Cleaning commits: 100% (3270/3270); Cleaning commits completed in 35,468 ms. Updating 255 Refs; -----------------. Ref Before After ; ------------------------------------------------------------------------------; refs/heads/ar/lid-driven-cavity | 8eae1762 | 0401753a; refs/heads/ar/more-solvers | 5446ae47 | 4cf1d809; refs/heads/ar/vertically-stretched-grid | 695eb278 | 50fbc9d0; refs/heads/arbitrary-tracers-inner-loops | 2440af95 | c3c4ce7b; refs/heads/forced-flow-test | 5355044d | 4771446c; refs/heads/gh-pages | 3ecbff38 | da919955; refs/heads/glw/beaufort-gyre-example | 0e54d846 | 6fa7725a; refs/heads/glw/circulation-experiment | de5764b9 | a53c1648; refs/heads/glw/craik-leibovich-terms | 972fbd17 | 956d4739; refs/heads/glw/eady-example | c53227c8 | d8d29f47; refs/heads/glw/fix-eady-typos | 84e7d974 | f43c5dde; refs/heads/glw/mesoscale-closures | 1d0090ec | 62b6fc9c; refs/heads/glw/mesoscale-closures-biharmonic-diffusivity | 7a765f2a | fe555ef7; refs/heads/glw/mesoscale-closures-kernel-refactor | 43886b98 | 187742f0; refs/heads/glw/mesoscale-closures-leith | 54bcd904 | f1f57ae2; ... Updating references: 100% (255/255); ...Ref update completed in 3,524 ms. Commit Tree-Dirt History; ------------------------. Earliest Latest; | |; ................DmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmDDDD. D = dirty commits (file tree fixed); m = modified commits (commit message or parents changed); . = clean commits (no changes to file tree). Before After ; -------------------------------------------; First modified commit | a8b6b6cf | 69bcf932; Last dirty commit | 3ecbff38 | da919955. Deleted f",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/509#issuecomment-549156736:2088,test,test,2088,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/509#issuecomment-549156736,1,['test'],['test']
Testability,"; Static ocean benchmark: Test Failed at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:23; Expression: run_script(replace_strings, ""static_ocean"", benchmark_filepath(""static_ocean"")); Stacktrace:; [1] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:23; [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [3] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:16; [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [5] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:13; [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [7] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:10; Running channel benchmark: 16× 16× 16 [CPU, Float32]...; Running channel benchmark: 16× 16× 16 [CPU, Float64]...; Running channel benchmark: 16× 16× 16 [GPU, Float32]...; Running channel benchmark: 16× 16× 16 [GPU, Float64]... Oceananigans v0.34.1; 1 module _Test_channel_; 2 using Printf; 3 using TimerOutputs; 4 using Oceananigans; 5 using Oceananigans.Utils; 6 ; 7 include(""benchmark_utils.jl""); 8 ; 9 #####; 10 ##### Benchmark setup and parameters; 11 #####; 12 ; 13 const timer = TimerOutput(); 14 ; 15 Nt = 10 # Number of iterations to use for benchmarking time stepping.; 16 ; 17 # Model resolutions to benchmarks. Focusing on 3D models for GPU benchmarking.; 18 Ns = [(16, 16, 16)]; 19 float_types = [Float32, Float64] # Float types to benchmark.; 20 archs = [CPU()] # Architectures to benchmark on.; 21 @hascuda archs = [CPU(), GPU()] # Benchmark GPU on systems with CUDA-enabled GPUs.; 22 ; 23 #####; 24 ##### Run benchmarks; 25 #####; 26 ; 27 for arch in archs, FT in float_types, N in Ns; 28 	topology = (Period",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:107300,benchmark,benchmark,107300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['benchmark'],['benchmark']
Testability,"; deps = [""CEnum"", ""Libdl"", ""Printf"", ""Unicode""]; git-tree-sha1 = ""b616937c31337576360cb9fb872ec7633af7b194""; uuid = ""929cbde3-209d-540e-8aea-75f648917ca0""; version = ""3.6.0"". [[LazyArtifacts]]; deps = [""Pkg""]; git-tree-sha1 = ""4bb5499a1fc437342ea9ab7e319ede5a457c0968""; uuid = ""4af54fe1-eca0-43a8-85a7-787d91b784e3""; version = ""1.3.0"". [[LibCURL_jll]]; deps = [""LibSSH2_jll"", ""Libdl"", ""MbedTLS_jll"", ""Pkg"", ""Zlib_jll"", ""nghttp2_jll""]; git-tree-sha1 = ""897d962c20031e6012bba7b3dcb7a667170dad17""; uuid = ""deac9b47-8bc7-5906-a0fe-35ac56dc84c0""; version = ""7.70.0+2"". [[LibGit2]]; deps = [""Printf""]; uuid = ""76f85450-5226-5b5a-8eaa-529ad045b433"". [[LibSSH2_jll]]; deps = [""Libdl"", ""MbedTLS_jll"", ""Pkg""]; git-tree-sha1 = ""717705533148132e5466f2924b9a3657b16158e8""; uuid = ""29816b5a-b9ab-546f-933c-edad1886dfa8""; version = ""1.9.0+3"". [[Libdl]]; uuid = ""8f399da3-3557-5675-b5ff-fb832c97cbdb"". [[LinearAlgebra]]; deps = [""Libdl""]; uuid = ""37e2e46d-f89d-539d-b4ee-838fcccc9c8e"". [[Logging]]; uuid = ""56ddb016-857b-54e1-b83d-db4d58db5568"". [[MKL_jll]]; deps = [""Artifacts"", ""IntelOpenMP_jll"", ""JLLWrappers"", ""LazyArtifacts"", ""Libdl"", ""Pkg""]; git-tree-sha1 = ""c253236b0ed414624b083e6b72bfe891fbd2c7af""; uuid = ""856f044c-d86e-5d09-b602-aeab76dc8ba7""; version = ""2021.1.1+1"". [[MPI]]; deps = [""Distributed"", ""DocStringExtensions"", ""Libdl"", ""MPICH_jll"", ""MicrosoftMPI_jll"", ""OpenMPI_jll"", ""Pkg"", ""Random"", ""Requires"", ""Serialization"", ""Sockets""]; git-tree-sha1 = ""6e8c30afdcbb6167cf5d470b6333f4db01cc366f""; uuid = ""da04e1cc-30fd-572f-bb4f-1f8673147195""; version = ""0.17.2"". [[MPICH_jll]]; deps = [""CompilerSupportLibraries_jll"", ""Libdl"", ""Pkg""]; git-tree-sha1 = ""4d37f1e07b4e2a74462eebf9ee48c626d15ffdac""; uuid = ""7cb0a576-ebde-5e09-9194-50597f1243b4""; version = ""3.3.2+10"". [[MacroTools]]; deps = [""Markdown"", ""Random""]; git-tree-sha1 = ""6a8a2a625ab0dea913aba95c11370589e0239ff0""; uuid = ""1914dd2f-81c6-5fcd-8719-6d5c9610ff09""; version = ""0.5.6"". [[Markdown]]; deps = [""Base64""]; uuid = ""d6f4376e-aef5-505a-96c1-",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838:8668,Log,Logging,8668,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838,1,['Log'],['Logging']
Testability,"; error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); error in running finalizer: CUDA.CuError(code=CUDA.cudaError_enum(0x000002cf), meta=nothing); ERROR: Package Oceananigans errored during testing; Stacktrace:; [1] pkgerror(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:52; [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1578; [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:327; [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:314; [5] #test#61 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:67 [inlined]; [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1326:4526,test,testing,4526,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1326,1,['test'],['testing']
Testability,"; export Δyᶜᶜᵃ, Δyᶠᶜᵃ, Δyᶠᶠᵃ, Δyᶜᶠᵃ; export Axᵃᵃᶜ, Axᵃᵃᶠ, Axᶜᶜᶜ, Axᶠᶜᶜ, Axᶠᶠᶜ, Axᶠᶜᶠ, Axᶜᶠᶜ, Axᶜᶜᶠ; diff --git a/src/Operators/spacings_and_areas_and_volumes.jl b/src/Operators/spacings_and_areas_and_volumes.jl; index 8b7aaeb7..9988b320 100644; --- a/src/Operators/spacings_and_areas_and_volumes.jl; +++ b/src/Operators/spacings_and_areas_and_volumes.jl; @@ -46,6 +46,9 @@ The operators in this file fall into three categories:; @inline Δzᵃᵃᶜ(i, j, k, grid::RegularRectilinearGrid) = grid.Δz; @inline Δzᵃᵃᶜ(i, j, k, grid::VerticallyStretchedRectilinearGrid) = @inbounds grid.Δzᵃᵃᶜ[k]; ; +@inline Δzᶠᶜᶜ(i, j, k, grid::RegularRectilinearGrid) = grid.Δz; +@inline Δzᶜᶠᶜ(i, j, k, grid::VerticallyStretchedRectilinearGrid) = @inbounds grid.Δzᵃᵃᶜ[k]; +; #####; ##### ""Spacings"" in Flat directions for rectilinear grids.; ##### Here we dispatch all spacings to `one`. This abuse of notation; diff --git a/test/runtests.jl b/test/runtests.jl; index 246192f6..d9d520f0 100644; --- a/test/runtests.jl; +++ b/test/runtests.jl; @@ -131,6 +131,7 @@ group = get(ENV, ""TEST_GROUP"", :all) |> Symbol; include(""test_vertical_vorticity_field.jl""); include(""test_implicit_free_surface_solver.jl""); include(""test_hydrostatic_free_surface_immersed_boundaries_apply_surf_bc.jl""); + include(""test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl""); end; end; ; diff --git a/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl b/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; new file mode 100644; index 00000000..5241929b; --- /dev/null; +++ b/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl; @@ -0,0 +1,56 @@; +using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBottom; +using Oceananigans.TurbulenceClosures: VerticallyImplicitTimeDiscretization; +; +@testset ""Immersed boundaries with hydrostatic free surface models"" begin; + @info ""Testing immersed boundaries vertical integrals""; +; + for arch i",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406:3925,test,test,3925,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2049#issuecomment-966735406,1,['test'],['test']
Testability,"; | ######################################################################## 100.0%; &nbsp; | Downloading artifact: HDF5; &nbsp; | ######################################################################## 100.0%; &nbsp; | Downloading artifact: LibSSH2; &nbsp; | ######################################################################## 100.0%; &nbsp; | Downloading artifact: CompilerSupportLibraries; &nbsp; | ######################################################################## 100.0%; &nbsp; | Downloading artifact: MPICH; &nbsp; | ######################################################################## 100.0%; &nbsp; | Downloading artifact: LibCURL; &nbsp; | ######################################################################## 100.0%; &nbsp; | Building MPI ─→ `/storage7/buildkite-agent/.julia-2581/packages/MPI/b7MVG/deps/build.log`; &nbsp; | [ Info: using default MPI jll; &nbsp; | Building FFTW → `/storage7/buildkite-agent/.julia-2581/packages/FFTW/G3lSO/deps/build.log`; &nbsp; | Precompiling project...; &nbsp; | WARNING: Error during initialization of module GMP:; &nbsp; | ErrorException(""could not load library ""libgmp""; &nbsp; | libgmp.so: ELF load command past end of file""); &nbsp; | WARNING: Error during initialization of module LinearAlgebra:; &nbsp; | ErrorException(""could not load library ""libopenblas64_""; &nbsp; | libopenblas64_.so: ELF load command past end of file""); &nbsp; | ┌ Error: Error during initialization of module CHOLMOD; &nbsp; | │ exception =; &nbsp; | │ could not load library ""libcholmod""; &nbsp; | │ libopenblas64_.so.0: ELF load command past end of file; &nbsp; | │ Stacktrace:; &nbsp; | │ [1] dlopen(::String, ::UInt32; throw_error::Bool) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Libdl/src/Libdl.jl:109; &nbsp; | │ [2] dlopen at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Libdl/src/Libdl.jl:109 [inlined] (repeats 2 times); &nbsp; | │ [3] __init__() at /buildworker/worker/package_linux64/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843325731:2192,log,log,2192,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843325731,1,['log'],['log']
Testability,"; │ GPU │ Float64 │ 128 │ 4.960 ms │ 5.049 ms │ 5.117 ms │ 5.493 ms │ 916.33 KiB │ 7061 │; │ GPU │ Float64 │ 256 │ 22.908 ms │ 36.834 ms │ 35.414 ms │ 36.918 ms │ 1.06 MiB │ 7045 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; ```. ## CPU to GPU speedup. ```; Incompressible model CPU -> GPU speedup; ┌─────────────┬─────┬─────────┬─────────┬─────────┐; │ Float_types │ Ns │ speedup │ memory │ allocs │; ├─────────────┼─────┼─────────┼─────────┼─────────┤; │ Float32 │ 32 │ 2.20733 │ 2.37925 │ 3.29728 │; │ Float32 │ 64 │ 13.9392 │ 2.51685 │ 3.29354 │; │ Float32 │ 128 │ 90.5074 │ 2.81265 │ 3.29916 │; │ Float32 │ 256 │ 121.854 │ 3.39417 │ 3.29822 │; │ Float64 │ 32 │ 2.34399 │ 2.25752 │ 3.29728 │; │ Float64 │ 64 │ 16.2694 │ 2.37057 │ 3.29354 │; │ Float64 │ 128 │ 75.3331 │ 2.61423 │ 3.30571 │; │ Float64 │ 256 │ 107.062 │ 3.09138 │ 3.29822 │; └─────────────┴─────┴─────────┴─────────┴─────────┘; ```. ---. ## Fourier-tridiagonal Poisson solver benchmarks. ### Raw benchmarks; ```; Fourier-tridiagonal Poisson solver benchmarks ; ┌───────────────┬─────┬───────────────────────────────┬───────────┬───────────┬───────────┬───────────┬───────────┬────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │; ├───────────────┼─────┼───────────────────────────────┼───────────┼───────────┼───────────┼───────────┼───────────┼────────┤; │ CPU │ 256 │ (Bounded, Bounded, Bounded) │ 1.679 s │ 1.681 s │ 1.703 s │ 1.747 s │ 2.02 KiB │ 27 │; │ CPU │ 256 │ (Bounded, Periodic, Bounded) │ 1.319 s │ 1.324 s │ 1.332 s │ 1.363 s │ 1.86 KiB │ 27 │; │ CPU │ 256 │ (Periodic, Bounded, Bounded) │ 1.349 s │ 1.351 s │ 1.374 s │ 1.444 s │ 1.86 KiB │ 27 │; │ CPU │ 256 │ (Periodic, Periodic, Bounded) │ 1.052 s │ 1.063 s │ 1.062 s │ 1.068 s │ 2.02 KiB │ 27 │; │ GPU │ 256 │ (Bounded, Bounded, Bounded) │ 32.863 ms │ 33.356 ms │ 33.347 ms │ 33.543 ms │ 43.38 KiB │ 876 │; │ GPU │ 256 │ (Bounded, Periodic, Bounded) │ 25",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050:6182,benchmark,benchmarks,6182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1403#issuecomment-786398050,1,['benchmark'],['benchmarks']
Testability,"<a href=""https://redirect.github.com/julia-actions/setup-julia/pull/221"">julia-actions/setup-julia#221</a></li>; </ul>; <h2>New Contributors</h2>; <ul>; <li><a href=""https://github.com/benlorenz""><code>@​benlorenz</code></a> made their first contribution in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/220"">julia-actions/setup-julia#220</a></li>; </ul>; <p><strong>Full Changelog</strong>: <a href=""https://github.com/julia-actions/setup-julia/compare/v1.9.5...v1.9.6"">https://github.com/julia-actions/setup-julia/compare/v1.9.5...v1.9.6</a></p>; <h2>v1.9.5: Maintain mtime of julia build to avoid re-precompilation</h2>; <p>A big part of fixing <a href=""https://redirect.github.com/JuliaLang/julia/issues/50667"">JuliaLang/julia#50667</a> for julia &lt;1.11 as maintaining the mtime of the julia source files means cached <code>/compiled</code> caches won't be invalidated in new runs where julia has been reinstalled.</p>; <h2>What's Changed</h2>; <ul>; <li>add test for julia install and mtime maintenance by <a href=""https://github.com/IanButterworth""><code>@​IanButterworth</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/200"">julia-actions/setup-julia#200</a></li>; <li>extract julia directly to tool path to maintain mtimes by <a href=""https://github.com/IanButterworth""><code>@​IanButterworth</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/196"">julia-actions/setup-julia#196</a></li>; <li>v1.9.5 by <a href=""https://github.com/IanButterworth""><code>@​IanButterworth</code></a> in <a href=""https://redirect.github.com/julia-actions/setup-julia/pull/201"">julia-actions/setup-julia#201</a></li>; </ul>; <h3>Dep updates</h3>; <!-- raw HTML omitted -->; </blockquote>; <p>... (truncated)</p>; </details>; <details>; <summary>Commits</summary>; <ul>; <li><a href=""https://github.com/julia-actions/setup-julia/commit/f2258781c657ad9b4b88072c5eeaf9ec8c370874""><code>f225878</code></a> Add production dependenc",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3544:5913,test,test,5913,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3544,1,['test'],['test']
Testability,"= ""efe28fd5-8261-553b-a9e1-b2916fc3738e""; version = ""0.5.3+4"". [[OrderedCollections]]; git-tree-sha1 = ""4fa2ba51070ec13fcc7517db714445b4ab986bdf""; uuid = ""bac558e1-5e72-5ebc-8fee-abe8a469f55d""; version = ""1.4.0"". [[Parsers]]; deps = [""Dates""]; git-tree-sha1 = ""c8abc88faa3f7a3950832ac5d6e690881590d6dc""; uuid = ""69de0a69-1ddd-5017-9359-2bf0b02dc9f0""; version = ""1.1.0"". [[PencilArrays]]; deps = [""ArrayInterface"", ""JSON3"", ""Libdl"", ""LinearAlgebra"", ""MPI"", ""OffsetArrays"", ""Reexport"", ""Requires"", ""StaticArrays"", ""StaticPermutations"", ""TimerOutputs""]; git-tree-sha1 = ""6ed654cf9af0698879203593f07ba50ad9e49f68""; uuid = ""0e08944d-e94e-41b1-9406-dcf66b6a9d2e""; version = ""0.9.3"". [[PencilFFTs]]; deps = [""AbstractFFTs"", ""FFTW"", ""LinearAlgebra"", ""MPI"", ""PencilArrays"", ""Reexport"", ""TimerOutputs""]; git-tree-sha1 = ""0d9b9a843eebd0f3e218bb8fc89b839d04f21be8""; uuid = ""4a48f351-57a6-4416-9ec4-c37015456aae""; version = ""0.12.2"". [[Pkg]]; deps = [""Dates"", ""LibGit2"", ""Libdl"", ""Logging"", ""Markdown"", ""Printf"", ""REPL"", ""Random"", ""SHA"", ""UUIDs""]; uuid = ""44cfe95a-1eb2-52ea-b672-e2afdf69b78f"". [[Preferences]]; deps = [""TOML""]; git-tree-sha1 = ""ea79e4c9077208cd3bc5d29631a26bc0cff78902""; uuid = ""21216c6a-2e73-6563-6e65-726566657250""; version = ""1.2.1"". [[Printf]]; deps = [""Unicode""]; uuid = ""de0858da-6303-5e67-8744-51eddeeeb8d7"". [[REPL]]; deps = [""InteractiveUtils"", ""Markdown"", ""Sockets""]; uuid = ""3fa0cd96-eef1-5676-8a61-b3b8758bbffb"". [[Random]]; deps = [""Serialization""]; uuid = ""9a3f8284-a2c9-5f02-9a11-845980a1fd5c"". [[Reexport]]; git-tree-sha1 = ""57d8440b0c7d98fc4f889e478e80f268d534c9d5""; uuid = ""189a3867-3050-52da-a836-e630ba90ab69""; version = ""1.0.0"". [[Requires]]; deps = [""UUIDs""]; git-tree-sha1 = ""4036a3bd08ac7e968e27c203d45f5fff15020621""; uuid = ""ae029012-a4dd-5104-9daa-d747884805df""; version = ""1.1.3"". [[Rotations]]; deps = [""LinearAlgebra"", ""StaticArrays"", ""Statistics""]; git-tree-sha1 = ""2ed8d8a16d703f900168822d83699b8c3c1a5cd8""; uuid = ""6038ab10-8711-5258-84ad-4b1120ba62dc""; version = ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838:13204,Log,Logging,13204,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827235838,1,['Log'],['Logging']
Testability,"= RegularRectilinearGrid(size = (512, 512, 1), extent = (2π, 2π, 2π), topology = (Periodic, Periodic, Bounded)); xz_grid = RegularRectilinearGrid(size = (512, 1, 512), extent = (2π, 2π, 2π), topology = (Periodic, Periodic, Bounded)); yz_grid = RegularRectilinearGrid(size = (1, 512, 512), extent = (2π, 2π, 2π), topology = (Periodic, Periodic, Bounded)). function ten_steps!(model); for i = 1:10; time_step!(model, 1e-6); end; return nothing; end. for arch in (CPU(), GPU()); for grid in (; xy_grid,; xz_grid,; yz_grid,; ). model = NonhydrostaticModel(architecture = arch,; timestepper = :RungeKutta3,; advection = UpwindBiasedFifthOrder(),; grid = grid,; buoyancy = nothing,; tracers = nothing). @info ""Benchmarking $model...""; @btime ten_steps!($model); end; end; ```. The results are alarming: on the CPU we find. * `xy_grid`: 616.285 ms (429912 allocations: 114.29 MiB); * `xz_grid`: 4.638 s (944291 allocations: 2.63 GiB); * `yz_grid`: 3.240 s (405223 allocations: 2.60 GiB). Notice the `xz` configuration is 7 times slower than the `xy` configuration. In addition to that, allocations are through the roof --- 200 MiB of allocation per time-step?? (the benchmark tests 10 time-steps). On the GPU we find. * `xy_grid`: 48.438 ms (128139 allocations: 45.68 MiB); * `xz_grid`: 531.077 ms (637499 allocations: 53.51 MiB); * `yz_grid`: 147.963 ms (166797 allocations: 46.33 MiB). and therefore an even larger (10x) performance difference, though allocations are more under control. I ran the benchmarks for a few different topologies to see if the pressure solver was the culprit. But I noticed similar behavior whether or not `y` or `z` was `Periodic` or `Bounded`. I also tested whether the vertical integral for hydrostatic pressure was a problem by updating and then running code from #1910 . This didn't fix the problem either. I'm perplexed, so I think we should drill into this a bit more. Or --- am I misinterpreting or setting up the benchmarks incorrectly?. @ali-ramadhan @christophernhill",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1919:1913,benchmark,benchmark,1913,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1919,5,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tested', 'tests']"
Testability,"=+2.039559e-07, std=+2.510841e-07 (16384/16384 matching grid points); Shallow Water Bickley jet simulation [GPU, VectorInvariantFormulation]: Test Failed at /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; Expression: all(test_fields.v .≈ truth_fields.v); Stacktrace:; [1] run_shallow_water_regression(arch::GPU, formulation::VectorInvariantFormulation; regenerate_data::Bool); @ Main /g/data/v45/nc3020/OC.jl/test/regression_tests/shallow_water_bickley_jet_regression.jl:94; [2] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:12 [inlined]; [3] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [4] macro expansion; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:11 [inlined]; [5] macro expansion; @ /g/data/v45/nc3020/julia/usr/share/julia/stdlib/v1.6/Test/src/Test.jl:1151 [inlined]; [6] top-level scope; @ /g/data/v45/nc3020/OC.jl/test/test_shallow_water_regression.jl:6; [2023/02/21 06:38:01.335] INFO Testing shallow water Bickley jet simulation regression [GPU, ConservativeFormulation]; [2023/02/21 06:38:01.772] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:01.916] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /g/data/v45/nc3020/OC.jl/src/Advection/weno_fifth_order.jl:187; [2023/02/21 06:38:30.393] INFO Initializing simulation...; [2023/02/21 06:38:30.504] INFO ... simulation initialization complete (110.043 ms); [2023/02/21 06:38:30.504] INFO Executing initial time step...; [2023/02/21 06:38:40.776] INFO .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895:14453,test,test,14453,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1437515895,1,['test'],['test']
Testability,"=-1.7021127075075165e-18, max=-1.7021127075075165e-18, sum=8.88871484143291e-21, abs_sum=5.841423607171149e-15; >; > [ Info: Velocity divergence after 10 time steps (CPU(), Float64): min=-1.8295911660692887e-18, max=-1.8295911660692887e-18, sum=6.904962541589997e-20, abs_sum=6.221726243321258e-15; >; > [ Info: Velocity divergence after 100 time steps (CPU(), Float64): min=-2.0599841277224584e-18, max=-2.0599841277224584e-18, sum=1.222917052488197e-18, abs_sum=6.6839786899214464e-15; >; > [ Info: Velocity divergence after 1000 time steps (CPU(), Float64): min=-2.7755575615628914e-17, max=-2.7755575615628914e-17, sum=1.1918336233891488e-16, abs_sum=2.2196799400441293e-14; >; >; > so maybe we also need to compute the vertical velocity *w* from the; > continuity equation instead of time stepping it forward.; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/climate-machine/Oceananigans.jl/pull/228; > Commit Summary; >; > - Incompressibility test.; > - Log velocity divergence.; > - Projection method to ensure velocity remains divergence free.; > - Different div-free atol values for Float32 and Float64.; > - Update thermal bubble golden master test.; >; > File Changes; >; > - *M* src/time_steppers.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/228/files#diff-0>; > (12); > - *M* test/runtests.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/228/files#diff-1>; > (7); > - *M* test/test_time_stepping.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/228/files#diff-2>; > (41); > - *M* test/thermal_bubble_golden_master_10.nc; > <https://github.com/climate-machine/Oceananigans.jl/pull/228/files#diff-3>; > (0); >; > Patch Links:; >; > - https://github.com/climate-machine/Oceananigans.jl/pull/228.patch; > - https://github.com/climate-machine/Oceananigans.jl/pull/228.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this em",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/228#issuecomment-495026292:2952,test,test,2952,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/228#issuecomment-495026292,2,['test'],['test']
Testability,"== 2 && return SeawaterBuoyancy(); 41 throw(ArgumentError(""Can't have more than 2 active tracers!"")); 42 end; 43 ; 44 #####; 45 ##### Run benchmarks; 46 #####; 47 ; 48 # Each test case specifies (number of active tracers, number of passive tracers); 49 test_cases = [(0, 0), (2, 0), (2, 3)]; 50 ; 51 for arch in archs, test_case in test_cases; 52 N = arch isa CPU ? (16, 16, 16) : (16, 16, 16); 53 na, np = test_case; 54 tracers = tracer_list(na, np); 55 ; 56 grid = RegularCartesianGrid(size=N, extent=(1, 1, 1)); 57 model = IncompressibleModel(architecture=arch, float_type=FT, grid=grid,; 58 buoyancy=na2buoyancy(na), tracers=tracers); 59 ; 60 time_step!(model, 1) # precompile; 61 ; 62 bname = benchmark_name(N, ""$na active + $(lpad(np, 2)) passive"", arch, FT); 63 @printf(""Running benchmark: %s...\n"", bname); 64 for i in 1:Nt; 65 @timeit timer bname time_step!(model, 1); 66 end; 67 end; 68 ; 69 #####; 70 ##### Print benchmark results; 71 #####; 72 ; 73 println(); 74 println(oceananigans_versioninfo()); 75 println(versioninfo_with_gpu()); 76 print_timer(timer, title=""Tracer benchmarks"", sortby=:name); 77 println(); 78 ; 79 end # module; Tracers benchmark: Test Failed at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:58; Expression: run_script(replace_strings, ""tracers"", benchmark_filepath(""tracers"")); Stacktrace:; [1] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:58; [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [3] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:49; [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [5] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:13; [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:116506,benchmark,benchmark,116506,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,4,"['Test', 'benchmark']","['Test', 'benchmark', 'benchmarks']"
Testability,===; Files 184 124 -60 ; Lines 4781 2476 -2305 ; ==========================================; - Hits 3427 1778 -1649 ; + Misses 1354 698 -656 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [test/runtests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0cy5qbA==) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [...ation/convergence\_tests/point\_exponential\_decay.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL3BvaW50X2V4cG9uZW50aWFsX2RlY2F5Lmps) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | [...ts/one\_dimensional\_gaussian\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9nYXVzc2lhbl9hZHZlY3Rpb25fZGlmZnVzaW9uLmps) | | |; | [...ests/one\_dimensional\_cosine\_advection\_diffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL29uZV9kaW1lbnNpb25hbF9jb3NpbmVfYWR2ZWN0aW9uX2RpZmZ1c2lvbi5qbA==) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/792/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFy,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230:1792,benchmark,benchmark,1792,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/792#issuecomment-657511230,2,['benchmark'],['benchmark']
Testability,"===; Files 188 188 ; Lines 5230 5252 +22 ; ==========================================; + Hits 3713 3740 +27 ; + Misses 1517 1512 -5 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `76.54% <60.00%> (-3.98%)` | :arrow_down: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `71.05% <100.00%> (ø)` | |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `96.00% <100.00%> (+4.69%)` | :arrow_up: |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.26% <100.00%> (+5.93%)` | :arrow_up: |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `92.78% <100.00%> (ø)` | |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `78.57% <0.00%> (+7.14%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859?src=pr&el=footer). Last update [fbbb5f8...a0027b9](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/859#issuecomment-674815712:1826,test,test,1826,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/859#issuecomment-674815712,2,['test'],['test']
Testability,======; Files 210 210 ; Lines 6076 6115 +39 ; ==========================================; + Hits 4408 4447 +39 ; Misses 1668 1668 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [...undaryConditions/coordinate\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9jb29yZGluYXRlX2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `100.00% <ø> (+40.00%)` | :arrow_up: |; | [...rc/BoundaryConditions/field\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWVsZF9ib3VuZGFyeV9jb25kaXRpb25zLmps) | `91.30% <93.75%> (+1.30%)` | :arrow_up: |; | [src/BoundaryConditions/fill\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL0JvdW5kYXJ5Q29uZGl0aW9ucy9maWxsX2hhbG9fcmVnaW9ucy5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `98.07% <100.00%> (+0.21%)` | :arrow_up: |; | [test/test\_time\_stepping\_bcs.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmdfYmNzLmps) | `98.21% <100.00%> (-0.25%)` | :arrow_down: |; | [src/Simulations/simulation.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3NpbXVsYXRpb24uamw=) | `68.75% <0.00%> (-6.25%)` | :arrow_down: |; | [src/TimeSteppers/velocity\_and\_tracer\_tendencies.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy92ZWxvY2l0eV9hbmRfdHJhY2VyX3RlbmRlbmNpZXMuamw=) | `100.00% <0.00%> (ø)` | |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/984/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `92.30% <0.00%> (+0,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/984#issuecomment-699495385:1736,test,test,1736,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/984#issuecomment-699495385,2,['test'],['test']
Testability,"======; Hits 4216 4216 ; Misses 1590 1590 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.29% <ø> (ø)` | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | `100.00% <ø> (ø)` | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `97.86% <100.00%> (ø)` | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.33% <100.00%> (ø)` | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <100.00%> (ø)` | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=footer). Last update [3b45ce5...af487df](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/937#issuecomment-691244592:1852,test,test,1852,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/937#issuecomment-691244592,4,['test'],['test']
Testability,=========; Files 200 204 +4 ; Lines 5821 6059 +238 ; ==========================================; + Hits 4209 4397 +188 ; - Misses 1612 1662 +50 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Buoyancy/Buoyancy.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L0J1b3lhbmN5Lmps) | `63.15% <ø> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `87.50% <ø> (+5.14%)` | :arrow_up: |; | [src/Buoyancy/buoyancy\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L2J1b3lhbmN5X2ZpZWxkLmps) | `71.42% <71.42%> (ø)` | |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `56.09% <100.00%> (+1.09%)` | :arrow_up: |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.33% <100.00%> (+0.04%)` | :arrow_up: |; | [src/Coriolis/f\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2ZfcGxhbmUuamw=) | `57.14% <0.00%> (-22.86%)` | :arrow_down: |; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `66.66% <0.00%> (-8.34%)` | :arrow_down: |; | [src/Buoyancy/nonlinear\_equation\_of\_state.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL0J1b3lhbmN5L25vbmxpbmVhcl9lcXVhdGlvbl9vZl9zdGF0ZS5qbA==) | `72.00% <0.00%> (-3.00%)` | :arrow_down: |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/952/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVf,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/952#issuecomment-693763900:1737,test,test,1737,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/952#issuecomment-693763900,2,['test'],['test']
Testability,===================; - Hits 3876 3860 -16 ; - Misses 1461 1462 +1 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `100.00% <ø> (ø)` | |; | [src/Solvers/channel\_pressure\_solver.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvY2hhbm5lbF9wcmVzc3VyZV9zb2x2ZXIuamw=) | `31.08% <0.00%> (ø)` | |; | [...c/Solvers/horizontally\_periodic\_pressure\_solver.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvaG9yaXpvbnRhbGx5X3BlcmlvZGljX3ByZXNzdXJlX3NvbHZlci5qbA==) | `42.59% <0.00%> (ø)` | |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `69.84% <66.66%> (ø)` | |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `91.59% <69.44%> (-0.20%)` | :arrow_down: |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | `95.00% <85.71%> (+0.35%)` | :arrow_up: |; | [src/Fields/set!.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zZXQhLmps) | `36.36% <100.00%> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <100.00%> (ø)` | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | `91.66% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/851?src=pr&el=continue).; > **Lege,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/851#issuecomment-672934210:1811,test,test,1811,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/851#issuecomment-672934210,2,['test'],['test']
Testability,====================; + Hits 4166 4438 +272 ; - Misses 1553 1620 +67 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `75.00% <ø> (ø)` | |; | [src/TimeSteppers/adams\_bashforth.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9hZGFtc19iYXNoZm9ydGguamw=) | `84.74% <ø> (-0.51%)` | :arrow_down: |; | [src/TimeSteppers/time\_stepping\_kernels.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy90aW1lX3N0ZXBwaW5nX2tlcm5lbHMuamw=) | `75.55% <ø> (+3.00%)` | :arrow_up: |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | `100.00% <ø> (ø)` | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | `51.06% <ø> (ø)` | |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `95.23% <100.00%> (+0.23%)` | :arrow_up: |; | [...sts/ocean\_large\_eddy\_simulation\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL29jZWFuX2xhcmdlX2VkZHlfc2ltdWxhdGlvbl9yZWdyZXNzaW9uX3Rlc3Quamw=) | `100.00% <100.00%> (ø)` | |; | [...egression\_tests/rayleigh\_benard\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL3JheWxlaWdoX2JlbmFyZF9yZWdyZXNzaW9uX3Rlc3Quamw=) | `100.00% <100.00%> (ø)` | |; | [...regression\_tests/thermal\_bubble\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananig,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/943#issuecomment-692271816:1817,test,test,1817,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/943#issuecomment-692271816,2,['test'],['test']
Testability,=========================; Files 188 188 ; Lines 5353 5337 -16 ; ==========================================; - Hits 3892 3876 -16 ; Misses 1461 1461 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | `0.00% <ø> (ø)` | |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `100.00% <ø> (ø)` | |; | [test/test\_regression.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3JlZ3Jlc3Npb24uamw=) | `91.42% <ø> (-0.24%)` | :arrow_down: |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `94.35% <ø> (+0.75%)` | :arrow_up: |; | [test/runtests\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC9ydW50ZXN0c191dGlscy5qbA==) | `67.56% <73.33%> (+42.56%)` | :arrow_up: |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `100.00% <100.00%> (ø)` | |; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `92.06% <100.00%> (ø)` | |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `85.71% <100.00%> (ø)` | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_examples.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/850/diff?src=pr&el=tree#di,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397:1726,test,test,1726,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672128397,1,['test'],['test']
Testability,"===============================; + Hits 4166 4186 +20 ; + Misses 1553 1551 -2 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/OutputWriters.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `66.66% <ø> (ø)` | |; | [src/Fields/abstract\_field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9hYnN0cmFjdF9maWVsZC5qbA==) | `52.94% <50.00%> (ø)` | |; | [src/OutputWriters/fetch\_output.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvZmV0Y2hfb3V0cHV0Lmps) | `60.00% <60.00%> (ø)` | |; | [src/OutputWriters/jld2\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvamxkMl9vdXRwdXRfd3JpdGVyLmps) | `90.90% <96.00%> (-0.62%)` | :arrow_down: |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `93.91% <100.00%> (+0.28%)` | :arrow_up: |; | [src/Utils/output\_writer\_diagnostic\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL291dHB1dF93cml0ZXJfZGlhZ25vc3RpY191dGlscy5qbA==) | `100.00% <0.00%> (+8.69%)` | :arrow_up: |; | [src/Utils/pretty\_time.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ByZXR0eV90aW1lLmps) | `87.50% <0.00%> (+12.50%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/927?src=pr&el=footer",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/927#issuecomment-690372678:1803,test,test,1803,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/927#issuecomment-690372678,2,['test'],['test']
Testability,"==================================; + Coverage 70.99% 71.21% +0.21% ; ==========================================; Files 188 188 ; Lines 5230 5252 +22 ; ==========================================; + Hits 3713 3740 +27 ; + Misses 1517 1512 -5 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `76.54% <60.00%> (-3.98%)` | :arrow_down: |; | [src/AbstractOperations/computations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-c3JjL0Fic3RyYWN0T3BlcmF0aW9ucy9jb21wdXRhdGlvbnMuamw=) | `71.05% <100.00%> (ø)` | |; | [src/Diagnostics/average.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-c3JjL0RpYWdub3N0aWNzL2F2ZXJhZ2Uuamw=) | `96.00% <100.00%> (+4.69%)` | :arrow_up: |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.26% <100.00%> (+5.93%)` | :arrow_up: |; | [test/test\_output\_writers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X291dHB1dF93cml0ZXJzLmps) | `92.78% <100.00%> (ø)` | |; | [src/Grids/Grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859/diff?src=pr&el=tree#diff-c3JjL0dyaWRzL0dyaWRzLmps) | `78.57% <0.00%> (+7.14%)` | :arrow_up: |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/859?src=pr&el=footer). Last update [fbbb5f8...a0027b9](https://codecov.io/gh/CliMA/Oceananigans.jl/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/859#issuecomment-674815712:1638,test,test,1638,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/859#issuecomment-674815712,2,['test'],['test']
Testability,==================================; + Coverage 72.84% 73.25% +0.41% ; ==========================================; Files 194 201 +7 ; Lines 5719 6058 +339 ; ==========================================; + Hits 4166 4438 +272 ; - Misses 1553 1620 +67 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/TimeSteppers/TimeSteppers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9UaW1lU3RlcHBlcnMuamw=) | `75.00% <ø> (ø)` | |; | [src/TimeSteppers/adams\_bashforth.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9hZGFtc19iYXNoZm9ydGguamw=) | `84.74% <ø> (-0.51%)` | :arrow_down: |; | [src/TimeSteppers/time\_stepping\_kernels.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy90aW1lX3N0ZXBwaW5nX2tlcm5lbHMuamw=) | `75.55% <ø> (+3.00%)` | :arrow_up: |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | `100.00% <ø> (ø)` | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | `51.06% <ø> (ø)` | |; | [src/TimeSteppers/generic\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-c3JjL1RpbWVTdGVwcGVycy9nZW5lcmljX3RpbWVfc3RlcHBpbmcuamw=) | `95.23% <100.00%> (+0.23%)` | :arrow_up: |; | [...sts/ocean\_large\_eddy\_simulation\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL29jZWFuX2xhcmdlX2VkZHlfc2ltdWxhdGlvbl9yZWdyZXNzaW9uX3Rlc3Quamw=) | `100.00% <100.00%> (ø)` | |; | [...egression\_tests/rayleigh\_benard\_regression\_test.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/943/diff?src=pr&el=tree#diff-dGVzdC9yZWdyZXNzaW9uX3Rlc3RzL3,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/943#issuecomment-692271816:1636,test,test,1636,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/943#issuecomment-692271816,2,['test'],['test']
Testability,===================================; - Coverage 70.90% 68.67% -2.24% ; ==========================================; Files 187 126 -61 ; Lines 5180 2678 -2502 ; ==========================================; - Hits 3673 1839 -1834 ; + Misses 1507 839 -668 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [test/test\_surface\_waves.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3N1cmZhY2Vfd2F2ZXMuamw=) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZpZWxkcy5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/564/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | | |; | ... and [52 more](https://codeco,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738:1662,test,test,1662,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/564#issuecomment-564625738,2,['test'],['test']
Testability,===================================; Files 187 193 +6 ; Lines 5251 5600 +349 ; ==========================================; + Hits 3739 4019 +280 ; - Misses 1512 1581 +69 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Coriolis/Coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL0NvcmlvbGlzLmps) | `100.00% <ø> (ø)` | |; | [src/Coriolis/beta\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2JldGFfcGxhbmUuamw=) | `62.50% <0.00%> (+18.75%)` | :arrow_up: |; | [src/Coriolis/f\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL2ZfcGxhbmUuamw=) | `80.00% <0.00%> (+24.00%)` | :arrow_up: |; | [src/Oceananigans.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL09jZWFuYW5pZ2Fucy5qbA==) | `66.66% <ø> (ø)` | |; | [test/test\_models.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X21vZGVscy5qbA==) | `94.73% <ø> (ø)` | |; | [test/test\_coriolis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2NvcmlvbGlzLmps) | `85.33% <77.55%> (-14.67%)` | :arrow_down: |; | [src/Coriolis/non\_traditional\_f\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL25vbl90cmFkaXRpb25hbF9mX3BsYW5lLmps) | `80.00% <80.00%> (ø)` | |; | [src/Coriolis/non\_traditional\_beta\_plane.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-c3JjL0NvcmlvbGlzL25vbl90cmFkaXRpb25hbF9iZXRhX3BsYW5lLmps) | `82.60% <82.60%> (ø)` | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/899/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [src/BoundaryConditions/boundary\_function.jl](https://co,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/899#issuecomment-685689480:1716,test,test,1716,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/899#issuecomment-685689480,2,['test'],['test']
Testability,"=======================================; Files 199 199 ; Lines 5806 5806 ; =======================================; Hits 4216 4216 ; Misses 1590 1590 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [test/test\_abstract\_operations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2Fic3RyYWN0X29wZXJhdGlvbnMuamw=) | `99.29% <ø> (ø)` | |; | [test/test\_benchmarks.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JlbmNobWFya3Muamw=) | `100.00% <ø> (ø)` | |; | [test/test\_boundary\_conditions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2JvdW5kYXJ5X2NvbmRpdGlvbnMuamw=) | `97.86% <100.00%> (ø)` | |; | [test/test\_diagnostics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2RpYWdub3N0aWNzLmps) | `99.33% <100.00%> (ø)` | |; | [test/test\_forcings.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2ZvcmNpbmdzLmps) | `100.00% <100.00%> (ø)` | |; | [test/test\_time\_stepping.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3RpbWVfc3RlcHBpbmcuamw=) | `100.00% <100.00%> (ø)` | |; | [test/test\_turbulence\_closures.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3R1cmJ1bGVuY2VfY2xvc3VyZXMuamw=) | `100.00% <100.00%> (ø)` | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/937?src=pr&el=footer). Last update [3b45ce5...af487df](https://codecov.io/gh/CliMA/Oceananigans.jl/p",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/937#issuecomment-691244592:1686,test,test,1686,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/937#issuecomment-691244592,2,['test'],['test']
Testability,=pr&token=1eev6VdKD0)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #704 +/- ##; ==========================================; + Coverage 71.12% 79.66% +8.54% ; ==========================================; Files 122 122 ; Lines 2386 2503 +117 ; ==========================================; + Hits 1697 1994 +297 ; + Misses 689 509 -180 ; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Solvers/triply\_periodic\_pressure\_solver.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvdHJpcGx5X3BlcmlvZGljX3ByZXNzdXJlX3NvbHZlci5qbA==) | `0.00% <0.00%> (ø)` | |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `88.88% <0.00%> (-11.12%)` | :arrow_down: |; | [src/Logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL0xvZ2dlci5qbA==) | `79.16% <0.00%> (-9.73%)` | :arrow_down: |; | [src/Solvers/solve\_for\_pressure.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `93.33% <0.00%> (-6.67%)` | :arrow_down: |; | [src/Utils/launch\_config.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `94.11% <0.00%> (-5.89%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/704/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `32.00% <0.00%> (-2.10%)` | :arrow_down: |; | [src/Fields/field\_tuples.jl](https://codecov.io/gh/climate-machin,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/704#issuecomment-599780254:1534,Log,Logger,1534,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/704#issuecomment-599780254,1,['Log'],['Logger']
Testability,"> #2275. Is there a forcing function that computes the ""immersed boundary normal"" direction with associated logic?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1099599330:108,log,logic,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1099599330,1,['log'],['logic']
Testability,"> (not sure where best to put this/if you'd want it in the examples folder). The right place would be `validation/`, as we only use `examples/` for features that are widely-used and well-tested (examples are expensive, because they have to run during CI).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239609992:187,test,tested,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239609992,1,['test'],['tested']
Testability,"> (this is how PISCES implements a lot of the growth to prevent repetitive calculation of the same values, I don't know if this would be faster in this setting without testing but just as an example). I agree that we need this feature, but from a software design perspective one might argue that such an invasive change to model dynamics belongs in the source code itself, rather than a callback (and this of course how it works for PISCES, or any model other than Oceananigans --- since Oceananigans is the only model where we can envision such a fine-grained callback schema). I think having a callback infrastructure like this effectively allows people who implement advanced / custom applications to keep their code up to date with other changes to Oceananigans. The alternative model for software design, which is simply to create a new version of the source code for your custom application, leads to much more code duplication. So you could say that the callback feature could be important for the community to share advanced custom modifications to Oceananigans, without creating a terrible tangle in `main`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1279336660:168,test,testing,168,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1279336660,1,['test'],['testing']
Testability,"> * But when Documenter.jl run is it fails!. How does it fail? Does it emit an error? What is the error?. > Why do we get all these warnings from the Logger when we run the simulation? Perhaps these warnings hint something about the boundary condition issue? They seem boundary condition related... What warnings are you getting?. > As you can see from the movies this problem is ideal for VerticallyStretchedGrids as there for a boundary layer at the Any attempts adding a VerticallyStretchedGrid has given be blow ups, even when the stretching on the grid is almost zero, i.e., when the VerticallyStretchedGrid ≈ RegularGrid. That's a concern. We should add dynamics / physics tests that stress-test the stretched grid. Can you confirm that you get the right result when the stretched grid is exactly identical to the regular grid?. > How do I setup the Poisson solver to obtain solution of ∇²b=0 with b(x, t) = cos(πx) and no flux boundary condition at all other walls. Let's zoom. To clarify, we have a `PreconditionedConjugateGradientSolver` that I think would work well for this. This solver is a generic linear algebra solve that works with Oceananigans fields; it is not limited to solving the Poisson equation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-877740920:150,Log,Logger,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-877740920,3,"['Log', 'test']","['Logger', 'test', 'tests']"
Testability,"> * Test the Split-Explicit time-stepping in standalone mode without the 3D model; > * Write kernels and tests for computing vertical integrals of tendency terms; > * Write the AB extrapolation function for the tendency terms; > * Write the ""reconciliation"" kernel that takes away the barotropic component of the velocity field and adds in the new one; > * Test everything together in various channel settings. This has all been done",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1016554181:4,Test,Test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1016554181,3,"['Test', 'test']","['Test', 'tests']"
Testability,"> * `test/test_convergence.jl` is rather boiler-plate-y. Is there any way to use a list of convergence tests scripts? This will make it easier to add new tests in the future... Yeah it could be more automated. I'll give it a try once the tests are all passing. > * Could make sense to raise an issue about converting convergence tests plots to `Plots.jl` or `CairoMakie.jl` or whatever when this PR is merged, so we don't have to wrestle `PyPlot` in the test scripts. I don't think it's worth spending much effort on switching plotting libraries (especially since the plots work now) but I'll use CairoMakie.jl for future plots. CairoMakie.jl doesn't support log axes yet (gotta hack it in for now) but hopefully it'll get added soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-768374762:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-768374762,7,"['log', 'test']","['log', 'test', 'tests']"
Testability,> . With the geostrophic adjustment test the large timesteps are computed with AB2. The small substeps are computed using the method that @jm-c recommended. After doing some more testing it seems that the lack of conservation has been isolated to a topology with bounded directions. In the fully periodic case the eta field mean is conserved to machine precision,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1014966091:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1014966091,2,['test'],"['test', 'testing']"
Testability,"> 1 hour 8 minutes on CPU. That's gnarly. There are a ton of new functions that need to be compiled for Leith, including stuff from the `Buoyancy` submodule (since it rotates the tracer diffusivity into the isopycnal plane). Which makes me realize that if we really want to have comprehensive tests we need to run the Leith closure with different buoyancy types...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1074#issuecomment-711048055:293,test,tests,293,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1074#issuecomment-711048055,1,['test'],['tests']
Testability,"> 1. I tried something in a gist here ( https://gist.github.com/christophernhill/d1f07cec81c19df9903b18461ba38250 ) that seems to suggest that if we accept we are only really interested in finding a potential whose ""difference"" (weighted in some way) makes our source terms non-divergent then it may be possible to use FFT approach with a stretched grid? In other words we aren't so interested in the pressure, more the gradient of the pressure.; > I am not sure I believe the result, since it seems like someone would have done it 40+ years ago if this was the case. On the other hand the gist does seem to work, and I can't see what I am missing! I would be interested to chat about whether there is something I am overlooking. That is intriguing. If I understand correctly, the test code indeed provides a divergence-free field by adding a finite-difference to the velocity. I wonder if on a stretched grid the approach makes sure the added force is actually a pressure gradient (i.e. derives from a potential). In other words, maybe on a stretched grid the code tested might lead to energy inconsistencies ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1727#issuecomment-855238172:781,test,test,781,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1727#issuecomment-855238172,2,['test'],"['test', 'tested']"
Testability,"> 1. Should we change the flux convention in Oceananigans so that `FluxBoundaryCondition` specifies the flux along the _inward pointing normal_? This reverses the convention we use on ""right"" boundaries (west, north, top). For example, a negative buoyancy flux would cause cooling at the surface with this convention. This is a huge change, but I think is necessary to do things like specifying a drag boundary condition on vertical velocity (I can discuss further why this is the case if needed.). I quite like the current convention for specifying fluxes since (imho) it's more mathematically intuitive, so my vote goes to maintaining that convention if we can (although I agree that it makes it harder to apply it generally for immersed solids...). One way to do it would be to leave most of the heavy work for the user, which would have to specify fluxes in each of the immersed solid's interfaces separately. The user's script would look like what I did here:; https://github.com/CliMA/Oceananigans.jl/blob/faed0c4ac85409cb94811b0bdba2bbb7becf330a/sandbox/drag_test.jl#L25-L41. The downside is that this won't work for non-grid-fitted boundaries and requires more user-written code. The upside is that could (I think) re-use much of the inner-workings of the current BC implementation. > We can do 2. without 1. In that case we'll be able to support a lot of common cases, including ordinary oceanic cases (where boundaries do not overhang, and we only specify drag on tangential components). It's really LES cases that become tricky because we can't specify drag on vertical velocity components, or on tangential components when the boundary overhangs. Not sure I understand this point. Do you mind clarifying @glwagner? By ""overhang"" do you mean that there's no fluid-to-the-bottom-immersed-boundary-to-the-top interface?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1720#issuecomment-1086345975:1053,sandbox,sandbox,1053,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1720#issuecomment-1086345975,1,['sandbox'],['sandbox']
Testability,"> 2\. It would be a good idea in my opinion to support either options of passing the prefix or the filename (as many softwares do) so that we always preservw the extension which I believe is our priority. (Just implement a check on the last relevant characters, if there is a correct extension leave it as is otherwise append it). I think this is an excellent suggestion!. We can do. ```julia; dotindex = findlast('.', filename); possible_ext = isnothing(dotindex) ? """" : filename[dotindex+1:end]; possible_ext == "".nc"" || filename *= "".nc""; ```. We can put similar logic into `FieldTimeSeries`. I was stuck on trying to throw an error if the ext is wrong, which has the major downside that we can't use `.` in filenames anymore. But this is a pretty nice solution I think. The main downside is that if you accidentally call your file `.jld2` for netcdf then you'll end up with a file `.jld2.nc`. But I think we can just _recommend_ that `filename` has no extension and we figure it out. And we also support explicit extensions for users that want that interface, with the caveat that if they screw up they'll have funny filenames. I'll make the changes to the output writers here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1099095345:566,log,logic,566,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1099095345,1,['log'],['logic']
Testability,> 4 workers increase the pressure on Tartarus a lot if we are testing multiple branches at the same time. what's wrong with that?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592190514:62,test,testing,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1592190514,1,['test'],['testing']
Testability,"> 44 successful checks ; > ; > I think this PR is ready to be merged. All the existing convergence tests are now in CI and pass, and the plots are uploaded as Buildkite artifacts. This PR might conflict with @francispoulin's PR #1276 (I'm happy to fix conflicts no matter which PR is merged first).; > ; > There are a few tests that take a long time. This can be shortened in a future PR as it might involve some trial and error and fiddling with rate of convergence tolerances. Other validation experiments should also be added.; > ; > Right now I have set the validation pipeline to only run on master (and every night at 3am ET). Please go ahead and don't wait for me. I will work around whatever you have done here in my PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-769875267:99,test,tests,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-769875267,2,['test'],['tests']
Testability,"> 90% sure, but if it's not there it's in `centered_reconstruction.jl` or `upwind_biased_reconstruction.jl` I haven't gotten around to test performance for non-weno schemes but I should do it....; > ; > I ll guess I ll dedicate today to searching the issue, so we can merge. `@inbounds` in . https://github.com/CliMA/Oceananigans.jl/blob/91dfb119917f33514dbf8cd833778c44f6cea9b3/src/Advection/weno_interpolants.jl#L45-L46",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185611545:135,test,test,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185611545,1,['test'],['test']
Testability,> :/. Only if that will make your life simpler though. :) Just a suggestion so you avoid waiting for ever to see if the test actually fail.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870915738:120,test,test,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870915738,1,['test'],['test']
Testability,"> === means that ""no program can distinguish"" between the objects. For arrays this basically means they point to the same space in memory; changes to one imply changes in another. == is a weaker statement, usually about numerical equality. What's counter intuitive?. Oh yeah I know about `===`. What I mean is that you test two grids with `==`, but Julia then tests each property with `===`. So the user is actually performing a much stricter operation than what it seems at first sight. That's the un-intuitive part to me. Although I may be missing something.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2018#issuecomment-945862255:319,test,test,319,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2018#issuecomment-945862255,2,['test'],"['test', 'tests']"
Testability,"> > * But when Documenter.jl run is it fails!; > ; > How does it fail? Does it emit an error? What is the error?. I'll rerun it now and post the error. Let's see what [this log](https://buildkite.com/clima/oceananigans/builds/3269#3fdc21e3-4269-4134-af7b-87b99576aec3) gives. > > As you can see from the movies this problem is ideal for VerticallyStretchedGrids as there for a boundary layer at the Any attempts adding a VerticallyStretchedGrid has given be blow ups, even when the stretching on the grid is almost zero, i.e., when the VerticallyStretchedGrid ≈ RegularGrid.; > ; > That's a concern. We should add dynamics / physics tests that stress-test the stretched grid. Can you confirm that you get the right result when the stretched grid is exactly identical to the regular grid?. Would this create a vertically stretched grid with example the same spacing as the regular one?. ```Julia; grid = RegularRectilinearGrid(size = (Nx, Nz),; x = (-Lx/2, Lx/2),; z = (-H, 0),; halo = (3, 3),; topology = (Bounded, Flat, Bounded)). grid_stretched = VerticallyStretchedRectilinearGrid(size = (Nx, Nz),; topology = (Bounded, Flat, Bounded),; x = (-Lx/2, Lx/2),; halo = (3, 3),; z_faces = grid.zF); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-877743159:173,log,log,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-877743159,3,"['log', 'test']","['log', 'test', 'tests']"
Testability,"> > 90% sure, but if it's not there it's in `centered_reconstruction.jl` or `upwind_biased_reconstruction.jl` I haven't gotten around to test performance for non-weno schemes but I should do it....; > > I ll guess I ll dedicate today to searching the issue, so we can merge; > ; > `@inbounds` in; > ; > https://github.com/CliMA/Oceananigans.jl/blob/91dfb119917f33514dbf8cd833778c44f6cea9b3/src/Advection/weno_interpolants.jl#L45-L46. I'm not sure that this is the deal breaker... I should have phrased is as a ""perhaps add @inbounds in.... ???""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185612738:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185612738,1,['test'],['test']
Testability,"> > :/; > ; > Only if that will make your life simpler though. :) Just a suggestion so you avoid waiting for ever to see if the test actually fail. I'm drinking coffee, but some might describe that as ""waiting""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870928976:128,test,test,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784#issuecomment-870928976,1,['test'],['test']
Testability,"> > > > @glwagner any idea why `gpu-simulations-tests` fail?; > > > ; > > > ; > > > Which grid points are specifically failing in the test?; > > ; > > ; > > How does one go about and answers this question? The log is not informative... Shall I run the tests myself online and then printout the two arrays?; > ; > Yeah, that's what you have to do to determine it... not urgent though... I tried to do that but the HPC at ANU when I use a queue with GPU access it does not have internet access. So it stops at `include(""data_dependencies.jl"")` line...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-928225330:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-928225330,4,"['log', 'test']","['log', 'test', 'tests']"
Testability,"> > > @glwagner any idea why `gpu-simulations-tests` fail?; > > ; > > ; > > Which grid points are specifically failing in the test?; > ; > How does one go about and answers this question? The log is not informative... Shall I run the tests myself online and then printout the two arrays?. Yeah, that's what you have to do to determine it... not urgent though...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-927960226:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-927960226,4,"['log', 'test']","['log', 'test', 'tests']"
Testability,"> > > @iuryt can we do it in a new PR? I can get it started to illustrate, and you can help me by refining the implementation and getting the tests to pass. What do you think?; > > ; > > ; > > As this new PR will change this current PR, I will work on the new PR first and then come back here.; > ; > @glwagner Should I work on this PR first and then when make the new implementation update the validation scripts again?. Up to you but it seems like you will save yourself some effort if you first update the user interface, and then update the validation scripts?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915262473:142,test,tests,142,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915262473,1,['test'],['tests']
Testability,"> > > Is this something that is handled on the MIT side ?; > > ; > > ; > > Yeah, it’s something the Oceananigans dev team should sort out! :); > ; > Curious to know if there's any movement on getting this resolved. I can offer some help in getting an allocation request in to Pawsey Supercomputing Centre - I mentioned to @navidcy that I have a solution for doing CI on systems with job schedulers (like Pawsey's Setonix).; > ; > If existing hardware systems at MIT are not available for this, I can also help with procurement, if needed. If you go this route, I can look into providing some time on our systems to get testing rolling. @simone-silvestri can you please help with this? I agree its critical to get this PR merged ASAP, it's already getting stale. I think we should contact Satori folks first directly or via @christophernhill . @Sbozzolo might be able to help if there are AMD machines on the caltech cluster.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997634181:619,test,testing,619,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1997634181,1,['test'],['testing']
Testability,"> > > Isn't this because of the implicit solve? What grid/model combination are you using?; > > > You can try testing again using a matrix solver for the non immersed model (if you are using the hydrostatic model). The timings should be similar.; > > ; > > ; > > They are probably using the FFT-based solver + `NonhydrostaticModel`.; > ; > Exactly.; > ; > > It might be worthwhile benchmarking this problem on `main` with immersed boundaries but no drag. That's a more direct measurement of the cost of the drag law implemented here over no drag law, but still immersed boundary.; > ; > We can do that, but I'm keeping this branch up-to-date with `main` for now so (at least for now) it won't change results.; > ; > > I also suggest setting up a test that evaluates whether the drag boundary condition produces a measurable difference in a simulation that has a steppy boundary (like a constant slope, rather than a flat wall). You want to determine the relative contribution of this explicit drag compared to form drag for your setup of interest before investing lots of effort here.; > ; > That's a good point. Although I'd have to discuss this with @whitleyv since she's the main developer here. My thinking is that if indeed the form drag dominates, we can probably upgrade this to a partial cell grid-fitted IBM (much like @francispoulin intends to do in #2306). If my understanding is correct, you'd only need to change the definition of the volumes and areas to account for the partial step and it seems to significantly decrease form drag. Oh for sure, and hopefully we will also eventually have shaved cells which will reduce form drag even more. But you could also calculate that by the time we have partial cells working well with the FFT-based nonhydrostatic solver, et cetera, we might also have a more general implementation for boundary fluxes. But from a science point of view, if we simply need ""some drag"" to produce qualitatively useful results, then relying on form drag for `GridF",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1084707164:110,test,testing,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1084707164,3,"['benchmark', 'test']","['benchmarking', 'test', 'testing']"
Testability,"> > > Ok I fixed that. Probably we should use a Field rather than ones for the test and examples, because it automatically adapts to GPU, distributed, etc, so it's a bit better.; > > ; > > ; > > But I thought the whole idea is to be able to provide an `Array` for forcing.; > . `Field` is an abstract array. You should think of `Field` as a kind of `Array`. (We also want `CuArray` of course, and `SubArray`, `OffsetArray`, etc...). This code should work with anything for which `array[i, j, k]` is meaningful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1988819941:79,test,test,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1988819941,1,['test'],['test']
Testability,"> > > Since we already have the full-cell grid-fitted IBM it might be better to just focus on that for now and later modify it to make it partial-step when everything is working well (I think we'd just need to modify the calculation of vertical areas and volumes, no?).; > > ; > > ; > > Not sure what you mean in terms of ""focus"". I wasn't proposing any work, just speculating about the potential advantages of shaved cells. Do you mean focus on full cell IBM for this particular test? I agree with that --- we don't have shaved cells so we can't test it ?; > ; > Sorry for not being clear. I meant focus for development. For example, I see you're planning on implementing a more general BC interface for IBMs in #2437. My point is that I think it would probably be easier to focus efforts on that kind of stuff first, make the full-step grid-fitted IBM (and its interface) functional, to only then try to improve the IBM implementation itself.; > ; > Hope that clarifies it. Oh for sure, we hope to have that stuff merged soon. Shaved cells are eons away (unless some intrepid external contrib wants to focus it) --- we can't look at that within Climate Modeling Alliance until we have realistic global solutions.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100260081:480,test,test,480,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100260081,2,['test'],['test']
Testability,"> > > The preview isn't showing for me. But we can fix any issues later, so I say merge away.; > > ; > > ; > > Yeah, It's also not loading for me. It feels like whenever I try to check PR previews it's kinda hit or miss. I wonder if this is an issue with Documenter.; > > But if you're okay with it, I'll merge it and we can fix any problems later.; > ; > It looks like it works for PRs that I submit, but not others. It may have to do with repo privileges. I think, for some reason whatsoever, the preview is not pushed just from the first commit. I think it's because there is a test whether that was a commit on a PR. And unless you first open the PR and then made the first commit that test returns false...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2045#issuecomment-963656757:581,test,test,581,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2045#issuecomment-963656757,2,['test'],['test']
Testability,"> > > There is something fishy with MPI.jl..; > > ; > > ; > > CPU or GPU (or both!) ?; > ; > There are only `CPU distributed tests` and they are failing before they even start:; > https://buildkite.com/clima/oceananigans/builds/3587#c5384940-778a-42c1-842b-c57c1209b786; > ; > This error beats me. :(. I think it's a problem (bug?) with `MPI.jl` or something else outside Oceananigans. The error seems to suggest that some package associated with MPICH_jll thinks we are on MacOS. It's surprising because we didn't upgrade packages. However, we are running on a new system (shiny Ubuntu 20.04) and that may be the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1920#issuecomment-891780863:125,test,tests,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1920#issuecomment-891780863,1,['test'],['tests']
Testability,"> > > This is looking pretty good! My only comment is that it's not intuitive for a given user to figure out how to opt for a hydrostatic pressure separation. A flag called `separate_hydrostatic_pressure` that takes `true`/`false` would be much more intuitive, although we'd need a little more code. Should we prioritize user-friendliness here?; > > ; > > ; > > This is more flexible, because sometimes users want to have access to the pressure field prior to model construction. If we use a flag, then we either can't support that or have to put some annoying logic in the constructor. Since I feel it'll be rare that people want to change this kwarg, I think the trade-offs work out that its better to have a simpler constructor even if those rare users that want to separate hydrostatic pressure have to build `CenterField`.; > ; > Got it! Agreed. Should we test that `hydrostatic_pressure_anomaly` is either `CenterField(grid)` or `nothing` and throw a helpful error otherwise?. Sure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2088747422:561,log,logic,561,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2088747422,2,"['log', 'test']","['logic', 'test']"
Testability,"> > > This update just fixes a trivial problem with the test though, which we need so that tests pass on `main` (we can't merge any PRs until we fix this urgent issue).; > > > I suggest that we fix more substantial issues with the test in a future PR? It might be helpful to open an issue with some of your comments too @christophernhill; > > ; > > ; > > @glwagner that sounds OK.; > > the include(""dependencies_for_runtests.jl"") breaks; > > ```; > > export TEST_FILE=test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl; > > /Applications/Julia-1.7.app/Contents/Resources/julia/bin/julia --project=. test/runtests.jl ; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > workflow because of; > > ```; > > const AB2Model = NonhydrostaticModel{<:QuasiAdamsBashforth2TimeStepper}; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > in; > > ```; > > utils_for_runtests.jl; > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > which can't be redeclared since its const? Is there a trick to fix that?; > ; > It should be ok to redeclare a `const` as something identical:; > ; > ```julia; > julia> const a = 1; > 1; > ; > julia> const a = 1; > 1; > ; > julia> const a = ""hi""; > ERROR: invalid redefinition of constant a; > Stacktrace:; > [1] top-level scope; > @ REPL[3]:1; > ```; > ; > So it's not re-including the file that's a problem, but rather conflicting definitions of `AB2Model`. But I don't know why this issue wouldn't also arise if `dependencies_for_runtests.jl` is included even just once. I'll look into it.; > ; > PS I recommend using `include` rather than running a single-file test because if any debugging needs to be done, the test will run again on the second `include` very quickly. Just a note that the reported error by @christophernhill was with Julia v1.7. I think there were some differences with consts? Not quite sure….",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1003869829:56,test,test,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1003869829,6,['test'],"['test', 'tests']"
Testability,"> > > Why do we get all these warnings from the Logger when we run the simulation? Perhaps these warnings hint something about the boundary condition issue? They seem boundary condition related...; > > ; > > ; > > What warnings are you getting?; > ; > see here: https://clima.github.io/OceananigansDocumentation/previews/PR1847/generated/horizontal_convection/. Are you referring to these two warnings:. ```julia; ┌ Warning: type parameters for NamedTuple{(:x, :y, :z),Tuple} do not match type NamedTuple in workspace; reconstructing; └ @ JLD2 /storage7/buildkite-agent/.julia-3275/packages/JLD2/sFiXk/src/data/reconstructing_datatypes.jl:430; ┌ Warning: type CoordinateBoundaryConditions{BoundaryCondition{Flux, Nothing},BoundaryCondition{Value,Oceananigans.BoundaryConditions.ContinuousBoundaryFunction{Center,Center,Nothing,64,Main.__atexample__named__horizontal_convection.#bₛ,Nothing,Tuple{},Tuple{},Tuple{}}}} does not exist in workspace; reconstructing; └ @ JLD2 /storage7/buildkite-agent/.julia-3275/packages/JLD2/sFiXk/src/data/reconstructing_datatypes.jl:358; ```. that are emitted after `run!(simulation)`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-878316763:48,Log,Logger,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-878316763,1,['Log'],['Logger']
Testability,> > @glwagner any idea why `gpu-simulations-tests` fail?; > ; > Which grid points are specifically failing in the test?. How does one go about and answers this question? The log is not informative... Shall I run the tests myself online and then printout the two arrays?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-926918809:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-926918809,4,"['log', 'test']","['log', 'test', 'tests']"
Testability,"> > @glwagner, do you think a bit more elaborate validation test is in order?; > > I'll approve at this point and let this to your judgment.; > ; > I am currently working on a more elaborate validation / example (I'd like to implement an overturning, eddying channel example that uses this closure in a 3D setting) so I think we are ok to merge this PR now as is. Let's work on the eddying channel together!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1738#issuecomment-863628504:60,test,test,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1738#issuecomment-863628504,1,['test'],['test']
Testability,"> > @iuryt can we do it in a new PR? I can get it started to illustrate, and you can help me by refining the implementation and getting the tests to pass. What do you think?; > ; > As this new PR will change this current PR, I will work on the new PR first and then come back here. @glwagner ; Should I work on this PR first and then when make the new implementation update the validation scripts again?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915090633:140,test,tests,140,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1915090633,1,['test'],['tests']
Testability,> > @iuryt do you want to help set up a validation case for this feature?; > ; > Yep. I will be working on the NP model with a P sinking velocity this week. Any idea for an experiment that changes MLD with time? Maybe making it 1D for simplicity? But I would like to test for 3D to make sure I am programming it correctly. Maybe buoyancy=nothing and diffuse a tanh-like temp profile? But would be better to have a shallowing mld instead. I think a 2D example with turbulence + reactions + sinking would be neat. Probably best to keep it simple and avoid an MLD calculation. Now I'm thinking maybe just a sinking tracer with a source near the surface would be good.. 🤔,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1081819313:267,test,test,267,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1081819313,1,['test'],['test']
Testability,"> > @matinraayai I made a bunch of suggestions!; > > I suggest leaving the tests untouched right now. The reason is that I think we should refactor the tests to be more architecture-indepedent _before_ merging this PR into `main`.; > > Perhaps as an alternative, we can pick one of the validation tests in `validation/` to focus on as an integration test. We'll use that example script to test whether functionality works. As a starting point, something like; > > ```julia; > > using Oceananigans; > > grid = RectilinearGrid(GPU(), size=(128, 128), x=(0, 2π), y=(0, 2π), topology=(Periodic, Periodic, Flat)); > > model = NonhydrostaticModel(; grid, advection=WENO5()); > > ϵ(x, y, z) = 2rand() - 1; > > set!(model, u=ϵ, v=ϵ); > > simulation = Simulation(model; Δt=0.01, stop_time=4); > > run!(simulation); > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > should be enough?; > ; > @glwagner I'm okay with that. I can take a look at this once this PR is accepted to `amdgpu`. @glwagner and @matinraayai focusing on `validation/` , `rectilinear`, `non hydrostatic` would work. ; I can set up some CI against the cluster machines we have. I am not sure if we would want it to run for all PRs yet, so I could try https://stackoverflow.com/questions/62325286/run-github-actions-when-pull-requests-have-a-specific-label",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112523787:75,test,tests,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112523787,5,['test'],"['test', 'tests']"
Testability,"> > @siddharthabishnu, `CUDA.@allowscalar` introduced by [3cdd470](https://github.com/CliMA/Oceananigans.jl/pull/3488/commits/3cdd4705fedf3238d8858bb0f56e9b27b01ba34a) is detrimental for performance. Like it induces O(10-100x) slowdown I think....; > > Is this a temporary solution?; > > cc @glwagner, @simone-silvestri; > ; > I think it is. We can try to see if this works on one GPU. If it does we can keep the allowscalar for the moment otherwise we can remove them. In the end all this will have to live in a kernel. Note that this will still not work on multiple GPUs as you cannot explicitly access one region from another one on a different GPU without switching to the device that holds the data. @simone-silvestri and @navidcy, I totally agree. I only introduced CUDA.@allowscalar under the impression it was necessary for certain GPU tests to pass. However, now understanding that isn’t the case, I've removed it in commit [7f54c3c](https://github.com/CliMA/Oceananigans.jl/pull/3488/commits/7f54c3c451c9753524056d45c6578a9cf865be68).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2035930379:844,test,tests,844,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2035930379,1,['test'],['tests']
Testability,"> > @siddharthabishnu, how do we know that now the metrics are filled correctly? you were comparing with a grid from MITgcm?; > ; > Yes. Consider the following sources for the grid metrics:; > ; > 1. the `cs32` grid with one halo layer, used by:; > ; > * Ali for the Rossby-Haurwitz test case in Oceananigans v0.82.0; and; > * yourself to check the interior coordinates and grid metrics of the Oceananigans `cc32` grid;; > 2. the `cs32` grid with 4 halo layers created by @jm-c using MITgcm;; > 3. the `cc32` grid created by Oceananigans.; > ; > In the validation scripts for solid body rotation and the Rossby-Haurwitz wave within the `ncc-glw/cubed-sphere-dynamics` branch associated with PR #3306, I compared the metrics of grid (3) against both (1) and (2), and plotted their absolute and relative differences. With the latest modifications, these differences have been minimized though not entirely eliminated. OK, so the benchmark is the `cs32` grid by MITgcm. Can we do the comparison in this PR? I'd like to see a test ideally because otherwise how do we assess that the changes we are suggesting here are correct. I can also do that, just give me a code snippet that loads the two grids?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-1978039025:283,test,test,283,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-1978039025,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> > @tomchor I think I know what I need to do to resolve the issues. Do you mind if I send commits to this PR?; > > Basically we have built models in a way that would not withstand time stepping (but the tests passed because we never tried to time step). We just need to stop running those tests. Also `restore_from_checkpoint` should be skipped (and the whole feature deprecated).; > ; > Please, commit away! And thanks. Gonna resolve the restore from checkpoint thing in a separate PR once and for all rather than fiddle around with it here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-885660090:204,test,tests,204,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-885660090,2,['test'],['tests']
Testability,"> > @tomchor can you list the operators you added in the description of this PR?; > ; > Done!; > ; > > These have to be defined for all grids...; > ; > These are defined for `Union{ARG, AHCG}`, which I believe are abstract rectilinear and horizontally curvilinear grids, no? I'd prefer not to define these for other grids in this PR since I have no familiarity with them if that's okay. I believe that covers all grids we have, so we are good. The tests should loop over all grids too!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1023337935:448,test,tests,448,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1023337935,1,['test'],['tests']
Testability,> > @tomchor do you approve? Are there any further changes you'd like to see ?; > ; > I was waiting for the checks to pass to review. Let me review it right now. Got it. PR is complete so only minor debugging left (if anything -- every test passed except the one that used a `.jld2` filename),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1100276374:236,test,test,236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1100276374,1,['test'],['test']
Testability,"> > @tomchor since you're the main person using the tilted gravity feature, I'm wondering if you can help provide some insight into this ""stratified fluid at rest"" test. The main issue is that the dynamics can be ""correct"" but the test can fail. I feel its a bad test for this reason.; > ; > I don't have much to add to the discussion. I agree with you that a balanced state in a continuous system doesn't necessarily translate exactly to a discrete one. When I (or Ali?) came up with this test I figured this translation error would be small enough to be acceptable, and when the test actually passed I was happy enough with that.; > ; > So if this translation error is indeed large enough with the new solver that the tests don't pass I'm very much okay with changing the test. I can't, for the moment, think of another simple test to replace it though. My best guess is to do something similar to what I did for the rotated Coriolis: solve a system with gravity pointing upwards and then the same system with gravity pointing to the `x` or `y` direction and see if they match after the proper rotation. Can't we just test directly that the output of `x_dot_b` is as expected (as well as the others)? Along with a test that the constructor works without error this seems sufficient. More complicated integration tests, like testing that the discrete system has a balanced state analogous to the continuous one, seem better suited for a validation test, I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890058586:164,test,test,164,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890058586,13,['test'],"['test', 'testing', 'tests']"
Testability,"> > A better solution might be to delete the code associated with the buoyancy modification term and simplify our lives.; > ; > Pragmatically speaking, I think we can either keep it with a disclaimer in the docstring saying it's not properly implemented yet (because it needs some averaging that isn't done at the moment, correct?), or we can just dispose of it, like you said. I think the danger lies in leaving it there without caveats for an uninformed user to apply it thinking it's implemented correctly. I guess the main motivation for not disposing of it is that we lose the code. But it's still there in git history and I think the main obstacle to implementing it is testing it properly rather than writing the kernel functions. Since I haven't heard great things about it (and it doesn't actually address the primary issues associated with strong stratification and LES closures) I'd rather spend my time working on other LES closures. So I'm in favor of nuking... But a warning / disclaimer is also a good solution. I'm up for both (this PR is as good a one as any to do this...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1619#issuecomment-826419456:676,test,testing,676,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1619#issuecomment-826419456,1,['test'],['testing']
Testability,"> > A comment is that I found out recently that if I run this script locally on my laptop (with exactly the same command) it works! But running the same code with the same command (at least as far as different `mpiexecjl` are the same) it fails...; > > Has anyone had success running this benchmark? @johnryantaylor I think you were the last person to try it. Did it run successfully with you?; > ; > I don't totally grasp what you mean. Are you referring to different outcomes on systems with different MPI installations?. Yes. That's exactly what it was. I was just able to trace this inconsistency back to an issue with MPI, so I'm closing this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2433#issuecomment-1100217674:289,benchmark,benchmark,289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2433#issuecomment-1100217674,1,['benchmark'],['benchmark']
Testability,"> > A test would be nice to come along with this PR. I can help out with that if you want.; > ; > Thanks! I'll take you up on that if you don't mind. Given that you said that other grids also have arrays, it might be best to expand checkpoint testing for all grids?. Yeap. But first we need to sort the GPU/CPU issue. For example, two grids that are identical but the arrays of one live on CPU but the other on GPU should they be considered equal? I believe in that case we should add methods so that:; ```julia; julia> grid1 == grid2; true. julia> grid1 === grid2; false; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945219663:6,test,test,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945219663,2,['test'],"['test', 'testing']"
Testability,"> > Also, do you know of benchmarking others have done using `KernelAbstractions` on threads that we could look at for comparison?; > ; > I did some benchmarks in the beginning, but mostly focused on strong scaling. Thanks for the information. Can you point me to where some of these results might be found?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880919738:25,benchmark,benchmarking,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880919738,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"> > Are there any tests for `xnodes` with stretched grids?; > ; > There seem to be no tests for `x/y/z/λ/φnodes` whatsoever. Shall we add?. I think at this point there are tests for x/y/znodes? If not, it's a good idea to add a couple. In any case this PR is already an improvement, so I approved it. @navidcy I'll leave it up to you if you wanna merge as is.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605682631:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1605682631,3,['test'],['tests']
Testability,"> > Average reduction with conditional expressions, e.g., like; > > https://github.com/CliMA/Oceananigans.jl/blob/748feab10a55fa65a46455620203252a6fc0646e/test/test_field_reductions.jl#L107; > > ; > > induce scalar operations on the GPU. I guess it's not a surprise. I just had to add, e.g,; > > ```julia; > > @compute Txyz = CUDA.@allowscalar Field(Average(T, condition=T.>3)); > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > Only mentioning this here in case it might something in the source code that could be affecting code performance.; > ; > The condition should be a function of `f(i, j, k, grid, args...)` returning a boolean, or an `AbstractArray` of booleans.; > ; > We should implement boolean operations with fields to return boolean fields, so we will be able to pass an `AbstractOperation`; > ; > ```; > condition = T > 3 # This should be a boolean AbstractOperation; > @compute Txyz = Field(Average(T; condition)) ; > ```; > ; > at the moment the best way to specify a condition is through a function; > ; > ```; > @inline condition(i, j, k, grid, T) = T[i, j, k] > 3; > @compute Txyz = Field(Average(T; condition)) ; > ```. Agree with this. What is `T .> 3`? Is that a field? Either way, what we really want is to pass `T > 3` as @simone-silvestri says.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1239601022:155,test,test,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1239601022,1,['test'],['test']
Testability,"> > Average reduction with conditional expressions, e.g., like; > > https://github.com/CliMA/Oceananigans.jl/blob/748feab10a55fa65a46455620203252a6fc0646e/test/test_field_reductions.jl#L107; > > ; > > induce scalar operations on the GPU. I guess it's not a surprise. I just had to add, e.g,; > > ```julia; > > @compute Txyz = CUDA.@allowscalar Field(Average(T, condition=T.>3)); > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > Only mentioning this here in case it might something in the source code that could be affecting code performance.; > ; > The condition should be a function of `f(i, j, k, grid, args...)` returning a boolean, or an `AbstractArray` of booleans.; > ; > We should implement boolean operations with fields to return boolean fields, so we will be able to pass an `AbstractOperation`; > ; > ```; > condition = T > 3 # This should be a boolean AbstractOperation; > @compute Txyz = Field(Average(T; condition)) ; > ```; > ; > at the moment the best way to specify a condition is through a function; > ; > ```; > @inline condition(i, j, k, grid, T) = T[i, j, k] > 3; > @compute Txyz = Field(Average(T; condition)) ; > ```. I get an error... ```Julia; navidcy@tartarus:~/Oceananigans.jl$ julia-1.8 --project; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.8.1 (2022-09-06); _/ |\__'_|_|_|\__'_| |; |__/ |. julia> using Oceananigans; [ Info: Oceananigans will use 4 threads. julia> using Oceananigans.Fields: CenterField, @compute. julia> trilinear(x, y, z) = x + y + z; trilinear (generic function with 1 method). julia> arch = GPU(); GPU(). julia> grid = RectilinearGrid(arch, size = (2, 2, 2),; x = (0, 2), y = (0, 2), z = (0, 2),; topology = (Periodic, Periodic, Bounded)); 2×2×2 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 2.0) regularly spaced with Δx=1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1242894568:155,test,test,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1242894568,1,['test'],['test']
Testability,"> > But I realized that a second way to implement this immersed flux is to re-use the conditional flux functions, but reverse the logic. Not sure what is best yet.; > ; > We did run into the problem with the conditional flux functions, that fluxes located on the same spot (like `_fcc`), won't be checking the same faces for an interface/ normal direction (`_uy` will be checking the south-north interface and `_vx` would be east-west). Depending on the function, the symmetric fluxes might not be assigned as the same either, esp. when it comes to interpolation. We just made new separate conditional flux functions for each viscous flux combo, but that might not be the way to go long term. Right, we need an API for immersed fluxes. I think for continuous functions we can build objects under the hood for each possible location (so six `ContinuousBoundaryFunction` for east, west, south, north, top, bottom). For `discrete_form` we'll need to ponder because in that case to be correct the user must provide six functions.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100198397:130,log,logic,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100198397,1,['log'],['logic']
Testability,> > Can you add tests?; > ; > New tests passed. Thanks! Some of the tests segfaulted so I restarted them. I'll approve it once tests pass and then we should be ready to go! Feel free to ping me if I'm taking too long ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3567#issuecomment-2087368347:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3567#issuecomment-2087368347,4,['test'],['tests']
Testability,"> > Can you please restate this? I think a code example would be helpful with an explanation on what's being accomplished. Also can you explain why this can't be implemented with a Callback (or forcing function)? I.e., why do we desire this as a source code feature? Just to be clear, I'm not saying it should be one way or another, but it's good to have explicit justification for source code features (which are expensive to maintain and require resources to test)!; > ; > No problem at all, [heres](https://gist.github.com/jagoosw/213d7f2ce3707768d4ddb07f8827cdd2) an example (not sure where best to put this/if you'd want it in the examples folder). This is about the simplest version I could think of where we have a particle randomly walking around converting tracer a into tracer b. The specific use case we've been using this for is modelling kelp fronds as particles which grow (variety of particle properties change) depending on how much nutrients the particles uptake from a biogeochemical model, and also release tracer back into the model. I also envisage using this to exert drag on the flow at some point.; > ; > ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) [ ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) ](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif) [ ](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif); > ; > Although I've had this working as custom dynamics of the particles the effect of the particles tendency can only be integrated with explicit Euler, i.e. at each substep it just does `tracer[i, j, k] += value*Δt`, where as this solution allows it to be properly integrated along with the other tendencies. I couldn't think of a way to implement this as a forcing function before, but perhaps I could use a callback to update an au",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239608678:461,test,test,461,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1239608678,1,['test'],['test']
Testability,"> > Can you post the output of; > > ```julia; > > using Pkg; Pkg.status(); > > ```; > ; > ```; > Status `~/Projects/TRACE-SEAS/Test-LK/Project.toml`; > [9e8cae18] Oceananigans v0.90.0; > ```. OK, I see. Pretty clean environment! :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1799289983:127,Test,Test-LK,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1799289983,1,['Test'],['Test-LK']
Testability,> > Did you test it? :); > ; > Yes! There is a test! There is a second one now. I meant: did you test that the test was doing what you thought it would? . But you already answered it ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325365183:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325365183,4,['test'],['test']
Testability,"> > Do these test pass locally?; > ; > E.g., on tartarus when I run the `test_timestepping.jl` it passed on GPU. Did you use `--check-bounds=yes`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545530211:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1545530211,1,['test'],['test']
Testability,"> > Do you know how this layer thickness compares to the grid scale?; > ; > At the central latitude of 45 deg, I get `L = (nu / beta)^(1/3) ~ 70 km` (with `nu = 5e3` and `β = 1.62e-11`). This is almost equal to the grid spacing, so I guess we are barely resolving the Munk boundary layer in the 1 degree simulations.; > ; > I'm hoping to get eddies at higher resolutions though, so I guess if / when the solution becomes turbulent, the Munk solution no longer applies. I agree that eventually, maybe the Munk layer might not apply, but it will initially. When the gyre spins up it is going to develop a western boundary current that had a thickness on the order of the Munk solution, and this can certain give rise to vorticies and subsequent turbulence. But I do believe you need to resolve this layer initially otherwise you can't resolve the western boundary current and things will not develop properly. . I would suggest pickin the Munk layer thickness to by, say, 5 times that of the coarsest grid. This may give rise to laminar flow but it should allow you to test convergence with higher resolution. But when you go to higher resolution, you can decrease the Munk layer thickness respecitvely, and this should eventually give rise meandering and vorticies.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1433#issuecomment-798604616:1067,test,test,1067,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1433#issuecomment-798604616,1,['test'],['test']
Testability,"> > Doesn't that already exist?; > > We just have to adapt the test; > ; > Yes, the test I think only tests the `NetCDFOutputWriter`. There is already a test for the `JLD2OutputWriter`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2001918160:63,test,test,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2001918160,4,['test'],"['test', 'tests']"
Testability,"> > Great, I also think option 4 is the best. I prefer the kwarg formulation, but I don't feel strongly about it.; > > The issue atm is that I think I won't have time to finish this PR by myself for a few days (I couldn't figure out why some tests aren't passing, so it'll probably take me a fair amount of time to have everything done). So if this needs to be ready for AGU OSM I'd need some help getting the tests to pass (it might actually be better to start over in another PR).; > ; > I can open a new PR if you're ok with that.; > ; > I guess `buoyancy_unit_vector` is in fact the right name (rather than `vertical_unit_vector`! `gravity_unit_vector` (which is antiparallel to `buoyancy_unit_vector`) might be more familiar though. I think starting over in another PR is probably the way to go unfortunately. It'll probably take too long to revert some of the things I initially did here. I'll try to help out there however I can.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050061274:242,test,tests,242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050061274,2,['test'],['tests']
Testability,"> > Hmm, it should not be a tolerance issue. To debug this I would probably suggest Tartarus since it has at least 2 GPUs (I am not sure your laptop has 2 gpus 😄 ); > ; > I checked and tests were failing because values of order 1e-19 or less were not agreeing... see https://buildkite.com/clima/oceananigans-distributed/builds/1131#018d7a2d-f6c5-4e22-8006-3e2d318465d1/170-5060; > ; > I replaced `a ≈ b` (which defaults to `atol=0` with `isapprox(a, b, atol=eps(eltype(grid)))`; see [385a05d](https://github.com/CliMA/Oceananigans.jl/pull/3403/commits/385a05d55dfe189eb0734c9120d0f9604eb070f7). Makes sense. Are the differences associated with some of the unrolling that we added (eg to fill halo regions)?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1930124210:185,test,tests,185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1930124210,1,['test'],['tests']
Testability,"> > How about #3616 @mncrowe ?; > ; > As in I should test on glw/time-interval-fix branch?. Done, to conclude:. My MWE replicates the issue on 'main' but your fix on 'glw/time-interval-fix' works. Your MWE does not replicate the issue for me on either branch.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152621162:53,test,test,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152621162,1,['test'],['test']
Testability,"> > How about a test? If it's not trivial then don't worry.; > ; > I like the idea of a test.; > ; > One example could be the following:; > ; > 1. define the horizontal compoments of velocity to be random fields,; > 2. use this function is used to compute the vertical velocity,; > 3. compute the divergnece of the resulting three-dimensional field and compute its norm (which should be zero).; > ; > If you do this for two different resolutions you should find that the error decreases with higher resolution.; > ; > Do you think this would be of interest?. @francispoulin a test like that would be good. Sometimes things that are fixed have subsequently been re-broken - because they don't have unit test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896868081:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896868081,4,['test'],['test']
Testability,"> > I admit that I'm not quite satisfied with these:; > > https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65; > > ; > > tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?; > ; > Shouldn't this be implemented with multiple dispatch? Chains of if-statements are the red flag. Yea, another issue of mine.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653880342:145,test,test,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653880342,2,['test'],"['test', 'tests']"
Testability,"> > I am closing the issue because the solution is to give always `Float64` as suggested by @simone-silvestri; > > ```julia; > > @inline tank(x, y) = ifelse(radius(x, y) < L, -H, Float64(0.0)); > > ```; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > ; > > I tested and this is working now. Had some issues in the boundaries, but I might discuss that in another issue/discussion.; > ; > Note there is no difference between `0.0` and `Float64(0.0)`. Sorry,. What I actually used was; ```julia; @inline tank(x, y) = ifelse(radius(x, y) < L, -H, 0.0); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1089431710:275,test,tested,275,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1089431710,1,['test'],['tested']
Testability,"> > I don't know how to help, but I am following to see if can learn something and maybe next time I can be a better helper.; > ; > Can you reproduce the error in the test locally? You can try navigating to `/test`, starting with `julia --project`, and then; > ; > ```julia; > julia> include(""test_forcings.jl""); > ```; > ; > you might need to add a few packages to your global environment like `Test` to make this work.; > ; > Also running; > ; > ```; > TEST_GROUP=time_stepping_2 julia --project -e 'using Pkg; Pkg.test()'; > ```; > ; > will run the forcing tests (and a few others). If you do that, do you see an error like in the CI or do the tests pass?; > ; > Also running just the problematic test in isolation can be useful:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/791bb83e4c49386cc31292bf391762f1cd96bdee/test/test_forcings.jl#L114-L130. @iuryt this is no longer needed since I fixed the issue (now we wrap constant velocities in `ConstantField` and that seems to work). The remaining error is a GPU compilation issue...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1094117884:167,test,test,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1094117884,8,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"> > I might suggest removing the *z^3 to avoid this potential problem.; > ; > Good idea, I agree that doesn't make sense!; > ; > Pretty good point about user input. We also might want to introduce special abstractions for two-dimensional fields so we don't have to write `uh[i, j, 1]` all the time (which we will unfortunately have to do right now). Since this is a solvable problem and not a big deal I suggest we wait until we have working code and then we can raise a bunch of issues then. Since you agree I will go in and modify the test file to remove this from the two lines.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1188#issuecomment-730564345:537,test,test,537,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1188#issuecomment-730564345,1,['test'],['test']
Testability,"> > I now recall the reason for the discrepancy. It was due to an index shift, which made filling the extra layer of halos quite straightforward, so I proceeded with it. For example, field_1[2:Nc+1, Nc+1:Nc+Hc] from an odd panel corresponds to field_2[1:Hc, 1:Nc] from the panel to the north. I can modify this expression to field_1[2:Nc, Nc+1:Nc+Hc] aligning with field_2[1:Hc, 2:Nc] and make similar adjustments for other halo fillings to minimize confusion. Please let me know your thoughts.; > ; > My thoughts are two:; > ; > * how will we know that while doing that change you won't break anything since there is no test for any of these things; > * I understand that you are telling me is merely an indexing reordering, that is instead of doing; > ```julia; > for j in 1:10; a[j] = 10; > ```; > ; > ; > ; > ; > ; > ; > ; > ; > ; > ; > ; > you do; > ```julia; > for j in 2:11; a[j-1] = j-1; > ```; > ; > ; > ; > ; > ; > ; > ; > ; > ; > ; > ; > right? But these two will result to the same array. So I'm confused. I understand that there is no test for these things, but the chances of breaking the code is nil because the same logic applies to the remaining halo points. Regarding the index shifting, your example is not quite analogous to our case. Just consider my example above, where field_1[2:Nc+1, Nc+1:Nc+Hc] of panel 1 corresponds to field_2[1:Hc, 1:Nc] of panel 3. That is for sure, right? If, instead, I specified field_1[2:Nc, Nc+1:Nc+Hc] of panel 1 corresponds to field_2[1:Hc, 2:Nc] of panel 3, that would have removed the additional row/column of halo fills and made it look cleaner. I thought if the additional row/column were filled incorrectly, it would have been reflected in the remaining rows/columns as well, since the halos were filled in the same way. But, yes, I agree with your other comment that cleaning up the code would enhance its clarity and enable future recollection of our work.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2025907530:621,test,test,621,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2025907530,3,"['log', 'test']","['logic', 'test']"
Testability,"> > I think something like you're proposing would have added to my confusion.; > ; > Isn't the confusion a problem with the output writers API? I think it sounds like a great idea to support `AbstractOperation` output. It's kind of logical. Doing this even allows us to do some clever stuff behind the scenes, like using one underlying array to store the results of multiple computations performed serial (thus saving memory). The confusion is that I wasn't aware that that a `Field` has `data`, and therefore takes up memory, which allows it to store values. While an `AbstractOperation` is just instructions on how to compute things. This extended to the output writers, but I wouldn't say output writers were the source of confusion. If we make it so that users don't have to know what a `Field` is and we can use abstract operations everywhere, then my comment is moot.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2235#issuecomment-1036795591:232,log,logical,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2235#issuecomment-1036795591,1,['log'],['logical']
Testability,"> > I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior...; > > I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm.; > ; > Agreed.; > ; > > Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do).; > ; > Thanks, but I unfortunately won't have time to dedicate to this for at least a few weeks. So please feel free to start the PR!. Great. I think the PR is nearly finished over at #3574. Give it a look over when you have time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088592499:385,test,tests,385,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088592499,1,['test'],['tests']
Testability,"> > I think the test is failing becaue `f` is returning a `Float64`, so when the grid is `Float32` `eps(maximum(f))` is wrong. Is there a way to set the type returned by `f`?; > ; > you can also pass the grid; > ; > ```julia; > f(x, y, z, grid) = eltype(grid)(...); > ε_max = CUDA.@allowscalar f.(nodes(grid, (Face(), Face(), Face()), reshape=true)..., Ref(grid)) |> maximum |> eps; > ```; > ; > `eltype` is the function I couldn't remember!. I only saw this now -- just to help keep our tests well-written and easy to maintain you should use `convert` rather than the convenience constructors --- eg. ```julia; f(x, y, z) = convert(typeof(x), ...); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516672326:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516672326,2,['test'],"['test', 'tests']"
Testability,"> > I think to preserve the work in this PR, we should add a `Float32` test which will fail if a spurious promotion undermines performance; > ; > Agreed. I'll revisit this PR later to see if I can find where the conversion happens. The test I added only checks to see if we can take a time step. But I should be able to also add a test to ensure no spurious promotion occurred. Ah, that will work as a test if we remove the `convert`. The `convert` is a good sanity check to find where the problem is, but its not a solution since it merely allows the code to run without error --- it doesn't actually allow us to realize the benefits of using `Float32`. Arguably with this it is actually worse to use `Float32`, since the numerics are degraded bbut the perfrmance benefit is not fully realized",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445330720:71,test,test,71,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445330720,4,['test'],['test']
Testability,"> > I think we should add a test.; > ; > We have the figure included here that tests that it has the correct convergence, but I am happy to add another test as well. What did you have in mind?. Yes for sure! The convergence plots illustrates that _this PR_ is functional. The test is different: it ensures that the code doesn't break in the _future_, since PRs cannot be merged in the future unless the tests pass. Nice work!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-906092342:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-906092342,5,['test'],"['test', 'tests']"
Testability,"> > I would think that passing a function instead of collect(0:Nz) would probably be cleaner but both can work.; > ; > Yeah I definitely think passing a function is more intuitive and efficient. As long as that's still an option, I'm happy :); > ; > > VerticallyStretchedRectilinearGrid(FT, size=(1, 1, Nz), x=(0, 1), y=(0, 1), z=(0, Nz), z_stretch=collect(0:Nz)); > > What's nice about this is that you still specify the domain boundaries, as other grids do, and you specify the stretching function separately. This makes it easier to do a stretch in any direction, and #1532 does just that.; > ; > Sorry, but I'm a but confused. Aren't `x`, `y` and `z` supposed to be dimensional? Meaning they are the physical bounds of the domain? In your example `z=(0, Nz)`, which does not correspond to the physical boundaries at all. Or did you mean to write something like; > ; > ```julia; > VerticallyStretchedRectilinearGrid(FT, size=(1, 1, Nz), x=(0, 1), y=(0, 1), z=(0, Lz), z_stretch=collect(0:Δz:Lz)); > ```; > ; > If so then it makes sense to me, but that's a bit redundant, no? (Sorry for the confusion!). First, yes, it will certainly be an option. Second, unfortunately I took this example from one of the tests, hence the strange choice of parameters. Sorry about that. . But yes, x,y,z are dimensional and are the physical bounds of the domain. What you propose is what I should have written down before. That would be how to specify the stretched grid using an array. Otherwise, you could pass a function.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1544#issuecomment-813447822:1208,test,tests,1208,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1544#issuecomment-813447822,1,['test'],['tests']
Testability,"> > I'm not sure why this fails as the test runs fine locally; > ; > You may need to run with `--check-bounds=yes` (the tests run with this option, but it's not default). I don't think so. Right?. https://github.com/CliMA/Oceananigans.jl/blob/84bc3c3c5438cda2e8f188a0e1a839ae7800b994/.buildkite/pipeline.yml#L257",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630141560:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630141560,2,['test'],"['test', 'tests']"
Testability,"> > I'm strongly opposed to having multiple small packages.; >; > Why is that, given the benefits?. Mainly I think we can get all the same benefits by maintaining a single unified and tidy repository with sub-modules. I don't see Oceananigans as a complex project yet, we're barely at 2,500 lines of code (minus turbulence closure operators which aren't integrated yet). I can see reasons for having a separate repository for examples and tutorials if there are enough of them, but I don't see e.g. the output writers as being logically separate from the main code. As a stand alone package, OceananigansOutput.jl doesn't do anything useful. Something like TurbulenceClosures.jl could though. Keeping things in tidy submodules within a single repository increases code visibility, which I think is important. When I see a package or framework spread across multiply small packages I find it hard to get an idea about what it can do. Another nice thing is we currently have ""unified versioning"" so when releases occur we know everything works together. We don't have to worry about running with Oceananigans v0.x with OceananigansPlotting v0.y and OceananigansOutput#master to fix some issue. From a development perspective, issues and pull requests are now spread across multiple repositories and we can end up with pull requests that depend on other pull requests in other repositories, e.g. when adding in halo regions the main code got refactored but so did the output writers and plotting code would change as well. We can also end up with multiple test suites that need to pass, plus possibly multiple CI pipelines to manage. So right now it's easy to make atomic changes that touch upon multiple pieces of code (and we'll probably be in this stage where we need to refactor frequently for a while). I also don't have to git clone a bunch of repositories just to work on a simple example. But this is getting off-topic.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-502137749:527,log,logically,527,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/284#issuecomment-502137749,2,"['log', 'test']","['logically', 'test']"
Testability,"> > Is it a good idea then? Is it worth the effort? We'll have to keep it up?; > ; > I'm almost there. I just can't seem to be able to submit the coverage reports!; > ; > We don't need to keep anything up! It's just for our own information. Well, if, e.g., we notice from the Codecov report that a big chunk of a submodule is not tested then we can have that in mind and either write some tests or inform users to use that module with caution?. Oh, I thought it required extensive changes in our yml files.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063531357:330,test,tested,330,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063531357,2,['test'],"['tested', 'tests']"
Testability,"> > Is this something that is handled on the MIT side ?; > ; > Yeah, it’s something the Oceananigans dev team should sort out! :). Curious to know if there's any movement on getting this resolved. I can offer some help in getting an allocation request in to Pawsey Supercomputing Centre - I mentioned to @navidcy that I have a solution for doing CI on systems with job schedulers (like Pawsey's Setonix). . If existing hardware systems at MIT are not available for this, I can also help with procurement, if needed. If you go this route, I can look into providing some time on our systems to get testing rolling.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1995881191:596,test,testing,596,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1995881191,1,['test'],['testing']
Testability,"> > Isn't this because of the implicit solve? What grid/model combination are you using?; > > You can try testing again using a matrix solver for the non immersed model (if you are using the hydrostatic model). The timings should be similar.; > ; > They are probably using the FFT-based solver + `NonhydrostaticModel`. Exactly. > ; > It might be worthwhile benchmarking this problem on `main` with immersed boundaries but no drag. That's a more direct measurement of the cost of the drag law implemented here over no drag law, but still immersed boundary. We can do that, but I'm keeping this branch up-to-date with `main` for now so (at least for now) it won't change results. > I also suggest setting up a test that evaluates whether the drag boundary condition produces a measurable difference in a simulation that has a steppy boundary (like a constant slope, rather than a flat wall). You want to determine the relative contribution of this explicit drag compared to form drag for your setup of interest before investing lots of effort here. That's a good point. Although I'd have to discuss this with @whitleyv since she's the main developer here. My thinking is that if indeed the form drag dominates, we can probably upgrade this to a partial cell grid-fitted IBM (much like @francispoulin intends to do in https://github.com/CliMA/Oceananigans.jl/pull/2306). If my understanding is correct, you'd only need to change the definition of the volumes and areas to account for the partial step and it seems to significantly decrease form drag.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1084669663:106,test,testing,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1084669663,3,"['benchmark', 'test']","['benchmarking', 'test', 'testing']"
Testability,"> > It's been resolved in commit [bbfc656](https://github.com/CliMA/Oceananigans.jl/pull/3573/commits/bbfc656582689e35256f0f3f8f93e98c2479c810).; > ; > Did you test that the issue is resolved with this edit or you assume that @glwagner was right. Because many tests seems to have broken in the PR after this change. @navidcy, I concur that the issue remains unresolved. Initially, I thought it was addressed during the manual bounds-checking that @glwagner and I conducted together. However, since other tests are failing, we cannot proceed with merging this PR at this time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3572#issuecomment-2090640256:160,test,test,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3572#issuecomment-2090640256,3,['test'],"['test', 'tests']"
Testability,"> > It's possible to do anything really, the `.toml` files are ordinary text files. The second question is the important one --- what's the best way to do this that causes least headaches.; > ; > Yeah, my question was in the sense of ""is there Julia functionality to do that"". If it requires us to write a script to manipulate the text, then I agree that it'd be too much of a headache for something rather hacky... I guess what `Pkg` provides is: if we add `Oceananigans` as a dependency, compat for `Oceananigans` is imposed on `benchmarks/Project.toml`. But this complicates the purpose of the benchmarks, which is to execute the local code. Maybe we can add lines at the top of the benchmark script like. ```julia; using Pkg; Pkg.dev(""..""); ```. Then we add the local version of Oceananigans to the `Project.toml` before the script is executed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090399049:531,benchmark,benchmarks,531,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090399049,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"> > It's something to do with GPU, maybe GPU reductions?; > > ```; > > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > > --; > >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; > >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); > >   | Evaluated: 0.0 ≈ 1.0471975511965976; > > ```; > ; > I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(. I guess its a CUDA version issue or something",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329:102,Test,Testing,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1567729329,3,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,"> > Just a question about implementation:; > > It looks like #2538 implemented just one solver, with an optional tridiagonal component, is that right. Why does this PR take a different approach? Wouldn't using a single solver result in less code / duplication of transform logic?; > ; > Here, the approach follows the serial implementation quite closely, where we have an FFT solver and a FourierTridiagonal solver. Additionally, the fields of the solvers are tailored to their task; for example, there is no tridiagonal solver in the pure FFT solver. You might argue that we just put nothing if we don't need it, but then we have more ""ambiguous"" fields like eigenvalues that are not needed in the tridiagonal solver and source_term that is not needed in the FFT. I am not convinced that a single solver would lead to less (or cleaner) code. Mostly because the underlying code (constructor and `solve!` functions) is compact and slender enough to justify writing individual functions for different grids (the number of lines in the docstring for the `DistributedFourierTridiagonalPoissonSolver` is comparable to the code related to the solver). I think this improves the interpretability of the algorithm. Maybe an improvement would be writing a unified constructor that would spit out the different solvers.; > ; > > 2. It might make sense to split the constructor into two parts, so that we can build a tridiagonal solver even when all three directions are regular. That could be useful for testing, for example.; > ; > I have added this capability by passing the `stretched_direction` kwarg.; > ; > > Also note that in terms of operation count the tridiagonal solve is cheaper than FFT...; > ; > I think, all things considered, the mixed FFT / tridiagonal solve will have basically the same computational cost as the pure FFT solve only for a stretched x direction. The additional transposes required for a y or stretched z direction will completely dominate the cost of the actual operations.; > ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2278419522:273,log,logic,273,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2278419522,1,['log'],['logic']
Testability,"> > Next week I will work on getting higher order methods working for ShallowWaterModels.; > ; > That would be awesome!; > ; > Does it also make sense to work on producing some validation tests for `ShallowWaterModel` for a next PR? While we can test that operators are implemented correctly in isolation, we won't understand whether everything is integrated into `ShallowWaterModel` until we have some dynamics tests and larger validation runs that reproduce results in the literature, right? Or do we need these higher-order operators to use `ShallowWaterModel` at all?; > ; > To validate the generic implementation of higher-order operators, I think we can implement high-order diffusion and reuse some of the convergence validation tests for `IncompressibleModel`, like the forced flow fixed slip test. When `ShallowWaterModel` has similar validation tests we can also do the same for `ShallowWaterModel`. I think that getting some tests is a good next step. I'll see what kind of tests we have now for IncompressibleModel and will put together a few tests for ShallowWaterModel",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-744073132:188,test,tests,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-744073132,9,['test'],"['test', 'tests']"
Testability,"> > Ok I fixed that. Probably we should use a Field rather than ones for the test and examples, because it automatically adapts to GPU, distributed, etc, so it's a bit better.; > ; > But I thought the whole idea is to be able to provide an `Array` for forcing. `Field` is an abstract array. You should think of `Field` as a kind of `Array`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1988818257:77,test,test,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1988818257,1,['test'],['test']
Testability,"> > Only `VectorInvariantFormulation()` works on a lat-lon grid right? I was trying to see whether the model constructor will error with some informative message if, e.g., a lat-lon grid is provided with `ConservativeFormulation()` but I couldn't see something. Is this something we'd like?; > ; > Correct. For the the conservative form we need to use the rectilinear grid but the vector invariant form, I think we can use any grid.; > ; > I agree that we should have a test for that and maybe something in the docs, sometime?. Added a note in docstring + an `@assert` check. See [43cfed7](https://github.com/CliMA/Oceananigans.jl/pull/2522/commits/43cfed75cf5601f543f91eef8cdd3c29d90fa05e)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1143043451:470,test,test,470,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1143043451,2,"['assert', 'test']","['assert', 'test']"
Testability,"> > Please could someone try rerunning the failed test since it shouldn't have changed?; > ; > It seems it passed already. I think someone else must have restarted it, thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1579323172:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1579323172,1,['test'],['test']
Testability,"> > Probably the quickest way to start is simply to add the ""holes"" manually after calling `compute!`.; > > The reason this test is failing is not because `compute!` doesn't work, right? Getting `compute!` to work is just visualization.; > ; > We need to be able to compute the vorticity in those points as well as those points are involved in the ζk^×u term. So I think the dynamics test is blowing up because of that, but I'm not 100% sure. But I think the problem here is just that the kernel launched by `compute!` does not extend to all the points where zeta is defined. On the other hand, when zeta is used during time-stepping, we compute it for the u- and v- tendency kernels. In those kernels, all relevant grid points are touched.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1759751128:124,test,test,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1759751128,2,['test'],['test']
Testability,"> > Should we remove the warning when constructing `FourierTridiagonalPoissonSolver`?; > ; > Are you talking about this one?; > ; > https://github.com/CliMA/Oceananigans.jl/blob/5fbd8cd20c5db8e9b11b6175984e7592a08fc874/src/Solvers/fourier_tridiagonal_poisson_solver.jl#L31-L34; > ; > If so, I think we can remove it after the tests pass, no? Unless you think there might be more issues lurking. Yes, that warning. I realized that the Poisson solver tests (not withstanding the bizarre aspects pointed out in #1867) don't test Flat topologies for the vertically stretched grid. So I've added those. If those pass we can certainly take down the warning. I guess the internal wave test is also a good indication that the solver is working. Either way the warning was a bit misleading since no calculations using the vertically stretched grid were likely to work without correct metrics --- not just calculations involving the Poisson solver.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881949550:326,test,tests,326,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881949550,4,['test'],"['test', 'tests']"
Testability,"> > Since we already have the full-cell grid-fitted IBM it might be better to just focus on that for now and later modify it to make it partial-step when everything is working well (I think we'd just need to modify the calculation of vertical areas and volumes, no?).; > ; > Not sure what you mean in terms of ""focus"". I wasn't proposing any work, just speculating about the potential advantages of shaved cells. Do you mean focus on full cell IBM for this particular test? I agree with that --- we don't have shaved cells so we can't test it ?. Sorry for not being clear. I meant focus for development. For example, I see you're planning on implementing a more general BC interface for IBMs in https://github.com/CliMA/Oceananigans.jl/pull/2437. My point is that I think it would probably be easier to focus efforts on that kind of stuff first, make the full-step grid-fitted IBM (and its interface) functional, to only then try to improve the IBM implementation itself. Hope that clarifies it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100253538:468,test,test,468,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100253538,2,['test'],['test']
Testability,"> > So I think that the tests generally are very close to the memory limit (which I think is around 1GB, not sure how that's being set). It looks like the tracer sinking isn't actually using much more memory but its enough to push it over. If I remove the output writing and speed field tracking (which don't get tested in this run anyway) from the final test it seems to keep the memory usage lower.; > > I can't test it myself on a GPU right now so am going to push and hopefully it'll work!; > ; > Interesting. I don't believe we make any attempt to manage GPU memory. However, the tests are all quite lightweight (the largest are probably the regression tests, at 16^3?) The GPU we use for CI has 24 GB total memory. Up to 16 jobs can run simultaneously. I'm not sure this is consistent with a test being just over the limit, because this would mean the tests would intermittently pass, right? It's slightly stochastic how many CI jobs are running simultaneously. I'm not really sure where this limit is coming from because I get the same behaviour on our GPU which is on a node with 40GB of memory, and it consistently fails when the memory usage of the process gets to fractionally over 1GB. I think the spike in memory usage is occurring on the line `Gp_kernel! = calculate_particle_tendency_kernel!(device(arch), workgroup, worksize)` which I wouldn't have thought would allocate much memory?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248303546:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248303546,8,['test'],"['test', 'tested', 'tests']"
Testability,"> > Some good news is that more tests seem to be passing compared to the prevoius PR.; > > One of the messages I saw was there was a cancellation signal, see below. Lots of the tests just cancelled, and I'm not sure why.; > > ```; > > Testing Oceananigans; > > # Received cancellation signal, interrupting; > > ```; > ; > I don't know what you saw. But what I see here:; > ; > https://buildkite.com/clima/oceananigans/builds/14750; > ; > is that almost all tests pass. Thanks @navidcy , that does look very promising!. The error that I saw is copied below. I am not quite sure where this comes from though.; ```; [8dfed614] Test; Status `/tmp/jl_pRHyI0/Manifest.toml`; [403513] signal (11.1): Segmentation fault; in expression starting at /storage5/buildkite-agent/.julia-14750/packages/CUDA_Runtime_jll/rcOoh/.pkg/platform_augmentation.jl:102; Allocations: 2907 (Pool: 2899; Big: 8); GC: 0; ERROR: failed process: Process(`/storage5/buildkite-agent/julia-1.10.2/bin/julia -C native -J/storage5/buildkite-agent/julia-1.10.2/lib/julia/sys.so -O0 -g1 --color=yes -O0 --color=no --history-file=no --startup-file=no --project=/tmp/jl_pRHyI0/Project.toml --eval 'append!(empty!(Base.DEPOT_PATH), [""/storage5/buildkite-agent/.julia-14750""]); append!(empty!(Base.DL_LOAD_PATH), String[]); cd(""/storage5/buildkite-agent/.julia-14750/packages/CUDA_Runtime_jll/rcOoh/.pkg""); include(""/storage5/buildkite-agent/.julia-14750/packages/CUDA_Runtime_jll/rcOoh/.pkg/select_artifacts.jl""); ' -t1 --startup-file=no x86_64-linux-gnu-libgfortran5-cxx11-libstdcxx30-julia_version+1.10.2`, ProcessSignaled(11)) [0]; Stacktrace:; [1] pipeline_error; @ ./process.jl:565 [inlined]; [2] read(cmd::Cmd); @ Base ./process.jl:449; [3] collect_artifacts(pkg_root::String; platform::Base.BinaryPlatforms.Platform); @ Pkg.Operations /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.jl:720; [4] collect_artifacts; @ /storage5/buildkite-agent/julia-1.10.2/share/julia/stdlib/v1.10/Pkg/src/Operations.j",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988500458,5,"['Test', 'test']","['Test', 'Testing', 'tests']"
Testability,"> > Test nonlinear advection for 2D/3D schemes; > ; > You mean, validate 2D/3D high-order momentum advection for flux form schemes?; > ; > Another issue with a vortex solution is that the momentum term is identically zero in the exact solution. So I'm not sure this test isolates convergence.; > ; > I believe inviscid Burgers will form a shock, and then be subject to numerical dissipation. If you add viscosity, then you are limited by the accuracy of the viscous term. So I'm not sure it even works to turn off the pressure gradient. That's not correct. The inviscid Burgers will form a shock (indeed!) and this will result in energy dissipation but that's *not* numerical dissipation but rather a physical one!. ![Burgers-anomalousdissipation-marker](https://user-images.githubusercontent.com/7112768/179238464-c9890412-59de-43bd-9a82-24f5c7982aa8.gif)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185575913:4,Test,Test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1185575913,2,"['Test', 'test']","['Test', 'test']"
Testability,"> > Thanks @navidcy for pointing this out.; > > I can see that now we loop over `float_types`, but I don't see where this is set to `[Float32, Float64]`, as it is in other tests. Maybe I'm missing something?; > ; > https://github.com/CliMA/Oceananigans.jl/blob/0ddffe59457ece2b07452a421a8125abf4f4820f/test/runtests.jl#L54. Ah, thanks, I was looking in the script that was modified. It makes sense that it's specified in `'runtests.jl`. Thanks @navidcy for the clarification. I am happy to see this change and that the tests all pass. I'm confused about the error that we're getting in #1780 .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870171220:172,test,tests,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870171220,3,['test'],"['test', 'tests']"
Testability,"> > The hydrostatic free surface model is pretty similar to the shallow water model with one layer when the free surface displacement is small. So I think it probably makes sense to just work with `HydrostaticFreeSurfaceModel`.; > ; > How difficult would it be to get a rigid lid version of `HydrostaticFreeSurface`? If we could do that then the RH wave solution would probably be an exact solution, and might help for testing. We get rigid lid by taking `g -> infty`. The implicit solve for the free surface then limits to a barotropic pressure solve. See https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#pressure-method-with-rigid-lid. and https://mitgcm.readthedocs.io/en/latest/algorithm/algorithm.html#pressure-method-with-implicit-linear-free-surface. While mathematically satisfying to take `g` to infinity _strictly_, I think using a very large value likely achieves the same thing practically speaking since it works out both in the mathematics and in the numerical algorithm.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062935271:419,test,testing,419,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062935271,1,['test'],['testing']
Testability,"> > The more the merrier! Contributors are generally welcome on our end too. Links @christophernhill in his comment were broken. So just in case:; > > ; > > * [JOSS issue (accepted)](https://github.com/openjournals/joss-reviews/issues/4207), [paper (proofs)](https://github.com/openjournals/joss-papers/blob/joss.04207/joss.04207/10.21105.joss.04207.pdf); > > * [Github repo (JuliaOcean)](https://github.com/JuliaOcean/PlanktonIndividuals.jl); > > ; > > _PlanktonIndividuals.jl: A GPU supported individual-based phytoplankton life cycle model_; > ; > @gaelforget it looks like you might have some Oceananigans examples which is super cool!! Can you point to them for us? Have you considered expanding to ""online"" capabilities? What are the pros and cons of that?. The two models we currently have some support for (offline) are `MITgcm` and `oceananigans.jl`. . I have examples for both models in <https://gaelforget.github.io/ClimateModels.jl/dev/examples/> which you can run the JuliaClimate sandbox <https://juliaclimate.github.io/Notebooks/> and generate the kind of model output that `PlanktonIndividuals.jl` or `IndividualDisplacement.jl` can then ingest as input for offline computation. The `PlanktonIndividuals.jl` documentation has corresponding examples on the ecology + bgc side. An online mode with models like `MITgcm` and `oceananigans.jl` would be useful in my view, in the case of both `PlanktonIndividuals.jl` or `IndividualDisplacement.jl`. With this being said, I tend to most like the idea of small'ish modeling components developed outside of monolitic modeling efforts that emphasize code re-usability and integration with multiple models. . For completeness, here is the reference to the JOSS paper on [IndividualDisplacement.jl](https://joss.theoj.org/papers/10.21105/joss.02813) -- https://joss.theoj.org/papers/10.21105/joss.02813.pdf -- and the [GitHub repo](https://github.com/JuliaClimate/IndividualDisplacements.jl)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2512#issuecomment-1117637509:994,sandbox,sandbox,994,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2512#issuecomment-1117637509,1,['sandbox'],['sandbox']
Testability,"> > The movies don't play for me.; > ; > Weird, they're playing for me on two different browsers... not sure what to do about that. There's nothing for you to do, I was on plane internet! I can see it now. I was just letting you know... > > The tridiagonal solvers are also incorrect for vertically-periodic domains, I think (well, now that we have x- and y- tridiagonal solvers I believe they are also incorrect for x- and y- periodic if using an x-tridiagonal or y-tridiagonal solver).; > ; > True, but just to be clear, these simulations don't use any stretched grid direction, so I believe they don't use the tridiagonal solver, correct?. Correct --- I just wanted to issue that warning in case there was more interest in vertically-periodic simulations (we basically don't test that situation, but it wouldn't be unreasonable to work on that).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3290#issuecomment-1734754117:778,test,test,778,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3290#issuecomment-1734754117,1,['test'],['test']
Testability,"> > The type infererence issue seems to be fixed. For `flow_over_hills.jl` the cost per time-step is approximately the same on my CPU for the ""reference case"" (no immersed boundary), and either free-slip or no-slip immersed boundary.; > ; > That's awesome! Just out of curiosity (since I also investigated this I couldn't figure it out), how did you fix the type inference issue?; > ; > cc @wenegrat @whitleyv. Here the issue was introduced in an early commit on this PR --- so it may not be exactly the same issue you faced. On the other hand, I think it happened with the same function that you modified (`conditional_flux`) so there may be a lesson you can glean. I also changed the design of the function (previously it took a function argument, `flux`, now it simply takes the scalar value of the flux). That subtle change might have made an important difference, since in the first case a function is being passed into another function (requiring the compiler to specialize on a function argument, sometimes a tricky thing), and another case it was just a floating point number being passed in (relatively vanilla in comparison). Did you test that kind of change in your PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101520394:1144,test,test,1144,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101520394,1,['test'],['test']
Testability,"> > There is also already a 1D validation test for the immersed boundary --- I wonder if it also shows this bug:; > > https://github.com/CliMA/Oceananigans.jl/blob/master/validation/immersed_boundaries/immersed_hydrostatic_diffusion.jl; > ; > @glwagner I'm not sure. I tried running it, but got an method error on the `HydrostaticFreeSurfaceModel`: _FreeSurface( ...) is ambiguous_. Looks like that validation experiment is missing . ```julia; pushfirst!(LOAD_PATH, joinpath(@__DIR__, "".."", "".."")); ```. ~~so it may have been using an old version of Oceananigans in your global environment!~~ EDIT: even if this were the case, I still get the error after adding an appropriate `pushfirst!`. I'll try to fix this separate from this PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900465685:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900465685,1,['test'],['test']
Testability,> > There is something fishy with MPI.jl..; > ; > CPU or GPU (or both!) ?. There are only `CPU distributed tests` and they are failing before they even start:; https://buildkite.com/clima/oceananigans/builds/3587#c5384940-778a-42c1-842b-c57c1209b786. This error beats me. :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1920#issuecomment-891514571:107,test,tests,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1920#issuecomment-891514571,1,['test'],['tests']
Testability,"> > This is looking pretty good! My only comment is that it's not intuitive for a given user to figure out how to opt for a hydrostatic pressure separation. A flag called `separate_hydrostatic_pressure` that takes `true`/`false` would be much more intuitive, although we'd need a little more code. Should we prioritize user-friendliness here?; > ; > This is more flexible, because sometimes users want to have access to the pressure field prior to model construction. If we use a flag, then we either can't support that or have to put some annoying logic in the constructor. Since I feel it'll be rare that people want to change this kwarg, I think the trade-offs work out that its better to have a simpler constructor even if those rare users that want to separate hydrostatic pressure have to build `CenterField`. Got it! Agreed. Should we test that `hydrostatic_pressure_anomaly` is either `CenterField(grid)` or `nothing` and throw a helpful error otherwise?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2088696540:549,log,logic,549,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2088696540,2,"['log', 'test']","['logic', 'test']"
Testability,"> > This update just fixes a trivial problem with the test though, which we need so that tests pass on `main` (we can't merge any PRs until we fix this urgent issue).; > > I suggest that we fix more substantial issues with the test in a future PR? It might be helpful to open an issue with some of your comments too @christophernhill; > ; > @glwagner that sounds OK.; > ; > the include(""dependencies_for_runtests.jl"") breaks; > ; > ```; > export TEST_FILE=test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl; > /Applications/Julia-1.7.app/Contents/Resources/julia/bin/julia --project=. test/runtests.jl ; > ```; > ; > workflow because of; > ; > ```; > const AB2Model = NonhydrostaticModel{<:QuasiAdamsBashforth2TimeStepper}; > ```; > ; > in; > ; > ```; > utils_for_runtests.jl; > ```; > ; > which can't be redeclared since its const? Is there a trick to fix that?. It should be ok to redeclare a `const` as something identical:. ```julia; julia> const a = 1; 1. julia> const a = 1; 1. julia> const a = ""hi""; ERROR: invalid redefinition of constant a; Stacktrace:; [1] top-level scope; @ REPL[3]:1; ```. So it's not re-including the file that's a problem, but rather conflicting definitions of `AB2Model`. But I don't know why this issue wouldn't also arise if `dependencies_for_runtests.jl` is included even just once. I'll look into it. PS I recommend using `include` rather than running a single-file test because if any debugging needs to be done, the test will run again on the second `include` very quickly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002699384:54,test,test,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002699384,6,['test'],"['test', 'tests']"
Testability,> > Usually restarting the test works for me to clear that error; > ; > Good to know. How can I do that?. I don't think you can because you need access to the Clima buildkite. But @simone-silvestri can do it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1157917180:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1157917180,1,['test'],['test']
Testability,"> > Very nice work @glwagner , and thanks for making this. Lots of good stuff here.; > > In your calculations, you find that there is saturation at 16 threads. I might guess that you have 16 cores on one node? I would think that this should be node dependent.; > > Also, in the table, might it be possible to compute the efficiency as well? I think that's more standard than speed up.; > ; > Ah, this machine has 48 cores. Since threading has an overhead cost, we expect saturation at some point. It's surprising that this happens at just 16 cores for such a large problem (512^3) though.; > ; > We can calculate more metrics for sure.; > ; > I think it would be worthwhile to investigate whether other threading paradigms scale differently for the same problem. Numba + parallel accelerator might be a good test case. @hennyg888 would you be interested in that?; > ; > Here are some docs:; > ; > https://numba.pydata.org/numba-doc/latest/user/parallel.html. You run out of memory bandwidth at some point - usually before you get to saturate all the cores for something; like diffusion. So some of 16 thread drop off could be that. . I guess we could get even more minimalist and check a multi-threaded stream benchmark to see that?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886090304:808,test,test,808,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886090304,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"> > We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl; > ; > The validation script includes a multi region example. Shall I still delete it? I could also clean it up and add toml files in the validation script directory (see #3076). Yeah, that's a random place for a multi region example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577474331,1,['test'],['test']
Testability,"> > We clearly need to hard code quadratic drag though, because for stretched grids and partial cells (and other types of immersed boundaries in the future) we have to do precompute the logarithm of the grid metrics (to use in a Monin-Obukhov-type model) in each direction independently, as well as the logarithm of the roughness.; > ; > That's what @whitleyv and I found also on #2275. I agree that may be better left for another PR... Ah, can't you link to the relevant results? It's good to keep track of all this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105370240:186,log,logarithm,186,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105370240,2,['log'],['logarithm']
Testability,"> > We should also add a test similar to the one that was added in #3512.; > ; > Doesn't that already exist?; > ; > We just have to adapt the test. Yes, the test I think only tests the `NetCDFOutputWriter`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2001910688:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2001910688,4,['test'],"['test', 'tests']"
Testability,"> > We would need CUDA 3.8.0 to develop multiGPU architectures without having to use MPI.; > > You mind if I revamp this PR and try to see what we need to do to update CUDA? I think the tests not passing comes from the fact that we also need to update CUDAKernels to version 0.3.3 (we are now using 0.3.0); > > Actually for me everything works very good from main just switching to CUDA 3.8.0 and CUDAKernels 0.3.3; > ; > That is very exciting! Do you know of any scaling results that people have done using this multiGPU approach? I'd be keen to try this with Oceananigans when it's working. I know that we tried using MPI and GPU last summer and had some problems. One, getting it to work was a pain. Two, the effiicency dropped down to 60% when going fro 1 to 2 GPUs. I now we can do better, and maybe this is a way of doing that. One key problem to solve is that we cannot pass non-contiguous data between GPUs without scalar operations. This affects both ""direct"" communication via the CUDA.jl API and cuda-aware MPI. As a result passing non-continuous data is _extremely_ slow and is probably the primary reason for the abysmal multi-GPU scaling we saw. I believe @simone-silvestri is going to use a single layer buffer to pass halo data (copy halo to buffer, pass to buffer on remote device, then copy from remote buffer to remote halo). Once that's implemented we can potentially use the same code for a multi-node implementation via CUDA-aware MPI.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1044990716:186,test,tests,186,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1044990716,1,['test'],['tests']
Testability,> > Why do we get all these warnings from the Logger when we run the simulation? Perhaps these warnings hint something about the boundary condition issue? They seem boundary condition related...; > ; > What warnings are you getting?; > . see here: https://clima.github.io/OceananigansDocumentation/previews/PR1847/generated/horizontal_convection/,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-877741754:46,Log,Logger,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-877741754,1,['Log'],['Logger']
Testability,"> > ```; > > 1. I tried something in a gist here ( https://gist.github.com/christophernhill/d1f07cec81c19df9903b18461ba38250 ) that seems to suggest that if we accept we are only really interested in finding a potential whose ""difference"" (weighted in some way) makes our source terms non-divergent then it may be possible to use FFT approach with a stretched grid? In other words we aren't so interested in the pressure, more the gradient of the pressure.; > > I am not sure I believe the result, since it seems like someone would have done it 40+ years ago if this was the case. On the other hand the gist does seem to work, and I can't see what I am missing! I would be interested to chat about whether there is something I am overlooking.; > > ```; > ; > ; > That is intriguing. If I understand correctly, the test code indeed provides a divergence-free field by adding a finite-difference to the velocity. I wonder if on a stretched grid the approach makes sure the added force is actually a pressure gradient (i.e. derives from a potential). In other words, maybe on a stretched grid the code tested might lead to energy inconsistencies ?. @jmbeckers I am going to try and experiment a bit more next week - was tinkering with other stuff this last week. I did also remember that I think you can introduce any non-divergent stream function in to the Poisson solution in multiple dimensions and it would still be a solution, so that may also cause some trouble in practice and may be another manifestation of possible energetic inconsistencies!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1727#issuecomment-855240785:814,test,test,814,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1727#issuecomment-855240785,2,['test'],"['test', 'tested']"
Testability,"> > ```julia; > > julia> using CUDA; CUDA.allowscalar(true); > > ; > > julia> model.velocities.u.data; > > ```; > ; > This also isn't working for me now. Although I'm sure it did work at some point because I've tested this. No doubt. Everything's always evolving, always moving.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2316#issuecomment-1061159875:211,test,tested,211,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2316#issuecomment-1061159875,1,['test'],['tested']
Testability,"> > `benchmarks/Manifest.toml` had CUDA updated to 3.7 which caused problems when benchmarking Oceananigans restricted to 3.3.6. This PR adds a `compat` to `benchmarks/Project.toml` and downgrades `CUDA`.; > > I think maybe a better solution would be to add Oceananigans explicitly to `benchmarks/Project.toml`. But then to run the benchmarks on the current repo we'd have to update the environment every time.; > ; > Is it possible to automatically pull compat entries from the repo's `Project.toml`? (If it is, should we?). It's possible to do anything really, the `.toml` files are ordinary text files. The second question is the important one --- what's the best way to do this that causes least headaches.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090381039:5,benchmark,benchmarks,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090381039,5,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"> > afaik the second test filter is only needed when assuming that `β` can vary between scales.; > ; > I think you're correct here! Sorry for the confusion here, but I suppose by scale-invariance I mean `β` has a power law dependence on the scale size. And since we were trying to implement the scale-dependent version, `β` would vary across different scales? Hence we need the `α=4` filter as well. Am I understanding Equation (26) in [Bou-Zeid et al. 2005](https://dx.doi.org/10.1063/1.1839152) correctly here?. Ah, I see, I was under the impression you were trying to implement the scale-_invariant_ version, but it does make sense to if you're implementing the scale-dependent version.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3638#issuecomment-2187294884:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3638#issuecomment-2187294884,1,['test'],['test']
Testability,> > and a scalar-index issue on GPUs.; > ; > What's the scalar indexing issue?. It's already fixed. It was a test that was failing because we were comparing point-wise values. If I find the exact lines I'll post them here.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582964095:109,test,test,109,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582964095,1,['test'],['test']
Testability,"> > best-practices way to do things, but afaik it works; > ; > it only works within the Oceananigans environment, not for users of Oceananigans. True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665:199,test,test,199,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418273665,3,['test'],"['test', 'tests']"
Testability,"> > potentially with a default value of overwrite_existing = false.; > ; > Do you run with `overwrite_existing=false`? (Outside the context of restoring from a checkpoint.). I agree, that is not a common use case scenario. I have only used `overwrite_existing=false` without a checkpoint for short tests within the same Julia instance to extend the model output.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3793#issuecomment-2391892045:298,test,tests,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3793#issuecomment-2391892045,1,['test'],['tests']
Testability,"> @Mikejmnez , could you maybe say a bit more of what you are hoping to do? If you initialize your flow to have a constant shear, for example, then there is a velocity associated with that shear and it will evolve because of the momentum equations.; > ; > If you wanted a simple toy problem, we might be able to do something with `ShallowWaterModel`. It might be simple enough for your purposes, depending on what you wanted to learn, but that would be orthogonal to this issue. @francispoulin I am interested deriving/testing closures in the 2D Adv-Diff equation in the (general) case of periodic shear flows. A constant shear flow won't do it. More like a velocity field that can be decomposed into a shear flow u(y) (e.g. a cosine in y or sum of cosines) plus a cellular flow (square waves). I am still a newbie over here, so I am open to trying different models.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/958#issuecomment-768512388:519,test,testing,519,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/958#issuecomment-768512388,1,['test'],['testing']
Testability,"> @ali-ramadhan I started converting `two_dimensional_turbulence.jl` to use `Flat` topology and that's how I found #1026. I had some other issues which, hopefully, will be resolved after this is merged (?). Oh my, thanks for catching that!. There are some mysterious bugs in this PR right now. Column models work but doubly periodic ones seem to NaN, as evidenced by the passive tracer advection test in `test_dynamics.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1024#issuecomment-704148261:396,test,test,396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1024#issuecomment-704148261,1,['test'],['test']
Testability,"> @ali-ramadhan are those regressions on the CPU or GPU? On the CPU, we might need `inline` (we need inline to elide a number of potential memory allocation points I think). Not sure about GPU. Just CPU right now. They're taking too long so I'm just gonna kill it and run the GPU tests by themselves. I'd be pretty surprised if `@inline` gives a 100x performance boost but I'm still not super familiar with writing performant Julia code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496473977:280,test,tests,280,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496473977,1,['test'],['tests']
Testability,"> @ali-ramadhan do you mind running some benchmarks to test for performance regression under this PR?. Looks really bad, still waiting on GPU results but CPU is ~100x slower! We can't merge this as is. Something must be wrong somewhere. Memory allocations went from `6.00 KiB` per iteration to `1.04 GiB` per iteration. It used to be resolution independent but now the allocation increases with the number of grid points. I'll edit this comment with the full benchmark timings when they're done. I benchmarked master yesterday so I know it's still performing well (maybe 2-3% slower because of the extra stuff and fixes we recently introduced).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496472556:41,benchmark,benchmarks,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496472556,4,"['benchmark', 'test']","['benchmark', 'benchmarked', 'benchmarks', 'test']"
Testability,"> @ali-ramadhan would it be good to send messages to everyone who has a fork maybe and maybe keep an issue open, so people who have cloned can see?. That's a good idea, I think the only other person who had an issue was @arcavaliere who had an open PR at the time, but otherwise we could tag all the forkers. > Of course it would also be good not to rewrite the history - that pretty much breaks how git works. In theory reviewing PRs should catch this?. Agreed. Yeah it took us a while to find the leak in #509 (JLD2 file wasn't added by us but by examples generating files when built) and the damage was contained to the `gh-pages` branch but the reason it affected the `master` branch was that I also deleted an old regression test file. Now that we're more aware of this issue I think we can stop it from happening again.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/598#issuecomment-577237824:730,test,test,730,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/598#issuecomment-577237824,1,['test'],['test']
Testability,"> @ali-ramadhan, I added about 880 tests for the construction of AbstractOperations. Let me know if you think anything is missing. Haha nice combinatorial explosion!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/922#issuecomment-690126904:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/922#issuecomment-690126904,1,['test'],['tests']
Testability,"> @ali-ramadhan, should we re-run the validation tests?. I'm sure they're fine. They passed earlier today: https://buildkite.com/clima/oceananigans-validation-experiments/builds/128. They take a while to run. And we'll know tomorrow morning if they fail! They're set to run nightly at 3am ET.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783657161:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783657161,1,['test'],['tests']
Testability,"> @aramirezreyes, could you bring this up to date with `main` branch? Perhaps all tests pass then and we can merge. turns out I could do that :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1006045446:82,test,tests,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1006045446,1,['test'],['tests']
Testability,"> @francispoulin I noticed you are adding convergence tests. We also have convergence tests under `validation` here:; > ; > https://github.com/CliMA/Oceananigans.jl/tree/master/validation/convergence_tests; > ; > and it could make sense to contribute your convergence tests there.; > ; > The tests are used to generate figures for documentation:; > ; > https://clima.github.io/OceananigansDocumentation/stable/validation/convergence_tests/; > ; > @ali-ramadhan can comment on how convergence tests might be added to our CI / automated testing suite.; > ; > Is this PR just intended just to add advection schemes, or it is attempting to add higher-order operators for other terms as well? It'd be great to have higher-order finite volume operators for diffusion terms, for example. Does it make sense to contribute these in a separate PR and consider how they might be used in diffusion operators (for example)?. Thanks @glwagner for the post. I think it makes sense for this to just include updating the advection, since that's already a bit step. I am sorry for no doing this sooner. I got distracted thinking it would just be a little more but it turns out to be more than I thought. I will clean up the branch now and then maybe you can approve the update?. Next week I will work on getting higher order methods working for ShallowWaterModels.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-743805478:54,test,tests,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-743805478,6,['test'],"['testing', 'tests']"
Testability,"> @glwagner (and @simone-silvestri ) this test is OK - but it looks a bit weird to me, so I am confused!; > ; > It looks to me that it; > ; > 1. creates a little square full depth island in the middle of the domain; > 2. sets u and v zero everywhere except for a couple of points **inside the bump**?; > 3. the island isn't fully centered; > 4. it solves something for a potential inside the island; > 5. the velocities inside the island are adjusted?; > ; > does the setup make sense to you two?. Here is some output with print added for 5 x 5 version (and with g=1000 ). The solvers don't iterate I think - because Ax == 0? . Also the island is not quite centered? . ```; (base) chriss-MacBook-Pro:onan-2021-12-29 chrishill$ /Applications/Julia-1.7.app/Contents/Resources/julia/bin/julia --project=. test/runtests.jl ; [2021/12/29 11:49:20.908] INFO Testing immersed boundaries divergent flow solve; bottom; 5×5 Matrix{Float64}:; -1.0 -1.0 -1.0 -1.0 -1.0; -1.0 0.0 0.0 0.0 0.0; -1.0 0.0 0.0 0.0 0.0; -1.0 0.0 0.0 0.0 0.0; -1.0 0.0 0.0 0.0 0.0; [2021/12/29 11:49:27.354] WARN ImmersedBoundaryGrid is unvalidated and may produce incorrect results. Help validate ImmersedBoundaryGrid by reporting any bugs or unexpected behavior to https://github.com/CliMA/Oceananigans.jl/issues. -@-> /Users/chrishill/projects/onan-2021-12-29/src/ImmersedBoundaries/ImmersedBoundaries.jl:102; [2021/12/29 11:49:27.400] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /Users/chrishill/projects/onan-2021-12-29/src/Advection/weno_fifth_order.jl:145; model.free_surface.gravitational_acceleration = 10000.0; ∫ᶻQ.u; 5×5×1 view(::Array{Float64, 3}, 4:8, 4:8, 1:1) with eltype Float64:; [:, :, 1] =; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 1.0 0.0 0.0; 0.0 0.0 -1.0 0.0 0.0; 0.0 0.0 0.0 0.0 0.0; η; 5×5×1 view(::Array{Float64, 3}, 4:8, 4:8, 1:1) with eltype Float64:; [:, :, 1] =; 0.0 0.0 0.0 0.0 0.0; 0.0 0.0 -1.0 0.0 0.0; 0.0 -1.0 4.0 -1.0 0.0",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002686167:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002686167,3,"['Test', 'test']","['Testing', 'test']"
Testability,"> @glwagner (and @simone-silvestri ) this test is OK - but it looks a bit weird to me, so I am confused!; > ; > It looks to me that it; > ; > 1. creates a little square full depth island in the middle of the domain; > 2. sets u and v zero everywhere except for a couple of points **inside the bump**?; > 3. the island isn't fully centered; > 4. it solves something for a potential inside the island; > 5. the velocities inside the island are adjusted?; > ; > does the setup make sense to you two?. I didn't write this test so I'm not sure what the intent is...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002695037:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002695037,2,['test'],['test']
Testability,"> @glwagner : I agree that the major savings would be the lack of vertical grid points, but having a full free-surface will likely force a smaller time step because of CFL. There would be two ways to reduce this constraint (in the future).; > ; > 1. Rigid lid (solve for the surface pressure); > 2. Implicit free-surface (treat the free-surface implicitly in the time-stepping); > ; > Both of these would borrow from the hydrostatic model, but the ingrediants are there, and would make it a lot faster. I would vote for implementing a rigid lid / vertically-`Flat` mode for the hydrostatic model instead, in order to keep the shallow water model as simple as possible (generalizing to multiple layers as an alternative direction would be nice I think). Have you benchmarked this? It is true that vertically `Flat` avoids a few vertical operations in the vertical advection term but since the kernel sizes are the same I'd be surprised if the performance differences are huge in terms of cost per time step.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1119195736:762,benchmark,benchmarked,762,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1119195736,1,['benchmark'],['benchmarked']
Testability,"> @glwagner CUDA aware MPI is supported for 11.2 but it is only built against OpenMPI 4.1.0 and 4.1.1, I think we had previously 4.0.4. Also julia 1.6.2 is available. good beta, I'll upgrade, thanks!. > looks like maybe some more race conditions on different hardware?. Heh yeah, pretty interesting. sverdrup is running on Quadro P6000 with CUDA 11; tartarus (where we sometimes run tests for development) has a Titan V, also I think with CUDA 11. These are running on a P100? With this new CI I'll need to make sure I can log in to central to debug.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906751484:383,test,tests,383,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906751484,2,"['log', 'test']","['log', 'tests']"
Testability,"> @glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:; > ; > ```julia; > Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; > Test threw exception; > Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); > MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); > Closest candidates are:; > work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; > work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; > Stacktrace:; > [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399:182,Test,Test,182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564940399,3,"['Test', 'test']","['Test', 'test']"
Testability,"> @glwagner I tested the fix locally, seems to fix the issue. I was also catching up with a past discussion on turbulence closure (#1277). I tried setting up a simulation with `closure = (AnisotropicMinimumDissipation(), ScalarDiffusivity(ν=κ,κ=κ))` but am getting errors with `no method matching south_ib_flux`. Could this be specific to immersed boundary or has the turbulence closure definition of the molecular values of kinematic viscosity and diffusivity changed since #1277?. Ah, a closure tuple! We might need to add more code to support that. Can you paste the whole error?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1106756075:14,test,tested,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1106756075,1,['test'],['tested']
Testability,"> @glwagner I tested the fix locally, seems to fix the issue. I was also catching up with a past discussion on turbulence closure (#1277). I tried setting up a simulation with `closure = (AnisotropicMinimumDissipation(), ScalarDiffusivity(ν=κ,κ=κ))` but am getting errors with `no method matching south_ib_flux`. Could this be specific to immersed boundary or has the turbulence closure definition of the molecular values of kinematic viscosity and diffusivity changed since #1277?. Here's a question. Doing wall-resolved LES is a bit tricky here. In the way the code is written, the diffusivity for wall fluxes with value or gradient boundary condition is derived from the model closure. For closure tuples, the logical thing to do is to add all the diffusivities together to come up with the immersed flux. However, this means that to do wall resolved LES we have to solve a tricky problem which is how to specify that the LES diffusivity has a value of 0 on the boundary. The interface implemented here doesn't support that; when we write `ValueBoundaryCondition(0)` what that means is that we add fluxes to a tendency consistent with `ValueBoundaryCondition(0)`. (The alternative, which would essentially mean ""return `0` when the field is reconstructed on boundary faces"" requires feeding boundary conditions into the reconstruction operator used by the closure. Doing that would substantially complicate the code.) This means effectively that there's no way to set the LES diffusivity to 0 on an immersed boundary. Even if there were a way to ensure this, it's also inconvenient to have to specify boundary conditions on the LES diffusivities... An alternative approach might attach a diffusivity / viscosity to the immersed boundary condition. Then the closure is ignored when calculating the immersed flux and the ""boundary diffusivity"" is used instead. This has some convenience downsides (ie diffusivity values have to be passed both to the closure _and_ the boundary condition), but would a",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1107321166:14,test,tested,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1107321166,2,"['log', 'test']","['logical', 'tested']"
Testability,"> @glwagner I tested the no-slip boundary condition on the classic case of a lock-release gravity current in a rectilinear channel (see video) and compared the position of the front of the dense current as a function of time for the case of an immersed boundary with the no-slip condition, a real boundary with the no-slip condition, and an immersed boundary with the slip condition. ; > ; > ; > ; > https://user-images.githubusercontent.com/31293515/164257859-0deb6cf1-f6b7-414a-a86d-8b47d194b98a.mp4; > ; > ; > ; > ; > ; > ![Xfr](https://user-images.githubusercontent.com/31293515/164257805-0ac9a5e4-a575-442c-b676-1660c052a2ed.png); > ; > ; > ; > ; > ; > . @raphaelouillon I think I introduced a bug when I introduced support for GradientBoundaryCondition :-/ I'll let you know when that's fixed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104403293:14,test,tested,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104403293,1,['test'],['tested']
Testability,"> @glwagner I'm not sure whats causing these tests to fail now?. @jagoosw afaik sometimes we get errors of the kind. `ERROR: LoadError: SystemError: opening file ""/data5/glwagner/.julia-10703/compiled/v1.8/Oceananigans/hU93i_Y0P9A.ji"": No such file or directory`. on the gpu tests. Which is what's hapenning now. It's now clear to me at least what the cause is, but restarting the tests generally makes them pass. I just restarted them so it be fine. I should note that we got an error of the kind. `Expression: all(test_fields.v .≈ truth_fields.v)`. in the GPU shallow water tests, which I thought were corrected. Is this something we need to worry about?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658:45,test,tests,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1481364658,4,['test'],['tests']
Testability,"> @glwagner Thanks for implementing the total tracer diffusive flux at a high level. After running several tests, I found it to work exceptionally well! I conducted a series of tests: 1) comparing 1D vs 3D, 2) with and without the Coriolis force, and 3) with and without the immersed boundary. Everything looks great! Here are some simple examples on a rotated coordinate:; > ; > * 1D test with a small f:; > ; > nonconstantdiffusivity250days-theta.0.002_Nx4_Ny4_smallf_zlargerf.mp4 ; > * 3D simulation with immersed grids:; > ; > nonconstantdiffusivity8days-theta.0.2_Nx4_Ny4_immersed_3Dfields_withcrossflux.mp4 ; > The only caveat mentioned by @hdrake is that `GradientBoundaryCondition` is only being applied to the perturbation fluxes at the boundaries, i.e., `GradientBoundaryCondition(-N^2*cos(θ))` is needed to make the total buoyancy gradient to be 0. Thanks @liuchihl !",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2212615821:107,test,tests,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2212615821,3,['test'],"['test', 'tests']"
Testability,> @glwagner any idea why `gpu-simulations-tests` fail?. Which grid points are specifically failing in the test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-924059212:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-924059212,2,['test'],"['test', 'tests']"
Testability,"> @glwagner could I be added to the buildkite organisation so I can rerun the test please?. Unfortunately I think we have to limit access to that to Clima folks, but it affects all Clima software (not just Oceananigans). As an example, none of us have permissions to add people to the buildkite.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3441#issuecomment-1911171883:78,test,test,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3441#issuecomment-1911171883,1,['test'],['test']
Testability,"> @glwagner do you know what the problems with the tests are?. No idea, I've restarted the tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1758658201:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1758658201,2,['test'],['tests']
Testability,"> @glwagner if this works (i.e. if AMD with this change indeed reproduces the log-law better) this would make a pretty cool example for the docs. We can put it on the list though I'd be hesitant to move too quickly because our docs will probably be getting a lot heavier in the near future with sphere examples, and examples with more complex bathymetry. Perhaps you can make the tilted bottom boundary layer 3D and add it into that one, so we don't pay the price of a new independent example?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1655986822:78,log,log-law,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1655986822,1,['log'],['log-law']
Testability,> @glwagner let's add that test you mentioned. Ok!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2284#issuecomment-1055360784:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2284#issuecomment-1055360784,1,['test'],['test']
Testability,> @glwagner the distributed tests are broken :(. easy to fix,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2094904573:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2094904573,1,['test'],['tests']
Testability,"> @glwagner the multithreading benchmarks for the 2d shallow water model does not seem to have changed. It's roughly the same as those shown in #1861.; > ; > size	threads	slowdown	efficiency	memory	allocs; > (8192, 512)	1	1.0	1.0	1.0	1.0; > (8192, 1024)	2	1.98316	0.504246	12.1409	434.108; > (8192, 2048)	4	1.60839	0.621741	9.73477	331.135; > (8192, 4096)	8	1.52129	0.657337	10.2977	332.526; > (8192, 8192)	16	1.73345	0.576883	11.7069	340.188; > (8192, 16384)	32	2.26084	0.442313	17.1668	470.216; > I'm also running another multithreading benchmark right now with the 3d nonhydrostatic model. Hopefully the new CPU workgroup grouping will show up better there. Thanks @hennyg888 !. I don't understand the non-monotonic behavior. What could explain this? It smells funny... Does it make sense to run a strong scaling experiment as well to try to de-confuse the situation?. I wonder if we should actually precompute and store the thread-block layout in the `CPU` architecture type. That would allow us to more easily experiment with different layouts and also would allow users to tweak the layout if something wasn't working. @christophernhill thoughts about that?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-889996343:31,benchmark,benchmarks,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-889996343,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"> @glwagner, I tried to add a test but look,; > ; > ```julia; > julia> using Oceananigans; > ; > julia> grid = RectilinearGrid(size=(2, 2, 2), extent=(1, 1, 1)); > 2×2×2 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; > ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.5; > ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.5; > └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=0.5; > ; > julia> Fu = ones(size(grid)); > 2×2×2 Array{Float64, 3}:; > [:, :, 1] =; > 1.0 1.0; > 1.0 1.0; > ; > [:, :, 2] =; > 1.0 1.0; > 1.0 1.0; > ; > julia> model = NonhydrostaticModel(; grid, forcing=(u=Fu,)); > ERROR: TaskFailedException; > ; > nested task error: MethodError: objects of type Array{Float64, 3} are not callable; > Use square brackets [] for indexing an Array.; > Stacktrace:; > [1] u_velocity_tendency; > @ ~/Research/OC10.jl/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:71 [inlined]; > [2] cpu_compute_Gu!; > @ ~/.julia/packages/KernelAbstractions/Zcyra/src/macros.jl:287 [inlined]; > [3] cpu_compute_Gu!(__ctx__::KernelAbstractions.CompilerMetadata{…}, Gu::Field{…}, grid::RectilinearGrid{…}, interior_map::Nothing, args::Tuple{…}); > @ Oceananigans.Models.NonhydrostaticModels ./none:0; > [4] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{…}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{…}, args::Tuple{…}, dynamic::KernelAbstractions.NDIteration.DynamicCheck); > @ KernelAbstractions ~/.julia/packages/KernelAbstractions/Zcyra/src/cpu.jl:115; > [5] (::KernelAbstractions.var""#18#21""{…})(); > @ KernelAbstractions ~/.julia/packages/KernelAbstractions/Zcyra/src/cpu.jl:90; > ; > ...and 1 more exception.; > ; > Stacktrace:; > [1] sync_end(c::Channel{Any}); > @ Base ./task.jl:448; > [2] macro expansion; > @ ./task.jl:480 [inlined]; > [3] __run(obj::KernelAbstractions.Kernel{…}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{…}, args::Tuple{…",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1986430708:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1986430708,1,['test'],['test']
Testability,"> @glwagner, do you think a bit more elaborate validation test is in order?; > I'll approve at this point and let this to your judgment. I am currently working on a more elaborate validation / example (I'd like to implement an overturning, eddying channel example that uses this closure in a 3D setting) so I think we are ok to merge this PR now as is.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1738#issuecomment-863627568:58,test,test,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1738#issuecomment-863627568,1,['test'],['test']
Testability,"> @iuryt can we do it in a new PR? I can get it started to illustrate, and you can help me by refining the implementation and getting the tests to pass. What do you think?. As this new PR will change this current PR, I will work on the new PR first and then come back here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1899051989:138,test,tests,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1899051989,1,['test'],['tests']
Testability,> @iuryt do you want to help set up a validation case for this feature?. Yep. I will be working on the NP model with a P sinking velocity this week. Any idea for an experiment that changes MLD with time? ; Maybe making it 1D for simplicity? But I would like to test for 3D to make sure I am programming it correctly. Maybe buoyancy=nothing and diffuse a tanh-like temp profile? But would be better to have a shallowing mld instead.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1081795184:261,test,test,261,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1081795184,1,['test'],['test']
Testability,> @jagoosw I believe that `adapt` is missing its first argument. Note the PRs were merged without tests passing... that's why we have this issue. Sorry! I hadn't realised they could be merged without the tests passing so when I saw the PR approved just hit merge. Sorry for all the problems!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868338988:98,test,tests,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868338988,2,['test'],['tests']
Testability,> @jagoosw do you mind if I commit to try to fix the tests?. Not at all! They were working before but something must have changed. Thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1198106346:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1198106346,1,['test'],['tests']
Testability,"> @jagoosw tests pass --- ok if I merge?. Yep, all good on my end!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1297754098:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1297754098,1,['test'],['tests']
Testability,"> @jm-c would know what constant to use for constant Smag combined with our numerical methods as it has been used in the MITgcm. We were told that Smagorinsky has not been tested in MITgcm so I'm not sure that's true. > Still not sure why TurbulenceClosures uses it's own differentiation and interpolation operators when we have Oceananigans.Operators. Migrating to the other operators would have taken some time and effort and possibly involved bugs so I chose to keep the ones I was familiar with. I find the new operators a little more difficult to read than the ones we currently use, and I didn't want to have to worry about that when implementing complex new functions involved with the `VerstappenAnisotropicMinimumDissipation`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/383#issuecomment-526173480:172,test,tested,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/383#issuecomment-526173480,1,['test'],['tested']
Testability,"> @liuchihl I think the best way forward is to write a simple test that illustrates the error. Then I can help fix the error to make the test pass. Once that is done, we may be ready to merge this PR. What do you think?. Sure, I agree with that! I will work on that and let you know how it goes. . > PS it is always best to work with minimal examples, and to paste code directly into a discussion stream (rather than providing links). This will help us keep up an efficient workflow. For sure, sorry about that, I haven't been able to create an MWE for this specific issue because I don't understand the problem yet.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433226812:62,test,test,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433226812,2,['test'],['test']
Testability,"> @maleadt Was wondering if you have any ideas about what's going on? Maybe someone else had similiar issues. I'll isolate exactly which test/line it always gets stuck on. I've seen some people having issues which turned out FFT threading related, not sure if that applies here. If a job is stuck, ping me on Slack and I'll have a look at dumping a backtrace using gdb,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589192340:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589192340,1,['test'],['test']
Testability,"> @matinraayai I made a bunch of suggestions!; > ; > I suggest leaving the tests untouched right now. The reason is that I think we should refactor the tests to be more architecture-indepedent _before_ merging this PR into `main`.; > ; > Perhaps as an alternative, we can pick one of the validation tests in `validation/` to focus on as an integration test. We'll use that example script to test whether functionality works. As a starting point, something like; > ; > ```julia; > using Oceananigans; > grid = RectilinearGrid(GPU(), size=(128, 128), x=(0, 2π), y=(0, 2π), topology=(Periodic, Periodic, Flat)); > model = NonhydrostaticModel(; grid, advection=WENO5()); > ϵ(x, y, z) = 2rand() - 1; > set!(model, u=ϵ, v=ϵ); > simulation = Simulation(model; Δt=0.01, stop_time=4); > run!(simulation); > ```; > ; > should be enough?. @glwagner I'm okay with that. I can take a look at this once this PR is accepted to ```amdgpu```.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112506702:75,test,tests,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112506702,5,['test'],"['test', 'tests']"
Testability,"> @matinraayai is working on making PencilArrays performant. This PR is exploratory and is a fallback that might not be merged if we find an efficient way to do GPU transposes with PencilArrays (requires reducing memory allocations and improving the efficiency of permute operations) and implement r2r Fourier transforms in PencilFFTs. For the moment those two elements are part of this PR.; > ; > This PR follows the (simple) configuration of the 2decomp library https://github.com/2decomp-fft/2decomp-fft, the difference between PencilFFT/PencilArray and this PR (a part bounded domain ffts) is that here (at the moment) we impose the stricter limitation that `Ny` has to be divisible by `Rx` and `Ry` while `Nz` has to be divisible by `Ry`, where `Rx` and `Ry` are the number of ranks (divisions) in the x and y direction. Relaxing the requirements should not be too difficult. Nice, thanks for that explanation. Why are we following 2decomp? PencilArrays has some benchmarking that shows it can compete with the fastest codes out there. I don't see anything similar for 2decomp, so I can't figure out what the motivation for following that strategy would be. I'm not sure if they are different, either. Something we do not previously support (but which is implemented in https://github.com/CliMA/Oceananigans.jl/pull/2538) was an algorithm that could support any topology with vertically-stretched grids. What is the relationship between this PR and https://github.com/CliMA/Oceananigans.jl/pull/2538, and does this PR support vertically stretched grids?. One of the main limitations of PencilArrays from our perspective is that it could not distribute an array along the first dimension. Since we almost always would like to use vertically stretched grids (and for various reasons, we may want to also compute the hydrostatic pressure with a vertical integral), ocean LES are typically distributed in x and y. Therefore, in order to support 2D domain decompositions, we were faced with somehow ch",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1728278859:968,benchmark,benchmarking,968,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3279#issuecomment-1728278859,1,['benchmark'],['benchmarking']
Testability,"> @navidcy Due to #1995 is it worth pinning CUDA.jl to the current version? Might also _magically_ fix some GPU issues although I see that `cpu-time-stepping-tests-2` is also failing. I'll try this. However, these GPU-related error started appearing in #1994 as well...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-930528128:158,test,tests-,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-930528128,1,['test'],['tests-']
Testability,"> @navidcy I have made a couple of small changes. Anyways, I am a little hesitant to make Z-WENO the default as it does, yes, have slight benefits, but we tested only on small simplified problems. I would have a bit more testing before making it the default. Sounds good! I was just wondering. I made a formatting suggestion. I think you should merge as soon as tests pass!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-976148612:155,test,tested,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-976148612,3,['test'],"['tested', 'testing', 'tests']"
Testability,"> @navidcy points out this might already work for lat lon anyways. I suspect that's the case as well. @glwagner if that's the case, should we add a test for it?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2248#issuecomment-1481474505:148,test,test,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2248#issuecomment-1481474505,1,['test'],['test']
Testability,"> @navidcy thanks for the commits. I am now testing the script against a free-explicit free surface and a MultiRegionGrid. @navidcy, as you may have anticipated, a MultiRegionGrid does not result in this error. Code Modification:; ```julia; #=; grid = ConformalCubedSphereGrid(; panel_size = (Nx, Ny, Nz),; z = (-1, 0),; radius = R,; horizontal_direction_halo = 6,; partition = CubedSpherePartition(; R = 1)); =#. latlongrid = LatitudeLongitudeGrid(size=(Nx, Ny, Nz),; longitude = (-90, 90),; latitude = (-45, 45),; z = (-1, 0)); grid = MultiRegionGrid(latlongrid, partition = XPartition(2)); ```; Terminal Output:; ```julia; julia> include(""validation/multi_region/cubed_sphere_steady_state.jl""); ┌ Warning: MultiRegion functionalities are experimental: help the development by reporting bugs or non-implemented features!; └ @ Oceananigans.MultiRegion /Users/Sid/Library/CloudStorage/Dropbox/StudyFolder/PostDocMITDesktop/Codes/Oceananigans/cubed-sphere-steady-state/src/MultiRegion/multi_region_grid.jl:102; [ Info: Initializing simulation...; Iteration: 0000, time: 0 seconds, Δt: 7.722 days, wall time: 0 seconds; [ Info: ... simulation initialization complete (111.288 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (994.424 ms).; [ Info: Simulation is stopping after running for 0 seconds.; [ Info: Simulation time 628.319 ms equals or exceeds stop time 628.319 ms.; [ Info: Making an animation from the saved data...; ```; When utilizing a split-explicit free surface, additional errors arise. For instance, for MultiRegionGrid and ConformalCubedSphereGrid (when specifying the number of substeps), we encounter:; ```julia; ERROR: LoadError: UndefVarError: `settings` not defined; ```; When specifying both grid and cfl for ConformalCubedSphereGrid, the following error occurs:; ```julia; ERROR: LoadError: type OrthogonalSphericalShellGrid has no field Lz; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3302#issuecomment-1743475155:44,test,testing,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3302#issuecomment-1743475155,1,['test'],['testing']
Testability,> @sandreza might be a good idea to code up the case we were using the diagnose the race condition as a test and see if we can catch the race condition in CI @ali-ramadhan. Perhaps a regression test would work for this... and it'd be nice to have a regression test for the hydrostatic model too.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-926695971:104,test,test,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-926695971,3,['test'],['test']
Testability,"> @siddharthabishnu another question:; > ; > This PR also establishes single-pass halo filling, right? We should update the PR's title to reflect this.; > ; > Could you change please these lines in the tests to do the fill of the halos with the updated way?; > ; > https://github.com/CliMA/Oceananigans.jl/blob/81d0e790594e16f1815dba73d3441433929e9a38/test/test_multi_region_cubed_sphere.jl#L374-L378; > ; > https://github.com/CliMA/Oceananigans.jl/blob/81d0e790594e16f1815dba73d3441433929e9a38/test/test_multi_region_cubed_sphere.jl#L623-L625. Done! 🙂",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2026072485:202,test,tests,202,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2026072485,3,['test'],"['test', 'tests']"
Testability,> @siddharthabishnu could you deal with this?. Done. I think it's ready to merge once the tests pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2103439109:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2103439109,1,['test'],['tests']
Testability,> @siddharthabishnu could you review the PR? If tests pass we should merge.. Done! 🙂,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2159626407:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2159626407,1,['test'],['tests']
Testability,> @siddharthabishnu there are errors on the tests on GPUs:; > ; > https://buildkite.com/clima/oceananigans/builds/15275#018e8708-1af0-41a5-9a4a-e9d5e2bc223c/24-757. Maybe due to the absence of `@CUDA.allowscalar` in the `fill_cubed_sphere_halo_regions!` methods?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2033411187:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2033411187,1,['test'],['tests']
Testability,"> @siddharthabishnu, how do we know that now the metrics are filled correctly? you were comparing with a grid from MITgcm?. Yes. Consider the following sources for the grid metrics:. 1. the `cs32` grid with one halo layer, used by:; - Ali for the Rossby-Haurwitz test case in Oceananigans v0.82.0; and; - yourself to check the interior coordinates and grid metrics of the Oceananigans `cc32` grid;; 2. the `cs32` grid with 4 halo layers created by @jm-c using MITgcm;; 3. the `cc32` grid created by Oceananigans. In the validation scripts for solid body rotation and the Rossby-Haurwitz wave within the `ncc-glw/cubed-sphere-dynamics` branch associated with PR #3306, I compared the metrics of grid (3) against both (1) and (2), and plotted their absolute and relative differences. With the latest modifications, these differences have been minimized though not entirely eliminated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-1977945018:263,test,test,263,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-1977945018,1,['test'],['test']
Testability,"> @simone-silvestri, will you expand this regression to `ImplicitFreeSurface` as well? If not, then perhaps add a note in one of the `@info` messages clarifying e.g. ""... with explicit free surface formulation""?. Good idea, if the test is still cheap!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-956275604:231,test,test,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-956275604,1,['test'],['test']
Testability,"> @tomchor @whitleyv what's the ultimate vision for this PR. I think we just want to add a more ""precise"" drag option to IB by using the `conditional_flux` functions, so that a drag can be added at the exact locations that need it for the grid fitted version, while also avoiding the user having to call the correct conditional for each location. (For context, when adding drag to IB I have been just adding drag as a forcing over a cell-width above the boundary. So I'd prefer something a little more exact.) Hard coding this option in is mostly a test to see how it would go while using the available framework, before creating a full method that users would be able to implement nicely. . Implementing immersed boundary conditions as a separate term would work, I believe! A `value` immersed option wouldn't involve as much effort (as we've previously worked out for no slip), besides getting the direction correct. I think, one of our concerns was the interpolating of field dependencies within a functional form of a boundary condition, and how they would interact with the IB, could it be generalized to any input.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1075635953:549,test,test,549,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1075635953,1,['test'],['test']
Testability,"> @tomchor I can't tell if the formula you've pasted is actually different from ours (or what the definition of |S| is). Where does it come from?. That was my bad, forgot to cite the source. It comes from [Chamecki et al. 2019](https://agupubs.onlinelibrary.wiley.com/doi/abs/10.1029/2019RG000655). But you're right that the definition is identical. I misinterpreted the code. > It'd be fine to change the constant because there's no validation test. I indeed think we should change constant default to match the most common value used in the literature. I'd also like to change the notation used in the code from `ς` to `\Upsilon`, so as to match [the docs](https://clima.github.io/OceananigansDocumentation/stable/physics/turbulence_closures/) (just to make the code easier for contributors). I'll open a PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889239321:445,test,test,445,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1907#issuecomment-889239321,1,['test'],['test']
Testability,"> @tomchor I found some dispatch on `ComputedField` --- but nothing about the output construction should depend on whether a field has an abstract operation underneath or not; all of the logic we are working on regards data but not operand, right? Do you mind if I clean this up? I also think we need to sort out a bug with `parent_index_range`. Not at all! I'm taking long with this PR because I'm not that familiar with the internal workings on `Field`s. I'm currently editing some files right now but honestly it doesn't feel like I'm making any progress, so feel free to help me out. And I appreciate it :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127151051:187,log,logic,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127151051,1,['log'],['logic']
Testability,"> @tomchor I think I know what I need to do to resolve the issues. Do you mind if I send commits to this PR?; > ; > Basically we have built models in a way that would not withstand time stepping (but the tests passed because we never tried to time step). We just need to stop running those tests. Also `restore_from_checkpoint` should be skipped (and the whole feature deprecated). Please, commit away! And thanks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-885628607:204,test,tests,204,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-885628607,2,['test'],['tests']
Testability,"> @tomchor I think we should revisit this and get it merged. It doesn't seem like the immersed Poisson solver is progressing right now, so I don't think it makes sense to keep this on hold for it --- especially because features like triply periodic simulations require this change. Happy to help resolve merge conflicts or opening a new PR whichever makes more sense. I'm leaning towards opening another PR and making the non-separation optional. The rationale is that even though the immersed Poisson solver isn't progressing right now (and I agree we shouldn't wait for it), when it does progress it may turn out that it works better with the original (i.e. hydrostatic pressure separation) algorithm. Plus if we keep the current Poisson solver as default, then we don't need to re-run the regression tests. What do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088345383:803,test,tests,803,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088345383,1,['test'],['tests']
Testability,"> @tomchor Thanks for pointing out the const as I had no idea before today that this would help. Just a disclaimer, I did notice it when running some stuff on my laptop, but I also never ran any actual rigorous tests, so there's the possibility that it was a fluke too :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1478#issuecomment-800492316:211,test,tests,211,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1478#issuecomment-800492316,1,['test'],['tests']
Testability,"> @tomchor Which version of GPUCompiler are you trying to pin to? It's not listed in `Project.toml` and so the pin is not effective. @vchuravy Maybe pinning wasn't the right word to use. I'm doing `]add GPUCompiler@0.16.4` and then `]rm GPUCompiler`, which ensures that Manifest.toml retains version 0.16.4 even though GPUCompiler doesn't appear in `Project.toml`. That's probably not the best-practices way to do things, but afaik it works. That was the only way I could get tests passing in https://github.com/CliMA/Oceananigans.jl/pull/2865. The issues I was seeing there were very similar to the issues that appeared in https://github.com/CliMA/Oceananigans.jl/pull/2782 and to some degree in https://github.com/CliMA/Oceananigans.jl/pull/2899, so I suspect keeping `GPUCompiler.jl` will help make those tests pass (or least narrow down what the issues are). The reason tests didn't pass here here is because there's an error related to the `always_inline=true` flag, which (based on your comment [here](https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1416876175), hasn't made it into the `main` channel.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822:476,test,tests,476,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418258822,3,['test'],['tests']
Testability,"> @tomchor are you able to test locally? I believe these passed locally for me, so the problem might be relatively easy to solve. I've never tested anything in parallel locally, but I can definitely try",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194189228:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194189228,2,['test'],"['test', 'tested']"
Testability,> @tomchor can I commit to this PR and add more tests?. Sure!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1023409010:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1023409010,1,['test'],['tests']
Testability,> @tomchor can you confirm that this PR doesn't show that issue?. Yes. I tested this with a couple different number of tracers and all was good,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438701228:73,test,tested,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438701228,1,['test'],['tested']
Testability,"> @tomchor did you try the MWE in #2018 with this fix and it's all good?. It fixes it for CPUs, but I get an error for GPU architecture. It's likely that we need to allow scalar operations due to `==`. I'm planning on trying that tomorrow and I won't merge before it also works for GPUs. (I was wondering if we should add this as a test...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945212788:332,test,test,332,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945212788,1,['test'],['test']
Testability,"> @tomchor since you're the main person using the tilted gravity feature, I'm wondering if you can help provide some insight into this ""stratified fluid at rest"" test. The main issue is that the dynamics can be ""correct"" but the test can fail. I feel its a bad test for this reason. I don't have much to add to the discussion. I agree with you that a balanced state in a continuous system doesn't necessarily translate exactly to a discrete one. When I (or Ali?) came up with this test I figured this translation error would be small enough to be acceptable, and when the test actually passed I was happy enough with that. So if this translation error is indeed large enough with the new solver that the tests don't pass I'm very much okay with changing the test. I can't, for the moment, think of another simple test to replace it though. My best guess is to do something similar to what I did for the rotated Coriolis: solve a system with gravity pointing upwards and then the same system with gravity pointing to the `x` or `y` direction and see if they match after the proper rotation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890043769:162,test,test,162,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890043769,8,['test'],"['test', 'tests']"
Testability,"> @tomchor the relevant fluxes are in the respective files for an `AbstractTurbulenceClosure` (like for `ConvectiveAdjustment` or `IsopycnalSkewSymmetricDiffusivity`), while an `AbstractEddyClosure` (for example `AnisotropicMinimumDissipation` or `SmagorinskyLilly`) uses the functions defined in `AbstractScalarDiffusivity` (for example both `AnisotropicMinimumDissipation` and `SmagorinskyLilly` are only `ThreeDimensional`). Ah, I see. We subtype one with the other here https://github.com/CliMA/Oceananigans.jl/blob/4f1fe0fa7edd9489ba20875be64b69daa0a77b95/src/TurbulenceClosures/abstract_eddy_viscosity_closure.jl#L7. Then in this case I think the code will match the docs after this PR. I'll merge as soon as tests pass. ~Just a note, do we wanna consider modifying the subtyping here in the future? The recent changes in the turbulence closures were great, but I'd argue that there's still room for improvement. For example (if I understand correctly) right now `SmagorisnkyLilly` is an `AbstractEddyViscosityClosure`, which itself is a subtype of `AbstractScalarDiffusivity`, even though the diffusivity in a `SmagLilly` isn't a scalar, which is confusing (this is what threw me off at first). Maybe it's worth considering defining an `AbstractViscosityClosure`, and then `AbstractScalarDiffusivity` and `AbstractEddyViscosityClosure` coudl be separate subtypes of it?~. ~I'm happy to open an issue to discuss this more.~",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2283#issuecomment-1055659167:715,test,tests,715,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2283#issuecomment-1055659167,1,['test'],['tests']
Testability,"> @tomchor what do you think about this?; > ; > (I didn't wanna make changes to your branch in case you are using it for work, so I branched of there...). Thanks, that very thoughtful. I am indeed using that branch for research :). The PR also looks very good! This is exactly what I had in mind :+1:. Sorry I haven't done this yet in my original PR. I was actually planning on doing it this weekend but I got busy. . Should we add an equality test for grids? I think we can get away with something as simple as `@test grid == deepcopy(grid)` no? (This used to return false for vertically stretched grids.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-950483789:444,test,test,444,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-950483789,2,['test'],['test']
Testability,"> @tomchor you need to generalize this line:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/0c23eeaca4f5d1888c3d78f85de3ff221a732bb4/src/Fields/field.jl#L225; > ; > to work when `parent(data)` is a `SubArray`. I think here we want a recursive parent that extracts the underlying array, something like:; > ; > ```julia; > rparent(a) = rparent(parent(a)); > ; > const UnderlyingArrays = Union{Array, CuArray}; > rparent(a::UnderlyingArrays) = a; > ```; > ; > and use this to extract the global data via; > ; > ```julia; > windowed_parent = view(rparent(data), parent_indices...) ; > ```; > ; > That code might not work verbatim (I didn't test), but the concept is there I think. I'm happy to figure this out if you like. Thanks @glwagner, that's super helpful. Feel free to commit to this PR if you think it'll be easier. I can definitely try to figure this out (like you said, the pieces are all there), but it probably will take me a while (both because of my familiarity with the code and because of other priorities...)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116303580:642,test,test,642,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116303580,1,['test'],['test']
Testability,"> @tomchor, can you confirm that the PR at its current stage actually solves the problem you were facing in #2018?. Seems to do the trick! Tested for CPUs and GPUs. :rocket:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-952089949:139,Test,Tested,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-952089949,1,['Test'],['Tested']
Testability,"> @tomchor:; > ; > * I don't understand what ""really"" means in ""it didn't really work"". Did it work or it didn't work?; > * In case there was an issue, can you elaborate what that was and why `Adapt` is the solution?; > * Last, if there is still an issue and this PR fixes it then it worths a patch release. There is no quota of patch releases. We can release as many as we need to. Sorry, let me be more clear:. - It _worked_ when I tried with a MWE that I had. I didn't try it with my main research code at the time because I only had limited GPU time and that code takes a while (I've been having trouble getting my hands on GPUs). However, I assume I must have done something wrong with my MWE because when I finally was able to test this with my main research code I wasn't able to start the simulation; - The issue that popped up was a scalar indexing one. I think basically the `z1==z2` equality uses scalar indexing, which doesn't work for GPUs. Wrapping the `nodes()` expression with `Adapt.adapt()` seemed to solve the issue on every instance that I was able to test so far. I guess `CUDA.@allowscalar` would also be a possibility.; - I will bump a patch release then. I just wasn't sure if we wanted to release a another version with just one PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2030#issuecomment-953477212:733,test,test,733,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2030#issuecomment-953477212,2,['test'],['test']
Testability,"> @tomchor; > ; > In terms of ""smoothness indicators"" yes, not in terms of polynomial reconstruction. The WENO we had before is `WENO5()`. This will be formally wrong on a stretched grid because the reconstruction at the face is not done accounting for variable spacing.; > ; > `WENO5(grid = grid, stretched_smoothness=false) ` accounts for variable spacing in the reconstruction polynomial (i.e., the ![](https://render.githubusercontent.com/render/math?math=c_{rj}) coefficients are calculated based on grid spacing). This makes the scheme formally correct as, independently on how you weight the polynomials, the different stencils will have mathematically correct reconstructions at the face. This should _always_ be done in case of a stretched grid (and it does not decrease execution speed).; > ; > Now, the `stretched_smoothness=true` calculates the ![](https://render.githubusercontent.com/render/math?math=\beta_{r}) accounting for a stretched mesh. This means that the three reconstruction polynomials (![](https://render.githubusercontent.com/render/math?math=p_{0}, p_{1}, p_{2})) are weighted accounting for their actual smoothness and not a ""uniform smoothness"" that `WENO5(grid = grid, stretched_smoothness=false) ` calculates. In my tests this did not give a noticeable benefit in terms of accuracy (apparently ![](https://render.githubusercontent.com/render/math?math=\beta_{r}) for a stretched mesh are very similar to ![](https://render.githubusercontent.com/render/math?math=\beta_{r}) for a uniform mesh). In addition, it gives a non-negligible decrease in execution speed (especially on the GPU). For this reason, I think it is nice to have as an option, but to be used with parsimony :) and only when necessary. OK. This is great. Do you mind if I add something along those lines in a docstring somewhere? It's a pity to be left just in a comment in this PR, lost in the aether of closed PRs...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-975853695:1249,test,tests,1249,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-975853695,1,['test'],['tests']
Testability,"> @xkykai do you think you could run some immersed boundary tests with this branch to make sure this change doesn’t affect your work? I think we’re interested in both performance and making sure the solution is high quality. Do you mean using the immersed pressure solver in this branch, and comparing the solution this produces with the one before this change?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582859937:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582859937,1,['test'],['tests']
Testability,> A comment is that I found out recently that if I run this script locally on my laptop (with exactly the same command) it works! But running the same code with the same command (at least as far as different `mpiexecjl` are the same) it fails...; > ; > Has anyone had success running this benchmark? @johnryantaylor I think you were the last person to try it. Did it run successfully with you?. I don't totally grasp what you mean. Are you referring to different outcomes on systems with different MPI installations?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2433#issuecomment-1098672596:289,benchmark,benchmark,289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2433#issuecomment-1098672596,1,['benchmark'],['benchmark']
Testability,> A lot of tests seem to fail... This is troubling,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2090750717:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2090750717,1,['test'],['tests']
Testability,"> A question @ali-ramadhan , how much work will it be to have a stretched grid in `x`? I ask because I want to do a `ShallowWaterModel` run wtih a western boundary current and an intensified western grid. I'm happy to work on this sometime but curious as to how much effort you think this will take, after it is fully tested of course. The hardest part of implementing a vertically-stretched grid for an incompressible model was implementing and testing the pressure solver. So it should be pretty straightforward to stretch x and y for `ShallowWaterModel` (or any model without a pressure solver), just maybe a little tedious. . Right now in `Oceananigans.Operators` we have functions `Δx(i, j, k, grid)` and `Δy(i, j, k, grid)` that return the grid spacings at grid point `[i, j, k]`. Stretching the staggered grid in x and y we will need to add `ΔxC` and `ΔxF` functions (same for y) for the grid spacing between cell centers and cell faces and use them in the appropriate places (same for area and volume functions). This will probably mirror what has been done for z with `ΔzF` and `ΔzC`. Thankfully it'll probably be hard to break the code since there are so many tests in place that will fail if you miss a change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1348#issuecomment-776236013:318,test,tested,318,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1348#issuecomment-776236013,3,['test'],"['tested', 'testing', 'tests']"
Testability,"> A test would be nice to come along with this PR. I can help out with that if you want. Thanks! I'll take you up on that if you don't mind. Given that you said that other grids also have arrays, it might be best to expand checkpoint testing for all grids?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945219284:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945219284,2,['test'],"['test', 'testing']"
Testability,"> About the scaling. I'm not sure how you're calculating the stats exactly, but one thing to remember is that, given Julia's JIT compiling + all the MPI stuff, I'm guessing the start-up for these simulations is pretty significant and might impacting your results, no?; > ; > So I guess two ways to circumvent that are to (1) benchmark with pretty long simulations or (2) compile everything ahead of time with PackageCompiler.jl. That's true but the benchmarking scripts call `time_step!(model, some_time_step)` once before benchmarking as a warmup to make sure time stepping has been compiled before `@benchmark` is used. Should be enough but I could be wrong. But yeah I only `@benchmark` 10 time steps, so maybe doing more time steps to collect better statistics would help. Never considered PackageCompiler.jl for benchmarking but makes sense here seeing as it's pretty easy to use!. > The numbers are decreasing but I suspect we can probably do better by looking to see where the bottle necks are. Yes for sure. I'll open an issue to figure out how we should profile and benchmark Julia + MPI better. > I wonder if we could compute the efficiency of just computing the tendencies, which should be pretty fast. Not sure how easy that is to do though. Ah the efficiency metric is great! I'll see if we can easily add it to the benchmark results table. It should be pretty easy to isolate a part of `time_step!` to benchmark. I guess MPI only enters in through the pressure solve and the halo filling. Could be useful to benchmark the distributed pressure solve separately and do the same for the halo filing? We should hopefully get similar scaling results as PencilFFTs.jl if we benchmark the pressure solve.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-795720279:325,benchmark,benchmark,325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-795720279,11,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"> Actually, this was on 1 CPU. I ll do some more in depth benchmarking today. Thanks for explaining and great!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1112150831:58,benchmark,benchmarking,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1112150831,1,['benchmark'],['benchmarking']
Testability,> Add the first order scheme to this list:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/77e2d1c8b6418db7ac7b4f4d6de0e362107c0942/test/test_time_stepping.jl#L207-L212. Good idea! I added it and pushed the change.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905788744:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905788744,1,['test'],['test']
Testability,"> Added some dynamics tests for Coriolis with this last commit. It two a 0-D case for half an inertial period with a rotation about the `z` axis and `x` axis and then compares both to make sure they produce the same result (but rotated).; > ; > There's one part that tests if the total velocity magnitude is approximately unchanged (magnitude=1), which relies on an implicit arbitrary tolerance which might be bad. I'd curious about your feedback on that one.; > ; > > if the name is changed to include Cartesian then we can merge this and discuss further in an issue.; > ; > Per the comment above I'm going to change the name to `ConstantCartesianCoriolis` and (provided the tests all pass and you're okay with my new test addition) I'll proceed to merge this into master and open an issue to further discuss the issues that emerged here. For physics tests we can't avoid introducing an arbitrary tolerance. So its ok. That's one reason why physics tests in CI are a bit problematic and we also need validation tests analyzed by humans.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-888549957:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-888549957,7,['test'],"['test', 'tests']"
Testability,"> Added with tests! Should we export `MultipleForcings`?. Maybe we don't need to since tupling is the ""official"" API?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3743#issuecomment-2313648137:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3743#issuecomment-2313648137,1,['test'],['tests']
Testability,"> After discussion in [CliMA/OceananigansArtifacts.jl#21](https://github.com/CliMA/OceananigansArtifacts.jl/pull/21) from what I understood that the new `.jld2` file requires Oceananigans to be generated, I suggest we revert back to using ""https://github.com/CliMA/OceananigansArtifacts.jl/raw/main/cubed_sphere_grids/cubed_sphere_32_grid.jld2"" in; > ; > https://github.com/CliMA/Oceananigans.jl/blob/7362a2cedb7c0239e7c42922e0c0f5562851a7e0/test/data_dependencies.jl#L7; > ; > and revert back the changes that I made thinking we'd be using a new `.jld2` file for comparisons.; > ; > I'm happy @siddharthabishnu to merge this PR without really a showcase that it is an improvement. But note that this cannot be the norm, we will have to be able to demonstrate what changes a PR has made in a concise and quantitative manner. @navidcy, please review the last commit and my response in [CliMA/OceananigansArtifacts.jl/PR#21](https://github.com/CliMA/OceananigansArtifacts.jl/pull/21) as well as the last commit in this [PR](https://github.com/CliMA/Oceananigans.jl/pull/3488). Considering these updates, I think we should hold off on merging the PR for at least a couple of days. Let's have a discussion over Zoom tomorrow regarding the next steps.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2019188419:442,test,test,442,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2019188419,1,['test'],['test']
Testability,"> After passing the checks, It just need a review and will be pushed?. I think we should add a small test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1085246506:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1085246506,1,['test'],['test']
Testability,> After the big changes yesterday I decided to run the tests to make sure everything was working. Are you running branch used in PR #1174 ? The tests don't pass over there --- there's still some work to do. But we should discuss what needs to be done to get the tests to pass over on that PR (and then merge it into `master` when the tests do pass).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-726909250:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-726909250,4,['test'],['tests']
Testability,"> Ah CI doesn't even initialize on the CPU now...; > ; > Kinda confused why tests were initially failing now since REPL suggests that CUDA.jl behavior actually hasn't changed (and also errors on `CUDA.has_cuda_gpu` like CI does now):; > ; > ```julia; > shell> hostname; > tartarus; > ; > julia> ENV[""CUDA_VISIBLE_DEVICES""]; > ""-1""; > ; > julia> using CUDA; > ; > julia> CUDA.has_cuda(); > false; > ; > julia> CUDA.has_cuda_gpu(); > ERROR: CUDA error: initialization error (code 3, ERROR_NOT_INITIALIZED); > Stacktrace:; > [1] throw_api_error(res::CUDA.cudaError_enum); > @ CUDA ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/error.jl:91; > [2] macro expansion; > @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/error.jl:101 [inlined]; > [3] cuDeviceGetCount; > @ ~/.julia/packages/CUDA/YpW0k/lib/utils/call.jl:26 [inlined]; > [4] ndevices; > @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/devices.jl:160 [inlined]; > [5] length; > @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/devices.jl:144 [inlined]; > [6] has_cuda_gpu (repeats 2 times); > @ ~/.julia/packages/CUDA/YpW0k/src/initialization.jl:136 [inlined]; > [7] top-level scope; > @ REPL[5]:1; > [8] top-level scope; > @ ~/.julia/packages/CUDA/YpW0k/src/initialization.jl:52; > ```. err, is this a bug in `CUDA.jl`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942875440:76,test,tests,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942875440,1,['test'],['tests']
Testability,"> Ah I think tests are failing because of #1262 so you might have to `git rebase master` or `git merge master`. Thanks @ali-ramadhan . Conversely, I just updated test_shallow_water_model.jl, the same way you and pushed that. I suspect the tests will pass, as they did for me but we will see shortly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741137374:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741137374,2,['test'],['tests']
Testability,> Ah I think you added `sandbox/vertically_stretched_plankton.jl` back in when we meant to keep it nuked but we can worry about it after this PR is merged. I was also puzzled why that happened. I just pulled master and then `git merge master`...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783653083:24,sandbox,sandbox,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783653083,1,['sandbox'],['sandbox']
Testability,"> Ah because it doesn't test the LES models? I suppose the test was designed for constant diffusivity only. All terms in the momentum equation affect the boundary conditions on pressure. This includes user-defined forcings. > Hmmm, we have other verification experiments that do pass and in general we're pretty certain that Oceananigans produces the correct results but they've most been at Re > 1 so maybe you're right that numerical discretization errors dominate over this boundary condition error which might be small for most oceanographic simulations. I don't think the verification tests show the pressure solver is correct (its not, we know that). They only imply that, if it is not correct, the error associated with it does not corrupt the solution in one particular case. This 'test' seems different. It claims to verify that the pressure field obtained by our numerical method is correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-567588071:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-567588071,4,['test'],"['test', 'tests']"
Testability,"> Ah interesting. Does this work because broadcasting over GPU subarray views is a little rough around the edges?; > ; > Also, is it worth adding the MWE from [#1767 (comment)](https://github.com/CliMA/Oceananigans.jl/issues/1767#issuecomment-868793917) as a test?. Certainly _something_ is rough... I think it's ""broadcasting over ReducedField"" that's the issue here. Prior to this PR, `mean!` used a broadcast over `R::AbstractReducedField` to compute the normalization. For some reason this has data synchronicity issues on the GPU (I'm at a loss to explain why). This PR just changes that broadcast operation to compute over all members of `R`. The halo regions of `R` (presumably) aren't touched during `sum!`, so doing some extra normalization in the halos doesn't really matter, I guess... (if we want halos to be right we should probably fill them after executing `mean!` in `compute!`, or something). But the _reason_ why this change fixes the issue isn't at all obvious to me. Maybe there's a bad interaction between `KernelAbstractions` (which gets used for the broadcast) and `sum!`? Not sure. Maybe another solution would wrap `sum!` in `CUDA.@sync` (eg the solution here could _implicitly_ synchronize in order to perform the broadcast correctly; otherwise CUDA wouldn't work generally... ?!?). Might be worth testing that, though I don't know which solution we should prefer (if any). In fact, it seems better to avoid using custom broadcasting machinery if possible (which is the current solution)...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868839671:259,test,test,259,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868839671,2,['test'],"['test', 'testing']"
Testability,> Ah the classic (which this test is designed to catch). We also need to bump KA @glwagner if you would do the honors. sure thing -- to 0.9.19?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2110818913:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2110818913,1,['test'],['test']
Testability,"> Ah, I see...; > ; > ```; > @inline Γᶠᶠᶜ(i, j, k, grid, u, v) = δxᶠᵃᵃ(i, j, k, grid, Δy_qᶜᶠᶜ, v) - δyᵃᶠᵃ(i, j, k, grid, u, Δx_qᶠᶜᶜ, u); > ```; > ; > that can also work... maybe more robust since differences are already extended for `Flat` grids. I agree. So I pushed fd3a456.; Is there a test for that? Do we need to test that this expression is actually correct?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2284#issuecomment-1054872171:289,test,test,289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2284#issuecomment-1054872171,2,['test'],['test']
Testability,"> All the other GPU tests pass although CI seems much slower for GPU tests (~3x slower?). 😞. > Could be related to segfault in [CliMA/ClimateMachine.jl#2146](https://github.com/CliMA/ClimateMachine.jl/pull/2146) ? @charleskawczynski @jakebolewski were you able to figure out why it was segfaulting?. Not yet, I'm going to try looking into it. @jakebolewski suggested first upgrading some packages first-- so I'm doing that now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809465177:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809465177,2,['test'],['tests']
Testability,"> All the tests seem to pass but I get two errors.; > ; > The first error is on a GPU, running `test_shallow_water_diffusion_cosine` on the field `u` using the `ConservativeFormulation()`. When I run this in isolation I get the following error. Any suggestions on what to do here?; > ; > ```; > [2024/02/27 10:33:43.977] INFO Testing ShallowWaterModel cosine viscous diffusion [u, ConservativeFormulation()]; > [2024/02/27 10:33:43.977] WARN The ShallowWaterModel is currently unvalidated, subject to change, and should not be used for scientific research without adequate validation. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/ShallowWaterModels/shallow_water_model.jl:129; > ERROR: Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; > [3] getindex(xs::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/EZkix/src/host/indexing.jl:9; > [4] getindex; > @ ~/.julia/packages/OffsetArrays/0MOrf/src/OffsetArrays.jl:438 [inlined]; > [5] _getindex; > @ ./abstractarray.jl:1321 [inlined]; > [6] getindex; > @ ./abstractarray.jl:1288 [inlined]; > [7] getindex; > @ ~/Software/Oceananigans.jl/src/Fields/field.jl:399 [inlined]; > [8] _broadcast_getindex; > @ ./broadcast.jl:675 [inlined]; > [9] _getindex; > @ ./broadcast.jl:705 [inlined]; > [10] _broadcast_getindex; > @ ./broadcast.jl:681 [inlined]; > [11] getindex; > @ ./broadcast.jl:636 [inlined]; > [12] macro expansion; > @ ./broadcast.jl:1004 [inl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968123748:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968123748,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"> Alright, thanks, that makes a lot of sense! Very nice explanation.; > ; > So, if I understand correctly, in practical terms the result of this PR is that _some_ abstract operations that didn't compile before (the ones where recursive calls to `identity` were a problem and that don't have averaged fields embedded) now compile and can be used. Right? That's a nice improvement!. Yes, I think so. I didn't test many, but I did confirm that `u - v + w` will compile (where it did not previously). The error we were previously receiving was ""dynamic function invocation error"". This is often a type inference problem: if the julia compiler cannot infer types probably, then the resulting julia code cannot be translated into CUDA. Thus the kernel still contains ""dynamic julia functions"". This is the same error we get when trying to compile operations containing `AveragedField`. But apparently the compilation issues for those kernels are different and not resolved by this PR sadly. I think there is a very specific issue associated with `AveragedField`. . We received _other_ independent errors from seemingly more complicated operations such as ""device kernel image is invalid"", and ""entry function uses too much parameter space"". I think solving these might require contributions / modifications to `CUDA.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1595#issuecomment-821856913:407,test,test,407,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1595#issuecomment-821856913,1,['test'],['test']
Testability,"> Also here's a more proper source for that: [JuliaDocs/Documenter.jl#1131 (comment)](https://github.com/JuliaDocs/Documenter.jl/issues/1131#issuecomment-554940993); > ; > So idk what's wrong here. @navidcy any idea?. Strange...; From looking at the log, it seems it didn't push the preview...; https://buildkite.com/clima/oceananigans/builds/3216#7afaa702-7973-4f52-8d71-73e07874666d. Let me look into it bit more :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1838#issuecomment-876833757:250,log,log,250,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1838#issuecomment-876833757,1,['log'],['log']
Testability,"> Also just to clarify, the problem is not `SeawaterBuoyancy` but rather any buoyancy model at all. When I tested with `BuoyancyTracer` the issue doesn't come up. I suppose you mean any buoyancy model that doesn't have buoyancy as an explicit prognostic variable right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3795#issuecomment-2377886697:107,test,tested,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3795#issuecomment-2377886697,1,['test'],['tested']
Testability,"> Also shallow water model tests are failing with `type Nothing has no field f`: https://buildkite.com/clima/oceananigans/builds/842#ea16ffb3-252d-4d5a-b46a-a585cedd915e/38-257; > ; > I'm guessing the default for `ShallowWaterModel`s is `coriolis = nothing` but the tendency kernels use `coriolis.f`. You are correct, it is nothing. I copied what was in IncompressibleModel. If we changed the defautls to the following, would this resolve the issue?. ```coriolis = FPlane(f=0.0)```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739968338:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739968338,1,['test'],['tests']
Testability,"> Also, do you know of benchmarking others have done using `KernelAbstractions` on threads that we could look at for comparison?. I did some benchmarks in the beginning, but mostly focused on strong scaling.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880913594:23,benchmark,benchmarking,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880913594,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"> Also, when running ocean LES the aspect ratios are generally isotropic (Δz/Δx~1) but the bathymetry slopes are very small, which means that for some cases even full-step grid-fitted IBM might be enough. Only some tests will tell for sure though. Doesn't this depend on the setup? The actual ocean bottom is littered with boulders and other features of various sizes, and there's plenty of work in very steep canyons, ie https://en.wikipedia.org/wiki/Scripps_Canyon",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100251067:215,test,tests,215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100251067,1,['test'],['tests']
Testability,"> Although I have tried non-exponential masks in the past with a similar slowdown, so I'm not sure if that's the issue. I guess the key here is something that doesn't have a transcendental function. I'd be surprised if its the issue but it's possible so worth testing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875678777:260,test,testing,260,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875678777,1,['test'],['testing']
Testability,"> Although I'm somewhat worried whether the errors in this PR are acceptable. A test that should be implemented is that mass does not accumulate in time. In other words, the round-off error incurred by the pressure projection is constant, as expected. > Do we still expect the velocity field to be divergence-free up to machine precision?. We should regard the calculated divergence as an empirical measurement of the round-off error that accumulates during the discrete pressure solve. If the divergence is incorrect (ie, larger than expected due to round off error), then the pressure solver is incorrect, and the fix for that certainly should not be to recompute w!. I am not 100% sure how to theoretically determine the expected round off error associated with the pressure solve. I suppose that we expect that eigenfunction pressure solution to be accurate to within machine precision. However, we subsequently perform a 3D inverse FFT, followed next by a subtraction to calculate the velocity update, and then a second subtraction to calculate the divergence. > The sum still accumulates in time but went from e-22 -> e-20 to e-18 -> e-12. Any significant change in accuracy may be an indication that this PR is important. If the divergence changes significantly after recomputing w, this indicates that a substantial amount of round off error is being accumulated in the velocity field. . We may be able to calculate the expected round off error per grid point.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/711#issuecomment-602552703:80,test,test,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/711#issuecomment-602552703,1,['test'],['test']
Testability,> Although a good regression test would be to run an IncompressibleModel with a PCG pressure solver and make sure it matches the regression data. That might not work because the PCG doesn't get to machine precision though right?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1360#issuecomment-781640012:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1360#issuecomment-781640012,1,['test'],['test']
Testability,"> Although the new `test_netcdf_file_splitting` is working, I'm currently having issues in with the `test_netcdf_time_averaging`, where this test fails.; > ; > https://github.com/CliMA/Oceananigans.jl/blob/3bb62a647a55a7dadf5f37331321bf0020a78c4d/test/test_netcdf_output_writer.jl#L683; > ; > ; > I've tested the PR & the `main` upstream branch in my computer and I have the same error:; > ```; > Stacktrace:; > [1] macro expansion; > @ ~/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/Test/src/Test.jl:672 [inlined]; > [2] test_netcdf_time_averaging(arch::CPU); > @ Main ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:727; > [3] macro expansion; > @ ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:889 [inlined]; > [4] macro expansion; > @ ~/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/Test/src/Test.jl:1577 [inlined]; > [5] top-level scope; > @ ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:880; > NetCDF output writer [CPU]: Test Failed at /Users/jmtzmo/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:727; > Expression: all(isapprox.((ds[""c2""])[:, n + 1], c̄2(averaging_times), rtol = rtol)); > ```. me and @josuemtzmo sorted this out; things should be OK now!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3506#issuecomment-1994626027:141,test,test,141,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3506#issuecomment-1994626027,12,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,"> Another thing I noticed is that `@inbounds` is used in places where it can't really be guaranteed, like *inside* [difference operator functions](https://github.com/climate-machine/Oceananigans.jl/blob/master/src/operators/ops_regular_cartesian_grid.jl). I couldn't figure out how to test this, but I wonder if `@inbounds` propagates to all of the functions that are called inside its scope (is that the right language)? ; > ; > Specifically I'm referring to patterns like the [RHS calculation for u](https://github.com/climate-machine/Oceananigans.jl/blob/2220ee62685a0570d4dec944f148634a539e9220/src/time_steppers.jl#L160), which is `@inbounds`, but subsequently calls operators like [this](https://github.com/climate-machine/Oceananigans.jl/blob/2220ee62685a0570d4dec944f148634a539e9220/src/operators/ops_regular_cartesian_grid.jl#L71) that are *also* have `@inbounds`.; > ; > In other words, we only need *one* `@inbounds` statement; we don't need multiple nested `@inbounds` statements. @vchuravy can you confirm/deny this? ; > ; > A separate issue with `@inbounds` in places where it can't be guaranteed is that if users write functions / analysis tools using those operators, they might screw up and give out-of-bounds indices to functions that have guaranteed `@inbounds` (and in consequence get mysterious segfaults?) It seems the natural place for `@inbounds` is in the scope of a loop.; > ; > _Originally posted by @glwagner in https://github.com/climate-machine/Oceananigans.jl/issues/163#issuecomment-479829199_",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/164:285,test,test,285,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/164,1,['test'],['test']
Testability,"> Apologies for the late reply, I got distracted and accidentally forgot to respond. I tested out the fix this morning/early afternoon and I keep getting an error along the lines of what I have below. Did I compile the branch of oceananigans incorrectly?; > ; > ```julia; > wireless-10-104-201-207:BottomBoundaryLayer loganknudsen$ julia ""/Users/loganknudsen/Documents/GitHub/BottomBoundaryLayer/PSI_Base_Test.jl""; > ┌ Warning: Overwriting existing ./psi_base_ocng_test.nc.; > └ @ Oceananigans.OutputWriters ~/.julia/packages/Oceananigans/Feeqx/src/OutputWriters/netcdf_output_writer.jl:359; > ERROR: LoadError: NetCDF error: Permission denied (NetCDF error code: 13); > Stacktrace:; > [1] check; > @ ~/.julia/packages/NCDatasets/st9Jz/src/errorhandling.jl:25 [inlined]; > [2] nc_create(path::String, cmode::UInt16); > @ NCDatasets ~/.julia/packages/NCDatasets/st9Jz/src/netcdf_c.jl:255; > [3] NCDatasets.NCDataset(filename::String, mode::String; format::Symbol, share::Bool, diskless::Bool, persist::Bool, memory::Nothing, attrib::Dict{Any, Any}); > @ NCDatasets ~/.julia/packages/NCDatasets/st9Jz/src/dataset.jl:236; > [4] NCDataset; > @ ~/.julia/packages/NCDatasets/st9Jz/src/dataset.jl:177 [inlined]; > [5] NetCDFOutputWriter(model::NonhydrostaticModel{Oceananigans.TimeSteppers.RungeKutta3TimeStepper{Float64, NamedTuple{(:u, :v, :w, :b), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Per",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747420839:87,test,tested,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747420839,3,"['log', 'test']","['loganknudsen', 'tested']"
Testability,> Are the artifacts downloaded even if we don't use them?. Yeah apparently so. I think for some reason CUDA artifacts are downloaded first but certain calls like `CUDA.versioninfo()` can trigger further artifact downloads of CUDNN and CUTENSOR. > I think the disadvantage of using artifacts is that we are a bit more exposed to bugs and I think that's the cause of at least some of our pain here. The advantage is that it's less work to maintain our local CUDA software and our test environment might be more realistic / relevant since users typically use artifacts (I think). The CUDA.jl docs recommend using artifacts (https://cuda.juliagpu.org/dev/installation/overview/#CUDA-toolkit) but this may be because new users are less likely to encounter issues if they use the artifacts (which usually work out of the box) instead of fidgeting with local installs especially on servers without root access. For CI maintaining a local toolkit installation may be better?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872401461:478,test,test,478,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1799#issuecomment-872401461,1,['test'],['test']
Testability,> Are there any tests for `xnodes` with stretched grids?. There seem to be no tests for `x/y/z/λ/φnodes` whatsoever. Shall we add?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1504016593:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1504016593,2,['test'],['tests']
Testability,"> Are there any tests that time step a hydrostatic model with an immersed boundary for 100+ time steps?. There are regression tests, but not sure if they are with immersed boundary or not.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3836#issuecomment-2448672936:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3836#issuecomment-2448672936,2,['test'],['tests']
Testability,> Are we going to move this to SeawaterPolynomials.jl?. Yes. My plans was to merge PR #731 to make sure both nonlinear equations of state work in Oceananigans.jl then have a separate PR where they're nuked and imported from SeawaterPolynomials.jl (same tests should still pass).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/741#issuecomment-620105465:253,test,tests,253,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/741#issuecomment-620105465,1,['test'],['tests']
Testability,> Are you thinking of just logging raw `@time` data?. Agnostic about the logging format and TimerOutputs sounds awesome.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-888340062:27,log,logging,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-888340062,2,['log'],['logging']
Testability,"> Are you using `diffusive_cfl`? Do you have cases where the time-step is limited by diffusive CFL?. Yes and yes. It's kinda rare that the diffusivity is the limiting factor (and it generally happens in test runs rather in production-ready code) but it happens often enough for me that I always set-it. In fact, now that I think about it, I'd advocate that we set `diffusive_cfl=0.9` (ot even 1) by default.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2205#issuecomment-1025959022:203,test,test,203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2205#issuecomment-1025959022,1,['test'],['test']
Testability,"> As I said, please post your slurp script and other environment options. It is impossible to debug otherwise.; > ; > I have an annotated slurp script here https://github.com/CliMA/ClimateMachine.jl/wiki/Satori-Cluster which is what I used a while back for GPU scaling tests. A mossconfigured MPI can easily manifest itself as scaling this poor. @hennyg888 has been very busy this week so hasn't had a chance to response. The slurm script that he used was passed down from @christophernhill , and I will let him share that with you, but it might not happen until Monday. But I suppose I should learn to start running stuff on Satori as that is something that everyone else can use and people understand the configuration. I'll try to do that on Monday.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885360274:269,test,tests,269,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885360274,1,['test'],['tests']
Testability,"> As a side note: I started working on a PR that adds tests to make sure we can write output from all grids, which would also help with #1429. But yeah, I don't think it'll be a quick PR since the grids all use different property names... Good to hear! Thanks!. > Sounds like the variable names used in NetCDF might be an issue? I've had no problems with unicode variable names in NetCDF but I don't use IPython... I don't think there is a _problem_, because NetCDF accepts unicode names, etc, and Python (and most other modern programming languages I thnik) also do. The issue that I pointed out is that, because most other programming languages don't let you write code with all unicode characters, most source-code editors/prompts don't let you type all unicode characters easily. So you can write the following in Python and it'll work (I think, I haven't tested); ; ```Python; ds.plot(x=""xᶜᵃᵃ""); ```. But every time you wanna do it (or write other characters like `xᶜᵃᵃ`) you have to copy paste those characters from somewhere else, which is kind of a hassle.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1466#issuecomment-799825309:54,test,tests,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1466#issuecomment-799825309,2,['test'],"['tested', 'tests']"
Testability,"> As a side note: I think it's ok to include ""shared utils"" at the top level within a submodule prior to importing logically-distinct functionality contained in separate files. Sometimes this can improve code-readability if there are a small number of utils. The need for a separate ""utils.jl"" file should decrease when the code structure is more modular and separated into logical subunits, I think. Hmmm, I like having separate `utils.jl` files because it gives me a default place to put utility functions and look for them. I also like keeping the top-level module file strictly for import/export statements and `include` statements. Been thinking that the main `Oceananigans.jl` module file could be cleaned up quite a bit, especially if it becomes just import/export/include statements. At some point we should discuss how to structure the package code then everything should become much cleaner.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/512#issuecomment-548118727:115,log,logically-distinct,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/512#issuecomment-548118727,2,['log'],"['logical', 'logically-distinct']"
Testability,> As far as I can tell the current issue with the distributed tests is that they have a different `fill_halo_regions!` and so currently don't fill the open halos. @simone-silvestri might need your help,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2155095861:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2155095861,1,['test'],['tests']
Testability,"> As far as I can tell the current issue with the distributed tests is that they have a different `fill_halo_regions!` and so currently don't fill the open halos. Weird, the distributed regression tests should fill the open boundary conditions if there is a wall, let me take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2155277767:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2155277767,2,['test'],['tests']
Testability,"> As of right now, as far as I can tell, `GeneralFPlane` is working and `NonTraditionalFPlane` got dumped. I'd like to get some feedback before I start changing the docs if that's okay.; > ; > The interface I implemented is a bit simpler than `NonTraditionalFPlane` but I think that's okay. I'd like some feedback there if possible. Arguments now are:; > ; > * `coriolis_frequency` (instead of simply `f`). Defaults to `2Ω`; > * `rotation_axis` (defaults to `ZDirection`); > * `latitude` for convenience (which overwrites `rotation_axis`). I'm a bit unsure if I should keep this one. Maybe we should keep it simple since anyone can figure out `f` based on latitude easily.; > ; > Questions:; > ; > * Should we keep the original `FPlane`? I think we could scrap it and only keep this one (which would then be renamed `FPlane`); > * I didn't see any tests that `FPlane` or any other Coriolis implementation is dynamically correct. Should we implement a test to see if our rotation implementations are actually doing what they're supposed to?. For API this is what I suggest:. Three ""modes"":. 1. A ""primitive"" mode whereby fx, fy, fz are all explicitly provided.; 2. A ""general rotation"" mode whereby `rotation_axis` and `rotation_rate` are provided. `fx`, `fy`, and `fz` are then calculated as a convenience.; 3. A ""tangent plane"" mode whereby `latitude` and `rotation_rate` are provided. This mode calculates `rotation_axis` based on `latitude` (and assuming that `y` is north-south). The code might look something like. ```julia; zero_if_nothing(f) = f; zero_if_nothing(::Nothing) = 0. function ConstantBackgroundRotation(FT=Float64; fx=nothing, fy=nothing, fz=nothing, rotation_rate=Ω_Earth, rotation_axis=nothing, latitude=nothing). if latitude !=nothing; isnothing(rotation_axis) && throw(ArgumentError(""Cannot specify latitude and rotation axis."")); all(isnothing.((fx, fy, fz)) || throw(ArgumentError(""Cannot specify latitude and (fx, fy, fz)."")); # calculate rotation axis; end. if rotation_axis",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887527990:848,test,tests,848,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887527990,2,['test'],"['test', 'tests']"
Testability,"> As pointed in ny little comment, when we are happy with code changes, we need to update the reference output (I think it's just few netcdf files) to get the regression test to pass. I can do this by uncommenting these lines; https://github.com/climate-machine/Oceananigans.jl/blob/7b4a28db959c1ad67b9940b42b24b8be49633dde/test/test_golden_master.jl#L72-L73. Edit: Well I'd need push access to your branch @jm-c but yeah uncommenting the line produces the required NetCDF file which should overwrite the old one. It will also produce an unwanted file for iteration 0 which I delete.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-491630922:170,test,test,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-491630922,2,['test'],['test']
Testability,"> As the diff shows, this PR reconstructs buoyancy at the location it's needed. For example, `x_dot_g_b` must reconstruct the buoyancy perturbation, which is located at tracer locations `ccc`, at the location `fcc`.; > ; > Similarly, `z_dot_g_b` should be reconstructed at `ccf` (the location of vertical velocity). Note that we _also_ do this reconstructed when computing the hydrostatic pressure integral, therefore:; > ; > ph=∫z0b¯z dz; > ; > where ()―z indicates a reconstruction in z.; > ; > Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. I think this is the only part that I'm confused about. Why was not interpolating `z_dot_g_b` okay?. I ran some tests to investigate this and found some interesting things. As a background: when we originally tried to nuke the pressure separation, I noticed that some wave noise was being created. Unfortunately the videos of that PR were lost in time so I can't show them to you, but here is the relevant comment: https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-995840271. The worst offender was the internal wave example, where the wave packet seemed to break down pretty quickly without a hydrostatic pressure separation. So I just ran the same example using the `main` branch and branch https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2 (which now has this bugfix in and it doesn't separate the pressure). I ran it for 10 times longer and here are the videos of both (respectively):. https://user-images.githubusercontent.com/13205162/233692840-edd9780b-dbc4-4958-843d-9895ac85c32f.mp4. https://user-images.githubusercontent.com/13205162/233692959-841c2a2c-2a8a-40e2-9448-fa2943a67502.mp4. They look exactly the same to me. So whatever was causing the added wave noise in https://github.com/CliMA/Oceananigans.jl/pull/1910 when we removed the hydrostatic pressure (whether it was the things you changed in this PR or not), it's not causing the noise anymore. I haven't",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054:714,test,tests,714,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518109054,1,['test'],['tests']
Testability,"> Assuming this has been tested, I think this is a really nice solution, so I'm already approving it :); > ; > Is it worth giving the option to compute a backward time derivative? (Meaning outputting the step immediately before, not after, the parent schedule? Or maybe even a central one?) @whitleyv do you think that would be useful or that it wouldn't produce a meaningful difference for reasonable values of Δt?. I think it's pretty worthwhile! The problem is that, except for `IterationInterval`, we usually can't _guarantee_ that a schedule will always actuate on the _next iteration_ (since the time-step can be modified by a callback, or by an alignment requirement associated with another schedule present in the simulation). Users can implement a custom ""just before iteration interval"" schedule to achieve a backward difference (with respect to other quantities that are output on `IterationInterval` by writing. ```julia; primary_schedule = IterationInterval(10); just_before_iteration_interval(model) = model.clock.iteration + 1 % primary_schedule.interval == 0; schedule = ConsecutiveIterations(just_before_iteration_interval); ```. Thinking about it a bit, I think that we do want to calculate a forward difference for most purposes. The reason is that a time-stepping scheme is largely _explicit_, in the sense that it looks like. ```; uⁿ⁺¹ = uⁿ + Gⁿ dt; ```. Thus, the quantities of interest are `Gⁿ`, `uⁿ`, and `uⁿ⁺¹`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2100#issuecomment-987948645:25,test,tested,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2100#issuecomment-987948645,1,['test'],['tested']
Testability,> Assuming this has been tested. It hasn't; that's one of the todo's that must be completed before merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2100#issuecomment-987949673:25,test,tested,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2100#issuecomment-987949673,1,['test'],['tested']
Testability,"> Average reduction with conditional expressions, e.g., like; > ; > https://github.com/CliMA/Oceananigans.jl/blob/748feab10a55fa65a46455620203252a6fc0646e/test/test_field_reductions.jl#L107; > ; > induce scalar operations on the GPU. I guess it's not a surprise. I just had to add, e.g,; > ; > ```julia; > @compute Txyz = CUDA.@allowscalar Field(Average(T, condition=T.>3)); > ```; > ; > Only mentioning this here in case it might something in the source code that could be affecting code performance. The condition should be a function of `f(i, j, k, grid, args...)` returning a boolean, or an `AbstractArray` of booleans. . We should implement boolean operations with fields to return boolean fields, so we will be able to pass an `AbstractOperation`; ```; condition = T > 3 # This should be a boolean AbstractOperation; @compute Txyz = Field(Average(T; condition)) ; ```. at the moment the best way to specify a condition is through a function; ```; @inline condition(i, j, k, grid, T) = T[i, j, k] > 3; @compute Txyz = Field(Average(T; condition)) ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1224162912:155,test,test,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1224162912,1,['test'],['test']
Testability,"> Based on the benchmarks, it seems that for 256^3 doing three 1D transforms is ~15% slower than doing one 3D transform. So it makes sense to batch transforms when possible. I think this makes sense given my primitive understanding of how FFTW picks optimal plans for the particular problem its asked to solve.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-772806561:15,benchmark,benchmarks,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1338#issuecomment-772806561,1,['benchmark'],['benchmarks']
Testability,"> Because `ζ` does not involve interpolation, we can interpret `ζ_at_u` as interpolating `ζ` in `y` from Face to Cell point. So; > ; > ```julia; > ζ_at_u[i, j, k] = 0.5 * (ζ[i, j, k] + ζ[i, j+1, k]); > ```; > ; > So I think this implies that; > ; > ```julia; > 0.5 * (ζ_at_u[8, 8, 8] + ζ_at_u[8, 7, 8]) = 0.25 * ζ[8, 7, 8] + 0.5 * ζ[8, 8, 8] + 0.25 * ζ[8, 9, 8]; > ```; > ; > In other words, I don't think we should expect; > ; > ```julia; > 0.5 * (ζ_at_u[8, 8, 8] + ζ_at_u[8, 7, 8]) = ζ[8, 9, 8]; > ```; > ; > Does my logic work out or am I crazy?. Sorry, that was my bad. This makes sense.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-546019714:519,log,logic,519,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-546019714,1,['log'],['logic']
Testability,"> Benchmark? The reason we combined the updates for velocities was a perceived performance gain. Probably we were wrong about that, but it'd be good to show it. Do I understand that to mean that you want to test the performance of the code before and after the PR? If there are tests that I can run to do this with both versions, I would be happy to try that on my desktop, only CPU, but that probably wouldn't be as nice as trying it on a better computer.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734371151:2,Benchmark,Benchmark,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734371151,3,"['Benchmark', 'test']","['Benchmark', 'test', 'tests']"
Testability,"> Billy mentioned it in some other comments but while we do splat args for some of the function calls, the function definitions use Varargs instead. This should avoid the catastrophic slowdown we saw with splatting earlier, but I agree that it should be tested. Do you have any good CPU performance tests set up @glwagner ?. Any simple test will do, for example one of the examples",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2150416681:254,test,tested,254,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2150416681,3,['test'],"['test', 'tested', 'tests']"
Testability,"> Bonus, also the `mask_immersed_field` was missing. I don't expect it will be ever used (why using an immersed boundary grid in a single column?), however I have added a test for it. We can remove it if not needed. Good to have because it might be useful for testing and also, its definitely best if the single column mode is identical (except for performance) to 3D mode.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3756#issuecomment-2326759623:171,test,test,171,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3756#issuecomment-2326759623,2,['test'],"['test', 'testing']"
Testability,"> Btw, as a side-note, I wanted to revisit those global SWE simulations. I had the feeling that the bathymetry was flipped (and possibly that's why some currents were moving the other way!). Glad you mentioned it as we never figured out why. Definitely something to revisit after some simple tests. If we start off with a topographic Rossby wave it will be very easy to know whether things are flipped.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498162680:292,test,tests,292,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498162680,1,['test'],['tests']
Testability,"> But I realized that a second way to implement this immersed flux is to re-use the conditional flux functions, but reverse the logic. Not sure what is best yet. We did run into the problem with the conditional flux functions, that fluxes located on the same spot (like `_fcc`), won't be checking the same faces for an interface/ normal direction (`_uy` will be checking the south-north interface and `_vx` would be east-west). Depending on the function, the symmetric fluxes might not be assigned as the same either, esp. when it comes to interpolation. We just made new separate conditional flux functions for each viscous flux combo, but that might not be the way to go long term.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100172818:128,log,logic,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100172818,1,['log'],['logic']
Testability,"> But it also seems like a problem that not eliding those functions leads to massive allocation. Why is that?. Not sure. Doing some memory allocation analysis pointed to some innocent looking lines but they were in `apply_flux_bcs.jl` so I knew it had something to do with that file. I tried different things for a few hours until I went through git history and tried things that were deleted/added. Still not sure which lines the allocations were actually happening on... Sorry for the slow reply, looks like they're still there =/. ```; Julia Version 1.3.1; Commit 2d5741174c (2019-12-30 21:36 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-6.0.1 (ORCJIT, skylake); GPU: TITAN V. ──────────────────────────────────────────────────────────────────────────────────────; Static ocean benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 167s / 45.0% 23.2GiB / 36.7% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [CPU, Float32] 10 94.5ms 0.13% 9.45ms 51.1MiB 0.59% 5.11MiB; 32× 32× 32 [CPU, Float64] 10 70.5ms 0.09% 7.05ms 51.1MiB 0.59% 5.11MiB; 32× 32× 32 [GPU, Float32] 10 30.7ms 0.04% 3.07ms 13.4MiB 0.15% 1.34MiB; 32× 32× 32 [GPU, Float64] 10 31.6ms 0.04% 3.16ms 13.4MiB 0.15% 1.34MiB; 64× 64× 64 [CPU, Float32] 10 553ms 0.73% 55.3ms 203MiB 2.33% 20.3MiB; 64× 64× 64 [CPU, Float64] 10 522ms 0.69% 52.2ms 203MiB 2.33% 20.3MiB; 64× 64× 64 [GPU, Float32] 10 31.4ms 0.04% 3.14ms 13.4MiB 0.15% 1.34MiB; 64× 64× 64 [GPU, Float64] 10 32.7ms 0.04% 3.27ms 13.4MiB 0.15% 1.34MiB; 128×128×128 [CPU, Float32] 10 3.82s 5.08% 382ms 811MiB 9.30% 81.1MiB; 128×128×128 [CPU, Float64] 10 3.90s 5.18% 390ms 811MiB 9.30% 81.1MiB; 128×128×128 [GPU, Float32] 10 46.8ms 0.06% 4.68ms 13.4MiB 0.15% 1.34MiB; 128×128×128 [GPU, Float64] 10 46.2ms 0.06% 4.62ms 13.4MiB 0.15% 1.34",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/710#issuecomment-607767752:888,benchmark,benchmarks,888,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/710#issuecomment-607767752,1,['benchmark'],['benchmarks']
Testability,"> But it gets worse. If the average of a field is taken, we zero out the halo regions. Looks like we can use `mean!` on views to fix this issue as they don't perform scalar operations (interestingly `mean` uses scalar operations). Not sure if it recently started working or if I was blind to `mean!` when we first started taking horizontal averages but if we are using `sum!` we must have considered `mean!`... ```julia; julia> using Statistics, BenchmarkTools, CUDA. julia> CUDA.allowscalar(false). julia> N = 512;. julia> Rgpu = randn(N+2, N+2, N+2) |> CuArray;. julia> Vgpu = @views Rgpu[2:N+1, 2:N+1, 2:N+1];. julia> vgpu = zeros(1, 1, N) |> CuArray;. julia> mean!(vgpu, Vgpu);. julia> @benchmark CUDA.@sync mean!(vgpu, Vgpu); BenchmarkTools.Trial: ; memory estimate: 2.08 KiB; allocs estimate: 85; --------------; minimum time: 2.427 ms (0.00% GC); median time: 2.567 ms (0.00% GC); mean time: 2.584 ms (0.00% GC); maximum time: 8.747 ms (0.00% GC); --------------; samples: 1930; evals/sample: 1; ```. which is basically the same speed as `sum!`. ```julia; julia> @benchmark CUDA.@sync sum!(vgpu, Vgpu); BenchmarkTools.Trial: ; memory estimate: 1.48 KiB; allocs estimate: 62; --------------; minimum time: 2.428 ms (0.00% GC); median time: 2.564 ms (0.00% GC); mean time: 2.566 ms (0.00% GC); maximum time: 3.228 ms (0.00% GC); --------------; samples: 1944; evals/sample: 1; ```. and ~34x faster than the CPU version (maybe we usually expect more but reduction operations aren't the best for GPUs). ```julia; julia> using Statistics, BenchmarkTools. julia> N = 512;. julia> Rcpu = randn(N+2, N+2, N+2);. julia> Vcpu = @views Rcpu[2:N+1, 2:N+1, 2:N+1];. julia> vcpu = zeros(1, 1, N);. julia> mean!(vcpu, Vcpu);. julia> @benchmark mean!(vcpu, Vcpu); BenchmarkTools.Trial: ; memory estimate: 0 bytes; allocs estimate: 0; --------------; minimum time: 85.751 ms (0.00% GC); median time: 86.201 ms (0.00% GC); mean time: 86.316 ms (0.00% GC); maximum time: 87.483 ms (0.00% GC); --------------; samp",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1063#issuecomment-708314963:446,Benchmark,BenchmarkTools,446,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1063#issuecomment-708314963,3,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"> But this PR doesn't require users to use 1.10 right? It's just about running the tests on 1.10. (Yes, but also the Manifest includes a lot of updates for various dependencies so that all pkgs versions are resolved with v1.10.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1945461022:83,test,tests,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1945461022,1,['test'],['tests']
Testability,> But this PR doesn't require users to use 1.10 right? It's just about running the tests on 1.10. yes!. > I think it will be nice to get rid of the crazy warnings on 1.10. yes,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1944573855:83,test,tests,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1944573855,1,['test'],['tests']
Testability,"> But who know how many other users are simply discouraged. Personally, if I download a code that includes non-working pieces of code I am very discouraged. That's something very important to consider, I think, and I totally agree. It seems like we're converging to the ""no code is better than broken code"" perspective. Here's my pitch for this PR:. - Remove the Lid-drive cavity and Couette flow from the docs; - Keep the Convergence tests (maybe move it to the Appendix to make for a cleaner left menu); - Remove the `validation` directory from the master branch as well (that's broken code for now and it prompts users to test them and get errors); - Open another issue/PR to discuss what we'll do with the validation scripts (maybe another repo is a good idea). Thoughts?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873153475:435,test,tests,435,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873153475,2,['test'],"['test', 'tests']"
Testability,"> Can confirm this indeed fixes #892.; > ; > Should we add some tests that catch this kind of issue? Should be easy to sprinkle tests like; > ; > ```julia; > @test bop isa BinaryOperation; > @test mop isa MultiaryOperation; > ```; > ; > around `test_abstract_operations.jl`. @ali-ramadhan, I added about 880 tests for the construction of AbstractOperations. Let me know if you think anything is missing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/922#issuecomment-689845684:64,test,tests,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/922#issuecomment-689845684,5,['test'],"['test', 'tests']"
Testability,"> Can the `callsite` be instantiated? Also I think the name of the types should correspond to the callsite, like this:; > ; > ```julia; > Callback(func, callsite=TendencyCallsite()); > Callback(func, callsite=TimeStepCallsite()) # default; > ```. Okay set it up like this now and will add a test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1287251749:291,test,test,291,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1287251749,1,['test'],['test']
Testability,"> Can we check with atmospheric clima model and with emerging DG hydrostatic ocean model, that z index increases upwards there too... best to have consistency across models. Last time this came up in https://github.com/climate-machine/Oceananigans.jl/issues/90 it seemed that `k` increases as you move away from the surface of the Earth (although they may have meant the center of the Earth? Otherwise DG ocean and atmosphere would have opposing conventions). Also mentioned was that the unstructured grid means sometimes you just do unstructured stuff and there's no `k` index I guess. @blallen Does increasing the vertical `k` index go up or down for the DG ocean model?. > Finite volume is good and hopefully need not slow model down. If we do move on to other grids, will be useful. Yeah for uniform grids it shouldn't. We have benchmarks we can check against. Things might slow down a bit with `z` operators, but that's to be expected. If we do shared memory right, it might not be by a huge amount. > Be good to chat next week. The general FV piece intersects with thinking about one day being able to do LES with bathymetry and still some performance. That would be good, haven't though much about topography. I'll be around.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/471#issuecomment-541423970:832,benchmark,benchmarks,832,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/471#issuecomment-541423970,1,['benchmark'],['benchmarks']
Testability,"> Can we come up with a MWE, maybe a simple 2 point single column model that can be copy/pasted here?. This test _is_ done using 2-point single column models :). https://github.com/CliMA/Oceananigans.jl/blob/99ad4c151095835c21ca899561429be30e8181cb/test/test_ensemble_hydrostatic_free_surface_models.jl#L56-L58",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308126156:108,test,test,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308126156,2,['test'],['test']
Testability,> Can we wrap the reduced objects somehow so that the iterators for both objects match?. That should work. Could be done with a new `Field` type?. Would you object to merging this PR in it's current form though? It's an optional feature that works for curvilinear grids and is tested. It's been helpful for debugging cubed sphere validation experiments so I'm using it in PR #1522.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1497#issuecomment-816000984:277,test,tested,277,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1497#issuecomment-816000984,1,['test'],['tested']
Testability,> Can you add tests?. New tests passed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3567#issuecomment-2087296236:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3567#issuecomment-2087296236,2,['test'],['tests']
Testability,"> Can you explain what you are trying to do in more detail? What does it mean to split files based on time? You mean that you want to split files on a `TimeInterval`?. I would like output files that consistently have for example 30 days, in other words, it requires to create a new file once the time in the netCDF is equal to the `TimeInterval ` of 30 days. The implementation I did of this, works when the user provided TimeInterval is larger than that of the scheduler. Potentially it could also work if the user provided TimeInterval is larger than the AveragedTimeInterval (I haven't tested it). . > I would use the existing `TimeInterval` / schedule mechanism. If you re-implement code that is based on assumptions about how `TimeInterval` works, it will be harder to maintain because it will have to change if `TimeInterval` changes. So far I'm only using the `TimeInterval` interval to differentiate the data type between splitting by size and by time. i.e. if the argument passed by the user is a float, then it is assumed to be a file split by size. If the argument passed is a `TimeInterval`, then the files are split by time. > Then I guess if you want to have two independent features with interacting schedules, you will have to enforce that the two schedules are compatible / consistent within the constructor for the output writer.; > ; > Now that I think of it, it would probably better for size-based file splitting to also use schedules (eg a new schedule called `FileSizeCriterion` or something). But that's for another PR. Yes, it seems to me that in order to do it properly, it will be required to make it consistent with the schedules, but looking at the code, and I'm not sure where to start...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839:589,test,tested,589,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1997801839,1,['test'],['tested']
Testability,"> Can you please restate this? I think a code example would be helpful with an explanation on what's being accomplished. Also can you explain why this can't be implemented with a Callback (or forcing function)? I.e., why do we desire this as a source code feature? Just to be clear, I'm not saying it should be one way or another, but it's good to have explicit justification for source code features (which are expensive to maintain and require resources to test)!. No problem at all, [heres](https://gist.github.com/jagoosw/213d7f2ce3707768d4ddb07f8827cdd2) an example (not sure where best to put this/if you'd want it in the examples folder). This is about the simplest version I could think of where we have a particle randomly walking around converting tracer a into tracer b. The specific use case we've been using this for is modelling kelp fronds as particles which grow (variety of particle properties change) depending on how much nutrients the particles uptake from a biogeochemical model, and also release tracer back into the model. I also envisage using this to exert drag on the flow at some point. ![test](https://user-images.githubusercontent.com/26657828/188803448-86bc2fe2-dbbc-447a-93c6-ff238f6dde06.gif). Although I've had this working as custom dynamics of the particles the effect of the particles tendency can only be integrated with explicit Euler, i.e. at each substep it just does `tracer[i, j, k] += value*Δt`, where as this solution allows it to be properly integrated along with the other tendencies. I couldn't think of a way to implement this as a forcing function before, but perhaps I could use a callback to update an auxiliary field with the tendencies of the particles, and then add this as a forcing function, although I imagine that could use a lot more memory if there were a large grid and small amount of particles. (I fix the tests that's failed until we've discussed the other changes since its only failed because I forgot to change `getmask` to `get_mask`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238958939:459,test,test,459,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238958939,1,['test'],['test']
Testability,> Can you post the output of; > ; > ```julia; > using Pkg; Pkg.status(); > ```. ```; Status `~/Projects/TRACE-SEAS/Test-LK/Project.toml`; [9e8cae18] Oceananigans v0.90.0; ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1799285569:115,Test,Test-LK,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1799285569,1,['Test'],['Test-LK']
Testability,"> Can you put @inline in front of sponge_u_disc, etc?. Done. Same result. I also tried `ContinuousForcing` with `bottom_mask(x, y, z) = 1` and it's slower than its discrete counterpart. Apparently `DiscreteForcing` is a bit faster than `ContinuousForcing`, everything else being the same. > Again unsure if it affects performance but since rate is referenced as global it needs to be const; eg const rate = 1/10. Yes! That makes a big difference! I feel silly that I forgot that. With `const rate=1/10` and `DiscreteForcing` things are as fast as with no forcing. Using the same ""trick"" with `ContinuousForcing` doesn't change things though. So it does seem like the source of the issue is `ContinuousForcing`. I should say though, I'm having some trouble securing a GPU right now, so I haven't been able to run these tests on a GPU. Would a MWE help here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875702050:818,test,tests,818,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875702050,1,['test'],['tests']
Testability,"> Can't we just test directly that the output of `x_dot_b` is as expected (as well as the others)? Along with a test that the constructor works without error this seems sufficient.; > ; > More complicated integration tests, like testing that the discrete system has a balanced state analogous to the continuous one, seem better suited for a validation test, I think. Yeah, if you think that's enough for CI then I'm definitely okay with that!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890083027:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890083027,5,['test'],"['test', 'testing', 'tests']"
Testability,> Closes #1684; > ; > It apparently solved the issue for me. Makes sense. Good there's a tagged release we can use. It looks like the toolkit version needs to be updated on sverdrup. I'll look into that and hopefully tests will pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863530498:217,test,tests,217,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863530498,1,['test'],['tests']
Testability,"> Closes #2931; > ; > We could add a test... A test would be good, but like you said it yourself the tests are already pretty resource-intensive so feel free to merge without a test if you think it wouldn't be worth it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933#issuecomment-1438667865,4,['test'],"['test', 'tests']"
Testability,> Cool! Two other possible bugs I found:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/1522ae47996a4df9092a27e0d32bfffc1bf53fad/test/test_enzyme.jl#L331; > ; > I think should be `dedν[1][1]` instead. And. I noticed that. Why was it [1][3] before?. We can't use `end` so let me fix that stuff now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438738837:135,test,test,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438738837,1,['test'],['test']
Testability,"> Could you explain why using ifelse has better performance?; Is this because the ternary ? : is an alias for ifelse?. No, the ternary operator `a ? b : c` is shorthand for . ```julia; if a; b; else; c; end; ```. This `if`-statement (as well as the logicals `&&` and `||`) are _short-circuiting_. That is, `c` is guaranteed _not_ to run if `a === true`. For example. ```; julia> f(a, first) = first ? a[1] : a[2]; f (generic function with 1 method). julia> a = rand(1); 1-element Vector{Float64}:; 0.6018054291910822. julia> f(a, true); 0.6018054291910822. julia> f(a, false); ERROR: BoundsError: attempt to access 1-element Vector{Float64} at index [2]; Stacktrace:; [1] getindex; @ ./array.jl:805 [inlined]; [2] f(a::Vector{Float64}, first::Bool); @ Main ./REPL[7]:1; [3] top-level scope; @ REPL[10]:1; ```. The first call to `f(a, true)` executes without problems, because the second _branch_ isn't executed at all. On the other hand. ```julia; julia> g(a, first) = ifelse(first, a[1], a[2]); g (generic function with 1 method). julia> g(a, true); ERROR: BoundsError: attempt to access 1-element Vector{Float64} at index [2]; Stacktrace:; [1] getindex; @ ./array.jl:805 [inlined]; [2] g(a::Vector{Float64}, first::Bool); @ Main ./REPL[11]:1; [3] top-level scope; @ REPL[12]:1. julia> g(a, false); ERROR: BoundsError: attempt to access 1-element Vector{Float64} at index [2]; Stacktrace:; [1] getindex; @ ./array.jl:805 [inlined]; [2] g(a::Vector{Float64}, first::Bool); @ Main ./REPL[11]:1; [3] top-level scope; @ REPL[13]:1; ```. `ifelse` is _not_ short-circuiting --- _both_ branches are executed, even though only the correct value is returned:. ```julia; julia> b = rand(2); 2-element Vector{Float64}:; 0.5340042876487958; 0.7031634999748222. julia> g(b, true); 0.5340042876487958. julia> g(b, false); 0.7031634999748222; ```. It's easier for the compiler to optimize code that involves `ifelse`, especially on the GPU. The reason is that it's allowed to execute all code on both branches. If w",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2336#issuecomment-1066115583:249,log,logicals,249,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2336#issuecomment-1066115583,1,['log'],['logicals']
Testability,"> Currently PR #283; > <https://github.com/climate-machine/Oceananigans.jl/pull/283>; > 4. Nuke the old operators and start using the same set of finite; > volume operators for both Oceananigans.Operators and; > closure_operators.jl. This will test that the finite volume operators; > reduce down to the operators that currently work, but doesn't test them on; > a stretched grid.; > 5. Implement a VerticallyStretchedCartesianGrid. Might have to iterate; > bit to figure out what we need, e.g. I think we'll want ΔzC to include the; > distance between the first cell center and the halo cell center, etc.; > 6. Implement CPU and GPU pressure solvers for vertically stretched; > grids with tests. There will be two: one for horizontally periodic domains; > and another for channel models. I've figured most of this stuff out in; > Jupyter notebooks.; > 7. Ensure that models with vertically stretched grids pass basic; > tests: e.g. incompressibility, tracer conservation, etc. This will test the; > finite volume operators.; > 8. Run a model with a VerticallyStretchedCartesianGrid but with; > uniform grid spacing and make sure it produces the same numbers as a model; > with RegularCartesianGrid. This is a sanity check.; > 9. Run additional tests for vertically stretched grids: e.g. vertical; > diffusion, internal wave, etc. This will also test boundary conditions with; > stretched grids.; > 10. Rerun the stratified Couette flow verification experiment but with; > a stretching factor matching Vreugdenhil & Taylor (2018). This will test; > the AMD closure on stretched grids.; >; > Let me know if anyone has any thoughts. cc @jm-c <https://github.com/jm-c>; > @rafferrari <https://github.com/rafferrari>; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/471?email_source=notifications&email_token=AKXUEQULGTW4EOYLESVYBPTQOI5CRA5CNFSM4JAEMMD2YY3PNVWWK3T",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/471#issuecomment-541363187:2325,test,test,2325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/471#issuecomment-541363187,1,['test'],['test']
Testability,"> Definitely agree a test would be good but I'm working on a PR that tests output for different grids in more detail so I could cover it there. . That's okay by me. All I did was fix a bug so, even if we don't test this right now, the change is still positive. And you could do it in time for 0.53.2. Let's wait to see if your change fixes the tests!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1487#issuecomment-800738324:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1487#issuecomment-800738324,4,['test'],"['test', 'tests']"
Testability,"> Depends if we wan tot exclude the points or edges or not (i.e where `solid_interface` is true but `solid_node` is not). Hmm yeah I am a little worried that I misunderstood the meaning of `solid_interface` since I think it does assume that the immersed boundary is ""referenced"" to a tracer cell (ie because `solid_interface(::C, ::C, ::C, i, j, k, grid) = solid_node(c, c, c, i, j, k, grid)`). But I'm not 100% sure. For example, it's presumably possible to have a solid interface at (c, c, c) even when the tracer cell is _not_ solid (ie it's a partial cell that's half-filled...). So I'm a little confused now. I think we need to distinguish between logic that's designed for enforcing impenetrability versus logic designed for enforcing boundary fluxes. We might be mixing those up right now, which works with simple immersed boundary implementations but won't generalize.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047270731:653,log,logic,653,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047270731,2,['log'],['logic']
Testability,"> Did I do anything wrong?. @navidcy you may want to visualize the vertical velocity field. It looks possibly like the right solution in the case that you had used a buoyancy field with zero domain mean (despite that you did not specify this). @ali-ramadhan can test this by tweaking his ""sideways gravity"" example to have zero initial mean buoyancy. @navidcy you can also test this by subtracting the domain mean from your initial buoyancy condition and confirming that you obtain the same result. You can also confirm that, no matter what mean buoyancy you set, you get the same result. Finally, @navidcy I would check to see whether the hydrostatic pressure is vertically periodic in all of the cases you try.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-738030820:262,test,test,262,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-738030820,2,['test'],['test']
Testability,"> Did you encounter the same issue whereby the simulation would _immediately_ NaN (rather than intermittently)? I'd be curious to see your setup in order to have more than one working example to test with. In my original simulations, I encountered NaNs usually after several hours in wall time, so it was bad for debugging. Luckily, I found a reliable way to get NaNs immediately is to set both `reltol` and `abstol` to zero and `maxiter` to more than a thousand. The purpose is to test the numerical stability of the iteration method. My theory is that the current CG iteration solver is numerically unstable. The residual usually decreases quickly for the first several iterations but may increase after that. That is why using a larger `reltol` or `abstol` or a lower `maxiter` makes it more ""stable"".",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2420337695:195,test,test,195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2420337695,2,['test'],['test']
Testability,> Did you test it? :). Yes! There is a test! There is a second one now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325348837:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325348837,2,['test'],['test']
Testability,"> Do I understand that to mean that you want to test the performance of the code before and after the PR? If there are tests that I can run to do this with both versions, I would be happy to try that on my desktop, only CPU, but that probably wouldn't be as nice as trying it on a better computer. We would like to test the performance of the version of Oceananigans on this PR versus Oceananigans#master on the CPU and GPU and for a variety of problem sizes. Maintaining good performance is a top priority of ours. Generally speaking we would like to avoid performance regressions --- even small ones (which accumulated over many PRs could become significant).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734413997:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734413997,3,['test'],"['test', 'tests']"
Testability,"> Do these test pass locally?. E.g., on tartarus when I run the `test_timestepping.jl` it passed on GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544979418:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1544979418,1,['test'],['test']
Testability,> Do we know why these 4 tests fail? From looking at the first one it seems gpu related but I'm no expert. One test failed because `AbstractGrid` was not imported. I'm not sure about the GPU issue since I didn't get to look at that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-746490238:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-746490238,2,['test'],"['test', 'tests']"
Testability,"> Do you reckon the problems stem from https://github.com/CliMA/Oceananigans.jl/pull/2890?. Oh well, that could be... but probably it would error on CPUs as well? I can test it out",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430388903:169,test,test,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430388903,1,['test'],['test']
Testability,"> Do you want that all for this PR or can we merge this part after I've implemented a simple matching scheme as a demonstration and then work on the rest elsewhere?. That's up to you. Smaller PRs can be easier because you will have less risk of merge conflicts. However you should make sure that the code in any individual PR is motivated and tested (ie if you implement a new type then it'd be best to have a use case for it, plus a test).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2038114155:343,test,tested,343,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2038114155,2,['test'],"['test', 'tested']"
Testability,> Do you want to close #120 once this is merged?. Let's wait --- I'm working on test cases for `ConstantSmagorinsky` now. The next PR should be the one.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496301651:80,test,test,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496301651,1,['test'],['test']
Testability,> Does it make sense to nuke sandbox stuff in this? It seems a bit orthogonal to the rest of the PR? Is it meant to be in there?. @christophernhill @ali-ramadhan I meant to nuke the sandbox stuff in the next PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-514747344:29,sandbox,sandbox,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-514747344,2,['sandbox'],['sandbox']
Testability,> Does that mean it will retry the tests?. Ah no unfortunately it still says failed on some checks since they were canceled but all regular Oceananigans tests passed so should be good to merge! https://buildkite.com/clima/oceananigans/builds/1018,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1325#issuecomment-769956405:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1325#issuecomment-769956405,2,['test'],['tests']
Testability,"> Does the order in which you call compute! in your example matter?. Just tested it and no. > You could try making p a ComputedField. I'd tried that already and the results are the same :/. Something interesting is that the code below works:. ```julia; @kernel function pressure_correlation_z_ccc!(wp, grid, w, p); i, j, k = @index(Global, NTuple). @inbounds wp[i, j, k] = ℑzᵃᵃᶠ(i, j, k, grid, p) * w[i, j, k] # C, C, C → C, C, F; end. wp = KernelComputedField(Center, Center, Center, pressure_correlation_z_ccc!, model;; field_dependencies=(w, p)). wp_2 = ComputedField(w*p). compute!(wp); compute!(wp_2); ```. The outputs are correct in this case. So apparently what's causing the problem is the term `∂zᵃᵃᶜ(i, j, k, grid, wp)` I think. But I cannot figure out why. Why would an interpolation operation work, but not a differentiation operation?. CC'ing @ali-ramadhan to see if he has any ideas.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1401#issuecomment-786312063:74,test,tested,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1401#issuecomment-786312063,1,['test'],['tested']
Testability,"> Don't the regression tests output text indicating how many grid points are different, and what the maximum differences are?. Yes! Sorry, is that what you were asking? I apologize, I thought you were asking about what is causing or what is the nature of the differences. Here's a snippet from the thermal bubble test, which is the worst offender, as an example:. ```julia; | [2023/05/22 15:07:12.173] INFO Δu: min=-1.559869e-13, max=+1.317666e-13, mean=+7.650904e-22, absmean=+2.393027e-14, std=+3.376841e-14 (3926/4096 matching grid points);   | [2023/05/22 15:07:12.174] INFO Δv: min=-1.339960e-13, max=+1.403664e-13, mean=+1.756466e-22, absmean=+1.796207e-14, std=+2.558788e-14 (3971/4096 matching grid points);   | [2023/05/22 15:07:12.175] INFO Δw: min=-4.886854e-13, max=+5.149812e-13, mean=+2.845466e-16, absmean=+5.854449e-14, std=+8.803219e-14 (4318/4352 matching grid points);   | [2023/05/22 15:07:12.176] INFO ΔT: min=-1.303846e-12, max=+1.495692e-12, mean=-4.293441e-17, absmean=+1.875657e-13, std=+2.728047e-13 (4096/4096 matching grid points);   | [2023/05/22 15:07:12.177] INFO ΔS: min=-4.632739e-12, max=+5.300649e-12, mean=-1.405126e-16, absmean=+6.662951e-13, std=+9.690186e-13 (4096/4096 matching grid points);   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Expression: all(test_fields.u .≈ correct_fields.u);   | Stacktrace:;   | [1] macro expansion;   | @ /storage5/buildkite-agent/julia-1.8.5/share/julia/stdlib/v1.8/Test/src/Test.jl:464 [inlined];   | [2] run_thermal_bubble_regression_test(arch::CPU, grid_type::Symbol);   | @ Main ~/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:76;   | Thermal bubble [CPU, vertically_unstretched grid]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-9/clima/oceananigans/test/regression_tests/thermal_bubble_regression_test.jl:77;   |",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559671586,2,['test'],"['test', 'tests']"
Testability,"> Don't think so as you can already pass in whatever kwargs you want to restore_from_checkpoint. But would be good to have a unit test for this functionality. Ah, great.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/405#issuecomment-531493511:130,test,test,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/405#issuecomment-531493511,1,['test'],['test']
Testability,"> FYI, the GPU Enzyme tests probably fail, because GPU reverse-mode rules are not added to KA (forward mode, however exists). They did pass previously though! (GPU tests ran on #3327.) We'll see what happens here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765230062:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765230062,2,['test'],['tests']
Testability,"> For small scale testing we could use JuliaGPUs buildkite. This sounds to me like the optimal solution. For sure, we only need small-scale testing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2329661106:18,test,testing,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2329661106,2,['test'],['testing']
Testability,"> GitLab CI seems to have crapped out but GPU tests pass on Cyclops: https://gist.github.com/ali-ramadhan/ec039bd71c21daff23c140b8aec180eb. There's some people that are heavily using GPUs on `cyclops`, resulting in OOMs even before we allocate anything (hence the vague error code). You can use the change from https://github.com/JuliaGPU/CuArrays.jl/pull/526 to select a device more intelligently (drop the `thorough` check if you don't care about compute capability -- you probably don't).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561680972:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561680972,1,['test'],['tests']
Testability,> Glad you could figure it out.; > ; > Did you want me to test if this change removes the error?. It would be great to put a test of this on ClimaOcean. We also need to test it here (but that's more work because we cano't use your MWE).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3790#issuecomment-2374831899:58,test,test,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3790#issuecomment-2374831899,3,['test'],['test']
Testability,"> Good idea!; > ; > @navidcy did you manually cancel the tests?. I did, because it was futile as @glwagner mentioned.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499814290:57,test,tests,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499814290,1,['test'],['tests']
Testability,"> Good news, I closed the REPL and reran the code with the following output line; > ; > ```; > output = (;u,v,w,model.tracers.b,U=model.background_fields.velocities.u,V=model.background_fields.velocities.v,B=model.background_fields.tracers.b); > ```; > ; > and it worked! Apologies again it took this long to resolve, and thank you for your help. No problem @loganpknudsen, thanks for helping out, it's greatly appreciated! And remember to use triple backticks to format code blocks!! :-D",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1748967572:359,log,loganpknudsen,359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1748967572,1,['log'],['loganpknudsen']
Testability,> Great test! I requested a change to `construct_output` so that it works `with_halos`. @glwagner did you catch my comment on your suggestion? Is it better to try to make `with_halo` work here with indexed fields or is it better to add a `with_halo` keyword to `Field()` in addition to the `indices` keyword.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116126721:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116126721,1,['test'],['test']
Testability,"> Great, I also think option 4 is the best. I prefer the kwarg formulation, but I don't feel strongly about it.; > ; > The issue atm is that I think I won't have time to finish this PR by myself for a few days (I couldn't figure out why some tests aren't passing, so it'll probably take me a fair amount of time to have everything done). So if this needs to be ready for AGU OSM I'd need some help getting the tests to pass (it might actually be better to start over in another PR). I can open a new PR if you're ok with that. I guess `buoyancy_unit_vector` is in fact the right name (rather than `vertical_unit_vector`! `gravity_unit_vector` (which is antiparallel to `buoyancy_unit_vector`) might be more familiar though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050049456:242,test,tests,242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050049456,2,['test'],['tests']
Testability,"> Gregg, Ali, can we get variable delz in at the same time? John. Variable grid spacing is a huge addition and is already the subject of two open pull requests (PR #283 and PR #306) requiring extensive refactoring and testing, which we collectively decided to put on the back burner for now. If it's a high priority now, we can look reviving it sooner rather than later. A lot of the preliminary work has been done. Reversing the k-index is a smaller change and wouldn't require additional testing (we just need to get existing tests to pass).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533097623:218,test,testing,218,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533097623,3,['test'],"['testing', 'tests']"
Testability,"> Having said that, you could setup CI to run a few time steps and compare the output with blessed output - this is what MITgcm does for its CI tests. Indeed --- the test of the [Golden Master](https://en.wikipedia.org/wiki/Characterization_test)! That sounds like an excellent idea for `Oceananigans.jl`. No master is more golden than MITgcm. > This might work, but you'll need to decide how closely it should match. You definitely won't get machine precision matches - we can't even do that with different MITgcm runs. The output from MITgcm depends on the machine, the compiler, and the optimisation level. Touche. I was naive.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467624611:144,test,tests,144,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-467624611,2,['test'],"['test', 'tests']"
Testability,"> Hello, @amontoison. Nice work. Do you see a performance improvement when switching to this package? There should be some benchmarks in the `benchmark` folder that we can test (probably we need to update that folder a bit, let me know if you have problems with it). Hi @simone-silvestri, `cg` is not too hard to implement, so I don't think we will see a significant performance improvement on CPU. ; However, for other methods like `gmres`, `Krylov.jl` easily outperforms `IterativeSolvers.jl`.; On GPU, though, we might see a difference because I try to dispatch to the BLAS/LAPACK routines of the GPU vendors as much as possible, whereas `IterativeSolvers.jl` relies on some broadcast. Also, to the best of my knowledge, only `cg` works on (NVIDIA) GPUs for `IterativeSolvers.jl`, while all solvers in `Krylov.jl` work on the GPUs of any vendor. I'll try to run some benchmarks before the end of the week.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2373076041:123,benchmark,benchmarks,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2373076041,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test']"
Testability,"> Hi all, I have met some strange things in a simple channel flow case, the velocity profile is larger than the log-low profile, and the momentum flux of the second and third points are obviously lower than bottom boundary condition (or other point near the bottom boundary). The code is written below, what causes this difference? ![u_profile (2)](https://user-images.githubusercontent.com/117068415/255586911-14e2c865-ec3b-4065-a13a-213a99257d31.png) ![uw_flux (1)](https://user-images.githubusercontent.com/117068415/255630762-1cd16836-6f59-465b-8d02-0577052b52ba.png); > ; > ```julia; > const H=15 #/m; > grid = RectilinearGrid(GPU(),size=(64,64,64), extent=(π*H, π*H, H)); > const u★=0.01 #friction velocity; > Fx(x,y,z,t)=u★^2/H #forcing; > ; > const z₀ = H*1e-4 # m (roughness length); > const κ = 0.4 # von Karman constant; > const z₁ = -1*znodes(Center,grid)[grid.Nz] # Closest grid center to the bottom; > const cᴰᵇ = (κ / log(z₁ / z₀))^2 # Drag coefficient; > ; > @inline drag_u(x, y, t, u, v, p) = - p.cᴰᵇ * √(u^2 + v^2) * (u); > @inline drag_v(x, y, t, u, v, p) = - p.cᴰᵇ * √(u^2 + v^2) * (v); > ; > drag_bc_u = FluxBoundaryCondition(drag_u, field_dependencies=(:u, :v), parameters=(; cᴰᵇ)); > drag_bc_v = FluxBoundaryCondition(drag_v, field_dependencies=(:u, :v), parameters=(; cᴰᵇ)); > ; > u_bcs = FieldBoundaryConditions(top=FluxBoundaryCondition(0.0),bottom = drag_bc_u); > v_bcs = FieldBoundaryConditions(bottom = drag_bc_v); > ; > model = NonhydrostaticModel(; grid, coriolis,; > advection = WENO(),; > timestepper = :RungeKutta3,; > tracers =(:T,:S),; > buoyancy = SeawaterBuoyancy(),; > closure = AnisotropicMinimumDissipation(),; > boundary_conditions = (u=u_bcs,v=v_bcs,T=T_bcs,S=S_bcs),; > forcing=(u=Fx,)); > ```. I also have the same problem here. I am trying to simulate the neutral turbulent boundary layer here. However, I found that the velocity shear at the first grid points is much larger than that predicted by the Monin-Obukhov similarity theory. Any ideas? @glwagne",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1649204834:112,log,log-low,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1649204834,2,['log'],"['log', 'log-low']"
Testability,"> Hm haven't seen that error before. In any case this PR should resolve: [EnzymeAD/Enzyme.jl#1297](https://github.com/EnzymeAD/Enzyme.jl/pull/1297). Okay, let's see if we can test whether that fixes it before merging in changes from #3477, just so we can test one thing at a time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1948851940:175,test,test,175,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1948851940,2,['test'],['test']
Testability,"> Hmm, it should not be a tolerance issue. To debug this I would probably suggest Tartarus since it has at least 2 GPUs (I am not sure your laptop has 2 gpus 😄 ). I checked and tests were failing because values of order 1e-19 or less were not agreeing... see https://buildkite.com/clima/oceananigans-distributed/builds/1131#018d7a2d-f6c5-4e22-8006-3e2d318465d1/170-5060. I replaced `a ≈ b` (which defaults to `atol=0` with `isapprox(a, b, atol=eps(eltype(grid)))`; see [385a05d](https://github.com/CliMA/Oceananigans.jl/pull/3403/commits/385a05d55dfe189eb0734c9120d0f9604eb070f7)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1928865390:177,test,tests,177,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1928865390,1,['test'],['tests']
Testability,"> Hmm. I believe that scalar operations are (or were) _specifically_ allowed globally in our `runtests.jl`, overriding any default. I was considering deprecating that option though, so that scalar iteration would be disabled by default and can only be allowed for a limited number of statements using `@allowscalar` or `allowscalar() do ... end`, because it's such a performance trap. Is there so much scalar iteration being triggered by the Oceananigans tests?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863772729:455,test,tests,455,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863772729,1,['test'],['tests']
Testability,"> Hmm. I think its value as a validation experiment really does depend on keeping it up to date with the current version of Oceananigans. What's really useful to people is the validation script that works for current Oceananigans that people can edit and modify, I think... otherwise it's more a discussion that second-order finite volume / difference methods can reproduce the driven cavity, I suppose.; > ; > I understand the point though that this work has value and it's a shame to hide it away. I think it might be nice to have a separate repository of ""cool setups"", each of which links to the specific Oceananigans version that it works with... I definitely see your point. But if that's true, then I think there's a deeper problem here which is that neither the validation scripts nor the benchmarks are kept up to date. (The benchmarks on the docs right now are done with v0.34.0!). I actually tried discussing this in https://github.com/CliMA/Oceananigans.jl/issues/1634, and even proposed a solution that should work. I think we have three options:. - We adopt the opinion that even though it's not ideal because it's out-of-date, we keep the validation experiments since they are cool set-ups that show that our code worked in the past (and supposedly should still be working now, although without proof); - We adopt the opinion that if it's not up-to-date, it's not desired. So we nuke the benchmarks and the validation experiments altogether; - We try to fix this issue and keep the validation experiments and benchmarks up-to-date. You [seem to agree](https://github.com/CliMA/Oceananigans.jl/issues/1634#issuecomment-832203095) that creating a separate repo for validation and relying on `CompatHelper` to automatically create PRs would work. I'd be happy to help implementing that, but I don't have access to a server with GPUs that I set-up the CI for (or enough knowledge of the CI tbh). Any one of those 3 options would work for me, but I think it would be good to make an explicit",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872363477:797,benchmark,benchmarks,797,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872363477,2,['benchmark'],['benchmarks']
Testability,> Hmmm I thought this line would be enough; > ; > https://github.com/CliMA/Oceananigans.jl/blob/723ff2d69bb486a856c9748f84e56aef5e524c9e/docs/make.jl#L150; > ; > but you're right we used to use the `TRAVIS_REPO_SLUG` environment variable for this I think.; > ; > Looks like the GitHub Actions equivalent is `GITHUB_REPOSITORY` like you linked to.; > ; > But there doesn't seem to be one for Buildkite... https://github.com/JuliaDocs/Documenter.jl/blob/fa459cf315425d4fc5bdfbd6769f3b0e78f4a795/src/deployconfig.jl#L644-L666. Perhaps you are right that nowadays (with more recent Documenter versions) ; https://github.com/CliMA/Oceananigans.jl/blob/723ff2d69bb486a856c9748f84e56aef5e524c9e/docs/make.jl#L150; suffices. Bit while ago it wasn't enough! :) . I'll test it though and we'll find out.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782353270:759,test,test,759,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782353270,1,['test'],['test']
Testability,"> Hmmm, I don't know if many log levels will be that helpful. I'm not entirely sure either. It's worth considering whether the standard `Info` and `Debug` levels might be enough for some of your uses, but there's also nothing wrong with trying out some custom levels and removing them if they don't end up making sense. For general logging I've often wondered whether it would be helpful to have a `Notice` level with severity between `Info` and `Warn` to allow informational messages to be stratified into two groups, though we would need clear guidelines for how to use it. Likewise, to have a `Debug2` or `VerboseDebug` level for ""really verbose"" debugging messages (possibly compiled out by default, though that would need a minor tweak in Base to make it possible). > but for user-facing info messages maybe we should remove the file name and line number and instead a custom log level like `DIAGNOSTIC` or `MODEL_SETUP` will be useful. This is basically what the standard `Info` level printing does in `Logging.ConsoleLogger` - it just ignores the line and file info captured by the fontend to simplify the pretty printing of the message. Btw, the pretty printing of log events can be separate from the storage format if desired. For example we could serialize log records to a binary file (including all file,line information etc) but have a tool to pretty print them with extra filtering, replay the messages from a simulation in faster than real time etc.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-547209159:29,log,log,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-547209159,6,"['Log', 'log']","['Logging', 'log', 'logging']"
Testability,"> Hmmm, I was thinking it would be good to benchmark each operator at least once but I suppose if sin is fast then we can assume cos and tanh will also be fast. I think the proper benchmark is to compare a unary operation via one function of our choice (say, `sin`) and a hand-coded benchmark for the same function. We don't benchmark additional functionality of `AbstractOperations` by testing multiple unary functions; those would just benchmark the performance of the unary function itself, which we don't care about (because we are not going to improve the performance of `Base.sin` or `CUDAnative.sin`.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-545895227:43,benchmark,benchmark,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-545895227,6,"['benchmark', 'test']","['benchmark', 'testing']"
Testability,"> Hmmm, maybe more of a question for @glwagner but can you nest ComputedFields (is it tested?)?. It appears you're right, that at least some of the problem comes from nested `ComputedField`s. (I need to run more tests later to be sure). If nesting `ComputedField`s isn't allowed and can't be made to work, I'd suggest throwing an error if possible. However, nesting `ComputedField`s seems like a pretty useful feature to have. My talks with @glwagner over `KernelComputedField` lead me to believe that it's possible to make that work, no?. > Otherwise might help to describe how compute!(Ri_abs) and compute!(Ri_abs2) are different from Ri_cons, e.g. is it completely wrong, factor of 2, only wrong at the boundary, etc. @ali-ramadhan I provided my full example in the last sentence of my question!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1323#issuecomment-768639056:86,test,tested,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1323#issuecomment-768639056,2,['test'],"['tested', 'tests']"
Testability,> How about #1696? There was never any substantial discussion about it (other than a thumbs up ;)). I wasn't aware of that one tbh. I'm okay with nuking everything except the convergence tests. But also we can approve and merge this one first (since it's obviously an improvement) and discuss what to do with the other validation after that. Both work for me.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-871874171:187,test,tests,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-871874171,1,['test'],['tests']
Testability,> How about #3616 @mncrowe ?. As in I should test on glw/time-interval-fix branch?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152355200:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3056#issuecomment-2152355200,1,['test'],['test']
Testability,"> How about a test? If it's not trivial then don't worry. I like the idea of a test. . One example could be the following:. 1. define the horizontal compoments of velocity to be random fields, ; 2. use this function is used to compute the vertical velocity,; 3. compute the divergnece of the resulting three-dimensional field and compute its norm (which should be zero). . If you do this for two different resolutions you should find that the error decreases with higher resolution. Do you think this would be of interest?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896762413:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896762413,2,['test'],['test']
Testability,"> How about the tests that fail? Wanna work together to get them done?. yes, that's unfortunate, let's!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528952167:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528952167,1,['test'],['tests']
Testability,"> How did you determine all of these requirements? Are these strict requirements or guesses?. The CUDA packages and GPUifyLoops are strict requirements because we rely on recent features. For the other packages I just used the version we currently have specified in `Manifest.toml` as we haven't had problems with the current environment (and tests pass). I assumed that future versions will be compatible to avoid having to constantly update upper bounds, but if a new version of a package introduces problems we can add upper bounds. I added `^1` for packages that may release a v1.0.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/492#issuecomment-544990104:343,test,tests,343,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/492#issuecomment-544990104,1,['test'],['tests']
Testability,"> However, I found that the velocity shear at the first grid points is much larger than that predicted by the Monin-Obukhov similarity theory. I don't have much experience with solid wall boundary layers. A quick search returns this review:. https://journals.aps.org/prfluids/pdf/10.1103/PhysRevFluids.2.104601?casa_token=VBO0hrNqp-cAAAAA%3A3XEKZfLTdhiVluwRl8sCQCkOK44GoGUX-546uFtqQjSWAUIDQpKyyQsA4lQd65Oz6Kw5ClWias_CVQ0. suggesting that correct flux predictions in wall-modeled LES is unsolved. For example:. <img width=""616"" alt=""image"" src=""https://github.com/CliMA/Oceananigans.jl/assets/15271942/a6ffe67e-2009-441a-a440-80afe0dc4a70"">. shows a mismatch between DNS and wall-modeled LES for a few standard codes. Based on the literature, a failure to reproduce the log-law is expected?. It might help if you provide more background on what exactly you're trying to achieve, and why you believe the current approach will achieve that objective. For example, are we attempting to reproduce a known result?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1650818364:769,log,log-law,769,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1650818364,1,['log'],['log-law']
Testability,"> However, I need to know what to do, exactly. What code should I put in the verification folder, and what is the format? A few more questions:. If we structure it like the stratified Couette flow verification, then we just need two scripts:; 1. A script that setups up the verification experiments and outputs data necessary to produce verification experiment plots. Probably just https://github.com/glwagner/ColumnModelOptimizationProject/blob/master/les/deepening_mixed_layer.jl; 2. A script that produces plots from the data. Using these plots we should be able to say whether the verification experiment is a ""pass"". I think you already did most of these in https://github.com/glwagner/ColumnModelOptimizationProject/tree/master/les/analysis. Could be more than two scripts or could be one script I guess. > Where do we write documentation for the verification experiments?. I would add a Markdown file in https://github.com/climate-machine/Oceananigans.jl/tree/master/docs/src/verification where we can add the plots too. > Are we continuously testing verification experiments to ensure they run with new versions of the code, or should verification experiments be tagged to a particular version of the code?. Yeah we should but they are expensive to run... Maybe we should do this manually before releasing new versions?. > I think all these questions should themselves be answered in the documentation, also. Otherwise it is not clear how to contribute new verification experiments. True. I can add a `verification/overview.md` describing the purpose of the verification experiments and how they're structured, how to contribute a new one, etc. > I think we should shelve Kato and Phillips, and instead pursue verification based on oceanic observations. Reproducing ocean observations will be far more challenging, but aligns better with our ultimate goals. Sounds like a good idea!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562190948:1050,test,testing,1050,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-562190948,1,['test'],['testing']
Testability,"> However, a more efficient solution is to a new parameter to the FFT-based Poisson solver. Isn't this simply setting $\bar \phi = \bar r / \mu$ in the FFT solver, rather than $\bar \phi = 0$ as we do currently? Why does this help? (I'm not implying that it doesn't help, I just don't understand why trading one constraint for another is advantageous). Also given the ease of implementing such a change, did you test it?. Also if we set $\bar r = 0$ after computing the RHS here:. https://github.com/CliMA/Oceananigans.jl/blob/efb8b712c7541ba377af10f04795e542092565f0/src/Models/NonhydrostaticModels/solve_for_pressure.jl#L88-L89. then I suppose we would have $\bar \phi = \bar r / \mu = 0$ (I tested this briefly though and it didn't seem to improve the problems observed on #3831 / #3848, but we could keep trying).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3802#issuecomment-2418066050:412,test,test,412,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3802#issuecomment-2418066050,2,['test'],"['test', 'tested']"
Testability,"> However, if you wanted to ensure global conservation of energy, or something, maybe one needs to be careful about this?. Yes this, or numerical pitfalls (for example, its not possible to use a biased stencil for the pressure term as @navidcy found, I think). If there's no _a priori_ reason to worry, we might as well test it and find out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1265#issuecomment-744585065:320,test,test,320,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1265#issuecomment-744585065,1,['test'],['test']
Testability,"> However, there are a few packages that are different in the test environment (e.g., test environment uses DataDeps and TimesDates). Thus, often one needs to first install those packages before they are able to include(""this_other_test_script.jl""). If you find yourself running lots of tests then its best to put these packages in your global environment. Then this pattern will work.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000000552:62,test,test,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000000552,3,['test'],"['test', 'tests']"
Testability,"> I added a `ParticleAdvectionForcing` that behaves similarly to `dynamics(particles, model, Δt)` which allows user to specify any velocities it wishes to add to the model by passing in `NonHydrostaticModel(..., advective_forcing = ParticleAdvectiveForcing(u=some_u, v=some_v, w=some_w))` . The arguments are functions that take `(particles, model, Δt)` as inputs.; > ; > When I am trying to test my code I ran into a problem:; > ; > ```; > ERROR: UndefVarError: `flattened_node` not defined; > ```; > ; > https://github.com/CliMA/Oceananigans.jl/blob/a73e845a7a7bce8e22e9453670c1c20b67dbfc3a/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl#L92; > ; > @simone-silvestri I see that you added this and I couldn't find anywhere in the code where `flattened_node` is defined. What is it supposed to be?. This is from #3395. We should wait for that PR to be merged before merging this one",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1837242844:392,test,test,392,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1837242844,1,['test'],['test']
Testability,"> I admit that I'm not quite satisfied with these:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65; > ; > tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?. Shouldn't this be implemented with multiple dispatch? Chains of if-statements are the red flag.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653867156:145,test,test,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653867156,2,['test'],"['test', 'tests']"
Testability,"> I also suggest changing the module name to Buoyancies or BuoyancyModels and reserving Buoyancy for the user-facing object. The current names that @ali-ramadhan and I used were always meant to be a placeholder as we couldn't agree on good ones to use. I quite like this suggestion (and I suspect @ali-ramadhan does too) so I implemented it.; Just as a reference, here are the commands that I used (plus the same for the struct `Buoyancy`):. ```bash; find . -type f -name ""*.jl"" -exec sed -i ""s/\<Buoyancy\>/BuoyancyModels/g"" {} \;; find . -type f -name ""*.md"" -exec sed -i ""s/\<Buoyancy\>/BuoyancyModels/g"" {} \;; ```. I also added an example in the sandbox that runs a fully quiescent fluid with a tilted stratification for an hour and then makes sure that the vertical and horizontal derivatives stay the way we expect them. (This test is done both for `BuoyancyTracer` and for `SeawaterBuoyancy`).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-795853154:651,sandbox,sandbox,651,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-795853154,2,"['sandbox', 'test']","['sandbox', 'test']"
Testability,"> I am closing the issue because the solution is to give always `Float64` as suggested by @simone-silvestri; > ; > ```julia; > @inline tank(x, y) = ifelse(radius(x, y) < L, -H, Float64(0.0)); > ```; > ; > I tested and this is working now. Had some issues in the boundaries, but I might discuss that in another issue/discussion. Note there is no difference between `0.0` and `Float64(0.0)`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1089415019:207,test,tested,207,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1089415019,1,['test'],['tested']
Testability,> I am fine with having that as a test. Do you want to add it and merge?. Sure!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1709331729:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3235#issuecomment-1709331729,1,['test'],['test']
Testability,"> I approve.; > ; > I applaud the tests/jldoctests.; > ; > I'm a bit skeptical whether I have the expertise to be as critical. The main point of approval here is whether we think the API change is positive. I think you are one of the best people anywhere to judge this change. The other change, which is adding a field `immersed`, is innocuous. We have to have _some_ way of implementing boundary conditions on immersed boundaries and this is one solution to that. Probably its hard to say for anyone what the ""best"" solution is (but alternative designs are welcome). Note that it's possible to implement a field `immersed` without the API change. But I felt the API change was positive / important (I feel we've got to squash technical debt ASAP in all cases or I think it will bite us worse in the future).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1843#issuecomment-879906405:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1843#issuecomment-879906405,1,['test'],['tests']
Testability,"> I believe @ali-ramadhan's case is ill-posed as I stated. We can try to test this by using a sponge layer (or perhaps proper open boundary conditions) rather than; > ; > ```julia; > @inline u_inflow(y, z, t) = 0.01; > ; > u_bcs = FieldBoundaryConditions(; > west = OpenBoundaryCondition(u_inflow),; > east = OpenBoundaryCondition(u_inflow); > ); > ```; > ; > which I don't think will work. For the record, I did try this yesterday with `FlatExtrapolationOpenBC`s and it also blew-up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2408012792:73,test,test,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2408012792,1,['test'],['test']
Testability,"> I believe for your implementation, since the tracer values are not corrected for pressure, any leakage will be due to the advection of tracer by momentum that _is_ impacted by the pressure correction. This advection should be less with a smaller spacial step if I remember correctly. Well, I agree that less leakage implies that less tracer is advected across the boundary. But why is less tracer advected across the boundary?. It occurs to me that we are not converging to a particular solution as we refine the grid in this case, because this problem has no viscosity. Perhaps we should do a convergence test for a case with finite viscosity. We do introduce grid-scale gradients in the predictor velocity field via masking, so it does seem possible to me that the leakage / pressure gradient error might scale with resolution. It'd be nice to have a solid mathematical explanation for this behavior. Another question might be whether the leakage / error depends on the extent of the masked region (holding resolution constant). I'm not sure whether its worth looking into all this stuff though --- it might be better simply to work on implementing an accurate pressure solver, since I don't think it would be too difficult.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-867965142:608,test,test,608,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-867965142,1,['test'],['test']
Testability,"> I believe what we are doing here is using two filter scales `α=2` and `α=2` to compute `β`, which is ratio of coefficients at different filter scales `Δ`, `αΔ`, and `α²Δ`, assuming that `β` is scale-invariant. Hmm, then I'm confused. When you assume `β` to be scale-invariant you only need two filters: the grid (`Δ`) and a test filter (`αΔ`). afaik the second test filter is only needed when assuming that `β` can vary between scales.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3638#issuecomment-2187267888:326,test,test,326,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3638#issuecomment-2187267888,2,['test'],['test']
Testability,"> I can help you out today if you want, if you change to the formulation we decided I can try to fix the tests. Just let me know when it is ready to fix the bugs. Or we can fix this up!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050049879:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050049879,1,['test'],['tests']
Testability,"> I can't see the modifications to `geostrophic_adjustement.jl` that were made on this PR --- have these changes been pushed?; > ; > I don't think `Flat` will work in the vertical for `HydrostaticFreeSurfaceModel`. We have to inspect the way vertical velocities are calculated but I believe it will fail. Perhaps we need a more general algorithm, or we can write code to deal with that special case. I don't think its important (aside from testing) since if one wants to run a shallow water model they might be better off using `ShallowWaterModel`... Sorry, since that example didn't work I decided to restore that example to master. If you wanted to see the minor changes that I have done you can go here https://github.com/CliMA/Oceananigans.jl/pull/1513/commits/f372a5e5aa2c5d9cb3cdc9d0bc3104df5f1de184. I added in some `Flat` tests to `test_hydrostatic_free_surface_models.jl` and I'm happy to say all of those pass. Actualy, since last night all checks have passes so this PR seems to be in the clear. I should mention that I did adapt the `cell_advection_timescale` to deal with a vertically stretched grid and my solution might not be the cleanest but it does work. I do wonder whether something similar needs to be done to `cell_diffusion_timescale`. . One issue is that this version of `lid_driven_cavity.jl` is different from `master` but restoring that should be easy, if that's what we decided to do. Another thought: `HydrostaticFreeSurfaceModel` is labelled as experimental. If for some reason `Flat` does no work completely with that model, I suppose it's not as bad as it seems to work with the other two models, as far as I can tell. @glwagner if you are able to review this PR and tell me what other concerns you have or other tests we need to do, I can certainly try and do those.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-810123000:440,test,testing,440,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1513#issuecomment-810123000,3,['test'],"['testing', 'tests']"
Testability,"> I could also envision a few more tests to ensure the correctness of the turbulent diffusivities in simple flow fields for Constant Smagorinsky and Anisotropic Minimum Dissipation. However this last is not necessary. Hmmm, wonder if it's worth doing this if we're going to do some more rigorous LES verification anyways? The rigorous tests probably won't pass initially which will lead us to do these simpler tests first maybe.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/309#issuecomment-508953996:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/309#issuecomment-508953996,3,['test'],['tests']
Testability,"> I definitely agree with that. I just don't see how to do it. Being thorough with the tests (which I believe is something we want) necessarily comes with using the API many times, making changes to it a bit slower to implement, no?. I think many of the tests can probably be designed / written in a more maintainable way. There's a lot of boilerplate and copy-pasted code in the tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922536029:87,test,tests,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922536029,3,['test'],['tests']
Testability,"> I did a few tests with some criteria for timestep-skipping with a couple of my own simulations in addition to the MWE included here. In summary:; > ; > 1. Criterion `sim.Δt / 1e10`: successfully gets rids of the problem in both the MWE and in my simulations; > 2. Criterion `10 * eps(sim.Δt) * sim.Δt`: doesn't get rid of the problem in any simulation; > 3. `100 * eps(sim.Δt) * sim.Δt`: fixes the problem in the MWE but not in my simulations, although it does decrease its frequency of occurrence a good amount.; > 4. `1000 * eps(sim.Δt) * sim.Δt`: fixes everything in all simulations I've tried.; > ; > So only options 1 and 4 fully fix the problem (at least in the simulations I've tried so far). For me both those options rely on pretty arbitrary numbers though, so I'm not very happy with neither. From the point of view seeing the timestep-skipping as an approximation (un+1≈un), then maybe criterion 1 makes more sense, although I'm not sure how it'd behave for Float32 simulations.; > ; > I see three possible ways to go about it right now:; > ; > 1. Do what this PR is doing, and manually set the criterion to either option 1 or 4 above. If it turns out that some simulations still have issues, we revisit.; > 2. We add `min_Δt` as a property of `NonhydrostaticModel` (or maybe `Simulation`?). I think the minimum `Δt` for which time skipping will be necessary will vary significantly between simulations, so this solution deals with that by leaving the decision up to the user if they are interested in the pressure output.; > 3. We try something that actually prevents these round-off errors instead of dealing with them. @glwagner suggested an `Integer`-based model clock, but there might be other options. Note that `eps(sim.Δt)` is similar to `sim.Δt * eps(typeof(Δt))`. So `Δt / 1e10` is pretty similar to `100000 * eps(sim.Δt)`. The only point of using `eps` is to avoid hard coding `Float64`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3606#issuecomment-2136281567:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3606#issuecomment-2136281567,1,['test'],['tests']
Testability,"> I do think `@diagnostic` and `@setup` are just `@info` level logging because they describe normal state changes in your application. Just reading the code, I see you've assigned them different importance levels. So perhaps I'm wrong!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544769250:63,log,logging,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544769250,1,['log'],['logging']
Testability,"> I don't have enough knowledge to comment on the logistics of the test I think, but what I can assess looks pretty good!. Perhaps I should expand on the original post. Before this PR, we had an ""internal wave dynamics"" test which tested that the vertical propagation of an internal wave was simulated ""accurately"" (according to a more or less arbitrary tolerance). The domain is horizontally periodic and vertically bounded with one point in the y-direction; therefore the grid could be made `Flat` in the y-direction. Also, the wave has a vertical wavenumber of 16 and a horizontal wavenumber of 1, so it has a thin aspect ratio and is nearly hydrostatic. After this PR we conduct 8 tests, rather than 1 --- 4 tests for `IncompressibleModel` and 4 tests for `HydrostaticFreeSurfaceModel`. For each model we run the tests on 4 different grids:. * y-periodic `RegularRectilinearGrid` (the original grid used in the test); * y-`Flat` `RegularRectilinearGrid`; * y-periodic `VerticallyStretchedRectilinearGrid` with regular spacing in `z`; * y-`Flat` `VerticallyStretchedRectilinearGrid` with regular spacing in `z`. The test for the last grid failed for both models due to NaNs prior to the fixes implemented in this PR. Let me know if that clarifies the new tests that were added or if more information would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881943451:50,log,logistics,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881943451,11,"['log', 'test']","['logistics', 'test', 'tested', 'tests']"
Testability,"> I don't know how to help, but I am following to see if can learn something and maybe next time I can be a better helper. Can you reproduce the error in the test locally? You can try navigating to `/test`, starting with `julia --project`, and then. ```julia; julia> include(""test_forcings.jl""); ```. you might need to add a few packages to your global environment like `Test` to make this work. Also running. ```; TEST_GROUP=time_stepping_2 julia --project -e 'using Pkg; Pkg.test()'; ```. will run the forcing tests (and a few others). If you do that, do you see an error like in the CI or do the tests pass?. Also running just the problematic test in isolation can be useful:. https://github.com/CliMA/Oceananigans.jl/blob/791bb83e4c49386cc31292bf391762f1cd96bdee/test/test_forcings.jl#L114-L130",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1092171683:158,test,test,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1092171683,8,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"> I don't think I have enough expertise to review the coding itself. What you've mentioned is a valid review! If you can't read the code, there's a problem with the code... I can add a test for a non-default BC. There's no examples at all in the docstring for `ComputedField`... I can add one. I feel this feature may not be used all that often (only required when constructing complex chains of computations that require intermediate `ComputedField`s), so it might still be rough around the edges.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1340#issuecomment-773683542:185,test,test,185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1340#issuecomment-773683542,1,['test'],['test']
Testability,"> I don't think I understand how this is ill-posed? It is over specified so will not produce physical results but I thought that without a radiating condition this should still not NaN straight away there should just be a lot of reflections from the boundaries?. By ""ill-posed"" I was referring to the over-specification. But if you say that we should find a solution / the problem should not blow up then I agree, ""ill-posed"" is the wrong word... @ali-ramadhan this could be tested by running the problem without immersed boundaries but still in a scenario in which a non-trivial flow is generated. Also curious whether the successful simulation you produced above also works with `OpenBoundaryCondition` on the right instead of `FlatExtrapolationOpenBoundaryCondition`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2414267854:475,test,tested,475,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2414267854,1,['test'],['tested']
Testability,"> I don't think it's quite so drastic. It's possible to have two unrelated remotes cloned within the same git repository so you certainly should be able to fetch changes even if upstream is completely rewritten. I'd probably try squashing your logging changes into a single commit and then cherry picking that across to the newly rewritten master. (I'm not entirely sure that will work, but I think it should.); > ; > PRs are based on branch and repo names, so once you've sorted things out locally you should be able to force push to `arcavaliere:master` and the conflicts here will be resolved without opening a new PR. Looks like it worked; thanks for the write up!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-550112498:244,log,logging,244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-550112498,1,['log'],['logging']
Testability,"> I don't think the verification tests show the pressure solver is correct (its not, we know that). True. But it shows that as we increase the resolution, the solution converges to the analytic solution. > This 'test' seems different. It claims to verify that the pressure field obtained by our numerical method is correct. Yes, or at least tell use the order of accuracy on the pressure and velocity fields.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-567596888:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-567596888,2,['test'],"['test', 'tests']"
Testability,> I don't understand what is going on with my two PRs that are not passing the tests. Should I close and create them again from the latest master?. Nope. It's not your fault. We are having issues with the CI.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013533717:79,test,tests,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013533717,1,['test'],['tests']
Testability,"> I don't understand why this is failing (it also fails locally).; > ; > It is only:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L126; > ; > ; > that fails for Float32 on the grid points, and the error is ~4.6f-6 vs eps which is ~3.8f-6. It is also weird that this fails on regular grids where I haven't changed anything.; > Also, the maximum error for each interpolation is:; > ; > ```; > u -> 1.9073486e-6; > v -> 4.7683716e-6; > w -> 3.8146973e-6; > c -> 3.8146973e-6; > ```; > ; > with ϵmax= 3.8146973f-6 and I don't know why they wouldn't all be the same?. I'm not sure what you mean by ""they"", but with different nodes, ie different `nodes(v, reshape=true)`, then shouldn't they be different (to within machine precision)?. The function involves a few arithmetic operations:. https://github.com/CliMA/Oceananigans.jl/blob/4d30ed8bf093b6b7894677ef33c2c0b1cf3e1487/test/test_field.jl#L109. and round off error accumulates. Therefore you may want to increase the tolerance to `10*e_max` or something.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386:179,test,test,179,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1492713386,2,['test'],['test']
Testability,"> I don’t like “Singleton”: Periodic and Bounded refer to the physical nature of the dimension, while Singleton obliquely references the size of an underlying array of discrete data. A better name would refer to the physical nature of the coordinate; “Uniform” or “Flat” are examples. We're setting up a discrete model anyways, but I guess if it's supposed to model some physical system then ""Singleton"" may not be completely appropriate. I'd vote for Flat over Uniform then. Uniform could be multiple grid points while Flat strongly implies one grid point (while both imply homogenous dynamics in that dimension). > It could make sense to make (Periodic, Periodic, Bounded) a default. This is already the default of Model. Yeah I guess we have a choice here: do we want to make horizontally periodic the default or are users now required to specify a grid topology?. I could see benefits either way. Keeping it the default would introduce no breaking changes and simplify the tests, but requiring it would improve the clarity of most scripts (an issue that has been brought up before, see #459). I think most real scripts (not tests) should be specifying a topology for clarity.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/614#issuecomment-581827847:977,test,tests,977,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/614#issuecomment-581827847,2,['test'],['tests']
Testability,"> I encountered similar issues months ago when using the CG Poisson solver. I fixed my code by slightly modifying the algorithm ([Yixiao-Zhang@c7983b8/\](https://github.com/Yixiao-Zhang/Oceananigans.jl/commit/c7983b8002b91cd5939018a7c999eae77e2105ac/\)). The reason is that the CG method can be numerically unstably for positive (or negative) semi-definite matrices. Did you encounter the same issue whereby the simulation would _immediately_ NaN (rather than intermittently)? I'd be curious to see your setup in order to have more than one working example to test with. I've made a little progress with regularizing the solver (vs the simpler technique of setting the mean directly). The issue is that while regularization does seem to be able to stabilize the solver, we still experience extremely slow convergence with `FlatExtrapolationOpenBoundaryCondition` to the point that it's basically unusable practically, I think (at least if the same convergence rate is experienced at higher resolution / with better physics). It's unclear whether these issues are generic to the solver or specific to this boundary condition, so having another unstable case would be useful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2418133864:560,test,test,560,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2418133864,1,['test'],['test']
Testability,"> I guess the FFT pressure solver assumes either periodic or no-penetration at the boundaries. This isn't true --- our pressure solver can handle any boundary conditions in principle. > Unfortunately I get immediate NaNs on iteration 1. Maybe there's a bug somewhere? I know I'm using a bunch of experimental features together so perhaps this is not surprising. My setup could also be bad though. I believe this problem is ill-posed. I would first try periodic boundary conditions with a sponge layer on one side. You probably need a radiation condition on the right if you want to use open boundaries... > shouldn't the conjugate gradient solver converge on the correct pressure with enough iterations? Or maybe not if the pre-conditioner is very wrong?. You can test this by omitting the preconditioner. It might be appropriate to convert this to a discussion, at least until we can prove there is a bug to be fixed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2398217420:764,test,test,764,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2398217420,1,['test'],['test']
Testability,> I have a few thougths to share. I agree with the beautification you've suggested. Also formatting the xticks is far lower priority than readable convergence test plots.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-745301343:159,test,test,159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-745301343,1,['test'],['test']
Testability,"> I have only used overwrite_existing=false without a checkpoint for short tests within the same Julia instance to extend the model output. Thank you for pointing out this use case. I think this is another situation that could be solved by waiting until `run!` for initialization. We can analyze an existing file and determine whether or not any data within the file will be overwritten based on the simulation parameters (current time, stop time). Another idea by the way would be to move the concept of ""overwriting"" to `run!`, as well. Then the single keyword can apply to all output, or not, which presumably more aligned with what a user would want (rather than toggling `overwrite_existing` for each writer individually).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3793#issuecomment-2392171348:75,test,tests,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3793#issuecomment-2392171348,1,['test'],['tests']
Testability,"> I haven't had a chance to test this properly on GPUs, although I believe (from experience in a less controlled scenario) a similar slowdown occurs. Hmm ok. Not sure what that would mean, but I guess that is some kind of clue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875638891:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875638891,1,['test'],['test']
Testability,"> I just edited an old benchmarkable incompressible model script to only have the model setup and time stepping. I did not profile from the start, and only profiled the time_step! function line.; > I feel like the profiles are more dependent on which system have which profiler, so it might make sense to just add a few simple scripts in `benchmark` that just consist of model setup and timestep and those can be called profiliables/benchmarkables. Ok! I can help with that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890025103:23,benchmark,benchmarkable,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890025103,3,['benchmark'],"['benchmark', 'benchmarkable', 'benchmarkables']"
Testability,"> I just finished a strong scaling multithreaded benchmark with the nonhydrostatic model with grid size being 256 cubed.; > I'll venture a wild guess and say that the weak scaling shallow water model's efficiency change is not monotonic due to smaller grid sizes not saturating the CPUs. Not sure if that's still a possible explanation when the grid size scales proportional to number of threads in weak scaling.; > ; > Here are the strong scaling nonhydrostatic results. I'm currently working on converting the script to do weak scaling to see if a small grid size with too many threads is what's causing very low efficiencies towards the end.; > ; > size	threads	slowdown	efficiency	memory	allocs; > 256	1	1.0	1.0	1.0	1.0; > 256	2	0.992966	0.503542	4.14014	152.109; > 256	4	0.501089	0.498913	2.17724	50.2532; > 256	8	0.324366	0.385367	1.94899	29.191; > 256	16	0.244788	0.255323	2.12262	18.2106; > 256	32	0.263339	0.118668	2.87624	16.3167. Excellent, nice results!. Same weird behavior --- the timing is identical from 1 to 2 threads; only at 4 threads do we get speed up (but its by a factor of 1/2 rather than 1/4). With 16 threads the model is 4x faster. Hmm... can we do better?. > Strange that strong scaling looks more monotonic than the weak scaling. True that the model doesn't actually _slow down_ from 1 to 2 threads. That would be crazy... As for problem size, I'd be surprised if the CPU isn't saturated. These are ""big"" by my metric, but maybe my metric isn't good...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-890027183:49,benchmark,benchmark,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-890027183,1,['benchmark'],['benchmark']
Testability,"> I just need to modify time_step! with a flag like first_step_Euler=true to take forward Euler steps at first iteration and when changing the time step, but with the ability to turn it off for tests where we actually don't want to do this. This is a good idea. You could also call it `initialize_with_Euler`. Another possibility is to make the `time_step` function more modular, which would make it easy to define a new non-initializing variant of `time_step!`with a special name (rather than using a flag).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/297#issuecomment-505555809:194,test,tests,194,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/297#issuecomment-505555809,1,['test'],['tests']
Testability,"> I like @glwagner 's suggestions.; > ; > One question: if we remove examples can they still reside in tests of somewhere else where people can dig them up if they want to see them or will they disappear?. That's a great question, since there are really two points at stake here and there's more than one way to provide ""examples"" to users. In any case, providing ""assured"" examples required testing. That's perhaps why we're hesitant to advertise the huge amount of code in `validation` as a resource for users. It is a resource, but only if you know what you're doing, because the scripts often go stale and we don't have the mojo to test them all in CI right now. ""Examples"" are scripts that we'd like to offer to users as guaranteed-to-work pieces of code to get them started. Right now, we build all of our examples with `Documenter.jl`. This both tests that the examples work correctly, and also allows users to browse the examples in html (pretty sweet). But currently (and just because we haven't devoted time to cracking the problem) this means we have limited computational resources for examples. But another possible solution is to test examples in CI _without_ piping them through documenter. Those scripts would then be available for viewing on github (and we can link to them in the docs); it's just that we wouldn't get the pretty markdown / images / movies. If we don't use Documenter then we can run these tests like any others, and also test examples for GPU. We currently test just one script this way, namely the stratified couette flow validation test:. https://github.com/CliMA/Oceananigans.jl/blob/e796a5de99e791466ef43ab1ed8628b4c4d62f64/test/test_validation.jl#L13-L27",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2326#issuecomment-1062870462:103,test,tests,103,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2326#issuecomment-1062870462,10,['test'],"['test', 'testing', 'tests']"
Testability,"> I like that it puts the log level, file name, and line number on the right as putting them on the left causes messages not to align and makes logs harder to read. By the way, this is available in stdlib `Logging.ConsoleLogger`, but it's hidden behind the `right_justify` keyword and I'm not sure anyone uses it! I had a long debate about this when putting this code into Base, which I lost ;-) (TBH I'm happy with the outcome because having people copy and paste log messages which are right-justified to a particular terminal width would have led to rather a mess.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544768913:26,log,log,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-544768913,4,"['Log', 'log']","['Logging', 'log', 'logs']"
Testability,"> I looked at one of the failed tests in shallow water model and it seems to be at these lines below.; > ; > ```; > @testset ""Must be Flat in the vertical"" begin; > grid = RectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1), topology=(Periodic,Periodic,Bounded)); > @test_throws AssertionError ShallowWaterModel(grid=grid, gravitational_acceleration=1) ; > ```; > ; > I tried it locally and the test passes, so I'm a bit confused as to the problem. Ok! You found it. But the model throws an `ArgumentError`, not `AssertionError`. I'll fix it!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144201628:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144201628,5,"['Assert', 'test']","['AssertionError', 'test', 'tests', 'testset']"
Testability,"> I looked at the error and see this but don't pretend to know why this has happened.; > ; > ```; > Checkpointer [GPU]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_checkpointer.jl:19; >   | Expression: all(test_model.timestepper.G⁻.w.data .≈ true_model.timestepper.G⁻.w.data); >  ```; > ```. Hmm yeah, the model output changed. Not sure what's causing this since I've never investigated the checkpointer. But the fact that the regression tests work points towards it being the checkpointer itself that changed, and not simulation results, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-921807534:120,Test,Test,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-921807534,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"> I m wondering if this issue is solved in the new version. It is! Although I'll move the masking from the model update to the output construction since it doesn't change model runs and it saves time. Tests should be passing, although apparently the GPU runs aren't running currently",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1218827709:201,Test,Tests,201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1218827709,1,['Test'],['Tests']
Testability,"> I meant: did you test that the test was doing what you thought it would?. No, my plan was to see what happened in the CI to save some time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325471484:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325471484,2,['test'],['test']
Testability,"> I now recall the reason for the discrepancy. It was due to an index shift, which made filling the extra layer of halos quite straightforward, so I proceeded with it. For example, field_1[2:Nc+1, Nc+1:Nc+Hc] from an odd panel corresponds to field_2[1:Hc, 1:Nc] from the panel to the north. I can modify this expression to field_1[2:Nc, Nc+1:Nc+Hc] aligning with field_2[1:Hc, 2:Nc] and make similar adjustments for other halo fillings to minimize confusion. Please let me know your thoughts. My thoughts are two:. - how will we know that while doing that change you won't break anything since there is no test for any of these things. - I understand that you are telling me is merely an indexing reordering, that is instead of doing; ```julia; for j in 1:10; a[j] = 10; ```; you do; ```julia; for j in 2:11; a[j-1] = j-1; ```; right? But these two will result to the same array. So I'm confused.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2025884761:606,test,test,606,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2025884761,1,['test'],['test']
Testability,"> I over-simplified. FFTs are efficient when there are a small number of prime divisors --- 2, 3, 5, 7 --- of the length of the sample. 100 may actually be ok because it is 2*2*5*5. I don't feel strongly, but you will find that most people running simulations are using powers of 2 and 3 (128, 192, 256, 384, 512, 768, 1024) --- even when their code has no FFTs! Perhaps the purpose of this convention is so people who _do_ use codes that rely _heavily_ on FFTs are able to run code comparisons. I find the convention to be an appropriate best practice. An 1D FFT of length 257, for example, is 4 times slower than an FFT of length 256 on my machine. For tests, of course, using small numbers of prime divisors is completely irrelevant; I just want to encourage best practices and promote awareness of them, and also implicitly emphasize to users that this code uses FFTs, and don't want random person X to read the tests and scratch their head and ask ""doesn't this code rely on FFTs?"" (like I did when I saw the examples). I don't disagree with anything here. I just think users should be able to run using whatever resolution they want and know that the code has been tested and works with weird inefficient resolutions. To encourage users maybe we can print a ""performance warning"" if the grid resolution is not the product of a small number of prime divisors?. > I certainly prefer that. It may be academic because the architecture should probably be a parameter of `Model`. That makes sense. I think we should just be wary of having too many parametric types but architecture probably warrants being one as we'll dispatching on it so frequently.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/97#issuecomment-468537451:655,test,tests,655,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/97#issuecomment-468537451,3,['test'],"['tested', 'tests']"
Testability,> I ran the script and the actual simulation NaN-ed. That means Oceanangians isn't compatible with julia 1.11. Do any other tests catch the issue? We can use this opportunity to add more tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3836#issuecomment-2408114025:124,test,tests,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3836#issuecomment-2408114025,2,['test'],['tests']
Testability,"> I removed that and hopefully we can still merge this PR since it's a small improvement. Yeah, merge if tests pass!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2029#issuecomment-956542509:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2029#issuecomment-956542509,1,['test'],['tests']
Testability,"> I seem to have a problem with the GPU cubed sphere tests; > ; > ```; > ERROR: Out-of-bounds array access.; > ERROR: a exception was thrown during kernel execution.; >   | Run Julia on debug level 2 for device stack traces.; > ```; > ; > When running the tests on tartarus, both normally and with debug level 2, I cannot reproduce the error. We've seen this issue before where sverdrup tests fail but tartarus passes. Can anyone remember where we saw that?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115067071:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1115067071,3,['test'],['tests']
Testability,"> I sent a flurry of updates once I had the validation case coded up! It should work now. Wait, what should I do to test that? haha",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2390#issuecomment-1082109978:116,test,test,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2390#issuecomment-1082109978,1,['test'],['test']
Testability,> I suppose we'll see it when the example is compiled into a preview. Sounds good and I looked through the code and everything looks good to me. . I will merge after the tests pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1874#issuecomment-882802165:170,test,tests,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1874#issuecomment-882802165,1,['test'],['tests']
Testability,> I tend to believe that this issue is again related with using a previous version of Oceananigans than the one used by the Docs. Hmm I think you're right. @loganpknudsen can you confirm that your problem goes away if you run the example with the latest version of Oceananigans? PS who are these mysterious colleagues? If they are on github go ahead and tag them here to add them to the discussion.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1927121355:157,log,loganpknudsen,157,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1927121355,1,['log'],['loganpknudsen']
Testability,"> I think I get the idea, but I still can't imagine what could be wrong with the vertically stretched grids themselves. They seems pretty straightforward. Could you clarify what specific metrics you're talking about that are different?; > ; > > We might be able to convert the internal wave setup dynamics test to a vertically bounded domain and put it on a stretched grid to test these issues.; > ; > This seems like a good idea. I don't know which ones are problematic --- once we find those, the problem is solved. The answer might be obvious; it looks like we only redefine `Flat` metrics for `RegularRectilinearGrid`:. https://github.com/CliMA/Oceananigans.jl/blob/326f22aff244ad1f9d0778b9d06184f348db211b/src/Operators/spacings_and_areas_and_volumes.jl#L57-L62. We may just have to use `AbstractGrid` rather than `RegularRectilinearGrid`. I'm not sure why the above functions are specific to `RegularRectilinearGrid` in the first place. @francispoulin you helped with this, right? Do you know?. We're missing many of the horizontal metrics too so I think we should add those, otherwise `Flat` won't work with curvilinear grids, either. EDIT: definitions for flat _area_ metrics are probably not very useful / represent edge cases that need special consideration. So we might just focus on flat _linear_ metrics for now (dx, dy at various locations). Right now additional horizontal linear metrics are irrelevant because there are no rectilinear grids that are stretched in horizontal directions. However, we will need these once we have general stretched rectilinear grids and it might be good to avoid confusion like what's happening in the present issue... I'm putting together a test for rectilinear grids that catches this. I suggest we fix the problem after we have the test. If anyone has more information about `Flat` please chime in.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-881923453:306,test,test,306,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-881923453,4,['test'],['test']
Testability,"> I think including these packages in at least some examples would encourage users to experiment and explore. One of the advantages of python is its powerful ecosystem of packages, and I guess this could be the start of something similar for physical oceanographers in Julia. That's a fair point that we can use any external packages we like in examples. I guess my question is whether `DiskTimeSeries` itself warrants an independent package. I think perhaps a more logical division of packages would move the entire Grid + Field + Operators + AbstractOperations framework for finite volume calculations outside of Oceananigans. Then Oceananigans would be devoted purely to ocean-specific physics and modeling.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-810488923:466,log,logical,466,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-810488923,1,['log'],['logical']
Testability,"> I think it's also somewhere else, but cannot remember where. Let's make sure we use a consistent style for the tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1588250946:113,test,tests,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1588250946,1,['test'],['tests']
Testability,"> I think passing the tendencies automatically is going to require some materialization step when the model is setup to pass into the boundary conditions but I know we're trying to avoid doing that so any other suggestions would be useful. I've started testing this by initialising the timestepper first but it is a bit clumsy. Well, we already do materialize boundary conditions, so possibly this isn't such a big deal. Another possibility is to pass the tendencies through to `fill_halo_regions!`, but that has wider implications that we'd have to think about (for example should the tendencies also be passed on to discrete-form boundary condition functions?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1965127320:253,test,testing,253,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1965127320,1,['test'],['testing']
Testability,"> I think providing a string as a closure doesn't even make it to the new error message you added so you get a MethodError from `with_tracers`!; > ; > ```julia; > julia> using Oceananigans, Test; > Precompiling Oceananigans; > 1 dependency successfully precompiled in 11 seconds. 129 already precompiled.; > ; > julia> grid = RectilinearGrid(CPU(), size=(2, 2, 2), extent=(1, 2, 3)); > 2×2×2 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 2×2×2 halo; > ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.5; > ├── Periodic y ∈ [0.0, 2.0) regularly spaced with Δy=1.0; > └── Bounded z ∈ [-3.0, 0.0] regularly spaced with Δz=1.5; > ; > julia> closure = ""not a closure""; > ""not a closure""; > ; > julia> NonhydrostaticModel(; grid, closure); > ERROR: MethodError: no method matching with_tracers(::Tuple{}, ::String); > ; > Closest candidates are:; > with_tracers(::Any, ::Nothing, Any...; kwargs...); > @ Oceananigans ~/Research/OC11.jl/src/Utils/with_tracers.jl:44; > with_tracers(::Any, ::Oceananigans.TurbulenceClosures.TwoDimensionalLeith{FT}) where FT; > @ Oceananigans ~/Research/OC11.jl/src/TurbulenceClosures/turbulence_closure_implementations/leith_enstrophy_diffusivity.jl:61; > with_tracers(::Any, ::ScalarBiharmonicDiffusivity{F, N}) where {F, N}; > @ Oceananigans ~/Research/OC11.jl/src/TurbulenceClosures/turbulence_closure_implementations/scalar_biharmonic_diffusivity.jl:85; > ...; > ; > Stacktrace:; > [1] NonhydrostaticModel(; grid::RectilinearGrid{…}, clock::Clock{…}, advection::Centered{…}, buoyancy::Nothing, coriolis::Nothing, stokes_drift::Nothing, forcing::@NamedTuple{}, closure::String, boundary_conditions::@NamedTuple{}, tracers::Tuple{}, timestepper::Symbol, background_fields::@NamedTuple{}, particles::Nothing, biogeochemistry::Nothing, velocities::Nothing, hydrostatic_pressure_anomaly::Oceananigans.Models.NonhydrostaticModels.DefaultHydrostaticPressureAnomaly, nonhydrostatic_pressure::Field{…}, diffusivity_fields::Nothing, pressure_solver::Nothi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325346266:190,Test,Test,190,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325346266,1,['Test'],['Test']
Testability,"> I think something like you're proposing would have added to my confusion. Isn't the confusion a problem with the output writers API? I think it sounds like a great idea to support `AbstractOperation` output. It's kind of logical. Doing this even allows us to do some clever stuff behind the scenes, like using one underlying array to store the results of multiple computations performed serial (thus saving memory).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2235#issuecomment-1036767779:223,log,logical,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2235#issuecomment-1036767779,1,['log'],['logical']
Testability,"> I think that's a fine strategy. We can add a kwarg to `NonhydrostaticModel` called `hydrostatic_pressure_anomaly`. We can set it to `CenterField(grid)` to preserve existing behavior, or set it to `nothing` to avoid the separation. And we should probably make `nothing` default so that triply periodic problems can be done out of the box. Then we don't have to re-do the regression tests either because we preserve existing behavior...; > ; > I think that's also a less invasive change than this PR because we don't have to change `pressures` to `pressure` everywhere, hmm. Agreed. > Since you've done most of the legwork I think you have prerogative to open a new PR if you like (and I can help once you do). Thanks, but I unfortunately won't have time to dedicate to this for at least a few weeks. So please feel free to start the PR!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088574534:383,test,tests,383,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-2088574534,1,['test'],['tests']
Testability,"> I think the WENO positivity preserving scheme we have is not actually positivity preserving because preserves 1D positivity. To have positivity preserving we need a 2D scheme (or at least to do proper tests/improvement on the scheme we have). Thanks for the reply. . If there is a paper that shows how to do this I might want to give it a try in april, after I finish teaching. But if someone else wants to do it, you are welcome. I will point out that the first order upwinding is positive preserving. Not very accurate, but for testing it is fast and won't give rise to negative heights, which all other schemes can do.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482690749:203,test,tests,203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2975#issuecomment-1482690749,2,['test'],"['testing', 'tests']"
Testability,"> I think the expected behavior is that the velocity error in the object scales with the non-hydrostatic pressure gradient times the timestep of the Runge-Kutta substep. Presumably the non-hydrostatic pressure gradient in the object scales as the non-hydrostatic pressure over the length scale of the object. If the strength of the non-hydrostatic pressure field on the object of the boundary is a function of the outer-flow and object configuration, then I don't think grid refinement will help much. Thanks @wenegrat. Sounds like there might be two decent tests to confirm that the algorithm is implemented correctly: 1) run the same problem for 3-5 different time-steps, and confirm that the error reduces with 1/dt and 2) refine the grid and confirm that the error remains constant. > My guess is that the asymmetry is due to an index sweep in the; solver smearing this error ahead of itself. Hmm... the solver uses FFTs. Perhaps @ali-ramadhan can answer, but this might be a question about the internal implementation of the FFT -- not sure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1036#issuecomment-738760595:558,test,tests,558,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1036#issuecomment-738760595,1,['test'],['tests']
Testability,> I think the new diffusion/cosine tests? Can't think of something else... Ah indeed. It's also possible that some PRs caused a compile-time regression. Hopefully not a performance regression though. We should test that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2324#issuecomment-1062527828:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2324#issuecomment-1062527828,2,['test'],"['test', 'tests']"
Testability,"> I think the test is failing becaue `f` is returning a `Float64`, so when the grid is `Float32` `eps(maximum(f))` is wrong. Is there a way to set the type returned by `f`?. you can also pass the grid; ```julia; f(x, y, z, grid) = eltype(grid)(...); ε_max = CUDA.@allowscalar f.(nodes(grid, (Face(), Face(), Face()), reshape=true)..., Ref(grid)) |> maximum |> eps; ```. `eltype` is the function I couldn't remember!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488640934:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1488640934,1,['test'],['test']
Testability,"> I think the timestamp coming first would be good. I also think having the LogLevel string be uppercase would also help readability. True, that would be nice! I'll merge this PR to avoid dragging it out but we should discuss how to improve the logger in an issue or future PR!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/585#issuecomment-568207954:76,Log,LogLevel,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/585#issuecomment-568207954,2,"['Log', 'log']","['LogLevel', 'logger']"
Testability,> I think to do this cleanly we might want to follow up with what @vchuravy was doing here #3042. I tried experimenting with this on the OceanBioME tests and it seems to be preventing it from segfaultinig https://github.com/OceanBioME/OceanBioME.jl/pull/190 (and testing running them both at the same time here https://github.com/OceanBioME/OceanBioME.jl/pull/196). But it does also seem to run quite a bit slower so I'm going to see how much I can get it to cache without it causing problems. And then I can copy the implementation over to here.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2265916968:148,test,tests,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3662#issuecomment-2265916968,2,['test'],"['testing', 'tests']"
Testability,"> I think to preserve the work in this PR, we should add a `Float32` test which will fail if a spurious promotion undermines performance. Agreed. I'll revisit this PR later to see if I can find where the conversion happens. The test I added only checks to see if we can take a time step. But I should be able to also add a test to ensure no spurious promotion occurred.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445251168:69,test,test,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445251168,3,['test'],['test']
Testability,"> I think we should add a test. We have the figure included here that tests that it has the correct convergence, but I am happy to add another test as well. What did you have in mind?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905790061:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905790061,3,['test'],"['test', 'tests']"
Testability,> I think we should fix the issue with show and compute!. Apparently it wasn't that straightforward to fix the tests...; I'm getting ready for two back to back conferences so I won't have time to fix this for a few weeks. Feel free to take a crack at it in the meantime! Otherwise I'll take a look again after I'm back,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1144372947:111,test,tests,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1144372947,1,['test'],['tests']
Testability,"> I think we will need to do some more testing to make sure this won't break our near global hydrostatic setups, which are unfortunately in a tenuous position because they rely on some untested features (and we don't have regression tests for some important cases). @simone-silvestri what do you think? We may want to wait for a few more PRs (perhaps containing some of those tests) to go in first. @glwagner what is the status of the global hydrostatic setup tests? Do you think we've reached a point where we can merge this PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1426160352:39,test,testing,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1426160352,4,['test'],"['testing', 'tests']"
Testability,"> I think you may need @inline in front of most of those functions (only matters for CPU). ~That was my first attempt, but I get an error saying `ERROR: LoadError: LoadError: -(grid.Lz) + grid.Δz * (k - 1 / 2) is not a function expression`. I guess I need to choose between `@inline` or `@inbounds`?~. Nevermind, I was doing something very dumb. Inlining gives me exact same performance as not inlining (0.20% of the simulation). I guess the compiler is getting smarter about inlining. > If the slow down is the same for DiscreteForcing then the problem may really just be evaluating exp, sadly... You could try @inline bottom_mask(k) = 1 to test... I'll try that. Although I have tried non-exponential masks in the past with a similar slowdown, so I'm not sure if that's the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875673783:642,test,test,642,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875673783,1,['test'],['test']
Testability,"> I tried running a non hydrostatic case with open boundaries and a coastal bathymetry the other week and it also NaNed very quickly with the immersed pressure solver but ran fine ish with FFT. Can you produce some code or an MWE? I'm interested in working on this, but I have no cases that have an issue so there's little I can do to make progress. How is the problem forced?. I believe @ali-ramadhan's case is ill-posed as I stated. We can try to test this by using a sponge layer (or perhaps proper open boundary conditions) rather than . ```julia; @inline u_inflow(y, z, t) = 0.01. u_bcs = FieldBoundaryConditions(; west = OpenBoundaryCondition(u_inflow),; east = OpenBoundaryCondition(u_inflow); ); ```. which I don't think will work. > perhaps there is an issue with how the pressure solver deals with boundary conditions?. Both solvers treat boundary conditions the same way:. https://github.com/CliMA/Oceananigans.jl/blob/0210e6646d6bab93e2c2d579b7e389e1ccc0c5db/src/Models/NonhydrostaticModels/pressure_correction.jl#L13-L15. (I can explain more how the math works out if there is interest.). Can you set `maxiter=10` in the solver and see if you still get NaNs?. I also suggest playing with `reltol` and `abstol`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2407641244:449,test,test,449,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2407641244,1,['test'],['test']
Testability,"> I want to merge this then use it to develop the user API for immersed boundary fluxes.; > ; > Also, did anyone use this?. I haven't used this, but I can test it if you want. > Partly I am wondering whether we may actually need shaved cells for accurate LES computations in complex domains with non-straight immersed boundaries) ... otherwise our boundaries will always have ""effective roughness"", and form drag may dominate. It is actually possible that form drag dominance is ok as a model for rough boundaries. But it'd be nice to have the possibility of ""smooth"" boundaries where fluxes can be controlled via parameterizations.; > ; > It's also interesting that PALM, which uses an almost identical numerical method that we use, is primarily used for atmospheric LES in urban environments. So their boundaries _are mostly flat_ (the sides of buildings, etc...). Shaved cells are definitely preferred in terms of accuracy (and convergence with resolution), but might not be necessary in a number of cases. My intuition from seeing results from papers (and from previous LES+IBM at my previous group) is that partial step cells would be almost as accurate as shaved cells (at least for oceanic cases with mild bathymetry slopes) but significantly simpler to implement. Since we already have the full-cell grid-fitted IBM it might be better to just focus on that for now and later modify it to make it partial-step when everything is working well (I think we'd just need to modify the calculation of vertical areas and volumes, no?). Also, when running ocean LES the aspect ratios are generally isotropic (Δz/Δx~1) but the bathymetry slopes are very small, which means that for some cases even full-step grid-fitted IBM might be enough. Only some tests will tell for sure though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100238266:155,test,test,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100238266,2,['test'],"['test', 'tests']"
Testability,"> I was thinking of putting a test saying if not flat in the vertical then stop, but wasn't sure if this is okay. I think you should either error or forcibly remake the grid with `Flat` in the vertical and throw a warning.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1649#issuecomment-839402869:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1649#issuecomment-839402869,1,['test'],['test']
Testability,"> I wasn't specific about time because I wasn't sure. I often find myself spending way longer on PRs than I initially anticipate so I'm generally not very good at assessing these things lol. ok ok! Here's a rule of thumb: a bugfix or refactor is the least committment, because you can get away with no new tests or docs. A new _feature_ takes more time because of documentation. One should expect to spend most of their time on docs and tests. If you're spending a lot of time implementing a feature, then either the feature is very complicated / hard, or your workflow can use some improvement. Among new features, different types of features require different amount of effort. This case is one of the easier cases --- it's extending functionality without changing existing functionality, also its fairly niche (at this point) so simple documentation will suffice. The work required to test the feature also has already been partially completed (the script you posted). Other features, like adding new _physics_ will take much longer, because often you'll have to run a full validation case + analysis to assess whether things work as expected. So even if the source code change is small to implement new physics, the validation will take a while and dominate the development effort. If a new feature also requires changing existing functionality / refactoring, that's going to take the most amount of time, because you will probably also have to change existing tests. And many tests are poorly written, so updating test code is a potential rabbit hole.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093480258:306,test,tests,306,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2093480258,6,['test'],"['test', 'tests']"
Testability,"> I wonder if it considers `benchmarks.md` as part of the docs, which is not too crazy a thought. If so, then anyline in your file that is not consistent with markdown standard could cause a problem?; > ; > I would suggest trying viewing your file using a markdown program and see if it complains about any particular lines. Or, are there any lines that don't appear?. `benchmarks.md` is part of the docs: https://clima.github.io/OceananigansDocumentation/stable/appendix/benchmarks/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902884298:28,benchmark,benchmarks,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902884298,3,['benchmark'],['benchmarks']
Testability,"> I would add a minimal test given this feature could change, and hopefully make sure the test doesn't increase CI cost much. Added the most minimal test I could think of and bumped the patch version since this is a bug fix. If everyone's okay with it, I'll merge if the tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2213#issuecomment-1028191876:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2213#issuecomment-1028191876,4,['test'],"['test', 'tests']"
Testability,"> I would need to know the details, but technically bitwise reproducibility is _easier_ with Float32 if you compute in Float64 because you throw away 29 bits that could be different. In practice, however, I don't see a difference between Float32/64 regarding this or accuracy. Both are way too precise for what we're doing anyway?. It's not actually a question of easy vs hard, its a question of whether you need output in `Float64` for `a == b` to return `true`. If you forget that the default is `Float32` then `a` won't exactly equal `b` for this sort of test. But you might think there's a bug in the output writers or your own code before you realize that it's just because you need `Float64` for this particular kind of check. I think one example was computing an average on the fly, versus computing it in post-processing by averaging the output?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3214#issuecomment-1679437354:558,test,test,558,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3214#issuecomment-1679437354,1,['test'],['test']
Testability,"> I'll leave this here for the record. I'm currently experiencing the first significant dynamical difference I've seen so far between the model with and without the pressure separation.; > ; > In a simulation where I'm studying flow past an obstacle (therefore with immersed boundaries) the simulation runs fine on this branch, but (everything else being the same) doesn't finish running on `main`. On `main` the velocities keep increasing, leading to a progressive decrease in Δt to satisfy CFL condition, but the velocities keep increasing despite that, with smaller and smaller Δts. (I believe that's called a slow blow-up?); > ; > So this is a case where the simulation _fails_ on `main`, but is successful in this branch.; > ; > The simulation is far too complex to post here, but I'll try to come up with a MWE that reproduces it. Interesting that is with immersed boundaries. The pressure solver isn't correct in that case so I'm not sure how to interpret that. The error should be smaller on `main` (because it's only the correction to the hydrostatic anomaly that is wrong on `main`). The main uncertainty is how this PR will interact with #3188. We could explore using the new immersed pressure solver on this branch to test that out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682026102:1230,test,test,1230,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682026102,1,['test'],['test']
Testability,> I'll let @ali-ramadhan explain exactly what's the best way to have the `.png` for the convergence tests in without burdening the git history. Meaning you're asking me to wait before merging?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873293954:100,test,tests,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873293954,1,['test'],['tests']
Testability,"> I'm a bit stumped. The error is; > ; > ```; > Test threw exception; > --; >   | Expression: advective_and_multiple_forcing(arch); >   | TaskFailedException; >   |  ; >   | nested task error: BoundsError; > ```; > ; > But I can't reproduce this locally.; > ; > I can fathom a `BoundsError` when we use a high-order advection scheme and our halos aren't big enough. Right now we check the ""model advection scheme"" and the grid halos to catch this issue, but we don't check the forcings. However, the test uses `halo = (3, 3, 3)` right now:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/791bb83e4c49386cc31292bf391762f1cd96bdee/test/test_forcings.jl#L115; > ; > On the other hand, if I time step a model for which I _know_ the halos are too small (locally), I don't get an error (even though I'd like to). So maybe there _is_ something fishy... I don't know how to help, but I am following to see if can learn something and maybe next time I can be a better helper.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1092154547:48,Test,Test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1092154547,3,"['Test', 'test']","['Test', 'test']"
Testability,"> I'm game to try. Should we modify the baroclinic adjustment problem or is there another benchmark you have in mind?. I think it makes sense to keep going with the baroclinic adjustment case!. To change the free surface you'll use. ```julia; free_surface = SplitExplicitFreeSurface(grid); ```. as a keyword argument in the model constructor. I think the default parameters for it make sense but @simone-silvestri can confirm. We can also try with `ExplicitFreeSurface()` which is even simpler, but in that case we'll have to modify `gravitational_acceleration` and the time step to get something that can complete in a reasonable amount of time. Btw if you paste the baroclinic adjustment script you are working with we can also check to make sure it's GPU compatible and possibly help simplify it further.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1950274069:90,benchmark,benchmark,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1950274069,1,['benchmark'],['benchmark']
Testability,> I'm happy with this PR. I think we should merge when tests pass. How about others?. Agreed! Great PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1595916251:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1595916251,1,['test'],['tests']
Testability,"> I'm not quite sure why two outputs would cause issues, but this is a good clue that I can dive into. It's also not tested now so it's plausible there's an issue. I'm not sure if it's just the number of outputs though. When I'm outputting `(tke_k, u)` it works, for example, but `(tke_c, u)` does not. But I guess it's a good start.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-873159691:117,test,tested,117,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-873159691,1,['test'],['tested']
Testability,"> I'm not sure I follow then. Are you saying that you're not sure all the versions in this range are bug-free? That being the case it's best to pin it to a version we know is safe?; > […](#); > On Tue, Oct 5, 2021, 17:05 Gregory L. Wagner ***@***.***> wrote: ***@***.**** commented on this pull request. ------------------------------ In Project.toml <[#1997 (comment)](https://github.com/CliMA/Oceananigans.jl/pull/1997#discussion_r722703022)> : > @@ -33,7 +33,7 @@ Tullio = ""bc48ee85-29a4-5162-ae0b-a64e1601d4bc"" [compat] Adapt = ""^3"" -CUDA = ""3"" +CUDA = ""3.0.0 - 3.3.6"" Note that Manifest.toml pins a specific version. Right, that's why I figured making it specific was the safest option. — You are receiving this because you were mentioned. Reply to this email directly, view it on GitHub <[#1997 (comment)](https://github.com/CliMA/Oceananigans.jl/pull/1997#discussion_r722703022)>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ADEX5KRJ3DYWCNI4IRO6RNTUFNSC3ANCNFSM5FKUICWQ> . Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>. Oh, I just can't remember how far back we're able to go. But if you've gone to the effort to test a whole range of versions then certainly we might as well use a range, since it has the benefits you mentioned! My thought was just that it'd be quick and simple to pin to the version in the Manifest.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1997#issuecomment-935031502:1409,test,test,1409,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1997#issuecomment-935031502,1,['test'],['test']
Testability,> I'm not sure if we've tested but I've assumed there is a performance benefit to the simpler version for regularly spaced grids rather than using the binary search. @simone-silvestri have you ever benchmarked this?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775545546:24,test,tested,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3356#issuecomment-1775545546,2,"['benchmark', 'test']","['benchmarked', 'tested']"
Testability,"> I'm not sure since I've been putting the external value as the condition which is kind of the same as e.g. when we specify a `Gradient` classification that the `condition` is then the value of the gradient and so the boundary point is some function of the `condition`.; > ; > This differs from `Open` as the `condition` doesn't directly specify the boundary value but instead is some function of it. I guess it would be more traditional to call this `Radiating` but I don't think that really explains what is going on.; > ; > It would be _possible_ to write a condition that did this, but I think it would make user specification of exterior values more complicated. I don't really see why it makes user specification more complicated. The discussion is purely about how the user API communicates and organizes information. I would argue that it's logical or clear to ""classify"" a radiating boundary condition as an ""open boundary condition"", because radiating boundary conditions imply that there is a non-trivial external state outside the prognostic domain. This differs from `Value` or `Gradient` which communicate the notion of either a solid wall or fixed external state. The alternative propose is to get rid of `Open` entirely, which we could do. That would be a ""flatter"" design. I think that a possible user workflow might involve 1) deciding what boundary conditions are ""Open"" versus not, and _then_ 2) deciding how to treat the open boundary numerically / physically. For example we might write ""we specify an open boundary with X method"". To me that implies including the word ""Open"" in the user API is important.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1979898600:850,log,logical,850,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1979898600,1,['log'],['logical']
Testability,"> I'm not sure why this fails as the test runs fine locally. You may need to run with `--check-bounds=yes` (the tests run with this option, but it's not default)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1629651601:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1629651601,2,['test'],"['test', 'tests']"
Testability,> I'm ok with removing `Function` here by the way. I don't think we need a test for it --- those tests are in Julia Base (ie we don't need to test that callable objects are possible).; > ; > Why is `<:Function` there anyways?; > ; > The only thing I can think of is that users have to subtype `<:Function` for this to work and maybe that makes code more legible.; > ; > But it's a restriction of `StructForcing` also has to subtype something else. So I would actually be in favor of removing the `<:Forcing` restriction. Note there are many places in the code we allow this. Should I reopen this and remove the test then?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1697389186:75,test,test,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3237#issuecomment-1697389186,4,['test'],"['test', 'tests']"
Testability,> I'm quite confused that this test from `test_seawater.jl` fails:; > ; > https://buildkite.com/clima/oceananigans/builds/15457#018eec75-847a-4323-b8e9-9f104d750297/37-1020; > ; > On tartarus everything passes... OK I can reproduce the fail on tartarus. I'm on it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2061931757:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2061931757,1,['test'],['test']
Testability,"> I'm really confused with why is stuck now. We drop the doctests so warning or info what would be the problem there...?; > ; > I'm wondering whether our changes provoke long compilation times?. Yeah I'm confused to. I haven't been able to compile these locally so I can't test it locally, but I just changed the `@warn` instances to `@info` and maybe that'll do it. I don't see how the changes introduced here could spur such long compilation times though. Doctests have run for more than a day!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474972098:273,test,test,273,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474972098,1,['test'],['test']
Testability,"> I'm sure you can do it, but I expect the global sort is still necessary. Every source that I've read so far that mentions how to compute it says sorting needs to be done. Everything else seems to be an approximation. The hard part is, of course, to compute the ""unavailable potential energy"", which is the minimum PE of the system. The canonical way to do it apparently is to flatten the array, sort it, and then put it back into the original shape. In Python this can be easily done with (using `b` instead of `ρ`). ```; PE_min = np.sort(b.data.flatten()).reshape(*b.shape); ```. (disclaimer: I haven't tested if the result is exactly correct, but it should be along those lines.). I will have to program this diagnostic very soon and I'm thinking of doing it using `KernelComputedFields` (and then putting it up on a repo). My question is: what's the sorting/reshaping method that works for GPUs?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1297#issuecomment-768786372:606,test,tested,606,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1297#issuecomment-768786372,1,['test'],['tested']
Testability,"> I'm thinking about updating `benchmarks.md` with the new benchmark result tables and graphs. Should I do it now or wait until the docs get refactored?; > It's only a single file in the appendix section, but I'm not too sure how me opening a PR on it now to update it will affect the grander refactoring plan. As @glwagner said, this refactoring is a long term plan. I think running new benchmarks now will definitely be a positive change and (imo) a great contribution to the docs ;)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880742532:31,benchmark,benchmarks,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880742532,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"> I'm wondering why the mg preconditioner seems to have almost no effect on the heptadiagonal solver on CPU. I think this just means the multigrid preconditioning is very similar to the ILU preconditioning that is the default for the heptadigagonal solver on CPU. I believe it would outperform a non preconditioned conjugate gradient solver, perhaps I should also run those tests?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2753#issuecomment-1258975772:374,test,tests,374,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2753#issuecomment-1258975772,1,['test'],['tests']
Testability,"> I've added a test for this in `test_dynamics` but not sure if that's the right place for it, or if we even want a test.; > ; > I haven't tried the test on GPU either so suspect it may fail. I think a validation case would be appropriate. Ideally we would run some kind of convergence test but we don't have capacity for that now I think. The validation case could go here: https://github.com/CliMA/Oceananigans.jl/tree/main/validation/advection",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1493405980,4,['test'],['test']
Testability,"> I've also offered to help configure testing on our systems, if someone wants to provide what is needed to integrate with slurm. https://github.com/CliMA/slurm-buildkite is what is being used IIUC. . Oceananigans doesn't use this afaik, but instead just uses runners on a private compute node.; Looks like me, @glwagner or @charleskawczynski have the right priviliges to create an agent token.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328798736:38,test,testing,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328798736,1,['test'],['testing']
Testability,"> I've now had a play trying to wrap VkFFT with https://github.com/JuliaInterop/Clang.jl/tree/master but it is proving difficult given my inexperience with C.; > ; > Does anyone working on Oceananigans have experience doing that sort of thing?. Could be worth asking on julia slack! You'll have to ship an independent wrapper package (eg `VkFFT.jl`) and figure out how to precompile the binaries, right (so we can install everything from the REPL)?. Could be good for this PR to focus on getting explicit free surface to work, then build up the rest of the features after that. Doing this for real will also require figuring testing out I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1735314503:625,test,testing,625,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1735314503,1,['test'],['testing']
Testability,"> If I understand this issue correctly, we are facing a basic trade-off between (compiler?) performance and the use of convenient but complicated abstraction objects?. It's a hardware limitation, really. The compiler could anticipate though, e.g. by not passing very large objects by value, or by providing an escape hatch (like the `Ref` suggestion in https://github.com/JuliaGPU/CUDA.jl/issues/267). You can experiment with this yourself, by changing which arguments get tagged `byval` in https://github.com/JuliaGPU/GPUCompiler.jl/blob/master/src/irgen.jl#L607, and changing the logic that packs arguments in https://github.com/JuliaGPU/CUDA.jl/blob/master/lib/cudadrv/execution.jl#L8-L37 accordingly (to pass a pointer to a pointer instead of a pointer to a value).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/746#issuecomment-655304824:582,log,logic,582,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/746#issuecomment-655304824,1,['log'],['logic']
Testability,"> If I want to test out multi-region nonhydrostatic simulations on a GPU cluster with immersed boundaries, is my best bet to start from [validation/multi_region/multi_region_les.jl](https://github.com/CliMA/Oceananigans.jl/blob/ss/multi-region-nonhydrostatic/validation/multi_region/multi_region_les.jl) in this PR and just add something like; > ; > ```julia; > grid_with_bump = ImmersedBoundaryGrid(grid, GridFittedBottom(bump)); > mrg_with_bump = MultiRegionGrid(grid_with_bump, partition=XPartition(2), devices=(0, 1)); > ```; > ; > from the hydrostatic multi-region internal tide validation to include immersed boundaries?; > ; > Like @mmr0, this is pretty much what I've been waiting for to go all in on Oceananigans 100. Yes, that's how I was able to get this working for me. One note is that `grid.Nx` must be even atm. Another note is that so far no `OutputWriter` works with this, so as far as I can tell the functionality here is very limited. @glwagner @simone-silvestri I tried to merge main here but couldn't really figure out the proper way to do it. Could any of you do it? I wanna try to at least get `NetCDFWriter` working so that I can write results with this PR and analyze them!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1367288146,1,['test'],['test']
Testability,"> If forcing functions are expensive there may be simpler ways to do performance optimization though. For example, we can recommend piecewise linear masking functions for sponge layers instead of tanh or exp. From my tests I think this optimization can shave off 10% of time on the CPU and 25% on the GPU. This isn't bad, but I anticipate launching `Forcing` only where necessary would shave of much more in the situations I mentioned. Although when I originally posted the issue I thought it could be directly implemented in `Forcing`, but you make a good point that it can't, so it might not be worth the effort (at least not right now). I'll close this for now but feel free to re-open it if you think it's worth discussing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3525#issuecomment-2033489092:217,test,tests,217,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3525#issuecomment-2033489092,1,['test'],['tests']
Testability,"> If it doesn't slow the tests down, I'm happy to merge and we can consider changing the optimization level in the future if its warranted. I think being explicit and deliberate about it is a positive change. Looks like this makes a significant difference as the latest build on this PR took 25 minutes 1 second (https://buildkite.com/clima/oceananigans/builds/333). Previous 3 builds (which all passed) took 32~33 minutes:; https://buildkite.com/clima/oceananigans/builds/330; https://buildkite.com/clima/oceananigans/builds/331; https://buildkite.com/clima/oceananigans/builds/332. > We do have a small number of tests that might benefit from faster code, like the pressure solver convergence tests?. Yes but pressure solver FFTs go through the FFTW C library where the `julia -O` flag doesn't affect performance. If we want some performance optimization for specific test sets we can do that, e.g. `-O2` on unit tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1078#issuecomment-712939378:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1078#issuecomment-712939378,5,['test'],"['test', 'tests']"
Testability,"> If the slowdown is different on CPU than GPU that might be an important clue. I haven't had a chance to test this properly on GPUs, although I believe (from experience in a less controlled scenario) a similar slowdown occurs. > Relaxation uses ContinuousForcing so we should probably look into whether the problem comes from that code. It does seem possible there were changes after upgrading to 1.6. I also can't prove/test it right now, but I also think this issue has been there since before 1.6. Basically since I started using Oceananigans. Because I've always had simulations with `Relaxation` and the time it takes them to run has always been pretty much the same (apart from that WENO5 issue we found a couple of weeks ago). Only now I realized that the simulations run _much_ faster without these forcings though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875628358:106,test,test,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875628358,2,['test'],['test']
Testability,> If we can't come up with a good validation test then maybe this script can just serve as a baseline for future channel setups?. We could turn it into an example for the near future! How does that sound?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/771#issuecomment-647674427:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/771#issuecomment-647674427,1,['test'],['test']
Testability,"> If we only fill one point into the halo regions, then we can keep the current advection scheme logic where we limit to second order advection on the boundary. Alternatively though, it seems that we could fill more points and then do ordinary advection. In that case though, we may need a new topology for open boundaries. Not sure. I guess this might be useful for outflows but we would have the problem of having insufficient information if the flow is inflowing, or if we are specifying the values as it might be that the specified inflow is from a much coarser grid and we only have one value to give?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1966758461:97,log,logic,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1966758461,1,['log'],['logic']
Testability,"> In case its of use this is the code I've been checking it with:; > ; > ```; > using Oceananigans; > grid = RectilinearGrid(size=(1, 1, 1), extent = (1, 1, 1)); > model = NonhydrostaticModel(grid=grid); > simulation = Simulation(model, Δt = 1, stop_iteration = 3); > test_sim(sim) = @info ""Sim? $(isa(sim, Oceananigans.Simulation))""; > test_model(model) = @info ""Model? $(isa(model, Oceananigans.AbstractModel))""; > simulation.callbacks[:inter] = Callback(test_sim); > simulation.callbacks[:intra] = Callback(test_model; callsite=TendencyCallback); > run!(simulation); > ```; > ; > And everything should return `true`. We'll need a test like this. I think there are already some tests for `Callback`, so we should add more to that list.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1287065317:633,test,test,633,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1287065317,2,['test'],"['test', 'tests']"
Testability,"> In the case that no directions are periodic, the corner points do not need to be filled. Hmm... I'm wondering --- perhaps corner points need to be filled by both `Periodic` and `NormalFlow`?. Some care is needed if we do convert these kernels. Also, we may have an issue running with non-zero `NormalFlow` and fully enclosed domains with Coriolis. We should probably put together a test or validation test for this case.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/811#issuecomment-691072305:384,test,test,384,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/811#issuecomment-691072305,2,['test'],['test']
Testability,"> In the introduction to Brown et al. (2001), they heuristically suggest adding a correction term to the pressure update that is linearly proportional to the viscosity ν. To me this suggests that perhaps the accuracy of the projection method matters more at low Reynolds number. The forced flow test uses Re = 1 so it's probably in a regime where the accuracy of the projection method matters a lot. I think you are referring to the possibility that numerical discretization error may overcome the error associated with a mathematically incorrect boundary condition. While this could be true at a fixed resolution, it will not be true as resolution is increased indefinitely.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-565766108:295,test,test,295,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-565766108,1,['test'],['test']
Testability,"> Indeed, it is positivity preserving. Not bounds preserving though. And it seems to be too diffusive. That's a big step forward! I know there are ways to iterate to improve the accuracy. I presume your test was the low order option? . Do you think we should try more iterations to improve the upper bound and general accuracy?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1941870914:203,test,test,203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1941870914,1,['test'],['test']
Testability,"> Interesting, thanks for those details! That's odd that there are changes in memory allocation associated with building diagnostics. I don't think there's been changes to `Field` between 0.77.5 and 0.78.0. @navidcy might be able to say more. I think 0.78.0 only upgraded the tests to julia 1.8?; ; Maybe this indicates that the changes are due to changes in the dependencies when upgrading to 1.8?. > I'm also curious why the diagnostics consume so much memory. Are you producing a lot of 3D time averages (which can't be constructed in post-processing?) We've attempted to design the code so that reductions can be performed with minimal memory allocation. 3D diagnostics can simply be calculated from snapshots of the model state, so there's no need to allocate memory (assuming that static memory greatly exceeds GPU memory, this would be preferred). Are we missing a feature to help reduce memory requirements of diagnostics perhaps?. That's interesting. I'm actually also performing a significant amount of 3D averages, as you picked up on. The reason for that is because I want them at a higher frequency than the 3D snapshots that I'm outputting. I'd need a lot of disk-space to output the 3D fields at such high frequencies, so it's a storage limitation issue. That said, I wasn't aware that 3D averages in particular were memory-intensive, so I might rethink that rationale.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300682800:276,test,tests,276,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1300682800,1,['test'],['tests']
Testability,"> Is it a good idea then? Is it worth the effort? We'll have to keep it up?. I'm almost there. I just can't seem to be able to submit the coverage reports!. We don't need to keep anything up! It's just for our own information. Well, if, e.g., we notice from the Codecov report that a big chunk of a submodule is not tested then we can have that in mind and either write some tests or inform users to use that module with caution?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063513131:316,test,tested,316,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063513131,2,['test'],"['tested', 'tests']"
Testability,"> Is that a reason why you define the closure for the coarse_model?. There reason is that at the moment `NetCDFWriter` needs it to get some info on the `grid`. But as @glwagner and I pointed out, it's probably pretty easy to change `NetCDFWriter` to avoid that. I might try a PR soon that makes the simplest change possible and see it tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2091121584:335,test,tests,335,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2091121584,1,['test'],['tests']
Testability,"> Is there a forcing function that computes the ""immersed boundary normal"" direction with associated logic?. Not exactly, but if you're determining a grid fitted normal direction then these boolean functions determine if the location is an interface with fluid on the left and solid on the right or vice versa for all the options. They are only true on a boundary face, not if its a solid-solid or fluid-fluid wall. https://github.com/CliMA/Oceananigans.jl/blob/8b988b34abcfbfd2e0453aedec5916c22b8c35c7/src/ImmersedBoundaries/conditional_fluxes.jl#L48. I don't think it would be hard to use these to set a directional sign for the normal direction, depending on which way you're doing that. If you want the normal direction to be based on the true IB rather than grid fitted, then I don't have anything recent.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100111496:101,log,logic,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100111496,1,['log'],['logic']
Testability,> Is there a way for me to cancel tests so they don't have to run every commit?. You can include `[skip ci]` in the commit message: https://docs.github.com/en/actions/managing-workflow-runs/skipping-workflow-runs,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1240860165:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1240860165,1,['test'],['tests']
Testability,"> Is there a way to test x_f_cross_U et al?. Yes: construct a model with the given feature and then perform a time-step. I guess ideally we would form a giant matrix representing all possible model configurations and time-step them all once. This would be expensive. Maybe we should just loop over each physics specification individually and cross our fingers that there's no bad interactions (I can already tell this would be naive, for example, when a turbulence closure depends on buoyancy).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/616#issuecomment-583371090:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/616#issuecomment-583371090,1,['test'],['test']
Testability,"> Is there any benefit of not exporting everything anyway? I just can’t think of any? Keep namespace cleaner?. I think exporting something inherently tells users it's documented, tested, and okay to use. But there are lots of internal functions that are not documented and probably shouldn't be used by users.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1132#issuecomment-786922634:179,test,tested,179,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1132#issuecomment-786922634,1,['test'],['tested']
Testability,> Is there currently a problem with the GPU tests?. I think yes.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496611001:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1496611001,1,['test'],['tests']
Testability,"> Is this a GPU problem? Is it still there when running on CPUs? We had some very early issues with this. Ali may remember. I may not have been around for those tests! Here we're trying a different numerical algorithm that doesn't separate the hydrostatic and non-hydrostatic pressure. The numerics is different this way --- the non-hydrostatic pressure is in some sense treated ""implicitly"" (eg computed at t^{n+1} in order to advance the velocity field from n to n+1). The hydrostatic pressure, before this PR, was computed explicitly, at time-step t^n. The difference between the two numerical schemes could explain the issue @tomchor's observed (or there could be another bug).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-997111065:161,test,tests,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-997111065,1,['test'],['tests']
Testability,> Is this a GPU problem? Is it still there when running on CPUs? We had some very early issues with this. Ali may remember.; > […](#). The equality failing in the tests happens for both CPUs and GPUs. The artifacts that appear in some simulations were only tested in CPUs I think. So it seems that GPUs aren't to blame here.Both issues (,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-996061267:163,test,tests,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-996061267,2,['test'],"['tested', 'tests']"
Testability,"> Is this one node or multiple nodes?. This is all done on one Satori node. Side note: I couldn't get the benchmark to work with 64 ranks on one Satori node even though it should have 80 ranks per node I think. Also wasn't sure of the best place to immediately benchmark up to 4 ~ 8 nodes (128 ~ 256 ranks?). Probably any old cluster would do but I didn't get a quick `srun -N 8` job allocation so I left it for later. > Secondly you include a memory measurement. Is this residual memory or memory allocated during a time-step?. The memory measurement should be the amount of memory allocated during a single time step as reported by `BenchmarkTools.@benchmark`: generally I think from kernel launches, broadcasts, probably other stuff, etc.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1505#issuecomment-805921539:106,benchmark,benchmark,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1505#issuecomment-805921539,4,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"> Is this still an issue?. Apparently not anymore. I just tested @navidcy 's MWE are everything seems to work fine (on a Quadro GPU and CUDA 3.12 on `main`):. ```julia; julia> grid; 150×150×12 ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded} on GPU with 4×4×4 halo:; ├── immersed_boundary: GridFittedBottom(min(h)=5.00e+01, max(h)=5.00e+01); ├── underlying_grid: 150×150×12 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 4×4×4 halo; ├── Periodic x ∈ [-200.0, 200.0) regularly spaced with Δx=2.66667; ├── Periodic y ∈ [-200.0, 200.0) regularly spaced with Δy=2.66667; └── Bounded z ∈ [0.0, 100.0] variably spaced with min(Δz)=8.33333, max(Δz)=8.33333. julia> maximum(abs, u); 0.0. julia> maximum(abs, w); 0.0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2744#issuecomment-1319159807:58,test,tested,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2744#issuecomment-1319159807,1,['test'],['tested']
Testability,"> Isn't this because of the implicit solve? What grid/model combination are you using?; > ; > You can try testing again using a matrix solver for the non immersed model (if you are using the hydrostatic model). The timings should be similar. They are probably using the FFT-based solver + `NonhydrostaticModel`. It might be worthwhile benchmarking this problem on `main` with immersed boundaries but no drag. That's a more direct measurement of the cost of the drag law implemented here over no drag law, but still immersed boundary. I also suggest setting up a test that evaluates whether the drag boundary condition produces a measurable difference in a simulation that has a steppy boundary (like a constant slope, rather than a flat wall). You want to determine the relative contribution of this explicit drag compared to form drag for your setup of interest before investing lots of effort here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1084047640:106,test,testing,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2275#issuecomment-1084047640,3,"['benchmark', 'test']","['benchmarking', 'test', 'testing']"
Testability,"> It does seem like the additional fix for the boundary condition on GM is essential. I recently tried the 1 degree setup (switching to v0.75.3 of Oceananigans) and saw that there are still stability issues. Given that the solution blows up within 10 iterations it's probably more worthwhile to use the CPU for debugging purposes. It took 50 minutes to precompile on the GPU with TEOS10 + GM + Biharmonic viscosity + Vertical Diffusivity + Convective Adjustment. Also, the CPU is pretty fast at 1 deg resolution! I was able to do 30 day runs. So we may only need GPU for production runs. @sandreza how did you test on the latest Oceananigans? It looks like `main` isn't merged here but needs to be. What do you think about testing CATKE in this setup without GM?. I think the current implementation of GM isn't valid for TEOS10: . https://github.com/CliMA/Oceananigans.jl/blob/c493f19b555c9d36ef8616eca8cec2e4796e60c0/src/TurbulenceClosures/isopycnal_rotation_tensor_components.jl#L59. I believe we need separate functions for each `buoyancy.model`. With a nonlinear equation of state, we have to write this stencil in terms of `thermal_expansion` and `haline_contraction`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1117409246:610,test,test,610,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1117409246,2,['test'],"['test', 'testing']"
Testability,"> It fixes it for CPUs, but I get an error for GPU architecture. It's likely that we need to allow scalar operations due to `==`. I'm planning on trying that tomorrow and I won't merge before it also works for GPUs. (I was wondering if we should add this as a test...). Hm... Whatever we do should work for both CPUs and GPUs. @glwagner and I were thinking about equality between grids at some point. Probably (I'm not sure -- you can double check that), the fix in this PR fails for GPUs, because when in that case when the checkpointer tries to compare the two grids, the one saved on disk has `Arrays` while the other one has `CuArrays`. If that's the case, we need a solution that remedy this and call two grids ""equal"" despite the device they live on. Some of these issue are related or discussed within #1825 and #1998.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945215869:260,test,test,260,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945215869,1,['test'],['test']
Testability,"> It is indeed equivalent in terms of results: when testing tracer advection with a fixed velocity it looks like the profiles are identical for this timestepper in the HydrostaticModel and a NonhydrostaticModel (so probably it is good to have just one rk3 timestepper type); > ; > There is some difference in the nomenclature which I think allows a better understanding of how to split the barotropic and baroclinic modes, because the previous old field are stored and used to restart the substeps instead of having two different tendencies that are averaged at each substep. Ah sorry after I wrote that (a now deleted comment) I realized there were some subtle differences which I noted above.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3874#issuecomment-2441603642:52,test,testing,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3874#issuecomment-2441603642,1,['test'],['testing']
Testability,"> It is what the right panel shows, if I am not mistaken. But the simulation crashed after thousands of iterations. I heard that the PCG solver in Oceananigans has not been widely tested, so that is why I turned to the HeptadiagonalIterativeSolver. Both of those solvers actually use the preconditioned conjugate gradient method. It's also not true --- the `PreconditionedConjugateGradientSolver` has been validated. I'm not even sure it's possible to use the FFT-based preconditioner with the heptadiagonal solver, they have different interfaces. Maybe you worked on that. It's not obvious how to generalize the `HeptadiagonalIterativeSolver` to support `Distributed` architecture, and its also likely more difficult to optimize for immersed boundary methods using an active cells map. We shouldn't waste our time with the `HeptadiagonalIterativeSolver`. If the `PreconditionedConjugateGradientSolver` has issues, we should fix them. It's a waste of energy to work on both.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2071221835:180,test,tested,180,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3552#issuecomment-2071221835,1,['test'],['tested']
Testability,"> It looks like we don't have clarity on whether the Rossby-Haurwitz case solves the barotropic vorticity equation on the sphere, or the shallow water equations on the sphere. What is a good reference for this case?. The reference is ""A Standard Test Set for Numerical Approximations to the; Shallow Water Equations in Spherical Geometry"" https://www.sciencedirect.com/science/article/pii/S0021999105800166. Specifically: ; <img width=""703"" alt=""Screen Shot 2021-04-12 at 1 38 14 PM"" src=""https://user-images.githubusercontent.com/22668662/114437311-5f397c00-9b94-11eb-988d-59d8f64792e1.png"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-817997841:246,Test,Test,246,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1570#issuecomment-817997841,1,['Test'],['Test']
Testability,"> It looks like you have an old version of Oceananigans in your global Julia environment. That's probably what's making the tests fail. I think ideally the global environment should be empty. Here's mine:; > ; > ```shell; > (base) tomas@np900:~/repos/Oceananigans.jl$ julia -e ""using Pkg; Pkg.status()""; > Status `~/.julia/environments/v1.6/Project.toml` (empty project); > ```. Yeap! Everything **is not** fine. :) I bet you are building the docs based on; ```julia; [9e8cae18] Oceananigans v0.54.2 `https://github.com/CliMA/Oceananigans.jl.git#ali/julia-1.6; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1772#issuecomment-869067700:124,test,tests,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1772#issuecomment-869067700,1,['test'],['tests']
Testability,"> It occurs to me that we are not converging to a particular solution as we refine the grid in this case, because this problem has no viscosity. Perhaps we should do a convergence test for a case with finite viscosity. This is likely to help since the velocity is small in the boundary layer, and so will reduce the magnitude of the local correction in a step. > We do introduce grid-scale gradients in the predictor velocity field via masking, so it does seem possible to me that the leakage / pressure gradient error might scale with resolution. It'd be nice to have a solid mathematical explanation for this behavior. I would be interested in such an argument. Other than zooming in on the slowest part of the BL, I'm not sure if/why increasing resolution would reduce the total flux over a fixed interval of time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-868299100:180,test,test,180,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-868299100,1,['test'],['test']
Testability,> It seemed quite easy but now all tests are broken for a weird reason sweat_smile. Very strange. I can't believe this one simple change would cause all these problems. Is there something else going on here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1403898162:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1403898162,1,['test'],['tests']
Testability,"> It seems like [these tests](https://buildkite.com/clima/oceananigans/builds/3559#6c943ada-d478-430c-b154-31160f8a3c3d) are failing because they compare the LES models with some pre-computed solutions:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/test/regression_tests/ocean_large_eddy_simulation_regression_test.jl#L78; > ; > ~If I followed the code correctly, the LES models are looped through here: ~; > ; > https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/test/test_turbulence_closures.jl#L4-L8; > ; > ~which means that those are always run with the default values. Since we're comparing with pre-computed solutions, it'd be good to explicitly specify every closure's parameters, no? The downside is that we won't be able to automatically loop through th closure like this and have to specify them by hand.~. True, we have to regenerate the test data to make this change to the default if we want to continue using the default in the regression test. As a quick fix we could change the regression test to use `C=0.23`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889334946:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889334946,6,['test'],"['test', 'tests']"
Testability,> It seems that you have not performed a convergence test of your numerical model (based on analytical known solutions or manufactured solutions). I suggest that you add this (for instance based on the Taylor Green example); >; > _Originally posted by @funsim in https://github.com/openjournals/joss-reviews/issues/2018#issuecomment-580286479_,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/611:53,test,test,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/611,1,['test'],['test']
Testability,> It was a bathymetry problem... I smoothed it out and it works like a charm... I ll post the animation soon. That is wonderful news @simone-silvestri ! Congratulations on figuring it out. . I see a bunch of changes have happened and some tests are failing. I'll be happy to run something myself tomorrow and see how things work.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1129451506:239,test,tests,239,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1129451506,1,['test'],['tests']
Testability,"> It would be ideal if the nonhydrostatic model could eventually handle data decomposed in z which would eliminate the need for this. This can be achieved by eliminating the vertical integral that calculates the hydrostatic pressure anomaly as in this PR: https://github.com/CliMA/Oceananigans.jl/pull/1910. With this change the whole pressure field is found through the nonhydrostatic solve. This seems like a very minor change to the temporal discretization, but it does cause the regression tests to fail (and I think @tomchor noticed some differences in the solution for ocean problems --- maybe there was a bit more noise?) . That means that maybe we want to keep the _option_ for computing the integral for hydrostatic pressure, but disable it either by default or when using a distributed model. That'd require a bit more work on https://github.com/CliMA/Oceananigans.jl/pull/1910 but not too much I don't think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1106766485:494,test,tests,494,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1106766485,1,['test'],['tests']
Testability,"> It'd be nice to state in writing the justification for writing a separate CPU solver for certain problems. In general, I think that any algorithm that works on the GPU will also work on the CPU. Thus at least in principle the simplest choice is presumably to use the same solver on both architectures. Good point, I've been meaning to set up a script for benchmarking the different pressure solvers. We should use performance benchmarking results to make decisions. > Also, I'd encourage writing this code into as self-contained a submodule as possible. I think there are other codes in the julia ecosystem (not least FourierFlows.jl!) that would benefit from fast and multi-architecture Poisson solvers. We don't have to break this into a separate package just yet, but we do want to ensure this is easy to do in the future. Another good point. As you pointed out some of these solvers depend on the `grid` but if we take that out (which would be trivial) then I think the solvers in PR #589 would be pretty reusable by other packages. Although right now they're pretty specific to staggered grids (except for `BatchedTridiagonalSolver`).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/586#issuecomment-572303204:357,benchmark,benchmarking,357,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/586#issuecomment-572303204,2,['benchmark'],['benchmarking']
Testability,"> It's added under `[extras]` beneath `Plots`... where should I put it instead?. But it's not used by the package nor by the tests, right?. I though we added test dependencies under `[extra]` which included Plots.jl but now that examples are not run as part of the tests (only as part of building the docs) then shouldn't both Plots.jl and Measures.jl be in `docs/Project.toml` and not the main `Project.toml`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1128#issuecomment-724235003:125,test,tests,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1128#issuecomment-724235003,3,['test'],"['test', 'tests']"
Testability,"> It's because there is no method for `arch_array(arch, ::BitArray)`. I ll add it. Thanks @simone-silvestri. I wonder why I wasn't able to reproduce the error locally though. I even tested it on the GPU but everything passed somehow. Seems like tests pass. I just need an approval and I'll merge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1917231125:182,test,tested,182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1917231125,2,['test'],"['tested', 'tests']"
Testability,> It's been resolved in commit [bbfc656](https://github.com/CliMA/Oceananigans.jl/pull/3573/commits/bbfc656582689e35256f0f3f8f93e98c2479c810). Did you test that the issue is resolved with this edit or you assume that @glwagner was right. Because many tests seems to have broken in the PR after this change.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3572#issuecomment-2089782838:151,test,test,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3572#issuecomment-2089782838,2,['test'],"['test', 'tests']"
Testability,> It's extremely confusing to me how this test can pass but #238 does not. Presumably there is a problem with the test in #238.; > ; > _Originally posted by @glwagner in https://github.com/climate-machine/Oceananigans.jl/pull/243#issuecomment-496247657_. My suspicion is that the permutation step is not being done for the GPU. I can rework the test so that the permutation happens (reusing the kernels we already have) and hopefully it'll pass then.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/238#issuecomment-496249086:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/238#issuecomment-496249086,3,['test'],['test']
Testability,"> It's harder to have a mature, friendly user interface without exposing it to users and course-correcting from input. The process of setting up a validation test involves interacting with the interface as a user. So requiring a validation test _does_ expose an interface to users.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1601176203:158,test,test,158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3148#issuecomment-1601176203,2,['test'],['test']
Testability,"> It's just that ""horizontally isotropic"" is not the same thing as ""isotropic"". What is misleading?. sorry, nvmd, I'm explaning myself poorly. Nothing is misleading anymore since I removed the word ""isotropic"" in the last commit. We're good to merge whenever tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2968#issuecomment-1480276183:259,test,tests,259,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2968#issuecomment-1480276183,1,['test'],['tests']
Testability,"> It's not clear whether fields for abstract operations should have boundary conditions as they don't have halos and we don't impose boundary conditions on them. Do we want to generally set their boundary conditions to nothing? I did this for the abstract operations tests and they all passed. We should always use default boundary conditions for `grid` and the location, eg `Face` or `Cell` along each dimension.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589270269:267,test,tests,267,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589270269,1,['test'],['tests']
Testability,"> It's probably easier to compare two models than to compare one model to an analytical solution. Comparison to an analytical solution is tricky, usually we have to invoke an arbitrary tolerance. Good point. Adding 3 separate constant diffusivities is a good idea, but it wouldn't test any LES closures (where the fields have to actually be computed). Do you think that'd be necessary?. Another possibility is to compare a model with `closure=SmagorisnkyLilly(ν=1e-6, κ=1e-7)` against a model with `closure=(SmagorisnkyLilly(ν=0, κ=0), IsotropicDiffusivity(ν=1e-6, κ=1e-7)`. Those should be equivalent, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883734013:281,test,test,281,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883734013,1,['test'],['test']
Testability,"> It's ready @navidcy; > ; > @francispoulin right, that's why it's so hard to understand the problem. It only fails intermittently.; > ; > We have some validation of the shallow water model in the example. I propose that in order to move forward, we should generate a few additional validation tests including some with bathymetry. Once we have those and have analyzed them to ensure we are satisfied with the dynamics, we should then work on designing a better regression test --- one that won't ""pass"" when it should not. Then we can add that better regression test to our test suite, and remove the warning from the shallow water model constructor.; > ; > Probably best to also resolve the issue with the pressure gradient in presence of bathymetry. Maybe a topographic Rossby wave or some such would help build confidence that we are treating non-uniform bathymetry correctly with both of the formulations that we have. Thanks for the explanation. I agree that looking at a topographic Rossby wave is a good test to have. In the case of a small linear slope and small amplitude wave, it should be close to an exact solution so that will be easy. If we want more challenging tests, there are no shortage of those. Lots of tests have shocks and people like to test those but I would suggest avoiding those, as shocks mean the aspect ratio is order one or larger, and that violates the underyling hydrostatic assumption in the model. We could take the Bicklet jet example we have and put it over topography and compute the growth rates. There is a Poulin and Flierl (2005) in JPO that studies that and it would be easy enough to put to get linear stability code to compute the growth rates. That way we also have some theory to support the code. Also, we could look at a wind-driven gyre problem with and without topography. Not a simple test but would help to validate the global simulations that @simone-silvestri did a while ago with the shallow water model. Lots we can do!. I don't remember the ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496:294,test,tests,294,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3050#issuecomment-1498158496,5,['test'],"['test', 'tests']"
Testability,"> It's something to do with GPU, maybe GPU reductions?; > ; > ```; > [2023/05/24 21:41:15.102] INFO Testing grid utils on variably spaced grid....; > --; >   | Grid initialization: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-4/clima/oceananigans/test/test_grids.jl:199; >   | Expression: minimum_xspacing(grid) ≈ FT(π / 3); >   | Evaluated: 0.0 ≈ 1.0471975511965976; > ```. I see this error. But I can't reproduce it. On tartarus it's not happening and I don't have access to Svedrup. So I don't know what to do... :(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080:100,Test,Testing,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1566845080,3,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,> It's weird... time stepping itself should be a test because of the multiple `fill_halo_regions!` both on individual fields and tuples. Here it seems that everything passes also without this fix... without this fix?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069821057:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069821057,1,['test'],['test']
Testability,"> Just a question about implementation:; > ; > It looks like #2538 implemented just one solver, with an optional tridiagonal component, is that right. Why does this PR take a different approach? Wouldn't using a single solver result in less code / duplication of transform logic?. Here, the approach follows the serial implementation quite closely, where we have an FFT solver and a FourierTridiagonal solver. Additionally, the fields of the solvers are tailored to their task; for example, there is no tridiagonal solver in the pure FFT solver. You might argue that we just put nothing if we don't need it, but then we have more ""ambiguous"" fields like eigenvalues that are not needed in the tridiagonal solver and source_term that is not needed in the FFT. I am not convinced that a single solver would lead to less (or cleaner) code. Mostly because the underlying code (constructor and `solve!` functions) is compact and slender enough to justify writing individual functions for different grids (the number of lines in the docstring for the `DistributedFourierTridiagonalPoissonSolver` is comparable to the code related to the solver). I think this improves the interpretability of the algorithm. Maybe an improvement would be writing a unified constructor that would spit out the different solvers. > 2. It might make sense to split the constructor into two parts, so that we can build a tridiagonal solver even when all three directions are regular. That could be useful for testing, for example. . I have added this capability by passing the `stretched_direction` kwarg. > Also note that in terms of operation count the tridiagonal solve is cheaper than FFT... I think, all things considered, the mixed FFT / tridiagonal solve will have basically the same computational cost as the pure FFT solve only for a stretched x direction. The additional transposes required for a y or stretched z direction will completely dominate the cost of the actual operations. As an example, this is a slab decom",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2276030073:273,log,logic,273,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2276030073,1,['log'],['logic']
Testability,"> Just a quick update, zero-viscosity Bicklet jet test case for `VectorInvariant`, `WENOVectorInvariant` (smoothness calculated based on `ζ`), modified VectorInvariant WENO with smoothness based on 2D stencils of `u` and `v`, here called `WENOVectorInvariantZVEL`; > ; > `VectorInvariant` https://user-images.githubusercontent.com/33547697/157745561-a8e5f128-2f4e-42e3-9305-3f624498590b.mp4; > ; > `WENOVectorInvariant` https://user-images.githubusercontent.com/33547697/157745569-41c52e2d-c80b-4d43-b2bf-8a914e8856a2.mp4; > ; > `WENOVectorInvariantZVEL` https://user-images.githubusercontent.com/33547697/157745571-725ea604-8dec-44bd-bd08-dcd70d9ed4b1.mp4; > ; > `WENOVectorInvariantZVEL` seems to perform actually very well compared to a (somewhat) standard ""vorticity-reconstruction"" `WENOVectorInvariant` and compared to the very noisy standard `VectorInvariant` in lie of the fact that; > ; > * Noise is reduced significantly despite dissipation not being too high; > * Agreement between different resolutions is much higher. Both the WENO vector invariant forms look great, and much less noisy than the non-WENO version. Why do you say the third is better than the second? I don't doubt that it us but my eyes don't see much of a difference. . Out of curiosity, have you computed a time series of the energy?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064467000:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1064467000,1,['test'],['test']
Testability,> Just adding here as a small reminder:; > ; > Currently the split-explicit scheme does not seem to conserve to machine precision the free-surface height average (as it should). In the current iteration it only conserves to 8 digits. This is only when it is implemented as a part of the hydrostatic model. In a standalone test it does seem to conserve to machine precision. Once this issue is isolated and fixed I'd say it's good to go for merging. @sandreza are you using AB time-stepping in the standalone test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1014949521:322,test,test,322,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2013#issuecomment-1014949521,2,['test'],['test']
Testability,"> Just do the datadep like the tests do it and do delete anything downloaded to retrigger downloading. Let me know if that helps. @navidcy, you were right. Manually deleting the dowloaded .jld2 file at `~/.julia/scratchspaces/124859b0-ceae-595e-8997-d05f6a7a8dfe/datadeps/cubed_sphere_32_grid_with_4_halos/cubed_sphere_32_grid_with_4_halos.jld2` and forcing DataDeps to download it again solved the issue! Thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2023746490:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2023746490,1,['test'],['tests']
Testability,> Just know that we will want to run some simulations at high resolution without closures in order to test the accuracy of the coarse model + closure. Wouldn't that involve resolving all scales down to the Kolmogorov scale? So this would be for tiny ~1 m³ domains?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/120#issuecomment-472239149:102,test,test,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/120#issuecomment-472239149,1,['test'],['test']
Testability,> Just playing around with benchmarks before I review this PR but I feel like this should error. Make sure you are using the right version of `Oceananigans`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-541318312:27,benchmark,benchmarks,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-541318312,1,['benchmark'],['benchmarks']
Testability,"> Just realized we don't have any tests checking that output attributes were correctly set, but this can addressed in a future PR I think. If it helps, at least with this one I tested on my laptop and it worked okay.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758117471:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1299#issuecomment-758117471,2,['test'],"['tested', 'tests']"
Testability,"> Just so I understand this filtering thing. It doesn't remove the regex-filtered lines from the output; it just doesn't test those lines against the ""prediction"", right?. Yeap!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2083#issuecomment-982048875:121,test,test,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2083#issuecomment-982048875,1,['test'],['test']
Testability,> Just wondering whether RK3 should become the default time-stepper in this PR or in a later PR?. I think once we have convergence tests that use `RungeKutta3` we are ready to make it the default? We also need to add new regression tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/945#issuecomment-692969916:131,test,tests,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/945#issuecomment-692969916,2,['test'],['tests']
Testability,"> Last time @ali-ramadhan tried doing any benchmarking for 2 GPUs we found that the efficiency was around 50%, so it took as long for 1 GPU as it did for 2 GPU. Henry is going to redo these benchmarks and I hope we will have some results by next week. @francispoulin @hennyg888 and @ali-ramadhan let me know if I can help with benchmarks. There are a bunch of silly things around CUDA enabled MPI, nvshmem that I have fiddled with in some other contexts.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-868670488:42,benchmark,benchmarking,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1654#issuecomment-868670488,3,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,> Let me know what else is missing or if we just need a third review to merge. Tests still aren't passing.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2100887245:79,Test,Tests,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3576#issuecomment-2100887245,1,['Test'],['Tests']
Testability,> Let's add tests also?. > And use these functions in examples in place of things like Δxaaf?. For sure. I'm just waiting for us to converge on usage in https://github.com/CliMA/Oceananigans.jl/issues/2058 before I include these changes.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328360111:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1328360111,1,['test'],['tests']
Testability,"> Let's use PreconditionedConjugateGradientSolver with an FFT-based preconditioner (ie the original FFT solver) for this. Can you explain a bit the reason for this choice, just so that I can understand better? At first it seems to me that using a FFT-based preconditioner would still produce Gibbs phenomenon effects in situations where the original FFT-based solver also would, no?. FYI I tested this branch and it's returning NaNs everywhere for me, although I haven't had the time to investigate why.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2780#issuecomment-1284165140:390,test,tested,390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2780#issuecomment-1284165140,1,['test'],['tested']
Testability,"> Like which code? I mean what's an example that benefits from what changed here so I can test it to approve?. This PR supports this kind of code:. ```julia; c = Field{Center, Center, Nothing}(grid); x, y, z = nodes(c); heatmap(x, y, c); ```. The coordinates `x, y` can also be divided by a normalization (say 1000 to convert from `m` to `km`).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3715#issuecomment-2294461513:90,test,test,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3715#issuecomment-2294461513,1,['test'],['test']
Testability,"> Locally I am seeing:; > ; > ```; > Binary operations [GPU]: Error During Test at /home/vchuravy/src/Oceananigans/test/test_abstract_operations.jl:121; > Test threw exception; > Expression: ZeroField() - u == -u; > Scalar indexing is disallowed.; > Invocation of getindex resulted in scalar indexing of a GPU array.; > This is typically caused by calling an iterating implementation of a method.; > Such implementations *do not* execute on the GPU, but very slowly on the CPU,; > and therefore are only permitted from the REPL for prototyping purposes.; > If you did intend to index this array, annotate the caller with @allowscalar.; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] assertscalar(op::String); > @ GPUArraysCore ~/.julia/packages/GPUArraysCore/B3xv7/src/GPUArraysCore.jl:100; > [3] getindex(::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, ::Int64, ::Int64, ::Int64); > @ GPUArrays ~/.julia/packages/GPUArrays/g2pOV/src/host/indexing.jl:9; > [4] getindex; > ```. Ok, I'll take a look",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631:75,Test,Test,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2899#issuecomment-1418343631,4,"['Test', 'assert', 'test']","['Test', 'assertscalar', 'test']"
Testability,> Looking at the logs do you think it'll be more readable if we move the timestamp to the very beginning of the line? I guess since it's using 24-hour timestamps then it'll always be the same character width. Doesn't have to be part of this PR. I think the timestamp coming first would be good. I also think having the LogLevel string be uppercase would also help readability.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/585#issuecomment-568184073:17,log,logs,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/585#issuecomment-568184073,2,"['Log', 'log']","['LogLevel', 'logs']"
Testability,> Looks good and hope the tests all pass.; > ; > Should any new tests be added?. I think we should test that we can use `ContinuousBoundaryFunction` on an auxiliary field and run `fill_halo_regions!` without error. Or better yet show that it produces the right thing.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1859#issuecomment-880639149:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1859#issuecomment-880639149,3,['test'],"['test', 'tests']"
Testability,> Looks good to me. This will be a good starting point for when we want to test the threading efficiency of the code.; > ; > Strange that docs don't build but can't believe it's because of these files. CI was offline yesterday and is just back this morning! Let's restart and see what happens.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884203129:75,test,test,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884203129,1,['test'],['test']
Testability,> Looks good to merge!; > ; > Won't pile onto the reviews except to say it would be good to merge master into this PR and make sure tests pass (if you haven't already) since tests are failing on master: Oceananigans won't even precompile since there's a lingering reference to `SurfaceWaves` somewhere in the hydrostatic model I think. I’ll do that. I don’t know why tests on master fail! I was puzzled also. I merged the make_example script (whose PR tests were OK) and then tests on master broke...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1352#issuecomment-778445530:132,test,tests,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1352#issuecomment-778445530,5,['test'],['tests']
Testability,"> Looks great! I guess we should find an example to this this on. Do you think we should try the example of a rotating bucket flow?. I added a couple of tests and verified that a initially non divergent velocity field (gaussian) diffuses to the mean value. I guess we're ready for more complex testing, the rotating bucket sounds good!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2645#issuecomment-1178211104:153,test,tests,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2645#issuecomment-1178211104,2,['test'],"['testing', 'tests']"
Testability,> Looks like a good idea but I see that some tests were not successful?. Tartarus is on the struggle bus it seems,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2238#issuecomment-1034086099:45,test,tests,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2238#issuecomment-1034086099,1,['test'],['tests']
Testability,"> Looks like a good interface to me.; > ; > But is it on purpose that there is only support for background fields in the `NonhydrostaticModel` and not for the `HydrostaticFreeSurfaceModel`?; > ; > @liuchihl will test it in our configurations. Well yes, it's substantial effort to support background fields. So we implemented it in the nonhydrostatic model first. Nobody has requested having background fields for the hydrostatic model. It's not impossible but might require some thinking if it's going to work with the more complicated turbulence closures (like CATKE or k-epsilon) that sometimes get used for hydrostatic applications. Since the nonhydrostatic model is fast (at least on one GPU) the hydrostatic model is mostly important for simulations on the sphere (although this statement needs to be evaluated more carefully for complex domains when we have a proper nonhydrostatic solver).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2206898460:212,test,test,212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2206898460,1,['test'],['test']
Testability,> Looks like it worked; thanks for the write up!. You're welcome! It looks like there's still some non-logging related changes in the github diff view though?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-550190612:103,log,logging,103,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-550190612,1,['log'],['logging']
Testability,"> Looks like this is a bad idea, so I'm closing. I'm not sure it's a bad idea. I've been having some issues with spurious waves in rotated domains and I'm thinking this might be the cause. (Since we're modifying the direction gravity is acting on, but we're still integrating the pressure in the model's z direction.). I still haven't been able to test my rotated domain on this branch, so I'm not sure. But if indeed this is the culprit, it might be a good idea to have a flag that turns the hydrostatic separation off for rotated domains.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-1480029672:348,test,test,348,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-1480029672,1,['test'],['test']
Testability,"> Looks slightly different from 2.5 in; > ; > ![image](https://user-images.githubusercontent.com/15271942/101569197-010c4a80-39a2-11eb-8826-8702648d9ae8.png); > ; > from; > ; > https://crd.lbl.gov/assets/pubs_presos/AMCS/ANAG/O4AdvDiff.pdf; > ; > The distinction is that you're trying to approximate the _derivative_ of a cell-averaged quantity at the face-averaged location, rather than merely interpolating a cell-averaged quantity to face-averaged locations. I think. Thanks @glwagner that is a great resource. Unfortuantely, my formula was only appropriate for Finite Differences and not Finite Volume. I will read through this work right now to understand where the formula comes from. But it seems like the two formulas you quoted would be the right ones for computing the derivatives and averages in a FV context, to yield 4th order. . This PR doesn't necessarily need this but if it's only a few lines of code, then why not include it. I hope to be able to make the appropriate changes this morning and do a bit of testing, to convince myself that we do have 4th order accuracy on the pressure terms.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741810464:1023,test,testing,1023,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741810464,1,['test'],['testing']
Testability,"> Luckily, I found a reliable way to get NaNs immediately is to set both reltol and abstol to zero and maxiter to more than a thousand. The purpose is to test the numerical stability of the iteration method. I think this makes sense. When the residual is reduced to near machine precision then I think this is when the present instability is exposed, which occurs when the search direction is essentially a constant. I wonder if its possible that the instability was observed in the original simulations when, for some random reason of the flow configuration, the CG solution converged especially fast (thereby exposing the instability).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2420734546:154,test,test,154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3831#issuecomment-2420734546,1,['test'],['test']
Testability,"> Maybe I'm personally quite picky about specifying outputs and output file names, so I might always end up with verbose boilerplate for output writing. Totally and to be clear, when we think about the economy of an interface, we are thinking about prototyping, illustrating, testing, not necessarily ""production"". I think ""production"" places fewer demands on the user interface and what we have now is ok for production. This PR mainly improves the small stuff. Also arguably it's more helpful for experienced than new users. > I think the name output! is a bit vague in what it does. Does it just output the current state of the simulation? Would add_output_writers! be clearer and align more closely with existing Oceananigans nomenclature? For the same reason, I'd suggest keeping add_callback! over renaming to callback!. I agree that with ""add"" and ""writer"" the meaning is cemented. I think it's important to recognize trade-offs though, because there is a limit to the benefit of being explicit (when things become hard to read or understand). I think in this case I accept that `output_writer!` is probably better than `ouput!`. I think prepending `add_` has a more marginal benefit (and is a little ugly) and that context is really what drives understanding of `callback!` / `add_callback!` (eg a schedule, etc). But this is certainly open for discussion. > Love this idea! Hoping that you can also pass e.g. (surface=(:, :, k), zonal=(:, 1, :), meridional=(1, :, :)) to get sliced_surface, sliced_zonal, and sliced_meridional. Yes for sure! In that example the keys ""xy"", ""xz"", etc would be names appended to the filename prefix. . > I think the default should be overwrite_existing = false just because the cost of overwriting and losing data can be very high. Do you run with this option? Curious because I never use it. I think the cost of losing data is actually usually very small, it's only in a small 1% of cases that the data is valuable. I think that's actually the key insight behi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3793#issuecomment-2376911364:276,test,testing,276,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3793#issuecomment-2376911364,1,['test'],['testing']
Testability,"> Maybe a better question (which might be silly): is there any reason why benchmarks need to have a different benchmark from the main repo?. Because our benchmarking scripts have additional dependencies that are unrelated to the source code, like `BenchmarkTools`, `BSON`, `PyPlot`, `PrettyTables`, `PkgBenchmark`, `Plots`, `DataFrames`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090378767:74,benchmark,benchmarks,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090378767,4,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark', 'benchmarking', 'benchmarks']"
Testability,> Maybe put in a PR with some tests in test_field.jl? I can fix this in a bit. Created one here: https://github.com/CliMA/Oceananigans.jl/pull/2392. Thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2391#issuecomment-1082183488:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2391#issuecomment-1082183488,1,['test'],['tests']
Testability,"> Meh, the error is mysterious. I'm going to try and merge some fixes this behind-the-scenes. Hopefully my fixes will make your tests pass @gaelforget and then we can merge. You don't need to do anything --- thanks again for the PR. Sounds good. Thanks. ps. Took a quick look at the error (which you might have already solved in #748) and in `test/`. Maybe a clue is that it's the only call with `module_suffix` set to `string(typeof(arch))` but maybe not -- I have not tried to look at the generated `ocean_wind_mixing_and_convection_example_test.jl`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/747#issuecomment-626770024:128,test,tests,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/747#issuecomment-626770024,2,['test'],"['test', 'tests']"
Testability,"> Might be good to see if this speeds things up before merging too. I agree. Now that the tests all pass, @henry888, would you mind giving this a try when you have a chance?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-889297504:90,test,tests,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-889297504,1,['test'],['tests']
Testability,> Mind if I ask what this PR does? Sorry that i don't quite follow from looking at the code. Not sure about the code but judging from the PR name I think it's going to generate an estimate of code coverage (eg the percentage of lines of code in the package that are tested during CI).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1062842793:266,test,tested,266,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1062842793,1,['test'],['tested']
Testability,"> Much relieved to see this test. I'm sad that my old test that used dispatch had some bug, but it's academic at this point since we hope to unify the solvers soon. I think you just had to permute the indices but yeah, and we can go back and use your test once they're unified.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/246#issuecomment-496309652:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/246#issuecomment-496309652,3,['test'],['test']
Testability,"> Multiple forcing is tested but all the forcing tests just check that they don't error, so I expect in this situation the advective forcing would have no effect but wouldn't error.; > ; > Perhaps all of the forcing tests should really have something checking that they are changed, the forcing a could all just be set to return 1 and then we check that all of the tracers that are forced are not zero at the end?. Mm yeah I can extend the existing test to pass only if the tracer distribution changes after that time-step is taken.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715595234:22,test,tested,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1715595234,4,['test'],"['test', 'tested', 'tests']"
Testability,"> My primitive logic: for a flux boundary condition, bc.calc() ""calculates"" the flux at the given grid point and time-step. For a ""value"" boundary condition, bc.calc() ""calculates"" the value of the boundary condition at the given grid point and time-step. But I agree it is a weird name. What is a better name?. It may not stand up to mathematical rigor but I still like `bc.impose()`. In your two examples, I feel like a flux is being _imposed_ and a value is being _imposed_. If `bc.calc()` calculates a number then it should be used as; ```julia; something = bc.calc(args...); ```; while `bc.impose` should be used like; ```julia; bc.impose!(args...); ```. But now we're just arguing semantics instead of what's important. > There are two issues: the backend, and the user interface. Maybe the title of this PR is confusing, because I think it's primarily about the backend. I think so too. API suggests more front-end. I also think discussing these dense and complicated issues (e.g. this PR and #120) among multiple busy people is difficult on GitHub. Little far ahead but maybe the Monday CliMA meetings are a good place to get high-level feedback?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-472250439:15,log,logic,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-472250439,1,['log'],['logic']
Testability,"> Nah…; > ; > Every preview is 200MB of load on the repo I then have to clean and it’s not that easy to clean up a repository’s history. I’d rather I make the PR twice or built the docs locally :). Oof, didn't know that. Sounds fair :). I'll approve it, although we probably have to restart the failed GPU tests",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1409061309:306,test,tests,306,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2886#issuecomment-1409061309,1,['test'],['tests']
Testability,"> New log level should be enough if we just need flat per-iteration timings to time a few blocks for a few iterations. Are you thinking of just logging raw `@time` data?; > ; > I'm not sure if we need anything more than a new log level, but I imagine some of the benefits of using a package like TimerOutputs.jl would make the timer blocks much more useful for debugging and for users. It allows for nested timers and produces a very nice table summary at the end which includes number of calls and average time/memory allocations.; > ; > This could also be useful for users wishing to time their simulations to figure out how much time is being spent on I/O vs. in kernels vs. solvers vs. callbacks, etc. I guess I also see timers as a debugging tool for users. Could help be figure out cluster filesystem issues or figure out whether Oceananigans or my coupled model (via callback) is the bottleneck.; > ; > Otherwise if the timers are just a developer debugging tool that dumps timing information, that's useful but it might not be useful for timing real-world scripts/simulations since the log would fill up with a huge number of lines that can't be interpreted without further processing.; > ; > Here's an example of it in use: [JuliaGPU/CUDA.jl#149 (comment)](https://github.com/JuliaGPU/CUDA.jl/issues/149#issuecomment-461943376) (CUDA.jl has been using TimerOutputs.jl for a long time I think); > ; > TimerOutputs.jl is easy to use since you just add `@timeit` blocks but that does add some noise to the code (not sure if more or less than using a timing log level). @ali-ramadhan I was thinking timing would be useful for general use around figuring out where time is going in day-to-day modeling - so some summary table as in TimerOutputs.jl would be a great thing to aim for - I think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-887967029:6,log,log,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-887967029,5,['log'],"['log', 'logging']"
Testability,"> Next week I will work on getting higher order methods working for ShallowWaterModels. That would be awesome!. Does it also make sense to work on producing some validation tests for `ShallowWaterModel` for a next PR? While we can test that operators are implemented correctly in isolation, we won't understand whether everything is integrated into `ShallowWaterModel` until we have some dynamics tests and larger validation runs that reproduce results in the literature, right? Or do we need these higher-order operators to use `ShallowWaterModel` at all?. To validate the generic implementation of higher-order operators, I think we can implement high-order diffusion and reuse some of the convergence validation tests for `IncompressibleModel`, like the forced flow fixed slip test. When `ShallowWaterModel` has similar validation tests we can also do the same for `ShallowWaterModel`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-744016928:173,test,tests,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-744016928,6,['test'],"['test', 'tests']"
Testability,"> Nice find! Fix makes sense to me so I'm approving.; > ; > If it's non-trivial to design a good test for these open boundary conditions, then to me it make sense to merge this obvious fix and discuss how to more thoroughly test in a separate issue or PR. I think creating a test is non-trivial, but modifying the existing validation script to be more expansive is trivial since I pretty much have the code ready. Should I just do that?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3854#issuecomment-2430095333:97,test,test,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3854#issuecomment-2430095333,3,['test'],['test']
Testability,> Nice one. Should we benchmark anything just to make sure this hasn't affected performance?. That's a good idea!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-971712282:22,benchmark,benchmark,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-971712282,1,['benchmark'],['benchmark']
Testability,"> Nice work! I'm curious about the criteria. Should it be something like; > ; > ```julia; > dt = 10 * eps(dt) * sim.dt; > ```; > ; > ? Or does it have to be larger than that (hence the factor 1e10). I actually don't know what the proper criterion should be. With the one you proposed, the error doesn't go away in this example since the tiny time-step is about `1e-12`, but `10 * eps(dt) * sim.dt` come out to be about `1e-13`. If we use `100 * eps(dt) * sim.dt` then it works. But I don't yet know how much of this will generalize to other, more complex simulations. I still have to test these on my own simulations to see what works. > It'd be nice not to have to define `next_actuation_time` for every schedule... it doesn't really make sense for `WallTimeInterval` either. Plus, we want users to be able to provide custom schedules (since they only need to be a function of `model` that returns true/false) so that people can trigger output / action using interesting custom criteria... Yeah, agree. I'm not sure of a good workaround here though. Do you have suggestions?. For the time being we can just set a fallback method as `next_actuation_time(scheduke) = Inf` I guess? (Similar to what I did for `IterationInterval`. Also, nice to see that tests pass and nothing is breaking :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3606#issuecomment-2130431035:584,test,test,584,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3606#issuecomment-2130431035,2,['test'],"['test', 'tests']"
Testability,"> Nice! Do you have an image that illustrates the problems at low resolution, ie a plot that reproduces the Adcroft result?. Yes. Here they are. I improved the visualization on the latest commit and pushed it right now. The types of immersed boundary and plot are included in the filenames. The discrete version of the topography (i.e. the Gaussian bump for this test case) is detectable only for the heatmaps. https://github.com/CliMA/Oceananigans.jl/assets/12926768/f94a6b92-cb5e-4197-9e5b-bd8ea1bad42a. https://github.com/CliMA/Oceananigans.jl/assets/12926768/c2d37eb9-931e-4efa-aa99-c113e38bf393. https://github.com/CliMA/Oceananigans.jl/assets/12926768/38771b36-e030-4877-8c9f-61944cd9aefc. https://github.com/CliMA/Oceananigans.jl/assets/12926768/baf6c24b-3fc1-4f4e-aec7-17826bd4da61",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1593757333:363,test,test,363,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1593757333,1,['test'],['test']
Testability,"> Nice!; > ; > Should we implement this test for OrthogonalSphericalShellGrid instead, considering we are going to deprecate LatitutdeLongitudeGrid?. That's already implemented for OSSG + other similar tests. https://github.com/CliMA/Oceananigans.jl/blob/29a99a0c235b2f6bf0cec525f2249125ad254ccc/test/test_grids.jl#L934-L955",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3240#issuecomment-1697336901:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3240#issuecomment-1697336901,3,['test'],"['test', 'tests']"
Testability,"> Nice, thanks for testing that. I found the second bug (which was created by the bugfix). I think it should work now.; > ; > This could allow us to eliminate the hydrostatic pressure from the nonhydrostatic model and thereby save allocating one field. @simone-silvestri . Apparently all our prior tests were flawed because of this bug. We still need the hydrostatic pressure integral in the hydrostatic model. Ha, you beat me to the punchline. But yes, agreed!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518046150:19,test,testing,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518046150,2,['test'],"['testing', 'tests']"
Testability,"> No, I did; > ; > ```; > julia -O0 --color=yes --project -e 'using Pkg; Pkg.test()'; > ```; > ; > which I took from buildkite.yml. Ah ok. Using `Pkg.test()` sets `--check-bounds=yes`. I wasn't sure if you were running `test_timestepping.jl` individually.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1557704595:77,test,test,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1557704595,2,['test'],['test']
Testability,"> No, on main all tests are done in O(1h)… :( But it’s strange. Simulation tests take 14 min normally:. https://buildkite.com/clima/oceananigans/builds/15704#018f5a18-1775-4a66-b63d-d908d95f9713. something fishy",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2103046467:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2103046467,2,['test'],['tests']
Testability,"> No. I have no idea why that happened. What can we do to remove them?. Looks like you already did. I would usually try something like `]update Printf` which should remove orphaned packages from `Manifest.toml`. > We can. Such a test may end up running on the CPU via scalar operations though... ?. Ah ok, maybe not a great idea then as it would slow testing down. I guess the computations are tested on the GPU which is good enough. > Note that `Computation` allows the user to specify their own temporary array. `model.pressures.pHY′` is used as a default when `model` is passed to `Computation` in place of an array or field. Ah nice. I guess I was thinking in case `model.pressures.pHY′` disappears one day. > I think just a few will suffice for shallow and deep operations trees, perhaps choosing common use cases to ensure that using abstract operations rather than hard-coded kernels doesn't result in a big performance hit. It will be hard to interpret the results of a benchmark on a deep tree anyways, because we won't have an alternate implementation to compare against. Future performance optimization could use some kind of tree analysis utility + shared memory to accelerate kernels. . Hmmm, I was thinking it would be good to benchmark each operator at least once but I suppose if `sin` is fast then we can assume `cos` and `tanh` will also be fast. Shallow and deep trees makes sense. True we may not have an alternative implementation but we can compare the deep and shallow tree computations to get an idea. I find comparing the computation time to the time per iteration (~30 ms for 256^3) to be helpful. > Why extensive? I'm just not sure what to write: the rules for how things work are already all there in the docstrings. Maybe examples are what's needed?. Didn't mean to suggest that we need extensive documentation right away. Having examples of what's possible will be really useful, but we can build up a collection of good examples over time. PS: Think you missed half my c",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-545887965:229,test,test,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-545887965,3,['test'],"['test', 'tested', 'testing']"
Testability,"> Not sure what ""squash and merge"" means . Ah it's one of the three merge options, e.g. ![image](https://user-images.githubusercontent.com/20099589/117980914-70e08180-b302-11eb-9179-9e8cbad457a3.png). where it combines all the commits into one commit then merges. Then intermediate changes (like a file that was created then deleted) do not enter git history. > I deleted the file locally and then wanted to push the change but couldn't. If someone can tell me how to delete it I'm happy to do it. That should be all it takes... What error does git produce? I can also try locally. > Also, I see that the tests pass so my use of `Polynomials` presumably worked?. Ah I don't think `plot_rates_convergence_advection.jl` is actually run as part of CI right now. We could add it in this PR if you're interested. I think we'd want to actually add it to the validation pipeline (not the main pipeline) so we would add a new test set in https://github.com/CliMA/Oceananigans.jl/blob/master/test/test_convergence.jl and add a new build step in https://github.com/CliMA/Oceananigans.jl/blob/master/.buildkite/validation-pipeline.yml then it would show up in these builds with plots, e.g.: https://buildkite.com/clima/oceananigans-validation-experiments/builds/208. > Anything else that people would like done before someone approves this PR?. I think it looks good to merge, just without the extra image file!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1650#issuecomment-839764128:605,test,tests,605,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1650#issuecomment-839764128,3,['test'],"['test', 'tests']"
Testability,"> Note on testing for this issue: the output is often correct for the _first_ evaluation of the average. Subsequent evaluations seem to produce the error. Just FYI, I was able to reproduce @ali-ramadhan's results exactly with his MWE. And I also did it with only one run of `simulation`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1767#issuecomment-870902088:10,test,testing,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1767#issuecomment-870902088,1,['test'],['testing']
Testability,"> Note that tests will fail on dev/nightly builds (Julia 1.2) because something changed which broke Cassette (which GPUifyLoops depends on). Pushed a fix for that this morning, and also tagged GPUifyLoops v0.2.1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/147#issuecomment-479513151:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/147#issuecomment-479513151,1,['test'],['tests']
Testability,"> Note there is already substepping implemented for CATKEVerticalDiffusivity and TKEDissipationVerticalDiffusivity. I hadn't realised that, I'll look into it before I work on this again. > What are the challenges? For the closures this feature was relatively straightforward to implement. But this PR seems quite large. Most of the changes are separating the bgc transitions from the rest of the tendencies which isn't that hard but is just quite a lot of lines. > For many reasons it is often better to open the PR _first_ (better yet, an issue that defines the problem, so we can discuss designs), rather than at a late stage where feedback is difficult to manifest.; > ; > Also, rather than supporting this generally for all time-steppers, I would argue that the correct approach is to implement this for just one model and one time-stepper. Once the proof of concept is well developed and tested, it can be applied more broadly in a separate PR. Yeah, this makes sense, when I started doing this I thought it would be relatively simple, but then realised it's not. I would probably advocate for us to take this as a first draft and start again after discussion if this is something we go forward with.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2451830235:893,test,tested,893,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3888#issuecomment-2451830235,1,['test'],['tested']
Testability,"> Now that you have a basic example that illustrates an open boundary condition implementation with no matching scheme, you are in a position to implement a non-trivial matching scheme, and demonstrate its benefit. If the matching scheme has some benefit, then we are motivated to support it by adding source code and tests... Okay I started doing this and realised that the other source code change we need is some way to update the boundary conditions as discussed a while ago. Are you happy with how I've done this? It's a line in `update_state!` just before `fill_halo_regions!` but I guess it could be moved into `fill_halo_regions!`. I'll also add it to the hydrostatic model for future use.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2027527300:318,test,tests,318,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2027527300,1,['test'],['tests']
Testability,"> OK, the idea is that tests should pass in this PR but fail here: https://github.com/CliMA/Oceananigans.jl/tree/ncc/test-show-on-gpu; > If that happens I am merging. @glwagner, @ali-ramadhan ?. That’s the case!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-841718670:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-841718670,2,['test'],"['test-show-on-gpu', 'tests']"
Testability,"> Ok I fixed that. Probably we should use a Field rather than ones for the test and examples, because it automatically adapts to GPU, distributed, etc, so it's a bit better. But I thought the whole idea is to be able to provide an `Array` for forcing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1987930274:75,test,test,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1987930274,1,['test'],['test']
Testability,"> Ok, I will review! Except, tests are failing? Also should we merge main?. Thanks!. And yeah there was a typo in my last commit but it should be fixed as tests should be passing. I also merged main in commit [479056a](https://github.com/CliMA/Oceananigans.jl/pull/2752/commits/479056a24db8e510ba057ff79df82f567f85c03a) (yesterday) so we should be good regarding that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1398871899:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1398871899,2,['test'],['tests']
Testability,"> Ok, closing in! The last test is without an immersed boundary but with a bathymetry (you need to cap the bathymetry to something like -50m); > ; > If this works then we can focus all the attention to the immersed boundary. Just to be clear, the test I posted today was with an immersed boundary (continents) and a flat bottom. The previous test, what we called aquaplanet, was with no immersed boundary and boring flat topography. Could you clarify as to what you are suggesting? I was using the immersed boundary and am a bit confused. Sorry.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2073142216:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-2073142216,3,['test'],['test']
Testability,"> Ok, let me know what you think. Looks good! From my local tests it seems like even these tests are passing: https://github.com/CliMA/Oceananigans.jl/blob/87f8093477104f112c107de1b3f0e677aa2498d1/test/test_output_writers.jl#L56-L57. Although I thought they had to fail under this new scheme... I'll bump a new version since this was a bug, but If tests indeed pass (and you're okay with it) I think we should merge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127173273:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127173273,4,['test'],"['test', 'tests']"
Testability,"> Okay finally tests passed!; > ; > @navidcy I tried restarting the tests over and over (honestly more than 10 times over the past few days) and they always failed. I could only make them pass this morning when I restarted them one at a time. That is, starting one, and only restarting the next failed test when the previous one had fully run.; > ; > So maybe the variability we see in tests has to do with different processes trying to access the same resources... ?. Yes it is a race condition",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2223710307:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3648#issuecomment-2223710307,4,['test'],"['test', 'tests']"
Testability,> On Satori using stupidly large meshes gives 85% - 89% efficiency going from 1 to 2 GPU for the `multi_region_turbulence.jl` benchmark (Note `1440×600×48` is the size of the 1/4 degree simulation) Unfortunately the efficiency decreases on a larger number of GPUs... we definitely have to fix the scaling; > ; > #### Strong Scaling; > Grid size	Grid	GPUs	wall time	efficiency; > `1024×1024×100`	`RectilinearGrid`	1	3.4 minutes	100%; > `1024×1024×100`	`MultiRegionGrid`	2	1.9 minutes	89.5%; > `1440×600×48`	`RectilinearGrid`	1	1.4 minutes	100%; > `1440×600×48`	`MultiRegionGrid`	2	49.2 seconds	85.4%; > `1440×600×48`	`MultiRegionGrid`	3	38.8 seconds	72.2%; > Going to smaller meshes than these hampers the efficiency incredibly. I think there might be a lot of low hanging fruits to optimize multi GPU. Nice results though! Is this for implicit or explicit free surface?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116681325:126,benchmark,benchmark,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116681325,1,['benchmark'],['benchmark']
Testability,"> On a second note, do we want to show the benchmark results with WENO5 or with no specified advection scheme?. Oh now I saw that. I think anything is good, but just make sure you clarify how these results were made and on what machines and point to the script that produced them.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877447462:43,benchmark,benchmark,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-877447462,1,['benchmark'],['benchmark']
Testability,"> On checkpointing, looks like the current Checkpointer will work as it just serializes the entire model.boundary_conditions struct which isn't a problem if it contains no functions. Although this does suggest that we need at least two extra checkpointer tests: 1. one where checkpointed boundary conditions are used, and 2. one where a boundary condition contains a function that we have manually restore. This can be the focus of another PR. Yes, because the keyword argument can be either a `SolutionBoundaryConditions` or a `ModelBoundaryConditions`, checkpointing works properly. We do need to extend the checkpointer to allow the user to pass in forcing functions and boundary conditions to `restore_from_checkpoint` in the case that these objects contain functions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/405#issuecomment-531492709:255,test,tests,255,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/405#issuecomment-531492709,1,['test'],['tests']
Testability,"> On codecov --- the recent for the poor marks is because we basically will not test `Computation`. This makes sense as we are having trouble with CI and we also want to nuke these features. However, the NetCDFOutput writer still has some functionality that uses `Average` (which in turn has an interface to `Computation`) so I'm not sure we can get rid of them just yet. Sounds good to me to skip those tests. We should just be careful not to tag a new release until things have settled.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/931#issuecomment-691045772:80,test,test,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/931#issuecomment-691045772,2,['test'],"['test', 'tests']"
Testability,"> One problem is that `∫ᶻQ.u` is a reduced field so `maximum(∫ᶻQ.u)` excludes points at `i, j` corresponding to immersed cells at `i, j, k = 1`. I'm wasn't setting the `u` velocity at `i, j, k = 1, 1, 1` but rather at `i, j, k = 45, 1, 3` and now, after [1638f39](https://github.com/CliMA/Oceananigans.jl/pull/2723/commits/1638f392eb6f3cb04d26796d0f785f01a4f997cf), at `i, j, k = 45, 1, 5`. Still I get. ```julia; julia> η = model.free_surface.η; 128×1×1 Field{Center, Center, Nothing} reduced over dims = (3,) on ImmersedBoundaryGrid on CPU; ├── grid: 128×1×5 ImmersedBoundaryGrid{Float64, Bounded, Periodic, Bounded} on CPU with 3×3×3 halo; ├── boundary conditions: FieldBoundaryConditions; │ └── west: ZeroFlux, east: ZeroFlux, south: Periodic, north: Periodic, bottom: Nothing, top: Nothing, immersed: ZeroFlux; └── data: 134×7×1 OffsetArray(::Array{Float64, 3}, -2:131, -2:4, 1:1) with eltype Float64 with indices -2:131×-2:4×1:1; └── max=0.0, min=0.0, mean=0.0. julia> @info ""implicit free surface solver test, norm(η): $(norm(η)), maximum(abs, η): $(maximum(abs, η))""; [ Info: implicit free surface solver test, norm(η): 0.0, maximum(abs, η): 0.0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2723#issuecomment-1238604868:1011,test,test,1011,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2723#issuecomment-1238604868,2,['test'],['test']
Testability,"> One question: Should we modify the tests so that they would be able to catch the bug? Or is that too much?. We need to add a _new_ test. I already changed the test that demonstrates the Poisson equation is solved correctly (with the correct Laplace operator as a diagnostic). However, something missing is a straightforward test that mass is conserved when using this solver on a stretched grid (not a regular grid, where this issue doesn't crop up). I'm working on that now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-813816344:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-813816344,4,['test'],"['test', 'tests']"
Testability,"> Only `VectorInvariantFormulation()` works on a lat-lon grid right? I was trying to see whether the model constructor will error with some informative message if, e.g., a lat-lon grid is provided with `ConservativeFormulation()` but I couldn't see something. Is this something we'd like?. Correct. For the the conservative form we need to use the rectilinear grid but the vector invariant form, I think we can use any grid. I agree that we should have a test for that and maybe something in the docs, sometime?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1142148890:455,test,test,455,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1142148890,1,['test'],['test']
Testability,"> Only concern might be that by using Logging.global_logger, Oceananigans now hijacks the global logger and everything starts using it for logging. But maybe this isn't a big deal and we can revert behaviour at any time. I'm not passionate either way, but is it easy to simply avoid importing the macros associated with the global logger and defining them for a custom logger instead?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/855#issuecomment-674115587:38,Log,Logging,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/855#issuecomment-674115587,5,"['Log', 'log']","['Logging', 'logger', 'logging']"
Testability,> Or perhaps when tests pass? Let me know if you need help with that. Thanks. I think that test failed due to some server issue. I restarted it and it seems to be going fine.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022702549:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022702549,2,['test'],"['test', 'tests']"
Testability,"> Out of curiosity, would it be possible to try this with Bounded in x? I wonder what that would look like. I think it would, although I'm not sure if I have time to investigate that at the moment. I might run a test like that my next free evening :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-885039992:212,test,test,212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-885039992,1,['test'],['test']
Testability,> PS @christophernhill: Buildkite tests did not run on this PR since we disable Buildkite on PRs from forks (to avoid random PRs executing potentially malicious code on Tartarus and Sverdrup).; > ; > So we usually open and merge branches from the repo itself. OK - I'll put it in a branch sometime today,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1333#issuecomment-772577271:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1333#issuecomment-772577271,1,['test'],['tests']
Testability,"> Particle setup: particles can get a parameter called active_properties which is a tuple of named tuples of particle properties and tracers (e.g. ((property=:t, tracer=:x),).) The idea being that the particle dynamics function (as already implemented) changes the particle property to set a rate of uptake/exudation of a tracer, and the below function would integrate this change to the specified tracer. Can you please restate this? I think a code example would be helpful with an explanation on what's being accomplished. Also can you explain why this can't be implemented with a Callback (or forcing function)? I.e., why do we desire this as a source code feature? Just to be clear, I'm not saying it should be one way or another, but it's good to have explicit justification for source code features (which are expensive to maintain and require resources to test)!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238507827:863,test,test,863,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1238507827,1,['test'],['test']
Testability,"> Perfect, does this also solve the issue?. Yes! I tested it with up to 10 tracers:. ```julia; ┌ Info: NonhydrostaticModel{GPU, RectilinearGrid}(time = 0 seconds, iteration = 0); │ ├── grid: 8×8×6 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; │ ├── timestepper: QuasiAdamsBashforth2TimeStepper; │ ├── tracers: (b, τ1, τ2, t3, t4, t5, t6, t8, t9, t10); │ ├── closure: SmagorinskyLilly: C=0.1, Cb=1.0, Pr=(b = 1.0, τ1 = 1.0, τ2 = 1.0, t3 = 1.0, t4 = 1.0, t5 = 1.0, t6 = 1.0, t8 = 1.0, t9 = 1.0, t10 = 1.0); │ ├── buoyancy: Nothing; └ └── coriolis: Nothing; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (79.486 ms); [ Info: Executing initial time step...; [ Info: ... initial time step complete (4.737 minutes).; [ Info: Simulation is stopping after running for 4.739 minutes.; [ Info: Model iteration 10 equals or exceeds stop iteration 10.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2908#issuecomment-1419957403:51,test,tested,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2908#issuecomment-1419957403,1,['test'],['tested']
Testability,"> Personally, I don't think it's confusing. I also don't feel strongly either way though. Ah yes, totally agree that it isn't confusing. I wasn't arguing that it was confusing though. . In terms of _reading_ these code statements I much prefer seeing `pressure_solver = poisson_solver`. Its even pedagogical because it teaches you that we solve the Poisson equation for pressure. I love that and that is exactly why we chose this design. Please bear with me to understand the reason I am proposing this change. In practical usage / when coding new experiments it is easy to mix up ""pressure"" with ""poisson"". I've been working testing lots of different solvers these past few days, and keep accidentally typing `pressure_solver = ConjugateGradientPressureSolver(grid)` which is wrong. If it becomes more common to configure the pressure / poisson solver in the future (because we have better support for different solvers for irregular geometries) then I would like to also help others that may run into this issue. It's nice to have syntax that ""rolls of the tongue"", ie, is what you would type if you were typing without concentrating very hard. It's not big deal either. I just tend to think that if one makes the same syntax mistake multiple times, it's important to make sure you step back and consider whether the problem is you, or the syntax.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3188#issuecomment-2377874234:626,test,testing,626,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3188#issuecomment-2377874234,1,['test'],['testing']
Testability,> Please could someone try rerunning the failed test since it shouldn't have changed?. It seems it passed already,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578837795:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1578837795,1,['test'],['test']
Testability,"> Possibly related to discussion on #2347 ? Broadcasting ordinary arrays with PencilArrays is fragile. It needs to be fixed... I think that's correct. A way to test this is to change the following lines: ; https://github.com/CliMA/Oceananigans.jl/blob/3ba95e07a27d93129a87f266aecc3c11d20aac14/test/test_distributed_models.jl#L471-L472. to . ```julia; arch = MultiArch(ranks=(1, 4, 1)) ; grid = RectilinearGrid(arch, topology=topo, size=(8, 2, 8), extent=(1, 2, 3)) ; ```. And it should make tests pass. For some reason I found that the condition `Rx*Nx == Ry*Ny == Rz*Nz` needs to be satisfied in order to make tests pass (see https://github.com/CliMA/Oceananigans.jl/issues/2445). I don't necessarily recommend merging that way, since this doesn't fix the issue, instead it circumvents it, but I'm pretty sure we won't be able to update the packages (including updating to julia 1.7) before fixing this issue. On the other hand, this test passes right now on main only because of a coincidence, and there's most likely a bug in code (based on answer by @glwagner and @jipolanco), so the test is not doing its intended purpose. That might be an argument for removing that test until we have time to fix the issue, since it's keeping us from updating other packages.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1105085657:160,test,test,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1105085657,7,['test'],"['test', 'tests']"
Testability,"> Possibly, we should start using a merge queue that would disallow PRs from being merged unless tests pass. Yeap. I added these in https://github.com/CliMA/Oceananigans.jl/settings/branches. <img width=""905"" alt=""Screenshot 2023-12-23 at 1 10 26 pm"" src=""https://github.com/CliMA/Oceananigans.jl/assets/7112768/3137d7ef-2f34-4f05-86fa-c759177ac164"">. How does this sound?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868271224:97,test,tests,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1868271224,1,['test'],['tests']
Testability,"> Probably the quickest way to start is simply to add the ""holes"" manually after calling `compute!`.; > ; > The reason this test is failing is not because `compute!` doesn't work, right? Getting `compute!` to work is just visualization. We need to be able to compute the vorticity in those points as well as those points are involved in the $\zeta \hat{\boldsymbol{k}} \times \boldsymbol{u}$ term. So I think the dynamics test is blowing up because of that, but I'm not 100% sure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1759433251:124,test,test,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3306#issuecomment-1759433251,2,['test'],['test']
Testability,"> Provided that you've already tested this, it looks good to me!. Thanks @tomchor . It seems that some regression testes are failing. . Is this a concern @ali-ramadhan ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1558#issuecomment-815946170:31,test,tested,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1558#issuecomment-815946170,2,['test'],"['tested', 'testes']"
Testability,> Question: should we set up an AMD CI?. I would think so. Do you have such a system to test on?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1936976873:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1936976873,1,['test'],['test']
Testability,> Quick quick question: Should we be concerned about the GPU memory allocations? They're roughly 3x larger for 1.6 which is a pretty big difference! Especially considering the size limitations on GPUs. Ah so in the benchmarks those are just CPU memory allocations since BenchmarkTools.jl doesn't measure GPU allocations. `CUDA.@time` can measure GPU allocations but I haven't used it much on Oceananigans. I don't think it's a cause for worry but it might be good to do some profiling at some point to figure out where the extra memory allocations are coming from. Interestingly the benchmarks suggest that GPU models are actually a bit faster now :eyes:,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843693187:215,benchmark,benchmarks,215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843693187,3,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmarks']"
Testability,"> Related to this, I wanted to point something out:; > ; > ```julia; > ; > julia> struct Test; > a::Array{Float64, 1}; > end; > ; > julia> import Base: getindex; > ; > julia> getindex(t::Test, inds...) = getindex(t.a, inds...); > getindex (generic function with 196 methods); > ; > julia> t = Test(rand(4)); > Test([0.502462, 0.632246, 0.585965, 0.845577]); > ; > julia> @code_lowered t.a[2]; > CodeInfo(; > 731 1 ─ %1 = (Base.arrayref)($(Expr(:boundscheck)), A, i1) │; > └── return %1 │; > ); > ; > julia> @code_lowered t[2]; > CodeInfo(; > 1 1 ─ %1 = (Base.getproperty)(t, :a) │; > │ %2 = (Core.tuple)(%1) │; > │ %3 = (Core._apply)(Main.getindex, %2, inds) │; > └── return %3 │; > ); > ; > julia> @code_lowered @inbounds t.a[2]; > CodeInfo(; > 538 1 ─ nothing │; > │ %2 = (Base.Expr)(:inbounds, true) │; > │ %3 = (Base.esc)(blk) │; > │ %4 = (Base.Expr)(:(=), :val, %3) │; > │ %5 = (Base.Expr)(:local, %4) │; > │ %6 = (Base.Expr)(:inbounds, :pop) │; > │ %7 = (Base.Expr)(:block, %2, %5, %6, :val) │; > └── return %7 │; > ); > ; > julia> @code_lowered @inbounds t[2]; > \CodeInfo(; > 538 1 ─ nothing │; > │ %2 = (Base.Expr)(:inbounds, true) │; > │ %3 = (Base.esc)(blk) │; > │ %4 = (Base.Expr)(:(=), :val, %3) │; > │ %5 = (Base.Expr)(:local, %4) │; > │ %6 = (Base.Expr)(:inbounds, :pop) │; > │ %7 = (Base.Expr)(:block, %2, %5, %6, :val) │; > └── return %7 │; > ); > ```; > ; > Note that the lowered code for an *inbounds* `getindex` call is exactly the same for `Test` as it is for it's field, `Test.a`. There is a difference when the array access is not inbounds. So we probably shouldn't see slow down for using `getindex` on `Field` directly if its inbounds.; > ; > _Originally posted by @glwagner in https://github.com/climate-machine/Oceananigans.jl/issues/163#issuecomment-479825567_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/13#issuecomment-479850168:89,Test,Test,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/13#issuecomment-479850168,6,['Test'],['Test']
Testability,"> Removed the ""fluid at rest"" test that was failing and included another (simpler) one for tilted buoyancy along with constructors. The new test checks that `x_dot_g_b`, etc., match for two different domains: one with z-aligned gravity and another with y-aligned gravity.; > ; > The only downside is that I only included the `x_dot_g_b` test for `model=BuoyancyTracer()`. Another separate test is needed for `model=SeawaterBuoyancy()` if we think that's necessary.; > ; > (Constructors are tested for both models, though.). Thanks @tomchor !!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-914363399:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-914363399,5,['test'],"['test', 'tested']"
Testability,"> Right yeah RegularRectilinearGrid called it grid.zC but VerticallyStretchedRectilinearGrid calls it grid.zᵃᵃᶠ to be more consistent with the curvilinear grids being added, but the output writers might not know this yet. Can we refactor the tests to use `all_z_nodes`? This could avoid issues with property names.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-791630388:242,test,tests,242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-791630388,1,['test'],['tests']
Testability,> Run on a GPU?. No! Thanks for asking and I realized I was testing on a CPU. Not to get it to run on a GPU.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1991771156:60,test,testing,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1991771156,1,['test'],['testing']
Testability,> Seems risky... let's see how the tests do... OK... indeed... too ambitious. I'm closing.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1618#issuecomment-826248213:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1618#issuecomment-826248213,1,['test'],['tests']
Testability,> Should I have a go at fixing the tests @glwagner?. I say go for it!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1513798221:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1513798221,1,['test'],['tests']
Testability,"> Should I hold on reviewing until you figure out the tests?. No, it's ready for review. The lingering remaining issues are not substantial.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1869#issuecomment-884797909:54,test,tests,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1869#issuecomment-884797909,1,['test'],['tests']
Testability,"> Should we add a test to make sure this doesn't break in the future? The low bar is just to test that interpolation doesn't error with a `Flat` direction (we don't have to test correctness, though we could do that too). Yes, probably should. The current tests have a hard coded topology . ```; function run_simple_particle_tracking_tests(arch, timestepper; vertically_stretched=false); topo = (Periodic, Periodic, Bounded). Nx = Ny = Nz = 5; ...; ```; We could add tests to check that simulations can run on different topologies without error. Alternatively, I don't see anything in the existing tests that would not be supported if one or more of the `Periodic` dimensions was `Flat`. So we could extent the existing tests to allow for different topologies.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2060761176:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2060761176,7,['test'],"['test', 'tests']"
Testability,> Should we add an equality test for grids? I think we can get away with something as simple as `@test grid == deepcopy(grid)` no? (This used to return false for vertically stretched grids.). We should! But I'll try to test a few cases... different type of grids and on different architectures.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-950493532:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-950493532,3,['test'],['test']
Testability,"> Should we also move `Plots.jl` to the docs environment?. I thought it was used for benchmarking or the validations/verifications. If nothing uses Plots.jl in the main repo's test then, yes, it should go away.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1128#issuecomment-724335785:85,benchmark,benchmarking,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1128#issuecomment-724335785,2,"['benchmark', 'test']","['benchmarking', 'test']"
Testability,"> Should we include the Stommel gyre? It seems there are simpler flow fields for an advection validation test (eg sin x sin y). How are we going to evaluate the thermal bubble validation? ""Not blowing up"" is pretty good, but I think we have decide that validation tests should be quantitative. Qualitative validation experiments can perhaps be put in `examples/`?. Yeah they're both ""temporary"" verification experiments that might be useful in the near future as we test advection schemes. Periodic advection is also a qualitative verification experiment. I think we should keep at least one interesting 2D advection verification to produce movies showing how different advection schemes behave. Hopefully we could embed all the movies in the docs so users can browse through them. I was thinking the Stommel gyre could be a good one (really I stole the idea from Glenn's animations) as the velocity does not go to zero at the western boundary/wall.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-699530922:105,test,test,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-699530922,3,['test'],"['test', 'tests']"
Testability,"> Should we merge this PR if all tests pass? Is there any other outstanding issues?; > ; > Regarding bathymetry properly included in `ConservativeFormulation()`, if there is more work needed there perhaps it belongs to a different PR (given the title of _this_ PR)?. I agree that we should not wait to get bathymetry working with `ConservativeFormulation()`. . @simone-silvestri and I were playing with a realistic global ocean model using the `VectorInvariantForm` and had some success. There were some issues when we included realistic topography, but I don't think that should hold us back. That is a hard problem and will take more time. This is a great addition and should allow for some very interesting simulations!. And we have 208 comments. That must be a record?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144211824:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144211824,1,['test'],['tests']
Testability,"> Should we remove the warning when constructing `FourierTridiagonalPoissonSolver`?. Are you talking about this one? https://github.com/CliMA/Oceananigans.jl/blob/5fbd8cd20c5db8e9b11b6175984e7592a08fc874/src/Solvers/fourier_tridiagonal_poisson_solver.jl#L31-L34. If so, I think we can remove it after the tests pass, no? Unless you think there might be more issues lurking.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881949061:305,test,tests,305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881949061,1,['test'],['tests']
Testability,> Should we use `initialize_schedule!` for `TimeInterval` to set `previous_actuation_time` to the `model.clock.time`? Or is this incorrect?. That might work. Setting it to a multiple of `schedule.time_interval` might be better but both could have unintended consequences that aren't tested for. I'll merge this PR since it's got an approval so it makes it into v0.46.0.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1303#issuecomment-767748984:283,test,tested,283,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1303#issuecomment-767748984,1,['test'],['tested']
Testability,"> Since we already have the full-cell grid-fitted IBM it might be better to just focus on that for now and later modify it to make it partial-step when everything is working well (I think we'd just need to modify the calculation of vertical areas and volumes, no?). Not sure what you mean in terms of ""focus"". I wasn't proposing any work, just speculating about the potential advantages of shaved cells. Do you mean focus on full cell IBM for this particular test? I agree with that --- we don't have shaved cells so we can't test it ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100249876:459,test,test,459,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2402#issuecomment-1100249876,2,['test'],['test']
Testability,"> So I believe that MWE I created is not really needed (it's not the original test). For the future, note that an efficient workflow is to use an MWE as a test. They are closely related.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2433147034:78,test,test,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2433147034,2,['test'],['test']
Testability,"> So I think that the tests generally are very close to the memory limit (which I think is around 1GB, not sure how that's being set). It looks like the tracer sinking isn't actually using much more memory but its enough to push it over. If I remove the output writing and speed field tracking (which don't get tested in this run anyway) from the final test it seems to keep the memory usage lower.; > ; > I can't test it myself on a GPU right now so am going to push and hopefully it'll work!. Interesting. I don't believe we make any attempt to manage GPU memory. However, the tests are all quite lightweight (the largest are probably the regression tests, at 16^3?) The GPU we use for CI has 24 GB total memory. Up to 16 jobs can run simultaneously. I'm not sure this is consistent with a test being just over the limit, because this would mean the tests would intermittently pass, right? It's slightly stochastic how many CI jobs are running simultaneously.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248267675:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2724#issuecomment-1248267675,8,['test'],"['test', 'tested', 'tests']"
Testability,"> So far what we have only tested the case when there is buoyancy with no motion. It would be nice to have a problem with non-zero velocities work. Agreed. I most likely will be using IBMs starting now so I probably will be testing IBMs on a variety of settings. > I see there is this script [here](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/flow_over_hills.jl) that we could play with but it does not seem like a minimal working example. Do you know of a simple script that looks at flow over a bump we could look at?. I don't have anything ready but that script looks pretty good to me. We just need to tweak it a bit? What would be the goal here as a validation script?. > @glwagner also suggested we test this with lat-lon grids and create tests. I think that should be the case for lat-lon and rectilinear grids, no? At the moment I think we're kinda limited with IBM tests:. ```; ~/repos/Oceananigans.jl/test $ grep -r ""\<Immersed"" * ; test_boundary_conditions_integration.jl: immersed_rectilinear_grid(topology) = ImmersedBoundaryGrid(RectilinearGrid(arch; topology, z=(-Lz, Lz), grid_kw...), ib); test_boundary_conditions_integration.jl: if grid isa ImmersedBoundaryGrid && side == :bottom; test_boundary_conditions_integration.jl: if grid isa ImmersedBoundaryGrid && side == :bottom; test_boundary_conditions_integration.jl: # Omit ImmersedBoundaryGrid from vertically-periodic test; test_conditional_reductions.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary; test_conditional_reductions.jl:using Oceananigans.ImmersedBoundaries: conditional_length; test_conditional_reductions.jl: @info "" Testing Reductions on Immersed fields""; test_conditional_reductions.jl: ibg = ImmersedBoundaryGrid(grid, GridFittedBoundary((x, y, z) -> (x < 0.5))); test_dynamics.jl:using Oceananigans.ImmersedBoundaries: ImmersedBoundaryGrid, GridFittedBoundary, GridFittedBottom, mask_immersed_field!; test_dynamics.jl: grid = ImmersedBounda",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199:27,test,tested,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1126367199,6,['test'],"['test', 'tested', 'testing', 'tests']"
Testability,"> So if no parameterizations are being used, are the boundary conditions actually being imposed then?. I believe yes: if the viscosity/diffusivity is 0, then flux or no-slip boundary conditions cannot be imposed (mathematically, the order of the PDE is reduced in that case). We then can only impose no-penetration or periodic conditions. > I still feel like bc.calc() feels obscure. My primitive logic: for a flux boundary condition, `bc.calc()` ""calculates"" the flux at the given grid point and time-step. For a ""value"" boundary condition, `bc.calc()` ""calculates"" the value of the boundary condition at the given grid point and time-step. But I agree it is a weird name. What is a better name?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-472248169:397,log,logic,397,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-472248169,1,['log'],['logic']
Testability,"> So it seems that our model has an extra degree of freedom that neither Lilly nor Pressel propose. Quite! Though Lilly admits that his model amounts to ""little more than a scaling argument"" and that both `Pr_t` and the model ""constant"" are themselves unknown functions. So I actually think there is room to interpret Lilly as proposing a whole family of models. Since time is finite only one has been tested I guess (and also the structure of the model is questionable, so people have moved on to other formulations...). > I propose we either get rid of `C_b` and just use `1/Pr_t` or make it clear in the docs and docstring that we offer an extra degree of freedom, but that the model as proposed has `C_b=1/Pr_t`. I'm not sure which one is best since I do like the idea of Oceananigans allowing for easy (customization), but also that favors mistakes by un-attentive users (such as myself haha). Does the default `Cb = 1/Pr` both retain flexibility and also reduce the chances of unexpected behavior / mistakes?. If we get rid of `Cb` then we may want to introduce an alternative way to eliminate the buoyancy correction entirely (currently achievable with `Cb=0`). A further caveat is that using `1/Pr` only applies if `Pr` is the same for all tracers and if a linear equation of state links tracers to buoyancy. With nonlinear equations of state it's unclear what to use for `Cb`. I believe we also allow a different `Pr` for every tracer. In this case the default `Cb=1/Pr` will throw an error (probably a good thing, since you'd have to decide what to use for `Cb` in this case).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889333799:402,test,tested,402,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889333799,1,['test'],['tested']
Testability,"> So the first task is to extend the tridiagonal solver to support integrals in `x` and `y`.; > ; > This could be straightforwardly supported by adding some kind of tag to indicate the ""tridiagonal direction"" (ie `:x`, `:y`, or `:z`), and copy-pasting the functionality for each case. It's a bit of code duplication but pretty straightforward...; > ; > Alternatively we could introduce some kind of abstraction that permutes array dimensions. Then we just have one algorithm which assumes the tridiagonal index is `k`, and support `i` or `j` under the hood via an array wrapper that performs an index permutation.; > ; > I'm leaning towards copy/paste because it's a little easier to understand and it's not that much code in this case... I also prefer the copy/paste method (that's what I used in https://github.com/CliMA/Oceananigans.jl/pull/3111). If I understand correctly these two functions are the only ones that need to be generalized, no?: . https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L74-L83. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/src/Solvers/batched_tridiagonal_solver.jl#L88. if so, that's not too bad. Is duplicating one of the tests in [test_batched_tridiagonal_solver.jl](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_batched_tridiagonal_solver.jl) but rotating everything to two different directions enough to test this new functionality?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584:1276,test,tests,1276,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3116#issuecomment-1560271584,3,['test'],"['test', 'tests']"
Testability,"> So what do you guys think if this tilting is implement at the AbstractBuoyancy level? If I understand correctly all buoyancy types inherit that, right? That way we'd have a keyword for the tilt (maybe tilt, gravitational_direction or gravity_projection) that would default to (0, 0, 1) and a similar option could be given to FPlane, avoiding confusion. Ah, the issue is that abstract types cannot have properties --- they can only be used to organize type parameters and dispatch.; The logic and motivation of your suggestion is sound though (avoiding code duplication through good design); we just have to come up with a different solution. A similar solution could perhaps design a more hierarchical interface to `IncompressibleModel.buoyancy`. For example, we might write. ```julia; struct Buoyancy{G, B}; gravitational_direction :: G; model :: B; end; ```. The existing subtypes of `AbstractBuoyancy` are used for `Buoyancy.model`. The user API could be. ```julia; buoyancy = Buoyancy(gravitational_direction=(0.1, 0, 0.9), model=BuoyancyTracer()); ```. or. ```julia; buoyancy = Buoyancy(gravitational_direction=(0.1, 0, 0.9),; model=SeawaterBuoyancy(gravitational_acceleration=9.81, equation_of_state=LinearEquationOfState(α=2e-4, β=8e-5))); ```. This is more verbose but could avoid some of the issues that @tomchor sees. As for `Plane` and `BetaPlane`, I agree that those models are really predicated on a thin aspect ratio assumption that has to do with gravitational accelerations, and therefore ""know"" about the direction of gravity. We could either add a property `gravitational_direction` or, perhaps, add some wrapper / helper functions for constructing coriolis forces in tilted domains (eg `coriolis = TiltedCoriolisForces(FPlane(f=1e-4), vertical_direction=(0.1, 0.0, 0.9))` which returns `GeneralCoriolis` with 3D Coriolis forces --- or something). I think we will start to run into these sorts of issues more generically, where we need to specify ""global"" parameters that impact mu",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-782962047:488,log,logic,488,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-782962047,1,['log'],['logic']
Testability,"> Some benchmarks from running `implicit_surface_solvers_benchmark.jl`; > ; > On GPU: FFT: 0.902434 seconds (1.58 M allocations: 549.219 MiB, 13.25% gc time) PCG: 37.329798 seconds (17.07 M allocations: 2.563 GiB, 1.85% gc time) Heptadiagonal: 4.323861 seconds (6.06 M allocations: 675.694 MiB, 4.72% gc time, 1.32% compilation time) MG: 4.495123 seconds (1.50 M allocations: 492.900 MiB, 2.16% gc time) PCG with FFT preconditioner: 22.673894 seconds (3.53 M allocations: 864.587 MiB, 0.77% gc time); > ; > On CPU: FFT: 6.548544 seconds (3.61 M allocations: 1.910 GiB, 14.07% gc time, 1.30% compilation time) PCG: 32.354310 seconds (20.29 M allocations: 7.041 GiB, 5.80% gc time) Heptadiagonal: 9.795938 seconds (3.51 M allocations: 1.595 GiB, 39.13% gc time) MG: 11.868795 seconds (3.85 M allocations: 3.991 GiB, 43.10% gc time) PCG with FFT preconditioner: 10.473279 seconds (5.38 M allocations: 2.654 GiB, 9.37% gc time). nice. A problem with having an iterative matrix solver algorithm (like the pcg) is going to high resolutions (or conversely large time steps). ; The matrix becomes poorly conditioned because the diagonal (which depends on `Δt²`) decreases faster than the off-diagonals (which depend on the integrated areas) and the number of iterations required to converge spike up.; This means that on a GPU both eddy-permitting and resolving simulations are dominated by the cost of the implicit solver.; Our default preconditioner (for the Heptadiagonal solver) also loses efficiency when increasing `Δt` (or increasing resolution) because it assumes that the matrix is diagonally dominant. This is a problem that the FFT solver does not have.; I would be very interesting to know if with a multigrid algorithm this problem is less severe.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241929577:7,benchmark,benchmarks,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1241929577,1,['benchmark'],['benchmarks']
Testability,"> Some good news is that more tests seem to be passing compared to the prevoius PR.; > ; > One of the messages I saw was there was a cancellation signal, see below. Lots of the tests just cancelled, and I'm not sure why.; > ; > ```; > Testing Oceananigans; > # Received cancellation signal, interrupting; > ```. I don't know what you saw.; But what I see here: . https://buildkite.com/clima/oceananigans/builds/14750. is that almost all tests pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988349960:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3502#issuecomment-1988349960,4,"['Test', 'test']","['Testing', 'tests']"
Testability,"> Some of the abstract operations tests are CPU-only (the non-computation ones?). Would it make sense to run them on the GPU as well?. We can. Such a test may end up running on the CPU via scalar operations though... ?. > It seems that model.pressures.pHY′ has taken on the role of being the temporary array. Can't think of a great way of doing temporary arrays without using up extra memory but maybe it makes sense to define a function so it's easy to change the temporary array?. That's a good idea for sure to permit dispatch on various type parameters of `model`. . Note that `Computation` allows the user to specify their own temporary array. `model.pressures.pHY′` is used as a default when `model` is passed to `Computation` in place of an array or field. > Performance benchmarking (will likely be quite extensive to cover many possible use cases). I think just a few will suffice for shallow and deep operations trees, perhaps choosing common use cases to ensure that using abstract operations rather than hard-coded kernels doesn't result in a big performance hit. It will be hard to interpret the results of a benchmark on a deep tree anyways, because we won't have an alternate implementation to compare against. Future performance optimization could use some kind of tree analysis utility + shared memory to accelerate kernels.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-545718073:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/463#issuecomment-545718073,4,"['benchmark', 'test']","['benchmark', 'benchmarking', 'test', 'tests']"
Testability,"> Some sandbox stuff might've been added by accident. Ah, thanks for catching that. I was investigating the stretched grid + timestep wizard thing. Should be good now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863622034:7,sandbox,sandbox,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863622034,1,['sandbox'],['sandbox']
Testability,"> Some test pass and it makes no sense. Is it just random test failure past of the test natural variability?. It's natural variability in hardware instructions for GPU, which is pretty scary. sverdrup has a Quadro P6000 which is a bit older and intended more for gaming. I think weird stuff goes on deep inside. If we had billions of dollars we'd get a little cluster dedicated to CI up and running and make beautiful examples and have lightning fast tests (and an engineer to maintain them). Not there yet.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1864#issuecomment-881974489:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1864#issuecomment-881974489,4,['test'],"['test', 'tests']"
Testability,"> Somehow, though, we can't have every module redefining `R_Earth` and using it as default, right?. I think you're right that if we are going to have a default value for this, then it should only be defined once. But if we are going to go ahead with a ""master module"" approach, then we need to implement tests. What we should avoid is people trying to change constants in the master module as a way of setting parameters. This is going to take time and effort to resolve. We should discuss in an issue, not a PR, I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492631291:304,test,tests,304,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3045#issuecomment-1492631291,1,['test'],['tests']
Testability,> Something worth discussing is if we want to unit test the operators. @ali-ramadhan there are unit tests for interpolation and differentiation. Check here:. https://github.com/climate-machine/Oceananigans.jl/pull/234/files#diff-325a8c82a0d53ac0f2b95ab742af74a2. Let me know if we should add more!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495597169:51,test,test,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495597169,2,['test'],"['test', 'tests']"
Testability,> Sorry I was too quick to merge yesterday.; > ; > This looks good but I see that it errors with the following; > ; > ```; > Checkpointer [GPU]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-1/clima/oceananigans/test/test_checkpointer.jl:14; >   | Expression: all(test_model.timestepper.Gⁿ.w.data .≈ true_model.timestepper.Gⁿ.w.data); >  ```; > ```. That's an intermittent failure; we just have to re-run (unfortunately).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1848#issuecomment-877649413:145,Test,Test,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1848#issuecomment-877649413,2,"['Test', 'test']","['Test', 'test']"
Testability,> Sorry validation pipeline was accidently triggered so I canceled it. Fixed it so shouldn't happen in the future. Does that mean it will retry the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1325#issuecomment-769911007:148,test,tests,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1325#issuecomment-769911007,1,['test'],['tests']
Testability,"> Sorry, I was out. I can try running on GPU to see if I can catch the bug. Any specific test I could run? I commented on the code, but did not see your post asking me to run the test. When I clicked on the notification it jumped directly to the code, sorry. No, nothing to do! Just sorting out details now and hopefully will be done soon.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1095117098:89,test,test,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1095117098,2,['test'],['test']
Testability,"> Still the unit tests don't pass; something else is broken. Seems like some other validation is bypassed?; > ; > ```julia; > julia> RectilinearGrid(CPU(), Float64, size = (16, 16, 16), x = 1, y = 2, z = 3); > ERROR: MethodError: no method matching get_face_node(::Int64, ::Int64); > ; > Closest candidates are:; > get_face_node(::Function, ::Any); > @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:12; > get_face_node(::AbstractVector, ::Any); > @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:13; > get_face_node(::Nothing, ::Any); > @ Oceananigans ~/Research/OC5.jl/src/Grids/grid_generation.jl:11; > ; > Stacktrace:; > [1] generate_coordinate(FT::Type, topo::Periodic, N::Int64, H::Int64, node_generator::Int64, dir::Symbol, arch::CPU); > @ Oceananigans.Grids ~/Research/OC5.jl/src/Grids/grid_generation.jl:39; > [2] RectilinearGrid(architecture::CPU, FT::DataType; size::Tuple{Int64, Int64, Int64}, x::Int64, y::Int64, z::Int64, halo::Nothing, extent::Nothing, topology::Tuple{DataType, DataType, DataType}); > @ Oceananigans.Grids ~/Research/OC5.jl/src/Grids/rectilinear_grid.jl:273; > [3] top-level scope; > @ REPL[4]:1; > ```. I wanted to make it so that grid generators don't have to subtype functions. However, that doesn't support the kind of error checking that you're mentioning. I guess I'll go back to explicitly requiring somethign to be subtyped `Function`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3333#issuecomment-1762248344:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3333#issuecomment-1762248344,1,['test'],['tests']
Testability,"> Terrible notation in my humble opinion. w stands for vertical velocity. Why is the advective heat flux qw instead of w theta?. We should improve it before merging the test and polishing it off. @glwagner also suggested agreeing on some common notation for our papers. Following the V&T paper it's `q_w` (subscript `w` for wall) but there is no subscript `w` in Unicode (or if there is, it's not available in Julia) so I ended up writing `qw` but maybe `q_w`, `qʷ`, or even `q_wall` would be better notation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/310#issuecomment-528867862:169,test,test,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/310#issuecomment-528867862,1,['test'],['test']
Testability,"> Test nonlinear advection for 2D/3D schemes. You mean, validate 2D/3D high-order momentum advection for flux form schemes?. Another issue with a vortex solution is that the momentum term is identically zero in the exact solution. So I'm not sure this test isolates convergence. I believe inviscid Burgers will form a shock, and then be subject to numerical dissipation. If you add viscosity, then you are limited by the accuracy of the viscous term. So I'm not sure it even works to turn off the pressure gradient.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172727554:2,Test,Test,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172727554,2,"['Test', 'test']","['Test', 'test']"
Testability,> Test of potential density pass. The insitu density difference for k=2 is instead of 0 is 2e-13…. In that case I think your suggestion `.== `-> `.\approx` should do the trick!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067981092:2,Test,Test,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067981092,1,['Test'],['Test']
Testability,> Testing with validation/mesoscale/baroclinic_adjustment.jl seems to indicate that the race condition is eliminated from the changes to the fill_halo_region! function. Was there a race condition there?. Could you please point to the relevant issue describing the condition just for completeness?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-920113136:2,Test,Testing,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-920113136,1,['Test'],['Testing']
Testability,"> Tests seem to fail with `no method matching calculate_diffusivities!(::Nothing, ::CPU, ...)`: https://travis-ci.com/github/CliMA/Oceananigans.jl/jobs/385704609#L392. fixed",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/947#issuecomment-693513015:2,Test,Tests,2,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/947#issuecomment-693513015,1,['Test'],['Tests']
Testability,"> Thank you @simonbyrne!; > ; > @glwagner I tried to fix `all_*_nodes` so that we can `set!` reduced fields (which `model.free_surface` now is) but not sure if `[]` is the best solution.; > ; > If tests pass we should merge and tag v0.54.1. Looks like we need something that has length 1. Thinking about this more I think we actually probably want a new `set!` function for `ReducedField` so that users can use a two-argument function, rather than a three-argument function with a meaningless third argument. For the sake of this PR though I'll just put a band-aid in if that's ok.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1573#issuecomment-819053724:197,test,tests,197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1573#issuecomment-819053724,1,['test'],['tests']
Testability,"> Thank you for your help! I have installed the updated version of Julia and when running it appears to be Segfaulting when trying to add CUDA. I will open an issue with them if I cannot figure out how to solve it. Thank you again. @logan can you link the CUDA issue here please?. Also, if you haven't tried, erase everything on your `$JULIA_DEPOT_PATH` (really to be safe you should make a backup of everything there first) and then run the same script you've been running with `using Pkg; Pkg.instantiate()` on the first line. This should ""re-install"" all the packages from scratch. For context [`$JULIA_DEPOT_PATH`](https://docs.julialang.org/en/v1/manual/environment-variables/#JULIA_DEPOT_PATH) by default is `~/.julia`, I think, and that's where julia stores the package files it downloads. The hypothesis here is that at some point some package download/compilation went wrong and you have some broken code there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245639622:233,log,logan,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2245639622,1,['log'],['logan']
Testability,"> Thanks @glwagner . It seems that the `ramp` changes with the direction of the gradient, but the tracer doesn't. That's why we have a difference. Thanks.; > ; > This is a rather complicated problem that you are investigating and I wonder whether getting a 3D test for `IsopycnalSkewSymmetricDiffusivity` might be an easier way to find the bug? Just a thought. Agree! Partly I'm not sure what to expect. It seems that GM is noisy in general, so I'm not sure whether our implementation is ""more noisy"" than it should be. These examples are 3D but maybe you mean with an x, y gradient rather than in x or y independently? I was thinking that maybe a 3D double gyre with GM might be helpful, what do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107528360:260,test,test,260,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107528360,1,['test'],['test']
Testability,"> Thanks @jagoosw and @glwagner for your thoughts on this. @glwagner, the approach to nesting is going to be highly dependent on the particular case. The nesting strategy for a simulation with mesoscale eddies passing across the boundary will be very different from the strategy to nest an LES inside a low resolution simulation. I think that this PR should provide different types of boundary conditions (the 'ingredients') and the user will need to decide how to use them for their particular case (the 'recipe' which will rely on different combinations of the 'ingredients'). Does that make sense?. Yes, that makes sense! I do think we need to have a way to test the different methods... ideally, the tests are non-trivial enough to illustrate that the numerics ""works"" for each ingredient that we implement (either independently or when combined with other ingredients to make a recipe). But the tests don't have to be exhaustive; I imagine it will take some time to develop our best practices.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2040113530:661,test,test,661,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2040113530,3,['test'],"['test', 'tests']"
Testability,"> Thanks @navidcy for pointing this out.; > ; > I can see that now we loop over `float_types`, but I don't see where this is set to `[Float32, Float64]`, as it is in other tests. Maybe I'm missing something?. https://github.com/CliMA/Oceananigans.jl/blob/0ddffe59457ece2b07452a421a8125abf4f4820f/test/runtests.jl#L54",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870170320:172,test,tests,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782#issuecomment-870170320,2,['test'],"['test', 'tests']"
Testability,"> Thanks @tomchor for doing this.; > ; > I remember last year, Henry needed to use `@gpu_sync` when he was running stuff on multiple cores. Maybe why it is not necessary for a single core?. I think in this case it's not necessary because it's a multi-CPU testing script, so no GPUs involved. And that allows us to get rid of the `Benchmarks` dependence and make the script more portable.; ; > I presume you are going to try and run this on more than one core? If you try it and get an error I'd be curious to know what it is. I did! And I'm running into issues. Please check https://github.com/CliMA/Oceananigans.jl/issues/2433! Any help there is appreciated",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2432#issuecomment-1098394148:255,test,testing,255,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2432#issuecomment-1098394148,2,"['Benchmark', 'test']","['Benchmarks', 'testing']"
Testability,"> Thanks for the review @francispoulin! I'll address your comments and make sure we can run the tests on Buildkite.; > ; > Certainly we need a lot more tests (and better comments/docstrings). Well, you have it working which is the most important part. The comments will be nice and are easy enough to add when needed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-790995346:96,test,tests,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-790995346,2,['test'],['tests']
Testability,"> That makes sense. I didn't realize the difference between a ""golden master"" and a ""regression"" test. I wouldn't call the output we produce right now to be ""golden master"" level. That's just how I'm defining it. > The two regression tests may be failing for different reasons. Since this test will help you determine that, I guess I feel it will be useful for your work. But if you think there is some intrinsic problem with the test added in this PR then ok. I need this test to integrate the turbulence closures into the code, so I will be using it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/239#issuecomment-496241755:97,test,test,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/239#issuecomment-496241755,5,['test'],"['test', 'tests']"
Testability,> That might not work because the PCG doesn't get to machine precision though right?. You can set the precision low enough to pass the regression test. This would add extra iterations but the regression test grids are pretty small so might be feasible. Or we can just increase the tolerance on the regression test.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1360#issuecomment-781644482:146,test,test,146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1360#issuecomment-781644482,3,['test'],['test']
Testability,"> That's true, such code has to be compiled away. However, the method that `forcing` uses is a little fragile and often fails to compile. We've just failed to come up with a better way for users to specify arbitrary forcings. But presumably you are doing something else, because otherwise your users could use `forcing`. That's why I'm asking: what outcome are you trying to achieve? Maybe we can come up with another design. Ah, I see. The problem is occurring where I've got this `update_state` for changing the negative tracers (as discussed in ). The code is currently:; https://github.com/OceanBioME/OceanBioME.jl/blob/ac8419a1ce5a06a82be31588583636b212c09598/src/Utils/negative_tracers.jl#L87-L118; But this doesn't work on GPU. The list of symbols is needed so that the group that the total is conserved in can be defined. An alternative I've thought of but not tested yet is to have functions like `conserved_tracers(bgc)` which can just return the list of symbols instead. . I currently can't access a GPU but will see if this works when I can. I'm sure I can find an alternative way todo this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3262#issuecomment-1717609513:869,test,tested,869,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3262#issuecomment-1717609513,1,['test'],['tested']
Testability,"> That's what I meant. I am wondering if we can elevate the governing equations to a separate page (they are important!) I'd prefer not to characterize the governing equations as part of the numerics. The numerics discretize the continuous equations, and the continuous equations exist independently of numerics. Ah yes that's a good idea!. > I think I may introduce the alias `MolecularDiffusivity` for `ConstantIsotropicDiffusivity`. Any objections?. Isn't this alias only true if you're using the molecular values of ν and κ in the `ConstantIsotropicDiffusivity` closure?. > There are unit tests for interpolation. The tests for diffusive flux implicitly test the differentiation but its a good idea to add some explicit tests. I'll work on it. Ah sorry I'm still going through the PR!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495598223:593,test,tests,593,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495598223,4,['test'],"['test', 'tests']"
Testability,"> The CPU tests all pass, but it seems like the GPU server isn't working? Does something need to be rebooted?. Yeah, the GPU server is down right now, linked to construction happening at MIT. Hopefully it will be back up in a few days.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1908515940:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3440#issuecomment-1908515940,1,['test'],['tests']
Testability,"> The Roquet’s approximation is perfectly sufficient for Oceananigans, because it will never be used for global calculations where local approximations are an issue. However I agree with everybody else that it would be best to use the same EOS in Ocenanigans and Climate_Ocean. in that case we should adopt TEOS-10. Be warned that it is quite inefficient through. So we may be hit performance-wise. Hard to tell without trying. Thanks for the feedback @rafferrari. I talked to @leios earlier today and we think it shouldn't be a problem on the GPU. It's just straight up number crunching so it might benefit from being run on a GPU. But we can make sure by doing a quick benchmark.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/692#issuecomment-596868076:671,benchmark,benchmark,671,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/692#issuecomment-596868076,1,['benchmark'],['benchmark']
Testability,"> The code in https://github.com/CliMA/Oceananigans.jl/blob/master/src/OutputWriters/time_average_outputs.jl is a utility / user-convenience function for wrapping outputs passed to JLD2OutputWriter and NetCDFOutputWriter in a WindowedTimeAverage. Yeah, sorry, `windowed_time_average.jl` is what I meant to link to. I guess somewhere these accumulation of the denominator of the mean should be reset to zero when the proper time interval has passed, but I'm not sure where. And thanks for the line-by-line explanation. I understand that part but I really don't see how to fix the issue right now. > Can you explain why isn't this captured in our tests?. I don't know for now. I don't fully understand the `WindowedTimeAveraged` tests to be honest. I think I'd need to run those manually on the REPL but I don't quite have a lot of time on my hands right now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872459141:645,test,tests,645,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872459141,2,['test'],['tests']
Testability,"> The curve seems to flatten out, which we all know should not happen. Maybe the time stepping error dominates and we need to reduce \Delta t?. That seems like a likely culprit. I can't remember if I looked into that. Whatever it is I agree its a flaw in the test design that some other source of error dominates before asymptotic convergence is reached...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-745300622:259,test,test,259,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-745300622,1,['test'],['test']
Testability,"> The dependency on OrthogonalSphericalShellGrids here is blocking the progress (the `SplitExplicitAuxiliaryFields` type has changed in this PR). How do we deal with this? We could remove the dependency in the tests of Oceananigans and move those tests over at OrthogonalSphericalShellGrids. Shall we do this? In case we want to do it I have prepared https://github.com/CliMA/OrthogonalSphericalShellGrids.jl/pull/47.; If yes, we can merge that one then this one, then update OrthogonalSphericalShellGrids with the new interface",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3841#issuecomment-2437244222:210,test,tests,210,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3841#issuecomment-2437244222,2,['test'],['tests']
Testability,"> The effect of the pressure errors can be seen plainly that there is transient _injection_ of momentum into the system, which isn't physically possible. However over long periods of time the momentum goes in the right direction.; > ; > I'm wondering if anyone has experience with PALM, which I believe uses a very similar immersed boundary method (with no pressure solver correction)... ? They must have similar ""leakage"" errors. I can't help there, but I agree it's a good idea. For now I think we should test that these errors are decreasing reasonably fast with resolution. (But that can be done in another PR I think.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101513949:507,test,test,507,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1101513949,1,['test'],['test']
Testability,"> The following errors but I don't think it should...; > ; > ```julia; > julia> grid = RectilinearGrid(size=3, z= x->x^2, topology=(Flat, Flat, Bounded)); > ERROR: AssertionError: c₁ < c₂; > Stacktrace:; > [1] generate_coordinate(FT::Type{Float64}, topo::Flat, N::Int64, H::Int64, node_interval::Tuple{Float64, Float64}, coordinate_name::Symbol, arch::CPU); > @ Oceananigans.Grids ~/Research/OC9.jl/src/Grids/grid_generation.jl:100; > [2] RectilinearGrid(architecture::CPU, FT::DataType; size::Int64, x::Nothing, y::Nothing, z::Function, halo::Nothing, extent::Nothing, topology::Tuple{DataType, DataType, DataType}); > @ Oceananigans.Grids ~/Research/OC9.jl/src/Grids/rectilinear_grid.jl:273; > [3] RectilinearGrid; > @ ~/Research/OC9.jl/src/Grids/rectilinear_grid.jl:254 [inlined]; > [4] top-level scope; > @ REPL[4]:1; > ```. This errors on `main` as well right? I didn't change that line",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3331#issuecomment-1757847331:164,Assert,AssertionError,164,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3331#issuecomment-1757847331,1,['Assert'],['AssertionError']
Testability,"> The hydrostatic free surface model is pretty similar to the shallow water model with one layer when the free surface displacement is small. So I think it probably makes sense to just work with `HydrostaticFreeSurfaceModel`. How difficult would it be to get a rigid lid version of `HydrostaticFreeSurface`? If we could do that then the RH wave solution would probably be an exact solution, and might help for testing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062867973:410,test,testing,410,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062867973,1,['test'],['testing']
Testability,> The link to benchmarks.jl in the README.md file is broken.; >; > _Originally posted by @funsim in https://github.com/openjournals/joss-reviews/issues/2018#issuecomment-580286479_,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/608:14,benchmark,benchmarks,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/608,1,['benchmark'],['benchmarks']
Testability,"> The main uncertainty is how this PR will interact with #3188. We could explore using the new immersed pressure solver on this branch to test that out. Is that branch working? i.e. do I just have to merge both branches and run? If so, I can do that and report back.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682424275:138,test,test,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1682424275,1,['test'],['test']
Testability,"> The other possibility which achieves the same goal (and which I'm fine with) is to enforce `.nc` in `filename` for `NetCDFOutputWriter`. We'd have to change a lot fewer tests for that too... I personally would prefer that option instead of having the extension be automatically appended. Mostly because the name you pass to the writer (`something.jld2` or whatever it is) uniquely identifies the file that gets generated on your computer. Btw, it would probably be good to hear from other people here too since there isn't a best way to do things.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098378735:171,test,tests,171,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098378735,1,['test'],['tests']
Testability,> The other question we have to answer is how to test the AMD functionality. How long do the tests run for and how many GPUs/CPUs are typically needed for your current Nvidia GPU tests ? Do you have plans for procuring AMD GPU resources ?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937282940:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937282940,3,['test'],"['test', 'tests']"
Testability,"> The point of this was to finally close issue #13. I believe issue #13 occurs when `@inbounds` is not used. I found this same issue (and its resolution) a while ago during the development of `OceanTurb.jl`. Edit: I see the benchmarks in thabbott/JULES.jl#22. Are you sure that corresponds to a measurable performance improvement (eg, is signal, not noise). It seems more likely to me that the two benchmarks are identical, which is consistent with the fact that `@propagate_inbounds` implies `@inline` (what we have been told).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/434#issuecomment-536318549:224,benchmark,benchmarks,224,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/434#issuecomment-536318549,2,['benchmark'],['benchmarks']
Testability,"> The tests use a lot of scalar indexing that's why they fail on the GPU:; > ; > https://buildkite.com/clima/oceananigans/builds/15604#018f40ed-787d-4e74-a5f4-ae1656fa3043/18-724; > ; > I think if we are comparing single numbers it makes sense to use `@allowscalar`.; > ; > If we are comparing vectors it could be nice to figure out how to get the tests to run without `@allowscalar` since presumably this is possible. Given that we're comparing elements of vectors with a maximum length of 6, I opted to use `CUDA.@allowscalar`. The impact on performance in this situation is minimal when running on a GPU.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2103388821:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2103388821,2,['test'],['tests']
Testability,"> There are a lot of new instances of `@allowscalar`, but rather than adding new instances we should be refactoring the tests so they don't appear. I added these because it was the only way to make tests pass locally. However, I can't fully reproduce tests results locally anyway, like I mentioned in my previous comment, so these may well be unnecessary (since these lines might be passing on buildkite).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468:120,test,tests,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1411337468,3,['test'],['tests']
Testability,"> There is also already a 1D validation test for the immersed boundary --- I wonder if it also shows this bug:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/master/validation/immersed_boundaries/immersed_hydrostatic_diffusion.jl. @glwagner I'm not sure. I tried running it, but got an method error on the `HydrostaticFreeSurfaceModel`: _FreeSurface( ...) is ambiguous_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900444098:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1935#issuecomment-900444098,1,['test'],['test']
Testability,"> There was a bug in some recent updates to KernelAbstractions.jl that caused Enzyme to break on broadcasting arrays in Oceananigans. This PR includes a test to make sure this bug doesn't occur again. Interesting! I think it's ok to add a broadcasting test. But it will be confusing to future developers if the test is explained / written as somehow testing a bug in _another_ package. If there's a bug somewhere else, we need a test in that packge (presumably that has been added). . This test also seems a little complicated. Why not just write a simple function that does a broadcast, and then try to autodiff that? Why do we need initial conditions, models, etc?. For example. ```julia; function times_c!(a, b, c); a .= b .* c # c is a number; return sum(a) # or whatever we gotta return; end. grid = RectilinearGrid(arch, size=(1, 1, 1), extent=(1, 1, 1)); a = CenterField(grid); b = CenterField(grid); c = 2; @test try ; autodiff(times_c!, a, b, c... # or something); true; catch; false; end; ```. It's super important for tests to be as short and easy to understand as possible, because maintaining test code is one of the main bottlenecks on development.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2105014020:153,test,test,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2105014020,9,['test'],"['test', 'testing', 'tests']"
Testability,> They haven't failed for a while... I'm closing this for now. Turns out they were STILL commented out! See my comment on #2912. I'm opening and will close if indeed these tests don't constitute issue any more!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1484467353:172,test,tests,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1484467353,1,['test'],['tests']
Testability,"> This PR tweaks the API to simplify non-uniform partitioning which should already be supported by the algorithm.; > ; > This PR also extends the tests to include non-uniform distributed partitioning; > ; > The proposal of this PR (up to discussion and tweaking) is to allow calling; > ; > ```julia; > arch = Distributed(CPU(); partition = Partition(Rx = [0.3, 0.1, 0.6]); > ```; > ; > which allows to distributed the domain over 3 workers which hold 30%, 10% and 60% of the computation, respectively. How would one manually specify the grid points on each rank with this API? This is a little non-standard since most of our APIs use words rather than symbols (ie it's not clear what `Rx` means just from reading the code).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3339#issuecomment-1762126912:146,test,tests,146,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3339#issuecomment-1762126912,1,['test'],['tests']
Testability,"> This all looks very promising. Silly question, how is `slowdown` computed exactly?. Probably. test / reference. so < 1 means ""speed _up_""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116109797:96,test,test,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1116109797,1,['test'],['test']
Testability,"> This is WENO order 5 on a stretched grid on the GPU in the nonhydrostatic model right? Seems like the problem might be in the advection of `w`. look like an out of bound error. Maybe using explicit checkbounds it will point out the error. What version of the branch was working?. Yes it is. The manifest entry for the working version is. ```; [[Oceananigans]]; deps = [""Adapt"", ""CUDA"", ""CUDAKernels"", ""Crayons"", ""CubedSphere"", ""Dates"", ""DocStringExtensions"", ""FFTW"", ""Glob"", ""IncompleteLU"", ""InteractiveUtils"", ""IterativeSolvers"", ""JLD2"", ""KernelAbstractions"", ""LinearAlgebra"", ""Logging"", ""MPI"", ""NCDatasets"", ""OffsetArrays"", ""OrderedCollections"", ""PencilArrays"", ""PencilFFTs"", ""Pkg"", ""Printf"", ""Random"", ""Rotations"", ""SeawaterPolynomials"", ""SparseArrays"", ""Statistics"", ""StructArrays"", ""Tullio""]; git-tree-sha1 = ""59cc53a3c6b579181932d55f94eae45ce51c6e14""; repo-rev = ""59cc53a3c6b579181932d55f94eae45ce51c6e14""; repo-url = ""https://github.com/CliMA/Oceananigans.jl.git""; uuid = ""9e8cae18-63c1-5223-a75c-80ca9d6e9a09""; version = ""0.77.0""; ```. I couldn't quite figure out what version that refers to, but maybe you understand manifest entries better than I do...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1179773940:581,Log,Logging,581,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1179773940,1,['Log'],['Logging']
Testability,"> This is also a nice change as it changes the time-stepping algorithm but we shouldn't need to regenerate the regression data. We omit halos from the regression test, right?. If we make this change, we may want to update the regression tests to include halos, pressures, and diffusivities (though it wouldn't be necessary, it might be wise)...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1069#issuecomment-711043092:162,test,test,162,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1069#issuecomment-711043092,2,['test'],"['test', 'tests']"
Testability,"> This is great! Have you started a PR already to support Sparse in AMDGPU proper?. @vchuravy yes here's the PR: https://github.com/JuliaGPU/AMDGPU.jl/pull/298. We're stuck for some time since we're getting some timing issues on a couple of tests; We get incorrect results depending on the timing of the operations. Even after adding synchronization after each operation, the error still persists. Other than that they seem to work fine. @jpsamaroo can update you on that. > So this PR is to merge something on an Oceananigans.jl branch, `amdgpu`. It modifies 482 files?!; > The `amdgpu` branch is waaay outdated so as a first step perhaps we need to bring that branch up to date? I'm wondering if the seemingly proposed changes to 482 files would be much reduced if we bring `amdgpu` up to date with `main`?. @navidcy @simone-silvestri I don't have write access to this branch so you can update the branch first before reviewing the PR. This work is not yet ready to be merged yet to the main branch so we decided in the past that this might be the place for it while we test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562:241,test,tests,241,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949#issuecomment-1448414562,2,['test'],"['test', 'tests']"
Testability,"> This is great, thanks @glwagner and @iuryt! Si Chen has been testing the code with a buouyant tracer added through forcing like this and he is running a comparison with Jenny Dingwall's simulations with Diablo. The extra `slip' velocity needs to vanish at the boundaries in order to conserve tracer, but then adding the advection term to the RHS forcing like @glwagner suggested seems to work and conserves tracer. We did something like this: . ```julia; lambda = 1 # decay scale for slip velocity in meters; for k=0:Nz+2; slip_vel.w[:,:,k].+=(tanh(max(-grid.zᵃᵃᶠ[k]/lambda,0))*tanh(max((grid.zᵃᵃᶠ[k]+Lz)/lambda,0))); end; ```. Makes sense!. Since there's a `dw/dz`, this means that the ""additional"" velocity field has divergence and thus tracer still not exactly conserved, right? But perhaps the divergence is small enough that it's almost conserved. Should we implement the advection differently (ie not using flux form) so that it's correct even when the velocity field is divergent? Another possibility is to have a flag, something like. ```julia; forcing = AdvectiveForcing(w=prescribed_w, flux_form=true); ```. Or, perhaps `divergent=true`, or something like that. Whatever's least surprising / intuitive...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082403863:63,test,testing,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1082403863,1,['test'],['testing']
Testability,"> This is great, though I'm wondering what it's role in the Oceananigans code base is. Is the intention to remove these bits once WENO is actually implemented in the code?. Yeah so the point of this PR was to test the WENO operators independently of Oceananigans.jl (also to play around with how advection schemes interact with different time steppers). The WENO operators were coded so that we can readily integrate them with the existing operators in `tracer_advection_operators`. So when an advection scheme abstraction is implemented and `weno.jl` is integrated into the main code, `verification/tracer_advection_1d/tracer_advection_1d.jl` can be converted into an Oceananigans.jl verification experiment. Right now it's just a WENO-5 verification experiment. > Why not?. Ah sorry I wasn't clear. I just didn't think running with CFL=4 would be possible in 3D. > I think the first course of action may be to do something similar to what we did for the nonlinear equation of state: implement a simple new advection scheme (even as simple as first order upwind?) for the purpose of designing an `Advection` abstraction. Agreed. First-order upwind is actually included in this PR; ```julia; @inline ∂x_advective_flux(i, Δx, u, ϕ, ::FirstOrderUpwind) =; max(u[i], 0) * (ϕ[i] - ϕ[i-1])/Δx + min(u[i], 0) * (ϕ[i+1] - ϕ[i])/Δx; ```; but it's so diffusive I don't know if we want to include it as an option (although it's up to the users, they may have a good reason to use first-order upwind).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-579900751:209,test,test,209,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-579900751,1,['test'],['test']
Testability,"> This is looking pretty good! My only comment is that it's not intuitive for a given user to figure out how to opt for a hydrostatic pressure separation. A flag called `separate_hydrostatic_pressure` that takes `true`/`false` would be much more intuitive, although we'd need a little more code. Should we prioritize user-friendliness here?. This is more flexible, because sometimes users want to have access to the pressure field prior to model construction. If we use a flag, then we either can't support that or have to put some annoying logic in the constructor. Since I feel it'll be rare that people want to change this kwarg, I think the trade-offs work out that its better to have a simpler constructor even if those rare users that want to separate hydrostatic pressure have to build `CenterField`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2088676711:541,log,logic,541,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2088676711,1,['log'],['logic']
Testability,"> This is the same benchmark performed with `ImplicitFreeSurface`, by imposing a divergent velocity `u(x, y, z) = x / 10` to make sure the implicit solver iterates. Looking at the results it seems like it doesn't iterate too much... (probably WENO cleans up?) And it is very weird that the `RectilinearGrid` version is not affected by the FreeSurface calculation? (I have double checked that the free surface solver is correct); > ; > #### Strong Scaling; > Grid size	Grid	GPUs	wall time	efficiency; > `1440×600×48`	`RectilinearGrid`	1	1.37 minutes	100%; > `1440×600×48`	`MultiRegionGrid`	2	1.05 minutes	65.2%. THATS CALLED A SPEED UP 🍻 . I think bathymetry interferes with the solver more. When the velocity field is _purely_ divergent + barotropic, it just produces waves that dissipate nearly instantly ?. It'd be good to come up with a reliable 3D initial condition for benchmarking iterative solver stuff....",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116787626:19,benchmark,benchmark,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116787626,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"> This is what I found:; > ; > ```; > (base) tomas@np900:~/repos/Oceananigans.jl$ grep -ri ""incompressible model"" *; > benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Times (ms)"", title=""Incompressible Model Benchmarks: CPU vs GPU""); > benchmark/benchmark_incompressible_model.jl: xlabel=""Nx"", ylabel=""Speedup Ratio"", title=""Incompressible Model Benchmarks: CPU/GPU""); > benchmark/benchmark_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model benchmarks""); > benchmark/benchmark_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model.jl: @info ""Benchmarking distributed incompressible model strong scaling with $(typeof(decomposition)) decomposition [N=($Nx, $Ny, $Nz), ranks=($Rx, $Ry, $Rz)]...""; > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df, title=""Incompressible model strong scaling benchmark""); > benchmark/strong_scaling_incompressible_model.jl:benchmarks_pretty_table(df_Δ, title=""Incompressible model strong scaling speedup""); > benchmark/README.md:Running the `benchmark_regression.jl` script will run the incompressible model tests on the current branch and on the master branch for comparison. This is useful to test whether the current branch slows down the code or introduces any performance regression.; > benchmark/benchmark_vertically_stretched_incompressible_model.jl:benchmarks_pretty_table(df, title=""Vertically-stretched incompressible model benchmarks""); > benchmark/benchmark_vertically_stretched_incompressible_model.jl: benchmarks_pretty_table(df_Δ, title=""Vertically-stretched incompressible model CPU to GPU speedup""); > benchmark/strong_scaling_incompressible_model_single.jl:@info ""Setting up distributed incompressible model with N=($Nx, $Ny, $Nz) grid points and ranks=($Rx, $Ry, $Rz) ($decomposition decomposition) on rank $local_rank...""; > benchmark/strong_scaling_incompressible_model_singl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932:119,benchmark,benchmark,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1870#issuecomment-882147932,12,"['Benchmark', 'benchmark']","['Benchmarking', 'Benchmarks', 'benchmark', 'benchmarks']"
Testability,"> This looks like a symptom of a larger problem and, indeed, does not seem to be tested. I think to solve it we should fix the time-indexing of reduced FTS.; > ; > We seem to be missing the 4D indexing of reduced FTS:; > ; > ```julia; > @propagate_inbounds getindex(f::XYFTS, i::Int, j::Int, k::Int, n::Int) = getindex(f.data, i, j, 1, memory_index(f, n)); > @propagate_inbounds getindex(f::XZFTS, i::Int, j::Int, k::Int, n::Int) = getindex(f.data, i, 1, k, memory_index(f, n)); > @propagate_inbounds getindex(f::YZFTS, i::Int, j::Int, k::Int, n::Int) = getindex(f.data, 1, j, k, memory_index(f, n)); > ```; > ; > to be added [here](https://github.com/CliMA/Oceananigans.jl/blob/abb66e32d333562dd9aaeb7dd2ed8fac5e781368/src/OutputReaders/field_time_series_indexing.jl#L108); > ; > and the 2D-Time indexing of reduced FTS; > ; > ```julia; > @propagate_inbounds getindex(f::XYFTS, i::Int, j::Int, time_index::Time) = getindex(f, i, j, 1, time_index); > @propagate_inbounds getindex(f::XZFTS, i::Int, k::Int, time_index::Time) = getindex(f, i, 1, k, time_index); > @propagate_inbounds getindex(f::YZFTS, j::Int, k::Int, time_index::Time) = getindex(f, 1, j, k, time_index); > ```; > ; > maybe to be added [here](https://github.com/CliMA/Oceananigans.jl/blob/abb66e32d333562dd9aaeb7dd2ed8fac5e781368/src/OutputReaders/field_time_series_indexing.jl#L116); > ; > and all the respective methods for 1D and 0D FTS. In theory, the boundary conditions should work as intended. Indeed, we should add a test for it. and the GPU adapted versions right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3663#issuecomment-2251206241:81,test,tested,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3663#issuecomment-2251206241,2,['test'],"['test', 'tested']"
Testability,> This provides another reason to include all the `Nz+1` face data for face-centered fields. Will this feature be easy to implement in the future?. So that comment is actually outdated now. The Neumann boundary conditions can be built into the `Nz x Nz` tridiagonal system. > Pretty simple PR I think because it basically just adds a test (please confirm... ?). Yes. It was originally going to add a vertically stretched pressure solver but then I realized it would be much better code design to do the refactoring I did PR #589 first then add the solver in. So this PR just adds a test that shows you can implement a vertically stretched pressure solver using the `BatchedTridiagonalSolver`. > I think the test may be incorrectly named and can also be greatly simplified. I'm not sure if the test is 1) not achieving its intended purpose or 2) is over-complicated. Either way I think it should be cleaned up a bit before merging. Yes it is unfortunately over-complicated because there is no abstraction for a vertically stretched grid or a stretched pressure so they are implemented in the test itself. This test will be massively cleaned up in PR #543.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/306#issuecomment-572266779:334,test,test,334,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/306#issuecomment-572266779,6,['test'],['test']
Testability,"> This seems correct for Periodic topologies but wouldn't it be the case for Bounded too. Do particles get bounced if you put them just to the right of the N'th face in a Bounded direction?. I've put up a similar test script in the PR:; https://github.com/CliMA/Oceananigans.jl/pull/3416#issuecomment-1875732332. Let me know if you think that is the expected behaviour, and what else should I test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3415#issuecomment-1875733999:213,test,test,213,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3415#issuecomment-1875733999,2,['test'],['test']
Testability,"> This should be ready to go. Please just restore the enzyme tests because we would like to maintain a parameter-estimation style test. For a closure like CATKE, we have to use the pattern where we set `model.closure = new_closure`. So despite that using an array for the diffusivity is _functionally_ equivalent to what was written, it is definitely not equivalent in terms of the code that is exercised for taking a gradient.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2402594047:61,test,tests,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2402594047,2,['test'],"['test', 'tests']"
Testability,"> This test:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/63cb6713efed46d47372038cc75c11192c75b73b/test/test_seawater_density.jl#L90; > ; > is failing on `GPU()` with `Float64` and `RoquetEquationOfState(:SimplestRealistic)`. I don't know if something changed -- I think nothing has changed.; > ; > I suggest `.==` -> `.\approx`; > ; > (cc'ing @jbisits, @glwagner in case you have an idea of something that changed in SeaWaterPolynomials or you can see a flaw in the tests, eg FT not passed in properly etc). Just curious, does the test for the `potential_density` function. https://github.com/CliMA/Oceananigans.jl/blob/63cb6713efed46d47372038cc75c11192c75b73b/test/test_seawater_density.jl#L118. also fail? (when on `GPU()` with `Float64` and `RoquetEquationOfState(:SimplestRealistic)`). Sorry to answer my own question here but it seems as if the `potential_density` tests all pass however it fails computing the in-situ density. ```; In-situ density computation tests | 40 2 42 31.6s; Potential density computation tests | 42 42 10.6s; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067972092:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553#issuecomment-2067972092,8,['test'],"['test', 'tests']"
Testability,"> This update just fixes a trivial problem with the test though, which we need so that tests pass on `main` (we can't merge any PRs until we fix this urgent issue).; > ; > I suggest that we fix more substantial issues with the test in a future PR? It might be helpful to open an issue with some of your comments too @christophernhill. @glwagner that sounds OK. the include(""dependencies_for_runtests.jl"") breaks. ```; export TEST_FILE=test_hydrostatic_free_surface_immersed_boundaries_congrad_solve.jl; /Applications/Julia-1.7.app/Contents/Resources/julia/bin/julia --project=. test/runtests.jl ; ```. workflow because of. ```; const AB2Model = NonhydrostaticModel{<:QuasiAdamsBashforth2TimeStepper}; ```. in ; ```; utils_for_runtests.jl; ```. which can't be redeclared since its const? Is there a trick to fix that?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002698278:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1002698278,4,['test'],"['test', 'tests']"
Testability,"> Thought: we provide the sugary syntax `.top` and `.bottom` for boundary conditions in `z`. Should we also provide east, west, south, and north, and avoid using `.left` and `.right` in the code for full clarity?. Sounds like a good idea. I think `setbc!` and `getbc` aren't fully tested so also worth adding some simple tests there. I'll open an issue to document this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589873540:281,test,tested,281,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589873540,2,['test'],"['tested', 'tests']"
Testability,"> To see a larger difference you have to use a vertically implicit closure.; > Anyways, I ll also do some more tests. But you reported results with the BCI example, right? Or you used a different solver?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486141613:111,test,tests,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3030#issuecomment-1486141613,1,['test'],['tests']
Testability,"> True. Although I wasn't able to reproduce the failing test results in any of the several GPUs I tried (they were either Tesla V100s or Quadro GP100). Every single time I tried to run GPU tests locally, they passed. Is it possible that the tests are running on a GPU that simply isn't supported anymore by one of the packages?. Here's GPU + driver info. ```; glwagner@sverdrup:~$ nvidia-smi -q. ==============NVSMI LOG==============. Timestamp : Sun Feb 5 17:58:59 2023; Driver Version : 465.27; CUDA Version : 11.3. Attached GPUs : 1; GPU 00000000:82:00.0; Product Name : NVIDIA Quadro P6000; Product Brand : Quadro; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880:56,test,test,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2900#issuecomment-1418288880,4,"['LOG', 'test']","['LOG', 'test', 'tests']"
Testability,"> Update: I used the formulas in the paper to approximate the gradient of pressure. In a test case that is pressure dominated, I found that the accuracy imporoved by more than what the theory predicted (> 16), but that is very encouraging that we are doing something right. Note that ""4th-order"" refers to the rate of convergence of the scheme as the grid spacing is reduced. For a particular resolution (and assuming that you are in the ""asymptotic regime of convergence""), the improvement gained from higher-order scheme involves both the rate of convergence / slope of the error estimate as well as a constant (the intercept) that's specific to the problem. As a result, you usually don't have a theoretical prediction for improvement at fixed resolution, I don't think (though I suppose you might be able to generate an estimate if you are differentiating a function with easily knowable properties). Empirically we usually find that higher-order schemes reduce the constant by quite a bit! Which is good --- since we often run marginally resolved problems, improving the constant (rather than the slope/rate of convergence) turns out to be the most important benefit of a high-order scheme. The plot is super busy, but the point is hopefully illustrated: higher-order advection schemes not only converge _more quickly_ to the exact solution as resolution is increased (eg, the slopes of the lines are steeper) but _also_ have reduced error at a _fixed_ resolution (eg, the error is less for WENO5 than CenteredSecondOrder at the fixed resolution 2^7):. ![image](https://user-images.githubusercontent.com/15271942/101667154-fba01600-3a1c-11eb-824e-f3ec82367229.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741942088:89,test,test,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741942088,1,['test'],['test']
Testability,> Usually restarting the test works for me to clear that error. Good to know. How can I do that?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1157900045:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2607#issuecomment-1157900045,1,['test'],['test']
Testability,"> Very nice work @glwagner , and thanks for making this. Lots of good stuff here.; > ; > ; > ; > In your calculations, you find that there is saturation at 16 threads. I might guess that you have 16 cores on one node? I would think that this should be node dependent.; > ; > ; > ; > Also, in the table, might it be possible to compute the efficiency as well? I think that's more standard than speed up. . Ah, this machine has 48 cores. Since threading has an overhead cost, we expect saturation at some point. It's surprising that this happens at just 16 cores for such a large problem (512^3) though. We can calculate more metrics for sure. I think it would be worthwhile to investigate whether other threading paradigms scale differently for the same problem. Numba + parallel accelerator might be a good test case. @hennyg888 would you be interested in that?. Here are some docs:. https://numba.pydata.org/numba-doc/latest/user/parallel.html",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886073990:807,test,test,807,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886073990,1,['test'],['test']
Testability,> We can delete this validation test too after this: https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/internal_tide.jl. The validation script includes a multi region example. Shall I still delete it?; I could also clean it up and add toml files in the validation script directory (see #3076).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3132#issuecomment-1577433799,1,['test'],['test']
Testability,"> We can run our attempts at a partial cell method without any errors. :); > ; > Today we plan to look at the results and see if the are reasoanble. Thinking about some tests to add would probably be a good idea.; > ; > As you know, the two methods are virtually identical. I am happy to go the way of generalizing `GridFittedBottom` and add in a tolerance and a way of specifying the height. Shouldn't be much work, it's just a matter of deciding exactly what we want this to look like.; > ; > I'll share our results later on and maybe that will help. Great development! I'm excited to see the results! It's great if we can have a better way to represent bathymetry, as deep cells are usually very coarse",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1044783608:169,test,tests,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2251#issuecomment-1044783608,1,['test'],['tests']
Testability,"> We clearly need to hard code quadratic drag though, because for stretched grids and partial cells (and other types of immersed boundaries in the future) we have to do precompute the logarithm of the grid metrics (to use in a Monin-Obukhov-type model) in each direction independently, as well as the logarithm of the roughness. That's what @whitleyv and I found also on #2275. I agree that may be better left for another PR...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105075269:184,log,logarithm,184,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105075269,2,['log'],['logarithm']
Testability,"> We could restrict ourselves to specific combinations of boundary conditions instead, which would reduce the number of possibilities. For example, we might have just doubly periodic in (x, y) plus flux in z on all fields, or singly-periodic in x and flux in (y, z) on all fields. Agree that `CoordinateBoundaryConditions` might be a weird name but yeah, maximum flexibility would be very powerful. Maybe the common use case isn't to impose each of the 30 boundary conditions one-by-one but we can just have nice helper functions/abstractions like; ```julia; model.boundary conditions += HorizontallyPeriodic(); ```. > @ali-ramadhan do you mean with regards to performance? I'm not sure. With multiple dispatch being core to julia it seems this scenario is not uncommon (30+ may not be very large). I'm still pretty new to Julia so yeah don't know if that will be an issue, especially on the GPU. Only way to find out is to try and benchmark! Maybe you're right and 30+ isn't a lot. @vchuravy any idea on whether 30+ parameterized types for a struct is too many? Would this hurt performance on the GPU?. > The function calc does not actually impose a boundary condition --- the imposition of boundary condition depends on, for example, the viscosity and diffusivity, and is a property of the equation (or turbulent closure) being implemented. Again for example, the K-Profile-Parameterization includes a modification of how a flux boundary condition is implemented. In other words, the ""specification of flux"" is separate from the ""imposition of a boundary condition"". The former is determined by the user. The latter is determined by the model/governing equation. I see. So if no parameterizations are being used, are the boundary conditions actually being _imposed_ then? Even with KPP, isn't the boundary condition still being _imposed_ only to later be modified by KPP?. I still feel like `bc.calc()` feels obscure, I'm not sure why a boundary condition should have to calculated. Perhaps it's jus",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-472241993:932,benchmark,benchmark,932,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-472241993,1,['benchmark'],['benchmark']
Testability,> We do have tests for `AveragedField` right?. Yes but they didn't catch #1767. > Do we need a more expensive / larger test (like the one proposed in #1767) to catch this bug?. I think so. #1767 seems like an important bug to catch since it's pretty serious and could crop up again in the future.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868843946:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868843946,2,['test'],"['test', 'tests']"
Testability,> We don't test those regularly --- it might be a new compiler etc. You can feel free to convert those to `@test` if you want to be a hero 💪. All the other tests have no passed so I've changed some of these which will hopefully pass now too (they do locally),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181563972:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181563972,3,['test'],"['test', 'tests']"
Testability,> We should also add a test similar to the one that was added in #3512. Doesn't that already exist? . We just have to adapt the test,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2000835614:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2000835614,2,['test'],['test']
Testability,"> We should always use default boundary conditions for `grid` and the location, eg `Face` or `Cell` along each dimension. I'm okay with doing this but should we be worried that not all `{Cell,Cell,Cell}` fields are tracer fields and not all `{Face,Cell,Cell}` fields are u-velocity fields?. > Just a note: I attempted this while working on abstract operations and was unable to solve the problem. But we are using new versions of julia + cuda tools all the time so it is / will be worth revisiting. Hmmm, do you remember what you got stuck on? I'd be in favor of reopening the issue and trying to adapt `Field` to work in GPU kernels. > For tuples of closures, everything related to the closure is tupled, including the DiffusivityFields. If there are different diffusivity fields for different closures, then it is possible to set them with different diffusivities?. Ah sorry I meant that passing a named tuple like; ```julia; boundary_conditions = (b=buoyancy_bcs, κₑ=(b=κₑ_bcs,)); ```; to the model constructor will apply diffusivity boundary conditions as expected. But if you have two closures and you want to impose different diffusivity boundary conditions on each one then you can't do so by passing a named tuple to the model constructor. You can of course use `DiffusivityFields` to accomplish this. We could upgrade the logic for interpreting boundary condition named tuples so that you can do something like; ```julia; κ1_bcs = (T=some_diffusivity_bcs, S=some_diffusivity_bcs); κ2_bcs = (T=some_other_diffusivity_bcs, S=some_other_diffusivity_bcs); boundary_conditions = (T=T_bcs, κₑ=(κ1_bcs, κ2_bcs)); ```; but it felt like a pretty edge case (very very few users would probably use it) so I didn't do it. But we can do it, it's within scope for this PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589456579:1331,log,logic,1331,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/631#issuecomment-589456579,1,['log'],['logic']
Testability,"> We should definitely get `TimeInterval` to work. This is important! Why doesn't it work? I don't understand the reason. Yes, I was also surprised. I retried and now it passed the tests, so I guess at some point I was doing something weird with `TimeInterval`, but I'm not sure what it was. It seems to work now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2022914525:181,test,tests,181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2022914525,1,['test'],['tests']
Testability,"> We should make the changes needed for both nonhydrostatic and hydrostatic models. @glwagner the reason why I hadn't removed masking from the hydrostatic model is that I'm really not familiar with it at all. So it's harder for me to figure out where it's okay to remove it, and testing it. I just did a best guess and removed it from shallow water and nonhydrostatic models in the places I thought appropriate. It would be good to have some feedback from someone more familiar with the code though on that, though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1223429496:279,test,testing,279,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1223429496,1,['test'],['testing']
Testability,> We should note the difference in the documentation to the Model constructor. +1. > We do need to extend the checkpointer to allow the user to pass in forcing functions and boundary conditions to `restore_from_checkpoint` in the case that these objects contain functions?. Don't think so as you can already pass in whatever `kwargs` you want to `restore_from_checkpoint`. But would be good to have a unit test for this functionality.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/405#issuecomment-531493346:406,test,test,406,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/405#issuecomment-531493346,1,['test'],['test']
Testability,> We should properly test that the pressure projection step produces an incompressible flow field (without computing w from continuity). This is being done since PR #711. I believe the convergence tests (see PR #767 and plots in PR #881) do test that the pressure projection method is indeed 2nd-order so I'm closing this issue.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/673#issuecomment-702296718:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/673#issuecomment-702296718,3,['test'],"['test', 'tests']"
Testability,"> We should run verification experiments at reduced resolutions and over short time intervals to ensure that they compile / run with the current version of the code. We do this already: https://github.com/climate-machine/Oceananigans.jl/blob/master/test/test_verification.jl. but that doesn't test that the verification experiment still produces the correct results, just that it runs (which is important too).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-563261580:249,test,test,249,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/547#issuecomment-563261580,2,['test'],['test']
Testability,"> We should use the same method on the CPU and GPU that permutes the dimensions of the array. . The problem is that we can do something more efficient on the CPU with FFTW's cosine transforms (I haven't benchmarked the permutating DCT algorithm on the CPU, although it's probably safe to assume that FFTW is faster). We may be able to switch to a a wholly more efficient pressure solver that solves tridiagonal systems in the vertical with PR #306 so then we can get rid of the permutation algorithm for doubly periodic configurations and have fewer Poisson solvers.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/475#issuecomment-545510373:203,benchmark,benchmarked,203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/475#issuecomment-545510373,1,['benchmark'],['benchmarked']
Testability,"> We will have to set up some test cases for sure.; > ; > Are you directly measuring memory allocation, or is the problem ""out of memory errors""? Because the second might have to do with temporary allocations. That's a good point! I've been measuring the memory usage right after defining `model` and right before calling `run!()` (the only things in between are the definition of `simulation` and a bunch of diagnostics), but I've definitely been focusing more on the errors. Here are some numbers that I think bring some clarity:. - Using Julia 1.6 and Oceananigans 0.77.5:; - Biggest grid I can run: `997×997×96 ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded} on GPU with 4×4×4 halo`; - Memory usage right after building `model`: 19712MiB / 32768MiB; - Memory usage right before running and after adding simulation and diagnostics: 25778MiB / 32768MiB; - Using Julia 1.7 and Oceanaigans 0.78.0:; - Biggest grid I can run: `941×941×90 ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded} on GPU with 4×4×4 halo`; - Memory usage right after building `model`: 16576MiB / 32768MiB; - Memory usage right before running and after adding simulation and diagnostics: 31026MiB / 32768MiB; - Using Julia 1.8 and Oceanaigans 0.78.0:; - Biggest grid I can run: `941×941×90 ImmersedBoundaryGrid{Float64, Periodic, Periodic, Bounded} on GPU with 4×4×4 halo`; - Memory usage right after building `model`: 16576MiB / 32768MiB; - Memory usage right before running and after adding simulation and diagnostics: 31026MiB / 32768MiB. Note that although Julia 1.6 + Oceananigans 0.77 ends up with the smaller memory usage in the end, it apparently uses a lot of temporary allocations because I get an out-of-memory error when adding diagnostics with bigger grids. That said, it still manages to have the smallest ""permanent"" memory usage and allows me to run larger simulations. Interesting results. The biggest difference seems to be in the allocations required for the diagnostics (or maybe `Simulatio",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299523285:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2794#issuecomment-1299523285,1,['test'],['test']
Testability,"> We won't reduce computations, because these operators are not short-circuiting (this is what we want to maximize performance for these inner functions).; > ; > Evaluating booleans isn't expensive. Short-circuiting logic can be expensive (or rather, prevent compiler optimizations) in hot inner loops. We've written the code so we don't use short-circuiting logic (`ifelse` rather than `if`, `&` rather than `&&`). Ah, I see. I hadn't noticed that. . > Either way we need both `east_bounded` _and_ `solid_interface` so the question is just how we shuffle logic between the two. We can consider changing `solid_interface`. If we change its behavior I would recommend calling it `fluid_solid_interface`. I think changing `solid_interface` to `fluid_solid_interface` (along with it's definition of course) is clearer. Especially because `solid_interface` confused me at first; I thought it effectively was supposed to test for the fluid-solid interface. But at this point I don't feel strongly about it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047193281:216,log,logic,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047193281,4,"['log', 'test']","['logic', 'test']"
Testability,"> We would need CUDA 3.8.0 to develop multiGPU architectures without having to use MPI.; > ; > You mind if I revamp this PR and try to see what we need to do to update CUDA? I think the tests not passing comes from the fact that we also need to update CUDAKernels to version 0.3.3 (we are now using 0.3.0); > ; > Actually for me everything works very good from main just switching to CUDA 3.8.0 and CUDAKernels 0.3.3. That is very exciting! Do you know of any scaling results that people have done using this multiGPU approach? I'd be keen to try this with Oceananigans when it's working. I know that we tried using MPI and GPU last summer and had some problems. One, getting it to work was a pain. Two, the effiicency dropped down to 60% when going fro 1 to 2 GPUs. I now we can do better, and maybe this is a way of doing that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1044679744:186,test,tests,186,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-1044679744,1,['test'],['tests']
Testability,"> What are the criteria of the validation test?. Hmmm, I'm not sure there's a rigid criteria. We can do a qualitative check that this channel exhibits the same behavior as Haine & Marshall (1998), e.g. figure 8 (see below). Perhaps a better check would be to do a ""volumetric census of PV and N^2 classes"", e.g. see figure 10(b) below. If we can't come up with a good validation test then maybe this script can just serve as a baseline for future channel setups?. ![image](https://user-images.githubusercontent.com/20099589/85021505-f03ff200-b13f-11ea-936d-df71a69eaefd.png). ![image](https://user-images.githubusercontent.com/20099589/85021594-0c439380-b140-11ea-8433-91d25fb85ab6.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/771#issuecomment-645994185:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/771#issuecomment-645994185,2,['test'],['test']
Testability,> What are the current results of the benchmark?. I think Henry has the results at the top of #1861. They can be copied here if you prefer.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884220433:38,benchmark,benchmark,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-884220433,1,['benchmark'],['benchmark']
Testability,"> What are the differences?. I haven't plotted/analyzed the solutions for the regression tests carefully yet (tbh I'm not familiar yet with how the regression tests work and how the data is stored), but I have carefully compared my own simulations and a couple of the examples using `main` and this branch. The only differences I see are the usual turbulence IC ""issue"" where small disturbances in the flow amplify and lead to a different solution (pointwise speaking) but with the same statistics, qualitative behavior, etc. Given my unfamiliarity with the regression tests I'm not sure how to proceed solving the tests. So I'd appreciate some guidance here on how to move forward to get all the tests passing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827:89,test,tests,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1558355827,5,['test'],['tests']
Testability,"> What code are you running?. I was testing my internal tide example, where the [code](https://github.com/liuchihl/internal-tide-mixing/blob/3D-realtopo-delta/initialize_internal_tide.jl) is written as a function, and the [run script](https://github.com/liuchihl/internal-tide-mixing/blob/3D-realtopo-delta/run_internal_tide_testing.jl) is used to adjust the parameters. ; (I could work on an MWE if necessary.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2429692902:36,test,testing,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2429692902,1,['test'],['testing']
Testability,"> What else do we need to do for this PR (assuming the tests work this time)? I think since the goal here was to modify the existing code to allow proper open boundaries to be implemented we've achieved that here and in #3508, and further work on open boundaries is a different discussion about what methods we want to implement, automatic convenience constructors, etc. This PR modifies `Open` to accept a `matching_scheme`, but am I correct that we do not use it? Or provide any choices except `Nothing`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2019349251:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2019349251,1,['test'],['tests']
Testability,"> What is being plotted in the comparisons? It looks like 3D fields are being outputted, but the time series plots show some reduction of the 3D data. In the 1D comparisons I'm plotting the volume average over the whole domain. Sorry if that wasn't clear. > I think I might have missed something --- in the very first example, was TKE computed using a ComputedField or KernelComputedField? Are the later results in this post consistent with the first posted results?. My example script changed a bit throughout the day. In the beginning I was only using KernelComutedFields since I thought that was the source of the problem. Later I started computing the diagnostics with both KernelComputedFields and ComputedFields for comparison. Which is when I found that ComputedFields were also output incorrectly... So basically the code that I linked [in my previous comment](https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809655170), which is the most up-to-date, should be the one we should continue to use to sort this out I think. > Is there any way that any of this has to do with time-step alignment?. It's possible, but I'm not sure how to test that for now... > Lastly, why is the window slightly different from the TimeInterval? What happens when the time-interval and averaging window are the same (which appears to be our default?). I think I reported it in an issue a while ago, but basically if I set the `window` to be exactly the same as `interval` I get warnings on Oceananigans telling me that I'm calculating the average before the window is complete or someting like that (this should be easy to fix I think...). So I always set the `window` to be slightly smaller than `interval` to avoid those messages. I tried setting the `window` exactly the same as `interval` and the results were the same (plus I got a lot of those warnings...).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809905267:1159,test,test,1159,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809905267,1,['test'],['test']
Testability,"> What is the Reynolds number (Re) for this problem? In this problem, the pressure solver errors are probably inversely proportional to Re. Could be nice to have a low Re reference so we can measure the changes that occur when we fix the pressure solver. It's Re = 100 from the plots, which is the lowest Ghia et al. (1982) go. Could still be relatively high Re as far as pressure solver errors go... The ""forced flow"" test in #573 is better in this regard as it runs at Re = 1.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/572#issuecomment-597835763:419,test,test,419,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/572#issuecomment-597835763,1,['test'],['test']
Testability,> What is the difference in the regression tests between `main` and this PR?. afaik nothing. I think the change in the pressure algorithm causes very small differences in the solution which are enough to make the regression tests fail.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557714636:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1557714636,2,['test'],['tests']
Testability,> What make sense logically is that `validate_closure` is called first. Because if it's not a valid closure why bother doing anything else...; > ; > But I'm not sure if it's difficult to refactor. I don't think its hard.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2347634362:18,log,logically,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2347634362,1,['log'],['logically']
Testability,"> What's happening presently is KA is forcing an older version of Enzyme to be used in the tests, that doesn't have the inactive_type used by the testing infra.; > ; > This PR [JuliaGPU/KernelAbstractions.jl#426](https://github.com/JuliaGPU/KernelAbstractions.jl/pull/426) added relevant parts to KA, which currently is waiting for the julia registry to release a new patch release: [JuliaRegistries/General#93272](https://github.com/JuliaRegistries/General/pull/93272); > ; > Once that lands, this should succeed. Ok great!. Also let me know if its ok with you if I set up a new buildkite step for the enzyme extension.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1759975633:91,test,tests,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3327#issuecomment-1759975633,2,['test'],"['testing', 'tests']"
Testability,> What's the point?. Only to benchmark against the examples before you simplified them to see how faster the docs built. The other pr also includes a simpler bci example now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3139#issuecomment-1583172591:29,benchmark,benchmark,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3139#issuecomment-1583172591,1,['benchmark'],['benchmark']
Testability,> When I ran this locally I got a load of `@test_broken` passing for computed fields which is quite strange. We don't test those regularly --- it might be a new compiler etc. You can feel free to convert those to `@test` if you want to be a hero 💪,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181261472:118,test,test,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2181261472,2,['test'],['test']
Testability,"> When you reduce the averaging window do differences diminish? What if your averaging window is a dt?. Okay so this is a good test and the results are not at all what I thought they were gonna be. In the figures and videos below the intervals for both the snapshots and time averages are exactly the same as `Δt= 20minutes`. Decreasing the intervals to Δt actually increased the difference between avg and snapshot a bit, but mostly they remain the same. (Note that the results are now exactly two orders of magnitude smaller than before, due to me not including the viscosity in the previous calculations, which is exactly 0.01.). ![Screenshot from 2021-03-29 10-30-17](https://user-images.githubusercontent.com/13205162/112875996-ce35b180-9079-11eb-9239-7300afd4230d.png). > What does a movie of dissipation look like?. That's actually interesting. I had looked at the movie based on the snapshots and it seemed fine, but I made the mistake of not checking the averaged outputs as a movie. I plotted it but it looks weird. Here's a movie of dissipation close to the surface based on the snapshot outputs:. https://user-images.githubusercontent.com/13205162/112876926-f376ef80-907a-11eb-8d8b-412ce466f4fc.mp4. And here's the same movie but based on the avg outputs (which now have `interval=Δt`). (Note that the color ranges are the same). https://user-images.githubusercontent.com/13205162/112876947-fa056700-907a-11eb-9de1-a7fc3ee39253.mp4. To me the snapshot movie looks okay but I definitely did not expect what happens in the avg one. It looks like there's some sort of accumulation which shouldn't be there, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809575458:127,test,test,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809575458,1,['test'],['test']
Testability,"> When you say ""initialization"" you mean the time between when you call `run!(simulation)` and before the simulation actually starts?. I think so, it corresponds to this line in the log for example:; ```; [ Info: Initializing simulation...; [ Info: ... simulation initialization complete (16.509 minutes); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1798383060:182,log,log,182,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3381#issuecomment-1798383060,1,['log'],['log']
Testability,"> While we should try to use powers of 2 for performance, I think that overly restricts the model resolutions we can be running at. There are a LOT of choices between e.g. `512x512x128` and `1024x1024x128`. It might be that the largest model that fits in memory isn't nice powers of 2. Users may have various reasons for running resolutions that aren't powers of 2. I over-simplified. FFTs are efficient when there are a small number of prime divisors --- 2, 3, 5, 7 --- of the length of the sample. 100 may actually be ok because it is 2\*2\*5\*5. I don't feel strongly, but you will find that most people running simulations are using powers of 2 and 3 (128, 192, 256, 384, 512, 768, 1024) --- even when their code has no FFTs! Perhaps the purpose of this convention is so people who *do* use codes that rely *heavily* on FFTs are able to run code comparisons. I find the convention to be an appropriate best practice. An 1D FFT of length 257, for example, is 4 times slower than an FFT of length 256 on my machine. For tests, of course, using small numbers of prime divisors is completely irrelevant; I just want to encourage best practices and promote awareness of them, and also implicitly emphasize to users that this code uses FFTs, and don't want random person X to read the tests and scratch their head and ask ""doesn't this code rely on FFTs?"" (like I did when I saw the examples). > Just a note that if we want to reuse `model.metadata.arch` with GPUifyLoops.jl then the options should be `:CPU` and `:GPU` (instead of `:cpu:` and `:gpu` which is what `ModelMetadata` currently uses) as I believe GPUifyLoops.jl expects ""capitalized"" Symbols. I certainly prefer that. It may be academic because the architecture should probably be a parameter of `Model`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/97#issuecomment-468533848:1022,test,tests,1022,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/97#issuecomment-468533848,2,['test'],['tests']
Testability,> Why are the tests being run twice? It's confusing to interpret the test results. I know! I’m confused. Perhaps yet some other buildkite setting? I’ll try to figure it out…..,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867988334:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3413#issuecomment-1867988334,2,['test'],"['test', 'tests']"
Testability,"> Why do model tests have to be long runs? Surely a few timesteps is enough; > to see if anything is broken. That is true but we already do this. Most tests run very small models for a single time step. Some run for a bit longer to test e.g. incompressibility or tracer conservation over time but even then it's like 10 time steps, and those tests don't take very long. The problem is just sheer number of tests as we try to test each feature on CPU and GPU, Float32 and Float64, with every closure, etc. We been adding tests over time so we currently have ~2000 tests in total (counting GPU tests too). Julia's compiler takes a while to compile everything so that doesn't help. The tests run in 15-20 minutes on my laptop but the free CI servers aren't as powerful so I'm not surprised the tests take over 50-60 minutes. We're only going to be adding more tests in the future.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/139#issuecomment-567025753:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/139#issuecomment-567025753,12,['test'],"['test', 'tests']"
Testability,"> Why though it takes 1.5hrs? Any ideas?. Not sure. It runs two models for over 3000 time steps, but the GPU should make that pretty fast. The only ""unusual"" thing I see with that example is that it's a 0d model, and maybe that doesn't play well with the GPU?. In any case, maybe it's easier to just test that a model with `ConstantCartesianCoriolis()` returns the correct tendencies instead of running two models for a whole inertial period?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2647#issuecomment-1184640836:300,test,test,300,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2647#issuecomment-1184640836,1,['test'],['test']
Testability,"> Why? Because CUDA replaces Int64 with Float64 when exponentiating:; >; > https://github.com/JuliaGPU/CUDA.jl/blob/5d6127dbbef495c94d3dd8de98162188062e11b1/src/device/intrinsics/math.jl#L218-L224. I also understand that from the code snippet. My question is: why not replace `const ƞ = 2` with `const ƞ = 2.0`, i.e. with a Float64? (Assuming the benchmarks remain the same, that is.) My understanding is that replacing it with with Int32 can make us forfeit some precision, no?. Also two other comments:. - Should we look for other places in the code that do that? Seems like a pretty easy ""mistake"" to make.; - Should we create an issue about this on CUDA.jl? Seems unnecessary or, if necessary, at least a warning should be in place, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869006040:347,benchmark,benchmarks,347,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1770#issuecomment-869006040,1,['benchmark'],['benchmarks']
Testability,"> With this change the whole pressure field is found through the nonhydrostatic solve. This seems like a very minor change to the temporal discretization, but it does cause the regression tests to fail (and I think @tomchor noticed some differences in the solution for ocean problems --- maybe there was a bit more noise?). The video here: https://clima.github.io/OceananigansDocumentation/previews/PR1910/generated/internal_wave/; (using the preview from https://github.com/CliMA/Oceananigans.jl/pull/1910) is what more clearly illustrates the differences. The difference is more subtle in the other examples",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1107074113:188,test,tests,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1107074113,1,['test'],['tests']
Testability,> Would that cover Oceananigans cases?. I'll let @glwagner answer this part since he knows much more about this than I do. But do you also suggest that we change the exponentiation in Oceananigans based on this issue? If so I'll start a PR and run some benchmarks.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1832#issuecomment-875899644:253,benchmark,benchmarks,253,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1832#issuecomment-875899644,1,['benchmark'],['benchmarks']
Testability,> Would you like me to keep this open until after I test the new release?. Just re-opened the issue in case it still persists. Feel free to close this issue once you test the new release. I'll ping back here once v0.44.1 is out.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/537#issuecomment-724083507:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/537#issuecomment-724083507,2,['test'],['test']
Testability,"> Yeah that would be a good idea, although not sure what a good test would be. Double diffusive convection?. Double diffusion doesn't require a nonlinear equation of state (it requires two tracers with different diffusivities, which we actually do not currently support). But perhaps there is a simple cabbeling example that we can come up with.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533089659:64,test,test,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533089659,1,['test'],['test']
Testability,"> Yeah that would work. It's a bit weird to pass `y=(-1,1)` to the grid constructor when `y` is `Flat` but it seems to be ignored. An alternative would be to pass the grid as an input to `run_simple_particle_tracking_tests` and move all the grid construction logic (including the stretched vertical grid) to separate functions. Maybe better is to create a list of grids:. ```julia; three_dim_grid = RectilinearGrid(arch, ...); x_flat_grid = RectilinearGrid(arch, topology=(Flat, Periodic, Bounded), ...); ```. etc, then pass the `grid` into `run_simple_particle_tracking_tests`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2061871518:259,log,logic,259,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2061871518,1,['log'],['logic']
Testability,"> Yeah we don't use it here. I could add a simple choice e.g. boundary `value = (external state-internal state)/relaxing` time as an example?. Right. The validation is interesting. It shows that the code currently supports open boundaries. Presumably, the algorithms / matching schemes you have looked into serve some purpose. What is that purpose? Do they make the size of the sponge layer smaller?. Now that you have a basic example that illustrates an open boundary condition implementation with no matching scheme, you are in a position to implement a non-trivial matching scheme, and demonstrate its benefit. If the matching scheme has some benefit, then we are motivated to support it by adding source code and tests...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2021435396:717,test,tests,717,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2021435396,1,['test'],['tests']
Testability,"> Yeah, I've done some tests here: [#3646 (comment)](https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2211254101); > The 1D test is consistent with the analytical solution, which works great!. @liuchihl, I think @navidcy is asking about smaller unit tests that could be run in Continuous Integration (CI) to automatically test the package whenever any changes get made. The simplest test would be a 1D simulation with a background linear tracer profile with boundary conditions of $\text{Flux} = - \kappa \partial_{z} c$ at the top and bottom. The correct solution would be that nothing happens when the simulation is time-stepped.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287291950:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287291950,5,['test'],"['test', 'tests']"
Testability,"> Yep, I would call it bulk velocity though, instead of phase speed, and change the name from `Orlanski` to something more descriptive like `AdvectiveOutflow`. But these are mathematically identical right? Orlanski called is a ""phase speed"", but ""outflow velocity"" is equally valid and refers to exactly the same mathematical object. The reference you posted says. > The test results also confirm that this type of boundary condition, which was originally designed by Orlanski primarily for equations which are hyperbolic in nature, also performs well for parabolic problems. I think we can keep the name ""Orlanski"" and provide a generic interface for specifying the outflow speed (whatever you want to call it). It can be user-specific, dynamically computed, etc. The code can be extensible, so if users want to experiment with different methods for computing the outflow speed, this is possible.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1965488832:371,test,test,371,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-1965488832,1,['test'],['test']
Testability,"> Yes, I think we should probably put the high-order reconstructions in `Operators`. When we give an advection scheme to `scheme`, is there an assumption that we are using vector invariant? I'm still a little confused by the logic of the API. Maybe clarifying here will help?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2729#issuecomment-1244089154:225,log,logic,225,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2729#issuecomment-1244089154,1,['log'],['logic']
Testability,"> Yes, can we add a test? Probably good to add a `@test_throws` for the `ArgumentError` as well. Sure thing. In `test_dynamcs` maybe?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875929668:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-875929668,1,['test'],['test']
Testability,"> Yes, that seems promising! For some problems of that nature we have recommended that people write functions to interpolate their discrete data, since one can then change resolution seamlessly... but perhaps there's a case where writing an interpolator doesn't make sense or is too cumbersome for a simple setup. 🤔. Writing an interpolator function would certainly be the most elegant way but some user might already be used to other regridding tools (like nco) and would prefer to read in some fields?. A simple fun example for using array inputs:. Prepare a tracer field by backward advecting the attached image or a logo in a Stommel gyre. Save the distorted image and now prepare the example using this distorted image as the initial condition for a forward advection :-). More seriously you could do the example including backward and forward integration to show the quality difference of several advection schemes. ![image](https://user-images.githubusercontent.com/19711382/118604859-ef7f6800-b7b5-11eb-87de-98934b4df17d.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1656#issuecomment-842903736:620,log,logo,620,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1656#issuecomment-842903736,1,['log'],['logo']
Testability,"> Yes, this simulation is a bit underresolved I think. Increasing ν would definitely help. The reason I didn't do this is because when I increase it to the point that the simulation is well-resolved, then the videos become pretty boring! I'd need to increase the number of points too and then it would be too costly of a simulation for a docs example.; > ; > This also depends on the philosophy behind the docs examples. Do we want them to be simulations that absolutely hold scientific scrutiny from all fronts? If so then yeah, I should probably make it better-resolved. I see the docs example as having some wiggle room, though, as long as it teaches users something valuable. But that's obviously up for debate. I think underresolution is ok; many of the examples are underresolved, mostly because we want them to be cheap. The docs examples (in my opinion) are to demonstrate code functionality; eg give users the tools and inspiration they need to set up their own experiments. . A great docs example does go above and beyond and also includes lessons about physics, style and scripting practices, and creative uses of the code. So we could imagine a docs example that illustrates the _concept_ of numerical convergence, and how to build such a test using Oceananigans. But I don't think the mere _realization_ of convergence is that helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-953850791:1251,test,test,1251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1498#issuecomment-953850791,1,['test'],['test']
Testability,> You are right that maybe horizontally `Flat` does not work in general with lat-long. I change the test to have lat-lon grids with only one. of the horizontal directions flat. I think we should add a warning/error message when someone tries to create a lat-lon grid with both lat and lon being Flat. (but not in this PR).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630240073:100,test,test,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630240073,1,['test'],['test']
Testability,> You can change the closure used in the regression test by changing this line:; > ; > https://github.com/CliMA/Oceananigans.jl/blob/32c5c5a2d0f441a4b663866d511807d0f9413c90/test/test_regression.jl#L74. Just did 2 min ago :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889336673:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1908#issuecomment-889336673,2,['test'],['test']
Testability,"> You can try incorporating the background buoyancy field into the forcing functions (formulated using the discrete form). You may also try inserting the parameters as globals rather than using the kwarg `parameters` (not sure if that will help). I'd also suggest testing whether the Smagorinsky closure affects the results of the simulation; if you can avoid using that you might be able to compile more complexity. @glwagner thanks for all these tips. I've tried them all (including using the discrete form) and the only thing that allows me to achieve the number of tracers I need is using `closure=nothing`. However I don't think that's an option for me since I will probably need the physical (KE) dissipation at some point in the research, which doesn't exist without a closure. ; Also I think `closure=nothing` prevents me from using flux boundary conditions, no?. What would you recommend as the next step?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1402856222:264,test,testing,264,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2869#issuecomment-1402856222,1,['test'],['testing']
Testability,"> `2)` is because I cannot think of a situation where you would want to output something different than Array? But please correct me if I'm wrong. I haven't found another example in this repository. We chose `array_type` to permit the flexibility of other array types. I don't know enough to say that we would _never_ want another array type. Better to be defensive than aggressively constraining user action?. `Float32` used to be the default. However, this produced a lot of pain in some testing situations where we wanted to show bitwise reproducability / accuracy in saving. I can't remember all the details, but after a few user issues (in addition to our own pain), we decided to switch to Float64. I agree that Float32 is better, but could be regarded as ""premature optimization"" in this case. Definitely open to discuss though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3214#issuecomment-1679415894:490,test,testing,490,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3214#issuecomment-1679415894,1,['test'],['testing']
Testability,"> `IdealizedNonlinearEOS` or `IdealizedNonlinearEquationOfState`?. I think we should remain consistent in naming types so users aren't surprised. So either we use both `LinearEOS` and `IdealizedNonlinearEOS` together, or `LinearEquationOfState` and `IdealizedNonlinearEquationOfState` together. I'm in favor of spelling out `EquationOfState` explicitly as not everyone will be familiar with the `EOS` acronym and I think it'll result in more readable scripts. It's also not going to be used frequently, most scripts use the name once so I think the acronym doesn't help user scripts, it just makes `equation_of_state.jl` more readable for us. > Are we ok with using `buoyancy` as the name of a function and also the name of the struct that holes buoyancy-related parameters?. I agree that buoyancy only shows up as a perturbation anyways, but I think it's confusing to define `buoyancy` to return, technically, the buoyancy perturbation. If there were a buoyancy function I think it should return `b = ρg`. So I'd vote to call the function `buoyancy_perturbation`. But if the consensus is to call it `buoyancy` then I think that's fine. Users are expected to interact with `model.buoyancy` but most users may not use the `buoyancy` function (I assume it's not exported). So it's probably okay to use the same name to increase code clarity. > Create a `BuoyancyTracer` struct that uses `T` as buoyancy (when we have arbitrary tracers, we will rename this to `b`); > Tests that make sure the `RoquetIdealizedNonlinearEquationOfState` can be used with `Model`. +1. > Open an issue to create dynamics / physics tests to make sure that the idealized nonlinear equation of state works properly. Yeah that would be a good idea, although not sure what a good test would be. Double diffusive convection?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533081843:1465,Test,Tests,1465,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533081843,3,"['Test', 'test']","['Tests', 'test', 'tests']"
Testability,"> `KernelAbstraction.synchronize(device(arch))` would be the same as the previous `wait(device(arch), event)` where the error would be thrown. Thank you. I was about to comment this:; > Another thing with the new kernels. I believe I've now got the particle advection kernels working, but unless some event causes a delay, for example printing some informaiton out, the `advect_lagrangian_particles!` event does not finish before the test tries to test that its been correctly done which causes it to fail. . >If I change it so that `advect_lagrangian_particles!` returns `advect_particles_kernel!(...`, and wrap `advect_particles_kernel!` in wait (i.e. `wait(advect_lagrangian_particles!(particles, model, Δt))`) then it does run correctly. . >This seems like a bigger issue with how kernel events are working? If other events aren't being finished in order this might cause other issues?. But the new alternative should be to call `KernelAbstraction.synchronize(device(arch))` instead then?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017:434,test,test,434,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1514597017,2,['test'],['test']
Testability,"> `SplitExplicitFreeSurface` works well here. For reference, the script I'm using is here : https://github.com/FluidNumerics/oceananigans-on-amd-gpus/blob/main/benchmarks/baroclinic_adjustment/baroclinic_adjustment.jl; > ; > I'll get profiling results posted soon. Nice! Yeah, since. https://github.com/FluidNumerics/oceananigans-on-amd-gpus/blob/9a0c6fa5e3400949d0bb14b3f22b033b64f2d124/benchmarks/baroclinic_adjustment/baroclinic_adjustment.jl#L85 . is commented out I think this whole script will run on GPUs! The animation at the end I think will be generated on the CPU by default. You can also omit that (unless you want a pretty movie)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1950525291:160,benchmark,benchmarks,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1950525291,2,['benchmark'],['benchmarks']
Testability,"> `Topologies benchmarks` --> Add `(Bounded, Bounded, Bounded)` for CPU, no?. Yeah that would probably make sense but then the code would fail when trying to compare CPU and GPU results for the same topologies (to calculate a CPU -> GPU speedup):. https://github.com/CliMA/Oceananigans.jl/blob/55b6743dffd8d45040d6a677c2dfecaaf35f6a23/benchmark/benchmark_topologies.jl#L37-L41. I thought about adding some logic to ignore cases that aren't common to both the CPU and GPU benchmark suites but then thought it would be better to just resolve #1007 haha",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-726460134:14,benchmark,benchmarks,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-726460134,4,"['benchmark', 'log']","['benchmark', 'benchmarks', 'logic']"
Testability,"> ```julia; > julia> using CUDA; CUDA.allowscalar(true); > ; > julia> model.velocities.u.data; > ```. This also isn't working for me now. Although I'm sure it did work at some point because I've tested this. I'm okay removing parts of this page this and linking to some CUDA docs. What led me to write that instead of referring to a link is that I don't find the [Julia GPU docs](https://juliagpu.org/cuda/) very helpful and couldn't find a docs page that explained the differences very clearly. I still can't, actually, but if anyone can suggest a page I also think it's best to just link to that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2316#issuecomment-1060811190:195,test,tested,195,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2316#issuecomment-1060811190,1,['test'],['tested']
Testability,"> `benchmarks/Manifest.toml` had CUDA updated to 3.7 which caused problems when benchmarking Oceananigans restricted to 3.3.6. This PR adds a `compat` to `benchmarks/Project.toml` and downgrades `CUDA`.; > ; > I think maybe a better solution would be to add Oceananigans explicitly to `benchmarks/Project.toml`. But then to run the benchmarks on the current repo we'd have to update the environment every time. Is it possible to automatically pull compat entries from the repo's `Project.toml`? (If it is, should we?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090355921:3,benchmark,benchmarks,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2417#issuecomment-1090355921,5,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"> `test_ensemble_hydrostatic_free_surface_models.jl` fails on this PR and I can't figure out why. In particular, the case with many different Coriolises...; > ; > ```julia; > julia> include(""test_ensemble_hydrostatic_free_surface_models.jl""); > ```; > ; > fails...; > ; > This is affecting the tests on [CliMA/ParameterEstimocean.jl#295](https://github.com/CliMA/ParameterEstimocean.jl/pull/295). fixed it",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2786#issuecomment-1296357722:294,test,tests,294,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2786#issuecomment-1296357722,1,['test'],['tests']
Testability,> `test_simulations.jl`has a function called`run_time_step_wizard_tests`that has several tests for a`RegularRectilinearGrid`. We could add in a test tha tuses a stretched vertical grid. Just one option that comes to mind. Thanks for the suggestion. I added an extra test there with VerticallyStretchedGrids which would have failed before this bug fix. Let's see if everything passes,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866149400:89,test,tests,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1751#issuecomment-866149400,3,['test'],"['test', 'tests']"
Testability,"> afaik the second test filter is only needed when assuming that `β` can vary between scales. I think you're correct here! Sorry for the confusion here, but I suppose by scale-invariance I mean `β` has a power law dependence on the scale size. And since we were trying to implement the scale-dependent version, `β` would vary across different scales? Hence we need the `α=4` filter as well. Am I understanding Equation (26) in [Bou-Zeid et al. 2005](https://dx.doi.org/10.1063/1.1839152) correctly here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3638#issuecomment-2187284277:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3638#issuecomment-2187284277,1,['test'],['test']
Testability,"> any suggestions for tests I might add to get the coverage up?. Hmmm, I think for now it's sufficient that the regression tests pass as this PR should preserve existing functionality. If you're going to implement more rigorous/high-level LES tests in the future then the coverage will go up. And it'll probably become clearer which unit tests are needed. > Lastly, I am thinking that all the doc strings in closure_operators.jl are actually a detriment to readability and understandability. Thoughts?. I kind of agree, but with the docstrings we can integrate them into the documentation, and if the docstrings have LaTeX then we can view the operators alongside the math in the docs. I guess it's readable documentation vs. more readable code? Good practice says we should probably keep them, but maybe we can separate them somehow? I guess right now we only read the code but maybe in the future we'll mainly be reading the docs and not the code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496471848:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496471848,4,['test'],['tests']
Testability,"> apparently something's wrong -- docs are running for ~6hrs~ 8.5hrs and counting...... :(. Then I truly don't understand. The docs are building locally for me. The only thing I'm not testing locally are the examples. Could the culprit be there somehow?. @navidcy do you mind if I use buildkite for some experiments? e.g. trying to compile the docs without examples, etc?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1477896891:184,test,testing,184,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1477896891,1,['test'],['testing']
Testability,"> as mentioned on slack here's @jlk9 's Enzyme integration test PR #3480; > ; > We should check that the tuple doesn't also break that (or try to find the correct mutually happy solution like maybe vararg type). @jlk9 , the test on #3480 does not pass right now, is that correct?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1946397811:59,test,test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3477#issuecomment-1946397811,2,['test'],['test']
Testability,"> as performance during testing doesn't matter. We do have a small number of tests that might benefit from faster code, like the pressure solver convergence tests? . > Should we still consider merging this? Once tests run I can do a comparison to see how many minutes (or seconds?) `-O0` saves us?. If it doesn't slow the tests down, I'm happy to merge and we can consider changing the optimization level in the future if its warranted. I think being explicit and deliberate about it is a positive change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1078#issuecomment-712844340:24,test,testing,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1078#issuecomment-712844340,5,['test'],"['testing', 'tests']"
Testability,"> but some user might already be used to other regridding tools (like nco) and would prefer to read in some fields?. I hadn't thought of that possibility --- that makes sense! Especially since there are often non-trivial constraints on regridding, such as a need for high-order accuracy and/or conservation of volume budgets. > Prepare a tracer field by backward advecting the attached image or a logo in a Stommel gyre. I love this idea! We can use this example to both demonstrate working with array data in `HydrostaticFreeSurfaceModel` and also using `velocities = PrescribedVelocityFields` (in addition to demonstrating various advection schemes as you suggest), perhaps on a latitude longitude grid or vertically stretched grid (which have few or no examples right now).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1656#issuecomment-844540986:397,log,logo,397,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1656#issuecomment-844540986,1,['log'],['logo']
Testability,"> delT is the timestep, not something one chooses, isn't it? Before squaring this away as done we need to discuss together and include J-M and Chris in the discussions. John. Yes Δt is the time step. Yes would be good to touch base with @jm-c and @christophernhill, although the internal wave test by @glwagner looks much better now and with #229 (recomputing w from continuity) the incompressibility seems to be fully satisfied, so we have some confidence that things are working better now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/228#issuecomment-495402580:293,test,test,293,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/228#issuecomment-495402580,1,['test'],['test']
Testability,"> did you find any cases where the windowed_time_average in this PR fails the test with window_nΔt == interval_nΔt? . No, the test passes if window_nΔt equals interval_nΔt. However, if they differ, even if by a multiple integer, the test fails.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378133283:78,test,test,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378133283,3,['test'],['test']
Testability,"> do we currently have a good Float32 test ?. We have quite a few. Generally stuff works in Float32 but of course everything is less precise as expected. It might hurt us in some places. In particular, the only really bad one is tracer conservation in a channel model is much worse in Float32 than Float64 (both remain ~constant in time last time I checked). Some results from the tests:; ```; Testing recomputing w from continuity...; [ Info: Velocity divergence after recomputing w (CPU(), Float32): min=-2.3841858e-7, max=-2.3841858e-7, sum=-4.7683716e-7, abs_sum=4.720688e-5; [ Info: Velocity divergence after recomputing w (CPU(), Float64): min=-4.440892098500626e-16, max=-4.440892098500626e-16, sum=-3.552713678800501e-15, abs_sum=1.0613732115416497e-13; [ Info: Velocity divergence after recomputing w (GPU(), Float32): min=-2.3841858e-7, max=-2.3841858e-7, sum=2.026558e-6, abs_sum=4.5895576e-5; [ Info: Velocity divergence after recomputing w (GPU(), Float64): min=-4.440892098500626e-16, max=-4.440892098500626e-16, sum=1.7763568394002505e-15, abs_sum=1.2656542480726785e-13; ```. ```; Testing incompressibility...; [ Info: Velocity divergence after 1 time steps (CPU(), Float32): min=-3.5675463e-11, max=-3.5675463e-11, sum=-2.9740932e-12, abs_sum=6.9117574e-9; [ Info: Velocity divergence after 10 time steps (CPU(), Float32): min=-3.143441e-11, max=-3.143441e-11, sum=-5.0689453e-12, abs_sum=9.463426e-9; [ Info: Velocity divergence after 100 time steps (CPU(), Float32): min=-6.3892e-11, max=-6.3892e-11, sum=-1.127638e-10, abs_sum=4.6969774e-8; [ Info: Velocity divergence after 1 time steps (CPU(), Float64): min=-7.686559298536759e-19, max=-7.686559298536759e-19, sum=-1.2421179146024245e-21, abs_sum=1.5105296988410314e-16; [ Info: Velocity divergence after 10 time steps (CPU(), Float64): min=-9.020900888258299e-19, max=-9.020900888258299e-19, sum=5.79061971704065e-22, abs_sum=1.6794563169636008e-16; [ Info: Velocity divergence after 100 time steps (CPU(), Float64): min=-8.8599",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/338#issuecomment-519128279:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/338#issuecomment-519128279,3,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,"> do we have to manually select a device during testing like CuArrays. Like that. By default, CuArrays follows the default CUDA order, I think it only makes sense for CI to pick a device with as much memory as possible.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561834079:48,test,testing,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561834079,1,['test'],['testing']
Testability,> especially because we are comparing `Float64` model output with `Float32` saved data. I propose to regenerate regression data in `Float64` in another PR so we can make the regression tests more repetible. The regression test data should be saved in Float64. Regenerate in serial with Float64?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765285533:185,test,tests,185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338#issuecomment-1765285533,2,['test'],"['test', 'tests']"
Testability,"> hey had a few comments, but nothing too serious; > ; > It's hard for me to check thoroughly the whole code. But I'm pleased with the benchmarks and tests -- they look very convincing. I'm approving but perhaps let's hear @glwagner?; > ; > (I'm going offline today in a bit for 2 weeks..). @navidcy thanks for the review, I ll check everything and improve the comments to make it clearer. Have nice vacations!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2105#issuecomment-996204166:135,benchmark,benchmarks,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2105#issuecomment-996204166,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,> hm... shall I have a look? seems like test are failing?. I think the tests are failing because of some detail about how the simulations are stopped / time-step is aligned at the end of a run --- the overall design can be reviewed!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1971#issuecomment-917619883:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1971#issuecomment-917619883,2,['test'],"['test', 'tests']"
Testability,"> is it easy to simply avoid importing the macros associated with the global logger and defining them for a custom logger instead?. You mean like defining and using `@custom_info`, `@custom_warn` for `OceananigansLogger`? That might not be great in case users want to use a different logger. I think we want to use `@info`, `@warn`, etc. and users can always go back to the base/default logger whenever they want.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/855#issuecomment-674213130:77,log,logger,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/855#issuecomment-674213130,4,['log'],['logger']
Testability,"> new HorizontallyAveragedVerticalProfile diagnostic that can calculate; > vertical profiles efficiently on-the-fly on CPUs and GPUs. Other; > diagnostics like product and covariance profiles can be built on top of it.; >; > HorizontallyAveragedVerticalProfile is kind of a mouthful, suggestions; > welcome if anyone has a better name. I wanted to explicitly state; > ""horizontally averaged"" as vertical profiles are commonly used as well and; > imply no averaging.; >; > The profile can be passed to an output writer which can write it to disk.; >; > The horizontal averaging currently relies on a parallel reduction prefix; > sum algorithm that I hacked over a CUDAnative.jl example, although I do; > have a test for the diagnostic so it does work. The algorithm can be more; > efficient (see JuliaGPU/CuArrays.jl#68; > <https://github.com/JuliaGPU/CuArrays.jl/issues/68>).; >; > It allocates very minimal amounts of memory (less than mean) and; > benchmarks show that it is ~20x faster than what we were doing before; > (copying to CPU and calculating there) which is great but it's ~5x slower; > than optimal performance.; >; > As it does not allocate memory, we can now calculate vertical profiles; > even when running large models that fill up memory.; >; > Although I should mention that an intermediate array with a size of at; > least 1*Ny*Nz is required for the parallel reduction step (so I'm using; > poisson_solvers.storage because it's a vanilla CuArray that can be; > overwritten).; >; > N, H = 512, 1; > T = N + 2H; >; > a = rand(T, T, T) |> CuArray; > h = zeros(N) |> CuArray; >; > What we were doing before:; >; > @benchmark CuArrays.@sync mean(Array(view(a, H:N+H, H:N+H, H:N+H)), dims=[1, 2]); >; > BenchmarkTools.Trial:; > memory estimate: 1.01 GiB; > allocs estimate: 250; > --------------; > minimum time: 684.013 ms (2.29% GC); > median time: 712.570 ms (6.28% GC); > mean time: 732.480 ms (8.79% GC); > maximum time: 807.437 ms (16.95% GC); > --------------; > samples: 7; > ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520187010:1113,benchmark,benchmarks,1113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520187010,1,['benchmark'],['benchmarks']
Testability,"> only thought I had was: would it be too much work to add tests to CI that run the two new validation experiment? This would help ensure they don't go out of date and that we can easily run them on Buildkite. No, I think we should do this for the solid body validation experiment. I will implement this after I finish a quantitative analysis of the results.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1404#issuecomment-786820370:59,test,tests,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1404#issuecomment-786820370,1,['test'],['tests']
Testability,"> simulation tests take forever? I'll restart them... Huh, I wonder if that's a downside of this change but not sure...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2102598666:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3580#issuecomment-2102598666,1,['test'],['tests']
Testability,> still an issue?. Yes. I just tested this on `main`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2717#issuecomment-1480024415:31,test,tested,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2717#issuecomment-1480024415,1,['test'],['tested']
Testability,"> thanks for testing, both problems should be solved. Indeed they are! Thanks @simone-silvestri. One thing I should note is that this fails when `Nx` isn't even (I guess becasue the partition is in `x`):. ```julia; julia> grid_base = RectilinearGrid(topology=(Bounded, Periodic, Bounded), size=(5, 4, 4), extent = (1,1,1)); 5×4×4 RectilinearGrid{Float64, Bounded, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Bounded x ∈ [0.0, 1.0] regularly spaced with Δx=0.2; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.25; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=0.25. julia> grid = MultiRegionGrid(grid_base, partition = XPartition(2), devices = 2); ┌ Warning: MultiRegion functionalities are experimental: help the development by reporting bugs or non-implemented features!; └ @ Oceananigans.MultiRegion ~/.julia/packages/Oceananigans/E1180/src/MultiRegion/multi_region_grid.jl:64; ERROR: AssertionError: mod(Nx, p.div) == 0; Stacktrace:; [1] partition_size(p::XPartition{Int64}, grid::RectilinearGrid{Float64, Bounded, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}); @ Oceananigans.MultiRegion ~/.julia/packages/Oceananigans/E1180/src/MultiRegion/x_partitions.jl:24; [2] MultiRegionGrid(global_grid::RectilinearGrid{Float64, Bounded, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePre",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304013634:13,test,testing,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2795#issuecomment-1304013634,2,"['Assert', 'test']","['AssertionError', 'testing']"
Testability,"> that looks very weird! But it is structured in some sense, it looks like the initial condition has some inbalances that generate noise which gets cleaned up by numerical diffusion. Interesting also that buoyancy extrema are continuously increasing in magnitude. If this is not happening with z-directed gravity, it might really be that there is some bug/incorrectness in the buoyancy model. A way to test this would be to recreate the same setup with z-directed gravity and use an immersed boundary to represent the tilt. If that case behaves as expected we know where to focus. @simone-silvestri I'm not sure if that'd be an apples-to-apples comparison. We'd be comparing a domain with smooth tilted boundaries (using the rotated buoyancy) against a domain with jagged tilted boundaries (using our grid-fitted IB). So I'm not sure what we could learn there (please lmk if I'm missing something here). That said, I think it's worth the shot so I might try to implement that soon and see what happens.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385:402,test,test,402,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1517948385,1,['test'],['test']
Testability,"> the offender is this line; > ; > https://github.com/CliMA/Oceananigans.jl/blob/17e6fc045a32fcbd685737878ccf9638197c7b50/src/ImmersedBoundaries/grid_fitted_bottom.jl#L75; > ; > `MultiRegionGrid` is created by wrapping around an `ImmersedBoundaryGrid` where the letter are constructed with `construct_regionally(construct_grid, args...)`; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L83; > ; > ; > https://github.com/CliMA/Oceananigans.jl/blob/eb38eeade577eca5056b99ca8839ca6c674ae0e2/src/MultiRegion/multi_region_grid.jl#L110; > ; > `fill_halo_regions!` cannot be called within a regional `@apply_regionally` call, so we probably have to shift around the construction when there is an ImmersedBoundaryGrid. (I wonder how this test is passing on main); > ; > I see two solutions here:; > ; > 1. change the constructor of `MultiRegionGrid` to make sure that fill_halo is called outside, aka partition the immersed_boundary outside the `construct_regionally`, fill_halo and then build the immersed grid with an offsetarray (simple but probably worst long term); > 2. Make `ImmersedBoundaryGrid` wrap around `MultiRegionGrid`(slightly more complex, maybe for another PR, but probably useful for the cubed sphere grid?). The main criteria for the design is ease of use. So that's what we have to discuss.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230:813,test,test,813,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3122#issuecomment-1603164230,1,['test'],['test']
Testability,"> the tests were not passing here. Yeah, I should have been more clear that I approved to merge after tests were passing, I didn't know we could even merge without tests passing. I thought that behavior was blocked",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2919#issuecomment-1427136695,3,['test'],['tests']
Testability,"> this doesn't explain why the test in #238 fails, but it is good that this test passes now. Does it makes sense to check that the RB test passes before merging this?. Yeah no this isn't related to #238. That's a good idea, I'm also waiting to make sure that GitLab CI passes. #239 is now merged so I'll rebase this branch on top of master and run the tests again to see if RB passes.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/243#issuecomment-496247276:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/243#issuecomment-496247276,4,['test'],"['test', 'tests']"
Testability,> to avoid waiting on another round of tests to pass 🙃. Exactly! Takes for ever...!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2448498814:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2448498814,1,['test'],['tests']
Testability,"> under the impression that the previous syntax wasn't gonna work. I believe this qualifies as a ""breaking change"" because any code that relied on consistent output from an abstract operation could, in theory, break (for example, a regression test that passes only when output remains constant). It does not change the API however, just the results.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1599#issuecomment-823703532:243,test,test,243,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1599#issuecomment-823703532,1,['test'],['test']
Testability,"> was [4b82c4c](https://github.com/CliMA/Oceananigans.jl/commit/4b82c4cc90a2d6a4b016149db0f75ad2ad2d43af) appropriate? perhaps I messed up?. I think this PR just added a validation tests? I'm not totally sure, but it's not super important either way since we don't really need such a validation test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1916#issuecomment-923634278:181,test,tests,181,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1916#issuecomment-923634278,2,['test'],"['test', 'tests']"
Testability,"> was just saying that it's similar to what we're doing for forcing functions so implementing arbitrary closures should be pretty straightforward (more so than implementing boundary conditions #118). quite!. > Running without a ""closure"" should be using a molecular viscosity and diffusivity (which isn't practical so we're always using a closure). Just know that we *will* want to run some simulations at high resolution without closures in order to test the accuracy of the coarse model + closure.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/120#issuecomment-472238286:451,test,test,451,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/120#issuecomment-472238286,1,['test'],['test']
Testability,> we need to extend our existing broadcasting and reduction machinery for 3D fields to 4D field time series. @glwagner Reductions on `Field`s don't all work on `master` but work now (without the `interior_copy` version) but trigger scalar operations on the GPU. Might be worth doing a bit of pair programming later around this? I'll see if I can add some CPU tests which should pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1641#issuecomment-839405428:359,test,tests,359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1641#issuecomment-839405428,1,['test'],['tests']
Testability,> what GLMakie are you using?. ```; (test) pkg> st; Status `~/Projects/test/Project.toml`; [e9467ef8] GLMakie v0.10.5; [9e8cae18] Oceananigans v0.91.5 `~/Projects/Oceananigans.jl`; ```. when I created a `test` directory with an empty environment (to make the figure in the OP),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3686#issuecomment-2272440318:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3686#issuecomment-2272440318,3,['test'],['test']
Testability,"> with bathymetry we would have -g∂ₓ(h + b - H) = -g∂ₓh -g∂ₓb, and in conservative form, -g∂ₓ(h²/2) -gh∂ₓb, right?. Oh, this seems right. Apologies for the confusion. I'm still not sure we want to analytically integrate one of the pressure gradient terms `h dx(h) = dx(h^2/2)` but leave the other unchanged. If we treat them both similarly then we would write the pressure gradient term. ```; -g h * ∂ₓ(h + b); ```. It might be worth testing both possibilities to see if one has favorable numerical properties?. Perhaps this is related to the whole issue re: well-balanced methods, etc... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1115162071:434,test,testing,434,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1115162071,1,['test'],['testing']
Testability,"> yeah in `test/test_distributed_models.jl`. There's no tests for `HydrostaticFreeSurfaceModel` there currently, just `NonhydrostaticModel`. . Is there another file with tests for `HydrostaticFreeSurfaceModel`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1749705898:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1749705898,3,['test'],"['test', 'tests']"
Testability,"> yes but it has to be non-linear, advecting w velocity with a spatially constant u and v velocity doesn't cut it. Because that doesn't test a multi-dimensional implementation? That makes sense. I just wanted to clarify what was meant by ""nonlinear"". Some source refer to WENO for tracer advection as ""nonlinear"", because the weights depend on the tracer field itself. The key is to test multi-dimensional momentum advection, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172729219:136,test,test,136,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1172729219,2,['test'],['test']
Testability,">I think that the problem is that we are passing an integer and not an array. I disagree and let me clarify my statement that ""the test uses incorrect syntax"". We are testing topologies that are both two- and three-dimensional, but using syntax to construct `VerticallyStretchedRectilinearGrid` that is _only valid for three-dimensional topologies_. To see this, take a look at the `vs_topos` we test:. https://github.com/CliMA/Oceananigans.jl/blob/365d00d61d8a73171a7b89712a8629694cad2388/test/test_poisson_solvers.jl#L257-L266. this list includes two-dimensional topologies like `(Flat, Bounded, Bounded)` (two-dimensional in `y-z`). However, when we construct `VerticallyStretchedRectilinearGrid` we write. https://github.com/CliMA/Oceananigans.jl/blob/365d00d61d8a73171a7b89712a8629694cad2388/test/test_poisson_solvers.jl#L140. which only works if there is no `Flat` dimension. . For example, if the topology is `(Flat, Bounded, Bounded)`, then our syntax should be. ```julia; vs_grid = VerticallyStretchedRectilinearGrid(FT, architecture=arch, topology=topo, size=(Ny, Nz), y=(0, 1), zF=zF); ```. I'll fix this up!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820018668:131,test,test,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820018668,5,['test'],"['test', 'testing']"
Testability,">On #1962 we add bars capability, which will allow us to separate the tests into a few categories: fast-running, crucial tests will run on every commit to a PR, and slower, more comprehensive integration tests will run only when bors try or bors r+ is invoked. This might help streamline the development workflow. Also if we are using Caltech's central cluster for CI we can potentially split the jobs amongst more workers, which might help speed up tests overall. Definitely looking forward to that PR. > Even more important is simplifying the test implementation. Right now updating tests and validation experiments is a time sink for developers that change the API and has really slowed development down lately. So we shouldn't rewrite tests in a way that makes development more difficult (eg keeping the maintenance burden of the test infrastructure small is more important than decreasing the computational cost of tests). This is really a side comment --- we should be able to improve the tests both so they are faster and easier to maintain, if we are careful. I definitely agree with that. I just don't see how to do it. Being thorough with the tests (which I believe is something we want) necessarily comes with using the API many times, making changes to it a bit slower to implement, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922529440:70,test,tests,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990#issuecomment-922529440,11,['test'],"['test', 'tests']"
Testability,"?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/Fields/show\_fields.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9zaG93X2ZpZWxkcy5qbA==) | `0.00% <0.00%> (ø)` | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | | |; | [examples/internal\_wave.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvaW50ZXJuYWxfd2F2ZS5qbA==) | | |; | [test/test\_dynamics.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2R5bmFtaWNzLmps) | | |; | [docs/citations.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-ZG9jcy9jaXRhdGlvbnMuamw=) | | |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | [benchmark/benchmark\_ffts.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mZnRzLmps) | | |; | ... and [60 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=footer). Last update [0fe0d15...c70ed0e](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/911?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/911#issuecomment-687049822:2429,benchmark,benchmark,2429,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/911#issuecomment-687049822,2,['benchmark'],['benchmark']
Testability,?width=650&token=1eev6VdKD0&height=150&src=pr)](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #656 +/- ##; ==========================================; + Coverage 70.35% 78.06% +7.71% ; ==========================================; Files 118 118 ; Lines 2280 2362 +82 ; ==========================================; + Hits 1604 1844 +240 ; + Misses 676 518 -158; ```. | [Impacted Files](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/OutputWriters/checkpointer.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvY2hlY2twb2ludGVyLmps) | `91.37% <100%> (+3.44%)` | :arrow_up: |; | [src/Models/incompressible\_model.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL01vZGVscy9pbmNvbXByZXNzaWJsZV9tb2RlbC5qbA==) | `85.71% <0%> (-14.29%)` | :arrow_down: |; | [src/Logger.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL0xvZ2dlci5qbA==) | `79.16% <0%> (-9.73%)` | :arrow_down: |; | [src/Solvers/solve\_for\_pressure.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL1NvbHZlcnMvc29sdmVfZm9yX3ByZXNzdXJlLmps) | `93.33% <0%> (-6.67%)` | :arrow_down: |; | [src/Utils/launch\_config.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL2xhdW5jaF9jb25maWcuamw=) | `94.11% <0%> (-5.89%)` | :arrow_down: |; | [...ntations/rozema\_anisotropic\_minimum\_dissipation.jl](https://codecov.io/gh/climate-machine/Oceananigans.jl/pull/656/diff?src=pr&el=tree#diff-c3JjL1R1cmJ1bGVuY2VDbG9zdXJlcy90dXJidWxlbmNlX2Nsb3N1cmVfaW1wbGVtZW50YXRpb25zL3JvemVtYV9hbmlzb3Ryb3BpY19taW5pbXVtX2Rpc3NpcGF0aW9uLmps) | `32% <0%> (-2.1%)` | :arrow_down: |; | [src/Solvers/box\_pressure\_solver.jl](https://codecov.io/gh/climate-machine/Ocean,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/656#issuecomment-592649433:1515,Log,Logger,1515,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/656#issuecomment-592649433,1,['Log'],['Logger']
Testability,"@ErikQQY, could you bring this up to date with `main` branch? Perhaps all tests pass then and we can merge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2132#issuecomment-1005437100:74,test,tests,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2132#issuecomment-1005437100,1,['test'],['tests']
Testability,@Lichriszz I wanted to tell you that there is a working example of two-dimensional shallow water model in the branch `distributed-shallow-water-model`. There is an MPI version that is being tested but the serial script should work on the main branch. https://github.com/CliMA/Oceananigans.jl/blob/distributed-shallow-water/examples/serial_shallow_water_turbulence.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1365#issuecomment-799458870:190,test,tested,190,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1365#issuecomment-799458870,1,['test'],['tested']
Testability,@SandreOuza has requested a `Gradient` `BCType`. Also here are some proposed tests:. 0. Constant initial conditions + zero flux = average value of quantity doesn't change; 1. Linear temperature profile + prescribed identical fluxes at top and bottom = linear temperature profile; 2. Diffusive solution to the free-convection example,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-473115123:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/118#issuecomment-473115123,1,['test'],['tests']
Testability,"@Sumanshekhar17 that's frustrating!. Here are command line instructions that can be copy-pasted into a terminal (I'm not sure if this can be made to work on Windows, but hopefully it will work on linux or Mac):. ```; mkdir Test; cd Test; touch Project.toml; wget https://raw.githubusercontent.com/CliMA/Oceananigans.jl/master/Manifest.toml; julia --project -e 'using Pkg; Pkg.add(""Oceananigans""); Pkg.status(); pkg""st --manifest""'; ```. This creates a directory called ""`Test`"", a file called `Project.toml`, downloads the `Manifest.toml` from Oceananigans.jl#master, uses the Julia package manager to add `Oceananigans`, and then prints the current manifest. You can verify after this that the Manifest is the same as on Oceananigans master (at least, this is what happened on my Mac). Further typing. ```; julia --project -e 'using Pkg; Pkg.add(""JLD2""); Pkg.add(""Plots""); pkg""st --manifest""'; wget https://raw.githubusercontent.com/CliMA/Oceananigans.jl/master/examples/one_dimensional_diffusion.jl; julia --project -e 'include(""one_dimensional_diffusion.jl"")'; ```. Should download and run the one-dimensional diffusion script.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827268558:223,Test,Test,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-827268558,3,['Test'],['Test']
Testability,@ali-ramadhan @christophernhill disregard this previous comment. I found a 3rd bug in the divergence operator. I believe the tests pass now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-814488403:125,test,tests,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-814488403,1,['test'],['tests']
Testability,"@ali-ramadhan @christophernhill it looks like the incompressible-in-time tests are failing for a hyperbolically `VerticallyStretchedRectilinearGrid`. However, a curious aspect of the test is that we compare `maximum(|δ|)` to 0, where `δ` is the divergence. Models that use `VerticallyStretchedRectilinearGrid` fail this test because `maximum(|δ|)` is greater than 5e-8 (its around 1e-4 for AdamsBashforth, and 3e-5 for RK3). . However, it looks like `sum(δ)` is smaller than machine precision; thus mass does not accumulate in time. . The larger-than-normal error only shows up when the grid is stretched; when the coordinate spacing in `VerticallyStretchedRectilinearGrid` is constant, the tests pass. Should we modify this test? What do we want to test for and what do we expect? Presumably both non-accumulation of mass and a small divergence are both important...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-814479474:73,test,tests,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1541#issuecomment-814479474,6,['test'],"['test', 'tests']"
Testability,"@ali-ramadhan All the tests passed!, ~~but I think I screwed up when creating the [branch](https://github.com/tomchor/Oceananigans.jl/tree/tc/cell2center) and when I create a PR it also includes the commits I used for the `KernelComputedField`. I'm not sure what to do now...~~. Created a (I think) successful PR :)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-766156969:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-766156969,1,['test'],['tests']
Testability,"@ali-ramadhan I added some code here https://github.com/ali-ramadhan/OceanDispatch.jl/blob/fixing-nonhydrostatic-algorithm/src/eig_solvers.jl . This is for maybe helping test/debug - it uses too much memory and CPU for any real work. The eigenvectors need N^2 storage (where N is Nx.Ny.Nz)! . Code runs and gives machine precision error for a Laplace like operator with cyclic in X and Y and Neumann in Z ( see - ```solve_poisson_3d_mbc_eig```). I pushed to repo and branch to see if it would work, and to my surprise it did, hope that's OK! . Going to look at FFT bits some now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/8#issuecomment-442662665:170,test,test,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/8#issuecomment-442662665,1,['test'],['test']
Testability,@ali-ramadhan I think this is ready to merge --- but might be best if a second set of eyes evaluates the tests. Looks like only the ocean LES regression tests fail now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/711#issuecomment-692287734:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/711#issuecomment-692287734,2,['test'],['tests']
Testability,@ali-ramadhan I will merge once tests pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/405#issuecomment-531494959:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/405#issuecomment-531494959,1,['test'],['tests']
Testability,@ali-ramadhan I will update the example and add a test.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519604488:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519604488,1,['test'],['test']
Testability,@ali-ramadhan I'll move the tests to `test_output_writers.jl`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/886#issuecomment-684893012:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/886#issuecomment-684893012,1,['test'],['tests']
Testability,"@ali-ramadhan I've addressed your concerns: we now have a LES regression test, and some changes to inner kernels means that performance is now *improved* by this PR over master (for large models).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-543208118:73,test,test,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-543208118,1,['test'],['test']
Testability,@ali-ramadhan I've tidied up the regression test and remade the data. Let me know what you think.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/322#issuecomment-517837092:44,test,test,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/322#issuecomment-517837092,1,['test'],['test']
Testability,@ali-ramadhan Thanks so much! I'm inclined to say the problem is resolved and will do more tests to make sure. Also the stability condition makes sense; I wasn't sure what the time stepper handled and what one has to address explicitly in the model,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/579#issuecomment-568075363:91,test,tests,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/579#issuecomment-568075363,1,['test'],['tests']
Testability,"@ali-ramadhan a few issues to resolve before merging:. - [x] `IdealizedNonlinearEOS` or `IdealizedNonlinearEquationOfState`?; - [ ] Are we ok with using `buoyancy` as the name of a function and also the name of the struct that holes buoyancy-related parameters?; - [x] Create a `BuoyancyTracer` struct that uses `T` as buoyancy (when we have arbitrary tracers, we will rename this to `b`); - [ ] Tests that make sure the `RoquetIdealizedNonlinearEquationOfState` can be used with `Model`; - [ ] Open an issue to create dynamics / physics tests to make sure that the idealized nonlinear equation of state works properly",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533070746:396,Test,Tests,396,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533070746,2,"['Test', 'test']","['Tests', 'tests']"
Testability,"@ali-ramadhan according to local tests the changes in https://github.com/CliMA/Oceananigans.jl/pull/1016/commits/c019b82a4b64b8d15f854aced7686bbffca0de7b get tests to pass for `ContinuousForcing` on the GPU. There may be other tests that don't pass (not related to the specific problem this PR is trying to fix), which I will test now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1016#issuecomment-702053204:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1016#issuecomment-702053204,4,['test'],"['test', 'tests']"
Testability,"@ali-ramadhan and @glwagner I tried the code below in some simple tests while waiting; for my car to be serviced. . ```; using Pkg; Pkg.add(""LinearAlgebra""); using LinearAlgebra. function solveLinearSystem(A,f); # Solve Aϕ=f; tol=1.e-12; E=eigen(A);; L=E.values;; V=E.vectors;; # Get amplitudes, F, of eigenvectors that give f; F=V'*f; # Get inverse eigenvalues (zeroing inverse for v. small ones); rL=map(x -> if (abs(x)>tol) 1.0/x; else 0. ; end , L);; # Get amplitudes, Φ, of eigenvectors that give ϕ; Φ=F.*rL; # Solve for ϕ given Φ; ϕ=V*Φ; println(A*ϕ,f,ϕ); return ϕ; end. Acyc=[-2. 1 1; 1 -2. 1; 1 1 -2.];; Aneu=[-1 1 0; 1. -2. 1; 0. 1. -1];; s=size(Acyc);; nx=s[1];; g=rand(nx+1,1);; divg=g[1:end-1]-g[2:end]; mdivg=sum(divg)./size(divg)[1]; divg=divg.-mdivg; solveLinearSystem(Acyc,divg); solveLinearSystem(Aneu,divg); ```. This is algorithm that underlies the FFT approach. The FFT just optimizes (and makes it more complicated) by utilizing the fact that the eigenvector/eigenvalue coefficients for the simple, constant spacing Poisson problem, are the cos and sin terms in an FFT. Code appears to work so I am going to try and hack together a ""_plugin_"" for ```solve_poisson_3d_mbc```. . The code won't be super high performance (or work for really big problems) but (fingers crossed) it should give something clean (and short) to get started and help with debugging/optimizing on GPU. Then we can work on various FFT approaches on CPU and GPU (3-d FFT, 2-d + cyclic reduction), Greg's thought on saving for gradients in continuous form. . In principle the eigenvectors and eigenvalues above should correspond with amplitudes that come out of FFTW - except that there are a bunch of 1/2 factors, N versus m numbers, complex versus split cos/sin notation bits that need to be carefully understood etc.... . Just going to learn a little about sparse matrices in Julia - I assume they must exist! Hopefully the car will take a little longer to be finished. . Chris",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/8#issuecomment-442521365:66,test,tests,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/8#issuecomment-442521365,1,['test'],['tests']
Testability,@ali-ramadhan and @glwagner this looks promising. Does it make sense to nuke sandbox stuff in this? It seems a bit orthogonal to the rest of the PR? Is it meant to be in there?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-514608840:77,sandbox,sandbox,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-514608840,1,['sandbox'],['sandbox']
Testability,@ali-ramadhan any more tests you can think of?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/945#issuecomment-692708156:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/945#issuecomment-692708156,1,['test'],['tests']
Testability,"@ali-ramadhan currently waiting for the preview to load so that I can merge, but I don't think it'll do that with the GPU test failing. How do we fix that?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-819553284:122,test,test,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1543#issuecomment-819553284,1,['test'],['test']
Testability,@ali-ramadhan do you know why the checkpointer tests are failing?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1366#issuecomment-780729036:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1366#issuecomment-780729036,1,['test'],['tests']
Testability,@ali-ramadhan do you mind running some benchmarks to test for performance regression under this PR?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496335163:39,benchmark,benchmarks,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496335163,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"@ali-ramadhan do you mind running the benchmarks again?. There are still some performance issues, especially with `ConstantSmagorinsky`. But I think it might be wise to deal with these in a future PR if we are happy with these changes.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496891797:38,benchmark,benchmarks,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496891797,1,['benchmark'],['benchmarks']
Testability,"@ali-ramadhan does this PR fix your issue? I will try the internal tide example on this PR, add some tests for `PartialCellBottom`, and then we can probably merge it. I am not sure whether this solves all the issues with PartialCellBottom, probably more validation is required, but this is a first step.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2317976546:101,test,tests,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3682#issuecomment-2317976546,1,['test'],['tests']
Testability,@ali-ramadhan for the future I think we need to figure out a good pattern for writing examples in which the resolution/run time can be decreased for the purpose of testing.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519687706:164,test,testing,164,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519687706,1,['test'],['testing']
Testability,"@ali-ramadhan here is my proposed re-factor of the poisson solver:. https://github.com/glwagner/Oceananigans.jl/blob/poisson-solver-refactor/src/poisson_solver.jl. Now may be the right time to move it to a new package, because we can run the tests independent from oceananigans before refactoring oceananigans itself.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/106#issuecomment-469743283:242,test,tests,242,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/106#issuecomment-469743283,1,['test'],['tests']
Testability,@ali-ramadhan if tests pass and everything looks good to you I think this is ready to merge.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-519078225:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-519078225,1,['test'],['tests']
Testability,"@ali-ramadhan it might make sense to move the WENO nth order into a draft PR where we can work on making it fast, with a simple benchmark to work from.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1221#issuecomment-736137314:128,benchmark,benchmark,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1221#issuecomment-736137314,1,['benchmark'],['benchmark']
Testability,@ali-ramadhan lemme know what benchmarks say now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/710#issuecomment-606000865:30,benchmark,benchmarks,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/710#issuecomment-606000865,1,['benchmark'],['benchmarks']
Testability,@ali-ramadhan let's focus first on #3801 and then we can revisit this PR. There are some additional challenges to resolving #3791 unfortunately that will also require some test refactoring.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3794#issuecomment-2383828408:172,test,test,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3794#issuecomment-2383828408,1,['test'],['test']
Testability,@ali-ramadhan looks like tests pass. Check it out. Thanks @maleadt for the tip.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/697#issuecomment-599161317:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/697#issuecomment-599161317,1,['test'],['tests']
Testability,"@ali-ramadhan ok, that sounds good to me to run in a separate PR. To clarify, is the intent of this PR to perform benchmarking, or just to ensure that the benchmark scripts do not fall out of date?. If the goal is the latter, it could make sense to decrease the size of the benchmark run to as small a model as possible --- 16^3? . What's the increase in the time taken to run a test? Looks like its about 1/3, from 20m to 30m? That's not so bad, but we should make sure this is what we want given that we may not be able to use the benchmark run output directly due to stochasticity in the Travis build. Looks like gitlab is failing...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/727#issuecomment-613360541:114,benchmark,benchmarking,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/727#issuecomment-613360541,5,"['benchmark', 'test']","['benchmark', 'benchmarking', 'test']"
Testability,@ali-ramadhan please merge if tests pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533162755:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/412#issuecomment-533162755,1,['test'],['tests']
Testability,"@ali-ramadhan please see my contribution. I believe the following combinations are now supported. * number data with CPU and GPU fields; * data from alike fields for CPUs and GPUs; * CPU fields to GPU fields (using `copyto!` on `.data.parent`); * CPU arrays to CPU fields; * CPU arrays to GPU fields (by forming a CPU field and then using `set!` for CPU fields to GPU fields); * GPU arrays to GPU fields (using the kernel `_set_gpu!`); * GPU fields to CPU fields (via array conversion of `.data.parent`); * functions to CPU fields (using `nodes(u)...`); * functions to GPU fields (by computing `set!` for functions and a new CPU field and then using `set!` for CPU fields to GPU fields). I have also added a docstring for `set!(model; kwargs...)` with an example, and a simple test. (I also nuked `EdgeField`). Hopefully that is comprehensive enough for now. Please let me know if anything more should be added.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519283400:777,test,test,777,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519283400,1,['test'],['test']
Testability,"@ali-ramadhan start with the tests, they show the code in action.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495599634:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495599634,1,['test'],['tests']
Testability,@ali-ramadhan tests failed again so I give up. I'm skipping the example-running test for now. When the tests pass feel free to merge.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519719981:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519719981,3,['test'],"['test', 'tests']"
Testability,@ali-ramadhan tests pass on the CPU! The GPU error is cryptic --- might be something wrong with the `yml`? Can you take a look?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/765#issuecomment-635923066:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/765#issuecomment-635923066,1,['test'],['tests']
Testability,"@ali-ramadhan thanks a lot for this great work. I'm super excited to have this feature!. > Domain decomposition is supported and tested in x, y, and z. But for IncompressibleModel z-decomposition won't work right now because vertical integrals are done inside GPU kernels (so we probably don't want to decompose in z). And PencilFFTs.jl supports decompositions in dimensions 2 and 3 (since dimension 1 FFTs are the fastest). As a result, right now Oceananigans.jl only supports slab decompositions in y although we should figure out if pencil decompositions are possible. Sorry if I'm misunderstand some things (I'm not very familiar with the pressure-solver implementations) but it looks to me like this isn't an issue for the pressure solver, right? (Based on the fact that you got a 2D turbulence example going.) . If that's the case, then this limitation might be okay for now, as it would only affect cases we're you'd want to parallelize in `x` for efficiency purposes but you could still get away with running your set-up in a less-than-optimal configuration, no? I think this would be similar to the old limitation of being able to run `(Bounded, Periodic, Bounded)` domains only in CPUs. This was not optimal but if you wanted to circumvent this you could easily do so by rotating your domain to make it `(Periodic, Bounded, Bounded)` which _could_ be run on GPUs. Also (again correct me if I'm missing something) from my talks with you guys about this it seems that the primary goal of MPI-distributed parallelism is to run multi-GPU simulations, since GPUs have a relatively low memory limit. In this case, I think the way to use MPI is very different from the traditional multi-CPU runs. That is, I think the important capabilities when distributing a simulation across a few GPUs are different from the important capabilities when distributing it across hundreds of CPU cores. > I guess if we consider communication as a boundary conditions, then it makes sense to use Bounded in any case",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-785220748:129,test,tested,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-785220748,1,['test'],['tested']
Testability,"@ali-ramadhan thanks for looking into that!. I think a convergence test with coarse horizontal resolution and varying vertical resolution is probably a good idea, perhaps producing a plot like Fig 11 in Vreugdenhil and Taylor. In my reading, `∆y_w^+` is the vertical spacing in 'wall units', which is the physical spacing divided by `nu/u_\tau`, where `nu` is viscosity and `u_\tau` is the friction velocity defined in eq 16. In Table II, values for both `∆y_w^+` and `∆y_c^+` (grid spacing at wall and at domain center) are given. It looks like many of the runs may be feasible. Here's some code:. ```julia; y(j, Ny, Sf, h) = h / tanh(Sf) * tanh(Sf*(2*(j-1)/Ny - 1)) ; Δy(j, Ny, Sf, h) = y(j+1, Ny, Sf, h) - y(j, Ny, Sf, h). N_unstretched(Ny_VT, Sf) = ceil(Int, 2 / Δy(2, Ny_VT, Sf, 1)) . @show N_unstretched(49, 3); @show N_unstretched(65, 2.5); @show N_unstretched(97, 3); @show N_unstretched(129, 2); ```. It looks like some of their runs are feasible, since. ```julia; julia> N_unstretched(49, 3) # runs 2-4; 1141. julia> N_unstretched(65, 2.5) # run 5; 768. julia> N_unstretched(97, 3) # runs 7-11; 2710. julia> N_unstretched(129, 2) # run 12; 805; ```. Runs B-G (which are included to demonstrate resolutions that are apparently inadequate) may also be feasible. One concern about the suitability of stratified Couette flow is mentioned at the end of the paper... > Stratified plane Couette flow is a challenging test case; for the LES model because it has a linearly stable laminar; state which introduces requirement 1. The results of Abkar; and Moin13 suggest that AMD LES performs even better in; other stratified wall-bounded flows. Balancing all these concerns; is key to using the AMD model in LES of wall-bounded; stratified flow. Nevertheless the AMD model is able to capture; turbulent intermittency and mean and turbulent flowproperties; in stratified plane Couette flow. @johncmarshall54 we are planning to implement stretched vertical grid functionality after the LES is implemente",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/310#issuecomment-510240238:67,test,test,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/310#issuecomment-510240238,1,['test'],['test']
Testability,"@ali-ramadhan that will work. I just wanted to have the assurance that buoyancy was being computed identically everywhere (if tests that stress the buoyancy function pass, we know it works).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/236#issuecomment-495764392:126,test,tests,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/236#issuecomment-495764392,1,['test'],['tests']
Testability,@ali-ramadhan the computation tests passed on my GPU. I think the gitlab job just needs to be restarted.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/715#issuecomment-604187442:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/715#issuecomment-604187442,1,['test'],['tests']
Testability,"@ali-ramadhan the convergence tests pass now, correct? `reshape=true` in `xnodes`, etc fixed it?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-685021462:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-685021462,1,['test'],['tests']
Testability,@ali-ramadhan this PR is ready for a first review. Possibly we should also add docs in this PR. I could also envision a few more tests to ensure the correctness of the turbulent diffusivities in simple flow fields for Constant Smagorinsky and Anisotropic Minimum Dissipation. However this last is not necessary.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/309#issuecomment-508840933:129,test,tests,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/309#issuecomment-508840933,1,['test'],['tests']
Testability,@ali-ramadhan what do you think about a new log level for timing that doesn't spit debug?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-887905146:44,log,log,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1862#issuecomment-887905146,1,['log'],['log']
Testability,"@ali-ramadhan, @glwagner, @francispoulin, @tomchor: please hold on merging anything else until I merge this. Will do so as soon as tests pass!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783650872:131,test,tests,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783650872,1,['test'],['tests']
Testability,"@ali-ramadhan, all tests pass except those related with Tullio.jl I think!. I don't understand why CUDA.@allowscalar creates issues... But it does apparently. Am I wrong?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-822433768:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-822433768,1,['test'],['tests']
Testability,"@ali-ramadhan, also the gpu cubed-sphere tests don't pass. Any ideas why?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-822762230:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-822762230,1,['test'],['tests']
Testability,"@ali-ramadhan, should we re-run the validation tests?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783652567:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783652567,1,['test'],['tests']
Testability,"@ali-ramadhan, the GitLab test is failing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/559#issuecomment-563225134:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/559#issuecomment-563225134,1,['test'],['test']
Testability,"@ali-ramadhan, the docs log says:; ```; ┌ Info:;   | │ Buildkite config:;   | │ Commit branch: ""tomchor-patch-1"";   | │ Pull request: ""false"";   | │ Commit tag: """";   | │ Detected build type: devbranch;   | │ - ✘ ENV[""BUILDKITE_BRANCH""] matches devbranch=""master"";   | │ - ✔ ENV[""DOCUMENTER_KEY""] exists;   | └ Deploying to folder ""dev"": ✘; ```; Seems like buildkite will only reply from master? I don't see where that setting in buildkite is though...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782282187:24,log,log,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1383#issuecomment-782282187,1,['log'],['log']
Testability,"@ali-ramadhan, there is a strange error in the [docs log](https://buildkite.com/clima/oceananigans/builds/2637#a8b79673-9564-4527-94c6-209dedd870a2) about `Kumar16`... Any idea? Is it related with bumping up DocumenterCitations.jl from 0.2.1 -> 0.2.2?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1677#issuecomment-844532260:53,log,log,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1677#issuecomment-844532260,1,['log'],['log']
Testability,"@apaloczy I think this should fix your issue --- let me know if it doesn't!. We might want to add a test now or later. I think maybe just a trivial test that repeats an existing test for `Value/Gradient` boundary conditions, but on an `ImmersedBoundaryGrid` with no immersed nodes, would be sufficient. We could also test that we can apply `Value` boundary condition on curvilinear grids.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2441#issuecomment-1100703276:100,test,test,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2441#issuecomment-1100703276,4,['test'],['test']
Testability,"@aramirezreyes, could you bring this up to date with `main` branch? Perhaps all tests pass then and we can merge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1006035272:80,test,tests,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1006035272,1,['test'],['tests']
Testability,@arcavaliere There's some discussion about logging at https://github.com/climate-machine/CLIMA/issues/134,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-542203314:43,log,logging,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-542203314,1,['log'],['logging']
Testability,"@arnscheidt reported this error when running this script. https://github.com/ali-ramadhan/antarctic-ice-shelf-meltwater-outflow/blob/eae17968349d72613ccbd0d5b856cc76b30b7850/ice_shelf_meltwater_outflow_2d.jl. ```; InvalidIRError: compiling _set_gpu!(Cassette.Context{nametype(Ctx),Nothing,Nothing,GPUifyLoops.var""##PassType#422"",Nothing,Cassette.DisableHooks}, typeof(Oceananigans.Fields._set_gpu!), OffsetArrays.OffsetArray{Float64,3,CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, RegularCartesianGrid{Float64,Oceananigans.Grids.Periodic,Oceananigans.Grids.Periodic,Bounded,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}) resulted in invalid LLVM IR; Reason: unsupported call to the Julia runtime (call to jl_f_apply_type); ```. Looking at the full stacktrace it looks like `threadIdx` is undefined so maybe we just forgot to import CUDAnative.jl in the Fields submodule following the big reorganization in #591. There should have been a test for this.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/634:1043,test,test,1043,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/634,1,['test'],['test']
Testability,@christophernhill : I see that #1928 has now been merged. Do you have an example that you would like us to try benchmarking?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-895239884:111,benchmark,benchmarking,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-895239884,1,['benchmark'],['benchmarking']
Testability,"@christophernhill @francispoulin I ran the threaded benchmarks up to 32 threads on 32 cores with Julia 1.6.0 and on the same CPUs as what the MPI benchmarks used. Makes sense since they're all benchmarking parallel computing efficiency. ; ```; Oceananigans v0.58.9; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) CPU E5-2683 v4 @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, broadwell); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :. Shallow water model weak scaling with multithreading benchmark; ┌───────────────┬─────────┬─────────┬─────────┬─────────┬─────────┬───────────┬─────────┬─────────┐; │ size │ threads │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────────┼─────────┼─────────┤; │ (8192, 512) │ 1 │ 1.458 s │ 1.458 s │ 1.458 s │ 1.458 s │ 1.37 MiB │ 2318 │ 4 │; │ (8192, 1024) │ 2 │ 2.925 s │ 2.989 s │ 2.989 s │ 3.052 s │ 18.06 MiB │ 1076944 │ 2 │; │ (8192, 2048) │ 4 │ 2.296 s │ 2.381 s │ 2.397 s │ 2.515 s │ 13.60 MiB │ 760190 │ 3 │; │ (8192, 4096) │ 8 │ 2.347 s │ 2.369 s │ 2.377 s │ 2.415 s │ 16.36 MiB │ 891860 │ 3 │; │ (8192, 8192) │ 16 │ 2.407 s │ 2.548 s │ 2.517 s │ 2.595 s │ 17.44 MiB │ 863941 │ 3 │; │ (8192, 16384) │ 32 │ 3.023 s │ 3.069 s │ 3.069 s │ 3.115 s │ 23.03 MiB │ 1034063 │ 2 │; └───────────────┴─────────┴─────────┴─────────┴─────────┴─────────┴───────────┴─────────┴─────────┘. Shallow water model weak multithreading scaling speedup; ┌───────────────┬─────────┬──────────┬────────────┬─────────┬─────────┐; │ size │ threads │ slowdown │ efficiency │ memory │ allocs │; ├───────────────┼─────────┼────",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-881473478:52,benchmark,benchmarks,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-881473478,4,['benchmark'],"['benchmark', 'benchmarking', 'benchmarks']"
Testability,"@christophernhill @glwagner @ali-ramadhan ; I obtained some interesting results from profiling the shallow water model running on GPU. This was done on Satori's login-002.; The gist of it is that varying gird sizes does not change GPU activities except when the grid size gets very small e.g. 128 x 128. All other grid resolutions profiled had about the same GPU activities result as shown below and so only one set is shown. As far as @francispoulin and I know, the GPU activities seem to be correct, with what should be taking up the most time doing so.; However, for API calls, results differ a lot based on grid resolution. As the grid increases in size, `cuStreamQuery` and eventually `cuCtxGetCurrent` becomes the dominant API call. See below the API call profile result tables for the different grid sizes. It seems that `cuStreamQuery` is what is checking on the status of the cuda streams so larger grids taking more time to run the kernels than launching the kernels may have something to do with it.; ```; Oceananigans v0.61.0; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); GPU: Tesla V100-SXM2-32GB. CUDA toolkit 10.2.89, local installation; CUDA driver 10.2.0; NVIDIA driver 440.64.0. Libraries: ; - CUBLAS: 10.2.2; - CURAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 31.432 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 31.738 GiB / 31.749 GiB available); nothing. [2021/08/11 22:39:51.084] INFO Setting up benchmark: (GPU, F",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898095311:161,log,login-,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898095311,1,['log'],['login-']
Testability,"@christophernhill I also took a look at the `GFlops.jl` package. As said on its homepage: ""GFlops.jl does not see what happens outside the realm of Julia code. It especially does not see operations performed in external libraries such as BLAS calls.""; It works similarly to the profile macro and it can count basic math operations performed by whatever follows the macro or benchmark it for its Flops metric. These doesn't seem to work with simulations but works fine for `time_step!(model, 1)` due to the benchmarking process performing many evaluations of the code.; For the nonhydrostatic model running on CPU, `@count_ops` did not produce any results for either the simulation run or the time_step!, and `@gflops` produced the results below for time step!:; ```; 0.02 GFlops, 0.04% peak (1.89e+07 flop, 1.01e+00 s); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898103351:374,benchmark,benchmark,374,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-898103351,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"@christophernhill is it possible to come up with a benchmark that does not use `ContinuousBoundaryFunction`, thereby avoiding the bug in #1928 ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-894674873:51,benchmark,benchmark,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-894674873,1,['benchmark'],['benchmark']
Testability,@christophernhill looks like tests are headed towards passing to perhaps we just need an approval to merge?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2023#issuecomment-983973173:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2023#issuecomment-983973173,1,['test'],['tests']
Testability,"@christophernhill pointed me to this MITgcm setup: https://github.com/MITgcm/MITgcm/tree/c6adb04bff0a8860ffa46b74e8a11a6a6228274f/verification/front_relax/input. which is very similar and has no horizontal diffusion. However, it does look like it might have horizontal biharmonic viscosity with [`viscA4=1e11`](https://github.com/MITgcm/MITgcm/blob/c6adb04bff0a8860ffa46b74e8a11a6a6228274f/verification/front_relax/input/data#L9) --- can someone else confirm that I'm interpreting that correctly?. I'll re-run these tests with just biharmonic viscosity but no horizontal diffusion (laplacian or biharmonic) and see what happens. Maybe if the results are noisy then we can be sure there's an issue...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107686859:516,test,tests,516,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107686859,1,['test'],['tests']
Testability,@christophernhill suggested just doing `ConformalCubedSphereFaceGrid` in this PR which we could test by itself before worrying about the full `ConformalCubedSphereGrid` + halo exchange in a separate PR. So I'll do this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-796838672:96,test,test,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1417#issuecomment-796838672,1,['test'],['test']
Testability,@elise-palethorpe if you are happy with this PR merge when all tests pass ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2639#issuecomment-1185372669:63,test,tests,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2639#issuecomment-1185372669,1,['test'],['tests']
Testability,@elise-palethorpe we should add a test for the multigrid solver. Perhaps just the poisson equation? Something similar like what's done in `tests/test_preconditioned_conjugate_gradient_solver.jl`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1166869882:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1166869882,2,['test'],"['test', 'tests']"
Testability,@elise-palethorpe when tests pass let’s merge and open a new issue/PR for the preconditioning.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1181619055:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1181619055,1,['test'],['tests']
Testability,"@elise-palethorpe, I added some proper bench tests in `doubly_bounded_poisson.jl`. Seems like the PCG `solve!` has many allocations! I don't know why... @glwagner, @simone-silvestri?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2654#issuecomment-1236224861:45,test,tests,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2654#issuecomment-1236224861,1,['test'],['tests']
Testability,"@elise-palethorpe, we have added the `test_multigrid_solver.jl` but it's never used in the automatic tests. We need to include it there. Perhaps a good place for it is around:; https://github.com/CliMA/Oceananigans.jl/blob/3469cb714343019cedca9a12af9e21d4f9432e0d/test/runtests.jl#L54-L59. E.g., ; ```Julia; if group == :general_solvers || group == :all; @testset ""General Solvers"" begin; include(""test_batched_tridiagonal_solver.jl""); include(""test_preconditioned_conjugate_gradient_solver.jl""); include(""test_multigrid_solver.jl""); end; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1173021015:101,test,tests,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2396#issuecomment-1173021015,3,['test'],"['test', 'tests', 'testset']"
Testability,"@elise-palethorpe, we need to modify:. https://github.com/CliMA/Oceananigans.jl/blob/5644b347a540fa64897e3db587c39bc9a87de5ed/test/test_implicit_free_surface_solver.jl#L97",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1214292113:126,test,test,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2688#issuecomment-1214292113,1,['test'],['test']
Testability,"@fadaie91 is going to run some more validation tests, but I think this PR is basically ready to go. @sandreza this may interest you as well for your 1 deg simulation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1117573124:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1117573124,1,['test'],['tests']
Testability,"@francispoulin ! No worries about the question. I like questions. To answer your latest question --- our nonhydrostatic pressure solver is based on FFTs for regular grids and is therefore quite fast. In simple benchmarks long ago we found that other parts of the algorithm dominated the cost of a time-step. Because of that we aren't sure that having a hydrostatic-only solver would help. Of course, the story is different if we need to stretch the grid in horizontal directions. That said, it would still be interesting to be able to solve hydrostatic-only problems. This would complicate the algorithm a bit because you have to distinguish the barotropic mode, and perform a 2D pressure solve. We already have a function to integrate the buoyancy field to obtain the hydrostatic pressure. For ""things I want worked on"" my wish list falls into three categories: new physics features, new numerics / algorithms, and more boring software / UI work. Here's a couple... 1. Finishing the vertically-stretched grid implementation (numerics). We started work on this but its incomplete. This is a tricky and arduous task but would be quite nice to have... 2. Vertically-implicit time-stepping for diffusion terms (numerics). Ocean models typically use a time-stepping method that treats vertical diffusion terms implicitly. We haven't worried about this because we are focused on LES for the most part, or problems with very little diffusion. But ultimately we will need this, especially when we get around to implementing boundary layer closures. We have a tridiagonal solver that works on the GPU, so in some respects the hard work is already done for this problem. 3. Closures for LES and ocean modeling (Dynamic Smagorinsky, Deardorff, k-epsilon, Gent-McWilliams, convective adjustment (?) etc --- physics). We have a need to implement new turbulence closures new and old alike. Gent-McWilliams is probably easy since we already have a Leith closure implemented which calculates the tensor needed to rot",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281:210,benchmark,benchmarks,210,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1153#issuecomment-724262281,1,['benchmark'],['benchmarks']
Testability,@francispoulin (and @hennyg888 ) no worries. We can use what we have too. . I think both these tests ( #1861 and #1722 ) are on a single CPU (just lots of cores)?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880901251:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880901251,1,['test'],['tests']
Testability,"@francispoulin @glwagner ; > problem is that the velocity field is far from uniform at the outlet where a constant outflow of 1.0 is being prescribed. I wonder if this would cause numerical issues. To use `NormalFlow` we may either need a sponge layer, or to implement a more sophisticated outlet condition like an Orlanski condition. I have a version with a sponge layer I used for my own testing I could add. I updated the arbitrary grid branch to have the validation correct with normal flow's location specified, but the master version never got changed. > > If we are going to update this example, it's probably better to use `ImmersedBoundaryGrid` like in the other immersed boundary validation experiments...; > ; > Good point and I can look into that before this is reviewed. I was waiting for no-slip condition on the `ImmersedBoundaryGrid` before this validation is useful again, because otherwise you just get fun videos, but no actual validation. I have a work in progress script with a bunch of analysis I can add when we're ready to do so. Until then it might be best just to remove this file completely because it's so out of date.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1793#issuecomment-871667459:390,test,testing,390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1793#issuecomment-871667459,1,['test'],['testing']
Testability,"@francispoulin @glwagner @ali-ramadhan @christophernhill ; I took a look at all the benchmarking scripts in our benchmarks folder and realized that many of them are very similar and can be unified. For example, the single script for shallow water model's strong and weak scaling differ only by one substring. ; The latest commit I pushed to this branch unifies all of the launcher and single scripts for shallow water model into three scripts. Now, at the top of the launcher script `distributed_shallow_water_model.jl`, there are two boolean variables that the user can toggle for strong vs weak scaling and mpi vs threaded parallel execution. Everything including output graphs, HTML tables, and info messages also change accordingly based on the two booleans. There are some other features that Francis and I have discussed but would like your approval first before adding them in.; Other possible additions to the script can include a for loop which wraps around the whole launcher script which loops through the strong/weak scaling and mpi/threaded parallelism options to allow for running 4 benchmarks at once. Another possible addition is to have what model is benchmarked also be an option. Granted, I could just copy and paste the shallow water model scripts and replace all instances of `shallow water` with `nonhydrostatic` or `hydrostatic` and tune some options a little bit, but then this would again cause avoidable clutter. Having what model is benchmarked as an easily changeable option can be achieved through a model setup function that dispatches what model is initialized based on a custom model type object that's passed to it. Everything else would be cosmetic formatting of outputs and info messages.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-899928441:84,benchmark,benchmarking,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-899928441,5,['benchmark'],"['benchmarked', 'benchmarking', 'benchmarks']"
Testability,"@francispoulin @navidcy let's manually test whether this resolves #1780. (It'd be better to have a test that fails, but the tests #1782 stubbornly refuse to fail.)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1790:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1790,4,"['stub', 'test']","['stubbornly', 'test', 'tests']"
Testability,"@francispoulin Ah 1.69 is how much slower `UpwindBiasedFifthOrder` is on the GPU instead of `CenteredSecondOrder` (also on the GPU). Below are the raw benchmarks and the CPU -> GPU speedups which show a speedup of ~114x for `UpwindBiasedFifthOrder` on 192^3 which should agree better with your figure of ~80x. Actually looking at the advection scheme benchmarks more closely it looks like WENO5 is incurring lots of CPU allocations. According to https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-725471594 changing the advection did not change the number of allocations, but now it does and WENO5 allocates much more memory than the other schemes. @glwagner I posted the turbulence closure benchmarks below and they seem fine/unchanged. ---. # Advection scheme benchmarks. ```; Advection scheme benchmarks ; ┌───────────────┬────────────────────────┬────────────┬────────────┬────────────┬────────────┬───────────┬────────┬─────────┐ ; │ Architectures │ Schemes │ min │ median │ mean │ max │ memory │ allocs │ samples │ ; ├───────────────┼────────────────────────┼────────────┼────────────┼────────────┼────────────┼───────────┼────────┼─────────┤ ; │ CPU │ CenteredFourthOrder │ 1.541 s │ 1.545 s │ 1.545 s │ 1.548 s │ 1.61 MiB │ 2096 │ 4 │ ; │ CPU │ CenteredSecondOrder │ 1.029 s │ 1.035 s │ 1.036 s │ 1.048 s │ 1.61 MiB │ 2096 │ 5 │ ; │ CPU │ UpwindBiasedFifthOrder │ 2.250 s │ 2.251 s │ 2.251 s │ 2.252 s │ 1.61 MiB │ 2096 │ 3 │ ; │ CPU │ UpwindBiasedThirdOrder │ 1.589 s │ 1.594 s │ 1.594 s │ 1.599 s │ 1.61 MiB │ 2096 │ 4 │ ; │ CPU │ WENO5 │ 6.339 s │ 6.339 s │ 6.339 s │ 6.339 s │ 1.61 MiB │ 2096 │ 1 │ ; │ GPU │ CenteredFourthOrder │ 17.309 ms │ 17.419 ms │ 18.107 ms │ 24.384 ms │ 2.71 MiB │ 27650 │ 10 │ ; │ GPU │ CenteredSecondOrder │ 10.369 ms │ 11.588 ms │ 11.472 ms │ 11.642 ms │ 2.53 MiB │ 16296 │ 10 │; │ GPU │ UpwindBiasedFifthOrder │ 19.561 ms │ 19.675 ms │ 20.975 ms │ 32.694 ms │ 2.77 MiB │ 32028 │ 10 │ ; │ GPU │ UpwindBiasedThirdOrder │ 16.131 ms │ 16.211 ms │ 16.8",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868470173:151,benchmark,benchmarks,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868470173,5,['benchmark'],['benchmarks']
Testability,"@francispoulin Hope you don't mind that I formatted your original post to put triple backticks (```) around the test results to make them easier to read. If those tests failed on master, would be good to investigate why... Can you post the full output from running the tests?. Not sure why checkpointer would fail, but I could see some of the regression tests failing if your GPU is very different maybe. Do you know what GPU you used to run the tests with? Might be good for Oceananigans to print this info as part of `runtests.jl`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-726915118:112,test,test,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-726915118,5,['test'],"['test', 'tests']"
Testability,"@francispoulin I do not know but I think it would be good to find out. `VerticallyImplicitTimeDiscretization`, despite being verbose, is actually too terse --- what we are really implementing is a _backwards_ vertically implicit time discretization. Our implementation in `QuasiAdamsBashforth2` is a first-order backwards approximation. Note that `QuasiAdamsBashforth2` is also first-order for explicit stepping, so this implementation should not change the accuracy of the scheme, I don't think. In `RungeKutta3` we implement a scheme that is backwards ""within stages"". This corresponds to some particular choice of Butcher tableau and I am not sure if it is formally 3rd order still. We might be able to develop a convergence test to an analytical solution to investigate this problem. It needs to be relatively high spatial resolution so that time-stepping errors are larger than spatial discretization errors. I propose we implement some validation tests and convergence tests in a future PR though to avoid bogging this PR down more...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1639#issuecomment-838806675:728,test,test,728,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1639#issuecomment-838806675,3,['test'],"['test', 'tests']"
Testability,"@francispoulin I have implemented the vector invariant / non conservative form of the equations. I have also separated the advection between momentum / velocity, height and tracers. Now we have to think at some nice test cases, I ll start with the bickley jet experiment",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1118992666:216,test,test,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1118992666,1,['test'],['test']
Testability,"@francispoulin I noticed you are adding convergence tests. We also have convergence tests under `validation` here:. https://github.com/CliMA/Oceananigans.jl/tree/master/validation/convergence_tests. and it could make sense to contribute your convergence tests there. The tests are used to generate figures for documentation:. https://clima.github.io/OceananigansDocumentation/stable/validation/convergence_tests/. @ali-ramadhan can comment on how convergence tests might be added to our CI / automated testing suite. Is this PR just intended just to add advection schemes, or it is attempting to add higher-order operators for other terms as well? It'd be great to have higher-order finite volume operators for diffusion terms, for example. Does it make sense to contribute these in a separate PR and consider how they might be used in diffusion operators (for example)?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-743686982:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-743686982,6,['test'],"['testing', 'tests']"
Testability,@francispoulin Should we consider merging this soon since it seems we have a working distributed shallow water model? Might just be missing some basic tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799554920:151,test,tests,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-799554920,1,['test'],['tests']
Testability,"@francispoulin Sorry for the neglected state of this PR. It's in a half-baked state and I keep meaning to revisit it. You can decompose the domain into x, y, z cubes/slabs/pencils/etc. Then ""halo communication boundary conditions"" are injected on edges where the model needs to communicate with another rank then communication occurs as part of `fill_halo_regions!`. I was working on adding a test to verify that all halo region data was communicated properly for CPU and GPU models but encountered some deadlocking (according to latest commit message haha). Hoping to revisit soon, don't think it should be too hard to get this PR to work for a shallow water model or compressible model (pressure solver will the hard part of an MPI incompressible model).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-732934807:393,test,test,393,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-732934807,1,['test'],['test']
Testability,"@francispoulin That's awesome that it works now! I guess we can start testing different domain decompositions, topologies, scaling, etc. (or anything we want) with the distributed shallow water model now!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-794345782:70,test,testing,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1430#issuecomment-794345782,1,['test'],['testing']
Testability,@francispoulin This particular failure happens occasionally and I think it's related to #1179 but haven't really investigated. Usually I just restart the test and it passes the second time. Did it here so hopefully it should pass. @tomchor Doc builds seem to be hanging recently across most PRs and commits. I haven't had time to investigate but hope to soon...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1558#issuecomment-815971255:154,test,test,154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1558#issuecomment-815971255,1,['test'],['test']
Testability,"@francispoulin and I also tried to increase the grid size to see if that would saturate the CPUs more and thus improve efficiency. Grid size was doubled, and the strong scaling shallow water model benchmarking script ran into some problems. However, the results from the weak scaling benchmark is sufficient enough to show that doubling grid size did indeed improve the larger ranked efficiencies from around 75% to above 80%. weak scaling shallow water model, with grid size 16384 x 1024R where R is the number of cores:; ```; ┌─────────────────┬──────────┬─────────┬─────────┬─────────┬─────────┬──────────┬────────┬─────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├─────────────────┼──────────┼─────────┼─────────┼─────────┼─────────┼──────────┼────────┼─────────┤; │ (16384, 1024) │ (1, 1) │ 5.827 s │ 5.827 s │ 5.827 s │ 5.827 s │ 1.60 MiB │ 2804 │ 1 │; │ (16384, 2048) │ (1, 2) │ 5.863 s │ 5.866 s │ 5.866 s │ 5.870 s │ 1.49 MiB │ 3146 │ 2 │; │ (16384, 4096) │ (1, 4) │ 5.825 s │ 5.850 s │ 5.845 s │ 5.855 s │ 1.49 MiB │ 3146 │ 4 │; │ (16384, 8192) │ (1, 8) │ 5.945 s │ 5.991 s │ 5.989 s │ 6.014 s │ 1.49 MiB │ 3146 │ 8 │; │ (16384, 16384) │ (1, 16) │ 6.271 s │ 6.352 s │ 6.336 s │ 6.368 s │ 1.49 MiB │ 3146 │ 16 │; │ (16384, 32768) │ (1, 32) │ 7.150 s │ 7.316 s │ 7.300 s │ 7.391 s │ 1.49 MiB │ 3146 │ 32 │; │ (16384, 65536) │ (1, 64) │ 6.816 s │ 7.189 s │ 7.178 s │ 7.344 s │ 1.49 MiB │ 3155 │ 64 │; │ (16384, 131072) │ (1, 128) │ 6.874 s │ 7.096 s │ 7.123 s │ 7.468 s │ 1.49 MiB │ 3155 │ 128 │; └─────────────────┴──────────┴─────────┴─────────┴─────────┴─────────┴──────────┴────────┴─────────┘. Shallow water model weak scaling speedup; ┌─────────────────┬──────────┬──────────┬────────────┬──────────┬─────────┐; │ size │ ranks │ slowdown │ efficiency │ memory │ allocs │; ├─────────────────┼──────────┼──────────┼────────────┼──────────┼─────────┤; │ (16384, 1024) │ (1, 1) │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (16384, 2048) │ (1, 2) │ 1.00682 │ 0.99323 │ 0.9",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-864573659:197,benchmark,benchmarking,197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-864573659,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,@francispoulin and I are already working on that.; We should be able to have the new benchmarks out and up around some time next week.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-844614664:85,benchmark,benchmarks,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1676#issuecomment-844614664,1,['benchmark'],['benchmarks']
Testability,"@francispoulin and I ran some of the strong and weak scaling scripts recently up to 128 CPU cores. An extra bit of code was added into the files that handled the plotting. Also added was a small but vital configuration adjustment for the @benchmark macro which allowed for more than 64 cores to be benchmarked without what is perceived as deadlocking from occurring. I will PR my all my changes made to the benchmarking scripts shortly. Here are the results:. weak scaling shallow water model, with grid size being 8192 x 512R where R is the number of cores:; ```; ┌───────────────┬──────────┬─────────┬─────────┬─────────┬─────────┬──────────┬────────┬─────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼──────────┼─────────┼─────────┼─────────┼─────────┼──────────┼────────┼─────────┤; │ (8192, 512) │ (1, 1) │ 1.464 s │ 1.464 s │ 1.465 s │ 1.466 s │ 1.60 MiB │ 2804 │ 4 │; │ (8192, 1024) │ (1, 2) │ 1.475 s │ 1.475 s │ 1.477 s │ 1.486 s │ 1.49 MiB │ 3146 │ 8 │; │ (8192, 2048) │ (1, 4) │ 1.472 s │ 1.475 s │ 1.477 s │ 1.509 s │ 1.49 MiB │ 3146 │ 16 │; │ (8192, 4096) │ (1, 8) │ 1.500 s │ 1.503 s │ 1.508 s │ 1.537 s │ 1.49 MiB │ 3146 │ 32 │; │ (8192, 8192) │ (1, 16) │ 1.545 s │ 1.578 s │ 1.593 s │ 1.682 s │ 1.49 MiB │ 3146 │ 64 │; │ (8192, 16384) │ (1, 32) │ 1.744 s │ 1.803 s │ 1.805 s │ 1.894 s │ 1.49 MiB │ 3146 │ 96 │; │ (8192, 32768) │ (1, 64) │ 1.723 s │ 1.792 s │ 1.795 s │ 1.868 s │ 1.49 MiB │ 3155 │ 192 │; │ (8192, 65536) │ (1, 128) │ 1.679 s │ 1.809 s │ 1.811 s │ 1.907 s │ 1.49 MiB │ 3155 │ 384 │; └───────────────┴──────────┴─────────┴─────────┴─────────┴─────────┴──────────┴────────┴─────────┘. Shallow water model weak scaling speedup; ┌───────────────┬──────────┬──────────┬────────────┬──────────┬─────────┐; │ size │ ranks │ slowdown │ efficiency │ memory │ allocs │; ├───────────────┼──────────┼──────────┼────────────┼──────────┼─────────┤; │ (8192, 512) │ (1, 1) │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (8192, 1024) │ (1, 2) │ 1.00706",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-864572422:239,benchmark,benchmark,239,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-864572422,3,['benchmark'],"['benchmark', 'benchmarked', 'benchmarking']"
Testability,"@francispoulin and I recently ran some of the benchmark scripts with Julia 1.6.0 and Oceananigans v0.58.1.; If these benchmarks differ enough from the ones currently shown on [`benchmarks.md`](https://github.com/CliMA/Oceananigans.jl/blob/master/docs/src/benchmarks.md) then I'll make a PR to update them. The hardware these new benchmarks were run on are mostly the exact as the old benchmarks save for a few that were ran on Titan V GPUs but are now run on Tesla V100 GPUs. The shallow water model benchmarks were run without problems. With CPU, when the grid size exceeded 2048 x 2048, only one sample could be benchmarked. Trying to get more samples benchmarked by increasing the sampling time limit resulted in out of memory exceptions.; ```; Oceananigans v0.58.1; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :; GPU: Tesla V100-SXM2-32GB. Shallow water model benchmarks; ┌───────────────┬─────────────┬──────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼──────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.041 ms │ 2.154 ms │ 2.246 ms │ 3.207 ms │ 1.36 MiB │ 2253 │ 10 │; │ CPU │ Float64 │ 64 │ 3.224 ms │ 3.367 ms │ 3.408 ms │ 4.031 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 128 │ 7.495 ms │ 7.620 ms │ 7.661 ms │ 8.193 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Flo",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722:46,benchmark,benchmark,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722,9,['benchmark'],"['benchmark', 'benchmarked', 'benchmarks']"
Testability,@francispoulin this will hopefully test the question you've raised on #1780 .,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1782:35,test,test,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1782,1,['test'],['test']
Testability,"@francispoulin yes, it is serial on the CPUs. The halos are indeed 3 for the `WENO5`, but if we use a vector invariant weno formulation (so we are interpolating vorticity) we need 4 halos because calculating vorticity itself requires one halo. @glwagner there is a type inference issue with `getregion(model, 1)` (you can see it in your validation test also). I think, solving that, the only overhead will be the `fill_halo` (and launching multiple kernels which maybe will not affect too much)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1108531966:348,test,test,348,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1108531966,1,['test'],['test']
Testability,"@glwagner : I agree that the major savings would be the lack of vertical grid points, but having a full free-surface will likely force a smaller time step because of CFL. There would be two ways to reduce this constraint (in the future). 1. Rigid lid (solve for the surface pressure); 2. Implicit free-surface (treat the free-surface implicitly in the time-stepping). Both of these would borrow from the hydrostatic model, but the ingrediants are there, and would make it a lot faster. The rigid lid would allow use to test the exact equatorial Rossby wave solutions. @simone-silvestri : I think trying this with realistic coastlines would be a lot of fun and I look forward to seeing what you discover. I'll be hoping WENO can manage it without a problem.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1119190705:519,test,test,519,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1119190705,1,['test'],['test']
Testability,"@glwagner : I don't know that this approaches achieves the high order that we can achieve and I am happy to try something else. . Also, it would be nice to have a test that does this. The test that we have for advection assumes that `h` is constant initially, and that migth be too simple to see whether we always achieve the high order that we want to achieve.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-1116367010:163,test,test,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1866#issuecomment-1116367010,2,['test'],['test']
Testability,"@glwagner : did you want me to create an issue for a test for a future PR or create a test in this PR? I looked around and besides the convergence tests, I don't know whether we have tests for other advection schemes.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-906436595:53,test,test,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-906436595,4,['test'],"['test', 'tests']"
Testability,"@glwagner : unfortunately, my desktop is acting up and I can't get very far in my simulations on a GPU without running out of memory, and it's not far at all. I don't understand this at all as it ran a couple of hours ago, perfectly fine. However, as for the bounded case, I don't think it is a reasonable test case as in this problem the jet is in the x direction. If we change it from `Periodic` to `Bounded`, then `u=0` and it will give rise to a very different scenario since I'm looking at a jet `u(y,z)`. Do you see my concern, because of the no-normal flow boundary conditions?. When my computer seems better behaved I will happily run the example again but at the moment, sadly, I can't.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-816007554:306,test,test,306,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-816007554,1,['test'],['test']
Testability,"@glwagner ; > @whitleyv do you mind if I add a unit test to ensure that `IncompressibleModel` can take one time step with a simple `immersed_boundary`? This will exercise the code that's being added during CI, so that it can't be accidentally broken in a future PR. By all means! Whatever will help. > I think what we really want to do is define a fallback `correct_immersed_tendencies!(args...) = nothing` in the `TimeSteppers` module . Is this different than the `correct_immersed_tendencies!(model, ::Nothing, Δt, γⁿ, ζⁿ) = nothing` I have?. > @whitleyv let me know what you'd like to do: you can make these changes, or I can help either by pair programming or making them myself. I don't mind moving the `correct_immersed_tendencies!` to the `Models.IncompressibleModels` module. I know y'all moved a lot of things away from the `Timesteppers`, which makes sense. If you have the time, it'd probably be better for you to either help me or do it yourself, since I'm not sure I'd catch all the parts I need to add. > @whitleyv should we add `correct_immersed_tendencies!` to the quasi-second-order Adams-Bashforth algorithm as well?. Right now the `correct_immersed_tendencies! ` is specific to RK3 in how we negate the tendencies, but I think the future implementation will be more versatile!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1368#issuecomment-781743506:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1368#issuecomment-781743506,1,['test'],['test']
Testability,@glwagner @francispoulin and @hennyg888 I added #1928 toward being able to do a meaningful `HydrostaticFreeSurface`. When #1928 is fixed we should be good to add a setup for benchmarking. 🤞,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-894596840:174,benchmark,benchmarking,174,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-894596840,1,['benchmark'],['benchmarking']
Testability,"@glwagner @jlk9 with a bunch more fixes pushed into Enzyme itself, this now fully passes the Enzyme (cpu) tests so I think we should be good to merge!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3618#issuecomment-2194822669:106,test,tests,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3618#issuecomment-2194822669,1,['test'],['tests']
Testability,"@glwagner @navidcy, should be ready to merge (if tests pass)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1384307957:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2817#issuecomment-1384307957,1,['test'],['tests']
Testability,"@glwagner @simone-silvestri @jm-c - does this look OK for an approve 👍 ; Buildkite is back and happy now! . Its a validation update, but it will make it easier to do next steps (i.e. add new and improved immersed etc.. ) with some tests. . Thx,. Chris",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2170#issuecomment-1019292768:231,test,tests,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2170#issuecomment-1019292768,1,['test'],['tests']
Testability,"@glwagner @suyashbire1 This PR should be ready for review. Let me know what you guys think. Right now it's a pretty standalone solver but I'd like to convert the example in PR #306 to a pressure solver that uses `BatchedTridiagonalSolver` so I can test the vertically stretched grid in PR #543. Future improvements for solving batched tridiagonal systems on the GPU:; 1. Instead of using a 3D temporary array to store intermediate computations, can probably recompute the coefficients on the fly. I initially thought we just needed a 1D temporary array but the GPU needs a 3D array so threads aren't reading/writing to the same locations.; 2. Once vertically stretched grid tests pass, should probably upgrade to a faster TDMA algorithm courtesy of @maleadt. See https://gist.github.com/maleadt/1ec91b3b12ede9898958c95596cabe8b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561381701:248,test,test,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561381701,2,['test'],"['test', 'tests']"
Testability,"@glwagner @tomchor ; I have just tested the turbulent boundary layer with wall model using Oceananigans on Julia 1.6.7 and Julia 1.9.2. The performances of AMD in both versions are exactly the same. It turns to overestimate the velocity shear at the second node from the wall, therefore, turns to overestimate the velocity in the middle and upper parts of the boundary layers. I used to use the SGS model based on the Lagrangian-averaged scale-dependent dynamic model (LASD) (https://pubs.aip.org/aip/pof/article/17/2/025105/895722/A-scale-dependent-Lagrangian-dynamic-model-for). @tomchor is very familiar with this SGS model. The performance of the LASD close to the wall is usually good, as you can see here; ![025105_1_f2](https://github.com/CliMA/Oceananigans.jl/assets/20816949/e4aa1b73-d37e-4afa-b3ec-317d2edf7769). I guess the problem of AMD is partly solved in reference Yang et al. (2017). Now the problem is that if someone can implement this filtering in the code or not. I am stilling learning the Oceananigans and Julia. I hope that someday in the future, I am able to implement this technique.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1652877426:33,test,tested,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1652877426,1,['test'],['tested']
Testability,"@glwagner How long does the example test take? Travis CI is timing out:. ```; Running example deepening_mixed_layer.jl. No output has been received in the last 10m0s, this potentially indicates a stalled build or something wrong with the build itself.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519685513:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519685513,1,['test'],['test']
Testability,"@glwagner I added the following test, which should pass. What kind of `ArgumentError` do you want to test?. ```; # Test setting the background_fields to a Field ; U_field = XFaceField(arch, grid) ; U_field .= 1 ; model = IncompressibleModel(grid=grid, architecture=arch, background_fields = (u=U_field,)); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-877361058:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1834#issuecomment-877361058,3,"['Test', 'test']","['Test', 'test']"
Testability,@glwagner I added turbulence diagnostics tests to ensure that `DiffusiveCFL` is compatible with all closures. Unfortunately it failed on `TwoDimensionalLeith` as it was bundled with `AbstractSmagorinsky` and `TwoDimensionalLeith` does not have a `closure.Pr` field. I split it off into its own `cell_diffusion_timescale` where it's easy to calculate the viscous CFL condition but it seems that `TwoDimensionalLeith` calculates the nonlinear diffusivity on the fly and so there is no easy/cheap way to compute the diffusive CFL for each tracer. I'm thinking of merging this PR because I need the bugfix for a script in another repo. I will open an issue about the diffusive CFL for `TwoDimensionalLeith` (out of scope for this PR).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/557#issuecomment-565749038:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/557#issuecomment-565749038,1,['test'],['tests']
Testability,"@glwagner I agree --- but no need to do it for this PR. However, I won't merge if I don't see all tests pass and somehow I can't restart the buildkite builds. (Either I don't have rights to do so or I don't know how.) Can you help me out here?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1221#issuecomment-736919195:98,test,tests,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1221#issuecomment-736919195,1,['test'],['tests']
Testability,"@glwagner I have opened a PR with the branch sb/cut-cells-experiment, on which I have been working on implementing the cut cells. To summarize the progress:. - The two-dimensional [tracer advection test case](https://github.com/CliMA/Oceananigans.jl/blob/main/validation/immersed_boundaries/tracer_advection_over_bump.jl) over a Gaussian bump is run successfully using the low resolution from the [Adcroft](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml) paper and a relatively higher resolution. Both partial cells and full cells are used. Time evolution of the passive tracer concentration is visualized. - CutCellBottom is implemented in the ImmersedBoundary module similar to PartialCellBottom, and the tracer advection test case is repeated with cut cells. No noticeable difference in the results is detected so far (with the simulation using partial cells). So, tasks 1 (a) and 2 (b) have been completed so far. Tasks 2(b) and 2(c) are being worked on right now, after completion of which tasks 1 (b) and 3 will be initiated.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402:198,test,test,198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123#issuecomment-1592059402,2,['test'],['test']
Testability,"@glwagner I have simplified the test script (good idea as it was clunky for me to sieve through and I wrote it..) and the new tests pass on both `CPU()` and `GPU()`. ~~The error from the docs build does not look related to this PR as far as I can tell! The docs built on a previous version and I do not think I changed any code related to the docstring.~~. This PR is already likely enough but one thing that could be done is to move `src/Buoyancy/buoyancy_field.jl`. ```julia; # TODO: move to Models; buoyancy(model) = buoyancy(model.buoyancy, model.grid, model.tracers); buoyancy(b, grid, tracers) = KernelFunctionOperation{Center, Center, Center}(buoyancy_perturbationᶜᶜᶜ, grid, b.model, tracers); BuoyancyField(model) = Field(buoyancy(model)); ```. to `Oceananigans.Models` and alter this so instead of returning `BuoyancyField` it returns the `KernelFunctionOperation`. ```julia; sewater_buoyancy_perturbation(model) = sewater_buoyancy_perturbation(model.buoyancy, model.grid, model.tracers); sewater_buoyancy_perturbation(b, grid, tracers) = KernelFunctionOperation{Center, Center, Center}(buoyancy_perturbationᶜᶜᶜ, grid, b.model, tracers); SewaterBuoyancyPerturbation(model) = sewater_buoyancy_perturbation(model); ```. to match the behaviour of `SeawaterDensity`.; Likely better to do another day but if you think it worth doing in this PR let me know.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3329#issuecomment-1758784047:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3329#issuecomment-1758784047,2,['test'],"['test', 'tests']"
Testability,"@glwagner I might need help with this one. When I try to use `ZDirection` I keep getting this KA-related error:. ```julia; Batched tridiagonal solver [CPU()]: Error During Test at /home/tomas/repos/Oceananigans.jl3/test/test_batched_tridiagonal_solver.jl:169; Test threw exception; Expression: can_solve_single_tridiagonal_system(arch, Nz; tridiagonal_direction); MethodError: no method matching work_layout(::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing; include_right_boundaries=false, reduced_dimensions=(), location=nothing, only_active_cells=false); Closest candidates are:; work_layout(::Any, ::Tuple; kwargs...) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:33; work_layout(::Any, ::Symbol; include_right_boundaries, location, reduced_dimensions, only_active_cells) at ~/repos/Oceananigans.jl3/src/Utils/kernel_launching.jl:51; Stacktrace:; [1] launch!(::CPU, ::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, ::Nothing, ::typeof(Oceananigans.Solvers.solve_batched_tridiagonal_system_kernel!), ::Array{Float64, 3}, ::Vararg{Any}; include_right_boundaries::Bool, reduced_dimensions::Tuple{}, location::Nothing, only_active_cells::Bool, kwargs::Base.Pairs{Symbol, Union{}, Tuple{}, NamedTuple{(), Tuple{}}}); @ Ocea",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506:172,Test,Test,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3117#issuecomment-1564858506,3,"['Test', 'test']","['Test', 'test']"
Testability,"@glwagner I modified the docstring with a small example that I think illustrates the patterns relatively in [this commit](https://github.com/CliMA/Oceananigans.jl/pull/1293/commits/3b11bb07ca8a1ff97976d2ce743a1cd8afe2a4f0). I'm assuming that's what you meant by ""example"", right?. I've tested it already in some simple examples and it produces correct results. Is there anything else left besides testing this with an actual complex calculation that can only be done via `KernelComputedField` on a GPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1246#issuecomment-759601574:286,test,tested,286,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1246#issuecomment-759601574,2,['test'],"['tested', 'testing']"
Testability,"@glwagner I need some help with:. - Top boundary condition: when I try constructing it with parameters, e.g.,; ```; b_surf(x, y, t, p) = p.b0 * cos(π * x / p.Lx); ```; the script does run. All the movies I made was like that. But when Documenter.jl run is it fails! I can reproduce this -- I know this is not so clear now. I tried all combinations of parameters/arguments and I can't understand what's happening. That's why I hard coded the values in the surface boundary condition at the moment. - Why do we get all these warnings from the Logger when we run the simulation? Perhaps these warnings hint something about the boundary condition issue? They seem boundary condition related... - As you can see from the movies this problem is ideal for VerticallyStretchedGrids as there for a boundary layer at the Any attempts adding a `VerticallyStretchedGrid` has given be blow ups, *even when the stretching on the grid is almost zero*, i.e., when the `VerticallyStretchedGrid` ≈ `RegularGrid`. - How do I setup the Poisson solver to obtain solution of ∇²b=0 with b(x, t) = cos(πx) and no flux boundary condition at all other walls.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-877709922:541,Log,Logger,541,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1847#issuecomment-877709922,1,['Log'],['Logger']
Testability,@glwagner I ran the tests and they got stuck in the same place where [this test](https://buildkite.com/clima/oceananigans/builds/8208#01821729-56d9-42df-8776-730055a3332e) got stuck. So it appears that there's something to be fixed here...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194728110:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194728110,2,['test'],"['test', 'tests']"
Testability,"@glwagner I tested the fix locally, seems to fix the issue. I was also catching up with a past discussion on turbulence closure (https://github.com/CliMA/Oceananigans.jl/issues/1277). I tried setting up a simulation with `closure = (AnisotropicMinimumDissipation(), ScalarDiffusivity(ν=κ,κ=κ))` but am getting errors with `no method matching south_ib_flux`. Could this be specific to immersed boundary or has the turbulence closure definition of the molecular values of kinematic viscosity and diffusivity changed since https://github.com/CliMA/Oceananigans.jl/issues/1277?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1106333798:12,test,tested,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1106333798,1,['test'],['tested']
Testability,"@glwagner I tested the no-slip boundary condition on the classic case of a lock-release gravity current in a rectilinear channel (see video) and compared the position of the front of the dense current as a function of time for the case of an immersed boundary with the no-slip condition, a real boundary with the no-slip condition, and an immersed boundary with the slip condition. . https://user-images.githubusercontent.com/31293515/164257859-0deb6cf1-f6b7-414a-a86d-8b47d194b98a.mp4. ![Xfr](https://user-images.githubusercontent.com/31293515/164257805-0ac9a5e4-a575-442c-b676-1660c052a2ed.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104021544:12,test,tested,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104021544,1,['test'],['tested']
Testability,"@glwagner I tested this locally, tests are passing, and I believe I addressed all your comments, so this should be ready for re-review. That said, github tells me there's a requested revision by you but I can't figure out what to do about it. Could you please take a look?. @simone-silvestri @navidcy also feel free to review",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1280126525:12,test,tested,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1280126525,2,['test'],"['tested', 'tests']"
Testability,"@glwagner I think I see what you mean now. It's definitely a harder problem than I anticipated. I think the ideal way would be to infer these conditions automatically, but like you said that may be a very hard problem. I don't think it's ill-posed, since you basically have all the necessary information in one way or another. So if I, a human, can arrive at the right answer with the same information, I think a program could do the same. Second best way would be to try infer the right BCs but provide an option to manually force a certain BC. I think inferring should be relatively easy in very simple cases, no? ~For example, in the pseudo-code below...~. ```julia. ... # Some code; UVelocityBoundaryConditions(grid, top = BoundaryCondition(Gradient, 0), bottom = BoundaryCondition(Gradient, 0),); ... # More code. dudz_comp = ComputedField(∂z(u)); compute!(dudz_comp); ```. ~This currently produces something with the wrong derivatives at the boundary, but I'd expect that it wouldn't be too hard to get this one right automatically since you basically have to do something similar to solve the Boussinesq equations. Am I wrong?~. Finally, I don't oppose relying completely on the user to provide the BCs for the ComputedFields like you said. Mostly I don't know the difference in the amount of effort between these options! So maybe if this one is significantly faster to code/test than the other ones, this should be the way for now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1130#issuecomment-773373837:1383,test,test,1383,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1130#issuecomment-773373837,1,['test'],['test']
Testability,"@glwagner I think irrespective of what is causing #1554 it would be good to print a warning when you try to use a pressure solver with a `Flat` topology because it's not tested so there's no guarantee your solution will be correct. Definitely agree that the right thing to do is to fix the problem, i.e. support `Flat` topologies, but if no one has the time to do that right now then a warning seems reasonable until `Flat` pressure solvers can be properly fixed and tested.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1556#issuecomment-815953392:170,test,tested,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1556#issuecomment-815953392,2,['test'],['tested']
Testability,"@glwagner I think the tests are failing because the `hydrostatic_turbulent_kinetic_energy_tendency` tracer function is being given `val_tracer_name` when its not expecting it, but when I modify it to take it after `val_tracer_index` it still fails, do you have any ideas?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1400997721:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1400997721,1,['test'],['tests']
Testability,@glwagner I think we're getting some non-deterministic CI errors again... tests are failing for this commit that didn't on the previous one.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2127959583:74,test,tests,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2127959583,1,['test'],['tests']
Testability,"@glwagner I'm running into a similar issue (v0.30.0):. ```; ERROR: LoadError: AssertionError: CUDAdrv.jl did not successfully initialize, and is not usable.; Stacktrace:; [1] libcuda at /home/mike/.julia/packages/CUDAdrv/Uc14X/src/CUDAdrv.jl:82 [inlined]; [2] (::CUDAdrv.var""#535#cache_fptr!#11"")() at /home/mike/.julia/packages/CUDAapi/XuSHC/src/call.jl:31; [3] macro expansion at /home/mike/.julia/packages/CUDAapi/XuSHC/src/call.jl:39 [inlined]; [4] macro expansion at /home/mike/.julia/packages/CUDAdrv/Uc14X/src/libcuda.jl:36 [inlined]; [5] macro expansion at /home/mike/.julia/packages/CUDAdrv/Uc14X/src/error.jl:110 [inlined]; [6] cuDeviceGetCount at /home/mike/.julia/packages/CUDAapi/XuSHC/src/call.jl:93 [inlined]; [7] length at /home/mike/.julia/packages/CUDAdrv/Uc14X/src/devices.jl:105 [inlined]; [8] iterate(::CUDAdrv.DeviceSet, ::Int64) at /home/mike/.julia/packages/CUDAdrv/Uc14X/src/devices.jl:100 (repeats 2 times); [9] iterate at ./iterators.jl:139 [inlined]; [10] iterate(::Base.Iterators.Enumerate{CUDAdrv.DeviceSet}) at ./iterators.jl:138; [11] top-level scope at /home/mike/.julia/packages/Oceananigans/1xP6n/src/Oceananigans.jl:131; [12] include(::Module, ::String) at ./Base.jl:377; [13] top-level scope at none:2; [14] eval at ./boot.jl:331 [inlined]; [15] eval(::Expr) at ./client.jl:449; [16] top-level scope at ./none:3; in expression starting at /home/mike/.julia/packages/Oceananigans/1xP6n/src/Oceananigans.jl:124; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/788#issuecomment-653563655:78,Assert,AssertionError,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/788#issuecomment-653563655,1,['Assert'],['AssertionError']
Testability,@glwagner I'm testing in this PR using https://github.com/glwagner/OceananigansArtifacts.jl,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3553:14,test,testing,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3553,1,['test'],['testing']
Testability,"@glwagner I've modified the PR to make clear that this is providing unit tests of the Oceananigans setting utility/broadcast functionality, at at increasingly high level",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2106057500:73,test,tests,73,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2106057500,1,['test'],['tests']
Testability,"@glwagner I've put in the fixes you requested. I've added `push!(LOAD_PATH, joinpath(@__DIR__, ""..""))` to the top of every script in the benchmarks folder. I've also deleted Oceananigans from Project.toml.; Before I push my local commits, does Manifest.toml require any changes?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866283801:137,benchmark,benchmarks,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866283801,1,['benchmark'],['benchmarks']
Testability,"@glwagner I've updated my original comment with more information and a screenshot. Only concern might be that by using `Logging.global_logger`, Oceananigans now hijacks the global logger and everything starts using it for logging. But maybe this isn't a big deal and we can revert behaviour at any time.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/855#issuecomment-673468773:120,Log,Logging,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/855#issuecomment-673468773,3,"['Log', 'log']","['Logging', 'logger', 'logging']"
Testability,"@glwagner It's this show method: https://github.com/CliMA/Oceananigans.jl/blob/03b8acf4f378eeefdb5e79ceeafcf29fa711e94c/src/OutputReaders/field_dataset.jl#L61-L72. and looks something like this:. ```; FieldDataset with 9 fields and 0 metadata entries:; ├── v: 865×421×1×5761 FieldTimeSeries{OnDisk} located at (Center, Face, Center) of v at /home/alir/test/simulation_surface_slices.jld2; ├── S: 865×420×1×5761 FieldTimeSeries{OnDisk} located at (Center, Center, Center) of S at /home/alir/test/simulation_surface_slices.jld2; ├── w: 865×420×1×5761 FieldTimeSeries{OnDisk} located at (Center, Center, Face) of w at /home/alir/test/simulation_surface_slices.jld2; ├── T: 865×420×1×5761 FieldTimeSeries{OnDisk} located at (Center, Center, Center) of T at /home/alir/test/simulation_surface_slices.jld2; ├── Alk: 865×420×1×5761 FieldTimeSeries{OnDisk} located at (Center, Center, Center) of Alk at /home/alir/test/simulation_surface_slices.jld2; ├── DIC: 865×420×1×5761 FieldTimeSeries{OnDisk} located at (Center, Center, Center) of DIC at /home/alir/test/simulation_surface_slices.jld2; ├── u: 866×420×1×5761 FieldTimeSeries{OnDisk} located at (Face, Center, Center) of u at /home/alir/test/simulation_surface_slices.jld2; ├── pCO₂: 865×420×1×5761 FieldTimeSeries{OnDisk} located at (Center, Center, Center) of pCO₂ at /home/alir/test/simulation_surface_slices.jld2; └── CO₂_surface_flux: 865×420×1×5761 FieldTimeSeries{OnDisk} located at (Center, Center, ⋅) of CO₂_surface_flux at /home/alir/test/simulation_surface_slices.jld2; ```. so it's missing the the output times and perhaps more grid information. But in general it could be improved. I just ended up calling `summary(fts)` for each `FieldTimeseries`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3859#issuecomment-2435331962:352,test,test,352,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3859#issuecomment-2435331962,9,['test'],['test']
Testability,"@glwagner Just pasted your comment here where it's more relevant. That's interesting. I did use `@inbounds` when I tested this in the original post and saw a slowdown. Seems like it's worth investigating again, especially with `@code_lowered`, Cthulu.jl, etc. as you're showing that they should compile to identical code!. Maybe the `getindex` was fine but the `setindex` was slowing things down?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/13#issuecomment-479851021:115,test,tested,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/13#issuecomment-479851021,1,['test'],['tested']
Testability,@glwagner Looks like all tests pass on Julia 1.5.2 _except_ that the Eady turbulence example is taking forever on both CPU and GPU. Can you have a look when you have some time? Feels like that example is gonna keep haunting you.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/997#issuecomment-707947545:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/997#issuecomment-707947545,1,['test'],['tests']
Testability,@glwagner Looks like it's just one of the checkpointer tests. They occasionally fail on the GPU. I think it's related to https://github.com/CliMA/Oceananigans.jl/issues/1179. I reran the build. Should hopefully pass now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1366#issuecomment-780733376:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1366#issuecomment-780733376,1,['test'],['tests']
Testability,@glwagner Should we merge this so @sandreza can use it in his scripts until we clean up `averages.jl`?. A couple of GPU tests fail on Tartarus but I think they've been fixed as part of PR #839 so maybe we should merge #839 first then merge master into this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/839#issuecomment-670216389:120,test,tests,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/839#issuecomment-670216389,1,['test'],['tests']
Testability,@glwagner Sorry for leaving this PR open for so long. I added some model setup docs and added tests for JLD2 particle output so I think it should be ready to be merged now. I also bumped v0.46.0 in this PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-759503767:94,test,tests,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-759503767,1,['test'],['tests']
Testability,"@glwagner Sorry for posting in the wrong place. Here's the same message again:. @glwagner I modified the docstring with a small example that I think illustrates the patterns relatively in this commit. I'm assuming that's what you meant by ""example"", right?. I've tested it already in some simple examples and it produces correct results. Is there anything else left besides testing this with an actual complex calculation that can only be done via KernelComputedField on a GPU?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1293#issuecomment-759718700:263,test,tested,263,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1293#issuecomment-759718700,2,['test'],"['tested', 'testing']"
Testability,@glwagner Tests are passing now!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1399749130:10,Test,Tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2752#issuecomment-1399749130,1,['Test'],['Tests']
Testability,"@glwagner Thanks for implementing the total tracer diffusive flux at a high level. After running several tests, I found it to work exceptionally well! I conducted a series of tests: 1) comparing 1D vs 3D, 2) with and without the Coriolis force, and 3) with and without the immersed boundary. Everything looks great! Here are some simple examples on a rotated coordinate:. - 1D test with a small f: . https://github.com/CliMA/Oceananigans.jl/assets/68127124/63272997-5998-4d1c-8d9e-5e735a8731f8. - 3D simulation with immersed grids: . https://github.com/CliMA/Oceananigans.jl/assets/68127124/11dd0ee4-4e0a-4052-a65a-61f628ca1fef. The only caveat mentioned by @hdrake is that `GradientBoundaryCondition` is only being applied to the perturbation fluxes at the boundaries, i.e., `GradientBoundaryCondition(-N^2*cos(θ))` is needed to make the total buoyancy gradient to be 0.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2211254101:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2211254101,3,['test'],"['test', 'tests']"
Testability,"@glwagner Thanks for solving this issue, I've tested your PR, and it works great!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2246489029:46,test,tested,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3657#issuecomment-2246489029,1,['test'],['tested']
Testability,"@glwagner True, we should just make use of the existing infrastructure. We don't have to call it a monitor but seems like this diagnostic would be closer in spirit to `NaNChecker` than `HorizontalAverage`. We might want to have some way of accessing the `TimeStepWizard` from the diagnostic though. Although this could probably be done with an anonymous function. @asinghvi17 Thanks for the tip! Had no idea you could pass a `progress` kwarg to logging macros. Will have to check it out along with #71",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/432#issuecomment-537053103:445,log,logging,445,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/432#issuecomment-537053103,1,['log'],['logging']
Testability,"@glwagner Will do. I'll remove the dynamics from my run and see if I can get a minimum not-working example. . @tomchor I've downloaded that branch and will test when I can. Our system seems to have forgotten it's got GPUs post power cut so it's CPU only for now, I assume the underlying save functions are the same between devices?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3614#issuecomment-2150538709:156,test,test,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3614#issuecomment-2150538709,1,['test'],['test']
Testability,"@glwagner You might be right about the `@inline` thing as the GPU models run reasonably fast, albeit ~30% slower. But not a factor of ~100x. Before:; ```; ──────────────────────────────────────────────────────────────────────────────────────────────────; Oceananigans.jl benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 227s / 45.6% 18.7GiB / 0.06% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────────────────; 256x256x256 static ocean (CPU, Float32) 10 54.4s 52.5% 5.44s 60.0KiB 0.48% 6.00KiB; 256x256x256 static ocean (CPU, Float64) 10 36.9s 35.6% 3.69s 77.8KiB 0.62% 7.78KiB; 128x128x128 static ocean (CPU, Float32) 10 6.38s 6.16% 638ms 60.0KiB 0.48% 6.00KiB; 128x128x128 static ocean (CPU, Float64) 10 4.04s 3.90% 404ms 77.8KiB 0.62% 7.78KiB; 64x 64x 64 static ocean (CPU, Float32) 10 748ms 0.72% 74.8ms 60.0KiB 0.48% 6.00KiB; 64x 64x 64 static ocean (CPU, Float64) 10 412ms 0.40% 41.2ms 77.8KiB 0.62% 7.78KiB; 256x256x256 static ocean (GPU, Float64) 10 284ms 0.27% 28.4ms 1.59MiB 12.9% 163KiB; 256x256x256 static ocean (GPU, Float32) 10 243ms 0.23% 24.3ms 1.35MiB 11.0% 139KiB; 32x 32x 32 static ocean (CPU, Float32) 10 80.3ms 0.08% 8.03ms 60.0KiB 0.48% 6.00KiB; 32x 32x 32 static ocean (CPU, Float64) 10 45.2ms 0.04% 4.52ms 77.8KiB 0.62% 7.78KiB; 128x128x128 static ocean (GPU, Float64) 10 35.9ms 0.03% 3.59ms 1.59MiB 12.9% 163KiB; 128x128x128 static ocean (GPU, Float32) 10 32.3ms 0.03% 3.23ms 1.35MiB 11.0% 139KiB; 64x 64x 64 static ocean (GPU, Float64) 10 6.54ms 0.01% 654μs 1.59MiB 12.9% 163KiB; 64x 64x 64 static ocean (GPU, Float32) 10 6.14ms 0.01% 614μs 1.35MiB 11.0% 139KiB; 32x 32x 32 static ocean (GPU, Float64) 10 5.77ms 0.01% 577μs 1.59MiB 12.9% 163KiB; 32x 32x 32 static ocean (GPU, Float32) 10 5.68ms 0.01% 568μs 1.35MiB 11.0% 139KiB; ──────────────────────────────────────────────────────────────────────────────────────────────────; ```. Now:; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496475610:271,benchmark,benchmarks,271,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/245#issuecomment-496475610,1,['benchmark'],['benchmarks']
Testability,@glwagner and @SandreOuza suggested the following tests. We should implement these using the new boundary conditions API #118. No flux tests:; 1. Set _T(t=0) = 1_ and make sure it stays the same.; 2. Set _T(t=0) = cos(z) + 1/2_ and _∂T/∂z =_ and make sure you get _T(t) -> 1/2_. Diffusion test:; * Set _T(t=0)_ to be a linear temperature profile with slope _c_ and impose that _∂T/∂z = c_ at the top and bottom. Make sure this stably stratified temperature profile is maintained. Boussinesq test:; * Free convection test: set a cooling flux _Q_ at the surface and a stratification of _N²_. Make sure the mixed layer deepens at the correct rate. Related to #81.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/126:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/126,5,['test'],"['test', 'tests']"
Testability,"@glwagner and @navidcy, I will add the tests today. @glwagner, thank you for investigating and identifying the root cause of the issue.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2093053898:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2093053898,1,['test'],['tests']
Testability,@glwagner and I found a factor of 2 bug in the triply periodic pressure solver which now works and passes the convergence test. I also added and cleaned up some pressure solver tests. In doing so I ended up doing a bit of reorganizing and cleanup. Helps with #586,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/834:122,test,test,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/834,2,['test'],"['test', 'tests']"
Testability,@glwagner any idea why `gpu-simulations-tests` fail?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-922551284:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-922551284,1,['test'],['tests']
Testability,@glwagner any idea why tests fail? happy to zoom to dig into this?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-876005987:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-876005987,1,['test'],['tests']
Testability,@glwagner can you review? should we make more grid tests run on GPU?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1502665036:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1502665036,1,['test'],['tests']
Testability,@glwagner could I be added to the buildkite organisation so I can rerun the test please?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3441#issuecomment-1911109923:76,test,test,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3441#issuecomment-1911109923,1,['test'],['test']
Testability,@glwagner did you actually test that #2502 resolved this issue?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1116705227:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1116705227,1,['test'],['test']
Testability,"@glwagner did you tested that commit 4fc55e9 actually works?; As @ali-ramadhan was saying... it doesn't!; (There must be something wrong in the latex code definitions... perhaps a \renewcommand needs to be used.). also, If I had a vote I'd say \bv for 3D flow and \bv_h for horizontal.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/111#issuecomment-470527180:18,test,tested,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/111#issuecomment-470527180,1,['test'],['tested']
Testability,@glwagner do you know what the problems with the tests are?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1758278820:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1758278820,1,['test'],['tests']
Testability,"@glwagner do you mind if I merge main here? I wanna re-run my simulations after https://github.com/CliMA/Oceananigans.jl/pull/2587 but also with this bugfix. I can also take a look at the tests that are failing and fix them so that we can merge this. On recent versions of Oceananigans with IBM some of the more complex abstract operations that used to compile (without IBM) are not compiling anymore for me and are instead throwing this error: `CUDA error: device kernel image is invalid (code 200, ERROR_INVALID_IMAGE)`. So I'm pretty sure is what's happening here and we just have to simplify the abstract operations used here: https://github.com/CliMA/Oceananigans.jl/blob/525984e8d013517fb40fc9a374fa99b46544d9fd/test/test_computed_field.jl#L529-L534",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1142591200:188,test,tests,188,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1142591200,2,['test'],"['test', 'tests']"
Testability,"@glwagner for some reason your suggestion using tuples didn't work. I was getting a ""scalar indexing disallowed"" error on that same line, which was weird. So I changed it to an `@allowscalar` statement. It's also weird that the test I added (which supposedly tests both CPUs and GPUs) didn't catch that.... not sure why",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2030#issuecomment-954396122:228,test,test,228,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2030#issuecomment-954396122,2,['test'],"['test', 'tests']"
Testability,@glwagner if tests pass I'll merge and open new PR or issue for the remaining tasks.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1100777795:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2333#issuecomment-1100777795,1,['test'],['tests']
Testability,@glwagner if this works (i.e. if AMD with this change indeed reproduces the log-law better) this would make a pretty cool example for the docs.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1654582701:76,log,log-law,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1654582701,1,['log'],['log-law']
Testability,"@glwagner if you're okay with this, I'm gonna merge this since tests are passing. Or you can merge it yourself. My rationale for merging right now is that this seems like a reasonably important bug that's being fixed and I have no idea what's causing the errors on the GPU. So maybe we can merge this and then open a second PR to deal with the GPU tests that are failing?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1166183656:63,test,tests,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2582#issuecomment-1166183656,2,['test'],['tests']
Testability,@glwagner is there a problem with testing at the moment?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1756073240:34,test,testing,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3323#issuecomment-1756073240,1,['test'],['testing']
Testability,@glwagner it seems the only reason the tests aren't passing is because `mpiexecjl` isn't properly linked:. ```; /bin/bash: /storage5/buildkite-agent/.julia-7523/bin/mpiexecjl: No such file or directory ; ```. Maybe fix that and merge since (apparently) this PR is otherwise ready to go?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1188224053:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1188224053,1,['test'],['tests']
Testability,@glwagner let's add that test you mentioned.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2284#issuecomment-1054896295:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2284#issuecomment-1054896295,1,['test'],['test']
Testability,@glwagner merge when tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3624#issuecomment-2195656794:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3624#issuecomment-2195656794,1,['test'],['tests']
Testability,"@glwagner nice. I think it's indeed clearer. @navidcy I think the `SmagLilly` closure is tested in [time-stepping](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_time_stepping.jl), [closures](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_turbulence_closures.jl) and in [nonhydrostatic regression](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_nonhydrostatic_regression.jl#L63-L72). But I think the only instance where we're testing actual values (and not just compilation of trivial (i.e. zero) values) is in . https://github.com/CliMA/Oceananigans.jl/blob/8b42137e4224b86fe1f3f1744bd5076aa8821085/test/test_nonhydrostatic_regression.jl#L63-L72. Which does seem to pass, so I'm approving this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682:89,test,tested,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3102#issuecomment-1540354682,6,['test'],"['test', 'tested', 'testing']"
Testability,@glwagner our lab at Northeastern and @christophernhill both have access to a set of MI50 and MI100 AMD GPUs. We're using them for now for our development code. I don't know the plan after we get the tests working.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112500783:200,test,tests,200,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112500783,1,['test'],['tests']
Testability,@glwagner some `simulation-tests` are failing. Could you address that?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3282#issuecomment-1740441822:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3282#issuecomment-1740441822,1,['test'],['tests']
Testability,@glwagner suggested that this test could pass at t=0 but fail for t>0 in certain situations (not yet isolated). We should upgrade this test to include some time dependence. https://github.com/climate-machine/Oceananigans.jl/blob/22088d335973553b298a67bacebfa80b32e66acf/test/test_diagnostics.jl#L1-L15,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/737:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/737,3,['test'],['test']
Testability,"@glwagner thanks very much, just tested with 0.32.0 and the issue is resolved.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/796#issuecomment-665025124:33,test,tested,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/796#issuecomment-665025124,1,['test'],['tested']
Testability,"@glwagner thanks. Indeed I think it's worthwhile pursuing good logging for all climate-machine simulations (XRef https://github.com/climate-machine/Oceananigans.jl/issues/71#issuecomment-542576768, https://github.com/climate-machine/CLIMA/issues/134)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-545732644:63,log,logging,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-545732644,1,['log'],['logging']
Testability,"@glwagner that sounds like a good strategy, ideally you would want to front-load the most useful tests for catching errors to the degree possible (the whole goal here is to reduce iteration time). If using Linux we can have up to 60 concurrent actions going so spawning as many as is useful for reducing the iteration time is the correct strategy (probably you could set this up as a job matrix for compactness). If spawning up a ton of github actions you can maximize concurrency by killing stale jobs (old push commits) as we do here: https://github.com/CliMA/ClimaCore.jl/blob/main/.github/workflows/Linux-UnitTests.yml#L24",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906584759:97,test,tests,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906584759,1,['test'],['tests']
Testability,@glwagner the distributed tests are broken :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2094650254:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3574#issuecomment-2094650254,1,['test'],['tests']
Testability,"@glwagner the multithreading benchmarks for the 2d shallow water model does not seem to have changed. It's roughly the same as those shown in #1861.; <html>; <body>; <!--StartFragment-->. size | threads | slowdown | efficiency | memory | allocs; -- | -- | -- | -- | -- | --; (8192, 512) | 1 | 1.0 | 1.0 | 1.0 | 1.0; (8192, 1024) | 2 | 1.98316 | 0.504246 | 12.1409 | 434.108; (8192, 2048) | 4 | 1.60839 | 0.621741 | 9.73477 | 331.135; (8192, 4096) | 8 | 1.52129 | 0.657337 | 10.2977 | 332.526; (8192, 8192) | 16 | 1.73345 | 0.576883 | 11.7069 | 340.188; (8192, 16384) | 32 | 2.26084 | 0.442313 | 17.1668 | 470.216. <!--EndFragment-->; </body>; </html>. I'm also running another multithreading benchmark right now with the 3d nonhydrostatic model. Hopefully the new CPU workgroup grouping will show up better there.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-889983514:29,benchmark,benchmarks,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-889983514,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"@glwagner the solution seems the same but two difference are that (1) `VectorInvariant` does not crash, (2) `WENOVectorInvariant` deviates from the pattern later. ; ; In this paper https://www.tandfonline.com/doi/pdf/10.3402/tellusa.v52i2.12258 they claim that : ""In the FV model, small departures from the flow pattern are triggered initially by grid related truncation errors but subsequently grow through the dynamical instability"" . I guess ""time-to-instability"" is itself a diagnostic of the performance of the scheme? . @francispoulin As implemented in (https://reader.elsevier.com/reader/sd/pii/S0021999105800166?token=A3A72AC493072CED8ECF098513A0BD1F822D2F2224207E533C86FB7D40361903E7AC0B4304841E64E089CBBFCEAFD08B&originRegion=us-east-1&originCreation=20220308154939) the cosine bell advection only tests the tracer advection, do you have any example of a test of that kind that tests momentum advection?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1061931114:808,test,tests,808,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1061931114,3,['test'],"['test', 'tests']"
Testability,@glwagner would you like to have a look at this or should we merge when tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2015162960:72,test,tests,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3515#issuecomment-2015162960,1,['test'],['tests']
Testability,"@glwagner, I think there was a misunderstanding about the test failing. For the background-flux-divergence PR, we were just confused as to why it wasn't passing the existing test suite. The separate issue of adding a new test is for the [unrelated PR](https://github.com/CliMA/Oceananigans.jl/pull/3721) related to refactoring `AveragedTimeInterval` to fix the existing bug. @liuchihl has some local branches where he'd merged both of those and was testing them in combination, so we got our signals crossed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3862#issuecomment-2433728389:58,test,test,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3862#issuecomment-2433728389,4,['test'],"['test', 'testing']"
Testability,"@glwagner, I tried to add a test but look,. ```Julia; julia> using Oceananigans. julia> grid = RectilinearGrid(size=(2, 2, 2), extent=(1, 1, 1)); 2×2×2 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.5; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.5; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=0.5. julia> Fu = ones(size(grid)); 2×2×2 Array{Float64, 3}:; [:, :, 1] =; 1.0 1.0; 1.0 1.0. [:, :, 2] =; 1.0 1.0; 1.0 1.0. julia> model = NonhydrostaticModel(; grid, forcing=(u=Fu,)); ERROR: TaskFailedException. nested task error: MethodError: objects of type Array{Float64, 3} are not callable; Use square brackets [] for indexing an Array.; Stacktrace:; [1] u_velocity_tendency; @ ~/Research/OC10.jl/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:71 [inlined]; [2] cpu_compute_Gu!; @ ~/.julia/packages/KernelAbstractions/Zcyra/src/macros.jl:287 [inlined]; [3] cpu_compute_Gu!(__ctx__::KernelAbstractions.CompilerMetadata{…}, Gu::Field{…}, grid::RectilinearGrid{…}, interior_map::Nothing, args::Tuple{…}); @ Oceananigans.Models.NonhydrostaticModels ./none:0; [4] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{…}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{…}, args::Tuple{…}, dynamic::KernelAbstractions.NDIteration.DynamicCheck); @ KernelAbstractions ~/.julia/packages/KernelAbstractions/Zcyra/src/cpu.jl:115; [5] (::KernelAbstractions.var""#18#21""{…})(); @ KernelAbstractions ~/.julia/packages/KernelAbstractions/Zcyra/src/cpu.jl:90. ...and 1 more exception. Stacktrace:; [1] sync_end(c::Channel{Any}); @ Base ./task.jl:448; [2] macro expansion; @ ./task.jl:480 [inlined]; [3] __run(obj::KernelAbstractions.Kernel{…}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{…}, args::Tuple{…}, dynamic::KernelAbstractions.NDIteration.DynamicCheck, static_threads::Bool); @ KernelAbstractions ~/.julia",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1983444380:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1983444380,1,['test'],['test']
Testability,"@glwagner, after 9c10cb5 tests break. See https://buildkite.com/clima/oceananigans/builds/4750#6ef5a18e-4db4-4881-aabe-e39eafaf2196/40-312. I thought that the mistake was because I had prescribed `Value` bc's for u at East/West. But the errors persists after I [changed](https://github.com/CliMA/Oceananigans.jl/pull/2103/commits/842861f152fa4193a8fb75d58324e209d5f124e5) that to Open. Could you have a look at:; https://github.com/CliMA/Oceananigans.jl/blob/d6deb950cdcd489ceb872568663ecf5b2c8ccb2a/test/test_boundary_conditions_integration.jl#L213-L226",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-989314987:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-989314987,2,['test'],"['test', 'tests']"
Testability,"@glwagner, can you resolve conflicts? perhaps we merge and add an issue for test to be implemented in the future?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2100#issuecomment-1013759888:76,test,test,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2100#issuecomment-1013759888,1,['test'],['test']
Testability,"@glwagner, do you think a bit more elaborate validation test is in order?; I'll approve at this point and let this to your judgment.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1738#issuecomment-863627253:56,test,test,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1738#issuecomment-863627253,1,['test'],['test']
Testability,"@glwagner, some of the tests fail. I don't see why... Any ideas?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2212#issuecomment-1029601165:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2212#issuecomment-1029601165,1,['test'],['tests']
Testability,"@glwagner, what about; https://github.com/CliMA/Oceananigans.jl/blob/3c86d8f37a3bf5ff050e233f7b946685f9057c26/test/test_boundary_conditions_integration.jl#L200. Should we simplify to `topo = (Bounded, Bounded, Bounded)`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-988286053:110,test,test,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2103#issuecomment-988286053,1,['test'],['test']
Testability,"@glwagner, yes, I purposely used that branch to test the Vertically stretched grid function, but this problem appeared before that. ; I will try to use it with an updated version and get back to you.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-826101641:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1613#issuecomment-826101641,1,['test'],['test']
Testability,"@glwagner,. 1) Could you have a look at 6c4fa98 and 92ab919?. 2) The tests don't pass because the convenience functions I added in 92ab919 don't have a method for `::SeaWaterBuoyancy` yet! But I confirm that with `::BuoyancyTracer` it doesn't break. ```julia; julia> using Oceananigans; [ Info: Oceananigans will use 12 threads. julia> grid = RegularRectilinearGrid(Float64; size=(1, 1, 1), halo=(2, 2, 2), extent=(1, 2, 3)); RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}; domain: x ∈ [0.0, 1.0], y ∈ [0.0, 2.0], z ∈ [-3.0, 0.0]; topology: (Periodic, Periodic, Bounded); size (Nx, Ny, Nz): (1, 1, 1); halo (Hx, Hy, Hz): (2, 2, 2); grid spacing (Δx, Δy, Δz): (1.0, 2.0, 3.0). julia> model = NonhydrostaticModel(grid=grid, architecture=CPU(),; closure=IsopycnalSkewSymmetricDiffusivity(), tracers=:b, buoyancy=BuoyancyTracer()); NonhydrostaticModel{CPU, Float64}(time = 0 seconds, iteration = 0); ├── grid: RegularRectilinearGrid{Float64, Periodic, Periodic, Bounded}(Nx=1, Ny=1, Nz=1); ├── tracers: (:b,); ├── closure: IsopycnalSkewSymmetricDiffusivity{NamedTuple{(:b,), Tuple{Float64}}, NamedTuple{(:b,), Tuple{Float64}}, Oceananigans.TurbulenceClosures.SmallSlopeIsopycnalTensor{Int64}, Nothing}; ├── buoyancy: BuoyancyTracer; └── coriolis: Nothing. julia> time_step!(model, 1, euler=true). julia> ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-944046907:69,test,tests,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1994#issuecomment-944046907,1,['test'],['tests']
Testability,"@glwagner:; > I'm still not sure we want to analytically integrate one of the pressure gradient terms `h dx(h) = dx(h^2/2)` but leave the other unchanged. If we treat them both similarly then we would write the pressure gradient term; > ; > ```; > -g h * ∂ₓ(h + b); > ```; > ; > It might be worth testing both possibilities to see if one has favorable numerical properties?; > ; > Perhaps this is related to the whole issue re: well-balanced methods, etc... ?. @francispoulin:; > I agree with @glwagner . Currently, `ShallowWaterModel` separates out the advection terms and the pressure term, which makes sense since they are inherently different.; > ; > One issue is that since we are using a finite volume method, the above term presents a bit of a problem as it's not in divergence form However, even in the other formulation, as you can see from the paper cited above, we still end up getting a term that is not in divergence form, `h dh_B/dx`.; > ; > I support trying @glwagner 's proposal of keeping the pressure term as he wrote it above. So it seems the best way forward for implementing bathymetry is to do it in the non-conservative form of the equations after #2522 is merged. Do we then want to have the conservative form of `ShallowWaterModel` be available only for `bathymetry == nothing`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1120402030:297,test,testing,297,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-1120402030,1,['test'],['testing']
Testability,"@hdrake @glwagner ; The original [windowed_time_average](https://github.com/CliMA/Oceananigans.jl/blob/66492233e51a0ecc8d904993226fcbb70fa88b45/src/OutputWriters/windowed_time_average.jl) successfully passes the [NetCDF OutputWriter test](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_netcdf_output_writer.jl). However, when running the existing MWE, [test_netcdf_time_averaging ](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_netcdf_output_writer.jl#L636), setting [Δt](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_netcdf_output_writer.jl#L657) to 0.01 and an average window of 3Δt produces a similar discontinuity to what was observed in https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2259395775, as shown in the figure below. The vertical lines indicate the start and end of the windows.; <img width=""584"" alt=""image"" src=""https://github.com/user-attachments/assets/6a14b489-622a-440a-a73a-4030b52b71e9"">. With this new [PR](https://github.com/CliMA/Oceananigans.jl/pull/3721/commits/a52812b00eb38e712ed20c7a6db3cf2e0c3a7877), the same test now yields a smooth solution: ; <img width=""593"" alt=""image"" src=""https://github.com/user-attachments/assets/0a436474-cd81-4378-bfbd-110eb8417b5d"">. While the discontinuity caused by rounding errors has been resolved, not all cases with different Δt pass the test, e.g., ; ```julia; for (n, t) in enumerate(single_ds[""time""][2:end]); averaging_times = [t - n*Δt for n in 0:stride:window_size-1 if t - n*Δt >= 0]; @test all(isapprox.(single_ds[""c1""][:, n+1], c̄1(averaging_times), rtol=1e-5)); end; ```; Here is an example of a case that does not pass the test:; ```julia; using Oceananigans; using Plots; using NCDatasets; using Test. arch = CPU(); topo = (Periodic, Periodic, Periodic); domain = (x=(0, 1), y=(0, 1), z=(0, 1)); grid = RectilinearGrid(arch, topology=topo, size=(4, 4, 4); domain...). λ1(x, y, z) = x + (1 - y)^2 + tanh(z); λ2(x, y, z) = x + (1 - y)^2 + tanh(4z). Fc1(x, y, z,",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378113073:233,test,test,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378113073,4,['test'],['test']
Testability,"@hengdiliang could be nice if you post results from a little validation test just to document that this not only runs, but runs correctly",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2385651669:72,test,test,72,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2385651669,1,['test'],['test']
Testability,"@hengdiliang does this solve your issue?. Turbulence closure tests pass in a reasonable amount of time (4 min on CPU, 26 min on GPU) so it would seem previous compilation issues with closure tuples are mitigated now.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2384290837:61,test,tests,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2384290837,1,['test'],['tests']
Testability,@hennyg888 I think this is ready for benchmarking.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-888691225:37,benchmark,benchmarking,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1902#issuecomment-888691225,1,['benchmark'],['benchmarking']
Testability,@hennyg888 good to see that helped. . I think there is a CUDA.versioninfo() ( https://github.com/JuliaGPU/CUDA.jl/blob/4985b0d5827f776683edb702ff296dcb59ba1097/src/utilities.jl#L42 ) function that would be useful to log along side `System info:`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-887396112:216,log,log,216,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-887396112,1,['log'],['log']
Testability,"@hennyg888 thanks posting this. a few thoughts - . I assume what @hennyg888 is running is based on this https://github.com/christophernhill/onan-jcon2021-bits/blob/main/run/satori/run-on-bench-on-rhel7-satori-with-mpi ? . There are quite a few things to double (triple) check. 1. **are you running on multiple GPUs?** ; There is some obscure foo for that here ( https://github.com/christophernhill/ImplicitGlobalGrid.jl/blob/5e4fd0698b7087467d9314bfa253d6bc9a09a40a/diffusion3D_multigpu_CuArrays_novis.jl#L21 ) that is not in Oceananigans or ImplicitGlobal as downloaded. Its not really particularly documented anywhere either (except in a blog post for this https://github.com/NVIDIA-developer-blog/code-samples/blob/master/posts/cuda-aware-mpi-example/src/CUDA_Aware_MPI.c as far as I can tell)! Without this bit you may end up running all ranks on the same GPU. The blog post here https://developer.nvidia.com/blog/benchmarking-cuda-aware-mpi/ gives a bit of background. . 2. **is there anything else running on the node when you test?** ; When I looked earlier in the week satori had become annoyingly busy. You need to request an exclusive node - and then wait unfortunately because of every else using. If you skip asking for exclusive you may end up sharing node - which is OK for getting work done, but confusing for benchmarking. . 3. **as @vchuravy mentions you may or may not be using messaging that goes direct GPU to GPU?** ; There is an issue with recent CUDA.jl that makes that hard (possibly not even possible). We are working to resolve that. @vchuravy has a suggested fix, but I found that caused other problems. The ImplicitGlobal team found @vchuravy fix to work, but with a very recent version of CUDA.jl where I think it isn't supposed to work - so they may have been mistaken. I was planning to look at this a bit more after having coffee with a Nvidia colleague who is involved in all this tomorrow. . The ImplciitGlobalGris stuff should get reasonable behavior with the `selec",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885334231:918,benchmark,benchmarking-cuda-aware-mpi,918,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885334231,1,['benchmark'],['benchmarking-cuda-aware-mpi']
Testability,"@ilyascfd welcome and thanks for opening this issue, it's very helpful!. The problem here is that `Value` is not exported by default when we write `using Oceananigans` anymore. As a result, these lines:. https://github.com/CliMA/Oceananigans.jl/blob/ff19b7e0d328557dc198eb23349db5eed0680c65/validation/stratified_couette_flow/stratified_couette_flow.jl#L103-L110. do not work. . The recommended syntax nowadays is, for example,. ```; bc = ValueBoundaryCondition(0); ```. rather than `BoundaryCondition(Value, 0)`. This change was made to avoid name conflicts with some common names in the Julia ecosystem (like `Flux`). But, it looks like the validation script was not updated when this change was made to our exported names. I opened a PR to fix it in #1982. You can fix the script yourself as well by replacing `BoundaryCondition(Value, ` with `ValueBoundaryCondition(`. PS @ilyascfd here are a few tips for writing issues that will help us solve your problem as fast as possible; * Include links to the lines that are failing so we don't have to look for them ourselves. Github is really handy for this!; * When including code in an issue, please format it with triple backticks (```). Note: we run this script during CI, so at first I was surprised that we hadn't caught this yet. But when we run the tests, we do indeed import `Oceananigans.BoundaryConditions.Value` via. https://github.com/CliMA/Oceananigans.jl/blob/ff19b7e0d328557dc198eb23349db5eed0680c65/test/runtests.jl#L20. and. https://github.com/CliMA/Oceananigans.jl/blob/ff19b7e0d328557dc198eb23349db5eed0680c65/src/BoundaryConditions/BoundaryConditions.jl#L3-L4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1981#issuecomment-918194547:1305,test,tests,1305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1981#issuecomment-918194547,2,['test'],"['test', 'tests']"
Testability,"@iuryt can we do it in a new PR? I can get it started to illustrate, and you can help me by refining the implementation and getting the tests to pass. What do you think?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1899017723:136,test,tests,136,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3429#issuecomment-1899017723,1,['test'],['tests']
Testability,"@iuryt, in the fields.jl you only needed to remove the branch of the conditional statement that was referring to pre-1.7 versions, not both. E.g., in the [ternary operators](https://docs.julialang.org/en/v1/manual/control-flow/#man-conditional-evaluation):. ```Julia; check_version_larger_than_7() = VERSION.minor > 7. initialize_a_field!(::SumReduction, f, r, c) = check_version_larger_than_7() ? do_this_if_minor > 7 : do_this_if_minor <= 7; ```. I fixed it. Let's see if tests pass now!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3190#issuecomment-1639504831:474,test,tests,474,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3190#issuecomment-1639504831,1,['test'],['tests']
Testability,@jagoosw I updated the docstrings to mention auxiliary fields. I'll merge when tests pass. Thanks!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1257455355:79,test,tests,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2733#issuecomment-1257455355,1,['test'],['tests']
Testability,@jagoosw I would say avoid the flat `LatitudeLongitudeGrid` in the testing (use periodic directions instead) in this PR,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630792224:67,test,testing,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630792224,1,['test'],['testing']
Testability,@jagoosw do you mind if I commit to try to fix the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1198101796:51,test,tests,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1198101796,1,['test'],['tests']
Testability,"@jagoosw it seems like everything is ok! When the tests pass I ll merge, good job",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1198259328:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2682#issuecomment-1198259328,1,['test'],['tests']
Testability,@jagoosw perhaps best practice is to add a test to make sure this doesn't break in the future,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3173#issuecomment-1624207098:43,test,test,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3173#issuecomment-1624207098,1,['test'],['test']
Testability,@jagoosw tests pass --- ok if I merge?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1297629904:9,test,tests,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2773#issuecomment-1297629904,1,['test'],['tests']
Testability,"@jakebolewski I'm wondering what you think about the strategy of running a few key integration tests via GitHub actions, in addition perhaps to unit tests that have low compilation costs. For example, we have a couple ""regression tests"" that ensure the output of a simulation is identical to one run previously. These regression tests are imprecise (we only know that something has changed, but can't identify exactly what it is), but nevertheless catch both obvious API bugs and subtle numerics bugs incurred by refactoring. Another nice feature is that regression tests invoke (or are supposed to invoke) configurations that are most common / most valuable to users. They are also relatively cheap since we load states from a file and run for 10-100 time-steps at modest resolutions, and there are a small number of them which mitigates compilation cost. When I undertake a major refactor I often find myself running regression tests first. Testing corner cases and/or catching bugs associated with interactions between model components in less-frequently used configurations requires more extensive testing (a combinatorial explosion of cases...) and incurs heavier compilation costs; so these are probably better tested via `bors try`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906570444:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906570444,9,"['Test', 'test']","['Testing', 'tested', 'testing', 'tests']"
Testability,"@jm-c I am attempting to get an internal wave test running, but I cannot seem to reproduce analytical results. Are there any independent tests of the pressure solver?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-494355084:46,test,test,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-494355084,2,['test'],"['test', 'tests']"
Testability,"@jm-c I've added a test for a pure inertial wave. `Oceananigans` appears to do the right thing after a small number of time-steps, but errors grow quickly even for relatively high resolution. I am also working on a diffusion test (not currently working) and a stratified internal wave test (not currently working).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-493802553:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-493802553,3,['test'],['test']
Testability,@jm-c and I discussed this PR yesterday and seemed good to merge. Looks like the tests work now so I'm merging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/140#issuecomment-475354213:81,test,tests,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/140#issuecomment-475354213,1,['test'],['tests']
Testability,@jm-c there are two `ivd_diagonal` functions --- which one do you mean? Here are the two:. https://github.com/CliMA/Oceananigans.jl/blob/02f4d9dc17293a399ca3adf68b6de71ee7d59f16/src/TurbulenceClosures/vertically_implicit_diffusion_solver.jl#L52-L59. https://github.com/CliMA/Oceananigans.jl/blob/02f4d9dc17293a399ca3adf68b6de71ee7d59f16/src/TurbulenceClosures/vertically_implicit_diffusion_solver.jl#L75-L82. We should adapt this dynamics test:. https://github.com/CliMA/Oceananigans.jl/blob/02f4d9dc17293a399ca3adf68b6de71ee7d59f16/test/test_dynamics.jl#L447. to use a vertically-stretched grid. Hopefully that would isolate this issue.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2065#issuecomment-973700892:439,test,test,439,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2065#issuecomment-973700892,2,['test'],['test']
Testability,"@jm-c was right about Smagorinsky requiring a larger halo size than the rest of the code. Running `test_smag_divflux_finiteness(T)` causes a `BoundsError` when trying to access index `-1` which suggests we need halos of at least size 2. We do support halos of arbitrary size in all three directions so it would be easy to increase the size of the halos if Smagorinsky is used as a closure. Just wanted to open this issue to see if this is what we wanted to do. For now I'm skipping the test so it's showing up as broken. ```julia; Constant Smagorinsky: Error During Test at /home/alir/Oceananigans.jl/test/runtests.jl:466; Test threw exception; Expression: test_smag_divflux_finiteness(T); BoundsError: attempt to access OffsetArray(::Array{Float32,3}, 0:4, 0:4, 1:3) with eltype Float32 with indices 0:4×0:4×1:3 at index [3, -1, 2]; Stacktrace:; [1] throw_boundserror(::OffsetArray{Float32,3,Array{Float32,3}}, ::Tuple{Int64,Int64,Int64}) at ./abstractarray.jl:484; [2] checkbounds at ./abstractarray.jl:449 [inlined]; [3] getindex at /home/alir/.julia/packages/OffsetArrays/ruvC7/src/OffsetArrays.jl:130 [inlined]; [4] ∂y_afa at /home/alir/Oceananigans.jl/src/closures/closure_operators.jl:8 [inlined]; [5] ∂y_u(::Int64, ::Int64, ::Int64, ::RegularCartesianGrid{Float32,StepRangeLen{Float32,Float64,Float64}}, ::OffsetArray{Float32,3,Array{Float32,3}}) at /home/alir/Oceananigans.jl/src/closures/velocity_gradients.jl:14; [6] Σ₁₂ at /home/alir/Oceananigans.jl/src/closures/velocity_gradients.jl:33 [inlined]; [7] Σ₁₂² at /home/alir/Oceananigans.jl/src/closures/velocity_gradients.jl:44 [inlined]; [8] Σ₁₂² at /home/alir/Oceananigans.jl/src/closures/velocity_gradients.jl:80 [inlined]; [9] ▶x_caa at /home/alir/Oceananigans.jl/src/closures/closure_operators.jl:191 [inlined]; [10] ▶y_aca at /home/alir/Oceananigans.jl/src/closures/closure_operators.jl:217 [inlined]; [11] ▶xy_cca at /home/alir/Oceananigans.jl/src/closures/closure_operators.jl:275 [inlined]; [12] ΣᵢⱼΣᵢⱼ_ccc at /home/alir/Oceananigan",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/260:486,test,test,486,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/260,4,"['Test', 'test']","['Test', 'test']"
Testability,"@jmbeckers thanks for the delucidation! Indeed, a conservative discretization might be more ""natural"" (have better discrete properties) in terms of momentum conservation. Especially because vector invariant formulations do not conserve momentum but angular momentum. @francispoulin, indeed, I think that, for a one layer model explicit dissipation might not be necessary because the noise associated with a horizontal velocity divergence is encoded in the mass equation which is discretized with a WENO formulation also (another way of repeating what @glwagner said). This is the difference with the hydrostatic model where we do not explicitly evolve a prognostic equation for the vertical velocity and we have to explicitly damp the noise contained in the vertical velocity `w` through a divergence damping closure. So you can think at that ""divergence damping"" closure as a ""WENO"" for an hypothetical `w` equation (which we have in the shallow water equations explicitly trough `h`). I agree also that we should introduce a diffusion term anyways. It is always good to be able to quickly quantify the dissipation you have in your model and with implicit dissipation that is very difficult (implicit LES is frowned upon by many purist of turbulence). for the documentation problem I think it's just because I changed the example. I ll fix the test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1120046380:1345,test,test,1345,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1120046380,1,['test'],['test']
Testability,"@johncmarshall54 Fortunately it doesn't take any effort at all, since it's just one command. I did it on a local branch and tested it here, so it's pretty much done. > I think we're just dragging our feet because it will have widespread effects across a huge number of scripts that we've written. Yeah, that's a bit annoying, but I'll share the command I used to do it here so that people can also use it on their scripts:. `find . -type f -name ""*.jl"" -exec sed -i ""s/\<Cell\>/Center/g"" {} \;`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-765800508:124,test,tested,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-765800508,1,['test'],['tested']
Testability,"@johncmarshall54 suggested that a good validation test for an immersed boundary implementation is a topographic Rossby wave, a la:. https://journals.ametsoc.org/mwr/article/125/9/2293/104481/Representation-of-Topography-by-Shaved-Cells-in-a. which has an analytical solution",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/775:50,test,test,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/775,1,['test'],['test']
Testability,"@josuemtzmo could you update the first PR comment to reflect the latest status? As far as I can see there was not any new type introduced; just the tests, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2023361765:148,test,tests,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2023361765,1,['test'],['tests']
Testability,"@liuchihl I think the best way forward is to write a simple test that illustrates the error. Then I can help fix the error to make the test pass. Once that is done, we may be ready to merge this PR. What do you think?. PS it is always best to work with minimal examples, and to paste code directly into a discussion stream (rather than providing links). This will help us keep up an efficient workflow.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433044270:60,test,test,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433044270,2,['test'],['test']
Testability,"@liuchihl check out the similarity between the simple test that I added and the MWE on #3889. I just copy-pasted the MWE code into the test (and made a few generalizations). It should be ready to merge, and it all only took a few minutes.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2450966049:54,test,test,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2450966049,2,['test'],['test']
Testability,"@liuchihl ran some tests, @liuchihl and @hdrake requested the feature",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287227200:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2287227200,1,['test'],['tests']
Testability,"@liuchihl, can you explain a bit more your caveat about the new method only passing the test if the timestep is small enough? With the new method, the windowed-time-averages still look good by eye but quantitatively the errors are larger than the default relative tolerance of 1e-5, right? That seems it would still be an improvement over spurious zeros that sometimes show up with the previous method?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379299790:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2379299790,1,['test'],['test']
Testability,"@liuchihl, did you find any cases where the `windowed_time_average` in this PR fails the test with `window_nΔt == interval_nΔt`? Maybe we have an indexing error when we are waiting for the window to start and we actually average over slightly the wrong period? It also would be good to confirm that the problem is with `windowed_time_average`, and not with the analytical solution that we're comparing to!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378120645:89,test,test,89,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2378120645,1,['test'],['test']
Testability,"@liuchihl, thanks for cleaning up these changes by separating them from the [background flux PR](https://github.com/CliMA/Oceananigans.jl/pull/3646)—it's much clearer now. Consolidating @glwagner and @navidcy's earlier comments, it seems there are three things that need to be done before this can be merged:; 1) Review the [the existing OutputWriter tests](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_output_writers.jl) and verify that they still pass with the new implementation in this PR; 2) Create a new, more rigorous, test that is capable of flagging the bizarre behavior you found in [your issue](https://github.com/CliMA/Oceananigans.jl/issues/3670) but (hopefully) now passes thanks to the changes in this branch.; 3) Add some warnings to let users know that `TimeInterval` and `AveragedTimeInterval` (and probably other diagnostic schedules) are currently broken and give incorrect results after picking up from a checkpoint whenever the checkpoint interval is not an integer multiple of the scheduled time interval.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2302951223:351,test,tests,351,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2302951223,3,['test'],"['test', 'tests']"
Testability,"@liuchihl, you tested that this bug is reproduced in which versions of Oceananigans again?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264159505:15,test,tested,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264159505,1,['test'],['tested']
Testability,@loganpknudsen can you see if https://github.com/CliMA/Oceananigans.jl/pull/3228 gives you what you need?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3226#issuecomment-1690271165:1,log,loganpknudsen,1,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3226#issuecomment-1690271165,1,['log'],['loganpknudsen']
Testability,"@loganpknudsen, any update on the status of this issue?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1979514042:1,log,loganpknudsen,1,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3412#issuecomment-1979514042,1,['log'],['loganpknudsen']
Testability,"@loganpknudsen, does this address your issue?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1738363833:1,log,loganpknudsen,1,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1738363833,1,['log'],['loganpknudsen']
Testability,"@maleadt Oh that's awesome, thanks for the update! So we just update to `CuArrays#master` and the GPU device with the most free memory gets automatically selected or do we have to manually select a device during testing like CuArrays; ```julia; candidates = [(dev=dev,; cap=capability(dev),; mem=CuContext(ctx->CUDAdrv.available_memory(), dev)); for dev in devices()]. thorough = parse(Bool, get(ENV, ""CI_THOROUGH"", ""false"")); if thorough; sort!(candidates, by=x->(x.cap, x.mem)); else; sort!(candidates, by=x->x.mem); end; pick = last(candidates); device!(pick.dev); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561802280:212,test,testing,212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561802280,1,['test'],['testing']
Testability,"@maleadt we are seeing a couple odd errors here:. ```; /net/ocean/home/data44/data5/glwagner/julia-1.8.5/bin/julia: relocation error: /data5/glwagner/.julia-10861/artifacts/ebadc1bf983003ca3f714f062af4451365761171/lib/libcublas.so: symbol cublasLt_for_cublas_DDD version libcublasLt.so.11 not defined in file libcublasLt.so.11 with link time reference; ```. and. ```; Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_models.jl:197; Test threw exception; Expression: time_step_hydrostatic_model_works(grid; free_surface); CUBLASError: the GPU program failed to execute (code 13, CUBLAS_STATUS_EXECUTION_FAILED); Stacktrace:; [1] throw_api_error(res::CUDA.CUBLAS.cublasStatus_t); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:11; [2] macro expansion; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/libcublas.jl:24 [inlined]; [3] cublasDnrm2_v2(handle::Ptr{CUDA.CUBLAS.cublasContext}, n::Int64, x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, incx::Int64, result::Base.RefValue{Float64}); @ CUDA.CUBLAS ~/.julia-10861/packages/CUDA/q3GG0/lib/utils/call.jl:26; [4] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:168 [inlined]; [5] nrm2; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/wrappers.jl:173 [inlined]; [6] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:108 [inlined]; [7] norm; @ ~/.julia-10861/packages/CUDA/q3GG0/lib/cublas/linalg.jl:107 [inlined]; [8] cg_iterator!(x::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, A::CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}, b::CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}, Pl::Oceananigans.Solvers.SparseInversePreconditioner{CUDA.CUSPARSE.CuSparseMatrixCSC{Float64, Int32}}; abstol::Float64, reltol::Float64, maxiter::Int64, statevars::IterativeSolvers.CGStateVariables{Float64, CuArray{Float64, 1, CUDA.Mem.DeviceBuffer}}, initially_zero::Bool); @ IterativeSolvers ~/.julia-10861/packages/I",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526:381,Test,Test,381,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2924#issuecomment-1489524526,3,"['Test', 'test']","['Test', 'test']"
Testability,"@matinraayai I made a bunch of suggestions!. I suggest leaving the tests untouched right now. The reason is that I think we should refactor the tests to be more architecture-indepedent _before_ merging this PR into `main`. Perhaps as an alternative, we can pick one of the validation tests in `validation/` to focus on as an integration test. We'll use that example script to test whether functionality works. As a starting point, something like. ```julia; using Oceananigans; grid = RectilinearGrid(GPU(), size=(128, 128), x=(0, 2π), y=(0, 2π), topology=(Periodic, Periodic, Flat)); model = NonhydrostaticModel(; grid, advection=WENO5()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ); simulation = Simulation(model; Δt=0.01, stop_time=4); run!(simulation); ```. should be enough?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112412085:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2494#issuecomment-1112412085,5,['test'],"['test', 'tests']"
Testability,"@matinraayai I think it will also help us get those tests passing quicker, because keeping `GPU` will allow us to avoid refactoring a lot of existing code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2493#issuecomment-1112369281:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2493#issuecomment-1112369281,1,['test'],['tests']
Testability,"@michel2323 @vchuravy this looks like an error in KA indexing, which I recall you guys resolved previously? [and @glwagner there was that weird offset issue before iirc]. ```julia. Enzyme on advection and diffusion: Error During Test at /var/lib/buildkite-agent/builds/tartarus-3/clima/oceananigans/test/test_enzyme.jl:93; --;   | Got exception outside of a @test;   | BoundsError: attempt to access 16×16×1 Array{Tuple{Core.LLVMPtr{UInt64, 0}, Core.LLVMPtr{UInt64, 0}, Core.LLVMPtr{UInt64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{UInt64, 0}, Core.LLVMPtr{UInt64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{UInt64, 0}, Core.LLVMPtr{UInt64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{Float64, 0}, Core.LLVMPtr{UInt64, 0}}, 3} at index [1, 1, 2];   | Stacktrace:;   | [1] setindex!;   | @ ./array.jl:971 [inlined];   | [2] setindex!;   | @ ./multidimensional.jl:670 [inlined];   | [3] aug_fwd;   | @ /storage5/buildkite-agent/.julia-14477/packages/KernelAbstractions/WoCk1/ext/EnzymeExt.jl:20 [inlined];   | [4] __thread_run(tid::Int64, len::Int64, rem::Int64, obj::KernelAbstractions.Kernel{KernelAbstractions.CPU, KernelAbstractions.NDIteration.StaticSize{(16, 16)}, KernelAbstractions.NDIteration.StaticSize{(64, 64, 8)}, typeof(EnzymeExt.aug_fwd)}, ndrange::Nothing, iterspace::KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(4, 4, 8)}, KernelAbstractions.NDIte",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953382929:229,Test,Test,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953382929,3,"['Test', 'test']","['Test', 'test']"
Testability,"@mukund-gupta discovered a bug (see #1104) that prevents the use of function diffusivities with the `TimeStepWizard`. We don't want the wizard to be so all-powerful that it samples a diffusivity function over the whole grid just to compute it's maximum value. So, this PR does the simple thing and avoids limiting the time-step by the diffusivity when it's a function. A better solution would require users to explicitly ask their time-step to be limited by diffusivities, and for that step to fail when the diffusivity is a function (eg #1087). It could make sense to add a test for all possible combinations of diffusivities and wizards, but it might be better to wait for a more comprehensive PR that addresses #1087... Resolves #1104",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1105:575,test,test,575,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1105,1,['test'],['test']
Testability,"@mukund-gupta has been trying to run some model tests but might need to set Dirchlet/`Value` boundary conditions for the velocities at the top and bottom. @glwagner would this be easy to add in? For `Flux` boundary conditions I assume we'd have to use 𝜈 instead of κ so something like; ```julia; Gϕ[i, j, 1] += 𝜈*top_gradient.condition / grid.Δz; ```; instead of; ```julia; Gϕ[i, j, 1] += κ*top_gradient.condition / grid.Δz; ```; And for `Value` boundary conditions I assume it's just the line below?; ```julia; ϕ[i, j, 1] = top_value.condition # Note we're setting ϕ, not adding to Gϕ.; ```. I can try adding these in, shouldn't be too hard but just want to double check.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/166:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/166,1,['test'],['tests']
Testability,"@navidcy . I am copying my output below and I believe it does throw `AssertionError`. Maybe you can try it locally and see if you get the same thing?. ```; julia> ShallowWaterModel(grid=grid, gravitational_acceleration=1) ; [2022/06/01 18:12:45.154] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /home/fpoulin/Software/Oceananigans.jl/src/Advection/weno_fifth_order.jl:187; [2022/06/01 18:12:45.155] WARN defaulting to uniform WENO scheme with Float64 precision, use WENO5(grid = grid) if this was not intended -@-> /home/fpoulin/Software/Oceananigans.jl/src/Advection/weno_fifth_order.jl:187; ERROR: AssertionError: ShallowWaterModel requires `topology(grid, 3) === Flat`. Use `topology = (Periodic, Periodic, Flat)` when constructing `grid`.; Stacktrace:; [1] ShallowWaterModel(; grid::RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, gravitational_acceleration::Int64, clock::Clock{Float64}, momentum_advection::UpwindBiasedFifthOrder, tracer_advection::WENO5{Float64, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, true, Nothing}, mass_advection::WENO5{Float64, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, true, Nothing}, coriolis::Nothing, forcing::NamedTuple{(), Tuple{}}, closure::Nothing, bathymetry::Nothing, tracers::Tuple{}, diffusivity_fields::Nothing, boundary_conditions::NamedTuple{(), Tuple{}}, timestepper::Symbol, formulation::Oceananigans.Models.ShallowWaterModels.ConservativeFormulation); @ Oceananigans.Models.ShallowWaterModels ~/Software/Oceananigans.jl/src/Models/ShallowWaterModels/shallow_water_model.jl:121; [2] ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144204500:69,Assert,AssertionError,69,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1144204500,2,['Assert'],['AssertionError']
Testability,@navidcy : did you want to try deleting the `.julia` folder and then retry the tests to see if this fixes the problem for you?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450252882:79,test,tests,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1450252882,1,['test'],['tests']
Testability,"@navidcy @glwagner this should superceded all previous enzyme prs (including compatbwlper), which I've gone ahead and closed just now. Some non enzyme tests had a nondeterministic ci failure about a directory not being empty, but otherwise all pass (incl enzyme tests). Once landed we should add a lot more integration test cases like @jlk9 your flux boundary",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3618#issuecomment-2195453317:151,test,tests,151,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3618#issuecomment-2195453317,3,['test'],"['test', 'tests']"
Testability,"@navidcy Ah sorry about that error, it was fixed in PR #1552. I merged `master` into this branch which should fix the unit tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-817873104:123,test,tests,123,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1530#issuecomment-817873104,1,['test'],['tests']
Testability,@navidcy Any idea why the tests are stuck?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2694#issuecomment-1216053598:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2694#issuecomment-1216053598,1,['test'],['tests']
Testability,@navidcy Due to #1995 is it worth pinning CUDA.jl to the current version? Might also _magically_ fix some GPU issues although I see that `cpu-time-stepping-tests-2` is also failing.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-930289400:156,test,tests-,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1988#issuecomment-930289400,1,['test'],['tests-']
Testability,"@navidcy Good call! ; You can find here below the output of benchmarks/benchmark_advection_schemes.jl ran on main and this PR and adapted to test the new methods.; For validation, you can run validation/advection/validate_weno_schemes.jl to validate the methods on a 1D and 2D advection problem for different grids; (uniform and stretched). execution of benchmark_advection_schemes.jl on main; ```; ┌───────────────┬────────────────────────┬───────────┬───────────┬───────────┬───────────┬──────────┬────────┬─────────┐; │ Architectures │ Schemes │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼────────────────────────┼───────────┼───────────┼───────────┼───────────┼──────────┼────────┼─────────┤; │ CPU │ CenteredFourthOrder │ 1.779 s │ 1.789 s │ 1.794 s │ 1.814 s │ 1.05 MiB │ 1685 │ 3 │; │ CPU │ CenteredSecondOrder │ 1.018 s │ 1.066 s │ 1.061 s │ 1.090 s │ 1.05 MiB │ 1685 │ 5 │; │ CPU │ UpwindBiasedFifthOrder │ 2.467 s │ 2.505 s │ 2.505 s │ 2.544 s │ 1.05 MiB │ 1685 │ 2 │; │ CPU │ UpwindBiasedThirdOrder │ 1.808 s │ 1.877 s │ 1.862 s │ 1.903 s │ 1.05 MiB │ 1685 │ 3 │; │ CPU │ WENO5 │ 6.775 s │ 6.775 s │ 6.775 s │ 6.775 s │ 1.05 MiB │ 1685 │ 1 │; │ GPU │ CenteredFourthOrder │ 20.879 ms │ 20.970 ms │ 21.078 ms │ 21.874 ms │ 2.17 MiB │ 20610 │ 10 │; │ GPU │ CenteredSecondOrder │ 11.402 ms │ 15.533 ms │ 15.138 ms │ 15.680 ms │ 2.05 MiB │ 13147 │ 10 │; │ GPU │ UpwindBiasedFifthOrder │ 23.356 ms │ 23.498 ms │ 24.055 ms │ 29.246 ms │ 2.21 MiB │ 23281 │ 10 │; │ GPU │ UpwindBiasedThirdOrder │ 18.863 ms │ 19.027 ms │ 19.298 ms │ 21.745 ms │ 2.12 MiB │ 17945 │ 10 │; │ GPU │ WENO5 │ 23.234 ms │ 28.467 ms │ 27.982 ms │ 28.684 ms │ 2.30 MiB │ 29259 │ 10 │; └───────────────┴────────────────────────┴───────────┴───────────┴───────────┴───────────┴──────────┴────────┴─────────┘; ```; This PR same file, (WENO5 on uniform grids); ```; ┌───────────────┬────────────────────────┬───────────┬───────────┬───────────┬───────────┬──────────┬────────┬─────────┐; │ Architec",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974843738:60,benchmark,benchmarks,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974843738,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"@navidcy I am happy to try something to compare. If yes, what exactly would you like me to test?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1438778981:91,test,test,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1438778981,1,['test'],['test']
Testability,@navidcy I changed it to test only 3D topologies because the grid constructors are different for different dimensionalities; the current test only works for 3D I think.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2108#issuecomment-992830867:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2108#issuecomment-992830867,2,['test'],['test']
Testability,"@navidcy I have made a couple of small changes. Anyways, I am a little hesitant to make Z-WENO the default as it does, yes, have slight benefits, but we tested only on small simplified problems. I would have a bit more testing before making it the default.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-976145373:153,test,tested,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-976145373,2,['test'],"['tested', 'testing']"
Testability,@navidcy I think its tested now! You should also try `WENO5` instead of 4th order!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/925#issuecomment-700282504:21,test,tested,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/925#issuecomment-700282504,1,['test'],['tested']
Testability,"@navidcy I think you're right that with proper `[compat]` bounds, a `Manifest.toml` is unnecessary. But I think that would mean that as developers we would have to be meticulous about updating lower and upper bounds of dependencies. In particular, if a bug is introduced in a dependency then it could cause our master branch to fail (unless we had very strict upper `[compat]` bounds and updated them regularly). I guess I see strict `[compat]` bounds as saying that ""our package is guaranteed to work as long as your dependencies lie between these versions"" (might take a lot of testing to ensure all version combinations are fine), while just using a `Manifest.toml` with loose `[compat]` bounds is saying ""our package is guaranteed to work with the versions prescribed in the `Manifest.toml`"". I like the `Manifest.toml` approach as it gives us more control: we only update dependencies when we're ready and deal with any new issues one-by-one before merging. And it lets us play around with upgrading/downgrading the version on different dependencies, e.g. CUDA.jl, without worrying about `[compat]` bounds.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/860#issuecomment-679199928:580,test,testing,580,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/860#issuecomment-679199928,1,['test'],['testing']
Testability,@navidcy I'm pretty sure https://github.com/CliMA/Oceananigans.jl/pull/2502 fixed at least part of the failing tests here. I'm not sure how to deal with some of the conflicts so I'll leave the merging of main to you (unless you're okay with me taking a crack at it...),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1118132165:111,test,tests,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2307#issuecomment-1118132165,1,['test'],['tests']
Testability,"@navidcy PyPlot is used for the log2 scale for the x-axis of certain graphs. The normal backend of Plots,jl only has natural log scale axis option. Log-base-2 scale works best for these plots since most of them have an independent variable that scales based on powers of 2. The inclusion of Oceananigans in `benchmark/Project.toml` is likely due to a Julia package config suggested by @ali-ramadhan. What was done was that in Julia's package manager, `dev ..` was inputted to enable what I assume is the dev version of the Oceananigans package folder. Before this was done, there were numerous output errors with the benchmark scripts, and doing so fixes them all.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-864599629:125,log,log,125,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-864599629,4,"['Log', 'benchmark', 'log']","['Log-base-', 'benchmark', 'log']"
Testability,"@navidcy Thanks for the feedback. I added a docstring for `aligned_time_step` that explains its purpose:. ```; aligned_time_step(sim). Returns a time step Δt that is aligned with the output writer schedules and stop time of the simulation `sim`.; The purpose of aligning the time step is to ensure simulations do not time step beyond the `sim.stop_time` and; to ensure that output is written at the exact time specified by the output writer schedules.; ```. ---. > 1. Why does `aligned_time_step(sim)` return a negative time-step? Is this a bug? ; > 2. Why is this fix temporary? What would a more permanent fix look like?; > ; > It seems that aligning the time-step is causing a host of issues. Is this the real problem? Should we stop aligning time-steps until we are sure that we can do it safely?. @glwagner Sorry I thought I explained the issue in #1280 but looks like I didn't. The problem has to do with checkpointing and pickup when output writers are using `TimeInterval` schedules. Output writer schedules are not checkpointed so when you pickup a simulations that includes output writers with `TimeInterval` schedules, the `model.clock` is restored but the `schedule.previous_actuation_time` is 0 for all `TimeInterval` schedules. So `aligned_time_step` thinks it needs to take a negative time step as it needs to write output at t = `schedule.time_interval`. The permanent fix is to checkpoint and pickup schedules (properly fixing #1280) which would prevent `aligned_time_step` from returning negative time steps. I see this as more of a checkpointing issue than a time step alignment issue. In general we are not extensively testing checkpointing.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1303#issuecomment-766101050:1639,test,testing,1639,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1303#issuecomment-766101050,1,['test'],['testing']
Testability,@navidcy Yes sorry. Looks like tests are passing. Once they do I'll merge and tag/release v0.63.1.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1903#issuecomment-930278040:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1903#issuecomment-930278040,1,['test'],['tests']
Testability,"@navidcy and @glwagner, I created this halo test branch from your tracer advection branch the day before yesterday, prior to its merger with the main. Given that the tracer advection, along with other branches, was integrated into the main branch yesterday, this branch started displaying numerous reverse changes. To address this, I merged the main branch into this one, resolved the conflicts manually by accepting the incoming changes. This process led to several commits. I will close this PR and create a fresh branch from the main. I will then push my commits. Please bear with me for a few minutes while I do this.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3277#issuecomment-1728121401:44,test,test,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3277#issuecomment-1728121401,1,['test'],['test']
Testability,@navidcy can you re-run the tests? I'm having trouble logging into buildkite at the moment.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3517#issuecomment-2012327679:28,test,tests,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3517#issuecomment-2012327679,2,"['log', 'test']","['logging', 'tests']"
Testability,"@navidcy it shouldn't impact developer workflow too much. When going over the test structure with @glwagner on Tues. I suggested the following restructuring:. * Break-out ""quick"" unit-tests to be run by github actions under a single configuration (ex: linux, julia 1.6) and be able to run them in parallel. We have a ""Team"" account donated by Github so we can have tons of concurrent GitHub actions so this is beneficial if you can take advantage (might be limited by compilation costs). These tests will be run for every PR push and fast fail on error.; * `bors try` trigger a more expensive CI job to be submitted to the cluster, allowing for GPU / MPI tests. The logic here is that if the cpu tests are not working then the GPU tests almost certainly won't so you can get away with executing them less often. We have a daemon running on the cluster that synchronizes the jobs from buildkite with the local slurm controller, so every step in the buildkite config is submitted as a separate slurm job and canceling buildkite jobs kills them with slum. What is nice about that setup is you can tailor the resources used for each buildkite step just as you would slurm (ex. ""gres:1"" for 1 gpu). You can run jobs on multiple ranks, multiple GPU's, different resource limits, timeouts, etc. basically anything you can pass through to as a cli argument to a slurm batch job is supported. Also it's running on a cluster so obviously your job parallelism is very good.; * `bors r+` trigger merging the PR into `main` branch. This serializes the commits to `main` (and roll-up concurrent PR's to be submitted) so that all merge commits will pass the tests. This is an opportunity to also maybe run more expensive tests (it's easy in buildkite to conditionally run steps if running on `staging` branch) because you'll probably only run the staging CI step one or at most a few times at the very end,. the general strategy is to tier the tests so that they get progressively more expensive and to maximize ci-p",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906541778:78,test,test,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1962#issuecomment-906541778,7,"['log', 'test']","['logic', 'test', 'tests']"
Testability,@navidcy may have some advice for setting up CI with GPUs. A stopgap idea is to ask reviewers of pull requests to test the code to be pushed manually.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/53#issuecomment-463671966:114,test,test,114,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/53#issuecomment-463671966,1,['test'],['test']
Testability,@navidcy thanks for the commits. I am now testing the script against a free-explicit free surface and a MultiRegionGrid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3302#issuecomment-1743270262:42,test,testing,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3302#issuecomment-1743270262,1,['test'],['testing']
Testability,@navidcy what's the last version before the catastrophic performance loss? I'll do a benchmark to compare with `main`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454534:85,benchmark,benchmark,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1480454534,1,['benchmark'],['benchmark']
Testability,@navidcy you're right. That file is a left over from the previous PR. I was using it to test `RectilinearGrid` while `RegularRectilinearGrid` and `VerticallyStretchedRectilinearGrid` were still around. Now it is basically the same as `test_grids.jl`. I will delete it. Thanks for the cleanup by the way! The tests are passing now,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-967118839:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-967118839,2,['test'],"['test', 'tests']"
Testability,"@peterahrens also suggested that we really wanna swizzle. We can transpose yC and reshape Nz to (1, 1, Nz) but ideally reshape all of them so the intent of the code is clear. We can also construct a ProductArray or ArrayOfBlockAxes. ```julia; """"""; ArrayOfBlockAxes. A convenient lazy array type which turns a tuple of blocked axes into an array; of axes for each block.; """"""; struct ArrayOfBlockAxes{T, N, P <: NTuple{N, AbstractVector}} <: AbstractArray{T, N}; parts::P; function ArrayOfBlockAxes{T, N, P}(parts::P) where {T, N, P}; @assert T <: Tuple{map(eltype, parts)...}; return new{T, N, P}(parts); end; end. ArrayOfBlockAxes(parts) = ArrayOfBlockAxes{Tuple{map(eltype, parts)...}}(parts); ArrayOfBlockAxes{T}(parts) where {T} = ArrayOfBlockAxes{T, length(parts), typeof(parts)}(parts). Base.IndexStyle(::ArrayOfBlockAxes) = IndexCartesian(); Base.size(arr::ArrayOfBlockAxes) = map(part -> size(part, 1), arr.parts); Base.size(arr::ArrayOfBlockAxes, d::Int) = size(arr.parts[d], 1); Base.axes(arr::ArrayOfBlockAxes) = map(part -> axes(part, 1), arr.parts); Base.axes(arr::ArrayOfBlockAxes, d::Int) = axes(arr.parts[d], 1); (Base.getindex(arr::ArrayOfBlockAxes{T, N}, i::Vararg{<:Any, N})::T) where {T, N} = map(getindex, arr.parts, i); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/23#issuecomment-465377715:535,assert,assert,535,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/23#issuecomment-465377715,1,['assert'],['assert']
Testability,"@peterahrens suggested removing `ModelMetadata` from `Field` structs and make the `Grid` a parameter, i.e. `Grid{T,G}` then it should be isbitstype. It's not isbits right now because T<:AbstractArray. Then we should be able to use some abstractions in the CPU/GPU element-wise kernels as well as multiple dispatch and won't need to have `δx_c2f`, `δx_f2c`, `δx_e2f`, `δx_f2e`, etc. Some goals for guidance:; - [ ] Prototype grid and field types that are `isbitstype`.; - [ ] Test that they do work with GPUifyLoops on the GPU. For this I will extend the example from https://github.com/vchuravy/GPUifyLoops.jl/pull/18; - [ ] Benchmark the simple example to see things slow down. I don't expect to see much of a difference.; - [ ] Refactor the operators and time stepping loop to use the new abstractions!; - [ ] Add tests to make sure any structure that may be passed to a CUDA kernel `isbitstype`. Just construct a bunch of grids, fields, and forcing functions and test that they are indeed `isbitstype`.; - [ ] Benchmark the model with `isbitstype` abstractions to make sure performance hasn't degraded.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/59:475,Test,Test,475,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/59,5,"['Benchmark', 'Test', 'test']","['Benchmark', 'Test', 'test', 'tests']"
Testability,@pnavaro I believe we have been able to run Oceananigans in this scenario. I can't remember exactly what was done (@ali-ramadhan may have more insight). . Have you tried running `Pkg.instantiate()` in an environment that contains Oceananigans on the login node? I believe this should download the software that you need (despite that precompilation will fail if the login node does not have a GPU). If you can get access to the GPU node interactively at the same time that you have access to the login node I think that might help a lot with debugging.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1035#issuecomment-707414042:250,log,login,250,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1035#issuecomment-707414042,3,['log'],['login']
Testability,"@raphaelouillon I can reproduce `ERROR: LoadError: CUDA error (code 201, CUDA_ERROR_INVALID_CONTEXT)` when running `pkg> test Oceananigans` for `0.28.0`--`0.30.0`. Tests run for `0.27.1`, however.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/788#issuecomment-654868729:121,test,test,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/788#issuecomment-654868729,2,"['Test', 'test']","['Tests', 'test']"
Testability,"@raphaelouillon if you need to run tests for the purpose of development, you can comment out this line:. https://github.com/CliMA/Oceananigans.jl/blob/dd764fe726b2bc5a61136144b4976cd3de498c04/test/runtests.jl#L105. on v0.30.0. As an aside, on GPUs like the V100 or Titan V, I don't see speed up on GPUs until resolutions of around 64^3 (or larger), I think, with the current version of Oceananigans.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/788#issuecomment-654933140:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/788#issuecomment-654933140,2,['test'],"['test', 'tests']"
Testability,"@renskegelderloos Thanks for the paper! Not sure if it was used for your [particle tracking example notebook](https://oceanspy.readthedocs.io/en/latest/Particles.html) but looks pretty neat!. We could chat over Slack or Zoom with @christophernhill @glwagner + anyone else interested?. Cool to see GPU benchmarks in your paper, would love to compare there. Might even make sense to implement your algorithm in Julia? Are you thinking of implementing GPU particle tracking in Python/Numba?. I guess we're doing online particle advection where time steps are pretty small and the velocities are available at every time step, so maybe forward Euler + trilinear interpolation is fine but maybe not?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-726262724:301,benchmark,benchmarks,301,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-726262724,1,['benchmark'],['benchmarks']
Testability,@sandreza @simone-silvestri this is ready to review. The tests should pass (it's just a CI issue that they aren't) and no changes should be needed.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2441#issuecomment-1101493170:57,test,tests,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2441#issuecomment-1101493170,1,['test'],['tests']
Testability,@sandreza do you want to take on reading the parameters off @adelinehillier figure and updating the defaults? It could be fun to test CATKE with the updated parameters in the 1 deg simulation too.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2461#issuecomment-1117378118:129,test,test,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2461#issuecomment-1117378118,1,['test'],['test']
Testability,@sandreza might be a good idea to code up the case we were using the diagnose the race condition as a test and see if we can catch the race condition in CI @ali-ramadhan,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-926693915:102,test,test,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1985#issuecomment-926693915,1,['test'],['test']
Testability,"@sandreza thanks! We utilize this functionality for many of our objects, eg:. https://github.com/climate-machine/Oceananigans.jl/blob/9ef95e7bef2db1dc9ac04af78664418b0caaf99b/src/AbstractOperations/binary_operations.jl#L144. For some reason, during an undocumented attempt to apply this logic to fields back in October, we were unsuccessful to get code to work on the GPU. Back then, the field consisted of an OffsetArray wrapped around a CuArray, and a grid. Both of those objects can be adapted to GPU kernels, so it should have worked, I think. So I'm not 100% sure why our attempt to use `adapt_structure` failed for fields, while working for other objects. Any insight appreciated...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/722#issuecomment-622472025:287,log,logic,287,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/722#issuecomment-622472025,1,['log'],['logic']
Testability,"@siddharthabishnu I believe you made a mistake when you created the tests for the halo fillings of u and v. . Let's take, for example, the north side of panel 1 for `u`. The values must come from the west side of panel 3 for v. Look at my schematic. If I am correct, the ❌ marked w 1,2,3 should get values from the ❌ 1, 2, 3 on panel 3. But your tests (and how we filled the halos) put in place of ❌ 1, 2, 3 on north side of panel 1 the $\Large{\color{blue}\circ}$ dots from the west side of panel 3. Am I right? (If I am correct, then probably there are similar mistakes in other sides?). ![Note Jul 6, 2023](https://github.com/CliMA/Oceananigans.jl/assets/7112768/0142ebfe-d19b-4228-81b7-5952c290582e)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1624762386:68,test,tests,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1624762386,2,['test'],['tests']
Testability,"@siddharthabishnu another question:. This PR also establishes single-pass halo filling, right? We should update the PR's title to reflect this. Could you change please these lines in the tests to do the fill of the halos with the updated way?. https://github.com/CliMA/Oceananigans.jl/blob/81d0e790594e16f1815dba73d3441433929e9a38/test/test_multi_region_cubed_sphere.jl#L374-L378. https://github.com/CliMA/Oceananigans.jl/blob/81d0e790594e16f1815dba73d3441433929e9a38/test/test_multi_region_cubed_sphere.jl#L623-L625",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2026031394:187,test,tests,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2026031394,3,['test'],"['test', 'tests']"
Testability,"@siddharthabishnu can you post here the `.jld2` file you shared with me on slack which is the MITgcm grid with the metrics and everything corrected that we should use to benchmark this PR?. also, did you notice that there are some scripts at. https://github.com/CliMA/OceananigansArtifacts.jl/tree/main/cubed_sphere_grids/cs32. that ali-ramadhan used to create the grids we've been using up to now? I was wondering if during this process you have identified a mistake in Ali's script we should fix (eg by removing the scripts and files from there and updating it with yours).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-1990923942:170,benchmark,benchmark,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-1990923942,1,['benchmark'],['benchmark']
Testability,"@siddharthabishnu could you help by adding some simple unit tests for views of views? It'd be nice to test correctness, I think something like this would work:. ```julia; grid = RectilinearGrid(size=(1, 1, 3), x=(0, 1), y=(0, 1), z=(0, 1)); c = CenterField(grid); set!(c, (x, y, z) -> rand()). # First test that regular view is right; cv = view(c, :, :, 2:3); @test c[1, 1, 2] == cv[1, 1, 2]; @test c[1, 1, 3] == cv[1, 1, 3]. # Now test views of views; cvv = view(cv, :, :, 3); @test cv[1, 1, 3] == cvv[1, 1, 3]; ```. We may also want to test that things error correctly like. ```julia; julia> view(cv, :, :, 1); ERROR: ArgumentError: view indices (Colon(), Colon(), 1) do not intersect field indices (Colon(), Colon(), 2:3); Stacktrace:; [1] view(f::Field{…}, i::Function, j::Function, k::Int64); @ Oceananigans.Fields ~/Projects/dev/Oceananigans.jl/src/Fields/field.jl:315; [2] top-level scope; @ REPL[25]:1; Some type information was truncated. Use `show(err)` to see complete types.; ```. Maybe. ```julia; @test_throws ArgumentError view(cv, :, :, 1); ```. Not sure what else we might want maybe @navidcy has ideas.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091009630:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091009630,8,['test'],"['test', 'tests']"
Testability,@siddharthabishnu could you review the PR? If tests pass we should merge..,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2156822484:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2156822484,1,['test'],['tests']
Testability,@siddharthabishnu there are errors on the tests on GPUs:. https://buildkite.com/clima/oceananigans/builds/15275#018e8708-1af0-41a5-9a4a-e9d5e2bc223c/24-757,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2027413614:42,test,tests,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2027413614,1,['test'],['tests']
Testability,@siddharthabishnu will you add test(s)?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2092379211:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2092379211,1,['test'],['test']
Testability,@simonbyrne Sounds like you guys had some issues with Slurm CI?. If so I'll close this PR and search for another place to test and benchmark multi-GPU stuff.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/280#issuecomment-517088615:122,test,test,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/280#issuecomment-517088615,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,"@simone-silvestri , any idea what might be going on here? Can we try restarting the tests to see if it was just a glitch the first time?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1413856782:84,test,tests,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2877#issuecomment-1413856782,1,['test'],['tests']
Testability,@simone-silvestri : did you get a change to try deleting the files and running the test again?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1466507669:83,test,test,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1466507669,1,['test'],['test']
Testability,@simone-silvestri @glwagner I think tests should be passing now. Ready for reviews,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1224795889:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2616#issuecomment-1224795889,1,['test'],['tests']
Testability,@simone-silvestri @jagoosw I think this PR may solve the race condition issue. The essential reason is that the Manifest was being re-resolved after init because downstream tests imported additional packages that were not imported during the initial instantiation.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2361545069:173,test,tests,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3783#issuecomment-2361545069,1,['test'],['tests']
Testability,@simone-silvestri Have you already done tests to ensure that it is positive preserving?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1939291469:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3434#issuecomment-1939291469,1,['test'],['tests']
Testability,"@simone-silvestri I noticed that a few validation tests were changed to use `MultiRegion`. What do you think about adding a new category of validation tests, maybe `validation/multi_region/`, and leaving the existing validation tests unchanged? If you think this is a good idea, I'll copy the changed tests into a new directory, and revert the existing tests to their original form.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1107933299:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1107933299,5,['test'],['tests']
Testability,"@simone-silvestri I refactored the CFL calculation so that we only have one function all the time, rather than one ""ordinary"" and one ""accurate"". The tests still fail though. I'm not totally sure why, but I am somewhat confused how this is supposed to work on a staggered grid. I don't think we can apply wikipedia's definition; we need the definition that's correct for a C grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2252#issuecomment-1058063997:150,test,tests,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2252#issuecomment-1058063997,1,['test'],['tests']
Testability,"@simone-silvestri I was able to try this simulation using the same advection scheme for all velocities and fields using the branch in https://github.com/CliMA/Oceananigans.jl/pull/3027. More precisely I resolved the same simulation with only one call to `div_Uc` using `SumOfArrays(velocities)` and `SumOfArrays(tracers)`, which I think is the correct way to test this, and the results were the same. Furthermore, I also ran this without doing hydrostatic pressure separation using [this branch](https://github.com/CliMA/Oceananigans.jl/tree/tc/nhpressure2) and the results were pretty disastrous:. https://user-images.githubusercontent.com/13205162/233477175-159e2c66-63dc-44aa-80a8-142c06d04443.mp4. That said, I think in this last animation the noise emerges from the top and propagates to the bottom, while in all my other attempts the noise always appears to emerge at the bottom and propagate upwards. I wonder if that's a clue as to what's happening.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1516888622:359,test,test,359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3036#issuecomment-1516888622,1,['test'],['test']
Testability,"@simone-silvestri and @glwagner, does someone want to try and removing the data and retrying the test?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477939147:97,test,test,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477939147,1,['test'],['test']
Testability,"@simone-silvestri and I have discussed a number of improvements to solvers (mostly refactoring and cleanup); I'm opening this issue to record our discussion. Here are some items in no particular order:. 1. `HeptadiagonalIterativeSolver` should use our internal `PreconditionedConjugateGradientSolver`. This is important because we need to use `PreconditionedConjugateGradientSolver` elsewhere, and we want to a) ensure that it's optimized and b) ensure we can reason about _why_ one solver is faster than another. 2. Related to 1., we can refactor `PreconditionedConjugateGradientSolver` to have a similar interface as `cg` from `IterativeSolvers`. Then we can swap in and out. 3. `HeptadiagonalIterativeSolver` should solve linear systems only, and have nothing to do with time-stepping. Right now `solve!` for the `HeptadiagonalIterativeSolver` is entangled with time-stepping:. https://github.com/CliMA/Oceananigans.jl/blob/90f7de4cb3ed2fa9e22231177fd56b0f33c39df9/src/Solvers/heptadiagonal_iterative_solver.jl#L286-L308. since it ""knows"" about ""`previous_Δt`"". This logic should be moved to `MatrixIterativeFreeSurfaceSolver`. 4. We should disentangle / modularize the implementation of matrix-based preconditioners in `HeptadiagonalIterativeSolver`. In particular we should be able to use matrix-based preconditioners with any iterative solver that uses `PreconditionedConjugateGradientSolver`. Right now, the fastest way to compute left-hand-sides is with `PCGImplicitFreeSurfaceSolver`, but the best preconditioners can only be used with `MatrixIterativeSolver`. If our code were more modular, we could use the matrix-based preconditioners with `PCGImplicitFreeSurfaceSolver` to achieve the fastest possible combination of methods. Note that some of the changes in #2412 will help (in particular, an improvement to the interface into `PreconditionedConjugateGradientSolver` for defining preconditioners). There's probably a few other things on the todo list so please add them here.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2418:1070,log,logic,1070,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2418,1,['log'],['logic']
Testability,"@simone-silvestri any idea why the [gpu distributed hydrostatic model tests](https://buildkite.com/clima/oceananigans-distributed/builds/1102#018d6aa2-a044-4abd-8215-8d90ce471c50/186-4607) and how should I debug this? I mean, can I reproduce this on my laptop for example? Is it a tolerance issue?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1925160996:70,test,tests,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1925160996,1,['test'],['tests']
Testability,@simone-silvestri any idea why this distributed test would fail on GPU?; https://buildkite.com/clima/oceananigans-distributed/builds/904#018d1323-015e-43f7-8bc6-dd8483c0acb4/168-5125,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1895003358:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1895003358,1,['test'],['test']
Testability,"@simone-silvestri can I convince you to rewrite this section with updated benchmarks, and include results for distributed systems?. https://github.com/CliMA/Oceananigans.jl?tab=readme-ov-file#performance-benchmarks",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3684:74,benchmark,benchmarks,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3684,2,['benchmark'],['benchmarks']
Testability,@simone-silvestri can you fix the failing test? As soon as tests pass please merge. We need a another PR that implements tests following this one.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1751827901:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1751827901,3,['test'],"['test', 'tests']"
Testability,@simone-silvestri can you have a look here? Some help with this would be great... Just have a look at the error of the tests that fail and let me know if you can understand where the root of the manner is?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1312826687:119,test,tests,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1312826687,1,['test'],['tests']
Testability,"@simone-silvestri could you point me to a test/validation that confirms 1) that the changes of the PR didn't have an effect on regular grids. Also, a benchmark to see how this PR might have speedup/slowed down things? There were some benchmarks in the first comment when the PR was opened but many changes were pursued after. Should we repeat those benchmarks or something along those lines?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974750814:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974750814,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test']"
Testability,@simone-silvestri distributed tests passed so this should be good to merge soon,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2513#issuecomment-1120040282:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2513#issuecomment-1120040282,1,['test'],['tests']
Testability,@simone-silvestri do you also get the test passing if you run on v0.76.5?. I'm quite confused... I'm running using Julia v1.6.7,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1438707297:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1438707297,1,['test'],['test']
Testability,@simone-silvestri have you seen this error:. ```; NetCDF output writer [GPU]: Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-9/clima/oceananigans/test/test_netcdf_output_writer.jl:786; --;   | Got exception outside of a @test;   | This object is not a GPU array;   | Stacktrace:;   | [1] error(s::String);   | @ Base ./error.jl:33; ```. before? It occurs here: https://buildkite.com/clima/oceananigans/builds/7106#944c7ad6-33d9-461a-af46-324a2563205f/24-526,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1114807162:91,Test,Test,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2502#issuecomment-1114807162,3,"['Test', 'test']","['Test', 'test']"
Testability,@simone-silvestri is this done? shall I test it on my laptop?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482072176:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482072176,1,['test'],['test']
Testability,@simone-silvestri is this tested?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3663#issuecomment-2250862608:26,test,tested,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3663#issuecomment-2250862608,1,['test'],['tested']
Testability,"@simone-silvestri it looks like the GPU solver tests and GPU regression tests now take about 4 hours. Is this right? Is there any way to speed it up? We could split the regression tests into multiple parts, perhaps. I think this might've been the last time our CI ran on the GPU...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-969441050:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2050#issuecomment-969441050,3,['test'],['tests']
Testability,@simone-silvestri so close! Can you take a look at the distributed tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3368#issuecomment-1814763703:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3368#issuecomment-1814763703,1,['test'],['tests']
Testability,@simone-silvestri tests haven't passed!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2200#issuecomment-1024658589:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2200#issuecomment-1024658589,1,['test'],['tests']
Testability,@simone-silvestri the matrix poisson solver tests take quite a bit... is this. https://github.com/CliMA/Oceananigans.jl/blob/9cd1a348aa3e720249e7569bfeaa7ce97d665211/test/test_matrix_poisson_solver.jl#L143. really needed to be 100x100? would 50x50 do the job?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2872#issuecomment-1399351438:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2872#issuecomment-1399351438,2,['test'],"['test', 'tests']"
Testability,"@simone-silvestri this looks like a great PR!. > It also solves a bug for which high-order stencils were not correctly limited close to immersed boundaries which led to spurious values being generated. About the comment above, I looked at the code changes you made and couldn't quite identify the bug you're talking about. Do you mind pointing it out or briefly explaining it? . The reason I ask is because I'm facing some instabilities on my code with IBM + WENO5 where something near the boundaries creates lots of spurious internal waves. My first thought was something related to the pressure solver, but maybe this is impacting thing as well. (Also if this part of the PR is already done I can go ahead and test my code in this branch.). CC @wenegrat",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1156536786:712,test,test,712,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2603#issuecomment-1156536786,1,['test'],['test']
Testability,"@simone-silvestri we do have some of these now in the distributed test suite, right?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3335#issuecomment-1791138584:66,test,test,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3335#issuecomment-1791138584,1,['test'],['test']
Testability,"@simone-silvestri when tests pass, is this ready to be merged?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3490#issuecomment-1983659780:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3490#issuecomment-1983659780,1,['test'],['tests']
Testability,"@simone-silvestri, effectively if I try `maximum` without `abs` the printing function works well. @glwagner is right, any function within the `maximum` creates the same issue (I tested with `sum`).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-1993831225:178,test,tested,178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-1993831225,1,['test'],['tested']
Testability,"@simone-silvestri, most `test_something.jl` files were re-including `include(""utils_for_runtests.jl"")`. Did you made this? Is there a reason for this?. The problem is that `utils_for_runtests.jl` defines some constants and Julia v1.7 does not allow re-definition of constants. So the tests were failing...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2090#issuecomment-984231034:284,test,tests,284,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2090#issuecomment-984231034,1,['test'],['tests']
Testability,"@simone-silvestri, seems like. https://github.com/CliMA/Oceananigans.jl/blob/50c4b430bb1e6ed4aacaaf588943ada87a56aa7f/test/test_implicit_free_surface_solver.jl#L76-L177. is not used. Should we nuke it?. Also it seems to include deprecated syntax (i.e., `HydrostaticFreeSurfaceModel` no longer has an `architecture` keyword arg).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2181#issuecomment-1021599703:118,test,test,118,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2181#issuecomment-1021599703,1,['test'],['test']
Testability,"@simone-silvestri, sorry but I don't know of any exact solutions but I will think about this a bit more. One thougth that I have discussed with @glwagner a while ago is having a vector invariant form of the `ShallowWaterModel`. This is probably easy to put together from the current `HydrostaticModel`. But if we were to allow for a rigid-lid `ShallowWaterModel`, then we could test the exact solution in the context of this model where momentum evolves. I realize this is a multi-step process, but I for one have wanted to have a rigid lid shallow water model, and this would help to make it happen, as well as create a nice sandbox to test our advection schemes with a classical problem. Please feel free to ignor this idea but if you wanted to discuss it further please let me know.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062097227:378,test,test,378,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2317#issuecomment-1062097227,3,"['sandbox', 'test']","['sandbox', 'test']"
Testability,"@simone-silvestri, the [GPU Regression test passes](https://buildkite.com/clima/oceananigans/builds/10213#01867f84-d9b6-454a-8d3e-d7062858ec81)! 🎉🪅🪅",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2937#issuecomment-1442352158:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2937#issuecomment-1442352158,1,['test'],['test']
Testability,@suyashbire1 Can you review this PR and approve/merge if it looks okay?. Hoping to merge soon so we can use the testing framework with other examples.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/418#issuecomment-533342878:112,test,testing,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/418#issuecomment-533342878,1,['test'],['testing']
Testability,"@suyashbire1 Looks like NetCDF GPU tests are failing. Check out the GitLab CI build log: https://gitlab.com/JuliaGPU/Oceananigans-jl/-/jobs/454517749. Seems like we're getting a `NetCDF error: Permission denied (NetCDF error code: 13)` in `write_grid_and_attributes`. Not sure if has something to do with clobber vs. append but maybe giving different filenames for CPU and GPU will help? I.e. `nc_filename = ""dump_test_$(typeof(arch)).nc""`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/652#issuecomment-592950055:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/652#issuecomment-592950055,2,"['log', 'test']","['log', 'tests']"
Testability,"@tomchor . In terms of ""smoothness indicators"" yes, not in terms of polynomial reconstruction. The WENO we had before is `WENO5()`. This will be formally wrong on a stretched grid because the reconstruction at the face is not done accounting for variable spacing. . `WENO5(grid = grid, stretched_smoothness=false) ` accounts for variable spacing in the reconstruction polynomial (i.e., the <img src=""https://render.githubusercontent.com/render/math?math=c_{rj}""> coefficients are calculated based on grid spacing). This makes the scheme formally correct as, independently on how you weight the polynomials, the different stencils will have mathematically correct reconstructions at the face. This should _always_ be done in case of a stretched grid (and it does not decrease execution speed). Now, the `stretched_smoothness=true` calculates the <img src=""https://render.githubusercontent.com/render/math?math=\beta_{r}""> accounting for a stretched mesh. This means that the three reconstruction polynomials (<img src=""https://render.githubusercontent.com/render/math?math=p_{0}, p_{1}, p_{2}"">) are weighted accounting for their actual smoothness and not a ""uniform smoothness"" that `WENO5(grid = grid, stretched_smoothness=false) ` calculates. In my tests this did not give a noticeable benefit in terms of accuracy (apparently <img src=""https://render.githubusercontent.com/render/math?math=\beta_{r}""> for a stretched mesh are very similar to <img src=""https://render.githubusercontent.com/render/math?math=\beta_{r}""> for a uniform mesh). In addition, it gives a non-negligible decrease in execution speed (especially on the GPU). For this reason, I think it is nice to have as an option, but to be used with parsimony :) and only when necessary.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-975684663:1251,test,tests,1251,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-975684663,1,['test'],['tests']
Testability,"@tomchor After this PR, I believe there are no issues.; Except we currently have to manually adjust the actuation to match the correct value based on the pre-pickup simulation during setup. ; For example, we have to do something like this: ; ```julia; # Run a simulation that saves data to a checkpoint; simulation = test_simulation(T1, Δt, window_nΔt, interval_nΔt, stride, true); run!(simulation); checkpointed_wta = simulation.output_writers[:single_output_time_average].outputs[""c1""]; checkpointed_actuations = checkpointed_wta.schedule.actuations. # Now try again, but picking up from the previous checkpoint; N = iteration(simulation); checkpoint = ""test_iteration$N.jld2""; simulation = test_simulation(T2, Δt, window_nΔt, interval_nΔt, stride, false); simulation.output_writers[:single_output_time_average].outputs[""c1""].schedule.actuations = checkpointed_actuations; run!(simulation, pickup=checkpoint); ```. The point is to ensure that the actuation after the pickup matches the actuation value from before the checkpoint.; ```julia; simulation.output_writers[:single_output_time_average].outputs[""c1""].schedule.actuations = checkpointed_actuations; ```. Sorry for the confusion, [test_netcdf_timeaverage.jl](https://github.com/CliMA/Oceananigans.jl/pull/3721/files/eb7d6dac13694e830f118e19225e5b00b3de84c7#diff-60f3eb03acc634682fc82a022d0a0b32382d1e890be3057750545a3d0ada1c09) is just my minimum working example, which is modified from [test_netcdf_output_writer.jl](https://github.com/CliMA/Oceananigans.jl/blob/main/test/test_netcdf_output_writer.jl#L639 ). So I believe that MWE I created is not really needed (it's not the original test).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2433135360:1528,test,test,1528,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3721#issuecomment-2433135360,2,['test'],['test']
Testability,"@tomchor Ah I think you accidentally left `include(""field_slicer.jl"")` commented out. I added a suggestion that would uncomment it. Might help since docs seem to be looking for this function (https://github.com/CliMA/Oceananigans.jl/blob/0da4ca7d9a3f44470596db604429c479a7449435/src/OutputWriters/field_slicer.jl#L102-L105) from looking at the build log (https://buildkite.com/clima/oceananigans/builds/1321#083a4e3e-7473-4581-9f22-b042418a7148/40-123). Not sure how the output writer tests pass without that though 😮",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787480801:350,log,log,350,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787480801,2,"['log', 'test']","['log', 'tests']"
Testability,"@tomchor Are you still encountering this issue?. I was able to run your MWE with no errors on small and large grids in three different environments with Julia 1.10.4, CUDA.jl v5.4.3, and Oceananigans.jl v0.91.8:; * Linux + A100 (compute capability 8.0); * Windows + RTX 3080 (compute capability 8.6); * Windows + GTX 1050 (compute capability 6.1). I was gonna test on some compute capability 3.0 Quadro GPUs but they're too old for CUDA.jl lol. For comparison, Tartarus has Titan V GPUs (compute capability 7.0) and your Quadro GP100 is compute capability 6.0. So if it's solely tied to compute capability then it could just be an issue with <=6.0?. I found this list of CUDA compute capabilities useful: https://developer.nvidia.com/cuda-gpus. ---. MWE:. ```julia; julia> using Oceananigans. julia> grid = RectilinearGrid(GPU(), size=(44, 8, 52), extent=(1, 1, 1)); 44×8×52 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on GPU with 3×3×3 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.0227273; ├── Periodic y ∈ [0.0, 1.0) regularly spaced with Δy=0.125; └── Bounded z ∈ [-1.0, 0.0] regularly spaced with Δz=0.0192308. julia> minimum_zspacing(grid); 0.019230769230769232. julia> minimum_xspacing(grid); 0.022727272727272728. julia> minimum_yspacing(grid); 0.125; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299083371:360,test,test,360,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3040#issuecomment-2299083371,1,['test'],['test']
Testability,@tomchor I extended both JLD2 and NetCDF tests to include a StepRange index specification. All that's potentially left is to spruce up the docstring if we have the motivation here.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1526#issuecomment-810679001:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1526#issuecomment-810679001,1,['test'],['tests']
Testability,"@tomchor I found some dispatch on `ComputedField` --- but nothing about the output construction should depend on whether a field has an abstract operation underneath or not; all of the logic we are working on regards data but not operand, right? Do you mind if I clean this up? I also think we need to sort out a bug with `parent_index_range`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127140886:185,log,logic,185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1127140886,1,['log'],['logic']
Testability,@tomchor I think I know what I need to do to resolve the issues. Do you mind if I send commits to this PR?. Basically we have built models in a way that would not withstand time stepping (but the tests passed because we never tried to time step). We just need to stop running those tests. Also `restore_from_checkpoint` should be skipped (and the whole feature deprecated).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-885565947:196,test,tests,196,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1891#issuecomment-885565947,2,['test'],['tests']
Testability,"@tomchor I think it's done now and I've updated the top comment. I'm happy that this PR puts in place all the bits needed for open boundaries to be possible, and future work can implement the matching schemes as necessary. I'm also happy that the code is correct and being tested because all of the existing tests that have impenetrable boundaries implicitly test the changes we have made.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2208508424:273,test,tested,273,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2208508424,3,['test'],"['test', 'tested', 'tests']"
Testability,@tomchor I'll merge this if test pass -- ok?. btw docs take tooo long to build... like 4hrs?!! I've noticed this lately. We should look into this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474384986:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2963#issuecomment-1474384986,1,['test'],['test']
Testability,"@tomchor Thanks for adding the tilted gravity stratified fluid tests! I put them in `test_dynamics.jl` and they seem to pass even with 90 and 180 degree tilts!. I noticed that the test starts failing after ~10 hours for some angles though (or at least the deviations start becoming larger than square root of machine epsilon). For example:. ```; N² * g̃[2] = 8.660254037844387e-6, mean(∂y_b) = 8.660254037844065e-6, Δ = 3.2187251995663413e-19 at t = 1 hour with θ=60; N² * g̃[3] = 5.0e-6, mean(∂z_b) = 5.00000000000176e-6, Δ = -1.7592874314471818e-18 at t = 1 hour with θ=60; N² * g̃[2] = 8.660254037844387e-6, mean(∂y_b) = 8.660130013623816e-6, Δ = 1.2402422057088938e-10 at t = 10 hours with θ=60; N² * g̃[3] = 5.0e-6, mean(∂z_b) = 5.000172734522595e-6, Δ = -1.7273452259476338e-10 at t = 10 hours with θ=60. ```. I guess the difference is still pretty small and this is a coarse 2D testing setup with low-order numerics, but it does grow quite a bit. Is this something to be worried about for turbulent simulations? I wonder if it's worth making a movie to see what happens after 10-100+ hours. I think all tests should pass now so we could probably start using tilted gravity more seriously! Still need to address some of @glwagner's comments but will revisit this PR another day to do this. cc @gianlisi @arnscheidt",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-796443566:63,test,tests,63,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-796443566,4,['test'],"['test', 'testing', 'tests']"
Testability,@tomchor You pointed out that `KernelComputedField` + `TimeAveragedInterval` seemed to be accumulating over time in #1517. This PR just explicitly zeroes out the `KernelComputedField`'s data in `compute!` so everything should still work since `compute!` should recompute everything. Might help uncover accumulation-related bugs?. I couldn't find much wrong otherwise so this is just a shot in the dark. Designing a `KernelComputedField` + `TimeAveragedInterval` test might be better than continuing to try different hacks 😅,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1520:462,test,test,462,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1520,1,['test'],['test']
Testability,"@tomchor added boundary conditions to `KernelComputedField`, plus tests, so the PR is ready for review.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1340#issuecomment-773674027:66,test,tests,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1340#issuecomment-773674027,1,['test'],['tests']
Testability,"@tomchor are you able to test locally? I believe these passed locally for me, so the problem might be relatively easy to solve.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194182257:25,test,test,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2538#issuecomment-1194182257,1,['test'],['test']
Testability,"@tomchor are you suggesting that someone should run your julia and python scripts to see if the plots are the same, or are you suggesting that we work on a different example / test that demonstrates the same issue?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-813815585:176,test,test,176,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-813815585,1,['test'],['test']
Testability,@tomchor can I commit to this PR and add more tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1023339023:46,test,tests,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1023339023,1,['test'],['tests']
Testability,@tomchor if tests pass feel free to merge ;),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3629#issuecomment-2184223704:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3629#issuecomment-2184223704,1,['test'],['tests']
Testability,@tomchor no don’t merge!. The PR only changes the Project.toml but actually we need to include the new version in Manifest. I tried to do it (#1785) but tests wouldn’t pass and I postponed the project for the future.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1781#issuecomment-870863876:153,test,tests,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1781#issuecomment-870863876,1,['test'],['tests']
Testability,"@tomchor seems we are missing a test, maybe we can identify what test we should add",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3232#issuecomment-1692646162:32,test,test,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3232#issuecomment-1692646162,2,['test'],['test']
Testability,@tomchor shall I merge if tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468173242:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2842#issuecomment-1468173242,1,['test'],['tests']
Testability,"@tomchor since you're the main person using the tilted gravity feature, I'm wondering if you can help provide some insight into this ""stratified fluid at rest"" test. The main issue is that the dynamics can be ""correct"" but the test can fail. I feel its a bad test for this reason.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890024609:160,test,test,160,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890024609,3,['test'],['test']
Testability,"@tomchor this is the report from Shu deriving ENO coefficients for a finite volume scheme https://www3.nd.edu/~zxu2/acms60790S13/Shu-WENO-notes.pdf (In particular equation 2.20 which becomes equation 2.21 for uniform grids and reduces to the coefficient we used before) I can add some documentation on the WENO. . By the way, it would be quite easy to modify the type to include the order of the WENO scheme which we could change at will. What do you think? Would it be usefull to do that?. @francispoulin Cool! I'll check the convergence then. What I mean in the comments is that I use a Nonhydrostatic model which computes pressure and there is no infrastructure in Nonhydrostratic.jl for a pressure solver on a non-uniform horizontal grid (it will throw an error ""no method Pressuresolver(grid::RectilinearGrid)"". I maybe should change that test to an hydrostatic model...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-968990386:844,test,test,844,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-968990386,1,['test'],['test']
Testability,@tomchor uses this or did at some point. Not sure who else has used it but would nice to tag them here to gather a good consensus on tests to write up.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264152276:133,test,tests,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670#issuecomment-2264152276,1,['test'],['tests']
Testability,"@tomchor you need to generalize this line:. https://github.com/CliMA/Oceananigans.jl/blob/0c23eeaca4f5d1888c3d78f85de3ff221a732bb4/src/Fields/field.jl#L225. to work when `parent(data)` is a `SubArray`. I think here we want a recursive parent that extracts the underlying array, something like:. ```julia; rparent(a) = rparent(parent(a)). const UnderlyingArrays = Union{Array, CuArray}; rparent(a::UnderlyingArrays) = a; ```. and use this to extract the global data via. ```julia; windowed_parent = view(rparent(data), parent_indices...) ; ```. That code might not work verbatim (I didn't test), but the concept is there I think. I'm happy to figure this out if you like.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116299744:588,test,test,588,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116299744,1,['test'],['test']
Testability,"@tomchor, let's do these in this PR:. > * Remove the Lid-drive cavity and Couette flow from the docs; > * Keep the Convergence tests (maybe move it to the Appendix to make for a cleaner left menu). and open issue/other PR for `validation` directory.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873257930:127,test,tests,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-873257930,1,['test'],['tests']
Testability,"@vchuravy Just benchmarked again with `@unroll` but couldn't see any difference in performance. Good to know about it though, will try it if we have more loops that could be unrolled.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/172#issuecomment-481445838:15,benchmark,benchmarked,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/172#issuecomment-481445838,1,['benchmark'],['benchmarked']
Testability,"@vchuravy could you have a look here? this seems to run (that is it does not error), but e.g., were there any tests actually tested in https://buildkite.com/clima/oceananigans/builds/11987#018912fd-4e55-4160-87ce-0e7195b271aa ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616067399:110,test,tests,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1616067399,2,['test'],"['tested', 'tests']"
Testability,@vchuravy feel free to merge if you feel it's for the best... tests won't pass :),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1416878499:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2782#issuecomment-1416878499,1,['test'],['tests']
Testability,@vchuravy if/when the tests pass merge!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1605360655:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3042#issuecomment-1605360655,1,['test'],['tests']
Testability,"@vchuravy suggested using if-else statements instead of; ```julia; @inline incmod1(a, n) = a == n ? one(a) : a + 1; @inline decmod1(a, n) = a == 1 ? n : a - 1; ```; as it might be faster on the GPU. Also worth checking out Julia's `mod1(x, y)` function. I'll test a bunch of different mod1 functions once we have the algorithm fully working on the GPU. See also: [/r/Julia/Efficient wrap-around with 1-based indexing?](https://www.reddit.com/r/Julia/comments/6hhryc/efficient_wraparound_with_1based_indexing/)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/57:259,test,test,259,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/57,1,['test'],['test']
Testability,"@vchuravy thank you that is very helpful! I don't think it will be too difficult to build up a small test suite for AMD. We can start with unit tests and a handful of cheap integration tests. @fluidnumerics-joe we don't have any current plans to get AMD GPU resources, but that could change.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937323799:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3468#issuecomment-1937323799,3,['test'],"['test', 'tests']"
Testability,"@whitleyv do you mind if I add a unit test to ensure that `IncompressibleModel` can take one time step with a simple `immersed_boundary`? This will exercise the code that's being added during CI, so that it can't be accidentally broken in a future PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1368#issuecomment-781613405:38,test,test,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1368#issuecomment-781613405,1,['test'],['test']
Testability,@wsmoses @glwagner It passed all tests!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2130520620:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2130520620,1,['test'],['tests']
Testability,@wsmoses quick question: how does the `gpu Enzyme extensions tests` set work when `test_enzyme.jl` hardcodes architectures as CPU()?. https://github.com/CliMA/Oceananigans.jl/blob/b8918c7d33089eafb2395fba3a9f5f3e5ad42d87/test/test_enzyme.jl#L12,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3452#issuecomment-1920652820:61,test,tests,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3452#issuecomment-1920652820,2,['test'],"['test', 'tests']"
Testability,@xiaozhour @navidcy @sandreza are we ok to merge this PR without examples (since it has a lot of fixes) and continue working on 1) eddying channel example and 2) eddying channel validation test on new branches?. I'll work on getting tests to pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1744#issuecomment-890346316:189,test,test,189,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1744#issuecomment-890346316,2,['test'],"['test', 'tests']"
Testability,"@xkykai I suggest something different --- add a test to see if `isnothing(buoyancy)`. If `isnothing(buoyancy)`, don't bother with the separation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3796#issuecomment-2377878000:48,test,test,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3796#issuecomment-2377878000,1,['test'],['test']
Testability,@xkykai do you think you could run some immersed boundary tests with this branch to make sure this change doesn’t affect your work? I think we’re interested in both performance and making sure the solution is high quality.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582732172:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1582732172,1,['test'],['tests']
Testability,"A Simple preliminary way to use our advection reconstruction stencils to do high-order Coriolis reconstruction. ```; advection = WENO(grid); coriolis = HydrostaticSphericalCoriolis(scheme = advection); ```. this PR is here just to test the idea, but the design will probably change",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2729:231,test,test,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2729,1,['test'],['test']
Testability,A comment is that I found out recently that if I run this script locally on my laptop (with exactly the same command) it works! But running the same code with the same command (at least as far as different `mpiexecjl` are the same) it fails... Has anyone had success running this benchmark? @johnryantaylor I think you were the last person to try it. Did it run successfully with you?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2433#issuecomment-1098396008:280,benchmark,benchmark,280,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2433#issuecomment-1098396008,1,['benchmark'],['benchmark']
Testability,"A common mistake is to give a `Number` as a schedule instead of `TimeInterval(Number)`. It'd be much more user-friendly if we have have a function that validates the schedule (and throw an error) because as is now, the first time you encounter the error usually in `run!` and it's hard to pin-point it. Another solution is to test-call the schedule when you initialize the simulation (e.g., put it in a `try-catch`) and throw the error to user?. (discovered with @glwagner)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2180:326,test,test-call,326,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2180,1,['test'],['test-call']
Testability,"A consideration when picking up from a checkpoint and using `NetCDFOutputWriter` is that `mode=""a""` (append) needs to be used instead of `mode=""c""` (create or clobber) when creating the `NetCDFOutputWriter`. This functionality works and is tested, but currently needs to be set manually by the user. Not sure of the best way of making this easy for users without accidentally overwriting their data. I can think of three solutions:; 1. Not specifying a `mode` causes `mode=""c""` if the file does not exist and `mode=""a""` if the file does exist. I like this solution the most as it works well with and without a checkpointer (and users don't have to do anything to get reasonable default behavior).; 2. Add a `force` kwarg to `NetCDFOutputWriter` that is `false` by default. The `NetCDFOutputWriter` will error if you try to overwrite an existing file, allowing the user to go back and set `mode=""a""` without any data loss. A `pickup` kwarg could perform a similar function if it's `false` by default.; 3. Setting the `PICKUP` environment variable causes `mode=""a""` to be the default if the file already exists. But I think we should avoid using global environment variables to modify internal behavior.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1068#issuecomment-711035671:240,test,tested,240,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1068#issuecomment-711035671,1,['test'],['tested']
Testability,A couple of notes:. - I've been able to run it with only one core (`Rx=Ry=Rz=1`); - I've been running it outside of the `benchmarks` directory since Julia complains about packages when I try to run it there.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2433#issuecomment-1097332460:121,benchmark,benchmarks,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2433#issuecomment-1097332460,1,['benchmark'],['benchmarks']
Testability,"A few comments:. * I would like to see some CPU benchmarks just to see where we are and how this changes things. We can merge the PR either way since GPU matters most; * The documentation is pretty poor for this PR. The crucial argument is called ""bias"" in most places, but switches to ""left_bias"" in core functions. It seems to me that ""left_bias"" makes more sense --- `bias==true` implies `left_bias` where `bias==false` is right biased. I suggest using `left_bias` everywhere, including in the function that is now called `bias`. I also think that `weno_interpolants.jl` needs a lot more explanation by way of comments as well as docstrings for crucial functions. I suspect that there is only one person capable of understanding `weno_interpolants.jl` which is a dangerous situation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2246643997:48,benchmark,benchmarks,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2246643997,1,['benchmark'],['benchmarks']
Testability,"A few ideas:. 1. Allow `grid` as a positional argument so we can write `WENO5(grid)` rather than `WENO5(grid=grid)`; 2. Emit a warning about ""stretched WENO"" in the model constructor rather than `WENO5`. It's misleading to throw a warning when using WENO5 on a uniform grid; we should only throw a warning if users specify `WENO5` with a stretched grid.; 3. Alternatively to 2, we can re-build WENO in model constructors with a `validate_advection` method. We already have `validate_momentum_advection` for hydrostatic models:. https://github.com/CliMA/Oceananigans.jl/blob/b3ddbc84c8f35aaf5b93fbbfdb4cffcada5c6533/src/Models/HydrostaticFreeSurfaceModels/hydrostatic_free_surface_model.jl#L127. The downside to 3 is that it's bad for testing, since it might _prevent_ us from using the ""uniform"" flavor of WENO on stretched grids. (@simone-silvestri is that true?) Also something that's not clear to me --- @simone-silvestri do coefficients like. https://github.com/CliMA/Oceananigans.jl/blob/b3ddbc84c8f35aaf5b93fbbfdb4cffcada5c6533/src/Advection/weno_fifth_order.jl#L30. become `Nothing` in regular directions, even with `WENO5(grid=grid)`? Or are they only `Nothing` for `WENO5()`?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2271:734,test,testing,734,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2271,1,['test'],['testing']
Testability,A few tests are a good idea.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577490747:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3127#issuecomment-1577490747,1,['test'],['tests']
Testability,"A few thoughts while I'm debugging these test failures:. * I think at least some of the failures are occurring because we are still using `time_step!(model, dt)` for tests. Now we have to call `update_state!(model)` before a hand-written loop when `model.clock.iteration != 0`. * checking `model.clock.iteration == 0` does not catch some cases. In the regression tests, we manually restore the model state to a configuration (essentially manual checkpointing). However, the halos are not correct (after this PR is merged they will be correct in saved data. However we still could have incorrect halos if models are ""hack checkpointed"" with NetCDFOutputWriter or JLD2OutputWriter that don't include halos). For these cases, we need to call `update_state!` before running a simulation. It seems we probably want to call `update_state` as part of the initialization of `run!` whether or not `iteration == 0` to avoid this gotcha... * Calling `update_state!(model)` every time that `run!` is called can lead to excess computation. But I think the excess is very small even in cases where `run!` is ""misused"" to advance the simulation only 10-20 time-steps (because `update_state!` is already a minor part of the total cost of time-stepping --- I think).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1083#issuecomment-712988897:41,test,test,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1083#issuecomment-712988897,3,['test'],"['test', 'tests']"
Testability,"A general question. In the tests a variable `results` is created, which is a mutable struct Dict. I see that map is a way to pick out elements of this object. When I ask for information on resutls I get something like this. ```julia> results; Dict{Any,Any} with 1 entry:; CenteredSecondOrder => fill((cx = (simulation = [-8.07688e-137, -2.28227e-125, -1.9026e-114, -4.67931e-104, -3.39525e-94, -7.26804e-…; ```. How do I get values from this object? . From looking in the scripts I gather that we need to use `map` but not sure what fields to get or how to get them. I found out that I can get a bit more inside using `results[CenteredSecondOrder]` but still not sure how to access the arrays.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-745408363:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1272#issuecomment-745408363,1,['test'],['tests']
Testability,"A git merge/rebase master might help with review, but only thought I had was: would it be too much work to add tests to CI that run the two new validation experiment? This would help ensure they don't go out of date and that we can easily run them on Buildkite.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1404#issuecomment-786816292:111,test,tests,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1404#issuecomment-786816292,1,['test'],['tests']
Testability,A little benchmarking to make sure that the single grid models have not slowed down in the process...; #### Main; ```; NonhydrostaticModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.775 ms │ 2.790 ms │ 2.823 ms │ 3.051 ms │ 520.84 KiB │ 1044 │ 10 │; │ CPU │ Float64 │ 64 │ 20.168 ms │ 20.463 ms │ 20.409 ms │ 20.515 ms │ 520.84 KiB │ 1044 │ 10 │; │ CPU │ Float64 │ 128 │ 211.542 ms │ 211.646 ms │ 211.700 ms │ 212.026 ms │ 520.84 KiB │ 1044 │ 10 │; │ CPU │ Float64 │ 256 │ 2.511 s │ 2.532 s │ 2.532 s │ 2.552 s │ 520.84 KiB │ 1044 │ 2 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┴─────────┘; HydrostaticFreeSurfaceModel benchmarks; ┌───────────────┬─────────────┬─────┬───────────┬───────────┬───────────┬───────────┬────────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼───────────┼───────────┼───────────┼───────────┼────────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 1.195 ms │ 1.205 ms │ 1.254 ms │ 1.626 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 64 │ 2.041 ms │ 2.051 ms │ 2.100 ms │ 2.503 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 128 │ 5.778 ms │ 5.833 ms │ 5.873 ms │ 6.254 ms │ 830.98 KiB │ 1831 │ 10 │; │ CPU │ Float64 │ 256 │ 23.662 ms │ 23.740 ms │ 23.730 ms │ 23.840 ms │ 830.98 KiB │ 1831 │ 10 │; └───────────────┴─────────────┴─────┴───────────┴───────────┴───────────┴───────────┴────────────┴────────┴─────────┘; ShallowWaterModel benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬──────────┬────────────┬───────,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428:9,benchmark,benchmarking,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1116031428,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"A long time ago, I did some scaling tests of the pure FFT algorithm. These were the results. <img width=""537"" alt=""Screenshot 2024-08-10 at 2 57 20 PM"" src=""https://github.com/user-attachments/assets/a60f2f50-13f3-4fc2-858f-8d5303ccd918"">. I will probably redo the scaling test later on after the summer. ; In general, always use slab partitioning if you can because you avoid one transposition. ; This might lead to larger halo to domain ratio, but the fill halo, contrarily to the transpose, is hidden so it should still be better to have a slab partitioning then a pencil one.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2282246515:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3689#issuecomment-2282246515,2,['test'],"['test', 'tests']"
Testability,A longer-term solution for efficient global ocean simulations is to implement a split-explicit time-stepping scheme. The first step should involve a simple but stable method where efficiency/accuracy tests can be performed,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2012:200,test,tests,200,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2012,1,['test'],['tests']
Testability,"A lot of tests are failing too, we need to fix those",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305887346:9,test,tests,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2802#issuecomment-1305887346,1,['test'],['tests']
Testability,A lot of tests seem to fail...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2089573857:9,test,tests,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2089573857,1,['test'],['tests']
Testability,A nice validation test for channels might be Abernathey et al 2011:. https://journals.ametsoc.org/jpo/article/41/12/2261/11254/The-Dependence-of-Southern-Ocean-Meridional,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/774:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/774,1,['test'],['test']
Testability,"A possible issue with this implementation may occur if the simulation crashes after already writing some output to the last file. However, we could test in the first call of the writer if the time to store is smaller than the current time to be append.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3818#issuecomment-2391976090:148,test,test,148,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3818#issuecomment-2391976090,1,['test'],['test']
Testability,"A preliminary implementation of (constant) smagorinsky.; - temporary arrays to be revisited; - need to improve the way to disable it (without loss of performance); - no attempt to try it on GPU. ; Tested with deep_convection example, running nicely with smag_coeff=3.3e-2 and Prandtl_num=1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/218:197,Test,Tested,197,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/218,1,['Test'],['Tested']
Testability,"A pro of the ""tuple"" design is that it may be a bit easier to use. A con is that it's more implicit (perhaps making a script harder to read) and requires some source code / tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2136#issuecomment-1009071655:173,test,tests,173,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2136#issuecomment-1009071655,1,['test'],['tests']
Testability,"A question @ali-ramadhan , how much work will it be to have a stretched grid in `x`? I ask because I want to do a `ShallowWaterModel` run wtih a western boundary current and an intensified western grid. I'm happy to work on this sometime but curious as to how much effort you think this will take, after it is fully tested of course.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1348#issuecomment-776027086:316,test,tested,316,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1348#issuecomment-776027086,1,['test'],['tested']
Testability,"A question for @glwagner . At the moment the tendencies in the evolution equation for height is computed here using essentailly a second-order finite difference method. This is fine for a start, but as discussed elsehwere, it would be better to use finite volume and therefore using the advection schemes that already exist. https://github.com/CliMA/Oceananigans.jl/blob/fjp/update-convergence-tests/src/Models/ShallowWaterModels/solution_and_tracer_tendencies.jl#L71. In line 69 above you will see that I tried doing this by definig a new operator, div_UV, for partial_x U + partial_y V. This was clunky because I needed to pass variables U and V, and I had an error. The details can be found here,. https://github.com/CliMA/Oceananigans.jl/blob/9402a90af072a495ef130d540661be9327a51552/src/Models/ShallowWaterModels/shallow_water_advection_operators.jl#L24. Can you suggest a better way of doing this?. When I try running the tests most of the pass except at line 82 I get the following error . ```; [2021/01/11 15:36:04.735] INFO Testing time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]...; ERROR: a exception was thrown during kernel execution.; Run Julia on debug level 2 for device stack traces.; Time-stepping ShallowWaterModels [GPU(), (Periodic, Periodic, Bounded)]: Error During Test at /home/fpoulin/software/Oceananigans.jl/test/test_shallow_water_models.jl:82; Test threw exception; Expression: time_stepping_shallow_water_model_works(arch, topo, nothing); KernelException: exception thrown during kernel execution on device Quadro P400; Stacktrace:; [1] check_exceptions() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/compiler/exceptions.jl:94; [2] prepare_cuda_call() at /home/fpoulin/.julia/packages/CUDA/YeS8q/src/state.jl:85; [3] initialize_api() at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/error.jl:92; [4] macro expansion at /home/fpoulin/.julia/packages/CUDA/YeS8q/lib/cudadrv/libcuda.jl:975 [inlined]; [5] macro expansion at /home/fpoulin/.j",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952:394,test,tests,394,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-758077952,2,['test'],['tests']
Testability,"A question that comes about is that after this PR: do we test *only* on v1.6? If so, how are we making sure that code works smooth on v1.5? Should we test on both? Should we bump the julia compat requirement in the `Project.toml` file to `^1.6`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-820084281:57,test,test,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-820084281,2,['test'],['test']
Testability,"A recent PR broke the user-facing `diffusivity()` function for `SmagorinskyLilly` and this fixes it. It also adds a test to catch this in the future and exports `diffusivity()` at the `TurbulenceClosure` level, since it's a user-facing function.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2913:116,test,test,116,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2913,1,['test'],['test']
Testability,"A single output passes, but multiple outputs fail:. ```; [2021/07/02 15:41:47.527] INFO Testing time-averaging of a single NetCDF output [CPU]...; [2021/07/02 15:41:47.722] INFO Testing time-averaging of multiple NetCDF outputs [CPU]...;   | NetCDF output writer [CPU]: Test Failed at /storage7/buildkite-agent/builds/tartarus-mit-edu-8/clima/oceananigans/test/test_netcdf_output_writer.jl:600;   | Expression: (ds[""c1""])[:, n + 1] ≈ c̄1(averaging_times);   | Evaluated: [0.9898351329432816, 0.9873526755690587, 0.9852760567272434, 0.9836993068328084] ≈ [0.9852523062199882, 0.9816589807887, 0.9786560482076754, 0.9763777557588359]; ```. The incorrect output is `c1`. Apparently the second output is correct.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1807#issuecomment-873248863:88,Test,Testing,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1807#issuecomment-873248863,4,"['Test', 'test']","['Test', 'Testing', 'test']"
Testability,A thermal wind example where a vertical velocity profile is set up to exactly balance a horizontal temperature gradient. Eventually supposed to become a test. Initially authored by: @mukund-gupta,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/179:153,test,test,153,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/179,1,['test'],['test']
Testability,A very similar piece of code tests that time-stepping works with every advection scheme:. https://github.com/CliMA/Oceananigans.jl/blob/62d280a8e1a78105aa9ade04a637ec3efbba8e33/test/test_time_stepping.jl#L258. https://github.com/CliMA/Oceananigans.jl/blob/62d280a8e1a78105aa9ade04a637ec3efbba8e33/test/test_time_stepping.jl#L42-L48. Are you able to run the time-stepping tests? These are here:. https://github.com/CliMA/Oceananigans.jl/blob/62d280a8e1a78105aa9ade04a637ec3efbba8e33/test/runtests.jl#L107-L112. You can run these by launching julia with `TEST_GROUP=time_stepping_1 julia --project` and then running the tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869749526:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869749526,6,['test'],"['test', 'tests']"
Testability,"A warning is emitted if output is requested but `collecting=true`:. https://github.com/CliMA/Oceananigans.jl/blob/d17f926b2c4787bf44f619439e81bfb82937aabf/src/OutputWriters/windowed_time_average.jl#L201-L203. But if you're not getting a warning then this isn't occurring. Do you have an MWE? If so we can play around. I suspect you might be hitting a flaw / bug in the algorithm that the tests don't hit. To figure out what that flaw is, we need an MWE that produces the error. It probably makes sense to average something that doesn't oscillate around 0 so spurious accumulation is obvious.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872471651:388,test,tests,388,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-872471651,1,['test'],['tests']
Testability,Abstract operations `compute_kinetic_energy` test fails with CUDA error,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/732:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/732,1,['test'],['test']
Testability,Accidently merged PR #1091 with examples disabled (I was testing docs) and it made its way into v0.46.0 so the stable docs have no examples now. This PR revives the examples. I'll tag v0.46.1 so the examples show up in the stable docs again.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1319:57,test,testing,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1319,1,['test'],['testing']
Testability,Action would be either we delete it from tests or make the tests to call it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480416031:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2956#issuecomment-1480416031,2,['test'],['tests']
Testability,Actually it's a problem without any rotation too! Except now the artifacts don't grow or propagate. Maybe the CPU and GPU pressure solvers aren't doing exactly the same thing? Effect/error must be very small though as regression tests would catch differences between CPU and GPU simulations. # CPU `coriolis = nothing`. ![image](https://user-images.githubusercontent.com/20099589/98897813-452b2e80-247a-11eb-9570-4d12ec07a7c3.png). # GPU `coriolis = nothing`. ![image](https://user-images.githubusercontent.com/20099589/98897886-5e33df80-247a-11eb-8fb1-71398847da6e.png),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1170#issuecomment-725839436:229,test,tests,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1170#issuecomment-725839436,1,['test'],['tests']
Testability,"Actually, I think I misunderstood the problem... Based on update_hydrostatic_pressure.jl, it doesn't look like the background buoyancy field is used in the calculation of the hydrostatic pressure. Indeed a quick test with a background horizontal buoyancy gradient and no initial velocity doesn't drive a flow. Now I think I understand what @tomchor and @glwagner were saying: the problem arises due to the vertical periodicity and not the background buoyancy field.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3364#issuecomment-1783860681:212,test,test,212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3364#issuecomment-1783860681,1,['test'],['test']
Testability,"Actually, I think that we should remake the LES regression test data rather than increase the tolerance.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/711#issuecomment-691191581:59,test,test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/711#issuecomment-691191581,1,['test'],['test']
Testability,"Actually, it probably wouldn't be that hard to run code in the README in a test. Somebody should write a package for that.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/961#issuecomment-696782024:75,test,test,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/961#issuecomment-696782024,1,['test'],['test']
Testability,"Actually, this was just to test that all the Implicit free surface methods were giving the same results with immersed boundaries (nothing physically meaningful) We could think at a more in-depth test maybe?. As to why this test was failing is because the PR containing this test was merged before the PR which reverted `WENO5` on `halo = (1,1,1)` to an error instead of a warning (I think). We have to check if the error showed up when we merged the latter",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1006089670:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131#issuecomment-1006089670,4,['test'],['test']
Testability,"Actually, this was on 1 CPU. I ll do some more in depth benchmarking today.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1112117583:56,benchmark,benchmarking,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2253#issuecomment-1112117583,1,['benchmark'],['benchmarking']
Testability,"Actually, we can't test this because while it fixes the error, it seems there's another bug that prevents the boundary condition from being fulfilled. However, I put a fix for this second bug in #2437 .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2441#issuecomment-1100708867:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2441#issuecomment-1100708867,1,['test'],['test']
Testability,Add Appveyor for Windows testing and Coveralls for cooler code coverage.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/52:25,test,testing,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/52,1,['test'],['testing']
Testability,Add Enzyme test for differentiating a single column model with CATKEVerticalDiffusivity,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3837:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3837,1,['test'],['test']
Testability,Add Multi GPU testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2526:14,test,testing,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2526,1,['test'],['testing']
Testability,Add Y-partition and XY-partition tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3338:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3338,1,['test'],['tests']
Testability,Add a bathymetry test for `ShallowWaterModel`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1716:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1716,1,['test'],['test']
Testability,Add a test to check surface bc continuous functions work with ImmersedBoundary,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1928:6,test,test,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1928,1,['test'],['test']
Testability,Add a validation script and/or tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3204:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3204,1,['test'],['tests']
Testability,Add distributed test pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3326:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3326,1,['test'],['test']
Testability,Add documentation section on how to run tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1176:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1176,1,['test'],['tests']
Testability,Add possible option to test with one file,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2122:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2122,1,['test'],['test']
Testability,Add steady-state test case for the cubed sphere,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3302:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3302,1,['test'],['test']
Testability,Add test for autodifferentiating hydrostatic turbulence simulation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867,1,['test'],['test']
Testability,Add test for implicit free surface with immersed boundary,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2712:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2712,1,['test'],['test']
Testability,Add test of enzyme flux bc,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3643:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3643,1,['test'],['test']
Testability,Add test of tracer advection-diffusion for Enzyme,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480,1,['test'],['test']
Testability,Add testing for MultiRegionGrids with `YPartition`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3202:4,test,testing,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3202,1,['test'],['testing']
Testability,Add tests for Face-Face halo filling,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3324:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3324,1,['test'],['tests']
Testability,Add tests for biogeochemistry on lat/lon grids,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179,1,['test'],['tests']
Testability,Add tests for computations on slices,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2521:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2521,1,['test'],['tests']
Testability,Add the first order scheme to this list:. https://github.com/CliMA/Oceananigans.jl/blob/77e2d1c8b6418db7ac7b4f4d6de0e362107c0942/test/test_time_stepping.jl#L207-L212,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905752031:129,test,test,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-905752031,1,['test'],['test']
Testability,"Added a new type WENO5S which allows the execution of the WENO scheme on stretched and uniform grids alike. . In practice:. if the direction is uniform (`typeof(Δc) <: Number`) the scheme defaults to the usual 5th order interpolation coefficients (""uniform setting""). otherwise if the grid is stretched:. - `WENO5S(grid = grid)` will precompute the WENO coefficients for the stretched directions (""stretched"" setting) (I have tested ""on the fly"" coefficient calculation is: it is way too expensive!); - `WENO5s()` will default to the uniform 5th order coefficients (""uniform"" setting); - No support is given for `WENO5S(grid = grid)` for curvilinear grids for the moment (defaults to uniform setting). Comments:; `WENO5()` is obsolete as all the functionalities of `WENO5()` are included in `WENO5S()`, on the other hand, I kept this type for the moment for validation and benchmark purposes. When the `WENO5S(args...)` scheme is approved we can refractor it to `WENO5(args...)` and delete `src/Advection/weno_fifth_order.jl`. The `test/validate_weno_scheme.jl` compares all these methods in terms of time and accuracy on a simple 1D tracer advection simulation. Blow outputs when the grid is fairly coarse (`Nx=20`); ```; ┌ Info: residuals for settings; │ architecture is GPU; │ the spacing is regular; │ ; │ WENO5S stretched setting : 9.677123910420889, ; │ WENO5S uniform setting : 9.677123910420574, ; └ WENO5 (only uniform) : 9.677123910420574; ┌ Info: residuals for settings; │ architecture is GPU; │ the spacing is stretched; │ ; │ WENO5S stretched setting : 6.757165351716798, ; │ WENO5S uniform setting : 15.327517291492, ; └ WENO5 (only uniform) : 15.327517291492; ┌ Info: residuals for settings; │ architecture is CPU; │ the spacing is regular; │ ; │ WENO5S stretched setting : 9.677123910420846, ; │ WENO5S uniform setting : 9.677123910420608, ; └ WENO5 (only uniform) : 9.677123910420608; ┌ Info: residuals for settings; │ architecture is CPU; │ the spacing is stretched; │ ; │ WENO5S str",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2059:426,test,tested,426,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2059,2,"['benchmark', 'test']","['benchmark', 'tested']"
Testability,"Added a test, I ll merge when tests pass",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2651#issuecomment-1190754034:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2651#issuecomment-1190754034,2,['test'],"['test', 'tests']"
Testability,Added adapt method for scalar and scalar biharmonic diffusvity + test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3401:65,test,test,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3401,1,['test'],['test']
Testability,Added an additional test to the enzyme test set for differentiating a `HydrostaticFreeSurfaceModel` with tracer advection and diffusion.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480,2,['test'],['test']
Testability,Added implicit free surface test,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-956239478:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2031#issuecomment-956239478,1,['test'],['test']
Testability,"Added some dynamics tests for Coriolis with this last commit. It two a 0-D case for half an inertial period with a rotation about the `z` axis and `x` axis and then compares both to make sure they produce the same result (but rotated). There's one part that tests if the total velocity magnitude is approximately unchanged (magnitude=1), which relies on an implicit arbitrary tolerance which might be bad. I'd curious about your feedback on that one. > if the name is changed to include Cartesian then we can merge this and discuss further in an issue. Per the comment above I'm going to change the name to `ConstantCartesianCoriolis` and (provided the tests all pass and you're okay with my new test addition) I'll proceed to merge this into master and open an issue to further discuss the issues that emerged here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-888495033:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-888495033,4,['test'],"['test', 'tests']"
Testability,"Added some tests that should currently fail and they do fail when an odd-sized bounded dimension exists:. ```; [2020/11/29 08:29:15.978] INFO Testing divergence-free solution [GPU]...; [2020/11/29 08:29:15.978] INFO Testing (Periodic, Periodic, Periodic) topology on GPUs...; [2020/11/29 08:29:47.569] INFO Testing (Periodic, Periodic, Bounded) topology on GPUs...; Divergence-free solution [GPU]: Test Failed at /home/alir/Oceananigans.jl/test/test_pressure_solvers.jl:146; Expression: divergence_free_poisson_solution(GPU(), Float64, topo, 5, 7, 11); [2020/11/29 08:30:09.141] INFO Testing (Periodic, Bounded, Bounded) topology on GPUs...; Divergence-free solution [GPU]: Test Failed at /home/alir/Oceananigans.jl/test/test_pressure_solvers.jl:146; Expression: divergence_free_poisson_solution(GPU(), Float64, topo, 5, 7, 11); ```. ```; [2020/11/29 09:03:26.365] INFO Convergence of L¹-normed error, GPU, Float64, (64³ -> 128³), topology=(Periodic, Periodic, Bounded): -0.006056191942410123; [2020/11/29 09:03:29.419] INFO Convergence of L¹-normed error, GPU, Float64, (67³ -> 131³), topology=(Periodic, Periodic, Bounded): -0.0062034101948002535; [2020/11/29 09:03:34.587] INFO Convergence of L¹-normed error, GPU, Float64, (64³ -> 128³), topology=(Periodic, Bounded, Bounded): -0.0013454083208625962; [2020/11/29 09:03:35.604] INFO Convergence of L¹-normed error, GPU, Float64, (67³ -> 131³), topology=(Periodic, Bounded, Bounded): -0.002139543914549385; ```. Hmmm, the convergence test should be passing for the even-sized 64³ -> 128³ test cases... EDIT: Never mind, forgot to permute indices in pressure solver convergence test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1228#issuecomment-735400085:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1228#issuecomment-735400085,12,"['Test', 'test']","['Test', 'Testing', 'test', 'tests']"
Testability,Added with tests! Should we export `MultipleForcings`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3743#issuecomment-2313625483:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3743#issuecomment-2313625483,1,['test'],['tests']
Testability,Adding norm for fields with some tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1557:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1557,1,['test'],['tests']
Testability,Adding regression test to lat-lon grid,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2032:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2032,1,['test'],['test']
Testability,"Adding the Manifest won't help for the tests because the test environment generates a new manifest every time, I learned",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3880#issuecomment-2457661193:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3880#issuecomment-2457661193,2,['test'],"['test', 'tests']"
Testability,"Addressing some of the issues on #3892, though we need tests.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3893:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3893,1,['test'],['tests']
Testability,Adds AveragedField test for 256 x 256 x 128 Field,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1784:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1784,1,['test'],['test']
Testability,"Adds Value Boundary Condition (BC), improves BC function signatures, GPU BC tests",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/237:76,test,tests,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/237,1,['test'],['tests']
Testability,Adds `KernelComputedField <: AbstractField` which is computed using a user-defined `@kernel` function via `KernelAbstractions.jl`. To do:. - [x] Implementation; - [x] Testing; - [x] Example / Docs; - [x] Test complex examples on GPUs. Closes #1246,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1293:167,Test,Testing,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1293,2,['Test'],"['Test', 'Testing']"
Testability,Adds a test for broadcasting fields with arrays with singleton dimensions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1947:7,test,test,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1947,1,['test'],['test']
Testability,Adds benchmark for free surface solvers on lat-lon immersed boundary + triply-bounded Poisson bench/validation script,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2784:5,benchmark,benchmark,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2784,1,['benchmark'],['benchmark']
Testability,Adds documentation page for convergence tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/782:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/782,1,['test'],['tests']
Testability,Adds momentum equation test for Enzyme extension,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3822:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3822,1,['test'],['test']
Testability,Adds some tests too. Resolves #637,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/984:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/984,1,['test'],['tests']
Testability,Adds test for race condition in `compute!(::AveragedField)`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1805:5,test,test,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1805,1,['test'],['test']
Testability,Adds tests for Poisson solvers with Flat topologies,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560,1,['test'],['tests']
Testability,"Adds tests for splitting output based on time-interval, e.g., . ```Julia; ow = JLD2OutputWriter(model, (; u);; filename = ""test.jld2"",; ...; file_splitting = TimeInterval(3seconds); ); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3523:5,test,tests,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3523,2,['test'],"['test', 'tests']"
Testability,Advection scheme benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/934:17,benchmark,benchmarks,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/934,1,['benchmark'],['benchmarks']
Testability,After #2522 me and @dhruvbhagtani will start working on the multi-layer. The plan is to extend the `ShallowWaterModel` to allow non-flat `z` dimensions with `Nz` the number of fluid layers. It would be good if we add a regression test for the single-layer `ShallowWaterModel` to ensure we don't break things in the process.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1137948975:230,test,test,230,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2507#issuecomment-1137948975,1,['test'],['test']
Testability,"After adding `MPI.Init()` back to `distributed_nonhydrostatic_model_mpi.jl`, the script seems to run (it's still running...). Here's a few idle thoughts (independent of this PR, just leaving here for future reference):. * The ""Benchmarks"" module in `/benchmarks/src` causes a few issues like:; ```julia; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ```; It'd be nice to fix that eventually. * The output is kind of annoying:. ```julia; [2022/03/13 13:17:49.875] INFO Benchmarking weak scaling nonhydrostatic model with Slab decomposition [N=(128, 128, 32), ranks=(1, 2, 1)]...; Invalid MIT-MAGIC-COOKIE-1 keyInvalid MIT-MAGIC-COOKIE-1 keyNo protocol specified; [ Info: Oceananigans will use 24 threads; [ Info: Oceananigans will use 24 threads; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for Benchmarks are suppressed.; ┌ Warning: Package Benchmarks does not have Oceananigans in its dependencies:; │ - If you have Benchmarks checked out for development and have; │ added Oceananigans as a dependency but haven't updated your primary; │ environment's manifest file, try `Pkg.resolve()`.; │ - Otherwise you may need to report an issue with Benchmarks; └ Loading Oceananigans into Benchmarks from project dependency, future warnings for ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590:227,Benchmark,Benchmarks,227,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2338#issuecomment-1066145590,8,"['Benchmark', 'benchmark']","['Benchmarking', 'Benchmarks', 'benchmarks']"
Testability,"After discussion in https://github.com/CliMA/OceananigansArtifacts.jl/pull/21 from what I understood that the new `.jld2` file requires Oceananigans to be generated, I suggest we revert back to using ""https://github.com/CliMA/OceananigansArtifacts.jl/raw/main/cubed_sphere_grids/cubed_sphere_32_grid.jld2"" in . https://github.com/CliMA/Oceananigans.jl/blob/7362a2cedb7c0239e7c42922e0c0f5562851a7e0/test/data_dependencies.jl#L7. and revert back the changes that I made thinking we'd be using a new `.jld2` file for comparisons. I'm happy @siddharthabishnu to merge this PR without really a showcase that it is an improvement. But note that this cannot be the norm, we will have to be able to demonstrate what changes a PR has made in a concise and quantitative manner.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2017535819:398,test,test,398,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3488#issuecomment-2017535819,1,['test'],['test']
Testability,"After going down the rabbit hole of `Documenter.jl` all I can say is that the error message we're seeing means nothing.; All it means that in the makedocs process, there was an error. It is not the makedocs that's throwing the error, but actually something much earlier that pushed an error into the docs.internal.errors field of the document object. Here's where it happens as according to the error log we can see:; https://github.com/JuliaDocs/Documenter.jl/blob/master/src/Builder.jl#L255; As seen in https://github.com/CliMA/Oceananigans.jl/blob/master/docs/make.jl#L162, the makedocs strict option is set to true which follows that:; **`strict`** -- [`makedocs`](@ref) fails the build right before rendering if it encountered; any errors with the document in the previous build phases.; Interestingly enough, the error we see can be summarized as ""error: there's an error"", but does not give any more info on what exactly the error was.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-887149801:401,log,log,401,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881#issuecomment-887149801,1,['log'],['log']
Testability,"After reversing the k index u, v, w, and S are all correct if you take one time step for the LES regression tests (non-LES regression tests all pass). But T values at the top and bottom grid cells are wrong. Still thinking of what could be effecting T but not S (which also runs with AMD and flux boundary conditions)... T is the only field with a gradient boundary condition, but enforcing gradient boundary conditions shouldn't have changed and looks fine to me... I think this is the last bug, if fixed this should hopefully become ready to merge .",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/462#issuecomment-544472500:108,test,tests,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/462#issuecomment-544472500,2,['test'],['tests']
Testability,"After the big changes yesterday I decided to run the tests to make sure everything was working. Thanks again @ali-ramadhan for helping me get that started. Now I'm finding that there are some failures and somethings that are broken. See below. Is it just me or do others get this now?. ```; Test Summary: | Pass Fail Broken Total; Oceananigans | 2987 8 5 3000; Unit tests | 1511 1 1512; Model and time stepping tests (part 1) | 99 99; Model and time stepping tests (part 2) | 214 1 215; Simulation tests | 1142 2 3 1147; Simulations | 26 26; Diagnostics | 12 12; Output writers | 409 2 411; FieldSlicer | 1 1; WindowedTimeAverage | 2 2; NetCDF [GPU] | 198 198; JLD2 [GPU] | 11 11; Checkpointer [GPU] | 166 2 168; Dependency adding [GPU] | 2 2; Time averaging of output [GPU] | 29 29; Abstract operations | 695 3 698; Regression | 14 6 20; Thermal bubble [GPU] | 5 5; Rayleigh–Bénard tracer [GPU] | 5 5; Ocean large eddy simulation [GPU] | 4 6 10; Scripts | 7 7; ERROR: LoadError: Some tests did not pass: 2987 passed, 8 failed, 0 errored, 5 broken.; in expression starting at /home/fpoulin/software/Oceananigans.jl/test/runtests.jl:77; ERROR: Package Oceananigans errored during testing; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1179:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1179,9,"['Test', 'test']","['Test', 'test', 'testing', 'tests']"
Testability,Agree this is a necessity. Some tests are cheap enough to verify convergence continuously. Some of them are expensive so I think we should just ensure that they continue to execute (like we do for the other verification tests).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/873#issuecomment-681950566:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/873#issuecomment-681950566,2,['test'],['tests']
Testability,"Agreed, we need a better API. The fields abstraction also needs to be overhauled. The ideas are all there, there's just the hard work of writing it into the code with tests and docs. I can work on that...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/257#issuecomment-497299873:167,test,tests,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/257#issuecomment-497299873,1,['test'],['tests']
Testability,"Agreed. Useful and related comment. > I was thinking of doing some prototyping and benchmarking in a sandbox by building off the example in my PR [vchuravy/GPUifyLoops.jl#18](https://github.com/vchuravy/GPUifyLoops.jl/pull/18).; > ; > The PR contains an example that can be extended to rely on a `Grid` struct, multiple `FaceField`s and ` CellField`. So I'll prototype grids and fields that are `isbitstype` (you already helped by doing this for a grid in [#59 (comment)](https://github.com/climate-machine/Oceananigans.jl/issues/59#issuecomment-467660181)) and test to see if they work on the GPU with GPUifyLoops.jl. If they do work and performance isn't degraded then I'll rewrite the operators to use grid and field structs.; > ; > You probably know how to do this better than me, but might be good if I rewrite the operators as they's still undocumented and do some _slightly convoluted_ stuff to avoid having to store intermediate calculations.; > ; > Right now I'm focusing on system tests and benchmarks but once @christophernhill @jm-c and I get closer to implementing the variable _Δz_ grid #47 I will work on this.; >; >_Originally posted by @ali-ramadhan in https://github.com/climate-machine/Oceananigans.jl/issues/115#issuecomment-470782067_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/59#issuecomment-470297910:83,benchmark,benchmarking,83,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/59#issuecomment-470297910,5,"['benchmark', 'sandbox', 'test']","['benchmarking', 'benchmarks', 'sandbox', 'test', 'tests']"
Testability,Agreed. We could address this when we refactor halo regions to dispatch on boundary conditions. Would then be good to add some code that asserts that the velocity boundary conditions are compatible with the boundary conditions we support (and with each other).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/311#issuecomment-510898553:137,assert,asserts,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/311#issuecomment-510898553,1,['assert'],['asserts']
Testability,"Ah #35, our second oldest open issue. I used to think it would be hard to implement but yeah if we just dispatch on `Flat` then it might be pretty easy!. Setting halo size to 0 along `Flat` dimensions should ensure we don't allocate more memory than needed. Would be interesting to benchmark 1D and 2D models before and after. Can't think of anything you missed... Don't think the pressure solver needs to change but might hit a problem there. There are plenty of 0D, 1D, and 2D tests that could be converted to use `Flat` dimensions and act as tests for eliding operations. Unit tests are always useful too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/902#issuecomment-686454471:282,benchmark,benchmark,282,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/902#issuecomment-686454471,4,"['benchmark', 'test']","['benchmark', 'tests']"
Testability,"Ah CI doesn't even initialize on the CPU now... Kinda confused why tests were initially failing now since REPL suggests that CUDA.jl behavior actually hasn't changed (and also errors on `CUDA.has_cuda_gpu` like CI does now):. ```julia; shell> hostname; tartarus. julia> ENV[""CUDA_VISIBLE_DEVICES""]; ""-1"". julia> using CUDA. julia> CUDA.has_cuda(); false. julia> CUDA.has_cuda_gpu(); ERROR: CUDA error: initialization error (code 3, ERROR_NOT_INITIALIZED); Stacktrace:; [1] throw_api_error(res::CUDA.cudaError_enum); @ CUDA ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/error.jl:91; [2] macro expansion; @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/error.jl:101 [inlined]; [3] cuDeviceGetCount; @ ~/.julia/packages/CUDA/YpW0k/lib/utils/call.jl:26 [inlined]; [4] ndevices; @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/devices.jl:160 [inlined]; [5] length; @ ~/.julia/packages/CUDA/YpW0k/lib/cudadrv/devices.jl:144 [inlined]; [6] has_cuda_gpu (repeats 2 times); @ ~/.julia/packages/CUDA/YpW0k/src/initialization.jl:136 [inlined]; [7] top-level scope; @ REPL[5]:1; [8] top-level scope; @ ~/.julia/packages/CUDA/YpW0k/src/initialization.jl:52; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942860232:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942860232,1,['test'],['tests']
Testability,"Ah I see. Well from what I see everything in the [TurbulentStatistic.jl](https://github.com/CliMA/LESbrary.jl/tree/main/src/TurbulenceStatistics) module is compatible with new versions of Oceananigans (except maybe GPU usage). Since that is what you are using, you can maybe use it locally?. This is just a quick fix to try out the new Oceananigans. ; Also, to try out if the problem persists it is enough to test some simple second-order moments. ; The ones you have in your script should do the job; ```; u, v, w = model.velocities; t = model.tracers.T. U = Average(u, dims=(1, 2)) ; V = Average(v, dims=(1, 2)); T = Average(t, dims=(1, 2)); wu = Average(w * u, dims=(1, 2)); wv = Average(w * v, dims=(1, 2)); uu = Average(u * u, dims=(1, 2)); vv = Average(v * v, dims=(1, 2)); ww = Average(w * w, dims=(1, 2)); www = Average(w * w * w, dims=(1, 2)); wT = Average(w * t, dims=(1, 2)); uv = Average(u * v, dims=(1, 2)); uT = Average(u * t, dims=(1, 2)); vT = Average(v * t, dims=(1, 2)); TT = Average(t * t, dims=(1, 2)); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266331571:409,test,test,409,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1266331571,1,['test'],['test']
Testability,Ah I think Buildkite tests did not run on this PR since we disable Buildkite on PRs from forks (to avoid random PRs executing potentially malicious code on our machines). So we usually open and merge branches from the repo itself. You should be able to do this since you're a repo collaborator.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1346#issuecomment-775428627:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1346#issuecomment-775428627,1,['test'],['tests']
Testability,Ah I think tests are failing because of #1262 so you might have to `git rebase master` or `git merge master`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741117661:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1266#issuecomment-741117661,1,['test'],['tests']
Testability,Ah I think you added `sandbox/vertically_stretched_plankton.jl` back in when we meant to keep it nuked but we can worry about it after this PR is merged.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783652214:22,sandbox,sandbox,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783652214,1,['sandbox'],['sandbox']
Testability,"Ah I wouldn't say your GPU lacks any architecture, it's just different from the one we test on. And we don't have access to many different GPUs. Might be good to leave this issue open until we increase the ≈ tolerance to account for different GPU microarchitectures (at which points tests should pass on your system).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-726995346:87,test,test,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-726995346,2,['test'],"['test', 'tests']"
Testability,"Ah haha right, feels like a lot more tests would have failed because of that though but it was only CPU tests groups that failed last time so maybe that line is responsible for most of the failures?. PS: Sorry for accidentally closing!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942854704:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942854704,2,['test'],['tests']
Testability,"Ah having two app manifests (test/gpuenv and test/cpuenv) looks like a really clean way of doing this, thanks!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/79#issuecomment-466800311:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/79#issuecomment-466800311,2,['test'],['test']
Testability,"Ah hmmm looks like one of the GPU regression tests had a few grid points with values that were different enough (see below) to fail the `isapprox` test (default `rtol=eps(Float64)` I think). Hopefully this is just a one-time thing and we got unlucky with finite precision. Might even be the same issue @francispoulin encountered in https://github.com/CliMA/Oceananigans.jl/issues/1179?. Will restart the build. ```; [2020/11/29 20:22:58.388] INFO Testing oceanic large eddy simulation regression [SmagorinskyLilly, GPU]; [2020/11/29 20:23:18.620] INFO Δu: min=-9.427261e-10, max=+4.745530e-10, mean=-6.821262e-20, absmean=+4.275799e-12, std=+3.596699e-11 (4058/4096 matching grid points); [2020/11/29 20:23:18.622] INFO Δv: min=-9.675103e-10, max=+5.331324e-10, mean=+1.418780e-20, absmean=+3.563472e-12, std=+2.795579e-11 (4080/4096 matching grid points); [2020/11/29 20:23:18.624] INFO Δw: min=-1.665259e-09, max=+5.409689e-10, mean=-1.180945e-20, absmean=+3.009957e-12, std=+3.245501e-11 (4002/4096 matching grid points); [2020/11/29 20:23:18.625] INFO ΔT: min=-4.600516e-10, max=+2.842484e-09, mean=+2.448547e-12, absmean=+3.654878e-12, std=+6.817770e-11 (4096/4096 matching grid points); [2020/11/29 20:23:18.626] INFO ΔS: min=-1.080025e-12, max=+8.952838e-13, mean=+5.551115e-17, absmean=+3.698430e-15, std=+2.937685e-14 (4096/4096 matching grid points); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1231#issuecomment-736959593:45,test,tests,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1231#issuecomment-736959593,3,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,"Ah indeed we never encountered this issue since I think we always ran the benchmark scripts on Linux but this could be an issue on Windows. I think the issue is that the filenames are derived from the title of the tables, e.g. from https://github.com/CliMA/Oceananigans.jl/blob/50ec98e490ce7b30eec4c71dc779865b90eee5fe/benchmark/benchmark_incompressible_model.jl#L39. We could change all instances of `->` to `to`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1672#issuecomment-844269692:74,benchmark,benchmark,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1672#issuecomment-844269692,2,['benchmark'],['benchmark']
Testability,"Ah interesting, that could be it especially since we're using free-tier CI testing. Looking to see what the final version of https://github.com/climate-machine/CLIMA/issues/106 and https://github.com/climate-machine/CLIMA/issues/107 look like, then would be good to at least use a CPU-only configuration on Appveyor.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/89#issuecomment-473687080:75,test,testing,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/89#issuecomment-473687080,1,['test'],['testing']
Testability,Ah it's actually still an open issue but for a different reason so I updated the original post. Doesn't need to be in v0.5 though as it's not used in the time stepping (only testing and diagnostics).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/18#issuecomment-470298155:174,test,testing,174,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/18#issuecomment-470298155,1,['test'],['testing']
Testability,"Ah it's possible that `AnisotropicBiharmonicDiffusivity` isn't doing the right thing on a vertically stretched grid... Certainly it's not tested. The error you're getting with `topology = (Periodic, Bounded, Bounded)` seem related to `cell_advection_timescale` not doing the right thing on a vertically stretched grid as well... It's used to compute CFL by the `TimeStepWizard`. We should fix these soon but for now you could try running with a constant time step.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-794035595:138,test,tested,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1429#issuecomment-794035595,1,['test'],['tested']
Testability,"Ah just checked and there's a `FFTW.set_num_threads(nthreads::Integer)` function. Should be easy for us to benchmark Oceananigans.jl with different `nthreads` using the benchmarking script #116. https://github.com/JuliaMath/FFTW.jl/blob/d5cd15fccb56994991abe56d4557538cac552c14/src/fft.jl#L174. Couldn't find an `nthreads` argument to plan_fft but might not have been looking correctly. But yes, either way the user can specify the number of threads to use.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471178489:107,benchmark,benchmark,107,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471178489,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"Ah neat result @navidcy, thanks for posting your solution! Indeed I doubt I set it up correctly. I went back and tried to play around with the setup a bit but no luck. Perhaps I misunderstood how to reduce down to Burgers equation but might try again a bit later with fresh eyes... Out of curiosity what numerical method did you use? That's a super clean shock!. > Also, @ali-ramadhan in your solution above I see noise forming for negative parts of the solution first. This might hint some biased in the scheme towards certain-sign velocities?. Yeah that weirded me out as well. Wasn't sure what to make of it but I decided to ignore it since I wasn't solving the right equation (or the setup was just wrong). I didn't notice any discrepency between periodic advection of a square waveform with positive and negative velocities, but I only checked using my unreliable eyeball norm. It's using the same advection schemes as Oceananigans.jl (which we've tested for convergence using positive and negative velocities). But because the prognostic variable is ρu there's an extra division by ρ since it computes fluxes of ρuu as (ρu)*(ρu)/ρ. So maybe I should be doing something like `WENO(ρ)*WENO(ρ)/WENO(ρ)` instead of just `WENO(ρ)*WENO(ρ)/ρ`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1079#issuecomment-716459705:953,test,tested,953,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1079#issuecomment-716459705,1,['test'],['tested']
Testability,"Ah nice doesn't look like there's much cause for concern as the regression test ""mostly passes"" (I copy pasted the relevant portion below). Almost all the grid points match except for a few percent of the velocity grid points. So I'm guessing this is just a result of different GPUs doing calculations slightly differently maybe? Tiny differences could accumulate over the 100 iterations of the regression test. I suspect this is the same reason why 2/166 checkpointer tests fail. Maybe we need to add an absolute tolerance to these tests when checking for `≈`?. ```; [2020/11/13 11:13:08.185] INFO Δu: min=-5.669004e-10, max=+5.237555e-10, mean=-4.579272e-20, absmean=+3.847342e-12, std=+2.582632e-11 (4064/4096 matching grid points); [2020/11/13 11:13:08.185] INFO Δv: min=-5.248542e-10, max=+4.306961e-10, mean=-4.446923e-20, absmean=+3.446188e-12, std=+2.026341e-11 (4081/4096 matching grid points); [2020/11/13 11:13:08.185] INFO Δw: min=-8.810476e-10, max=+3.828646e-10, mean=-1.673779e-20, absmean=+2.695421e-12, std=+2.003712e-11 (3987/4096 matching grid points); [2020/11/13 11:13:08.185] INFO ΔT: min=-3.171294e-10, max=+1.584823e-09, mean=+1.933831e-12, absmean=+3.283801e-12, std=+4.237465e-11 (4096/4096 matching grid points); [2020/11/13 11:13:08.185] INFO ΔS: min=-5.826450e-13, max=+5.613288e-13, mean=-3.816392e-17, absmean=+3.587408e-15, std=+1.934380e-14 (4096/4096 matching grid points); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-726954768:75,test,test,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-726954768,4,['test'],"['test', 'tests']"
Testability,Ah nice find. The `mapreduce` solution might work. Could move what @christophernhill and @glwagner used in the conjugate gradient solver to `Oceananigans.Fields`: https://github.com/CliMA/Oceananigans.jl/blob/3824da302d2b715c8b3328c2029613260c5c61c4/src/Solvers/preconditioned_conjugate_gradient_solver.jl#L105-L110. But yeah I think all the GPU `norm` tests failed because of CUDA scalar operations.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1562#issuecomment-817869562:353,test,tests,353,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1562#issuecomment-817869562,1,['test'],['tests']
Testability,Ah no this won't work (tests are failing) because `AbstractOperations.Average` needs to call `Diagnostics.Average`...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/858#issuecomment-674244007:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/858#issuecomment-674244007,1,['test'],['tests']
Testability,Ah right sorry I missed that! Unfortunately yeah the error by itself isn't super helpful... Did the initial error come with any more info higher up in the log? Could also be nice to post the full log (if there's more to it).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1455#issuecomment-796869175:155,log,log,155,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1455#issuecomment-796869175,2,['log'],['log']
Testability,"Ah right, when broadcasting you wouldn't want the operations to act on the _ghost cells_ or _halo regions_ (well that's probably fine as long as they're overwritten before being used). So just use an `@views` maybe. Either way, don't think we use any broadcasts over `CuArrays`s but should probably play around in a GPU sandbox a bit before implementing anything.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/104#issuecomment-469741132:320,sandbox,sandbox,320,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/104#issuecomment-469741132,1,['sandbox'],['sandbox']
Testability,"Ah so I've realised this isn't the fix we needed, and I was just hiding it from myself in the profile because I replaced the function by writing it in the REPL. I made an MWE:. ```jula; using Oceananigans. grid = RectilinearGrid(GPU(), topology = (Flat, Flat, Bounded), size = (100, ), extent = (400, )). model = HydrostaticFreeSurfaceModel(; grid, velocities = PrescribedVelocityFields(), momentum_advection=nothing, buoyancy=nothing, tracers = ntuple(n->Symbol(:T, n), Val(30))); ```; <img width=""1361"" alt=""Screenshot 2024-09-26 at 12 00 29"" src=""https://github.com/user-attachments/assets/2cf2a379-88e9-428f-8156-4ddead2a02e4"">; You can see from this profile that `fill_open_boundary_regions!` takes a lot longer than `fill_halo_event!`, even though there are no velocity open boundaries. This is because it is launching a load of zero size kernels where as `fill_halo_event!` just returns nothing instead. I've fixed this now and get this from the profile instead:; <img width=""1251"" alt=""Screenshot 2024-09-26 at 12 02 11"" src=""https://github.com/user-attachments/assets/0bf91086-bc12-4a17-ba48-89b9b1c2e7ae"">. In numbers, the original version benchmarks `time_step!` at around 4.074 ms ± 581.472 μs and the new version 2.438 ms ± 501.642 μs",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3792#issuecomment-2376508207:1150,benchmark,benchmarks,1150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3792#issuecomment-2376508207,1,['benchmark'],['benchmarks']
Testability,"Ah so the dispatch on; ```julia; @hascuda @inline cpudata(f::Field{X, Y, Z, <:CuArray}) where {X, Y, Z} =; OffsetArray(Array(parent(f)), f.grid, location(f)); ```; is wrong so it falls back on `cpudata(a) = a`, it should be something like; ```julia; Field{X, Y, Z, <:OffsetArray{T, D, <:CuArray} where {T, D}} where {X, Y, Z}; ```; but still trying to get it to work. Will add `cpudata` tests when I figure it out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/851#issuecomment-672886151:387,test,tests,387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/851#issuecomment-672886151,1,['test'],['tests']
Testability,"Ah sorry I accidently merged yesterday without addressing this point. Dellar (2011) and other literature I've read commonly use f and f̃ (`\tilde{f}`) to refer to `fz` and `fy`, although I think `fz` and `fy` is clearer and we did decide to switch to `fz` and `fy` at some point. Following the same logic, `βz` and `βy` would be both consistent and clearer. _Originally posted by @ali-ramadhan in https://github.com/CliMA/Oceananigans.jl/pull/899#discussion_r483949249_",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/918:299,log,logic,299,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/918,1,['log'],['logic']
Testability,Ah sorry I had the old benchmarks open in a different tab and forgot to copy paste them here: https://github.com/CliMA/Oceananigans.jl/pull/869#issuecomment-682190586. ```; Tartarus: Julia 1.5.0 + Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; 1 thread: 34.60 s; 4 threads: 12.00 s (2.88x); 8 threads: 7.00 s (4.94x); 16 threads: 4.93 s (7.02x); 24 threads: 4.59 s (7.54x); 32 threads: 4.25 s (8.14x); 40 threads: 4.06 s (8.52x); 48 threads: 4.19 s (8.26x) [some of the 48 cores were in use]. Satori: Julia 1.4.1 + IBM Power System AC922 (8335-GTH); 1 thread: 47.20 s; 4 threads: 21.70 s (2.18x); 8 threads: 11.30 s (4.18x); 16 threads: 7.16 s (6.59x); 32 threads: 5.40 s (8.74x); 64 threads: 4.29 s (11.0x); 128 threads: 4.14 s (11.4x); 160 threads: 4.02 s (11.7x); ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1120#issuecomment-732536537:23,benchmark,benchmarks,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1120#issuecomment-732536537,1,['benchmark'],['benchmarks']
Testability,"Ah sorry about that @raphaelouillon! Working from master can be kinda risky and we still need to update the docs... Not sure why `GaussianMask{:x}(grid.Lx, grid.Lx/10)` would error. Probably deserves its own issue and tests. Can you try `GaussianMask{:x}(center=grid.Lx, width=grid.Lx/10)` instead? Seems to work for me on Julia 1.4.2. ```julia; julia> using Oceananigans, Oceananigans.Forcing; julia> grid= RegularCartesianGrid(size=(64, 64, 64), extent=(1, 1, 1)); julia> u_forcing = Relaxation(; rate=1/60, mask=GaussianMask{:x}(center=grid.Lx, width=grid.Lx/10), target=0.1); SimpleForcing{Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,true,Nothing,:tracer,:tracers,Oceananigans.Forcing.RelaxingFunction{Float64,GaussianMask{:x,Float64},Float64}}(Oceananigans.Forcing.RelaxingFunction{Float64,GaussianMask{:x,Float64},Float64}(0.016666666666666666, GaussianMask{:x,Float64}(1.0, 0.1), 0.1), nothing, true); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/789#issuecomment-657651146:218,test,tests,218,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/789#issuecomment-657651146,1,['test'],['tests']
Testability,"Ah sorry, should have read your earlier message. I was able to reproduce the error locally with. ```julia; using Oceananigans, Oceananigans.OutputWriters; grid = RegularRectilinearGrid(size=(1, 1, 1), extent=(1, 1, 1)); model = IncompressibleModel(grid=grid); NetCDFOutputWriter(model, fields(model), filepath=""test.nc"", schedule=IterationInterval(1)); ```. <details><summary>Stacktrace</summary><p>. ```; Error showing value of type NetCDFOutputWriter{NCDatasets.NCDataset{Nothing},Dict{String,Field{X,Y,Z,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},B} where B where Z where Y where X},IterationInterval,FieldSlicer{Colon,Colon,Colon},UnionAll}:; ERROR: MethodError: no method matching short_show(::FieldSlicer{Colon,Colon,Colon}); Closest candidates are:; short_show(::AveragedTimeInterval) at /home/alir/tmp/Oceananigans.jl/src/OutputWriters/windowed_time_average.jl:209; Stacktrace:; [1] show(::IOContext{REPL.Terminals.TTYTerminal}, ::NetCDFOutputWriter{NCDatasets.NCDataset{Nothing},Dict{String,Field{X,Y,Z,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},B} where B where Z where Y where X},IterationInterval,FieldSlicer{Colon,Colon,Colon},UnionAll}) at /home/alir/tmp/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:490; [2] show(::IOContext{REPL.Terminals.TTYTerminal}, ::MIME{Symbol(""text/plain"")}, ::NetCDFOutputWriter{NCDatasets.NCDataset{Nothing},Dict{String,Field{X,Y,Z,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},B} where B where Z ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787496825:311,test,test,311,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787496825,1,['test'],['test']
Testability,Ah thanks for trying. I'll close this PR then. We probably need to design a good test to find the bug(s).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1520#issuecomment-810371371:81,test,test,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1520#issuecomment-810371371,1,['test'],['test']
Testability,Ah the classic (which this test is designed to catch). We also need to bump KA @glwagner if you would do the honors.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2110781904:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3598#issuecomment-2110781904,1,['test'],['test']
Testability,Ah true but there's probably a lot of untested stuff (its not feasible to test every possible model...),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1556#issuecomment-815963620:74,test,test,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1556#issuecomment-815963620,1,['test'],['test']
Testability,"Ah true, we didn't really have unit tests for the `TimeStepWizard` so just added some.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1199#issuecomment-732958058:36,test,tests,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1199#issuecomment-732958058,1,['test'],['tests']
Testability,"Ah wait a second, JLD is still being used in `test_regression.jl` for `JLDOutputWriter` in `run_rayleigh_benard_regression_test`. @glwagner do you want to switch that test to use the JLD2 output writer you added in this PR, or should I revert commit fb90c20c891542e34e601667071c8dc957beb8a1 and we can worry about this later.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/315#issuecomment-515525505:167,test,test,167,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/315#issuecomment-515525505,1,['test'],['test']
Testability,Ah we should probably add @johncmarshall54's suggested test before merging: ensure an ocean stratified along the direction of g remains at rest (up to some tolerance? not sure if it'll be machine precision zero).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783517290:55,test,test,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-783517290,1,['test'],['test']
Testability,"Ah were you in a REPL session with a long history + Revise.jl (including before the change)? In this case, a fresh REPL might have uncovered the issue. But if that wasn't it, then I'm not too sure how the tests passed...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787508035:205,test,tests,205,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787508035,1,['test'],['tests']
Testability,"Ah woops, sorry! Embarrassing mistake on my part. I cleaned up the `examples/` directory recently and accidently moved `examples/utils.jl` to `sandbox/utils.jl`. Thanks for posting this!. Should be fixed now (#255).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/254#issuecomment-497285519:143,sandbox,sandbox,143,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/254#issuecomment-497285519,1,['sandbox'],['sandbox']
Testability,"Ah yeah no that's a good question. Initially it's just because the CPUs on Buildkite (running on our machine) are more powerful than the ones on Travis so we can reduce documentation build times from 30~40 minutes down to ~20 minutes. But we also want to run higher-resolution examples and more of them, which is where more powerful CPUs is helpful, and since we have many cores available we can hopefully run/test/build many examples in parallel (#1053). And yeah maybe at some point we'll also have MPI (+ GPU?) examples which would have to run on more powerful machines that we can probably access through Buildkite.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1051#issuecomment-708042089:410,test,test,410,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1051#issuecomment-708042089,1,['test'],['test']
Testability,Ah you're right! I forgot that `Pkg.test()` did that. I found the docs for it: https://pkgdocs.julialang.org/v1/api/#Pkg.test. I think the `-O0` flag is something Oceananigans.jl does on Buildkite though: https://github.com/CliMA/Oceananigans.jl/blob/main/.buildkite/pipeline.yml,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318407806:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3747#issuecomment-2318407806,2,['test'],['test']
Testability,"Ah! Good to know! Thanks.; Argel Ramírez Reyes. > On Jan 14, 2022, at 3:10 PM, Navid C. Constantinou ***@***.***> wrote:; > ; > ; > I don't understand what is going on with my two PRs that are not passing the tests. Should I close and create them again from the latest master?; > ; > Nope. It's not your fault. We are having issues with the CI.; > ; > —; > Reply to this email directly, view it on GitHub <https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013533717>, or unsubscribe <https://github.com/notifications/unsubscribe-auth/ABVLG6KOMQMGZB2JFMSZFMTUWCUM7ANCNFSM5K45P62A>.; > Triage notifications on the go with GitHub Mobile for iOS <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675> or Android <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>. ; > You are receiving this because you were mentioned.; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013539188:209,test,tests,209,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2130#issuecomment-1013539188,1,['test'],['tests']
Testability,"Ah, I see. I thought it was validated. > Perhaps you can come up with a nice validation experiment that we can use to gain confidence that it works correctly, and then add some documentation?. It's hard for me to come up with a validation experiment for that I think. Are we testing that the viscosities are calculated and added correctly? (Thus a simple analytical example might suffice or an example where we just add two constant diffusities.) Or are we testing that the interface is working?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883511439:275,test,testing,275,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883511439,2,['test'],['testing']
Testability,"Ah, because . https://github.com/CliMA/Oceananigans.jl/blob/ffef32834e4f745567c306e69e6e65a935306e77/test/runtests.jl#L73. I suppose many tests will fail if this line is not included. But we need to run at least some tests with scalar operations disallowed to catch bugs like the one this PR addresses.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1025#issuecomment-704012642:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1025#issuecomment-704012642,3,['test'],"['test', 'tests']"
Testability,"Aha! The deep convection tests are currently marked as 'broken' and therefore ignored. In the meantime, we have a new Rayleigh-Benard regression test that tests most of the same features that were tested by deep convention (and a few additional ones, as well). We probably can't afford too many regression tests (since they are somewhat expensive), and we will want to add ones for new operators / LES closures / etc, so its probably the right decision in the long run to 'nuke' the deep convection test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/220#issuecomment-497103816:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/220#issuecomment-497103816,6,['test'],"['test', 'tested', 'tests']"
Testability,"Aha, yes! By *non-trivial* I meant non-zero, I suppose. Just something to get some dynamics going. The Rayleigh-Benard test uses salinity as a passive tracer (and forces it), so we actually capture passive tracer advection-diffusion with that regression test. By adding salinity-stratification, we ensure the modeled effects of salinity on buoyancy also do not regress.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/220#issuecomment-497115857:119,test,test,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/220#issuecomment-497115857,2,['test'],['test']
Testability,"Ali, good progress. Does this keep a resting fluid stratified in the; direction of gravity at rest? John. On Wed, Dec 2, 2020, 5:41 PM Ali Ramadhan <notifications@github.com> wrote:. > This PR adds experimental support for rotating/tilting the gravity vector.; >; > I'm not even sure if it works properly but I'm opening a draft PR as it; > might be ready to be experimented with? I don't think we can have a; > non-zero gravity component along a periodic direction as the fluid just; > free falls along that dimension and the model blows up.; >; > But here's a plume rising with gravity tilted at 45 degrees; >; > [image: tilted_gravity_plume]; > <https://user-images.githubusercontent.com/20099589/100940093-5ab5d600-34c5-11eb-918e-f574f284f024.gif>; >; > This is an experimental feature since it needs more rigorous testing and; > because full support for tilted gravity may require more work, e.g.; >; > 1. Should AMD use z_dot_g_b now?; > 2. Should ∂x_b return a vector or should it be split up into x_dot_∂x_b,; > etc.? The Leith closure uses ∂x_b.; > 3. We may want to clean up and refactor the implementation, taking; > some suggestions from #1151; > <https://github.com/CliMA/Oceananigans.jl/issues/1151>.; >; > cc @tomchor <https://github.com/tomchor>; >; > Resolves #1151 <https://github.com/CliMA/Oceananigans.jl/issues/1151>; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/CliMA/Oceananigans.jl/pull/1242; > Commit Summary; >; > - Make room for tuple gravity; > - Some `{x,y,z}_dot_g_b`; > - Tilted gravity plume sandbox; >; > File Changes; >; > - *A* sandbox/tilted_gravity_plume.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-9f5abd06fd694cf6f0d35019ea409e07e100a801fbfcd9a2a8d3737801a341b0>; > (53); > - *M* src/Buoyancy/Buoyancy.jl; > <https://github.com/CliMA/Oceananigans.jl/pull/1242/files#diff-55d14f16043b022b6a286fd9881d334208e6b6251d122555d3ede4014ea59e55>; > (10); > - *A* src",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-737549819:819,test,testing,819,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1242#issuecomment-737549819,1,['test'],['testing']
Testability,"Ali, i thought the stretching was sorted now, after the hackathon. Without; stretching the code will have limited use. John. On Wed, Jul 10, 2019, 3:32 PM Ali Ramadhan <notifications@github.com> wrote:. > We agreed this could be a test case against which we can verify the; > implementation of AMD in PR #309; > <https://github.com/climate-machine/Oceananigans.jl/pull/309>, although; > the published results use a slightly modified version of AMD.; >; > They report a number of LES runs, and since we don't have a vertically; > stretched grid, it might be easiest to try and reproduce the Pr = 0.7 case; > which they do with (Nx, Ny, Nz) = (64, 49, 64) grid points [for Ri=0 or; > 0.01, for Ri = 0.04 it's (64, 65, 64)]. I might suggest focusing on the Ri; > = 0 case as they also run a resolved DNS with (Nx, Ny, Nz) = (256, 129,; > 256) against which we might be able to compare (might not be possible,; > depending on vertical grid stretching).; >; > Unfortunately, I don't think we can reproduce their results without a; > vertically stretched grid... If I understand the paper correctly, the grid; > is stretched according to; >; > y_j = h*tanh(Sf*(2*(j-1)/(Ny-1))) / tanh(Sf); >; >; > so for h=1 you get grid spacings of Δy ~ 0.125 away from the wall and Δy ~; > 0.0000035 adjacent to the wall. So a faithful reproduction would need; > 35000+ vertical levels lol.; >; > I don't fully understand how they got their values for the vertical grid; > cell size adjacent to the wall ∆y_w^+, but it seems like if h = 100,000; > then our values agree (they get a spacing of Δy ~ 0.35 adjacent to the; > wall). Either way, the ratio between the thickest and thinnest spacings is; > ~35,000.; >; > Not sure if there's still a way we could compare results in this case; > without a vertically stretched grid...; >; > Absolute worst case scenario, I've been working on an implementation of a; > vertically stretched grid (see PRs #283; > <https://github.com/climate-machine/Oceananigans.jl/pull/283> and #3",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/310#issuecomment-510099706:231,test,test,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/310#issuecomment-510099706,1,['test'],['test']
Testability,"Ali, what are the time-dependent conditions at top? Free slip should be; good: du/dz=0. On Tue, Aug 6, 2019, 6:38 PM Ali Ramadhan <notifications@github.com> wrote:. > Never mind, I rewrote the test to act in the x,y plane with more; > complicated time-dependent boundary conditions at the top and bottom for u; > and v.; >; > It still works and doesn't require changes to the time stepping (which; > have been reverted).; >; > Will add this to the tests.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/pull/336?email_source=notifications&email_token=AKXUEQUPZKYNNCILQG2ECITQDH4PTA5CNFSM4IJ2G5UKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD3WVFWI#issuecomment-518869721>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKXUEQTOLS6ZGXSWBIYRBQDQDH4PTANCNFSM4IJ2G5UA>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518882791:193,test,test,193,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-518882791,2,['test'],"['test', 'tests']"
Testability,"Ali,; changes to; - Poisson (div v etc) and; - diagnosing w from continuity instead of stepping forward the vertical mtm; equation; are major algorithmic changes.; Important to do an extended integration to make sure nothing is broken.; Free convection?; Did the divide or multiply by del_t get sorted out?; John. On Thu, May 23, 2019 at 8:50 PM Ali Ramadhan <notifications@github.com>; wrote:. > Now that the velocity field is truly incompressible in time.; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/climate-machine/Oceananigans.jl/pull/233; > Commit Summary; >; > - Update thermal bubble golden master output.; >; > File Changes; >; > - *M* test/thermal_bubble_golden_master_10.nc; > <https://github.com/climate-machine/Oceananigans.jl/pull/233/files#diff-0>; > (0); >; > Patch Links:; >; > - https://github.com/climate-machine/Oceananigans.jl/pull/233.patch; > - https://github.com/climate-machine/Oceananigans.jl/pull/233.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/pull/233?email_source=notifications&email_token=AKXUEQXNYO4M3IXQPZJTXITPW43ULA5CNFSM4HPLKXNKYY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4GVS43WA>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKXUEQTT25U7Q4S3UQHKFGTPW43ULANCNFSM4HPLKXNA>; > .; >. -- ; ==========================================; John Marshall; Cecil and Ida Green Professor of Oceanography; Massachusetts Institute of Technology; http://oceans.mit.edu/JohnMarshall/; ==========================================",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/233#issuecomment-495690445:726,test,test,726,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/233#issuecomment-495690445,1,['test'],['test']
Testability,"All CPU tests don't even run... It's been happening past few days. Same, e.g., in #1915..",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1917#issuecomment-890587470:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1917#issuecomment-890587470,1,['test'],['tests']
Testability,"All GPU tests pass on Supercloud. I'm opposed to the `minute, hour, day` constants as they're specific to Earth (and are they used anywhere?) but otherwise looks good to merge. We can worry about them later.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/315#issuecomment-515234333:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/315#issuecomment-515234333,1,['test'],['tests']
Testability,All of that said I'm not sure it works. Trying to figure that out. The fact that tests pass is good (at least the changes didn't break anything).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1595#issuecomment-821334387:81,test,tests,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1595#issuecomment-821334387,1,['test'],['tests']
Testability,All tests have passed so will merge!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2598#issuecomment-1146677821:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2598#issuecomment-1146677821,1,['test'],['tests']
Testability,All tests pass except the cleanup cpu. ; i’ll merge.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1119583275:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1119583275,1,['test'],['tests']
Testability,All tests pass here; I don't know what these random ❌'s are...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511#issuecomment-1997096703:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511#issuecomment-1997096703,1,['test'],['tests']
Testability,All tests pass here; ignore the ❌s. See:. https://buildkite.com/clima/oceananigans/builds/15280; https://buildkite.com/clima/oceananigans-distributed/builds/1765,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3528#issuecomment-2029550700:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3528#issuecomment-2029550700,1,['test'],['tests']
Testability,"All tests pass now on the CPU, including regression tests. The issue is that we were not filling in the corners of the halo regions, which are actually used in some operations where, e.g. an interpolation then a difference is used. Thanks @christophernhill and @glwagner!. Once all the GPU tests pass, I'll post some benchmarks and if they look good, I'll merge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/253#issuecomment-498627797:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/253#issuecomment-498627797,4,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"All tests pass on the CPU now, so it's almost ready to merge. Going to make sure all GPU tests pass and I'll clean up the code a bit, especially with more concrete typing and changing `data(::Field)` to return a view.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/250#issuecomment-496892837:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/250#issuecomment-496892837,2,['test'],['tests']
Testability,All tests should pass (see https://buildkite.com/clima/oceananigans-validation-experiments/builds/96) but Tartarus went down so a lot of builds died leading to failing tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-769149023:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223#issuecomment-769149023,2,['test'],['tests']
Testability,All the distrubuted benchmarks pass on my local machine. If the tests pass then I need to resolve conflicts with master. Is the immersed bundary branch that I merged from already merged with master?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-844160093:20,benchmark,benchmarks,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-844160093,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,"All the tests seem to pass but I get two errors. The first error is on a GPU, running `test_shallow_water_diffusion_cosine` on the field `u` using the `ConservativeFormulation()`. When I run this in isolation I get the following error. Any suggestions on what to do here?. ```; [2024/02/27 10:33:43.977] INFO Testing ShallowWaterModel cosine viscous diffusion [u, ConservativeFormulation()]; [2024/02/27 10:33:43.977] WARN The ShallowWaterModel is currently unvalidated, subject to change, and should not be used for scientific research without adequate validation. -@-> /home/fpoulin/Software/Oceananigans.jl/src/Models/ShallowWaterModels/shallow_water_model.jl:129; ERROR: Scalar indexing is disallowed.; Invocation of getindex resulted in scalar indexing of a GPU array.; This is typically caused by calling an iterating implementation of a method.; Such implementations *do not* execute on the GPU, but very slowly on the CPU,; and therefore are only permitted from the REPL for prototyping purposes.; If you did intend to index this array, annotate the caller with @allowscalar.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:35; [2] assertscalar(op::String); @ GPUArraysCore ~/.julia/packages/GPUArraysCore/uOYfN/src/GPUArraysCore.jl:103; [3] getindex(xs::CuArray{Float64, 3, CUDA.Mem.DeviceBuffer}, I::Int64); @ GPUArrays ~/.julia/packages/GPUArrays/EZkix/src/host/indexing.jl:9; [4] getindex; @ ~/.julia/packages/OffsetArrays/0MOrf/src/OffsetArrays.jl:438 [inlined]; [5] _getindex; @ ./abstractarray.jl:1321 [inlined]; [6] getindex; @ ./abstractarray.jl:1288 [inlined]; [7] getindex; @ ~/Software/Oceananigans.jl/src/Fields/field.jl:399 [inlined]; [8] _broadcast_getindex; @ ./broadcast.jl:675 [inlined]; [9] _getindex; @ ./broadcast.jl:705 [inlined]; [10] _broadcast_getindex; @ ./broadcast.jl:681 [inlined]; [11] getindex; @ ./broadcast.jl:636 [inlined]; [12] macro expansion; @ ./broadcast.jl:1004 [inlined]; [13] macro expansion; @ ./simdloop.jl:77 [inlined]; [14] copyto!; @ ./broa",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966839141:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1966839141,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"Allow linear time interpolation between different indices of the field time series triggered by a Float64 (AbstractTime not supported at the moment) index. ; ```julia; julia> fts2 = FieldTimeSeries(""testfile.jld2"", ""u"");. julia> fts2[1]; 17×16×10 Field{Face, Center, Center} on LatitudeLongitudeGrid on CPU; ├── grid: 16×16×10 LatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded} on CPU with 3×3×3 halo and with precomputed metrics; ├── boundary conditions: Nothing; └── data: 23×22×16 OffsetArray(view(::Array{Float64, 4}, :, :, :, 1), -2:20, -2:19, -2:13) with eltype Float64 with indices -2:20×-2:19×-2:13; └── max=2.0, min=2.0, mean=2.0. julia> fts2[2]; 17×16×10 Field{Face, Center, Center} on LatitudeLongitudeGrid on CPU; ├── grid: 16×16×10 LatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded} on CPU with 3×3×3 halo and with precomputed metrics; ├── boundary conditions: Nothing; └── data: 23×22×16 OffsetArray(view(::Array{Float64, 4}, :, :, :, 2), -2:20, -2:19, -2:13) with eltype Float64 with indices -2:20×-2:19×-2:13; └── max=4.0, min=4.0, mean=4.0. julia> fts2[1.35]; 17×16×10 Field{Face, Center, Center} on LatitudeLongitudeGrid on CPU; ├── grid: 16×16×10 LatitudeLongitudeGrid{Float64, Bounded, Bounded, Bounded} on CPU with 3×3×3 halo and with precomputed metrics; ├── boundary conditions: FieldBoundaryConditions; │ └── west: Nothing, east: Nothing, south: ZeroFlux, north: ZeroFlux, bottom: ZeroFlux, top: ZeroFlux, immersed: ZeroFlux; ├── operand: BinaryOperation at (Face, Center, Center); ├── status: time=0.0; └── data: 23×22×16 OffsetArray(::Array{Float64, 3}, -2:20, -2:19, -2:13) with eltype Float64 with indices -2:20×-2:19×-2:13; └── max=2.7, min=2.7, mean=2.7. julia> fts2[1, 1, 1, 13]; 26.0. julia> fts2[1, 1, 1, 14]; 28.0. julia> fts2[1, 1, 1, 13.67]; 27.34; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3236:199,test,testfile,199,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3236,1,['test'],['testfile']
Testability,Allow testing of just a single file,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511:6,test,testing,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511,1,['test'],['testing']
Testability,Allow v1.3 GPU tests to fail on GitLab CI,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/467:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/467,1,['test'],['tests']
Testability,Alright I think `WENO5` is fully working now and good to be merged. Some comments about the contents of this PR:; 1. For now we have a fast and accurate `WENO5` implementation.; 2. We can look at optimizing the `WENO{N}` schemes down the road. They are currently are very experimental since they allocate tons of memory and only define the left-biased interpolants. I'll need to think a bit to get both left- and right-biased interpolants working so I'm proposing merging `weno_nth_order.jl` as-is. It still works and looks good if you run `periodic_advection.jl` with `WENO{N}` with positive velocities.; 3. I added a _temporary_ thermal bubble verification to quickly test whether advection schemes behave responsible near boundaries. We can remove it when we have a better (and more rigorous) test/verification.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-699497422:670,test,test,670,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-699497422,2,['test'],['test']
Testability,"Alright I think our CI is back online: Travis, GitLab, Appveyor, and Docker CI all work again. And I think CodeCov should be more lenient about failing PRs now so we won't get red crosses on most PRs anymore. Tests will take longer to run now though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/872#issuecomment-682092418:209,Test,Tests,209,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/872#issuecomment-682092418,1,['Test'],['Tests']
Testability,"Alright so as suggested I added a test for CFL calculation with a vertically stretched grid. Also refactored where the minΔx functinos go like @glwagner suggested, so if the tests pass I believe this should be good to go. @ali-ramadhan should I just call JuliaRegistrator to register this after it's merged?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799660063:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1467#issuecomment-799660063,2,['test'],"['test', 'tests']"
Testability,"Alright the forced flow test runs now. Explicit time-stepping at Re = 1 is painful though. Next I need to check that it's actually setting up the forced flow solution and do a convergence test. Also to compare the model's pressure against the analytic expression for pressure, not just velocity.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-568271082:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-568271082,2,['test'],['test']
Testability,"Also I think just doing the proposed test with a mix of LES closure and `IsotropicDiffusivity` is just fine. I think we can be reasonably confident the infrastructure works with that one test. I think we should also run the tests for different mixes of `time_discretization`. The infrastructure is supposed to work generally (so it should be valid to use `ExplicitTimeDiscretization` for both, `VerticallyImplicitTimeDiscretization` for both, or a mix). But we can collaborate on expanding the test to those cases once the basic comparison between the two simulations is in place.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-884199479:37,test,test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-884199479,4,['test'],"['test', 'tests']"
Testability,"Also if we are following syntax for `Forcing` and `BoundaryConditions`, we may want to use the ordering `i, j, k, grid, clock, fields, location`, which preserves the logic: . 1. position (i, j, k, grid); 2. time (clock, iteration, time); 3. fields; 4. ""everything else""",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2690#issuecomment-1204110800:166,log,logic,166,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2690#issuecomment-1204110800,1,['log'],['logic']
Testability,"Also reported by @qwert2266 but this is my fault since GitLab CI doesn't seem to be actually running GPU tests... Using something like; ```julia; @inline FT(x, y, z, t, T, p) = - exp(z/p.ℓ) * 2p.K/p.Δz^2 * T; T_forcing = Forcing(FT, field_dependencies=:T, parameters=bc_params); forcing = (T=T_forcing,); ```. causes. ```; ERROR: LoadError: GPU compilation of kernel gpu_calculate_Gu!(Cassette.Context{nametype(CUDACtx),KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(128, 128, 128)},KernelAbstractions.NDIteration.DynamicCheck,Nothing,Nothing,KernelAbstractions.NDIteration.NDRange{3,KernelAbstractions.NDIteration.StaticSize{(8, 8, 128)},KernelAbstractions.NDIteration.StaticSize{(16, 16, 1)},Nothing,Nothing}},Nothing,KernelAbstractions.var""##PassType#253"",Nothing,Cassette.DisableHooks}, typeof(Oceananigans.TimeSteppers.gpu_calculate_Gu!), OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}, RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}, Oceananigans.Advection.CenteredSecondOrder, NonTraditionalFPlane{Float64}, Nothing, AnisotropicDiffusivity{Float64,Float64,Float64,NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}},NamedTuple{(:T,),Tuple{Float64}}}, NamedTuple{(:u, :v, :w),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}},OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, NamedTuple{(:T,),Tuple{OffsetArrays.OffsetArray{Float64,3,CUDA.CuDeviceArray{Float64,3,CUDA.AS.Global}}}}, Nothing, NamedTuple{(:u, :v, :w, :T),Tuple{Oceananigans.Forcings.ContinuousForcing{Oceananigans.Grids.Face,Oceananigans.Grids.Cell,Oceananigans.Grids.Cell,Nothing,0,typeof(Oceananigans.Forcings.zeroforcing),Tuple{}},Oceananigans.Forcings.ContinuousForcing",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1010:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1010,1,['test'],['tests']
Testability,Also shallow water model tests are failing with `type Nothing has no field f`: https://buildkite.com/clima/oceananigans/builds/842#ea16ffb3-252d-4d5a-b46a-a585cedd915e/38-257. I'm guessing the default for `ShallowWaterModel`s is `coriolis = nothing` but the tendency kernels use `coriolis.f`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739937856:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1258#issuecomment-739937856,1,['test'],['tests']
Testability,"Also the original pasted code doesn't fail for me, so it seems we may not be able to reproduce the test on all machines... I ran the code just above and I get. ```julia; julia> @show parent(simulation.model.velocities.u)[1, 1, :]; (parent(simulation.model.velocities.u))[1, 1, :] = [1.9522654528754464, 1.9522654528754464, 1.9522654528754464, 1.9522654528754464]; 4-element Vector{Float64}:; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464; 1.9522654528754464. julia> @test parent(simulation.model.velocities.u)[1, 1, 2] == parent(simulation.model.velocities.u)[1, 1, 3]; Test Passed; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425:99,test,test,99,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308168425,3,"['Test', 'test']","['Test', 'test']"
Testability,"Also to be clear, declaring something as `const`, and then inserting that variable's value into another data structure does not guarantee that the value in the second data structure is fixed. `const` attaches to a name and does not ""propagate"" into other data structures like `ContinuousBoundaryFunction.parameters`. So things like the following are valid:. ```julia; julia> mutable struct Test{T}; a :: T; end. julia> const b = 2; 2. julia> t = Test(b); Test{Int64}(2). julia> t.a = 3; 3. julia> t; Test{Int64}(3); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881686691:390,Test,Test,390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1863#issuecomment-881686691,4,['Test'],['Test']
Testability,"Also to elaborate a bit: file extensions are _always_ arbitrary. The extension is just for people reading the contents of a directory, so they know what kind of data is contained in a file. For example this is fine:. ```bash; $ echo 'println(""Hello world!"")' >> test.txt ; $ julia --project test.txt [11:28:26]; Hello world!; ```. It's just poor communication to put your julia code in files appended with `.txt`. And your text editor won't highlight it correctly 😱 . So I think we really should somehow enforce extensions to help users communicate and love each other.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098308190:262,test,test,262,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2435#issuecomment-1098308190,2,['test'],['test']
Testability,"Also update on correctness / testing: there are now tests that fluxes are correctly imposed:. https://github.com/CliMA/Oceananigans.jl/blob/22739d6a5d410317b0a6fa5cf538ba43dabe16bf/test/test_boundary_conditions_integration.jl#L226-L227. I don't believe there are any simple tests that `Value` / `Gradient` boundary conditions are imposed correctly --- even without an immersed boundary. Instead, we have relied on validation tests to check that. I think it does make sense though to have some tests in that direction... maybe something like a test that 1D couette flow is maintained (for momentum) and that a simple linear tracer gradient is maintained (for tracers). Those would go here: https://github.com/CliMA/Oceananigans.jl/blob/glw/immersed-bcs/test/test_dynamics.jl. Since we don't have that yet we should probably add in another PR. It'd be nice therefore to have a few validation experiments in hand before merging that indicate no-slip ""seems to work"". cc @raphaelouillon",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105451882:29,test,testing,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105451882,8,['test'],"['test', 'testing', 'tests']"
Testability,Also wondering why there isn't a test that catches this? Does it depend on the size of the problem?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2530#issuecomment-1261408639:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2530#issuecomment-1261408639,1,['test'],['test']
Testability,"Also, I noticed there was an error at the very beginning, copied below. ```; TEST_GROUP=shallow_water julia --project -e 'using Pkg; Pkg.test()'; Testing Oceananigans; ┌ Error: Pkg.Resolve.ResolverError(""Unsatisfiable requirements detected for package JLLWrappers [692b3bcd]:\n JLLWrappers [692b3bcd] log:\n ├─possible versions are: [1.0.0-1.0.2, 1.1.0-1.1.4, 1.2.0] or uninstalled\n ├─restricted to versions 1.1.3 by an explicit requirement, leaving only versions 1.1.3\n └─restricted by compatibility requirements with IntelOpenMP_jll [1d5cc7b8] to versions: 1.2.0 — no versions left\n └─IntelOpenMP_jll [1d5cc7b8] log:\n ├─possible versions are: 2018.0.3 or uninstalled\n └─restricted to versions 2018.0.3 by an explicit requirement, leaving only versions 2018.0.3"", nothing); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1326#issuecomment-770853975:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1326#issuecomment-770853975,4,"['Test', 'log', 'test']","['Testing', 'log', 'test']"
Testability,"Also, do we need a type-stable constructor for `ScalarDiffusivity`? Basically all constructors we have are not type stable so I don't see why ScalarDiffusivity should be type-stable. If we want the diffusivity to be mutable (like in the enzyme test) we can pass an array or a field to the `ScalarDiffusivity` instead of reconstructing the diffusivity type.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327810709:244,test,test,244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3732#issuecomment-2327810709,1,['test'],['test']
Testability,"Also, for open boundary conditions, we probably want to have a z-star coordinate and a non-linear free surface to make sure we conserve volume (@jm-c could advise). There is one open PR for ZStar if you want to take a look and test it out (#3411), it is not stale because I am keeping it updated (and should be working), but it's still in a testing phase, and it is still not correct for immersed boundaries.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2312743274:227,test,test,227,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3628#issuecomment-2312743274,2,['test'],"['test', 'testing']"
Testability,"Also, the docs are failing to build with this error:. ```; ERROR: LoadError: IOError: sendfile: no space left on device (ENOSPC); ```. Do we still have a storage problem? I believe these tests run on tartarus, not sverdrup, no?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1762#issuecomment-867678106:187,test,tests,187,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1762#issuecomment-867678106,1,['test'],['tests']
Testability,"Also, this PR should nuke the `compute_w_from_continuity!` function + kernel, and nuke the associated `compute_w_from_continuity` test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/711#issuecomment-690403724:130,test,test,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/711#issuecomment-690403724,1,['test'],['test']
Testability,"Also, this PR shows that tests have passed. But do the tests run the benchmarks? @ali-ramadhan is there a benchmark pipeline and how can we trigger it if so?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866291414:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1746#issuecomment-866291414,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,Also:. * Changes test_examples.jl to spew example file into the build log on error.; * Makes a minor correction to the replace strings for the `ocean_wind_mixing_ and_convection.jl` example.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/748:70,log,log,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/748,1,['log'],['log']
Testability,"Although it seems an easy fix, I'm leaning more towards to dropping support for v1.8 since we don't test there any more. Even if this bug can be alleviated, who knows whether something else is broken (or even silently broken, without even spitting out an error).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1637026804:100,test,test,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1637026804,1,['test'],['test']
Testability,"Although the new `test_netcdf_file_splitting` is working, I'm currently having issues in with the `test_netcdf_time_averaging`, where this test fails.; https://github.com/CliMA/Oceananigans.jl/blob/3bb62a647a55a7dadf5f37331321bf0020a78c4d/test/test_netcdf_output_writer.jl#L683; I've tested the PR & the `main` upstream branch in my computer and I have the same error:; ```; Stacktrace:; [1] macro expansion; @ ~/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/Test/src/Test.jl:672 [inlined]; [2] test_netcdf_time_averaging(arch::CPU); @ Main ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:727; [3] macro expansion; @ ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:889 [inlined]; [4] macro expansion; @ ~/.julia/juliaup/julia-1.10.2+0.aarch64.apple.darwin14/share/julia/stdlib/v1.10/Test/src/Test.jl:1577 [inlined]; [5] top-level scope; @ ~/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:880; NetCDF output writer [CPU]: Test Failed at /Users/jmtzmo/github/Oceananigans.jl/test/test_netcdf_output_writer.jl:727; Expression: all(isapprox.((ds[""c2""])[:, n + 1], c̄2(averaging_times), rtol = rtol)); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3506#issuecomment-1994369830:139,test,test,139,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3506#issuecomment-1994369830,12,"['Test', 'test']","['Test', 'test', 'tested']"
Testability,"Among the packages that are loaded in `dependencies_for_runtests.jl` are `DataDeps` and `TimeDate`, which aren't part of Oceananigans dependencies. So I always have to either install those packages or comment out those lines when running tests locally. (Unless there's an easier solution that I'm not aware of!). While this isn't a huge hassle, it does make it less likely (at least for me) to test my changes locally, so I'm attempting this slight change in the loading of packages where only standard Julia packages and Oceananigans dependencies are loaded in `dependencies_for_runtests.jl` and the rest are loaded only in the scripts where they used. Hopefully this should make testing changes locally easier for everyone.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2715:238,test,tests,238,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2715,3,['test'],"['test', 'testing', 'tests']"
Testability,"An easier course of action would be to forget about performance at first and just fill halos every substep.; This will be quite inefficient but will allow us to test open boundary conditions for the hydrostatic model and validate them first. There is an implementation of a split explicit free surface solver that does not require special operators (specifically for a multi region grid) in #3596 ; https://github.com/CliMA/Oceananigans.jl/blob/a6e9a465aa9528b5b3afd49737310e710e4681b0/src/MultiRegion/multi_region_split_explicit_free_surface.jl#L130-L170. We could adapt this implementation for normal grids by implementing a keyword argument in the `SpliExplicitFreeSurface` constructor. Something like the `extended_halos` that is mentioned here; https://github.com/CliMA/Oceananigans.jl/blob/a6e9a465aa9528b5b3afd49737310e710e4681b0/src/MultiRegion/multi_region_split_explicit_free_surface.jl#L19-L28. For serial grids, `extended_halos` is not the correct argument, though, because we do not extend halos (we do that only on distributed and multi region grids), so maybe something like `use_boundary_aware_operators.` . Once the numerics have been settled we can adapt the open boundary condition implementation to the special operators.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3828#issuecomment-2399186268:161,test,test,161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3828#issuecomment-2399186268,1,['test'],['test']
Testability,And CUDA runtime wasn't found in that PR: https://buildkite.com/clima/oceananigans-distributed/builds/4038#0192c76f-d6ea-4e48-a7fd-f1b22df9f89f/189-1063. so we just need to look at the PR before that... PS @Sbozzolo we realized there was a problem with the way we ran the tests that would allow the GPU tests to pass even if they didn't run on GPU,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455770953:272,test,tests,272,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3897#issuecomment-2455770953,2,['test'],['tests']
Testability,And all tests pass! Great! Ignore my messages!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091221383:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091221383,1,['test'],['tests']
Testability,"And just to provide more context, the reason for doing this is so that regression test data doesn't blow up the git repo. This is especially important here because we are going to make big changes to `HydrostaticFreeSurfaceModel`...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1373#issuecomment-849929606:82,test,test,82,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1373#issuecomment-849929606,1,['test'],['test']
Testability,"And note that we only really need a unit test to merge this, same for many things. Correctness is a high bar and it's ok if we can't come up wtih someone right away. Sometimes we don't really have a way to do correctness and our best option is something like a regression test (eg we verified it worked at one point, so we just make sure that it keeps returning that same result). . One way to go partway towards functional test but not all the way to ""correctness"" is to simply test that a simple set up returns a different result when closure fluxes are included vs not (for example).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433794044:41,test,test,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3646#issuecomment-2433794044,4,['test'],['test']
Testability,And to do those tests on the GPU we need `CUDA.@allowscalar`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091014806:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3573#issuecomment-2091014806,1,['test'],['tests']
Testability,Another attitude is to merge this and start a new PR for a test...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-897173043:59,test,test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-897173043,1,['test'],['test']
Testability,Another idea: check that the grid architecture and model architecture match to avoid issues like the test failure in #1467.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1453#issuecomment-799734876:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1453#issuecomment-799734876,1,['test'],['test']
Testability,"Another issue is that I believe one cannot embed `AveragedField`s into `AbstractOperations` on the GPU, despite that we have developed the abstraction and machinery so that everything does work as expected on the CPU. Embedding `AveragedField`s in `AbstractOperations` is needed to calculate things like turbulent kinetic energy and so is important for LES. Currently there's a custom field `TurbulentKineticEnergy` in the `LESbrary.jl` for this purpose:. https://github.com/CliMA/LESbrary.jl/blob/master/src/TurbulenceStatistics/turbulent_kinetic_energy.jl. It might be good to come up with a list of `AbstractOperations` that we would like to work on the GPU eventually, and then write tests for them and add them in a PR. We can then `@test_skip` them until either we figure out how to solve the issue or, perhaps, the julia compiler changes in a way that makes the tests pass... :-D",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-738298190:688,test,tests,688,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-738298190,2,['test'],['tests']
Testability,"Another possibility is to write some tests using `HydrostaticFreeSurfaceModel` with `ExplicitFreeSurface`, which is entirely explicit and thus requires only halo filling via MPI (with no PencilArrays dependency)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1105468942:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1105468942,1,['test'],['tests']
Testability,Another test that reveals a problem with non-separated pressure is a simple horizontal wall in a 2D setup.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3677#issuecomment-2270149062:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3677#issuecomment-2270149062,1,['test'],['test']
Testability,"Another thing I noticed is that `@inbounds` is used in places where it can't really be guaranteed, like *inside* [difference operator functions](https://github.com/climate-machine/Oceananigans.jl/blob/master/src/operators/ops_regular_cartesian_grid.jl). I couldn't figure out how to test this, but I wonder if `@inbounds` propagates to all of the functions that are called inside its scope (is that the right language)? . Specifically I'm referring to patterns like the [RHS calculation for u](https://github.com/climate-machine/Oceananigans.jl/blob/2220ee62685a0570d4dec944f148634a539e9220/src/time_steppers.jl#L160), which is `@inbounds`, but subsequently calls operators like [this](https://github.com/climate-machine/Oceananigans.jl/blob/2220ee62685a0570d4dec944f148634a539e9220/src/operators/ops_regular_cartesian_grid.jl#L71) that are *also* have `@inbounds`. In other words, we only need *one* `@inbounds` statement; we don't need multiple nested `@inbounds` statements. @vchuravy can you confirm/deny this? . A separate issue with `@inbounds` in places where it can't be guaranteed is that if users write functions / analysis tools using those operators, they might screw up and give out-of-bounds indices to functions that have guaranteed `@inbounds` (and in consequence get mysterious segfaults?) It seems the natural place for `@inbounds` is in the scope of a loop.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/163#issuecomment-479829199:283,test,test,283,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/163#issuecomment-479829199,1,['test'],['test']
Testability,Any idea why [distributed tests](https://buildkite.com/clima/oceananigans/builds/6805#646493ef-a91c-418c-b51f-4cafeced8ff1) fail?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1103448537:26,test,tests,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2447#issuecomment-1103448537,1,['test'],['tests']
Testability,Any idea why the test isn't passing?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1875#issuecomment-883025275:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1875#issuecomment-883025275,1,['test'],['test']
Testability,Any idea why this test might be failing in this PR?. ```; HeptadiagonalIterativeSolver: Test Failed at /var/lib/buildkite-agent/builds/tartarus-5/clima/oceananigans/test/test_matrix_poisson_solver.jl:104;   | Expression: all(interior(∇²ϕ_solution) .≈ interior(∇²ϕ));  ```,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2570#issuecomment-1135811177:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2570#issuecomment-1135811177,3,"['Test', 'test']","['Test', 'test']"
Testability,Any insight to why [shallow water tests fail on gpu](https://buildkite.com/clima/oceananigans/builds/3153#f8f52f7d-7e1d-4d88-9a0b-5b1c18b4d90b)?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-873658862:34,test,tests,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1821#issuecomment-873658862,1,['test'],['tests']
Testability,Any suggestion as to where the tests would go?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883757223:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1879#issuecomment-883757223,1,['test'],['tests']
Testability,Any test? Only if it's easy... Otherwise forget it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2651#issuecomment-1183927563:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2651#issuecomment-1183927563,1,['test'],['test']
Testability,Anything I'm missing? We can convert a few examples to use `Flat`. We can also add a few unit tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/902#issuecomment-685996102:94,test,tests,94,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/902#issuecomment-685996102,1,['test'],['tests']
Testability,"Anyways, I don't quite see it but that could be the issue. So we can try replacing. ```julia; # Reset the ""previous"" interval time, subtracting a sliver that presents overshoot from accumulating. ; wta.schedule.previous_interval_stop_time = model.clock.time - rem(model.clock.time, wta.schedule.interval) ; ```. with. ```julia; if model.clock.time == wta.schedule.previous_interval_stop_time + wta.schedule.interval; wta.schedule.previous_interval_stop_time = model.clock.time; else; # Reset the ""previous"" interval time, subtracting a sliver that presents overshoot from accumulating. ; wta.schedule.previous_interval_stop_time = model.clock.time - rem(model.clock.time, wta.schedule.interval); end; ```. Another possible solution is to have a different algorithm in which time-averaging is ""finalized"" when output is retrieved. Retrieval occurs here:. https://github.com/CliMA/Oceananigans.jl/blob/81db22f4a26396142e8cd5b5a4c50c75790c1d50/src/OutputWriters/windowed_time_average.jl#L197-L205. And we could set `collecting=false` and reset `wta_schedule.previous_interval_stop_time` there. The only downside is that bad things might happen if for some reason the `WindowedTimeAverage` is called in a callback (for logging or something) apart from when output is being asked for (since that would restart time averaging when not desired...). These issues do seem to motivate figuring out how to record the averaging window / iterations somehow when saving `WindowedTimeAverage` to disk.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-747093904:1215,log,logging,1215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1274#issuecomment-747093904,1,['log'],['logging']
Testability,"Apologies for not participating in this issue and for possibly being the cause of the issue via sending/receiving views... If we have to send contiguous data we could just modify the [`underlying_*_boundary` functions](https://github.com/CliMA/Oceananigans.jl/blob/master/src/Distributed/distributed_utils.jl#L83-L99) to convert the view into a contiguous array. Receiving is done straight into the halo view (a trick(?) that seems to work nicely on the CPU), so we would probably need to create a new buffer of the right size to receive into and then copy it into the halo: https://github.com/CliMA/Oceananigans.jl/blob/master/src/Distributed/halo_communication.jl#L162-L166. Also not sure if relevant but I remember @hennyg888 and @francispoulin suggesting that placing an `MPI.Barrier()` at the end of each time step helped with a certain scaling benchmark?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-887833700:850,benchmark,benchmark,850,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-887833700,1,['benchmark'],['benchmark']
Testability,"Apologies for the late reply, I got distracted and accidentally forgot to respond. I tested out the fix this morning/early afternoon and I keep getting an error along the lines of what I have below. Did I compile the branch of oceananigans incorrectly?. ```julia; wireless-10-104-201-207:BottomBoundaryLayer loganknudsen$ julia ""/Users/loganknudsen/Documents/GitHub/BottomBoundaryLayer/PSI_Base_Test.jl""; ┌ Warning: Overwriting existing ./psi_base_ocng_test.nc.; └ @ Oceananigans.OutputWriters ~/.julia/packages/Oceananigans/Feeqx/src/OutputWriters/netcdf_output_writer.jl:359; ERROR: LoadError: NetCDF error: Permission denied (NetCDF error code: 13); Stacktrace:; [1] check; @ ~/.julia/packages/NCDatasets/st9Jz/src/errorhandling.jl:25 [inlined]; [2] nc_create(path::String, cmode::UInt16); @ NCDatasets ~/.julia/packages/NCDatasets/st9Jz/src/netcdf_c.jl:255; [3] NCDatasets.NCDataset(filename::String, mode::String; format::Symbol, share::Bool, diskless::Bool, persist::Bool, memory::Nothing, attrib::Dict{Any, Any}); @ NCDatasets ~/.julia/packages/NCDatasets/st9Jz/src/dataset.jl:236; [4] NCDataset; @ ~/.julia/packages/NCDatasets/st9Jz/src/dataset.jl:177 [inlined]; [5] NetCDFOutputWriter(model::NonhydrostaticModel{Oceananigans.TimeSteppers.RungeKutta3TimeStepper{Float64, NamedTuple{(:u, :v, :w, :b), Tuple{Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Flat, Periodic, Bounded, Float64, Float64, Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, CPU}, Tuple{Colon, Colon, Colon}, OffsetArrays.OffsetArray{Float64, 3, Array{Float64, 3}}, Float64, FieldBoundaryConditions{Nothing, Nothing, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{O",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747397784:85,test,tested,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228#issuecomment-1747397784,3,"['log', 'test']","['loganknudsen', 'tested']"
Testability,"Apparently I don't know how to run tests locally, because they all passed here without problems. @ali-ramadhan Do you have any reference that I can check that shows how to run tests locally? In the meantime I'll do my best to fix this without local testing I guess.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766179890:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1314#issuecomment-766179890,3,['test'],"['testing', 'tests']"
Testability,Apparently all the tests in my PR are passing now. Here's a question: I left `CellField` alone in this PR. Should I also rename it to `CenterField` for consistency?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-766199966:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/414#issuecomment-766199966,1,['test'],['tests']
Testability,"Apparently it's 4~5x faster to do operations on `Field.data` instead of `Field` even thought I've inlined `getindex` and `setindex!`, not that it changes things much.; ```julia; @inline getindex(f::Field, inds...) = getindex(f.data, inds...); @inline setindex!(f::Field, v, inds...) = setindex!(f.data, v, inds...); ```; Probably just missing something simple but for now I'll use `Field.data`. Would be nice to figure this out though. ```julia; g = RegularCartesianGrid((100, 100, 100), (10, 10, 10)); f1, f2 = CellField(g), FaceFieldX(g). function δx1!(g::RegularCartesianGrid, f::CellField, δxf::FaceField); for k in 1:g.Nz, j in 1:g.Ny, i in 1:g.Nx; @inbounds δxf[i, j, k] = f[i, j, k] - f[decmod1(i, g.Nx), j, k]; end; end; ```; ```; julia> @benchmark δx1!(g, f1, f2); BenchmarkTools.Trial:; memory estimate: 0 bytes; allocs estimate: 0; --------------; minimum time: 4.542 ms (0.00% GC); median time: 5.007 ms (0.00% GC); mean time: 5.120 ms (0.00% GC); maximum time: 11.010 ms (0.00% GC); --------------; samples: 975; evals/sample: 1; ```; ```julia; function δx2!(g::RegularCartesianGrid, f::CellField, δxf::FaceField); for k in 1:g.Nz, j in 1:g.Ny, i in 1:g.Nx; @inbounds δxf.data[i, j, k] = f.data[i, j, k] - f.data[decmod1(i, g.Nx), j, k]; end; end; ```; ```; julia> @benchmark δx2!(g, f2, f1); BenchmarkTools.Trial:; memory estimate: 0 bytes; allocs estimate: 0; --------------; minimum time: 1.099 ms (0.00% GC); median time: 1.198 ms (0.00% GC); mean time: 1.253 ms (0.00% GC); maximum time: 2.679 ms (0.00% GC); --------------; samples: 3967; evals/sample: 1; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/13:747,benchmark,benchmark,747,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/13,4,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"Apparently the figures in the [Convergence tests](; https://clima.github.io/OceananigansDocumentation/latest/validation/convergence_tests/) and Stratified Couette flow sections of the documentation aren't showing. I suspect it's a broken link or something (probably very easy to fix). Sorry if you guys are aware of this already, but I couldn't find any issue about it. Cheer!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1212:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1212,1,['test'],['tests']
Testability,"Apparently the new syntax does help avoid `@allowscalar` instances, and things do compile locally for me, but the errors on buildkite are still [there](https://buildkite.com/clima/oceananigans/builds/9727#01860b25-0d9a-419e-bd01-3ec11bcb8c6b/38-603):. ```; Computations with Averaged Fields [GPU, RectilinearGrid]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-13/clima/oceananigans/test/test_computed_field.jl:583; --;   | Expression: all(interior(tke_yz) .== 9 / 2); ```. Any ideas on what might be the cause of the differences between builkite and my local server? If someone could also run one of the failing tests on a GPU locally and see if they get the same errors that buildkite is throwing, that would be helpful.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063:315,Test,Test,315,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1414131063,3,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"Apparently the result when running simulations is indeed that compilation does not happen after the 5th time. So I agree that this may not be a huge issue. Although I should mention, it seems that calculation of `AveragedField` is still slower than that of `WindowedSpatialAverage`. I haven't tested this for huge grids yet but for a 128^2 grid the calculation (as per my first example in this issue) goes from around 400 μs to around 60 ms. For a 512^2 grid it goes from around 2.5 ms to 950 ms. Not sure if this is expected.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-960312040:293,test,tested,293,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2024#issuecomment-960312040,1,['test'],['tested']
Testability,Are the distributed GPU tests actually running?. I see this:. https://buildkite.com/clima/oceananigans-distributed/builds/4081#0192d4e4-191f-48e1-a943-d82377d8a125/189-1099. And then subsequently it looks like the architecture is `Distributed{CPU}`. We need a better way to specify the test architectures?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443351999:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443351999,2,['test'],"['test', 'tests']"
Testability,Are there any existing tests @simone-silvestri @jagoosw ?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1714613575:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259#issuecomment-1714613575,1,['test'],['tests']
Testability,Are there any tests for `xnodes` with stretched grids?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1503682098:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1503682098,1,['test'],['tests']
Testability,Are there any tests for distributed hydrostatic models?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1749669791:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3314#issuecomment-1749669791,1,['test'],['tests']
Testability,"Are these methods covered/used by the tests, do you know?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3165#issuecomment-1619948370:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3165#issuecomment-1619948370,1,['test'],['tests']
Testability,"Are users required to use 1.8, or just the tests?. I agree it's best to stay close to the latest especially at this still chaotic stage.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1281151236:43,test,tests,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1281151236,1,['test'],['tests']
Testability,Are we still skipping this test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/732#issuecomment-663168207:27,test,test,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/732#issuecomment-663168207,1,['test'],['test']
Testability,"Are we sure that `VectorInvariant` works with `Flat` horizontal dimensions? @simone-silvestri?. Still, regardless of that, I also agree w @jagoosw that locally the tests pass for me as well so I don't understand why they fail on CPU on tartarus! Mystery!. On tartarus, seems like the issue comes from. https://github.com/CliMA/Oceananigans.jl/blob/84bc3c3c5438cda2e8f188a0e1a839ae7800b994/src/Operators/spacings_and_areas_and_volumes.jl#L206. which fails when both x and y dimensions are Flat on a LatLonGrid. What's even the point of defining a column grid on lat-lon grid??",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630161708:164,test,tests,164,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630161708,1,['test'],['tests']
Testability,Are you planning to open targeted issues for (some of) the tests discussed here?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-478095540:59,test,tests,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-478095540,1,['test'],['tests']
Testability,"Array conversions when fetching output trigger `copyto!` and then `getindex`, which is in turn disallowed. This PR fixes an issue with output on the GPU on master. I'm a bit perplexed why the `jld2_field_output` test didn't pick this up.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1025:212,test,test,212,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1025,1,['test'],['test']
Testability,"As I said, please post your slurp script and other environment options. It is impossible to debug otherwise. I have an annotated slurp script here https://github.com/CliMA/ClimateMachine.jl/wiki/Satori-Cluster which is what I used a while back for GPU scaling tests. A mossconfigured MPI can easily manifest itself as scaling this poor.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885291310:260,test,tests,260,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1882#issuecomment-885291310,1,['test'],['tests']
Testability,As a kind of absurd but effective hack we could _only_ test on the GPU...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1034#issuecomment-711051588:55,test,test,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1034#issuecomment-711051588,1,['test'],['test']
Testability,"As a side note we should run benchmarks on GPUs like the P400 and P6000, since I think they may actually benefit from `Float32` (unlike calculations on Volta chips, which have plenty of double precision capability).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-727016117:29,benchmark,benchmarks,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1179#issuecomment-727016117,1,['benchmark'],['benchmarks']
Testability,"As a side note: I started working on a PR that adds tests to make sure we can write output from all grids, which would also help with #1429. But yeah, I don't think it'll be a quick PR since the grids all use different property names... Sounds like the variable names used in NetCDF might be an issue? I've had no problems with unicode variable names in NetCDF but I don't use IPython...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1466#issuecomment-799818546:52,test,tests,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1466#issuecomment-799818546,1,['test'],['tests']
Testability,"As a side note: I think it's ok to include ""shared utils"" at the top level within a submodule prior to importing logically-distinct functionality contained in separate files. Sometimes this can improve code-readability if there are a small number of utils. The need for a separate ""utils.jl"" file should decrease when the code structure is more modular and separated into logical subunits, I think. We can also have single-file submodules, as in Documenter.jl (I think their file structure looks very sane and manageable):. https://github.com/JuliaDocs/Documenter.jl/tree/master/src. There's still a bit of work we need to do to understand inter-submodule dependencies; once that's sorted out I think the top-level Oceananigans.jl file will clean up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/512#issuecomment-547404935:113,log,logically-distinct,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/512#issuecomment-547404935,2,['log'],"['logical', 'logically-distinct']"
Testability,"As discussed in https://github.com/CliMA/Oceananigans.jl/discussions/3177#discussioncomment-6448740 I see two solutions: either drop support for v1.8 or prior with a v1.9 compat entry, or add something like; ```Julia; if VERSION < v""1.8""; ...; else; ...; end; ```. Adding the compat requirement is safer since tests only run on v1.9. . On the other hand, in this case, allowing backwards compatibility might be just a few lines like above.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1636223845:310,test,tests,310,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3184#issuecomment-1636223845,1,['test'],['tests']
Testability,As far as I can tell the current issue with the distributed tests is that they have a different `fill_halo_regions!` and so currently don't fill the open halos.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2154666303:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2154666303,1,['test'],['tests']
Testability,"As far as I can tell the main purpose of `CLIMAParameters` is to provide a central / global place to specify common parameters found in different model components. For example, `HydrostaticFreeSurfaceModel` has a `gravitational_acceleration` for both `buoyancy` and `free_surface`. On the other hand, it turns out that it's sometimes convenient for these to be different for testing and experimentation, which may impose additional requirements on `CLIMAParameters` that were not part of the original design. One possible solution might be to build a global `CLIMAParameters` instance in `Oceananigans` that's referenced in model constructors for default parameter values (but we can still let users change parameters when instantiating various model components if they want). A possible goal of CLIMAParameters is to _restrict_ the user interface so that users ""can't mess up""; eg users can't accidentally set `gravitational_acceleration` in `free_surface` and erroneously expect that this also changes `gravitational_acceleration` for buoyancy. Food for thought...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1427#issuecomment-791482111:375,test,testing,375,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1427#issuecomment-791482111,1,['test'],['testing']
Testability,"As for issues with other topologies, we could possibly use the ""forced flow, fixed-slip"" convergence test with 2D slices oriented in various directions to uncover issues:. https://github.com/CliMA/Oceananigans.jl/blob/master/validation/convergence_tests/src/ForcedFlowFixedSlip.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-878312638:101,test,test,101,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-878312638,1,['test'],['test']
Testability,"As for the `with_halo`, I am testing things out in REPL. Below you see that I have `with_halo` defined already but when I try the line you suggested it says that the function must be explicitly exported to be extended. Sorry that my function defining chops are not skilled enough to figure this out. ```; julia> methods(with_halo); # 2 methods for generic function ""with_halo"":; [1] with_halo(new_halo, old_grid::RegularRectilinearGrid) in Oceananigans.Grids at /home/fpoulin/software/Oceananigans.jl/src/Grids/regular_rectilinear_grid.jl:218; [2] with_halo(new_halo, old_grid::VerticallyStretchedRectilinearGrid) in Oceananigans.Grids at /home/fpoulin/software/Oceananigans.jl/src/Grids/vertically_stretched_rectilinear_grid.jl:242. julia> with_halo(halo, ibg::ImmersedBoundaryGrid) = ImmersedBoundaryGrid(with_halo(halo, ibg.grid), ibg.immersed_boundary); ERROR: error in method definition: function Grids.with_halo must be explicitly imported to be extended; Stacktrace:; [1] top-level scope; @ none:0; [2] top-level scope; @ REPL[40]:1; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-844329017:29,test,testing,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1663#issuecomment-844329017,1,['test'],['testing']
Testability,"As noted in my description, I did write a minimal API (a few keyword constructors, and also one convenience function to instantiate `ModelBoundaryConditions` with one non-default boundary condition. I use the API in the tests. It does need documentation. A better API could perhaps introduce a `BoundaryConditionsWizard` type that allows users to use the syntax. ```julia; wizard = BoundaryConditionsWizard(); wizard.T.z.top = BoundaryCondition(Flux, 1.0). # some time later... model = Model(; boundary_conditions=wizard); ```. `BoundaryConditionsWizard` would just be a 100% abstract implementation of `ModelBoundaryConditions` (basically, what we had before). Then we could write a function that converts a `Wizard` to real boundary conditions with concrete types in the `Model` constructor. . That's one idea. @vchuravy, any other ideas?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/263#issuecomment-499280002:220,test,tests,220,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/263#issuecomment-499280002,1,['test'],['tests']
Testability,"As of right now, as far as I can tell, `GeneralFPlane` is working and `NonTraditionalFPlane` got dumped. I'd like to get some feedback before I start changing the docs if that's okay. The interface I implemented is a bit simpler than `NonTraditionalFPlane` but I think that's okay. I'd like some feedback there if possible. Arguments now are:. - `coriolis_frequency` (instead of simply `f`). Defaults to `2Ω`; - `rotation_axis` (defaults to `ZDirection`); - `latitude` for convenience (which overwrites `rotation_axis`). I'm a bit unsure if I should keep this one. Maybe we should keep it simple since anyone can figure out `f` based on latitude easily. Questions:. - Should we keep the original `FPlane`? I think we could scrap it and only keep this one (which would then be renamed `FPlane`); - I didn't see any tests that `FPlane` or any other Coriolis implementation is dynamically correct. Should we implement a test to see if our rotation implementations are actually doing what they're supposed to?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887056354:814,test,tests,814,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1892#issuecomment-887056354,2,['test'],"['test', 'tests']"
Testability,"As per the example below, this PR seems to resolve https://github.com/CliMA/Oceananigans.jl/issues/3593. ```julia; using Oceananigans. grid_base = RectilinearGrid(topology = (Bounded, Periodic, Bounded), size = (16, 20, 4), extent = (800, 1000, 100),); ; @inline east_wall(x, y, z) = x > 400; grid = ImmersedBoundaryGrid(grid_base, GridFittedBoundary(east_wall)). model = NonhydrostaticModel(grid = grid, timestepper = :RungeKutta3, buoyancy = BuoyancyTracer(), tracers = :b,). N² = 6e-6; b∞(x, y, z) = N² * z; set!(model, b=b∞); ; simulation = Simulation(model, Δt=25, stop_time=1e4,). using Statistics: std; using Printf; progress_message(sim) = @printf(""Iteration: %04d, time: %s, iteration×Δt: %s, std(pNHS) = %.2e\n"",; iteration(sim), sim.model.clock.time, iteration(sim) * sim.Δt, std(model.pressures.pNHS)); add_callback!(simulation, progress_message, IterationInterval(1)). run!(simulation); ```. printing, at the last few time-steps:. ```; Iteration: 0397, time: 9925.0, iteration×Δt: 9925.0, std(pNHS) = 5.99e-03; Iteration: 0398, time: 9950.0, iteration×Δt: 9950.0, std(pNHS) = 5.99e-03; Iteration: 0399, time: 9975.0, iteration×Δt: 9975.0, std(pNHS) = 5.99e-03; [ Info: Simulation is stopping after running for 11.645 seconds.; [ Info: Simulation time 2.778 hours equals or exceeds stop time 2.778 hours.; Iteration: 0400, time: 10000.0, iteration×Δt: 10000.0, std(pNHS) = 5.99e-03; ```. I haven't been able to test it yet with more complex simulations though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3617#issuecomment-2156199193:1423,test,test,1423,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3617#issuecomment-2156199193,1,['test'],['test']
Testability,"As pointed in ny little comment, when we are happy with code changes, we need; to update the reference output (I think it's just few netcdf files) to get; the regression test to pass. On Thu, May 09, 2019 at 09:39:48PM +0000, Gregory L. Wagner wrote:; > This looks good now. @jm-c, should we merge as-is, or fix the golden master test first?; > ; > -- ; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub:; > https://github.com/climate-machine/Oceananigans.jl/pull/215#issuecomment-491078615",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-491336096:170,test,test,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-491336096,2,['test'],['test']
Testability,"As soon as tests pass I'll merge and then we can continue in #3384, how does that sound @BrodiePearson?. You should have rights to push commits there now! I sent you an invite for project collaborator.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3392#issuecomment-1813228038:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3392#issuecomment-1813228038,1,['test'],['tests']
Testability,"As the diff shows, this PR reconstructs buoyancy at the location it's needed. For example, `x_dot_g_b` must reconstruct the buoyancy perturbation, which is located at tracer locations `ccc`, at the location `fcc`. . Similarly, `z_dot_g_b` should be reconstructed at `ccf` (the location of vertical velocity). Note that we _also_ do this reconstructed when computing the hydrostatic pressure integral, therefore:. $$ p_h = \int^0_z \bar b^z \text{ } dz $$. where $\overline{()}^z$ indicates a reconstruction in $z$. Previously, we were assuming within the hydrsotatic pressure integral that `z_dot_g_b` returned at `ccc`. The first commit on this PR changed the reconstruction for `z_dot_g_b` so it returns at `ccf`. However, making this change also requires ""undoing"" the reconstruction in the hyrostatic pressure integral, which previously assumed that `z_dot_g_b` returned at `ccc`. With both changes, the regression tests should pass _and_ tilted gravity should be fixed. Hope that clears things up.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721:919,test,tests,919,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3079#issuecomment-1518051721,1,['test'],['tests']
Testability,"As well as more general decompositions, and greatly expand the docstring. Much help was provided by @jipolanco on this journey. Note right now we depend on `PencilFFTs#master` but hopefully that'll change with https://github.com/jipolanco/PencilFFTs.jl/pull/47. This required a bit of thinking and logic about pencil decompositions. What I learned is hopefully well-summarized in the docstring:. ```; """"""; DistributedFFTBasedPoissonSolver(global_grid, local_grid). Return a FFT-based solver for the Poisson equation,. ∇²x = b. for `MultiArch`itectures. Supported configurations; ========================. We support two ""modes"":. 1. Two-dimensional decompositions in (x, y) for problems with either; `Nz > Rx` or `Nz > Ry` (therefore, three-dimensional). 2. One-dimensional decompositions in either x or y for problems that are; either two-dimensional, or have limited dimensionality in z. Above, `Nz = size(global_grid, 3)` and `Rx, Ry, Rz = architecture(local_grid).ranks`. Other configurations that are decomposed in (x, y) but have too few Nz,; or any configuration decomposed in z, are not supported. Algorithm for two-dimensional decompositions; ============================================. When decomposition in two-dimensions for a three-dimensional problem,; there are three forward transforms, three backward transforms,; and 4 transpositions requiring MPI communication. In the following schematic, the first; dimension is always the local dimension. The following algorithm requires that `Nz > Rx`,; where `Nz` is the number of vertical cells and `Rx` is the number of ranks in x.; For `Nz < Rx` but `Nz > Ry`, a similar algorithm applies with x and y swapped:. 1. `first(storage)` is initialized with layout (z, x, y).; 2. Transform along z.; 3 Transpose + communicate to storage[2] in layout (x, z, y),; which is distributed into `(Rx, Ry)` processes in (z, y).; 4. Transform along x.; 5 Transpose + communicate to last(storage) in layout (y, x, z),; which is distributed into `(Rx, Ry)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2536:298,log,logic,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2536,1,['log'],['logic']
Testability,Assert that the topology is Flat in the vertical and also have a test that `Periodic` or `Bounded` in the vertical creates an error.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662:0,Assert,Assert,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662,2,"['Assert', 'test']","['Assert', 'test']"
Testability,"Assuming the tests pass, are there still tests to be done or is this ready to merge/use?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1125165195:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2306#issuecomment-1125165195,2,['test'],['tests']
Testability,"At 128^3 we reproduce published LES results by Vreugdenhil & Taylor (2018) and DNS results by Zhou, Taylor, & Caulfield (2017) pretty closely so I think this is ready to be merged. Might have to revisit at a later date to do this test properly as V&T employ a stretched grid (although their uniform grid results are identical for Pr = 0.7), so either with tons of vertical levels as discussed in #381 or with a stretched grid of our own. I also don't understand how they get a Nusselt number for the unstratified Ri = 0 case. But the other simulations match so I'm not too worried. There's a script to run the three simulations, and a plotting script that creates all the figures. I will open a separate PR where I document this verification experiment along with the results. ---. ![plots_stratified_couette_flow_stratified_couette_flow_Re_Nu_timeseries](https://user-images.githubusercontent.com/20099589/64800439-9a0ca580-d554-11e9-9868-c52233df6b93.png). ![plots_stratified_couette_flow_stratified_couette_flow_Re_Nu_scatter](https://user-images.githubusercontent.com/20099589/64800446-9d079600-d554-11e9-84e4-c9ea69807341.png). ![plots_stratified_couette_flow_stratified_couette_flow_LES_profiles](https://user-images.githubusercontent.com/20099589/64800451-a0028680-d554-11e9-995e-9a7480844ca6.png). ![plots_stratified_couette_flow_stratified_couette_flow_velocity_temperature_profiles](https://user-images.githubusercontent.com/20099589/64800457-a2fd7700-d554-11e9-9e31-cd76feae934c.png). ![plots_stratified_couette_flow_stratified_couette_flow_velocity_temperature_slices](https://user-images.githubusercontent.com/20099589/64800463-a7299480-d554-11e9-90ae-aee7230101fc.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/381#issuecomment-530892406:230,test,test,230,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/381#issuecomment-530892406,1,['test'],['test']
Testability,"At high enough ~~vertical~~ vertical + horizontal resolution, it seems that the `zonally_averaged_baroclinic_adjustment.jl` validation test blows up with `IsopycnalSkewSymmetricDiffusivity`; specifically:. ```julia; gerdes_koberle_willebrand_tapering = FluxTapering(1e-2); gent_mcwilliams_diffusivity = IsopycnalSkewSymmetricDiffusivity(κ_skew = 1000,; κ_symmetric = 900,; slope_limiter = gerdes_koberle_willebrand_tapering); ```. For example, with 50m vertical resolution (Nz=20, Lz=1000m, 20km horizontal resolution) we find. https://user-images.githubusercontent.com/15271942/164360760-ef03fc9d-e07a-4b50-9e80-bd79997cfa1d.mp4. while at 25m resolution (same extent, horizontal resolution, time-step) we find. https://user-images.githubusercontent.com/15271942/164360772-e39a08e4-eb5e-48e4-bfc4-cde1e241ec0f.mp4",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2453:135,test,test,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2453,1,['test'],['test']
Testability,"At last, I found an algebra mistake in my definition of the forced fixed-slip problem. The forced fixed-slip convergence validation test now passes! This means that the Oceananigans pressure solver produces correct results when the pressure gradient is non-zero on the boundary. ![image](https://user-images.githubusercontent.com/15271942/85010687-6d626b80-b12e-11ea-9169-6dc0bfc11d59.png). @ali-ramadhan I think we should run these in CI eventually. Should we do that in this PR or save for a future PR?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/767#issuecomment-645935643:132,test,test,132,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/767#issuecomment-645935643,1,['test'],['test']
Testability,"At least some of the tests are failing with the error. ```; [2021/05/17 14:55:47.365] INFO Testing distributed FFT-based Poisson solver...; --; &nbsp; | Error During Test at AssertionError: ShallowWaterModel requires `topology(grid, 3) === Flat`. Use `topology = (Periodic, Periodic, Flat)` when constructing `grid`.; ```. In other words, the tests are hitting the assertion that this PR adds. The tests should be fixed to use grids with a `Flat` vertical topology.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842646162:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842646162,7,"['Assert', 'Test', 'assert', 'test']","['AssertionError', 'Test', 'Testing', 'assertion', 'tests']"
Testability,"At some point I actually switched to time-stepping `w` and all the tests actually passed: https://github.com/climate-machine/Oceananigans.jl/pull/336#issuecomment-518876660. We originally time-stepped `w` explicitly until @jm-c suggested we recompute `w` from continuity, so might be good to check with him before making any changes. It's possible we may want to stick with this for now, in which case the issue should be closed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/338#issuecomment-526919107:67,test,tests,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/338#issuecomment-526919107,1,['test'],['tests']
Testability,At some point we should implement the following tests suggested by @edoddridge in https://github.com/climate-machine/Oceananigans.jl/issues/81. - [ ] 2D QG turbulence: explore energy and enstrophy cascades; - [ ] lee wave generation and breaking (will require large-scale flow field and bathymetry),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/159:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/159,1,['test'],['tests']
Testability,At some point we should implement the following tests suggested by @edoddridge in https://github.com/climate-machine/Oceananigans.jl/issues/81. - [ ] Munk gyre; - [ ] Stommel gyre,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/158:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/158,1,['test'],['tests']
Testability,At some point we should implement the following tests suggested by @edoddridge in https://github.com/climate-machine/Oceananigans.jl/issues/81. - [ ] Spin down of a flow-field under the influence of friction; - [ ] Thermal wind balance: specify a density structure and compare model velocity fields with analytical solution; - [ ] Rayleigh–Bénard convection (I think analytic solutions exist at low Rayleigh number?); - [ ] Onset of baroclinic instability: compare growth rates with analytical predictions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/157:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/157,1,['test'],['tests']
Testability,At some point we'd need to revisit the benchmarks. (https://clima.github.io/OceananigansDocumentation/stable/appendix/benchmarks/). We might wanna discuss what to include there and how we could perhaps automate the procedure? It doesn't need to be completely automated but perhaps we should have a workflow that we could run every now and again that produces a set of figures that are stored in OceananigansArtifacts.jl or somewhere so the docs update automatically?. (Feel free to convert this to a Discussion if it's more appropriate.),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3166:39,benchmark,benchmarks,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3166,2,['benchmark'],['benchmarks']
Testability,"At the moment . `ΔF[i-1] = C[i] - C[i-1]` where `C` and `F` are the center and face coordinate, respectively. On the other hand, the derivative on the face `[i]` is calculated with `(c[i] - c[i-1]) / ΔF[i]` (where `c` is the value of the derived variable at the centers). therefore, it has to be that `ΔF[i] = C[i] - C[i-1]`. Because of how we test, this bug was miraculously eluding all testing",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2150:344,test,test,344,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2150,2,['test'],"['test', 'testing']"
Testability,At the moment it is just a place holder but just created issue #1716 that will create a test for non-trival bathymetry. Thanks @navidcy for asking about this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-849589680:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1712#issuecomment-849589680,1,['test'],['test']
Testability,At the moment only `XPartition` is tested:. https://github.com/CliMA/Oceananigans.jl/blob/2447ea7c15d552fb6a50d3fd347d6534af0018c7/test/test_multi_region_unit.jl#L14-L15,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3202:35,test,tested,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3202,2,['test'],"['test', 'tested']"
Testability,At the moment only `show(::VerticallyStretchedRectilinearGrid)` is tested on both CPU and GPU. Should we test all of the grids on both architectures? Why not?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-839484348:67,test,tested,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1638#issuecomment-839484348,2,['test'],"['test', 'tested']"
Testability,"At the moment we hardcode the locations where output files in docs builds are so we can delete them before deploying the docs. See:. https://github.com/CliMA/Oceananigans.jl/blob/4551a78b1f3fe4bb3b238676c128dc751be9b934/docs/make.jl#L165-L169. We should find a way to automatically search for output files recursively in the `docs` directory and delete them before deploying the docs. I've asked in Julia slack how to do this and some ideas include:. ```Julia; julia> function recursive_find(dir, pattern); mapreduce(vcat, walkdir(dir)) do (root, dirs, files); joinpath.(root, filter(contains(pattern), files)); end; end; recursive_find (generic function with 1 method). julia> recursive_find(DEPOT_PATH[end], r""\.jl$""); 988-element Vector{String}:; ""/opt/julia/julia-1.9.0/share/julia/julia-config.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/Base.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/Enums.jl""; ""/opt/julia/julia-1.9.0/share/julia/base/abstractarray.jl""; ⋮; ""/opt/julia/julia-1.9.0/share/julia/test/testhelpers/llvmpasses.jl""; ""/opt/julia/julia-1.9.0/share/julia/test/testhelpers/withlocales.jl""; ""/opt/julia/julia-1.9.0/share/julia/test/unicode/utf8.jl""; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3112:1006,test,test,1006,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3112,5,['test'],"['test', 'testhelpers']"
Testability,"At the moment, supposedly we can change. https://github.com/CliMA/Oceananigans.jl/blob/3bb62a647a55a7dadf5f37331321bf0020a78c4d/test/dependencies_for_runtests.jl#L82. to. ```julia; test_file = ""test_some_new_feature.jl""; ```. and then. https://github.com/CliMA/Oceananigans.jl/blob/3bb62a647a55a7dadf5f37331321bf0020a78c4d/test/runtests.jl#L6-L10. will run that test file. But then, the `runtest.jl` *will continue* running the whole test suite!. We'd like to stop after testing the `test_file`, right?. cc @josuemtzmo",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507:128,test,test,128,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507,5,['test'],"['test', 'testing']"
Testability,"At the moment, the fill halo regions follow a particular ordering where. Flux, Value, Gradient > Periodic; Periodic > Halo Communication. where > indicates the priority of execution.; We also fill the two sides of one direction together. ; This execution order cannot be respected in case:; ```julia; bc.west isa Periodic; bc.east isa Periodic; bc.south isa Flux; bc.north isa DistributedCommunication; ```. The possible solutions are two:; - eliminate the order requirements between Flux, Value, Gradient and Periodic by including corners in all local `fill_halo_regions!` (at the moment only `Periodic` fills the corners); - do not fill two sides together. probably the first solution is better because it leads to simpler code both in terms of actual implementation and in terms of logic of execution",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3342:785,log,logic,785,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3342,1,['log'],['logic']
Testability,Attempt and making tests on https://github.com/CliMA/Oceananigans.jl/pull/2865 pass,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2898:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2898,1,['test'],['tests']
Testability,"Average reduction with conditional expressions, e.g., like. https://github.com/CliMA/Oceananigans.jl/blob/748feab10a55fa65a46455620203252a6fc0646e/test/test_field_reductions.jl#L107. induce scalar operations on the GPU. I guess it's not a surprise. I just had to add, e.g,. ```Julia; @compute Txyz = CUDA.@allowscalar Field(Average(T, condition=T.>3)); ```. Only mentioning this here in case it might something in the source code that could be affecting code performance.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221170568:147,test,test,147,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1221170568,1,['test'],['test']
Testability,"Awesome stuff! Just some comments, will look into the code and unit tests in more detail. To keep things moving I agree would be good to merge as a standalone module and work on integrating the closures and testing them in separate PRs. +1 to eventually merging the new operators into the existing `Operators` module but for now they can remain separate until we can integrate them with the rest of the code. I might suggest renaming `DirectionalDiffusivity` to `AnisotropicDiffusivity` for consistency. With the growing amount of notation for the operators and even things like `G` for source terms we should probably create a page in the docs that explains the code notation. Could be a useful reference. This PR also resolves #120. > Does anyone object to adding a new section to describe the governing equations? I think that new section would be the appropriate place to describe the turbulence closures. I feel that the math / governing equations are sufficiently different from the algorithm to warrant its own section. We already have a subsection that describes the governing equations. I don't object to giving it its own page.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495577981:68,test,tests,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/234#issuecomment-495577981,2,['test'],"['testing', 'tests']"
Testability,"Awesome stuff! Should make scripting life much more comfortable. We should release v0.9.3 once this is merged. GPU tests don't start due to this error. Will see if I can fix it.; ```julia; ERROR: LoadError: LoadError: UndefVarError: T1 not defined; Stacktrace:; [1] top-level scope at none:0; [2] include at ./boot.jl:326 [inlined]; [3] include_relative(::Module, ::String) at ./loading.jl:1038; [4] include at ./sysimg.jl:29 [inlined]; [5] include(::String) at /builds/JuliaGPU/Oceananigans-jl/src/Oceananigans.jl:1; [6] top-level scope at none:0; [7] include at ./boot.jl:326 [inlined]; [8] include_relative(::Module, ::String) at ./loading.jl:1038; [9] include(::Module, ::String) at ./sysimg.jl:29; [10] top-level scope at none:2; [11] eval at ./boot.jl:328 [inlined]; [12] eval(::Expr) at ./client.jl:404; [13] top-level scope at ./none:3; in expression starting at /builds/JuliaGPU/Oceananigans-jl/src/fields.jl:188; in expression starting at /builds/JuliaGPU/Oceananigans-jl/src/Oceananigans.jl:204; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519320783:115,test,tests,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519320783,1,['test'],['tests']
Testability,"Awesome work @ali-ramadhan! Excited to finally have this in the code. About the scaling. I'm not sure how you're calculating the stats exactly, but one thing to remember is that, given Julia's JIT compiling + all the MPI stuff, I'm guessing the start-up for these simulations is pretty significant and might impacting your results, no?. So I guess two ways to circumvent that are to (1) benchmark with pretty long simulations or (2) compile everything ahead of time with PackageCompiler.jl. I don't think we necessarily need to do this now though, but might be good to keep in mind for the future. Thanks again for the great work!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-795492606:387,benchmark,benchmark,387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-795492606,1,['benchmark'],['benchmark']
Testability,"Awesome! Good to have another test and a JLD output writer. In light of #242 and #238, might be good to first figure out why the GPU golden master test fails for the thermal bubble test and fixing that before we merge this PR. Out of curiousity, why the ""golden master"" -> ""regression"" name change?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/239#issuecomment-496225623:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/239#issuecomment-496225623,3,['test'],['test']
Testability,Awesome! I'll start using it during testing first as we have a ton of `println` statements in there that really should be log statements. Hope you don't mind if we ping you and request your review if we modify the `ModelLogger` with increasing use. @glwagner Any objections to merging this PR?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-561802711:36,test,testing,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-561802711,2,"['log', 'test']","['log', 'testing']"
Testability,"Awesome! Seems like a good idea to check for this as otherwise the resulting segfault gives no indication about what to debug. Some ideas to improve this PR:; 1. Right now you only iterate over the values of the named tuple `boundary_conditions`. If you also iterate over the keys, then when the warning is printed you can also say exactly which boundary condition is the problem which might help the user.; 2. Might also be good to check the opposite case: when `arch == CPU()` but one of the boundary conditions is a `CuArray`.; 3. Would be good to have a test for this functionality. `@test_throws` can check that the Model constructor throws the expected error when running on the GPU with an `Array` and vice versa. We might also want to implement a similar function to check that all float types in a model are consistent, i.e. to avoid running with `Float32` fields and a `Float64` equation of state.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/421#issuecomment-532788530:558,test,test,558,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/421#issuecomment-532788530,1,['test'],['test']
Testability,"Awesome! Thanks, for the help @ali-ramadhan! Still not sure why the tests passed here though...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787507792:68,test,tests,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787507792,1,['test'],['tests']
Testability,"Awesome, thanks!. Just a quick explanation so we can also add a comment to the line this PR modifies: Previously if a required property such as the velocity fields contained references to functions (usually through boundary conditions) then they weren't saved to disk. However, checkpoint restoration is impossible without the velocity fields. So if a required property contains function references it should still be serialized to disk. Through dispatch, fields are serialized such that function boundary conditions are replaced with `missing` so everything works out and restoration is possible, although boundary conditions need to be restored manually. So I actually think we're missing the code that allows for CPU -> GPU checkpoint restoration and I can't find it, but we should add it back in. It changes this line. https://github.com/sandreza/Oceananigans.jl/blob/625db8d8eadeeed7e9e5591e2b01c0ee8dd3623c/src/OutputWriters/checkpointer.jl#L126. to something like. ```julia; arch = haskey(kwargs, :architecture) ? kwargs[:architecture] : file[""architecture""]; ```; so that architectures passed via `kwargs` aren't overwritten by the architecture stored in the checkpoint file. We should also add two tests to make sure these issues don't occur in the future:; 1. Checkpoint a model with at least one field containing a function boundary condition. Make sure you can restore from checkpoint, and ensure that the boundary condition shows up as `missing` when doing so (without manual restoration). Restoration should print a warning about the `missing` boundary condition. Time stepping a model with a `missing` boundary condition should produce an understandable error.; 2. If a GPU is available, we should checkpoint a CPU model and restore it using `kwargs = Dict(:architecture => GPU())` and make sure the restored model is a GPU model with CuArrays and that we can time step it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657853182:1207,test,tests,1207,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657853182,1,['test'],['tests']
Testability,"Awesome. It looks like it'd require a bit of serious concentration / squinting. But hopefully the existing 5th order WENO implementation:. https://github.com/CliMA/Oceananigans.jl/blob/master/src/Advection/weno_fifth_order.jl. is helpful. To use this we need to resolve #1015 (simple fix, but requires a bit of logic in the constructor for `IncompressibleModel` similar to what's done for viscosities and diffusivities) so that we can use different schemes for different fields.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1173#issuecomment-726735243:311,log,logic,311,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1173#issuecomment-726735243,1,['log'],['logic']
Testability,"B1dFdyaXRlcnMvT3V0cHV0V3JpdGVycy5qbA==) | `66.66% <0.00%> (-33.34%)` | :arrow_down: |; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [src/OutputWriters/netcdf\_output\_writer.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL091dHB1dFdyaXRlcnMvbmV0Y2RmX291dHB1dF93cml0ZXIuamw=) | `76.54% <0.00%> (-5.28%)` | :arrow_down: |; | [src/Fields/field.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL0ZpZWxkcy9maWVsZC5qbA==) | `65.07% <0.00%> (-0.55%)` | :arrow_down: |; | [src/Simulations/run.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-c3JjL1NpbXVsYXRpb25zL3J1bi5qbA==) | `95.23% <0.00%> (-0.12%)` | :arrow_down: |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [docs/bibliography.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-ZG9jcy9iaWJsaW9ncmFwaHkuamw=) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | ... and [44 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by [Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=footer). Last update [810a3a1...9128ab2](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/881?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-682318992:2629,benchmark,benchmark,2629,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/881#issuecomment-682318992,2,['benchmark'],['benchmark']
Testability,"BTW, the progress function does not have to run on the GPU, which means that flexible callable objects can be used which have embedded parameters. This is the way I envision progress function development moving forward. We may want eventually to have complex progress functions for fancy logging / in-terminal plotting, eg. A `simulation.parameters` field is probably not the right approach --- we want callable objects, I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/639#issuecomment-590147928:288,log,logging,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/639#issuecomment-590147928,1,['log'],['logging']
Testability,Barotropic turbulence validation tests on RegularLatitudeLongitudeGrid,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1626:33,test,tests,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1626,1,['test'],['tests']
Testability,"Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},B} where B where Z where Y where X}; filename::String, iteration_interval::Int64, time_interval::Nothing, global_attributes::Dict{Any,Any}, output_attributes::Dict{Any,Any}, dimensions::Dict{Any,Any}, clobber::Bool, compression::Int64, with_halos::Bool, verbose::Bool, xC::UnitRange{Int64}, xF::UnitRange{Int64}, yC::UnitRange{Int64}, yF::UnitRange{Int64}, zC::UnitRange{Int64}, zF::UnitRange{Int64}) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/OutputWriters/netcdf_output_writer.jl:176; [5] run_thermal_bubble_netcdf_tests(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:29; [6] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:526 [inlined]; [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [8] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:525 [inlined]; [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [10] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:521; [11] include(::String) at ./client.jl:439; [12] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:94; [13] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [14] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:76; [15] include(::String) at ./client.jl:439; [16] top-level scope at none:6; [17] eval(::Module, ::Any) at ./boot.jl:331; [18] exec_options(::Base.JLOptions) at ./client.jl:264; [19] _start() at ./client.jl:484; ; i: 0001, t: 1.000 s, Δt: 1.100 s, wmax = 2.7e-04 ms⁻¹, wall time: 18.164 s; progress: 0.0 %, i: 0001, t: 1.000 s, Δt: 1.100 s, wall time: 11.110 s; N² = ((Rᵈ ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:102158,test,test,102158,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,"Base.show` very slow since showing a `FieldTimeSeries` prints its min, mean, and max. So it's harder to work with `FieldTimeSeries` interactively. Seems fine when not on a `ImmersedBoundaryGrid`. I'm guessing it's slower because it's masking out the immersed values but I don't know if we expect it to be ~2000x slower than without an immersed boundary. It's those memory allocations... A quick quality-of-life fix could be to not call `data_summary` when showing a `FieldTimeSeries`. ## MWE. ```julia; using Oceananigans. arch = CPU(). L = 1; H = 1. underlying_grid = LatitudeLongitudeGrid(; arch;; topology = (Bounded, Bounded, Bounded),; size = (512, 512, 64),; latitude = (-L/2, L/2),; longitude = (-L/2, L/2),; z = (-H, 0),; halo = (4, 4, 4); ). h = L/2; w = L/5 ; mount(x, y) = h * exp(-x^2 / 2w^2) * exp(-y^2 / 2w^2); bottom(x, y) = -H + mount(x, y). grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom(bottom)). model = HydrostaticFreeSurfaceModel(; grid). simulation = Simulation(model, Δt=1, stop_iteration=1). simulation.output_writers[:fields] =; JLD2OutputWriter(; model,; model.velocities;; filename = ""test.jld2"",; schedule = IterationInterval(1),; overwrite_existing = true; ). run!(simulation). u = FieldTimeSeries(""test.jld2"", ""u""); u2 = u[2]; ```. Reduction over the `FieldTimeSeries`:. ```julia; julia> @time minimum(u2); 20.954897 seconds (118.72 M allocations: 130.792 GiB, 25.74% gc time); 0.0; ```. Reduction over the underlying data:. ```julia; julia> @time minimum(u2.data); 0.011304 seconds (3 allocations: 1.562 KiB); 0.0; ```. or almost 2000x faster. ## Environment. Oceananigans.jl `main` branch with. ```; Julia Version 1.10.5; Commit 6f3fdf7b362 (2024-08-27 14:19 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 48 × AMD Ryzen Threadripper 7960X 24-Cores; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, znver3); Threads: 1 default, 0 interactive, 1 GC (on 48 virtual cores); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3750:1163,test,test,1163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3750,2,['test'],['test']
Testability,"Based on some previous benchmarks I think so; https://github.com/climate-machine/Oceananigans.jl/blob/3cd4ae32cb4d716bc6470a6e7ba484ed98d60de7/benchmark/gpu.jl#L164-L198; Basically I wrote an _x_-difference operator that used `@. @views` which allowed it to act on Arrays and CuArrays, and when acting on a CuArray it was only ~10x faster compared to single-core CPU performance. While the entire time-stepping loop we have using GPUifyLoops.jl is ~90x faster. **However** I don't think I did the benchmarking there properly (have to use `@benchmark CuArrays.@sync` I believe) and maybe I didn't use `@. @views` properly. I think using broadcasts would make the code much more readable, but I can think of a few drawbacks (mainly related to performance):. 1. I don't know how to fuse kernels when doing broadcasts. E.g. we might be able to do something like; ```julia; @. Gu = calc_RHS_u(u, v, w, ...); @. Gv = calc_RHS_v(u, v, w, ...); ...; ```; which would look cleaner but then `update_source_terms!` would end essentially end up in several kernels. From talking with you I believe this shouldn't matter as kernel launches are cheap and the broadcast operator should essentially do exactly what `update_source_terms!` does, but I'm not 100% sure of this and we may lose out on performance. 2. We may want to fine tune our kernel launches, e.g. by using the thread-block layout we want which is probably possible, I'm just not very familiar with the CuArrays.jl package. 3. Some kernels, e.g. ones that do permutations like `calculate_source_term_divergence_gpu!` and `idct_permute!` can't be broadcasted over I think, but these are the exception rather than the rule. To really find out whether we take a performance hit we might have to refactor the time-stepping to use broadcasting then benchmark the two approaches on CPU, GPU, and multi-GPU architectures (not sure if CuArrays.jl will do multi-GPU arrays yet). This will become much easier once #67 is resolved.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/108#issuecomment-469765393:23,benchmark,benchmarks,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/108#issuecomment-469765393,5,['benchmark'],"['benchmark', 'benchmarking', 'benchmarks']"
Testability,"Because the server was out of space and all tests were failing because of that, but Greg fixed this earlier today",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867242605:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1761#issuecomment-867242605,1,['test'],['tests']
Testability,"Begs the question of whether this code was tested? When users pass a tuple to `forcings`, we wrap it inside `MultipleForcings`. Thus we need this method to unwrap the tuple when adding advective forcings to the total velocity field. @jagoosw @simone-silvestri . Should we add a test?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3259:43,test,tested,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3259,2,['test'],"['test', 'tested']"
Testability,Benchmark abstract operations,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/870:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/870,1,['Benchmark'],['Benchmark']
Testability,"Benchmark it!. On Sat, Mar 9, 2019 at 9:05 AM Ali Ramadhan <notifications@github.com>; wrote:. > Ah good point, I meant it can be part of the PoissonSolver constructor.; >; > A default value of Sys.CPU_THREADS (like FourierFlows.jl) seems like a; > good choice.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/issues/119#issuecomment-471180369>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AOkIBkHW72OZhle1hmMlTlHyOaXSTIzbks5vU7-6gaJpZM4bmrZ0>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471180997:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471180997,1,['Benchmark'],['Benchmark']
Testability,"Benchmark results:. ```; Julia Version 1.3.1; Commit 2d5741174c (2019-12-30 21:36 UTC); Platform Info:; OS: macOS (x86_64-apple-darwin18.6.0); uname: Darwin 19.3.0 Darwin Kernel Version 19.3.0: Thu Jan 9 20:58:23 PST 2020; root:xnu-6153.81.5~1/RELEASE_X86_64 x86_64 i386; CPU: Intel(R) Core(TM) i7-7920HQ CPU @ 3.10GHz: ; speed user nice sys idle irq; #1 3100 MHz 7280472 s 0 s 3664940 s 37447135 s 0 s; #2 3100 MHz 962205 s 0 s 463846 s 46966309 s 0 s; #3 3100 MHz 6058127 s 0 s 2588161 s 39746073 s 0 s; #4 3100 MHz 940664 s 0 s 349843 s 47101853 s 0 s; #5 3100 MHz 5327039 s 0 s 1908912 s 41156410 s 0 s; #6 3100 MHz 958596 s 0 s 311019 s 47122744 s 0 s; #7 3100 MHz 4606842 s 0 s 1506190 s 42279330 s 0 s; #8 3100 MHz 985952 s 0 s 278546 s 47127861 s 0 s; ; Memory: 16.0 GB (398.0859375 MB free); Uptime: 4.914851e6 sec; Load Avg: 2.8193359375 2.333984375 1.83544921875; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-6.0.1 (ORCJIT, skylake); Environment:; JULIA_EDITOR = vim; TERM = xterm-256color; PALMHOME = /Users/gregorywagner/Software/palm; PATH = /Users/gregorywagner/opt/anaconda3/condabin:/opt/anaconda3/bin:/Users/gregorywagner/Software/palm/palm/current_version/trunk/SCRIPTS:/Applications/Julia-1.3.app/Contents/Resources/julia/bin:/usr/local/opt/ruby/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Library/TeX/texbin:/opt/X11/bin; XPC_FLAGS = 0x0; HOME = /Users/gregorywagner. ──────────────────────────────────────────────────────────────────────────────────────; Static ocean benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 104s / 55.2% 7.44GiB / 0.08% . Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [CPU, Float32] 10 44.9ms 0.08% 4.49ms 752KiB 12.5% 75.2KiB; 32× 32× 32 [CPU, Float64] 10 39.1ms 0.07% 3.91ms 752KiB 12.5% 75.2KiB; 64× 64× 64 [CPU, Float32] 10 428ms 0.75% 42.8ms 752KiB 12.5% 75.2KiB; 64× 64× 64 [CPU, Float64] 10 3",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/710#issuecomment-629688917:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/710#issuecomment-629688917,1,['Benchmark'],['Benchmark']
Testability,Benchmark script for immersed boundaries,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1699:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1699,1,['Benchmark'],['Benchmark']
Testability,Benchmark script that also calculates CPU->GPU speedup.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/116:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/116,1,['Benchmark'],['Benchmark']
Testability,Benchmark scripts should report CPU and GPU being used,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/466:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/466,1,['Benchmark'],['Benchmark']
Testability,Benchmark tests: Just do small sizes on GPU models,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/733:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/733,2,"['Benchmark', 'test']","['Benchmark', 'tests']"
Testability,"Benchmark? The reason we combined the updates for velocities was a perceived performance gain. Probably we were wrong about that, but it'd be good to show it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734369612:0,Benchmark,Benchmark,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1210#issuecomment-734369612,1,['Benchmark'],['Benchmark']
Testability,Benchmarking forcing functions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/370:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/370,1,['Benchmark'],['Benchmarking']
Testability,Benchmarking fully loaded simulations,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1089:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1089,1,['Benchmark'],['Benchmarking']
Testability,Benchmarking scripts for immersed boundaries and immersed boundary conditions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2452:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2452,1,['Benchmark'],['Benchmarking']
Testability,"Benchmarking this PR against v0.27.0 it is much slower, especially as the problem size increases. Slowdown on CPU is by a factor of 2-14x while on a GPU it's 2-13x so pretty similar. Benchmark results from `benchmark_static_ocean.jl` are below. ---. # CPU benchmarks (Intel(R) Xeon(R) CPU E5-2603 v4 @ 1.70GHz). ## v0.27.0. ```; ──────────────────────────────────────────────────────────────────────────────────────; Static ocean benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 265s / 42.3% 13.7GiB / 0.67% ; Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [CPU, Float32] 10 79.5ms 0.07% 7.95ms 743KiB 0.77% 74.3KiB; 32× 32× 32 [CPU, Float64] 10 79.1ms 0.07% 7.91ms 743KiB 0.77% 74.3KiB; 64× 64× 64 [CPU, Float32] 10 693ms 0.62% 69.3ms 743KiB 0.77% 74.3KiB; 64× 64× 64 [CPU, Float64] 10 657ms 0.59% 65.7ms 743KiB 0.77% 74.3KiB; 128×128×128 [CPU, Float32] 10 5.77s 5.14% 577ms 743KiB 0.77% 74.3KiB; 128×128×128 [CPU, Float64] 10 5.80s 5.17% 580ms 743KiB 0.77% 74.3KiB; 256×256×256 [CPU, Float32] 10 49.2s 43.8% 4.92s 743KiB 0.77% 74.3KiB; 256×256×256 [CPU, Float64] 10 49.0s 43.7% 4.90s 743KiB 0.77% 74.3KiB; ──────────────────────────────────────────────────────────────────────────────────────; ```. ## This PR. ```; ──────────────────────────────────────────────────────────────────────────────────────; Static ocean benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 2078s / 77.1% 15.0GiB / 0.14% ; Section ncalls time %tot avg alloc %tot avg; ──────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [CPU, Float32] 10 156ms 0.01% 15.6ms 2.59MiB 12.5% 265KiB; 32× 32× 32 [CPU, Float64] 10 162ms 0.01% 16.2ms 2.59MiB 12.5% 265KiB; 64× 64× 64 [CPU, Float32] 10 1.86s 0.12% 186ms 2.59MiB 12.5% 265KiB; 64× 64× 64 [CPU, Float64] 10 1.83s 0.11% 183ms 2.59MiB 12.5% 265KiB;",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/805#issuecomment-660660104:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/805#issuecomment-660660104,4,"['Benchmark', 'benchmark']","['Benchmark', 'Benchmarking', 'benchmarks']"
Testability,Benchmarking turbulence closures,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/289:0,Benchmark,Benchmarking,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/289,1,['Benchmark'],['Benchmarking']
Testability,"Benchmarks are more or less unchanged, so I'm merging.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-983876168:0,Benchmark,Benchmarks,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2063#issuecomment-983876168,1,['Benchmark'],['Benchmarks']
Testability,Benchmarks in Docs & README,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3166:0,Benchmark,Benchmarks,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3166,1,['Benchmark'],['Benchmarks']
Testability,"Benchmarks. ### on main. ```Julia; julia> using Oceananigans, BenchmarkTools. julia> @btime grid = ConformalCubedSphereGrid(GPU(), panel_size=(64, 64, 2), z=(-1, 0), radius=1, horizontal_direction_halo=4, z_halo=2); 36.500 s (52406500 allocations: 1.60 GiB); ```. #### this PR; ```Julia; julia> using Oceananigans, BenchmarkTools. julia> @btime grid = ConformalCubedSphereGrid(GPU(), panel_size=(64, 64, 2), z=(-1, 0), radius=1, horizontal_direction_halo=4, z_halo=2);; 2.940 s (30626062 allocations: 1.11 GiB); ```. This is reasonable since each panel is constructed now ~3x faster (see https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2094075562) and there are 6 panels on the sphere.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2159564782:0,Benchmark,Benchmarks,0,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3579#issuecomment-2159564782,3,['Benchmark'],"['BenchmarkTools', 'Benchmarks']"
Testability,Better validation for `LatitudeLongitudeGrid` + add test for `sum(Azᶜᶜᵃ) ≈ 4πr²`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3240:52,test,test,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3240,1,['test'],['test']
Testability,"BiasedThirdOrder │ 18.859 ms │ 19.041 ms │ 19.338 ms │ 22.157 ms │ 2.10 MiB │ 16584 │ 10 │; │ GPU │ WENO5 │ 22.645 ms │ 28.377 ms │ 27.818 ms │ 28.571 ms │ 2.26 MiB │ 27075 │ 10 │; └───────────────┴────────────────────────┴───────────┴───────────┴───────────┴───────────┴──────────┴────────┴─────────┘; ```; to test the new WENO methods on a stretched grid modify the code in benchmark_advection_schemes.jl as seen below. ```; function benchmark_advection_scheme(Arch, Scheme); grid = RectilinearGrid(size=(192, 192, 192), x = (0, 1), y = (0, 1), z = collect(0:192), architecture = Arch()). if Scheme == :Uniform; scheme = WENO5(); elseif Scheme == :Stretched; scheme = WENO5(grid = grid); elseif Scheme == :StretchedSmoothness; scheme = WENO5(grid = grid, stretched_smoothness = true); elseif Scheme == :ZFormulation; scheme = WENO5(zweno = true); end; model = NonhydrostaticModel(architecture=Arch(), grid=grid, advection=scheme). time_step!(model, 1) # warmup. trial = @benchmark begin; @sync_gpu time_step!($model, 1); end samples=10. return trial; end. Schemes = (:Uniform, :Stretched, :StretchedSmoothness, :ZFormulation); ```; This PR, with a ""stretched"" vertical direction ; ```; ┌───────────────┬─────────────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Schemes │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ Stretched │ 7.122 s │ 7.122 s │ 7.122 s │ 7.122 s │ 949.91 KiB │ 1716 │ 1 │; │ CPU │ StretchedSmoothness │ 11.042 s │ 11.042 s │ 11.042 s │ 11.042 s │ 956.47 KiB │ 1716 │ 1 │; │ CPU │ Uniform │ 6.373 s │ 6.373 s │ 6.373 s │ 6.373 s │ 945.38 KiB │ 1706 │ 1 │; │ CPU │ ZFormulation │ 7.725 s │ 7.725 s │ 7.725 s │ 7.725 s │ 945.38 KiB │ 1706 │ 1 │; │ GPU │ Stretched │ 25.646 ms │ 25.920 ms │ 26.501 ms │ 32.101 ms │ 2.15 MiB │ 30442 │ 10 │; │ GPU │ StretchedSmoothness │ ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974843738:3954,benchmark,benchmark,3954,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-974843738,1,['benchmark'],['benchmark']
Testability,"Billy mentioned it in some other comments but while we do splat args for some of the function calls, the function definitions use Varargs instead. This should avoid the catastrophic slowdown we saw with splatting earlier, but I agree that it should be tested. Do you have any good CPU performance tests set up @glwagner ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2150096206:252,test,tested,252,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-2150096206,2,['test'],"['tested', 'tests']"
Testability,"Bonus, also the `mask_immersed_field` was missing. I don't expect it will be ever used (why using an immersed boundary grid in a single column?), however I have added a test for it. We can remove it if not needed.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3756#issuecomment-2326732799:169,test,test,169,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3756#issuecomment-2326732799,1,['test'],['test']
Testability,"Both `IncompressibleModel` and `ShallowWaterModel` use the more general `model_forcing` now, but I had to refactor `regularize_forcing` a bit as it needs the `model_field_names` when constructing `Relaxation` forcings and `ContinuousForcing`s with field dependencies. Tests passed on Tartarus but might be good if @glwagner had a quick look to make sure it's okay.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756838133:268,Test,Tests,268,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1291#issuecomment-756838133,1,['Test'],['Tests']
Testability,Both testing and documentation are definitely warranted!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/925#issuecomment-690813103:5,test,testing,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/925#issuecomment-690813103,1,['test'],['testing']
Testability,"BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}}},SpatialWindowAverage{Field{Face,Center,Center,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularCartesianGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},FieldSlicer{Colon,UnitRange{Int64},Colon},Tuple{Int64}}}}; filepath::String, schedule::TimeInterval, array_type::Type{T} where T, field_slicer::FieldSlicer{Colon,Colon,Colon}, global_attributes::Dict{Any,Any}, output_attributes::Dict{Any,Any}, dimensions::Dict{Any,Any}, mode::String, compression::Int64, verbose::Bool) at /home/tomas/repos/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:340; [4] top-level scope at /home/tomas/repos/Oceananigans.jl/sandbox/windowed_spatially_averaged.jl:111; [5] include(::String) at ./client.jl:457; [6] top-level scope at REPL[1]:1; in expression starting at /home/tomas/repos/Oceananigans.jl/sandbox/windowed_spatially_averaged.jl:111; ```; </details>. I've tried expanding the struct to include a grid parameter (based off of how `AveragedField` is programmed` and then defining `compute!` but I haven't been able to make it work. Any tips?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1392#issuecomment-783533170:16548,sandbox,sandbox,16548,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1392#issuecomment-783533170,2,['sandbox'],['sandbox']
Testability,Brings back ShallowWater regression test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2937:36,test,test,36,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2937,1,['test'],['test']
Testability,"Btw, many of the tests might be ok to use `buoyancy=BuoyancyTracer()` or even `buoyancy=nothing` with `tracer=:c`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1989#issuecomment-922527594:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1989#issuecomment-922527594,1,['test'],['tests']
Testability,Bugfix and tests for RegularCartesianGrid,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/4:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/4,1,['test'],['tests']
Testability,Build and test but do not deploy docs on Buildkite,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1018:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1018,1,['test'],['test']
Testability,"Builds off @vchuravy's work in #261. Preliminary design of user API for concrete models. Probably most of the time the user will have to specify boundary conditions prior to building the model. We'll have to come up with good syntax for that. What we have is ok, but can be improved. The checkpointing tests currently fail, I think because they attempt to change the types of the some of the model fields.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/263:302,test,tests,302,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/263,1,['test'],['tests']
Testability,Bump patch release?; Perhaps a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069647760:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2362#issuecomment-1069647760,1,['test'],['test']
Testability,"Bumped the version. I think it might take me a little while to get my head around the testing system, but I've left this editable by maintainers in case anyone else wants to quickly code up a test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896867127:86,test,testing,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896867127,2,['test'],"['test', 'testing']"
Testability,"But I realized that a second way to implement this immersed flux is to re-use the conditional flux functions, but reverse the logic. Not sure what is best yet.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100160950:126,log,logic,126,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1100160950,1,['log'],['logic']
Testability,But it might be set in the tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2702#issuecomment-1282678457:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2702#issuecomment-1282678457,1,['test'],['tests']
Testability,But now I removed that and I replaced it with two tests with 2D lat-lon grids (one that has Flat lon and one that has Flat lat). But there is an issue still!. @simone-silvestri these grids _now_ are not SingleColumnGrids ... Can the MatrixImplicitSolver work with 2D lat-depth or lon-depth slices?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630594751:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630594751,1,['test'],['tests']
Testability,But since all tests run on a computer at MIT the time it takes also depends on how many tests are running (eg how many prs were just open) and other random factors.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877432402:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1825#issuecomment-877432402,2,['test'],['tests']
Testability,But this PR doesn't require users to use 1.10 right? It's just about running the tests on 1.10. I think it will be nice to get rid of the crazy warnings on 1.10.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1944546930:81,test,tests,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3403#issuecomment-1944546930,1,['test'],['tests']
Testability,"But you did create a test! . ![image](https://user-images.githubusercontent.com/15271942/130984674-6d2e83da-b89e-4aff-9976-852227954ae3.png). It ran too:. https://buildkite.com/clima/oceananigans/builds/3769#6acfa109-0499-43fb-af7d-a7ec3172e1d4/40-331. This doesn't test correctness of course --- that's what the convergence test does. So now we have a unit test that ensures the code _runs_ (executed every PR), and a convergence test that ensures the code is _correct_ (executed optionally when we need to revalidate). I'm happy, merge away!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-906479795:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1957#issuecomment-906479795,5,['test'],['test']
Testability,"By the way, there is an abstraction called `FieldOutput` that attempts to make these patterns easier. You can use:. ```julia; using Oceananigans, Oceananigans.OutputWriters; grid = RegularCartesianGrid(size=(16, 16, 16), length=(1, 1, 1)); model = Model(grid=grid); outputs = FieldOutputs((u=model.velocities.u, T=model.tracers.T)); model.output_writers[:jld2] = JLD2OutputWriter(model, outputs; frequency=1, prefix=""test"", verbose=true); time_step!(model; Δt=1, Nt=1); ```. The `FieldOutputs` constructor (note the 's') then builds a `NamedTuple` of `FieldOutput` objects. The `FieldOutput` objects are associated with a function that returns the underlying parent array associated with the field, converted to `Array` by default.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/562#issuecomment-564380213:417,test,test,417,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/562#issuecomment-564380213,1,['test'],['test']
Testability,CI testing for GPU code.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/53:3,test,testing,3,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/53,1,['test'],['testing']
Testability,CPU solver tests passed so I'm pretty hopeful...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881954693:11,test,tests,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1865#issuecomment-881954693,1,['test'],['tests']
Testability,CPU status in README banner does not print results of tests on master,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/712:54,test,tests,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/712,1,['test'],['tests']
Testability,"CPU, when the grid size exceeded 2048 x 2048, only one sample could be benchmarked. Trying to get more samples benchmarked by increasing the sampling time limit resulted in out of memory exceptions.; ```; Oceananigans v0.58.1; Julia Version 1.6.0; Commit f9720dc2eb (2021-03-24 12:55 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4216 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.0; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.0/easybuild/avx2-Core-julia-1.6.0-easybuild-devel; JULIA_LOAD_PATH = :; GPU: Tesla V100-SXM2-32GB. Shallow water model benchmarks; ┌───────────────┬─────────────┬──────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼──────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 2.041 ms │ 2.154 ms │ 2.246 ms │ 3.207 ms │ 1.36 MiB │ 2253 │ 10 │; │ CPU │ Float64 │ 64 │ 3.224 ms │ 3.367 ms │ 3.408 ms │ 4.031 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 128 │ 7.495 ms │ 7.620 ms │ 7.661 ms │ 8.193 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 256 │ 23.927 ms │ 24.030 ms │ 24.651 ms │ 28.232 ms │ 1.36 MiB │ 2255 │ 10 │; │ CPU │ Float64 │ 512 │ 91.065 ms │ 93.878 ms │ 93.733 ms │ 97.092 ms │ 1.36 MiB │ 2315 │ 10 │; │ CPU │ Float64 │ 1024 │ 388.387 ms │ 389.332 ms │ 390.035 ms │ 392.166 ms │ 1.36 MiB │ 2315 │ 10 │; │ CPU │ Float64 │ 2048 │ 1.584 s │ 1.584 s │ 1.584 s │ 1.585 s │ 1.36 MiB │ 2315 │ 4 │; │ CPU │ Float64 │ 4096 │ 6.337 s │ 6.337 s │ 6.337 s │ 6.337 s │ 1.36 MiB │ 2315 │ 1 │; │ CPU │ Float64 │ 8192 │ 25.696 s │ 25.696 s │ 25.696 s │ 25.696 s │ 1.36 MiB │ 2313",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722:1366,benchmark,benchmarks,1366,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722,1,['benchmark'],['benchmarks']
Testability,"CUDA v2.4.0 is out but we're blocked by OffsetArrays.jl now, which might remove the Adapt.jl dependency (https://github.com/JuliaArrays/OffsetArrays.jl/issues/174) so might not be worth waiting for all dependencies to support Adapt v3.0.0. If tests pass with CUDA v2.4.0 I say we merge this PR and close #1287.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1296#issuecomment-756802372:243,test,tests,243,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1296#issuecomment-756802372,1,['test'],['tests']
Testability,"Call them system tests, model verification tests, or end-to-end tests, that's what this PR is about. Currently a work in progress as I hit a roadblock with checkpointing so **the tests will fail**. See #141. BUT, for testing we can just set `model.forcings = nothing` and manually reconstruct the forcings as we know them. Tests implemented so far:; 1. Checkpointing integration test: Run two coarse rising thermal bubble simulations and make sure that when restarting from a checkpoint, the restarted simulation matches the non-restarted simulation numerically.; 2. NetCDF output integration test: Run a coarse thermal bubble simulation and save the output to NetCDF at the 10th time step. Then read back the output and test that it matches the model's state.; 3. Thermal bubble golden master test: Run the coarse thermal bubble simulation for 10 time steps and check that the model output matches a golden master output.; 4. Deep convection golden master test. @jm-c @christophernhill: do post any ideas for tests that should be implemented in this PR.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/140:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/140,12,"['Test', 'test']","['Tests', 'test', 'testing', 'tests']"
Testability,Can I merge after the tests pass? And should I bump the version number?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1573678082:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3027#issuecomment-1573678082,1,['test'],['tests']
Testability,Can I merge now tests have passed?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484158671:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1484158671,1,['test'],['tests']
Testability,Can I merge now the tests pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516146111:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1516146111,1,['test'],['tests']
Testability,"Can confirm that tests get stuck when I manually run `] test` on Tartarus. It first gets stuck at. ```; [2021/04/09 09:02:15.825] INFO Testing budgets with Flux boundary conditions [GPU]...; [2021/04/09 09:02:15.825] INFO Testing budgets with Flux boundary conditions [GPU, (Periodic, Bounded, Bounded), u, north]...; ```. so presumably whatever is causing it to hang is a commonly used function/bit of code...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816695114:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1561#issuecomment-816695114,4,"['Test', 'test']","['Testing', 'test', 'tests']"
Testability,"Can confirm that the docstring now works:. ```julia; help?> KernelFunctionOperation; search: KernelFunctionOperation. KernelFunctionOperation{LX, LY, LZ}(kernel_function, grid; architecture=nothing,; computed_dependencies=(), parameters=nothing). Constructs a KernelFunctionOperation at location (LX, LY, LZ) on grid an with an optional iterable of computed_dependencies and arbitrary parameters. With isnothing(parameters) (the default), kernel_function is called with. kernel_function(i, j, k, grid, computed_dependencies...). Otherwise kernel_function is called with. kernel_function(i, j, k, grid, computed_dependencies..., parameters). Examples; ≡≡≡≡≡≡≡≡≡≡. Construct a kernel function operation that returns random numbers:. random_kernel_function(i, j, k, grid) = rand() # use CUDA.rand on the GPU; ; kernel_op = KernelFunctionOperation{Center, Center, Center}(random_kernel_function, grid; architecture=CPU()). Construct a kernel function operation using the vertical vorticity operator valid on curvilinear and cubed sphere grids:. using Oceananigans.Operators: ζ₃ᶠᶠᵃ # called with signature ζ₃ᶠᶠᵃ(i, j, k, grid, u, v); ; grid = model.grid; u, v, w = model.velocities; ; ζ_op = KernelFunctionOperation{Face, Face, Center}(ζ₃ᶠᶠᵃ, grid, computed_dependencies=(u, v)); ```. Also caught a couple of typos in the docstrng. We should be good to go when the tests pass",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1939#issuecomment-901399057:1360,test,tests,1360,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1939#issuecomment-901399057,1,['test'],['tests']
Testability,"Can confirm that the following Poisson solver generalizes as expected, so we should be able to get to a channel model pretty easily. For a channel with walls in the _y_ and _z_ directions, the following Poisson solver with proper operators produces a divergence-free solution. ```julia; using Test; using FFTW; using Statistics: mean; using GPUifyLoops: @launch, @loop, @synchronize. using Oceananigans. # Increment and decrement integer a with periodic wrapping. So if n == 10 then; # incmod1(11, n) = 1 and decmod1(0, n) = 10.; @inline incmod1(a, n) = ifelse(a==n, 1, a + 1); @inline decmod1(a, n) = ifelse(a==1, n, a - 1). @inline δx_c2f(g::RegularCartesianGrid, f, i, j, k) = @inbounds f[i, j, k] - f[decmod1(i, g.Nx), j, k]. @inline function δy_c2f(g::RegularCartesianGrid, f, i, j, k); if j == 1; return 0; else; @inbounds return f[i, j, k] - f[i, j-1, k]; end; end. @inline function δz_c2f(g::RegularCartesianGrid, f, i, j, k); if k == 1; return 0; else; @inbounds return f[i, j, k-1] - f[i, j, k]; end; end. @inline δx²_c2f2c(g::RegularCartesianGrid, f, i, j, k) = δx_c2f(g, f, incmod1(i, g.Nx), j, k) - δx_c2f(g, f, i, j, k). @inline function δy²_c2f2c(g::RegularCartesianGrid, f, i, j, k); if j == g.Ny; return -δy_c2f(g, f, i, j, k); else; return δy_c2f(g, f, i, j+1, k) - δy_c2f(g, f, i, j, k); end; end. @inline function δz²_c2f2c(g::RegularCartesianGrid, f, i, j, k); if k == g.Nz; return δz_c2f(g, f, i, j, k); else; return δz_c2f(g, f, i, j, k) - δz_c2f(g, f, i, j, k+1); end; end. @inline function ∇²_pnn(g::RegularCartesianGrid, f, i, j, k); 	(δx²_c2f2c(g, f, i, j, k) / g.Δx^2) + (δy²_c2f2c(g, f, i, j, k) / g.Δy^2) + (δz²_c2f2c(g, f, i, j, k) / g.Δz^2); end. function ∇²_pnn!(grid::RegularCartesianGrid, f, ∇²f); @loop for k in (1:grid.Nz; blockIdx().z); @loop for j in (1:grid.Ny; (blockIdx().y - 1) * blockDim().y + threadIdx().y); @loop for i in (1:grid.Nx; (blockIdx().x - 1) * blockDim().x + threadIdx().x); @inbounds ∇²f[i, j, k] = ∇²_pnn(grid, f, i, j, k); end; end; end. @s",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/100#issuecomment-483896344:293,Test,Test,293,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/100#issuecomment-483896344,1,['Test'],['Test']
Testability,Can the `test_smag_divflux_finiteness` test be enabled or should we remove it?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/260#issuecomment-520783334:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/260#issuecomment-520783334,1,['test'],['test']
Testability,Can we add a test that uses `OrthogonalSphericalShellGrids`?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2314136686:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3744#issuecomment-2314136686,1,['test'],['test']
Testability,"Can we just compare 1) the topology and 2) all of the nodes? I think that would be sufficient to determine equality. I'm worried if we don't explicitly check the topology that we might run into some edge cases where the nodes / spacings are the same but the topologies are different (these would possibly be pathological with 0 halo in a periodic / flat direction, but still good to explicitly check I think...). When comparing numeric equality for nodes, we should add `@allowscalar` as needed there. I think we should add a test that equality works as expected, as well. We should also add a test for checkpointing on stretched grids. I think its ok if we don't support a numeric equality for other grids --- we can build them up one at a time. They are specific to each grid. The main downside here is that we need to refactor our grid implementation to have a single `RectilinearGrid` (there's no reason to have different rectilinear grid types, since we can dispatch on the case that certain directions have constant spacing easily). So this code will go away when we make that change. But I think it's a useful incremental improvement for now while we still have two rectilinear grids, so I'm fine to have it go in once it's cleaned up. Because of this:. ```julia; julia> using CUDA. julia> a = rand(2); 2-element Vector{Float64}:; 0.8207604162394306; 0.3815099688071648. julia> b = CuArray(a); 2-element CuArray{Float64, 1}:; 0.8207604162394306; 0.3815099688071648. julia> CUDA.@allowscalar a == b; true; ```. I think that this will work if the checkpointed grid is deserialized onto the CPU, even though `model.grid` is on the GPU. I think this is what we want, so that's fortunate the above works.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945919406:526,test,test,526,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2019#issuecomment-945919406,2,['test'],['test']
Testability,Can we just make the existing tests bigger or do you think we need the MWE specifically?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868848915:30,test,tests,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1769#issuecomment-868848915,1,['test'],['tests']
Testability,Can you add a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3695#issuecomment-2278417104:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3695#issuecomment-2278417104,1,['test'],['test']
Testability,"Can you benchmark compared to the (wrong, but ideal) version `dot(parent(a), parent(b))`. Ideally our implementation reaches that. That should work on GPU too.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2725#issuecomment-1238522691:8,benchmark,benchmark,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2725#issuecomment-1238522691,1,['benchmark'],['benchmark']
Testability,"Can you run the experiment on this branch?. I don't think it's fair to take a PR someone else worked on and use it to open a new PR with your own commits. `git cherry-pick` might have been better. PR #438 shouldn't have been left sitting for that long but I think we should get it merged. If this PR adds tests, we should `git cherry-pick` those commits into the `more-coriolis-options` branch. Agree it would be nice to have some sanity tests for beta plane like tracer conservation.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/490#issuecomment-544474976:305,test,tests,305,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/490#issuecomment-544474976,2,['test'],['tests']
Testability,Can you run the function (produce a bug with code rather than merely by reading it)? Is there a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2309541203:96,test,test,96,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3731#issuecomment-2309541203,1,['test'],['test']
Testability,"Can you tell us a bit more about your system?. What is `versioninfo(verbose=true)` and `] status -m`?. Was there anything more printed above the message that precompilation; failed?. One thing you might want to try is using Julia 1.10, instead of 1.9, but; right now I don't have information to pinpoint what is causing the; segmentation fault. On Wed, Jul 17, 2024, 12:23 Logan Knudsen ***@***.***> wrote:. > Update: I have been able to reduce the error to be a procompiling error in; > oceananigans.jl:; >; > ERROR: LoadError: Failed to precompile Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09] to ""/glade/u/home/knudsenl/.julia/compiled/v1.9/Oceananigans/jl_AMNEzH"".; > Stacktrace:; > [1] error(s::String); > @ Base ./error.jl:35; > [2] compilecache(pkg::Base.PkgId, path::String, internal_stderr::IO, internal_stdout::IO, keep_loaded_modules::Bool); > @ Base ./loading.jl:2300; > [3] compilecache; > @ ./loading.jl:2167 [inlined]; > [4] _require(pkg::Base.PkgId, env::String); > @ Base ./loading.jl:1805; > [5] _require_prelocked(uuidkey::Base.PkgId, env::String); > @ Base ./loading.jl:1660; > [6] macro expansion; > @ ./loading.jl:1648 [inlined]; > [7] macro expansion; > @ ./lock.jl:267 [inlined]; > [8] require(into::Module, mod::Symbol); > @ Base ./loading.jl:1611; > in expression starting at /glade/derecho/scratch/knudsenl/BottomBoundaryLayer/testcode.jl:1; >; > I have been trying to make sure that everything is up to date, and I am; > running on Julia version 1.9.2. My code is just; >; > using Oceananingans; >; > as I have been trying to get the library to loas properly. Does anyone; > have any experience with this error or does it make things any clearer?; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233710372>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AABDO2XAIMUIHCDCBIJA4NLZM2K75AVCNFSM6AAAAABK643UJWVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDEMZTG4YTAMZXGI",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233731098:373,Log,Logan,373,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3655#issuecomment-2233731098,1,['Log'],['Logan']
Testability,"Caught a file using CRLF line endings so I converted it to LF. @glwagner Don't worry about the `test_fields.jl` diff, I only added this test:; https://github.com/climate-machine/Oceananigans.jl/pull/635/files#diff-8f5b49779286e5727c493613d03d2d1bR61-R67",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/635#issuecomment-588428140:136,test,test,136,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/635#issuecomment-588428140,1,['test'],['test']
Testability,"Certianly. All I changed is added in the bit with `advection=WENO5()`. . ```; function benchmark_incompressible_model(Arch, FT, N); grid = RegularRectilinearGrid(FT, size=(N, N, N), extent=(1, 1, 1)); model = IncompressibleModel(architecture=Arch(), float_type=FT, advection=WENO5(), grid=grid). time_step!(model, 1) # warmup. trial = @benchmark begin; @sync_gpu time_step!($model, 1); end samples=10. return trial; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869744904:336,benchmark,benchmark,336,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1780#issuecomment-869744904,1,['benchmark'],['benchmark']
Testability,Change log level for doctesting with warnings,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3707:7,log,log,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3707,1,['log'],['log']
Testability,Change log level for doctesting with warnings take #2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3711:7,log,log,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3711,1,['log'],['log']
Testability,Changed `->` to `to` in the benchmark scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1678:28,benchmark,benchmark,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1678,1,['benchmark'],['benchmark']
Testability,Changed the benchmark scripts slightly but forgot to change the `replace_strings` in `test_benchmarks.jl` so some stuff took way too long and the tests timed out. This has been a problem in the past leading to test slowdowns if we modify a script but forget to change the `replace_strings` in `test_examples.jl`. To fix this problem I merged `run_example` and `run_benchmark` into one `run_script` utility that throws an error if a string replacement in `replace_strings` is not found. So we can catch these mistakes before they silently slow down our tests. So there's some feature creep in this PR...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672087156:12,benchmark,benchmark,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/850#issuecomment-672087156,4,"['benchmark', 'test']","['benchmark', 'test', 'tests']"
Testability,Changes in PR #2740 made the global simulation crash. These changes will be reverted for the moment. They will be reintroduced after more testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2778:138,test,testing,138,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2778,1,['test'],['testing']
Testability,Check out the test for file splitting with `JLD2OutputWriter`:. https://github.com/CliMA/Oceananigans.jl/blob/2cd91ab4f42e528981422171d6ab2f323a1ce044/test/test_jld2_output_writer.jl#L42. We'll want a practically identical test for a `max_filesize` feature with `NetCDFOutputWriter`,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1464334034,3,['test'],['test']
Testability,Checking to see if making scalar diffusivity mutable broke CI tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3407:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3407,1,['test'],['tests']
Testability,"Checkpointing, NetCDF, and golden master tests",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/140:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/140,1,['test'],['tests']
Testability,"Cherry picked some commits from PR #381 to fix the example test. One thing that's going to be annoying about testing example scripts is that they evaluate in global scope when including them, so it's going to be easy to get variable name conflicts... Not sure how to get around this as we agreed not to use functions for examples.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/424:59,test,test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/424,2,['test'],"['test', 'testing']"
Testability,Clean up benchmark scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/380:9,benchmark,benchmark,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/380,1,['benchmark'],['benchmark']
Testability,Clean up convergence test scripts and plots,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/881:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/881,1,['test'],['test']
Testability,Cleaning up tests for efficiency,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1990:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1990,1,['test'],['tests']
Testability,"Cleans up the file organization, test, import statements, and some formatting irregularities. Resolves #1521 .",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1525:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1525,1,['test'],['test']
Testability,Cleanup in the implicit free surface tests + add `matrix_implicit_free_surface_solver_tests`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2181:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2181,1,['test'],['tests']
Testability,"CliMA/Oceananigans.jl/blob/fjp/multithreaded-benchmarks/benchmark/weak_scaling_shallow_water_model_serial.jl; Besides the benchmark scripts themselves, everything else was up to date with the latest version of master. Here are the results:; ```; Oceananigans v0.58.8; Julia Version 1.6.1; Commit 6aaedecc44 (2021-04-23 05:59 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Platinum 8260 CPU @ 2.40GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); Environment:; EBVERSIONJULIA = 1.6.1; JULIA_DEPOT_PATH = :; EBROOTJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.1; EBDEVELJULIA = /cvmfs/soft.computecanada.ca/easybuild/software/2020/avx2/Core/julia/1.6.1/easybuild/avx2-Core-julia-1.6.1-easybuild-devel; JULIA_LOAD_PATH = :. Shallow water model weak scaling with multithreading benchmark; ┌───────────────┬─────────┬─────────┬─────────┬─────────┬─────────┬───────────┬─────────┬─────────┐; │ size │ threads │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────┼─────────┼─────────┼─────────┼─────────┼───────────┼─────────┼─────────┤; │ (8192, 512) │ 1 │ 1.453 s │ 1.454 s │ 1.454 s │ 1.456 s │ 1.37 MiB │ 2318 │ 4 │; │ (8192, 1024) │ 2 │ 2.909 s │ 2.933 s │ 2.933 s │ 2.956 s │ 21.52 MiB │ 1303192 │ 2 │; │ (8192, 2048) │ 4 │ 2.096 s │ 2.115 s │ 2.125 s │ 2.165 s │ 16.38 MiB │ 942343 │ 3 │; │ (8192, 4096) │ 8 │ 2.178 s │ 2.198 s │ 2.218 s │ 2.280 s │ 17.82 MiB │ 987092 │ 3 │; │ (8192, 8192) │ 16 │ 2.201 s │ 2.218 s │ 2.216 s │ 2.230 s │ 18.33 MiB │ 922426 │ 3 │; │ (8192, 16384) │ 32 │ 2.598 s │ 2.615 s │ 2.615 s │ 2.632 s │ 24.29 MiB │ 1116849 │ 2 │; └───────────────┴─────────┴─────────┴─────────┴─────────┴─────────┴───────────┴─────────┴─────────┘. Shallow water model weak multithreading scaling speedup; ┌───────────────┬─────────┬──────────┬────────────┬─────────┬─────────┐; │ size │ threads │ slowdown │ efficiency │ memory │ allocs │; ├───────────────┼───────",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861:1145,benchmark,benchmark,1145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861,1,['benchmark'],['benchmark']
Testability,CliMA/Oceananigans.jl/commit/d80be8cf1db4f97515346ae3140b7cbf3f2ddab4?el=desc) will **decrease** coverage by `2.41%`.; > The diff coverage is `n/a`. [![Impacted file tree graph](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/graphs/tree.svg?width=650&height=150&src=pr&token=1eev6VdKD0)](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=tree). ```diff; @@ Coverage Diff @@; ## master #979 +/- ##; ==========================================; - Coverage 72.54% 70.13% -2.42% ; ==========================================; Files 210 148 -62 ; Lines 6076 3154 -2922 ; ==========================================; - Hits 4408 2212 -2196 ; + Misses 1668 942 -726 ; ```. | [Impacted Files](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979?src=pr&el=tree) | Coverage Δ | |; |---|---|---|; | [src/Utils/versioninfo.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-c3JjL1V0aWxzL3ZlcnNpb25pbmZvLmps) | `37.50% <0.00%> (-31.25%)` | :arrow_down: |; | [benchmark/benchmark\_forcing\_functions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya19mb3JjaW5nX2Z1bmN0aW9ucy5qbA==) | | |; | [benchmark/benchmark\_tracers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya190cmFjZXJzLmps) | | |; | [test/test\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3NvbHZlcnMuamw=) | | |; | [...nceTests/OneDimensionalCosineAdvectionDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvT25lRGltZW5zaW9uYWxDb3NpbmVBZHZlY3Rpb25EaWZmdXNpb24uamw=) | | |; | [test/test\_grids.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2dyaWRzLmps) | | |; | [...ergence\_tests/ConvergenceTests/ConvergenceTests.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/979/diff,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574:1203,benchmark,benchmark,1203,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/979#issuecomment-699227574,2,['benchmark'],['benchmark']
Testability,"Closes #1878. I ran the most relevant tests locally and they all passed for me (didn't have time/resources to run all), but I'd appreciate some thorough reviews in this case since ""diffusivities"" is a word that happens a lot in the repo so it's easy to miss something when making such a change.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1884:38,test,tests,38,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1884,1,['test'],['tests']
Testability,Closes #2931 . We could add a test...,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2933:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2933,1,['test'],['test']
Testability,"Closes #3226 . It'd make sense to test this, let's see first if it does the trick.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3228:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3228,1,['test'],['test']
Testability,"Closes https://github.com/CliMA/Oceananigans.jl/issues/1392. CC: @glwagner @ali-ramadhan . Sorry that the issue I create went so long! I was doing a bunch of wrong things but in the end it was pretty straightforward. At this point all I have is a working example of `WindowedSpatialAverage` in the sandbox and I'm creating this PR for two reasons:. - Getting feedback on possible edge cases, and maybe figuring out how the `NetCDFOutput` can infer the dimensions correctly; - Figuring out where to include this; - This isn't necessarily attached to an `OutputWriter`, so it feels odd to add it there; - Everywhere else in Oceananigans also feels inappropriate ; - Maybe add it to Oceanostics?; . Anyway, feedback is appreciated. . Also, big thanks to @ali-ramadhan for helping me out with this one.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397:298,sandbox,sandbox,298,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397,1,['sandbox'],['sandbox']
Testability,"Closes https://github.com/CliMA/Oceananigans.jl/issues/3051. Following up on #3394, this PR tries to do the first two tasks, fix the tendencies in the shallow water model and bring back the regression tests.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3486:201,test,tests,201,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3486,1,['test'],['tests']
Testability,Closing as this issue is not resolvable but will serve as inspiration for future tests.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-478094321:81,test,tests,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/81#issuecomment-478094321,1,['test'],['tests']
Testability,Closing as we now use functions so it should work on a stretched grid (but the dynamics might not be rigorously tested). E.g. https://github.com/CliMA/Oceananigans.jl/blob/9b52f3f911d26a66c75f1c3cb58fdd0a1cecb131/src/BoundaryConditions/fill_halo_regions_value_gradient.jl#L87,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/667#issuecomment-800748325:112,test,tested,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/667#issuecomment-800748325,1,['test'],['tested']
Testability,"Closing this because; * We have a test where the pressure solver's output is tested against an analytic solution #227 ; * We have CPU and GPU regression tests that show they're doing the same thing.; * We have compared outputs for free convection MITgcm output, although it would be good to test this again following #215 and #228, #229.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/168#issuecomment-500234265:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/168#issuecomment-500234265,4,['test'],"['test', 'tested', 'tests']"
Testability,"Closing this issue because we do have separate environments, we just don't really use them as you have to specify them manually which is great for CI and testing, but not so great for new users without a GPU...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/79#issuecomment-500234433:154,test,testing,154,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/79#issuecomment-500234433,1,['test'],['testing']
Testability,Cnh/full cube implicit solver test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1593:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1593,1,['test'],['test']
Testability,"Co-authored-by: Francis J. Poulin <fpoulin@uwaterloo.ca>. I've added back the threaded benchmark written by @francispoulin in an older branch. I also added plots to it.; There is actually already a threaded benchmark script:; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_multithreading.jl; https://github.com/CliMA/Oceananigans.jl/blob/master/benchmark/benchmark_multithreading_single.jl; They differ in that the one I'm adding is essentially weak scaling shallow water model, while the one that's already there is strong scaling nonhydrostatic model.; If everyone thinks that it's appropriate, then I'll likely change the name of the extant benchmarking scripts to more accurately reflect their content. ; I would likely also do some more minor changes such as changing the default grid size down from 512^3, adding in plots, and configuring the output tables a bit more.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1881:87,benchmark,benchmark,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1881,5,['benchmark'],"['benchmark', 'benchmarking']"
Testability,Codecov and Coveralls coverage statistics do not account for GPU tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/138:65,test,tests,65,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/138,1,['test'],['tests']
Testability,Collaboration with @francispoulin. Todo:. - [x] Add time-stepping test with `advection=nothing` in `IncompressibleModel`; - [x] Add time-stepping test with `advection=nothing` in `ShallowWaterModel`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1270:66,test,test,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1270,2,['test'],['test']
Testability,"Commented out the first plot of the buoyancy and was able to get past this. However, there's a correctness bug it seems.. It works fine with the CPU backend. I'll test it out on an Nvidia GPU tomorrow morning. ```; [ Info: Running the simulation...; [ Info: Initializing simulation...; [00.00%] i: 0, t: 0 seconds, wall time: 20.432 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 20 minutes; [ Info: ... simulation initialization complete (23.694 seconds); [ Info: Executing initial time step...; [ Info: ... initial time step complete (12.989 seconds).; [ Info: time = NaN, iteration = 100: NaN found in field u. Stopping simulation.; [00NaN%] i: 100, t: NaN days, wall time: 27.465 seconds, max(u): ( NaN, 0.000e+00, 0.000e+00) m/s, next Δt: NaN days; [ Info: Simulation completed in 41.653 seconds; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1947397850:163,test,test,163,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-1947397850,1,['test'],['test']
Testability,Comments or docstrings for cubed sphere test functions,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3242:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3242,1,['test'],['test']
Testability,"CompatHelper: add new compat entry for BenchmarkTools at version 1, (keep existing compat)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2517:39,Benchmark,BenchmarkTools,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2517,2,['Benchmark'],['BenchmarkTools']
Testability,"Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler/utils.jl:183 [inlined]; [3] calling_conv_fixup(builder::LLVM.IRBuilder, val::LLVM.AddrSpaceCastInst, tape::LLVM.PointerType); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler/utils.jl:183; [4] enzyme_custom_common_rev(forward::Bool, B::LLVM.IRBuilder, orig::LLVM.CallInst, gutils::Enzyme.Compiler.GradientUtils, normalR::Ptr{Nothing}, shadowR::Ptr{Nothing}, tape::LLVM.ExtractValueInst); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:4610; [5] enzyme_custom_rev(B::LLVM.IRBuilder, orig::LLVM.CallInst, gutils::Enzyme.Compiler.GradientUtils, tape::LLVM.ExtractValueInst); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:4770; [6] (::Enzyme.Compiler.var""#201#202"")(B::Ptr{LLVM.API.LLVMOpaqueBuilder}, OrigCI::Ptr{LLVM.API.LLVMOpaqueValue}, gutils::Ptr{Nothing}, tape::Ptr{LLVM.API.LLVMOpaqueValue}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:6657; [7] EnzymeCreatePrimalAndGradient(logic::Enzyme.Logic, todiff::LLVM.Function, retType::Enzyme.API.CDIFFE_TYPE, constant_args::Vector{…}, TA::Enzyme.TypeAnalysis, returnValue::Bool, dretUsed::Bool, mode::Enzyme.API.CDerivativeMode, width::Int64, additionalArg::Ptr{…}, forceAnonymousTape::Bool, typeInfo::Enzyme.FnTypeInfo, uncacheable_args::Vector{…}, augmented::Ptr{…}, atomicAdd::Bool); @ Enzyme.API ~/Projects/Enzymantics/Enzyme.jl/src/api.jl:141; [8] enzyme!(job::GPUCompiler.CompilerJob{…}, mod::LLVM.Module, primalf::LLVM.Function, TT::Type, mode::Enzyme.API.CDerivativeMode, width::Int64, parallel::Bool, actualRetType::Type, wrap::Bool, modifiedBetween::Tuple{…}, returnPrimal::Bool, jlrules::Vector{…}, expectedTapeType::Type, loweredArgs::Set{…}, boxedArgs::Set{…}); @ Enzyme.Compiler ~/Projects/Enzymantics/Enzyme.jl/src/compiler.jl:7715; [9] codegen(output::Symbol, job::GPUCompiler.CompilerJob{…}; libraries::Bool, deferred_codegen::Bool, optimize::Bool, toplevel::Bool, strip::Bool, validate::Bool, only_en",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259:1395,log,logic,1395,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3360#issuecomment-1791250259,1,['log'],['logic']
Testability,Complete implementation of `HydrostaticFreeSurfaceModel` regression test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2036:68,test,test,68,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2036,1,['test'],['test']
Testability,"Configuration is done with keyword arguments (see below). In particular, the exename keyword; can be used to specify the path to the julia binary on the remote machine(s). machines is a vector of ""machine specifications"" which are given as strings of the form [user@]host[:port] [bind_addr[:port]]. user defaults to; current user and port to the standard SSH port. If [bind_addr[:port]] is specified, other workers will connect to this worker at the specified; bind_addr and port. It is possible to launch multiple processes on a remote host by using a tuple in the machines vector or the form (machine_spec, count), where; count is the number of workers to be launched on the specified host. Passing :auto as the worker count will launch as many workers as the number; of CPU threads on the remote host. Examples:. addprocs([; ""remote1"", # one worker on 'remote1' logging in with the current username; ""user@remote2"", # one worker on 'remote2' logging in with the 'user' username; ""user@remote3:2222"", # specifying SSH port to '2222' for 'remote3'; (""user@remote4"", 4), # launch 4 workers on 'remote4'; (""user@remote5"", :auto), # launch as many workers as CPU threads on 'remote5'; ]). Keyword arguments:. • tunnel: if true then SSH tunneling will be used to connect to the worker from the master process. Default is false. • multiplex: if true then SSH multiplexing is used for SSH tunneling. Default is false. • ssh: the name or path of the SSH client executable used to start the workers. Default is ""ssh"". • sshflags: specifies additional ssh options, e.g. sshflags=`-i /home/foo/bar.pem`. • max_parallel: specifies the maximum number of workers connected to in parallel at a host. Defaults to 10. • shell: specifies the type of shell to which ssh connects on the workers.; • shell=:posix: a POSIX-compatible Unix/Linux shell (sh, ksh, bash, dash, zsh, etc.). The default.; • shell=:csh: a Unix C shell (csh, tcsh).; • shell=:wincmd: Microsoft Windows cmd.exe. • dir: specifies the working direct",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1579765636:2335,log,logging,2335,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3135#issuecomment-1579765636,2,['log'],['logging']
Testability,Continuous CPU + GPU benchmarks,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/67:21,benchmark,benchmarks,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/67,1,['benchmark'],['benchmarks']
Testability,Convergence test and validation experiment Buildkite pipeline,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1223:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1223,1,['test'],['test']
Testability,Convergence test for advection schemes in shallow water,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1648:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1648,1,['test'],['test']
Testability,Convergence tests pipeline takes several hours to finish,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1420:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1420,1,['test'],['tests']
Testability,"Converted `benchmark_static_ocean.jl` to do a strong scaling test on a 256³ simulation when `Threads.nthreads() > 1`. Results are pretty sweet for multithreading that we basically got for free from KernelAbstractions.jl. Not sure what kind of speedups to expect for multithreading though. Maybe @leios, @christophernhill, or @vchuravy have a better idea. Some results on number of threads and wall clock time per time step:. # Tartarus. ```zsh; #!/bin/zsh; for threads in 1 4 8 16 24 32 40; ~/julia-1.5.0/bin/julia --project -t $threads benchmark_static_ocean.jl; ```. ```; Julia 1.5.0 + Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz. 1 thread: 3.78 s; 4 threads: 1.35 s (2.8x); 8 threads: 839 ms (4.5x); 16 threads: 585 ms (6.5x); 24 threads: 551 ms (6.9x); 32 threads: 539 ms (7.0x); 40 threads: 483 ms (10.6x); 48 threads: 479 ms (10.7x); ```. # Satori. ```bash; #!/bin/bash; for threads in 1 4 8 16 32 64 128 160; do JULIA_NUM_THREADS=$threads julia --project benchmark_static_ocean.jl; done; ```. ```; Julia 1.4.1 + IBM Power System AC922 (8335-GTH). 1 thread: 5.13 s; 4 threads: 2.44 s (2.1x); 8 threads: 1.35 s (3.8x); 16 threads: 796 ms (6.4x); 32 threads: 637 ms (8.0x); 64 threads: 503 ms (10.2x); 128 threads: 501 ms (10.2x); 160 threads: 511 ms (10.0x); ```. A beautiful scene from Satori:. ![image](https://user-images.githubusercontent.com/20099589/91370150-96ad1100-e7db-11ea-9bf2-12e40de5ff93.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/869:61,test,test,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/869,1,['test'],['test']
Testability,Cool! Two other possible bugs I found:. https://github.com/CliMA/Oceananigans.jl/blob/1522ae47996a4df9092a27e0d32bfffc1bf53fad/test/test_enzyme.jl#L331. I think should be `dedν[1][1]` instead. And. https://github.com/CliMA/Oceananigans.jl/blob/1522ae47996a4df9092a27e0d32bfffc1bf53fad/test/test_enzyme.jl#L261-L264. produces an out of bounds error with the z axis. I replaced `3` with `end`. Happy to push those changes.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438727494:127,test,test,127,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438727494,2,['test'],['test']
Testability,"Copy pasting from @glwagner's fork. Adaptive time stepping with a `TimeStepWizard` that computes time steps for you. I just need to modify `time_step!` with a flag like `first_step_Euler=true` to take forward Euler steps at first iteration and when changing the time step, but with the ability to turn it off for tests where we actually don't want to do this. . I'll add some more docstrings and a couple of tests. cc @sandreza . Resolves #189",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/297:313,test,tests,313,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/297,2,['test'],['tests']
Testability,Correct logic for `AveragedTimeInterval`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3720:8,log,logic,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3720,1,['log'],['logic']
Testability,Correct logic in `AveragedTimeInterval`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3719:8,log,logic,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3719,1,['log'],['logic']
Testability,Could also change some of the examples and some tests to use flat dimensions now. Resolves #1023 ; Resolves #1026,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1024:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1024,1,['test'],['tests']
Testability,Could be good to put together a benchmarking script for `ContinuousForcing` and `Relaxation` so that we can test ideas.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875598604:32,benchmark,benchmarking,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1827#issuecomment-875598604,2,"['benchmark', 'test']","['benchmarking', 'test']"
Testability,Could be worth contacting the authors of that draft to figure out whether they tested statistics or not. I'm also not sure if the paper has been published. More info definitely welcome.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1705#issuecomment-876058816:79,test,tested,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1705#issuecomment-876058816,1,['test'],['tested']
Testability,"Could lead to confusion, e.g. in #579. Thanks for helping locate this issue @masonrogers14. Easy PR but might involve refactoring some tests?. https://github.com/climate-machine/Oceananigans.jl/blob/588890004e69cfc7db10472b12a9840b8a9ad7b6/src/boundary_conditions.jl#L339",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/582:135,test,tests,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/582,1,['test'],['tests']
Testability,Could possibly nuke the deep convention test (the example was already nuked) and close this.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/220#issuecomment-497099666:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/220#issuecomment-497099666,1,['test'],['test']
Testability,"Couple thoughts from a discussion with @ali-ramadhan today:. To get `DiskTimeSeries` working with `JLD2OutputWriter`, we'll need to 1) serialize the grid (mostly for convenience...) and 2) serialize ""meta"" for fields by adding lines like. ```julia; file[""serialized/grid""] = model.grid. for (i, out) in enumerate(outputs); field_name = keys(outputs)[i]; out isa AbstractField && (file[""timeseries/$field_name/meta/location""] = location(out)); end; ```. to the `JLD2OutputWriter` constructor. We need a bit of extra work for `ReducedField`... though on second though it might be easier to build this logic into `DiskTimeSeries`. Some logic for serializing boundary conditions might be nice too (sometimes, but not always possible). This, plus changing the default `FieldSlicer` to `nothing`, are the primary changes that's needed for `JLD2OutputWriter`, I think. For `NetCDFOutputWriter`, the field location needs to be saved as a string in the field's attributes. I think we have what we need to reconstruct the grid otherwise. @ali-ramadhan can comment. I think we also want to make the default `field_slicer` to `nothing` so that the framework is friendly. The broadcasting infrastructure being developed on #1596 will make analysis with Oceananigans fields even nicer (since we can bypass `ComputedField` and launch kernels / make computations immediately via julia's broadcasting syntax).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-821749204:599,log,logic,599,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1493#issuecomment-821749204,2,['log'],['logic']
Testability,Create a wiki with information / notes on how to setup buildkite for local testing?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1046:75,test,testing,75,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1046,1,['test'],['testing']
Testability,Created a PR in https://github.com/CliMA/Oceananigans.jl/pull/3576 to see if tests pass (i.e. if `NetCDFWriter` still works with that trivial change).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2091129562:77,test,tests,77,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3460#issuecomment-2091129562,1,['test'],['tests']
Testability,"CuArray{Float64,3},CuArray{Float64,3},CuArray{Float64,3}}},CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_parameterized_forcing(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:40; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; NetCDF [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:524; Got exception outside of a @test; MethodError: no method matching device(::CuContext); Closest candidates are:; device() at /home/ancellin/.julia/packages/CUDA/d6WNR/src/state.jl:225; Stacktrace:; [1] |>(::CuContext, ::typeof(CUDA.device)) at ./operators.jl:823; [2] versioninfo_with_gpu() at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/Utils/versioninfo.jl:9; [3] write_grid_and_attributes(::IncompressibleModel{Oceananigans.TimeSteppers.AdamsBashforthTimeStepper{Float64,NamedTuple{(:u, :v, :w, :T, :S)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:76543,Test,Test,76543,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,2,['Test'],['Test']
Testability,CubedSphere grid construction + tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2871:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2871,1,['test'],['tests']
Testability,"Curiously, I think the slowdown only occurs when the model grows in the vertical dimension. This suggests that the culprit may be one of the vertical integral kernels?. Some rough benchmarks from `@time time_step!(model, 1)`:; ```; 128x128x128: 2.75 seconds; 256x256x128: 12.5 seconds (~4.5x slower, makes sense); 128x128x1024: Still waiting after 5 minutes lol; ```. I did a quick profile on the CPU; ```julia; using Profile, Oceananigans; model = IncompressibleModel(grid=RegularCartesianGrid(size=(256, 256, 128), extent=(1, 1, 1))); @time time_step!(model, 1) # precompile; @time time_step!(model, 1); @profile time_step!(model, 1); Profile.print(); ```; Full profile output is here: https://gist.github.com/ali-ramadhan/d920ec50d0e40332121697f71b91eb36. I don't know how good these profiles are but it's showing a TON of hits on `cpu__compute_w_from_continuity!` which is a vertical integral kernel (consistent with the rough benchmarks). Actually looking at the kernel I think this is a super easy case of accidentally launching the `compute_w_from_continuity!` kernel `Nz` times instead of one time lol.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/805#issuecomment-662408734:180,benchmark,benchmarks,180,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/805#issuecomment-662408734,2,['benchmark'],['benchmarks']
Testability,"Currently I think Travis and GitLab upload them but since GPU tests are moving to Buildkite, coverage artifacts should be uploaded from there.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1052:62,test,tests,62,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1052,1,['test'],['tests']
Testability,"Currently a work in progress, but it has one validation experiment (Rossby-Haurwitz) and one ""for fun"" dynamics test (Bickley Jet)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1570:112,test,test,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1570,1,['test'],['test']
Testability,"Currently only four closures are being tested. ```; Testing that time stepping works [CPU(), Float32, ConstantIsotropicDiffusivity]...; Testing that time stepping works [CPU(), Float32, ConstantAnisotropicDiffusivity]...; Testing that time stepping works [CPU(), Float32, SmagorinskyLilly]...; Testing that time stepping works [CPU(), Float32, VerstappenAnisotropicMinimumDissipation]...; Testing that time stepping works [CPU(), Float64, ConstantIsotropicDiffusivity]...; Testing that time stepping works [CPU(), Float64, ConstantAnisotropicDiffusivity]...; Testing that time stepping works [CPU(), Float64, SmagorinskyLilly]...; Testing that time stepping works [CPU(), Float64, VerstappenAnisotropicMinimumDissipation]...; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/539:39,test,tested,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/539,9,"['Test', 'test']","['Testing', 'tested']"
Testability,"Currently the SplitExplicit is a bit problematic. I showcase the issue below. ```Julia; using Oceananigans, Logging, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: update_state!; using Oceananigans.MultiRegion; using Oceananigans.MultiRegion: reconstruct_global_field. Logging.disable_logging(Logging.Warn). function diffusion_cosine_test(grid; P = XPartition, regions, closure, field_name); model = HydrostaticFreeSurfaceModel(grid = MultiRegionGrid(grid, partition = P(regions)),; closure = closure,; tracers = :c,; coriolis = nothing, buoyancy=nothing). initial_condition(x, y, z) = cos(2x). f = fields(model)[field_name]. @apply_regionally set!(f, initial_condition). update_state!(model). Δt = 1e-6 * grid.Lz^2 / closure.κ. for _ = 1:10; time_step!(model, Δt); end. return f; end. Nx = Ny = 8. grid = RectilinearGrid(size = (Nx, Ny, 1), halo = (3, 3, 3),; topology = (Bounded, Bounded, Bounded),; x = (0, 1), y = (0, 1), z = (0, 1)). closure = ScalarDiffusivity(ν = 1, κ = 1). field_names = [:u, :v, :c]. for field_name in field_names; println(""Testing for $(string(field_name)):""). fs = diffusion_cosine_test(grid; closure, regions = 1, field_name); fs = Array(interior(fs)). f = diffusion_cosine_test(grid; closure, regions = 2, field_name); f = Array(interior(reconstruct_global_field(f))). println("" Comparing diffusion of $(string(field_name)) on single and multi-region grid:""); @show all(f .≈ fs); end; ```. gives. ```julia; Testing for u:; Comparing diffusion of u on single and multi-region grid:; all(f .≈ fs) = false; Testing for v:; Comparing diffusion of v on single and multi-region grid:; all(f .≈ fs) = false; Testing for c:; Comparing diffusion of c on single and multi-region grid:; all(f .≈ fs) = true; ```. Thus, the test seems to be OK for diffusing tracer but **not** for u or v!. cc @simone-silvestri",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-1999418977:108,Log,Logging,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3514#issuecomment-1999418977,9,"['Log', 'Test', 'test']","['Logging', 'Test', 'Testing', 'test']"
Testability,"Currently the example tests are ""broken"", i.e. not run because having PyPlot as a dependency caused the Travis CI pipeline to frequently fail for different reasons. I still really like matplotlib and PyPlot but after playing around with Plots.jl I think it'll be worth switching over. As it doesn't get installed through conda it should be more stable on Travis. Would be really cool if Documenter.jl works with Plots.jl [animations](http://docs.juliaplots.org/latest/animations/). I'll give it a try.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/536:22,test,tests,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/536,1,['test'],['tests']
Testability,"Cut cells use piecewise linear representations of bathymetry (as opposed to full or partial cells which use piecewise constant ones). Here’s a tentative work plan for implementing cut cells:. 1. Develop the following test cases: . (a) Tracer advection with no momentum on a seamount ([Adcroft](https://journals.ametsoc.org/view/journals/mwre/125/9/1520-0493_1997_125_2293_rotbsc_2.0.co_2.xml) or [Schär](https://journals.ametsoc.org/view/journals/mwre/130/10/1520-0493_2002_130_2459_antfvc_2.0.co_2.xml) configuration); ; (b) Internal wave or overflow with momentum;; ; Run these test cases for full and partial cells. As suggested by @jm-c, compare a simulation using low vertical resolution (~10 vertical layers) and partial cells with one using high vertical resolution (~500 vertical layers) and full cells at the same horizontal resolution (to verify the effectiveness of partial cells). To ensure that a stratified ocean remains at rest, implement the technique in [Lin](https://rmets.onlinelibrary.wiley.com/doi/abs/10.1002/qj.49712354214?casa_token=4s6PejUyFLMAAAAA:RtWYxrnbDlgN8ZzMepSndBPomZX_nlXMFUWhU5nCMDE6qeyN2fWb5fb2QxQFUPYTCqZVjzG2jtpGPFs) for partial cells. . 2. Implement two-dimensional cut cells in the y-z plane:. (a) Implement `CutCellBottom` in ImmersedBoundary module similar to PartialCellBottom;; (b) Implement a special compute_w_from_continuity for `CutCellBottom`. ; https://github.com/CliMA/Oceananigans.jl/blob/8e6b5cd540b7a710955edf9846959966efbb6ea0/src/Models/HydrostaticFreeSurfaceModels/compute_w_from_continuity.jl#L15-L16. (c) Implement the ""algorithm"" for partial cells to compute the hydrostatic pressure for `CutCellBottom`.; https://github.com/CliMA/Oceananigans.jl/blob/8e6b5cd540b7a710955edf9846959966efbb6ea0/src/Models/NonhydrostaticModels/update_hydrostatic_pressure.jl#L24. 3. Extend the cut cell implementation to 3D and consider improving the pressure gradient calculation. . # References. [Advection on Cut-Cell Grids for an Idealized Mountain of Cons",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3123:217,test,test,217,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3123,2,['test'],['test']
Testability,Cut down the examples. Moved stuff into a sandbox.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/230:42,sandbox,sandbox,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/230,1,['sandbox'],['sandbox']
Testability,"Damn, it looks like the tests on the GPU are not working because CUDA is not loaded properly. ; I am trying to address this in #3880. A segmentation fault probably means the MPI is not CUDA-aware. Typically, the MPI that is shipped with MPI_jll is not cuda-aware. A good way to check is; ```julia; julia> using MPI. julia> MPI.has_cuda(); true; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443869989:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3878#issuecomment-2443869989,1,['test'],['tests']
Testability,"Dear Oceananigans team,. We are trying to use Oceananigans to create reference LES solutions for multiple canonical flows. We use a cubical domain and random perturbations to trigger the flow. During our validation tests, we noticed that we could not reproduce the results, i.e., running the same .jl script (same initial flow conditions) leads to different averaged solutions (see attached picture). We ran more than 16 simulations and never obtained the same solution. We tried to set the seed of the random perturbations constant, but this did not solve the problem. Do you observe this problem, and could you help us run reproducible simulations so other users can obtain the same solutions? We attached the .jl file we are using to define the simulations. Best regards,; Filipe Pereira; Luke van Roekel ; Amrapalli Garanaik; Brodie Pearson . ![tec_ww_time_c1](https://user-images.githubusercontent.com/80914369/193599386-11eccb58-2a3f-4a1c-83d6-cde2ea429d00.png). [c16_128_128m(1).jl.zip](https://github.com/CliMA/Oceananigans.jl/files/9698212/c16_128_128m.1.jl.zip)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766:215,test,tests,215,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766,1,['test'],['tests']
Testability,Deep convection and rising thermal bubble regression tests (or _golden master_ tests) have been implemented in PR #140. @SandreOuza Do you have time to work on the Rayleigh–Bénard convection and free convection tests? I think you understand the physics that need to be tested better than anyone.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/136#issuecomment-474866163:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/136#issuecomment-474866163,4,['test'],"['tested', 'tests']"
Testability,Deep convection example and golden master test should switch to BCs.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/220:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/220,1,['test'],['test']
Testability,"Definitely worth thinking about improving our algorithm. With the halo region implementation we have `fill_halo_regions!(::Grid, fields...)` which is somewhat a step towards your 2, but maybe we don't want to mix boundary conditions and distributed parallelization too much. What Palm does, especially step C, sounds a lot like what the MITgcm does I believe. For now though I don't have much time and need to change projects for a little while so I'm going to create a `channel-model` branch and rewrite the operators and Poisson solver to quickly implement a channel model prototype to play around with a bit. Then I'll revisit the `channel-model` branch when I have more time to build the appropriate abstractions, e.g.; ```julia; abstract type GridBoundaryType end; struct Periodic <: GridBoundaryType end; struct Bounded <: GridBoundaryType end; Grid{A<:AbstractArray, R<:AbstractRange, BX<:GridBoundaryType, BY<:GridBoundaryType, BZ<:GridBoundaryType}; ```; and properly merge it into master with tests.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/100#issuecomment-483905865:1003,test,tests,1003,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/100#issuecomment-483905865,1,['test'],['tests']
Testability,Delete some benchmarks that were done on archaic Oceananigans v0.34.0,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2803:12,benchmark,benchmarks,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2803,1,['benchmark'],['benchmarks']
Testability,Depends on functionality in #744 . Needs:. - [x] tests; - [x] possibly more examples in docstrings. Hopefully `Relaxation` will be helpful.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/745:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/745,1,['test'],['tests']
Testability,"Deps.jl. This might be especially good if we want more/larger regression tests. And it wouldn't increase the repo size every time you have to change the regression data. We could maybe the store on engaging? Ideally it should be hosted somewhere with near 100% uptime as we're already maintaining Buildkite which fails sometimes, so we should try to reduce the number of possible failure points in our CI pipeline. ---. Copy pasted some analysis below:. I think regression files currently take up ~17.1 MiB of space in the git repo while a fresh clone of the repo is ~43 MiB (images and convergence plots probably take up several MiB). Here's a listing of all files in git history over 300 KiB (command from https://stackoverflow.com/a/42544963):; ```; 018186272590 328KiB test/data_rayleigh_benard_regression_000001100.jld; 19db949aaae8 328KiB test/data_rayleigh_benard_regression_000001000.jld; 424080660c53 328KiB test/data_rayleigh_benard_regression_000001000.jld; a7e1d690d6b5 328KiB test/data_rayleigh_benard_regression_000001100.jld; 72744372e5c4 361KiB test/regression_tests/data/thermal_bubble_regression.nc; 4ce9699176ee 363KiB test/deep_convection_regression_10.nc; c15f95e2bf3a 364KiB test/regression_tests/data/thermal_bubble_regression.nc; 6f28044e3b56 366KiB docs/src/verification/convergence_plots/gaussian_advection_diffusion_error_convergence.png; 194fdf47099b 392KiB docs/src/verification/convergence_plots/gaussian_advection_diffusion_error_convergence.png; 2f9d5e8650d7 420KiB docs/src/verification/convergence_plots/cosine_advection_diffusion_error_convergence.png; db8f742e7c95 446KiB docs/src/verification/convergence_plots/cosine_advection_diffusion_error_convergence.png; 0de880b2b97b 468KiB docs/src/verification/plots_stratified_couette_flow_stratified_couette_flow_velocity_temperature_slices.png; d277a4e5393b 650KiB test/regression_tests/data/data_rayleigh_benard_regression.jld2; b125bc6f8e9d 709KiB test/regression_tests/data/ocean_large_eddy_simulation_VerstappenAni",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1086:1291,test,test,1291,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1086,1,['test'],['test']
Testability,"Did a quick small strong scaling benchmark on Tartarus (256^3) up to 16 cores but results don't look super great? ~9.5x speedup on 16 cores. Better than multi-threading though. Maybe I'm not benchmarking properly though. Could also be missing some MPI barriers. Should probably learn how to profile MPI code. ```; Incompressible model strong scaling benchmark; ┌─────────────────┬───────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │; ├─────────────────┼───────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┤; │ (256, 256, 256) │ 1 │ 3.641 s │ 3.686 s │ 3.686 s │ 3.730 s │ 355.28 KiB │ 2336 │; │ (256, 256, 256) │ 2 │ 1.917 s │ 1.918 s │ 1.921 s │ 1.928 s │ 346.00 KiB │ 2782 │; │ (256, 256, 256) │ 4 │ 1.249 s │ 1.283 s │ 1.279 s │ 1.300 s │ 348.47 KiB │ 2822 │; │ (256, 256, 256) │ 8 │ 652.029 ms │ 714.833 ms │ 704.940 ms │ 738.885 ms │ 353.84 KiB │ 2902 │; │ (256, 256, 256) │ 16 │ 377.153 ms │ 388.435 ms │ 394.780 ms │ 415.562 ms │ 366.16 KiB │ 3062 │; └─────────────────┴───────┴────────────┴────────────┴────────────┴────────────┴────────────┴────────┘; ```. ```; Incompressible model strong scaling speedup; ┌─────────────────┬───────┬─────────┬──────────┬─────────┐; │ size │ ranks │ speedup │ memory │ allocs │; ├─────────────────┼───────┼─────────┼──────────┼─────────┤; │ (256, 256, 256) │ 1 │ 1.0 │ 1.0 │ 1.0 │; │ (256, 256, 256) │ 2 │ 1.92195 │ 0.973876 │ 1.19092 │; │ (256, 256, 256) │ 4 │ 2.87312 │ 0.980825 │ 1.20805 │; │ (256, 256, 256) │ 8 │ 5.15614 │ 0.995954 │ 1.24229 │; │ (256, 256, 256) │ 16 │ 9.48879 │ 1.03061 │ 1.31079 │; └─────────────────┴───────┴─────────┴──────────┴─────────┘; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-794954624:33,benchmark,benchmark,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/590#issuecomment-794954624,3,['benchmark'],"['benchmark', 'benchmarking']"
Testability,Did some refactoring and CPU and GPU hydrostatic regression tests pass locally so I think this PR is ready for review!. @simone-silvestri Requesting a review from you on your own PR again lol but I won't approve unless you do.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2400089856:60,test,tests,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3268#issuecomment-2400089856,1,['test'],['tests']
Testability,Did we add a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2710#issuecomment-1225160871:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2710#issuecomment-1225160871,1,['test'],['test']
Testability,Did we break the distributed tests?; https://buildkite.com/clima/oceananigans-distributed/builds/4176#0192e4ca-db93-47a2-a550-47e8a36b6bc2/232-1228,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2451012645:29,test,tests,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3890#issuecomment-2451012645,1,['test'],['tests']
Testability,"Did you test it? :). I think providing a string as a closure doesn't even make it to the new error message you added so you get a MethodError from `with_tracers`!. ```Julia; julia> using Oceananigans, Test; Precompiling Oceananigans; 1 dependency successfully precompiled in 11 seconds. 129 already precompiled. julia> grid = RectilinearGrid(CPU(), size=(2, 2, 2), extent=(1, 2, 3)); 2×2×2 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 2×2×2 halo; ├── Periodic x ∈ [0.0, 1.0) regularly spaced with Δx=0.5; ├── Periodic y ∈ [0.0, 2.0) regularly spaced with Δy=1.0; └── Bounded z ∈ [-3.0, 0.0] regularly spaced with Δz=1.5. julia> closure = ""not a closure""; ""not a closure"". julia> NonhydrostaticModel(; grid, closure); ERROR: MethodError: no method matching with_tracers(::Tuple{}, ::String). Closest candidates are:; with_tracers(::Any, ::Nothing, Any...; kwargs...); @ Oceananigans ~/Research/OC11.jl/src/Utils/with_tracers.jl:44; with_tracers(::Any, ::Oceananigans.TurbulenceClosures.TwoDimensionalLeith{FT}) where FT; @ Oceananigans ~/Research/OC11.jl/src/TurbulenceClosures/turbulence_closure_implementations/leith_enstrophy_diffusivity.jl:61; with_tracers(::Any, ::ScalarBiharmonicDiffusivity{F, N}) where {F, N}; @ Oceananigans ~/Research/OC11.jl/src/TurbulenceClosures/turbulence_closure_implementations/scalar_biharmonic_diffusivity.jl:85; ... Stacktrace:; [1] NonhydrostaticModel(; grid::RectilinearGrid{…}, clock::Clock{…}, advection::Centered{…}, buoyancy::Nothing, coriolis::Nothing, stokes_drift::Nothing, forcing::@NamedTuple{}, closure::String, boundary_conditions::@NamedTuple{}, tracers::Tuple{}, timestepper::Symbol, background_fields::@NamedTuple{}, particles::Nothing, biogeochemistry::Nothing, velocities::Nothing, hydrostatic_pressure_anomaly::Oceananigans.Models.NonhydrostaticModels.DefaultHydrostaticPressureAnomaly, nonhydrostatic_pressure::Field{…}, diffusivity_fields::Nothing, pressure_solver::Nothing, immersed_boundary::Nothing, auxiliary_fields::@Na",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325306269:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3753#issuecomment-2325306269,2,"['Test', 'test']","['Test', 'test']"
Testability,Did you test on a GPU?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477962673:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1477962673,1,['test'],['test']
Testability,Did you test on sverdrup?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1442103670:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1442103670,1,['test'],['test']
Testability,"Differences are close to machine epsilon so pretty sure this branch produces the same numbers as before, up to truncation error (and we do integrate from the bottom up to enforce continuity now). ```; Running regression tests...; Testing thermal bubble regression [CPU]; [ Info: Δu: min=-3.01224e-15, max=3.01289e-15, mean=-3.94216e-22, absmean=5.13638e-16, std=7.36011e-16; [ Info: Δv: min=-3.01208e-15, max=3.00899e-15, mean=-1.19521e-21, absmean=5.13326e-16, std=7.35825e-16; [ Info: Δw: min=-7.64756e-15, max=5.88619e-15, mean=1.35968e-21, absmean=1.03765e-15, std=1.48909e-15; [ Info: ΔT: min=-1.77636e-15, max=1.77636e-15, mean=7.80626e-18, absmean=3.55618e-17, std=2.51247e-16; [ Info: ΔS: min=0, max=0, mean=0, absmean=0, std=0; Testing Rayleigh–Bénard tracer regression [CPU]; [ Info: Δu: min=-3.65818e-14, max=3.21965e-14, mean=-1.92406e-18, absmean=3.3529e-15, std=4.83978e-15; [ Info: Δv: min=-2.85535e-14, max=3.72202e-14, mean=1.62974e-19, absmean=3.29709e-15, std=4.79574e-15; [ Info: Δw: min=-4.56857e-14, max=4.32987e-14, mean=2.54957e-18, absmean=2.97761e-15, std=4.68161e-15; [ Info: ΔT: min=-5.19029e-14, max=3.71925e-14, mean=8.223e-18, absmean=2.55428e-15, std=4.14735e-15; [ Info: ΔS: min=-2.37588e-14, max=1.60982e-14, mean=1.15112e-18, absmean=1.13258e-15, std=1.79417e-15; Testing oceanic large eddy simulation regression [VerstappenAnisotropicMinimumDissipation, CPU]; [ Info: Δu: min=-8.1532e-16, max=7.47666e-16, mean=3.10996e-19, absmean=1.34093e-16, std=1.74514e-16; [ Info: Δv: min=-7.94503e-16, max=7.32053e-16, mean=1.62668e-19, absmean=1.30967e-16, std=1.70133e-16; [ Info: Δw: min=-2.21871e-15, max=2.4928e-15, mean=-4.54454e-18, absmean=2.67538e-16, std=4.09625e-16; [ Info: ΔT: min=-1.06581e-14, max=1.06581e-14, mean=-1.76661e-17, absmean=1.34445e-15, std=2.4561e-15; [ Info: ΔS: min=-2.13163e-14, max=2.13163e-14, mean=-9.38131e-17, absmean=2.61336e-15, std=4.82786e-15; Testing oceanic large eddy simulation regression [SmagorinskyLilly, CPU]; [ Info: Δu: min=",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/462#issuecomment-544732689:220,test,tests,220,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/462#issuecomment-544732689,3,"['Test', 'test']","['Testing', 'tests']"
Testability,Distributed tests actually fail with errors :(,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2394903510:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3814#issuecomment-2394903510,1,['test'],['tests']
Testability,Distributed tests fail on cpu. Something related to CUDA? Any ideas? @simone-silvestri?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3310#issuecomment-1763173952:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3310#issuecomment-1763173952,1,['test'],['tests']
Testability,Distributed tests keep failing due to segfaults and MPI communication errors... Is there a trick to get them to work or should I just merge this PR as the non-distributed tests all pass?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3769#issuecomment-2383655329:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3769#issuecomment-2383655329,2,['test'],['tests']
Testability,"Do ? plan_fft! at the REPL. On Sat, Mar 9, 2019 at 8:50 AM Gregory Wagner <; gregory.leclaire.wagner@gmail.com> wrote:. > You only need to use that if you are directly calling fft. If you use; > plan_fft, you have to specify nthreads to the planner.; >; > On Sat, Mar 9, 2019 at 8:47 AM Ali Ramadhan <notifications@github.com>; > wrote:; >; >> Ah just checked and there's a FFTW.set_num_threads(nthreads::Integer); >> function. Should be easy for us to benchmark Oceananigans.jl with different; >> nthreads using the benchmarking script #116; >> <https://github.com/climate-machine/Oceananigans.jl/pull/116>.; >>; >> —; >> You are receiving this because you were mentioned.; >> Reply to this email directly, view it on GitHub; >> <https://github.com/climate-machine/Oceananigans.jl/issues/119#issuecomment-471178489>,; >> or mute the thread; >> <https://github.com/notifications/unsubscribe-auth/AOkIBrtxZP5ECiBRZlUKqIpZtaKh39Ppks5vU7tugaJpZM4bmrZ0>; >> .; >>; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471178884:453,benchmark,benchmark,453,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/119#issuecomment-471178884,2,['benchmark'],"['benchmark', 'benchmarking']"
Testability,"Do not merge yet. There's a GPU bug with `calc_diffusivities!`. Since we now use `config=launch_config(grid, 3)`, the z loop needs to be; ```julia; @loop for k in (1:grid.Nz; (blockIdx().z - 1) * blockDim().z + threadIdx().z); ```; instead of; ```julia; @loop for k in (1:grid.Nz; blockIdx().z); ```; since `launch_config` will return block sizes where `Bz != Nz`. Will commit a fix once I test it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/315#issuecomment-516134494:390,test,test,390,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/315#issuecomment-516134494,1,['test'],['test']
Testability,Do these test pass locally?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1542722510:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3100#issuecomment-1542722510,1,['test'],['test']
Testability,Do we allow scalar indexing in all our tests?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3039:39,test,tests,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3039,1,['test'],['tests']
Testability,Do we have good ideas for a test that will catch the error observed in #3670 ? Also I think it will be important to precisely pinpoint the problem and describe it in the top post.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295323633:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295323633,1,['test'],['test']
Testability,Do we know why these 4 tests fail? From looking at the first one it seems gpu related but I'm no expert.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-746364115:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1270#issuecomment-746364115,1,['test'],['tests']
Testability,Docker file for easy installation and CI testing,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/151:41,test,testing,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/151,1,['test'],['testing']
Testability,"Docs are previewing here: https://clima.github.io/OceananigansDocumentation/previews/PR3080/. I checked all the examples with `NonhdyrostaticModel` and they all look the same as they do on the `stable` branch. Furthermore, the few tests failures that we have are all something like. ```; JLD2 output writer [CPU]: Test Failed at /var/lib/buildkite-agent/builds/tartarus-1/clima/oceananigans/test/test_jld2_output_writer.jl:131; --;   | Expression: wu == zero(FT);   | Evaluated: -3.009265538105056e-35 == 0.0; ```. i.e. very small approximation errors that aren't indicative of any significant errors in the model. In other words, I think this is working well! I vote we simplify the model and get rid of the hydrostatic separation. @glwagner as you mentioned, this isn't a trivial change. If you wanna move forward with it, feel free to push to this PR or close this one and open another. I can also help if you want, just lmk what I should focus on. PS: Just like we did in https://github.com/CliMA/Oceananigans.jl/pull/1910 we might need/want to replace the `stratified_fluid_remains_at_rest_with_tilted_gravity_buoyancy_tracer()` test for something simpler.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718:231,test,tests,231,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1518394718,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,Docs built successfully with https://github.com/CliMA/Oceananigans.jl/pull/2990/commits/f2e22b8a65b1a5c6a1e01b95ff867d87eaf81609! Nice. Next commit (https://github.com/CliMA/Oceananigans.jl/pull/2990/commits/8572c242dde8dbe61c181b0b6cf72e92a4b9fca5) reintruduces the tilted bbl example and was also successfully tested locally.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478586287:312,test,tested,312,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2990#issuecomment-1478586287,1,['test'],['tested']
Testability,"Docs:; ```; ERROR: could not load library ""/storage7/buildkite-agent/julia-1.5.4/lib/julia/sys.so""; --; &nbsp; | /storage7/buildkite-agent/julia-1.5.4/lib/julia/sys.so: ELF load command past end of file; &nbsp; | ERROR: LoadError: Failed to precompile PlotUtils [995b91a9-d308-5afd-9ec6-746e21dbc043] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/PlotUtils/YveHG_R3lk8.ji.; &nbsp; | Stacktrace:; &nbsp; | [1] top-level scope at none:2; &nbsp; | [2] eval at ./boot.jl:347 [inlined]; &nbsp; | in expression starting at /storage7/buildkite-agent/.julia-2556/packages/Plots/SjqWU/src/Plots.jl:20; &nbsp; | ERROR: LoadError: Failed to precompile Plots [91a5bcdd-55d7-5caf-9e0b-520d859cae80] to /storage7/buildkite-agent/.julia-2556/compiled/v1.5/Plots/ld3vC_R3lk8.ji.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-1/clima/oceananigans/docs/make.jl:6; &nbsp; | 🚨 Error: The command exited with status 1. ```. CPU test; ```; [8] test() at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:72; --; &nbsp; | [9] top-level scope at none:1; &nbsp; | Union{},Union{},Tuple{},NamedTuple{(test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; ERROR: failed process: Process(`/storage7/buildkite-agent/.julia-2556/artifacts/2fcd463fb9498f362be9d1c4ef70a63c920b0e96/bin/mpiexec -np 4 /storage7/buildkite-agent/julia-1.5.4/bin/julia -O0 --color=yes -e 'using Pkg; Pkg.test()'`, ProcessExited(1)) [1]; &nbsp; | &nbsp;; &nbsp; | Stacktrace:; &nbsp; | [1] pipeline_error at ./process.jl:525 [inlined]; &nbsp; | [2] run(::Cmd; wait::Bool) at ./process.jl:440; &nbsp; | [3] run(::Cmd) at process.jl:438; &nbsp; | [4] (::var""#1#2"")(::Cmd) at none:4; &nbsp; | [5] (::MPI.var""#8#9""{var""#1#2""})(::String) at /storage7/buildkite-agent/.julia-2556/packages/MPI/b7MVG/src/environment.jl:25; &nbsp; | [6] (::MPICH_jll.var""#8#9""{MPI.var""#8#9""{var""#1#2""}})() at /storage7/buildkite-agent/.julia-2556/packages/MPICH_jll/ekpo2/src/wrappers/x86_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141:1387,test,test,1387,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-842643141,2,['test'],['test']
Testability,Document and test numerical convergence validation,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/777:13,test,test,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/777,1,['test'],['test']
Testability,"Documentations test passed, seems like it was #1930 that was breaking it. All I did was edit the markdown file `benchmarks.md`. What could've broken it? @glwagner",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902850612:15,test,test,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1950#issuecomment-902850612,2,"['benchmark', 'test']","['benchmarks', 'test']"
Testability,"Does anyone know how I can add Codecov coverage in our [buildkite pipeline](https://github.com/CliMA/Oceananigans.jl/blob/ncc/adds-codecov/.buildkite/pipeline.yml)?. From what I read at [`JuliaGPU/buildkite/README`](https://github.com/JuliaGPU/buildkite/blob/main/README.md) here, I get that I have to add:. ```Julia; plugins:; - JuliaCI/julia#v1:; version: ""1""; - JuliaCI/julia-test#v1: ~; - JuliaCI/julia-coverage#v1:; codecov: true; ```. in *every* step in our buildkite pipeline. Is this correct?. cc @maleadt, @vchuravy",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063309592:379,test,test,379,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2329#issuecomment-1063309592,1,['test'],['test']
Testability,Does it change with different solvers? I'll do some testing today to try to snoop out the issue,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482707191:52,test,testing,52,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2996#issuecomment-1482707191,1,['test'],['testing']
Testability,"Does it make sense to aim for 100% code coverage (by some metric)? Maybe not until v1.0.0 as it would increase the testing burden and tests need to be maintained. 100% line coverage shouldn't be too hard to achieve. 100% [MC/DC coverage](https://en.wikipedia.org/wiki/Modified_condition/decision_coverage) would be much harder, and I'm not sure whether it would benefit a package like Oceananigans.jl. Presumably 100% physics coverage is what we want. Although not sure how to quantify % here.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1100:115,test,testing,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1100,2,['test'],"['testing', 'tests']"
Testability,"Does it make sense to encapsulate the code added by this PR into a submodule of `Oceananigans`? The log level `Diagnostic`, for example, is dangerously similar to the abstract type `AbstractDiagnostic`. We will almost certainly have a `Simulation` concrete type in the future, but we'll also want a log level for simulations. Perhaps @ali-ramadhan has some thoughts about this. . Ref #456.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-545443544:100,log,log,100,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-545443544,2,['log'],['log']
Testability,"Does it make sense to try to reconstruct vorticity in the same way? Ie have we tried reconstructing the circulation `Γᶠᶠᶜ`, which is related to vorticity through. https://github.com/CliMA/Oceananigans.jl/blob/98bcdde7ae679583ea88474ec0909469abccfc90/src/Operators/vorticity_operators.jl#L9. and then computing vorticity by dividing by `Azᶠᶜᶜ` and `Azᶜᶠᶜ`?. It makes a lot of sense to me that `δx(Δy * u) + δy(Δx * v)` is smoother than `δx(Δy * u) + δy(Δx * v) / Azᶜᶜᶜ` when the grid is strongly stretched. Maybe we should come up with test cases that have even more extreme stretching? It will be very very nice to have good properties on stretched grids for the cubed sphere.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452:535,test,test,535,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3091#issuecomment-1529053452,1,['test'],['test']
Testability,"Does it need to be maintained in any way other than keeping that page up and making sure that it renders fine? If that's all it needs, then I'd say it's worth keeping. Or are you suggesting that we keep re-running these tests with every minor Oceananigans release or something?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872331397:220,test,tests,220,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1797#issuecomment-872331397,1,['test'],['tests']
Testability,"Does linear stratification count as _non-trivially stratified_?. But yeah, adding a bit of salinity in there would be good for the test, maybe not so much for the example.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/220#issuecomment-497113610:131,test,test,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/220#issuecomment-497113610,1,['test'],['test']
Testability,"Doesn't your script use `ComputedField` and `KernelComputedField`?. What if we set up a test with two tracers, and then define a `ComputedField` that's a function of the two. It'd be nice to have tests for time-averaging of `ComputedField` and `KernelComputedField` anyways.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817990912:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817990912,2,['test'],"['test', 'tests']"
Testability,Don't apologize! I just wanted to merge it to #3503 in the hope I can merge that as soon as test pass (if they pass)...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3512#issuecomment-1999132237:92,test,test,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3512#issuecomment-1999132237,1,['test'],['test']
Testability,Don't do time-stepping tests on Travis,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1071:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1071,1,['test'],['tests']
Testability,Don't feel obligated to back and run the tests with a Julia binary from https://julialang.org/downloads/ but let me know if you feel like it was likely enough to be the problem to close this issue.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882#issuecomment-682483990:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882#issuecomment-682483990,1,['test'],['tests']
Testability,Don't need JLD or HDF5 since PR #329 removed the last use of a JLD output writer. This should speed up CI testing by quite a bit.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/340:106,test,testing,106,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/340,1,['test'],['testing']
Testability,"Don't the regression tests output text indicating how many grid points are different, and what the maximum differences are?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559613874:21,test,tests,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3080#issuecomment-1559613874,1,['test'],['tests']
Testability,"Done! There is a test for the time stepping wizard that loops over archs, but not topologies. I can certainly test those as well but didn't think that was necessary. Happy to fix it if there is any concern. If there aren't then I'm happy to close this issue and then focus on the accuracy of the solution, and comparing the results with the linear stability results that I posed yesterday.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-765443511:17,test,test,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1307#issuecomment-765443511,2,['test'],['test']
Testability,Drop direct dependency to GPUArrays and BenchmarkTools,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2518:40,Benchmark,BenchmarkTools,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2518,1,['Benchmark'],['BenchmarkTools']
Testability,"E.g., in addition of this:; https://github.com/CliMA/Oceananigans.jl/blob/057e25cea75a0da5e2e0f2328d39205ebaf2b0dc/test/test_time_stepping.jl#L25-L40; we also have tests using, e.g., `closure = (AnisotropicDiffusivity(FT), Closure(FT))` and also some tests using, e.g., `HydrostaticFreeSurfaceModel`?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2047:115,test,test,115,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2047,3,['test'],"['test', 'tests']"
Testability,"EDIT: This has nothing to do with Oceananigans.jl per se. Better pursued on LambertW.jl. I agree with https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1904990127 . This part of the stack trace suggests that it is the `@warn` that is causing the problem. It should be possible to remove that somehow. Better would be to remove the `@warn` entirely and instead return the result along with info on the convergence. And maybe convenience interface for people who want to ignore it. That's a more robust interface for other reasons as well. I don't know anything about running on GPUs. Does `@warn` cause failure if it is anywhere in the package being compiled? or anywhere in the function being called? Or does execution have to hit the `@warn` so that io is attempted at run time?. EDIT: I missed this above:; >> Do you get a warning during CPU execution ?. > Nope. Everything seems to run pretty smoothly:. So it seems that execution does not have to hit the `@warn` for the reported failure. Also the stack trace indicates that the error happens when the macro is expanded. EDIT: so the following comment may be relevant, but perhaps not. It would be nice if there were a way to redirect io or send it to dev null or otherwise disable everywhere when running on a GPU. ```; Reason: unsupported call to an unknown function (call to jl_f__call_latest); Stacktrace:; [1] #invokelatest#2; @ ./essentials.jl:816; [2] invokelatest; @ ./essentials.jl:813; [3] macro expansion; @ ./logging.jl:381; [4] lambertw_root_finding; @ /glade/work/tomasc/.julia/packages/LambertW/tom9a/src/LambertW.jl:188; [5] lambertw_branch_zero; @ /glade/work/tomasc/.julia/packages/LambertW/tom9a/src/LambertW.jl:117; [6] _lambertw; @ /glade/work/tomasc/.julia/packages/LambertW/tom9a/src/LambertW.jl:93; [7] lambertw (repeats 2 times); @ /glade/work/tomasc/.julia/packages/LambertW/tom9a/src/LambertW.jl:73; [8] W; @ /glade/derecho/scratch/tomasc/twake4/headland_simulations/mwe.jl:9; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1910836945:1491,log,logging,1491,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3438#issuecomment-1910836945,1,['log'],['logging']
Testability,Each Appveyor build takes 30-50 minutes to run (and they run sequentially) so Appveyor takes forever to finish testing. Compare with ~10 minutes per build on Travis and JuliaGPU's CI on GitLab. It also builds CUDA packages unsuccessfully so maybe defining a CPU testing env and using it on Travis and Appveyor can help? See https://github.com/ali-ramadhan/Oceananigans.jl/issues/79. Problem might go away on its own but otherwise this might help: https://www.appveyor.com/docs/build-cache/,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/89:111,test,testing,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/89,2,['test'],['testing']
Testability,Either using requires it you can have an app manifest (see test/gpuenv in GPUifyLoops),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/79#issuecomment-466794824:59,test,test,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/79#issuecomment-466794824,1,['test'],['test']
Testability,Either way we need both `east_bounded` _and_ `solid_interface` so the question is just how we shuffle logic between the two. We can consider changing `solid_interface`. If we change its behavior I would recommend calling it `fluid_solid_interface`.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047180676:102,log,logic,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2263#issuecomment-1047180676,1,['log'],['logic']
Testability,Eliminate dichotomy between GPU and CPU tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/242:40,test,tests,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/242,1,['test'],['tests']
Testability,"Encourage, document, test using `Field` for boundary conditions rather than `Array`",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3298:21,test,test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3298,1,['test'],['test']
Testability,"Ended up being a simple issue where; ```julia; set!(u::Field{A1}, f::Function) where {A1 <: OffsetArray{T, D, <:CuArray} where {T, D}}; ```; assumed `u_cpu` was always a `CellField`. Tests should pass now. Let me know if this makes sense but I also moved your `set_velocity_tracer_fields` test to `test_models.jl` as it constructs a model, but we don't know if `model()` actually works until we test it in `test_models.jl`. So now we test `set!` after `model()` has been tested.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519507996:183,Test,Tests,183,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519507996,5,"['Test', 'test']","['Tests', 'test', 'tested']"
Testability,Enzyme tests pass now: https://buildkite.com/clima/oceananigans/builds/14478#018dc549-6a59-40cd-a6f1-5e4d2cb7ced4. 🎉,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953617261:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3480#issuecomment-1953617261,1,['test'],['tests']
Testability,"Enzyme tests seems to be failing with:. ```; Enzyme + Oceananigans Initialization Broadcast Kernel: Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-9/clima/oceananigans/test/test_enzyme.jl:134; Got exception outside of a @test; StackOverflowError:; Stacktrace:; [1] getproperty; @ ./Base.jl:32 [inlined]; [2] unwrap_unionall; @ ./essentials.jl:379 [inlined]; [3] fieldnames; @ ./reflection.jl:169 [inlined]; [4] augmented_julia_fieldnames_26436wrap; @ ./reflection.jl:0; [5] macro expansion; @ ~/.julia-16536/packages/Enzyme/aEyGD/src/compiler.jl:6673 [inlined]; [6] enzyme_call; @ ~/.julia-16536/packages/Enzyme/aEyGD/src/compiler.jl:6273 [inlined]; [7] AugmentedForwardThunk; @ ~/.julia-16536/packages/Enzyme/aEyGD/src/compiler.jl:6161 [inlined]; [8] runtime_generic_augfwd(activity::Type{Val{(false, false)}}, width::Val{1}, ModifiedBetween::Val{(true, true)}, RT::Val{@NamedTuple{1, 2, 3}}, f::typeof(fieldnames), df::Nothing, primal_1::Type{FieldBoundaryConditions}, shadow_1_1::Nothing); @ Enzyme.Compiler ~/.julia-16536/packages/Enzyme/aEyGD/src/rules/jitrules.jl:313; --- the last 6 lines are repeated 7889 more times ---; [47343] boundary_conditions; @ /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-9/clima/oceananigans/src/Fields/field.jl:357 [inlined]; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2254226935:7,test,tests,7,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2254226935,4,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,EnzymeCore v0.6.5; [460bff9d] ExceptionUnwrapping v0.1.10; [e2ba6199] ExprTools v0.1.10; [c87230d0] FFMPEG v0.4.1; [7a1cc6ca] FFTW v1.8.0; [5789e2e9] FileIO v1.16.2; [53c48c17] FixedPointNumbers v0.8.4; [1fa38f19] Format v1.3.6; [0c68f7d7] GPUArrays v10.0.2; [46192b85] GPUArraysCore v0.1.6; ⌅ [61eb1bfa] GPUCompiler v0.25.0; [28b8d3ca] GR v0.73.3; [c27321d9] Glob v1.3.1; [42e2da0e] Grisu v1.0.2; [cd3eb016] HTTP v1.10.3; [615f187c] IfElse v0.1.1; [40713840] IncompleteLU v0.2.1; [842dd82b] InlineStrings v1.4.0; [41ab1584] InvertedIndices v1.3.0; [92d709cd] IrrationalConstants v0.2.2; [42fd0dbc] IterativeSolvers v0.9.4; [82899510] IteratorInterfaceExtensions v1.0.0; [033835bb] JLD2 v0.4.46; [1019f520] JLFzf v0.1.7; [692b3bcd] JLLWrappers v1.5.0; [682c06a0] JSON v0.21.4; [0f8b85d8] JSON3 v1.14.0; [63c18a36] KernelAbstractions v0.9.18; [929cbde3] LLVM v6.6.0; [8b046642] LLVMLoopInfo v1.0.0; [8ac3fa9e] LRUCache v1.6.1; [b964fa9f] LaTeXStrings v1.3.1; [23fbe1c1] Latexify v0.16.2; [2ab3a3ac] LogExpFunctions v0.3.27; [e6f89c97] LoggingExtras v1.0.3; [da04e1cc] MPI v0.20.19; [3da0fdf6] MPIPreferences v0.1.10; [1914dd2f] MacroTools v0.5.13; [739be429] MbedTLS v1.1.9; [442fdcdd] Measures v0.3.2; [e1d29d7a] Missings v1.1.0; [78c3b35d] Mocking v0.7.7; [85f8d34a] NCDatasets v0.14.3; [5da4648a] NVTX v0.3.4; [77ba4419] NaNMath v1.0.2; [d8793406] ObjectFile v0.4.1; [9e8cae18] Oceananigans v0.90.11 `~/Research/OC11.jl`; [6fe1bfb0] OffsetArrays v1.13.0; [4d8831e6] OpenSSL v1.4.2; [bac558e1] OrderedCollections v1.6.3; [65ce6f38] PackageExtensionCompat v1.0.2; [69de0a69] Parsers v2.8.1; [0e08944d] PencilArrays v0.19.3; [4a48f351] PencilFFTs v0.15.1; [b98c9c47] Pipe v1.3.0; [eebad327] PkgVersion v0.3.3; [ccf2f8ad] PlotThemes v3.1.0; [995b91a9] PlotUtils v1.4.1; [91a5bcdd] Plots v1.40.2; [2dfb63ee] PooledArrays v1.4.3; ⌃ [aea7be01] PrecompileTools v1.2.0; [21216c6a] Preferences v1.4.3; [08abe8d2] PrettyTables v2.3.1; [49802e3a] ProgressBars v1.5.1; [94ee1d12] Quaternions v0.7.6; [74087812] R,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3511:4161,Log,LogExpFunctions,4161,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3511,1,['Log'],['LogExpFunctions']
Testability,Error from benchmark/test distributed nonhydrostatic model scripts,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347:11,benchmark,benchmark,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Even a quick benchmark at the end of the test suite would be nice to uncover issues like #675 and #397 and keep the benchmark scripts up to date.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/684:13,benchmark,benchmark,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/684,3,"['benchmark', 'test']","['benchmark', 'test']"
Testability,Everything looks good on the CPU but the GPU unit tests segfault when testing field setting (tried debugging but can't figure out why). All the other GPU tests pass although CI seems much slower for GPU tests (~3x slower?). Could be related to segfault in https://github.com/CliMA/ClimateMachine.jl/pull/2146 ? @charleskawczynski @jakebolewski were you able to figure out why it was segfaulting?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809380865:50,test,tests,50,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-809380865,4,['test'],"['testing', 'tests']"
Testability,"Everything useful that I have is probably in the draft PR #2275 and the associated branch! They aren't forcing functions, but we hard coded in some drag functions for the flux in the IB case that could be used, and the sandbox has the boundary condition versions of those same functions as a test. It wouldn't take much to turn them into divergences!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1099515153:219,sandbox,sandbox,219,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1099515153,2,"['sandbox', 'test']","['sandbox', 'test']"
Testability,Example or test: advection of a square or Gaussian,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/481:11,test,test,11,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/481,1,['test'],['test']
Testability,Example script tests fail on master. Tried to cherry pick my fixes from PR #381 but `test_examples.jl` is not on this branch. So I'll merge (tests are failing on master anyways) and open a new PR in a couple of minutes to fix that.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/423#issuecomment-533539134:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/423#issuecomment-533539134,2,['test'],['tests']
Testability,"Examples build again and don't NaN out so this was indeed the issue. I'll merge. Shallow water tests are failing because NaN checker, by default, checks for NaNs in `model.velocities.u` which `ShallowWaterModel` doesn't have. Default should probably be `fields(model)[1]`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1255#issuecomment-739537874:95,test,tests,95,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1255#issuecomment-739537874,1,['test'],['tests']
Testability,"Examples: more, better, tested",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/425:24,test,tested,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/425,1,['test'],['tested']
Testability,"Extended the type WENO5 to allow the execution of the WENO scheme on stretched and uniform grids alike. . In practice:. - `WENO5()` will default to the uniform 5th order coefficients (""uniform"" setting) in all directions with a JS-WENO formulation; - `WENO5(grid = grid)` will default to uniform interpolation coefficient if the direction is uniform (`typeof(Δc) <: Number`) and will precompute the ENO coefficients for reconstruction in the stretched directions (""stretched"" setting) (I have tested ""on the fly"" coefficient calculation for stretched directions and it is way too expensive! therefore, useless to keep as a possibility); - `WENO5(grid = grid, stretched_smoothness=true)` will compute coefficients for the smoothness indicators `β₀, β₁` and `β₂` to account for stretched grid; - `WENO5(zweno = true)` will implement a Z-WENO formulation for the weno weight calculation; - No support is given for `WENO5S(grid = grid)` for curvilinear grids for the moment (defaults to uniform setting). Comments:; Despite the fact that all methods have the same execution speed, `stretched_smoothness` requires more memory (and slightly more computation time) and is not much impactful. As such, most of the time it is better to use just the `WENO5(grid = grid)` keyword argument as it does not decrease accuracy but decreases memory utilization (and speed up slightly). (I haven't tried all types of grids, so maybe it is good to check before performing a large simulation on a weird stretched grid); On the other hand, a Z-WENO formulation is always beneficial (also in case of a uniform mesh) with no major decrease in performance. The same can be said for the stretched `WENO5(grid=grid)` formulation in case of stretched grids. `validation/advection/validate_weno_scheme.jl` compares all these methods in terms of time and accuracy on a simple 1D and 2D tracer advection simulations. Below some animations showing the performance of the three methods for a ""center coarsened"" grid type (`grid_str2`",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060:493,test,tested,493,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060,1,['test'],['tested']
Testability,"FFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_parameterized_forcing(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:40; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; NetCDF [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:524; Got exception outside of a @test; MethodError: no method matching device(::CuContext); Closest candidates are:; device() at /home/ancellin/.julia/packages/CUDA/d6WNR/src/state.jl:225; Stacktrace:; [1] |>(::CuContext, ::typeof(CUDA.device)) at ./operators.jl:823; [2] versioninfo_with_gpu() at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/Utils/versioninfo.jl:9; [3] write_grid_and_attributes(::IncompressibleModel{Oceananigans.TimeSteppers.AdamsBashforthTimeStepper{Float64,NamedTuple{(:u, :v, :w, :T, :S),Tuple{Field{Face,Cell,Cell,OffsetArray{Float64,3,CuArray{Float64,3}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.Bo",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:76944,Test,Test,76944,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['Test'],['Test']
Testability,"FTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_forcing_functions(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:21; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:136 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; Forcing function time stepping [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137; Test threw exception; Expression: time_step_with_parameterized_forcing(arch); LLVM error: Cannot cast between two non-generic address spaces; Stacktrace:; [1] handle_error(::Cstring) at /home/ancellin/.julia/packages/LLVM/KITdB/src/core/context.jl:103; [2] macro expansion at /home/ancellin/.julia/packages/LLVM/KITdB/src/util.jl:114 [inlined]; [3] LLVMTargetMachineEmitToMemoryBuffer(::Ptr{LLVM.API.LLVMOpaqueTargetMachine}, ::Ptr{LLVM.API.LLVMOpaqueModule}, ::LLVM.API.LLVMCodeGenFileType, ::Base.RefValue{Cstring}, ::Base.RefValue{Ptr{LLVM.API.LLVMOpaqueMemoryBuffer}}) at /home/ancellin/.julia/packages/LLVM/KITdB/lib/libLLVM_h.jl:3512; [4] emit(::LLVM.TargetMachine, ::LLVM.Module, ::LLVM.API.LLVMCodeGenFileType) at /home/ancellin/.julia/packages/LLVM/KITdB/src/targetmachine.jl:42; [5] mcgen at /home/ancellin/.julia/packages/GPUCompiler/4e9CU/src/mcgen.jl:73 [inlined]; [6] macro expansion",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:38076,Test,Test,38076,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['Test'],['Test']
Testability,"FYI @francispoulin I fixed issues with syntax and the constructor, and found that now the Poisson solver tests legitimately fail for `VerticallyStretchedRectilinearGrid`. So the `FourierTridiagonalPoissonSolver` currently does not work with `Flat` dimensions. I think this is a low-priority issue so it may make sense to write a warning / error in the constructor for `FourierTridiagonalPoissonSolver` constructor and then remove the tests for it. However, I wanted to give you the chance to look into what changes might need to be made to get the FFT + tridiagonal solve working if x or y are `Flat` if you wanted to.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820559470:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-820559470,2,['test'],['tests']
Testability,"FYI the tests are failing only because somehow tests are getting a kill signal or the servers are being lost:. ![image](https://github.com/user-attachments/assets/d2bf8b55-72ba-4242-9b17-6bf8fb77d1c5). Maybe something's up with he servers? As far as I can tell, all tests are passing and this PR is ready for review.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2451696806:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3642#issuecomment-2451696806,3,['test'],['tests']
Testability,"FYI, the GPU Enzyme tests probably fail, because GPU reverse-mode rules are not added to KA (forward mode, however exists).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765226078:20,test,tests,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3347#issuecomment-1765226078,1,['test'],['tests']
Testability,"Fair enough, that's a good point. Seems like motivation to implement a unit test for the `update_buoyancy!` function (so that it can be tested with `δρ` and `b`), although not sure what a good test would be...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/236#issuecomment-495764859:76,test,test,76,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/236#issuecomment-495764859,3,['test'],"['test', 'tested']"
Testability,Fair enough. I'll keep it with the idealized seasonal cycle script (which will end up in the sandbox).,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/291#issuecomment-505399246:93,sandbox,sandbox,93,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/291#issuecomment-505399246,1,['sandbox'],['sandbox']
Testability,"Few TODO:. 1. Add a minimal test (probably only need one or two to start, we can build the tests up gradually if this gets adopted); 2. Brainstorm how to use this with output writers (eg `JLD2OutputWriter(model, outputs; fuse_computations=true)`) or something like that. @simone-silvestri curious what you think",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3234#issuecomment-1694023822:28,test,test,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3234#issuecomment-1694023822,2,['test'],"['test', 'tests']"
Testability,"Few comments here:; 1) I sent an email to Ali (@ali-ramadhan) and Chris (@christophernhill) on Apr 02 2019,; and Ali opened issue #161 the same day and included a copy of my email content in it.; So, ""originally"" w was stepped forward, not the other way.; 2) do we currently have a good Float32 test ?; 3) machine truncation error in solver when we switch to variable vertical resolution ?; 4) I disagree with the last point, recomputing w from continuity is fine with free surface; and with flow through the bottom (cf, MITgcm). In fact, it might be even more useful; with a non-linear free-surface since, in this case, some linearization is needed when; solving for pressure. On Wed, Aug 07, 2019 at 05:16:43AM -0700, Gregory L. Wagner wrote:; > We originally did the recompilation of w from continuity partly because we thought this may prevent an accumulation of error that could otherwise occur, and partly because @sandreza convinced us this was more correct. But I would argue that because we haven't done model verification we aren't sure whether this is correct or not. ; > ; > Another issue, or annoyance, with recomputing w from continuity is that it is only valid in the case of rigid lids on top and bottom.; > ; > -- ; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub:; > https://github.com/climate-machine/Oceananigans.jl/pull/336#issuecomment-519070915",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-519120749:295,test,test,295,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/336#issuecomment-519120749,1,['test'],['test']
Testability,"Few comments here:; 1) I sent an email to Ali (@ali-ramadhan) and Chris (@christophernhill) on Apr 02 2019,; and Ali opened issue #161 the same day and included a copy of my email content in it.; So, ""originally"" w was stepped forward, not the other way.; 2) do we currently have a good Float32 test ?; 3) machine truncation error in solver when we switch to variable vertical resolution ?; 4) I disagree with the last point, recomputing w from continuity is fine with free surface; and with flow through the bottom (cf, MITgcm). In fact, it might be even more useful; with a non-linear free-surface since, in this case, some linearization is needed when; solving for pressure. On Wed, Aug 07, 2019 at 05:16:43AM -0700, Gregory L. Wagner wrote:; > We originally did the recompilation of w from continuity partly because we thought this may prevent an accumulation of error that could otherwise occur, and partly because @sandreza convinced us this was more correct. But I would argue that because we haven't done model verification we aren't sure whether this is correct or not. ; > ; > Another issue, or annoyance, with recomputing w from continuity is that it is only valid in the case of rigid lids on top and bottom.; > ; > -- ; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub:; > https://github.com/climate-machine/Oceananigans.jl/pull/336#issuecomment-519070915. _Originally posted by @jm-c in https://github.com/climate-machine/Oceananigans.jl/pull/336#issuecomment-519120749_",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/338#issuecomment-519124463:295,test,test,295,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/338#issuecomment-519124463,1,['test'],['test']
Testability,"Field{Face,Center,Center,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},FieldSlicer{Colon,UnitRange{Int64},Colon},Int64},Array{Float64,2},FieldSlicer{Colon,Colon,Colon}}, ::String, ::Type{T} where T, ::Int64, ::Tuple{}, ::Dict{Any,Any}) at /home/tomas/repos2/Oceananigans.jl/sandbox/windowed_spatial_avg.jl:62; [3] NetCDFOutputWriter(::IncompressibleModel{Oceananigans.TimeSteppers.RungeKutta3TimeStepper{Float64,NamedTuple{(:u, :v, :w, :b),Tuple{Field{Face,Center,Center,OffsetArrays.OffsetArray{Float64,3,Array{Float64,3}},RegularRectilinearGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},Field{Center,Face,Center,OffsetArrays.OffsetArray{Float64",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784288449:2635,sandbox,sandbox,2635,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784288449,1,['sandbox'],['sandbox']
Testability,"Figures in ""Convergence test"" section of the docs are missing",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1212:24,test,test,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1212,1,['test'],['test']
Testability,"Finally all tests pass 🎉 Thanks @navidcy and @vchuravy for all your help!. @glwagner Let me know when it would be a good time to merge this PR and tag a new release. Ran the incompressible model benchmarks and in general it seems that with Julia 1.6 Oceananigans allocates more memory and is a bit slower on the CPU but a bit faster on the GPU. # Quick benchmark. ## Julia 1.6. ```; Oceananigans v0.57.2; Julia Version 1.6.1; Commit 6aaedecc44 (2021-04-23 05:59 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Xeon(R) Silver 4214 CPU @ 2.20GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, cascadelake); GPU: TITAN V; ```. ```; Incompressible model benchmarks; ┌───────────────┬─────────────┬─────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ Architectures │ Float_types │ Ns │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────┼─────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ CPU │ Float64 │ 32 │ 4.996 ms │ 5.047 ms │ 5.113 ms │ 5.770 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 64 │ 34.951 ms │ 35.967 ms │ 36.414 ms │ 41.417 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 128 │ 301.074 ms │ 301.964 ms │ 302.498 ms │ 307.989 ms │ 1.77 MiB │ 2301 │ 10 │; │ CPU │ Float64 │ 256 │ 2.894 s │ 2.895 s │ 2.895 s │ 2.896 s │ 1.77 MiB │ 2301 │ 2 │; │ GPU │ Float64 │ 32 │ 2.859 ms │ 2.923 ms │ 3.025 ms │ 3.987 ms │ 2.80 MiB │ 6914 │ 10 │; │ GPU │ Float64 │ 64 │ 2.912 ms │ 3.101 ms │ 3.308 ms │ 5.368 ms │ 2.78 MiB │ 6993 │ 10 │; │ GPU │ Float64 │ 128 │ 4.894 ms │ 5.019 ms │ 5.360 ms │ 8.565 ms │ 2.80 MiB │ 8667 │ 10 │; │ GPU │ Float64 │ 256 │ 33.569 ms │ 36.266 ms │ 36.029 ms │ 36.883 ms │ 3.24 MiB │ 37307 │ 10 │; └───────────────┴─────────────┴─────┴────────────┴────────────┴────────────┴────────────┴──────────┴────────┴─────────┘; ```. ## Julia 1.5. ```; Oceananigans v0.57.2; Julia Version 1.5.2; Commit 539f3ce943 (2020-09-23 23",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843636118:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-843636118,4,"['benchmark', 'test']","['benchmark', 'benchmarks', 'tests']"
Testability,Finally found the correct settings after discussing with @ali-ramadhan ; Added test for `Nx != Ny` I'll merge when tests pass,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2079#issuecomment-978075603:79,test,test,79,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2079#issuecomment-978075603,2,['test'],"['test', 'tests']"
Testability,Finally got the tests passing! It was something having to do with GPUCompiler.jl. This is ready to merge/review.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1418060389:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2865#issuecomment-1418060389,1,['test'],['tests']
Testability,Finally tests pass! @ali-ramadhan ?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/742#issuecomment-628291518:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/742#issuecomment-628291518,1,['test'],['tests']
Testability,"Finally, here is an animation with `Bounded` in the `x` direction. The good news is that it's numerically stable. However, I have been plotting the pertubations and the fields look very different because the solid walls force the total velocity in `x` to go to zero. https://user-images.githubusercontent.com/8239041/114077635-04dbab00-9876-11eb-91d2-0e2981cfd883.mp4. @glwagner : how easy/difficult will it be to test the Poisson solvers for `Flat`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-816041541:414,test,test,414,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1554#issuecomment-816041541,1,['test'],['test']
Testability,"Finally, this works. It would need approval to get the tests back online.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3880#issuecomment-2459499172:55,test,tests,55,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3880#issuecomment-2459499172,1,['test'],['tests']
Testability,"First, I think it would be great to have multi-order `WENO` advection, if it's not too difficult. Second, you can see an older version of the plot [here](https://github.com/CliMA/Oceananigans.jl/pull/1648). Since then we've added first order upwinding. I haven't tried running this for a while and hope it works but I guess I should try it and find out. I should point out that this script uses `ShallowWaterModel`. It is easy enough to change it for another of the two models, but I did see some odd behaviour. For `ShallowWaterModel` we have that the error goes down to 1e-14, basically machine precision and the slopes are what we should expect. When I tried this for `NonhydrostaticModel`, I found that the error didn't get any better than 1e-11 or so. I looked into this but never figured out why. The major difference between the two models is that `ShallowWater` does no thave a pressure solve, so I suspect that might be part of the problem. In the end I decided that the latter was probably the best way to test pure advection. But in retrospect, if we used `PrescribedVelocity`, then the pressure solve would not be a factor, and things should work out nicely.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-969007656:1016,test,test,1016,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2060#issuecomment-969007656,1,['test'],['test']
Testability,Fix and test `RoquetIdealizedNonlinearEquationOfState`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/574:8,test,test,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/574,1,['test'],['test']
Testability,Fix diagnostics test problem size,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/379:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/379,1,['test'],['test']
Testability,Fix example test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/424:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/424,1,['test'],['test']
Testability,Fix field `norm` tests for `p=Inf`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1559:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1559,1,['test'],['tests']
Testability,Fix matrix solver test take 2,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2572:18,test,test,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2572,1,['test'],['test']
Testability,Fix performance benchmarks dead link in README,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/822:16,benchmark,benchmarks,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/822,1,['benchmark'],['benchmarks']
Testability,Fix shallow water model time step benchmark,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1511:34,benchmark,benchmark,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1511,1,['benchmark'],['benchmark']
Testability,Fix test for implicit free surface with `ImmersedBoundary` and indexed `ReducedField`s,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2723:4,test,test,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2723,1,['test'],['test']
Testability,Fix triply periodic pressure solver and add/cleanup some tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/834:57,test,tests,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/834,1,['test'],['tests']
Testability,Fixed a few more things and I've updated `recompute_w_from_continuity!` so that the integral is computed starting from the bottom upwards. Regression tests fail so I'll see what's wrong there tomorrow. We should probably go in this order:; 1. Merge LES regression tests (PR #479); 2. Merge arbitrary tracers (PR #452); 3. Make sure this PR passes the LES regression tests and works with arbitrary tracers.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/462#issuecomment-542464980:150,test,tests,150,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/462#issuecomment-542464980,3,['test'],['tests']
Testability,Fixed in #128 . Yes the time integration was incorrect but only at the first time step and the error was small enough that it didn't matter for getting e.g. deep convection to look qualitatively correct. But it will matter a lot for testing and debugging as you point out.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/127#issuecomment-473386491:233,test,testing,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/127#issuecomment-473386491,1,['test'],['testing']
Testability,Fixes CATKE-in-a-tuple implementation and adds tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2225:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2225,1,['test'],['tests']
Testability,Fixes `FreeSurface` constructor for `SingleColumnGrid` and adds a test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2196:66,test,test,66,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2196,1,['test'],['test']
Testability,Fixes and tests `Field(u::Field; indices)` and `Field(u::AbstractOperation; indices)`,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2392:10,test,tests,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2392,1,['test'],['tests']
Testability,Fixes implicit free surface solver comparison test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2131:46,test,test,46,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2131,1,['test'],['test']
Testability,Fixes tests with AveragedField and BuoyancyField,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1020:6,test,tests,6,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1020,1,['test'],['tests']
Testability,Fixing tendencies in shallow water model and bringing back regression tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3486:70,test,tests,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3486,1,['test'],['tests']
Testability,Flat VerticallyStretchedRectilinearGrid plus new hydrostatic and flat internal wave tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1865:84,test,tests,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1865,1,['test'],['tests']
Testability,"Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},Int64,typeof(identity),typeof(identity),typeof(identity),RegularRectilinearGrid{Float64,Periodic,Periodic,Periodic,OffsetArrays.OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}},CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing},BoundaryCondition{Oceananigans.BoundaryConditions.Periodic,Nothing}}}}},FieldSlicer{Colon,UnitRange{Int64},Colon},Tuple{Int64,Int64}}}}; filepath::String, schedule::AveragedTimeInterval, array_type::Type{T} where T, field_slicer::FieldSlicer{Colon,Colon,Colon}, global_attributes::Dict{Any,Any}, output_attributes::Dict{Any,Any}, dimensions::Dict{Any,Any}, mode::String, compression::Int64, verbose::Bool) at /home/tomas/repos2/Oceananigans.jl/src/OutputWriters/netcdf_output_writer.jl:340; [4] top-level scope at /home/tomas/repos2/Oceananigans.jl/sandbox/windowed_spatial_avg.jl:88; [5] include(::String) at ./client.jl:457; [6] top-level scope at REPL[1]:1; ```. I'm not really sure how to fix this one...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784246056:14990,sandbox,sandbox,14990,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-784246056,1,['sandbox'],['sandbox']
Testability,"Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_parameterized_forcing(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:40; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; NetCDF [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:524; Got exception outside of a @test; MethodError: no method matching device(::CuContext); Closest candidates are:; device() at /home/ancellin/.julia/packages/CUDA/d6WNR/src/state.jl:225; Stacktrace:; [1] |>(::CuContext, ::typeof(CUDA.device)) at ./operators.jl:823; [2] versioninfo_with_gpu() at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/Utils/versioninfo.jl:9; [3] write_grid_and_attributes(::IncompressibleModel{Oceananigans.TimeSteppers.AdamsBashforthTimeStepper{Float64,NamedTuple{(:u, :v, :w, :T, :S),Tuple{Field{Face,Cell,Cell,OffsetArray{Float64,3,CuArray{Float64,3}},RegularCartesianGrid{Float64,Periodic,Periodic,Bounded,OffsetArray{Float64,1,StepRangeLen{Float64,Base.TwicePrecision{Float64},Base.TwicePrecision{Float64}}}},NamedTuple{(:x, :y, :z),Tuple{CoordinateBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryCondi",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:76888,test,test,76888,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,"Flux and gradient conditions are treated differently --- should test which one is causing the problem. Hopefully it doesn't depend on the initial condition, or the magnitude of the flux. You could just try setting both the flux and gradient to 0.0.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/816#issuecomment-662725676:64,test,test,64,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/816#issuecomment-662725676,1,['test'],['test']
Testability,Follow up from https://github.com/CliMA/Oceananigans.jl/pull/3173. `update_biogeochemical_state!` was being tested but only failing on a grid type that previously wasn't being tested so added tests.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179:108,test,tested,108,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179,3,['test'],"['tested', 'tests']"
Testability,"Following a discussion on Slack with @glwagner we've decided not to do this:. > @glwagner:; > by the way, some background on filenames `test_*…` one reason (perhaps a bad one) why you might want this is so that you don’t end up with files on the same project with the same name. For example, you might have a file called “output_writer.jl” in both `src` and `test`. Not sure if this is a real concern or not. Another thing I thought of a while ago is that if the file is taken out of context (out of the `test/` directory), then having the prefix `test_` is helpful. I don’t think this means anything now, though. If you move a file you can rename it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/871#issuecomment-684847047:359,test,test,359,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/871#issuecomment-684847047,2,['test'],['test']
Testability,"Following https://github.com/CliMA/Oceananigans.jl/issues/3870#issuecomment-2445532635 this PR now just changes how grid coordinate ranges are constructed. Curious to see if any tests fail. But locally it fixed CATKE + `Float32`. @glwagner I ended up doing this if it looks okay:. ```julia; κu★ = min(κu, κu_max); FT = eltype(grid); return κu★::FT; ```. I assume there's a small cost associated with the type annotation `::FT`?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445542668:178,test,tests,178,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2445542668,1,['test'],['tests']
Testability,Following the discussion on testing infrastructure from a long time ago (PR #139) it would be good to convert any verification tests that result from #346 into an actual end-to-end test of the model. Not sure how the comparison with MITgcm would be implemented but maybe the others are good enough. `test/verification/` might be a good directory for them?. They can be run separately (separate pipeline) so they don't have to run quickly and can take a while so they can be comprehensive.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/347:28,test,testing,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/347,4,['test'],"['test', 'testing', 'tests']"
Testability,Following the reversal of the k index (PR #462) we need to regenerate all regression test data to correspond to the new convention. This PR does that. Had to update some of the tests as the output data format has changed (e.g. now has halos) and was originally generated a long time ago. I also increased code reuse among the regression tests for summarizing the result of each regression test. This PR is part of #471,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/526:85,test,test,85,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/526,4,['test'],"['test', 'tests']"
Testability,"Following up on @glwagner 's suggestion in #1532, here is a slight modification to `VerticallyStretchedGrid`, which is consistent with what I'm proposing in that other PR. I actually made a few changes here than I needed to, but these changes are cosmetic and have no impact on functionality. . There are two significant differences. . 1. Like the other grids, we now specify `x,y,z` when defining the grid. We can also add `extent` if people wanted, but it's not in place now.; 2. What is called `zF_generator` in `master`, is now passed as a separate argument. I also changed the name to `z_stetch` since this is what @tomchor used in his example and stretch seems more appropriate than generator. Again, this is easily changed. The grid tests all pass and not sure why other tests seem to fail. What do people think about this difference?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1544:740,test,tests,740,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1544,2,['test'],['tests']
Testability,"Following what seems to be the convention, e.g. `test/test_grids.jl` should probably just be called `test/grids.jl`.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/871:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/871,2,['test'],['test']
Testability,For MPI I ran it on up to 128 Intel(R) Xeon(R) CPU E5-2683 v4 @ 2.10GHz CPUs with efficiencies at around 80%. I think I have some results for MPI weak and strong scaling benchmarks posted here at the bottom #1722.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880842022:170,benchmark,benchmarks,170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-880842022,1,['benchmark'],['benchmarks']
Testability,"For complicated models and examples, user-defined forcing functions can impose significant penalties on simulation performance. In addition to that, models with extensive and complicated diagnostics (especially those involving time-averaging) can further slow down time-to-science. It thus might be useful to provide some utilities that make benchmarking forcing functions, boundary condition functions, and diagnostics a bit easier. For forcing functions, I think a utility that benchmarks time-stepping for two models that are identical except for forcing might be useful. Something along the lines of. ```julia; function benchmark_user_forcing(model); ; # Build a ""forcingless_model"" that's identical to model, but with no forcing functions; model_property_names = propertynames(model); forcingless_model_properties = Dict{Any, Any}(name => getproperty(model, name) for name in model_property_names); forcingless_model_properties[:forcing] = NamedTuple{}() # default; ModelConstructor = typeof(model).name.wrapper # or whatever this needs to be; forcingless_model = ModelConstructor(Tuple(forcingless_model_properties[name] for name in model_property_names)...). @info ""Benchmarking model with user forcing...""; @btime time_step!(model, 1). @info ""Benchmarking model without user forcing...""; @btime time_step!(forcingless_model, 1). return nothing; end; ```. might work for forcing functions. For boundary conditions, we have to build default boundary conditions manually and use the model's outer constructor (to avoid excess memory allocation), which is slightly more annoying, but should be supported by at least the nonhydrostatic and hydrostatic model constructors. For output I think we want to benchmark `fetch_output`:. https://github.com/CliMA/Oceananigans.jl/blob/051e03ecfcb0c00e0c6ed4dd2808148e700d0342/src/OutputWriters/fetch_output.jl#L17-L18. Worth noting that fetching is actually already timed by `JLD2OutputWriter` with `verbose=true`:. https://github.com/CliMA/Oceananigans.jl/b",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1918:342,benchmark,benchmarking,342,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1918,2,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"For example for the tripolar grid it looks like this. ```julia; 2160×1080×60 OrthogonalSphericalShellGrid{Float64, Periodic, RightConnected, Bounded} on GPU with 7×7×7 halo and with precomputed metrics; ├── centered at (λ, φ) = (75.0, 1.8005); ├── longitude: Periodic extent 360.167 degrees variably spaced with min(Δλ)=0.000208433, max(Δλ)=0.175625; ├── latitude: RightConnected extent 170.157 degrees variably spaced with min(Δφ)=0.000312453, max(Δφ)=0.157553; └── z: Bounded z ∈ [-6000.0, 0.0] variably spaced with min(Δz)=5.24961, max(Δz)=438.409; ```. This claims that whatever grid I've constructed is ""RightConnected"" in latitude. This doesn't really make sense to me... but let's set that aside (it's a separate issue with the tripolar grid). The bigger issue is that the y-topology is NOT the ""latitude topology"" --- on an orthogonal spherical shell grid, ""y"" and ""latitude"" are different (that's the whole point, when they do coincide we are on a LatitudeLongitudeGrid). We should design a good show method for this grid type. My impression is that the show method was copied from LatitudeLongitudeGrid. But we need to work a bit harder for OrthogonalSphericalShellGrid because it is more general. I think we should give information both about the coordinate system (lat, lon, z), and in addition to that and separately, give information about the logical arrangement of the grid (x, y, z), including the topology. The former is important for understanding the geography of the grid and the latter is important for understanding the discretization, and the two are distinct from one another. So the show method for this grid is going to be more involved than the others. I don't think we need to indicate whether the x, y directions are ""variably spaced"". That is useful for rectilinear and lat-lon grids, but not for general grids. . cc @navidcy @simone-silvestri",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3808:1358,log,logical,1358,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3808,1,['log'],['logical']
Testability,"For example:. ```julia; using Oceananigans; grid = RectilinearGrid(size=(3, 3, 3), extent=(1, 1, 1)); model = NonhydrostaticModel(; grid); simulation = Simulation(model; Δt=1.0, stop_iteration=3); simulation.output_writers[:jld2] =; JLD2OutputWriter(model, model.velocities, schedule=IterationInterval(1), indices=(:, 2, :), prefix=""test"", force=true); run!(simulation); wt = FieldTimeSeries(""test.jld2"", ""w""); # colon very important; ```. then. ```julia; julia> maximum(wt); ERROR: BoundsError: attempt to access 3×1×4×4 OffsetArray(::Array{Float64, 4}, 1:3, 2:2, 1:4, 1:4) with eltype Float64 with indices 1:3×2:2×1:4×1:4 at index [1, 1, 1, 1]; ```. well!. This affects `@show wt` since this attempts to compute statistics for a ""data summary"":. ```julia; julia> wt; Error showing value of type FieldTimeSeries{Center, Center, Face, InMemory, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, OffsetArrays.OffsetArray{Float64, 4, Array{Float64, 4}}, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, OffsetArrays.OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}}, CPU}, Float64, FieldBoundaryConditions{BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Periodic, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Open, Nothing}, BoundaryCondition{Oceananigans.BoundaryConditions.Flux, Nothing}}, Vector{Float64}}:; ERROR: BoundsError: attempt to access 3×1×4×4 OffsetArray(::Arr",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2424:333,test,test,333,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2424,2,['test'],['test']
Testability,For example:; https://buildkite.com/clima/oceananigans/builds/17468#0191fc2c-b421-4cf7-80b5-0429336b1d7f; https://buildkite.com/clima/oceananigans/builds/17473#0191fd88-d8b9-48d5-9c7f-18efc6747ea7; I believe this is because we are launching the docs from many different branches on a relatively small GPU. I think it would be best to move this test on the caltech cluster. Since the caltech cluster works with a slurm scheduler this error would never happen (I can open a PR to fix this),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3779:344,test,test,344,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3779,1,['test'],['test']
Testability,"For now the 10 tests affected by this are skipped with `@test_skip` and will show up as ""Broken"". Maybe we just have to define `convert` for Fields with OffsetArrays?. ```; Testing checkpointing...; WARNING: Forcing functions will not be serialized!; [Checkpointer] Serializing model to disk: ./test_model_checkpoint_0.jld; [Checkpointer] Reconstructing FFT plans...; WARNING: Forcing functions will not be serialized!; [Checkpointer] Serializing model to disk: ./test_model_checkpoint_5.jld; [Checkpointer] Reconstructing FFT plans...; Deserializing model from disk: test_model_checkpoint_5.jld; ┌ Warning: type Oceananigans.FaceFieldX{OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}},Oceananigans.RegularCartesianGrid{Core.Float64,Base.StepRangeLen{Core.Float64,Base.TwicePrecision{Core.Float64},Base.TwicePrecision{Core.Float64}}}} not present in workspace; reconstructing; └ @ JLD ~/.julia/packages/JLD/1BoSz/src/jld_types.jl:703; ┌ Warning: type OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}} not present in workspace; reconstructing; └ @ JLD ~/.julia/packages/JLD/1BoSz/src/jld_types.jl:703; Checkpointing: Error During Test at /home/alir/Oceananigans.jl/test/runtests.jl:293; Got exception outside of a @test; MethodError: Cannot `convert` an object of type getfield(JLD, Symbol(""##Oceananigans.FaceFieldX{OffsetArrays.OffsetArray{Core.Float64,3,Core.Array{Core.Float64,3}},Oceananigans.RegularCartesianGrid{Core.Float64,Base.StepRangeLen{Core.Float64,Base.TwicePrecision{Core.Float64},Base.TwicePrecision{Core.Float64}}}}#384"")) to an object of type FaceFieldX; Closest candidates are:; convert(::Type{T}, !Matched::T) where T at essentials.jl:154; Stacktrace:; [1] jlconvert(::Type{VelocityFields}, ::JLD.JldFile, ::Ptr{UInt8}) at /home/alir/.julia/packages/JLD/1BoSz/src/jld_types.jl:434; [2] read_scalar(::JLD.JldDataset, ::HDF5.HDF5Datatype, ::Type) at /home/alir/.julia/packages/JLD/1BoSz/src/JLD.jl:398; [3] read(::JLD.JldDataset) at /home/alir/.j",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/177:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/177,2,"['Test', 'test']","['Testing', 'tests']"
Testability,"For now this PR just adds a function `convective_adjustment!(model, Δt, K)` that performs a convective adjustment step on a model. . I believe this results in an operator splitting method for treating vertically implicit diffusion using backward Euler. ## TODO. If this seems like an appropriate method for implementing vertically implicit diffusion, I'd suggest the following steps for turning this PR into something that can be merged:; 1. Define a new closure; ```julia; 	struct ConvectiveAdjustment{K, ∂}; 	 κ :: K; 	∂b∂z :: ∂; 		...; 	end; ```; 2. Maybe `ConvectiveAdjustment` should act on a `BuoyancyField`?; 3. Refactor `convective_adjustment!` to use the `BatchedTridiagonalSolver`.; 4. Add a free convection test to test that using `ConvectiveAdjustment` on a linearly stratified column model results in a mixed layer with ∂b/∂z ≈ 0 (could also test for the mixed layer depth). `ConvectiveAdjustment` could then be used as part of a tuple of turbulence closures, e.g. ```julia; closure = (IsotropicDiffusivity(κ=1e-4), ConvectiveAdjustment(κv=10)); ```. ## Future plans?. Vertically implicit diffusion with the `BatchedTridiagonalSolver` could then be abstracted to support other parameterizations such as `OceanTurb.KPP` and `OceanTurb.TKEMassFlux`. I think @glwagner envisioned a more general way of time-stepping implicit terms in general, i.e. adding IMEX time-steppers I think?. ## Note on user interface. Right now the user must manually call `convective_adjustment!` inside the `simulation.progress` callback so it's very awkward to use, but it should be usable if we need it. Ideally `convective_adjustment!` would be called at the end of each time step, perhaps by `time_step!` or by a simulation callback. The second approach would require resolving #1138.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1342:718,test,test,718,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1342,3,['test'],['test']
Testability,"For reference, here are some quick and dirty surface buoyancy plots from the Oceananigans setup at 4 and 10 days. Kind of close to Haine & Marshall (1998) figure 8 but probably not enough for a validation test as it's just eyeballing. ![image (1)](https://user-images.githubusercontent.com/20099589/85021841-70feee00-b140-11ea-9e4b-fe8d9560d39a.png). ![image (2)](https://user-images.githubusercontent.com/20099589/85021848-73614800-b140-11ea-9415-22d9330fc461.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/771#issuecomment-645995878:205,test,test,205,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/771#issuecomment-645995878,1,['test'],['test']
Testability,"For reference, with the same sized grid but regularly spaced the same benchmark gives this:; ```bash; BenchmarkTools.Trial: 10000 samples with 916 evaluations.; Range (min … max): 116.721 ns … 6.288 μs ┊ GC (min … max): 0.00% … 0.00%; Time (median): 123.181 ns ┊ GC (median): 0.00%; Time (mean ± σ): 131.844 ns ± 171.767 ns ┊ GC (mean ± σ): 2.51% ± 2.39%. █ ; ▄▃▃▃▃▃█▅▄▅▇▇▄▃▃▃▃▃▃▃▃▃▃▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▂▁▂▂▁▁▂▂▂▁▂▂▂▂ ▂; 117 ns Histogram: frequency by time 165 ns <. Memory estimate: 64 bytes, allocs estimate: 4.; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365912859:70,benchmark,benchmark,70,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2859#issuecomment-1365912859,2,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"For small scale testing we could use JuliaGPUs buildkite. On Wed, Sep 4, 2024 at 12:32 PM Simone Silvestri ***@***.***>; wrote:. > Right, I think the problem is the availability of AMD GPUs to run tests.; > If we find one, I can revamp this.; >; > —; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328512985>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/AABDO2XVCEUJNTZHWDD36KDZU3OVLAVCNFSM6AAAAABDHAZB6GVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZDGMRYGUYTEOJYGU>; > .; > You are receiving this because you were mentioned.Message ID:; > ***@***.***>; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328706255:16,test,testing,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3475#issuecomment-2328706255,2,['test'],"['testing', 'tests']"
Testability,"For some reason Travis CI builds are passing the tests but failing when building documentation (so it looks like all Travis CI builds are failing) because it's installing GPUifyLoops.jl. Resolving this issue with also fix the Travis CI doc build. ```; 64.44s$ julia --project=docs/ docs/make.jl; WARNING: Method definition overdub(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /home/travis/.julia/packages/Cassette/1rVkq/src/overdub.jl:500 overwritten in module GPUifyLoops at /home/travis/.julia/packages/Cassette/1rVkq/src/overdub.jl:500.; WARNING: Method definition recurse(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /home/travis/.julia/packages/Cassette/1rVkq/src/overdub.jl:512 overwritten in module GPUifyLoops at /home/travis/.julia/packages/Cassette/1rVkq/src/overdub.jl:512.; WARNING: Method definition overdub(Cassette.Context{N, M, T, P, B, H} where H<:Union{Cassette.DisableHooks, Nothing} where B<:Union{Nothing, Base.IdDict{Module, Base.Dict{Symbol, Cassette.BindingMeta}}} where P<:Cassette.AbstractPass where T<:Union{Nothing, Cassette.Tag{N, X, E} where E where X where N<:Cassette.AbstractContextName} where M where N<:Cassette.AbstractContextName, Any...) in module Cassette at /home/travis/.julia/packages/Cassette/1rVkq/src/overdub.jl:500 overwritten in module GPUifyLoops at /home/travis/.julia/packages/Cassette/1",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/153#issuecomment-477579168:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/153#issuecomment-477579168,1,['test'],['tests']
Testability,"For some reason when I tested the code after merging https://github.com/CliMA/Oceananigans.jl/pull/2028 it didn't really work on my main code for GPUs. . It worked for a MWE when I tested it [here](https://github.com/CliMA/Oceananigans.jl/pull/2028#issuecomment-952089949) but I guess I must have done something wrong? In any case, I apologize!. I also expanded the test to test grids on GPUs (which would have caught this error) so I think this'll help. Given that we _just_ released a new version, I didn't bump this to 0.63.4 here. But let me know if I should do that. CC: @navidcy",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2030:23,test,tested,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2030,4,['test'],"['test', 'tested']"
Testability,For sure because there are no regression tests,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1498244806:41,test,tests,41,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1498244806,1,['test'],['tests']
Testability,For sure. The trick about the global environment is just Julia knowledge. But it is relevant to efficient workflows for testing so we can indeed put it there. Personally I don't test just one file unless I am debugging major refactors but perhaps others do it differently...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000034395:120,test,testing,120,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3507#issuecomment-2000034395,2,['test'],"['test', 'testing']"
Testability,"For the GPU case, again for 128x128 (still rather coarse and results will depend on resolution I suspect). ```; scheme ratio; ====== ===; C2 1.2; U3 1.5; C4 2.4; U5 1.5; W5 7.0. ```. In general the scalings tend to be better on GPUs vs CPUs (on this coarse grid). It does seem that `WENO5` does much worst, relatively speaking. . Benchmarks that I did with @ali-ramadhan found that on GPUs vs CPUs, shallow water model could be faster by a factor of `170`, which was for `U5`. With `WENO5` it was double that. I guess the moral of the story is that `WENO5` is very different and sometimes much better and sometimes much worst. I should say that the difference from the first run to the second sometimes differed by a factor of `10`!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816776677:330,Benchmark,Benchmarks,330,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1564#issuecomment-816776677,1,['Benchmark'],['Benchmarks']
Testability,Found out int PR #336 that we can explicitly time-step w which will be nice as it'll work for simulations without a rigid lid. All tests passed when I made the change so should be a quick change.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/338:131,test,tests,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/338,1,['test'],['tests']
Testability,Free convection test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/123:16,test,test,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/123,1,['test'],['test']
Testability,"From a MWE similar to the one in #3899 (adding some more reduced directions):; ```julia; using Oceananigans; using GLMakie. grid = RectilinearGrid(size = (10, 10, 10), extent = (10, 10, 10)); bottom(x, y) = - rand() * 5 # Between -5 and 0; grid = ImmersedBoundaryGrid(grid, GridFittedBottom(bottom)). f1 = Field{Center, Center, Nothing}(grid); f2 = Field{Center, Nothing, Center}(grid); f3 = Field{Nothing, Center, Center}(grid); set!(f1, (x, y) -> rand()); set!(f2, (x, y) -> rand()); set!(f3, (x, y) -> rand()). fig = Figure(); ax1 = Axis(fig[1, 1]); ax2 = Axis(fig[1, 2]); ax3 = Axis(fig[1, 3]); heatmap!(ax1, f1); heatmap!(ax2, f2); heatmap!(ax3, f3); ```; <img width=""1174"" alt=""Screenshot 2024-11-05 at 12 26 38 PM"" src=""https://github.com/user-attachments/assets/fc22559f-2615-4e3e-b687-52f40ac5cd4e"">. Should we add some tests?. closes #3899",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3900:829,test,tests,829,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3900,1,['test'],['tests']
Testability,"From call with @glwagner: We should properly test that the pressure projection step produces an incompressible flow field (without computing w from continuity). Right now the `incompressible_in_time` test found in `test_time_stepping.jl` tests for incompressibility after `time_step!` is done and w has been recomputed from w. Interestingly, the sum accumulated in time while the sum of the absolute values does not:. ```; [04/03/2020 13:57:51] Velocity divergence after 1 time steps [CPU, Float64]: min=-6.037244272213971e-19, max=-6.037244272213971e-19, sum=-1.9275293505266353e-22, abs_sum=1.284399769586337e-16 --- Info /home/travis/build/climate-machine/Oceananigans.jl/test/test_time_stepping.jl:106; [04/03/2020 13:57:52] Velocity divergence after 10 time steps [CPU, Float64]: min=-7.735240399597831e-19, max=-7.735240399597831e-19, sum=1.666113807244092e-21, abs_sum=1.5625275138570133e-16 --- Info /home/travis/build/climate-machine/Oceananigans.jl/test/test_time_stepping.jl:106; [04/03/2020 13:58:06] Velocity divergence after 100 time steps [CPU, Float64]: min=-6.005395833397209e-19, max=-6.005395833397209e-19, sum=8.58925289833789e-20, abs_sum=2.661629631159426e-16 --- Info /home/travis/build/climate-machine/Oceananigans.jl/test/test_time_stepping.jl:106; ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/673:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/673,6,['test'],"['test', 'tests']"
Testability,"From https://github.com/CliMA/Oceananigans.jl/blob/glw/computed-field-diffusivities/test/test_turbulence_closures.jl, it would be nice to have this feature in the main branch. In particular, it would allow for users to implement their own turbulence closures or mimic the effect of no flux boundary conditions on an immersed boundary",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1327:84,test,test,84,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1327,1,['test'],['test']
Testability,"From looking at the old Travis build log: https://travis-ci.com/github/CliMA/Oceananigans.jl/jobs/281310734. Looks like there's a pressure solver for vertically stretched grids that passes tests. And the regression tests were run on vertically stretched grids with constant grid spacings but they all fail since things blow up, e.g. ```; Testing vertically stretched grid with constant spacing [CPU] --- [29/01/2020 05:18:34] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:50; Δu: min=-3.8942e+65, max=3.88975e+65, mean=5.8421e+45, absmean=7.84018e+62, std=1.04702e+64; --- [29/01/2020 05:18:49] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:11; Δv: min=-3.8942e+65, max=3.88975e+65, mean=-7.77899e+46, absmean=7.84018e+62, std=1.04702e+64; --- [29/01/2020 05:18:49] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:11; Δw: min=-7.38289e+65, max=1.69765e+65, mean=4.87564e+46, absmean=7.48473e+62, std=1.3285e+64; --- [29/01/2020 05:18:49] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:11; ΔT: min=-4.52731e+63, max=1.7358e+64, mean=-1.98187e+45, absmean=2.06322e+61, std=3.64177e+62; --- [29/01/2020 05:18:49] Info /home/travis/build/climate-machine/Oceananigans.jl/test/regression_tests/test_regression.jl:11; ΔS: min=-1.60869e+64, max=6.16781e+64, mean=2.97753e+44, absmean=7.33104e+61, std=1.29403e+63; ```. Seems like a good place to start.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1332#issuecomment-771942522:37,log,log,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1332#issuecomment-771942522,9,"['Test', 'log', 'test']","['Testing', 'log', 'test', 'tests']"
Testability,From the [log](https://buildkite.com/clima/oceananigans/builds/3685#e88e73f9-20e6-43c6-8c05-64c492318d38) I see that the DOCUMENTER_KEY is OK! But I think the first commit doesn't generate the preview (this was already the case previously when things were working). I pushed again something nothing really to see what happens!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1940#issuecomment-901439660:10,log,log,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1940#issuecomment-901439660,1,['log'],['log']
Testability,From the test log; ```; WARNING: using CUDAdrv.device in module TimeSteppers conflicts with an existing identifier.; ```. Was also responsible for test failures on PR #559. Another reason to prefer `import` over `using`.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/563:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/563,3,"['log', 'test']","['log', 'test']"
Testability,Further increase tolerance in implicit free surface solver tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1689:59,test,tests,59,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1689,1,['test'],['tests']
Testability,Further system testing and checking for float precision issues.,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/168:15,test,testing,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/168,1,['test'],['testing']
Testability,Future work on the particles module is also to write some tests for immersed boundary particle tracking,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2684#issuecomment-1198677572:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2684#issuecomment-1198677572,1,['test'],['tests']
Testability,"Fw_func#85"",NamedTuple{(:τ,),Tuple{Int64}}},typeof(Oceananigans.Forcing.zeroforcing),typeof(Oceananigans.Forcing.zeroforcing)}},CenteredSecondOrder,PressureSolver{Oceananigans.Solvers.HorizontallyPeriodic,GPU,NamedTuple{(:kx², :ky², :kz²),Tuple{CuArray{Float64,3},CuArray{Float64,3},CuArray{Float64,3}}},CuArray{Complex{Float64},3},NamedTuple{(:FFTxy!, :FFTz!, :IFFTxy!, :IFFTz!),Tuple{CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},-1,true,3},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64},AbstractFFTs.ScaledPlan{Complex{Float64},CUDA.CUFFT.cCuFFTPlan{Complex{Float64},1,true,3},Float64}}},NamedTuple{(:ω_4Nz⁺, :ω_4Nz⁻),Tuple{CuArray{Complex{Float64},3},CuArray{Complex{Float64},3}}}},Nothing}, ::Int64; euler::Bool) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/src/TimeSteppers/adams_bashforth.jl:50; [29] time_step_with_parameterized_forcing(::GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:40; [30] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:137 [inlined]; [31] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [32] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:135 [inlined]; [33] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [34] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_forcings.jl:124; ; NetCDF [GPU]: Error During Test at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:524; Got exception outside of a @test; MethodError: no method matching device(::CuContext); Closest candidates are:; device() at /home/ancellin/.julia/packages/CUDA/d6WNR/src/state.jl:225; Stacktrace:; [1] |>(::CuContext, ::typeof(CUDA.device)) at ./operators.jl:823; [2] ver",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:76312,test,test,76312,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,GPU CI is actually running tests on the CPU,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1794:27,test,tests,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1794,1,['test'],['tests']
Testability,GPU Poisson solver tests,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/200:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/200,1,['test'],['tests']
Testability,GPU regressions tests fail. @ali-ramadhan any idea why?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1231#issuecomment-735611793:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1231#issuecomment-735611793,1,['test'],['tests']
Testability,GPU simulations tests fail?,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1992:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1992,1,['test'],['tests']
Testability,"GPU tests all pass on Supercloud so I'll merge this! We can always rescue the ""stale"" scripts from git history if we need them again. Nice to see `set_ic!` in the main code.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-515043124:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-515043124,1,['test'],['tests']
Testability,GPU tests are failing because of an issue with CUDA drivers on sverdrup but hopefully these will be resolved by tomorrow morning.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-854172866:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1733#issuecomment-854172866,1,['test'],['tests']
Testability,"GPU tests fail as expected!. ```. [2021/04/08 16:37:27.123] INFO Testing (Flat, Bounded, Bounded) topology on square grids [GPU]...; --;   | Divergence-free solution [GPU]: Test Failed at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-8/clima/oceananigans/test/test_poisson_solvers.jl:233;   | Expression: divergence_free_poisson_solution(arch, grid);   | Stacktrace:;   | [1] top-level scope at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-8/clima/oceananigans/test/test_poisson_solvers.jl:233;   | [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119;   | [3] top-level scope at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-8/clima/oceananigans/test/test_poisson_solvers.jl:213;   | [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Test/src/Test.jl:1119;   | [5] top-level scope at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-8/clima/oceananigans/test/test_poisson_solvers.jl:184. ```. Now to try a fix...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-816242909:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1560#issuecomment-816242909,11,"['Test', 'test']","['Test', 'Testing', 'test', 'tests']"
Testability,GPU tests look like they failed but they actually passed on v1.1 (but crapped out on v1.2). . I could rerun the v1.2 job but this PR seems safe to merge.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/514#issuecomment-548182491:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/514#issuecomment-548182491,1,['test'],['tests']
Testability,GPU tests pass and benchmarks for constant diffusivity haven't changed much so looks good to merge.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-511052327:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/312#issuecomment-511052327,2,"['benchmark', 'test']","['benchmarks', 'tests']"
Testability,GPU tests pass except for some issue with the NetCDF output writer and `time_to_write`. EDIT: Fixed in https://github.com/climate-machine/Oceananigans.jl/pull/329/commits/837ebc351e20832ce3f5856b374a12abd317074b,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-518410863:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-518410863,1,['test'],['tests']
Testability,GPU tests take way too long,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2139:4,test,tests,4,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2139,1,['test'],['tests']
Testability,GPU timestep tests are taking too long,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2325:13,test,tests,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2325,1,['test'],['tests']
Testability,"GPU) at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:29; [6] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:526 [inlined]; [7] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [8] macro expansion at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:525 [inlined]; [9] macro expansion at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113 [inlined]; [10] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_output_writers.jl:521; [11] include(::String) at ./client.jl:439; [12] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:94; [13] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [14] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/runtests.jl:76; [15] include(::String) at ./client.jl:439; [16] top-level scope at none:6; [17] eval(::Module, ::Any) at ./boot.jl:331; [18] exec_options(::Base.JLOptions) at ./client.jl:264; [19] _start() at ./client.jl:484; ; i: 0001, t: 1.000 s, Δt: 1.100 s, wmax = 2.7e-04 ms⁻¹, wall time: 18.164 s; progress: 0.0 %, i: 0001, t: 1.000 s, Δt: 1.100 s, wall time: 11.110 s; N² = ((Rᵈ * f) / Lz) ^ 2 = 0.0004; α = sqrt(N²) / (f * σᵇ) = 0.02314814814814815; i: 0010, t: 3.667 min, Δt: 22.000 s, umax = (2.4e-01, 2.3e-01, 1.9e-05) ms⁻¹, wall time: 12.877 s; Simulating stratified plane Couette flow. N : 16, 16, 8; L : 12.6, 6.28, 2; Re : 4250.000; Ri : 0.010; Pr : 0.700; ν : 0.000235; κ : 0.000336; U_wall : 1.000; Θ_wall : 0.010. [1000.00%] i: 1, t: 1.00e-04, umax: (1.59e+00, 3.11e-01, 3.85e-01), CFL: 2.03e-04, νκmax: (9.98e-02, 9.97e-02), νκCFL: (1.60e-04, 1.60e-04), next Δt: 1.00e-04, wall time: 82.994 ms; Running static ocean benchmark: 16× 16× 16 [CPU, Float32]...; Running s",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:102763,test,test,102763,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,"GPUs.; 23 closures = [IsotropicDiffusivity, AnisotropicDiffusivity, SmagorinskyLilly,; 24 	 VerstappenAnisotropicMinimumDissipation]; 25 ; 26 #####; 27 ##### Run benchmarks; 28 #####; 29 ; 30 for arch in archs, FT in float_types, N in Ns, Closure in closures; 31 	grid = RegularCartesianGrid(FT, size=N, extent=(1, 1, 1)); 32 model = IncompressibleModel(architecture=arch, float_type=FT, grid=grid, closure=Closure(FT)); 33 ; 34 time_step!(model, 1) # precompile; 35 ; 36 bn = benchmark_name(N, string(Closure), arch, FT); 37 @printf(""Running benchmark: %s...\n"", bn); 38 for i in 1:Nt; 39 @timeit timer bn time_step!(model, 1); 40 end; 41 end; 42 ; 43 #####; 44 ##### Print benchmark results; 45 #####; 46 ; 47 println(); 48 println(oceananigans_versioninfo()); 49 println(versioninfo_with_gpu()); 50 print_timer(timer, title=""Turbulence closure benchmarks"", sortby=:name); 51 println(); 52 ; 53 end # module; Turbulence closures benchmark: Test Failed at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:45; Expression: run_script(replace_strings, ""turbulence_closures"", benchmark_filepath(""turbulence_closures"")); Stacktrace:; [1] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:45; [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [3] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:38; [4] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [5] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:13; [6] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113; [7] top-level scope at /home/ancellin/.julia/packages/Oceananigans/LW3v4/test/test_benchmarks.jl:10; Running benchmark: 16× 16× 16 0 active + 0 passive [CPU, Float64]...; Running benchmark: 16× 1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/882:113170,test,test,113170,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/882,1,['test'],['test']
Testability,"Gael, this is very helpful and much appreciated! Thank you!. I'm re-running the tests, which seemed to fail for no reason related to your PR. Hopefully they'll pass and we can merge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/747#issuecomment-626655059:80,test,tests,80,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/747#issuecomment-626655059,1,['test'],['tests']
Testability,Generalizes budget tests for Flux boundary conditions to every topology and boundary,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1486:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1486,1,['test'],['tests']
Testability,"Generally looks fine. Some nice clean up!. It seems you're gravitating towards having fewer files which I think is a bad idea. Having more modular files helps a lot with both readability and organization, especially for someone who's looking through the code for the first time. It also becomes harder to find stuff with longer files. For example, It's not logically clear to me that forcings and field sets should be in `models.jl`. And if I'm looking through the file for the first time, I might find it hard to comprehend all the different functionalities provided in the file. Unrelated to this PR but working on the checkpointer in `output_writers.jl` the file has become a long list of functions, some of which are shared between multiple output writers so I think it makes more sense to split it into a set of shared functions and a file for each output writer.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/325#issuecomment-517483988:357,log,logically,357,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/325#issuecomment-517483988,1,['log'],['logically']
Testability,GitLab CI passes and so does the RB regression test so I'll merge this now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/243#issuecomment-496253638:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/243#issuecomment-496253638,1,['test'],['test']
Testability,GitLab CI seems to have crapped out but GPU tests pass on Cyclops: https://gist.github.com/ali-ramadhan/ec039bd71c21daff23c140b8aec180eb,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561431896:44,test,tests,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/533#issuecomment-561431896,1,['test'],['tests']
Testability,Glad you could figure it out. Did you want me to test if this change removes the error?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3790#issuecomment-2374825497:49,test,test,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3790#issuecomment-2374825497,1,['test'],['test']
Testability,"Global ocean benchmarks (from [prototype_omip_simulation.jl](https://github.com/CliMA/ClimaOcean.jl/blob/dfafbae5cc92b9546183ea56c472418e175b7a0b/prototype_omip_simulation/prototype_omip_simulation.jl)) using ; ```julia; tracer_advection = TracerAdvection(WENO(; order = 7), WENO(; order =7), Centered()); momentum_advection = WENOVectorInvariant(); ```; # On Main; <img width=""762"" alt=""Screenshot 2024-07-24 at 10 31 27 AM"" src=""https://github.com/user-attachments/assets/5fe5d90c-9c8b-4b8d-ba8d-af85650ebc6c"">. # On this branch; <img width=""790"" alt=""Screenshot 2024-07-24 at 10 29 15 AM"" src=""https://github.com/user-attachments/assets/143d3bba-1c6d-4684-84d9-63d7dbe27501"">",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2248001769:13,benchmark,benchmarks,13,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3658#issuecomment-2248001769,1,['benchmark'],['benchmarks']
Testability,"Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, CUDAnative.CuDeviceArray{Float64,3,CUDAnative.AS.Global}, Forcing{typeof(Oceananigans.zero_func),typeof(Oceananigans.zero_func),typeof(Oceananigans.zero_func),typeof(Oceananigans.zero_func),typeof(FS)}) resulted in invalid LLVM IR; Reason: unsupported dynamic function invocation (call to Cassette.overdub); Stacktrace:; [1] S★ at /archive1/glwagner/Projects/Oceananigans.jl/sandbox/simple_forcing.jl:21; [2] FS at /archive1/glwagner/Projects/Oceananigans.jl/sandbox/simple_forcing.jl:22; [3] calculate_interior_source_terms! at /archive1/glwagner/Projects/Oceananigans.jl/src/time_steppers.jl:178; [4] #12 at /data5/glwagner/.julia/packages/GPUifyLoops/hBRid/src/context.jl:136; Reason: unsupported dynamic function invocation (call to Cassette.overdub); Stacktrace:; [1] FS at /archive1/glwagner/Projects/Oceananigans.jl/sandbox/simple_forcing.jl:22; [2] calculate_interior_source_terms! at /archive1/glwagner/Projects/Oceananigans.jl/src/time_steppers.jl:178; [3] #12 at /data5/glwagner/.julia/packages/GPUifyLoops/hBRid/src/context.jl:136; Reason: unsupported dynamic function invocation (call to Cassette.overdub); Stacktrace:; [1] calculate_interior_source_terms! at /archive1/glwagner/Projects/Oceananigans.jl/src/time_steppers.jl:178; [2] #12 at /data5/glwagner/.julia/packages/GPUifyLoops/hBRid/src/context.jl:136; Stacktrace:; [1] check_ir(::CUDAnative.CompilerJob, ::LLVM.Module) at /data5/glwagner/.julia/packages/CUDAnative/9rZcJ/src/compiler/validation.jl",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/248#issuecomment-496489468:3014,sandbox,sandbox,3014,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/248#issuecomment-496489468,1,['sandbox'],['sandbox']
Testability,Go ahead @francispoulin! I ll fix the merge conflicts and set up the shallow water bickley regression test,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141167762:102,test,test,102,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1141167762,1,['test'],['test']
Testability,"Go for it! If you want to discuss an idea before writing code, let's discuss here. Here's my thoughts:. 1. We can add a color to an important `show` method like one / all of the models, or `Simulation`; 2. We can add a nice utility for logging progress that uses `Term.jl`, that users can configure and then add to `simulation.callbacks` (we could also consider making it default)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1077663914:236,log,logging,236,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2281#issuecomment-1077663914,1,['log'],['logging']
Testability,"Gonna close this issue with PR #872 as there's not much to do and no actionable items. Unless we get paid-tier CI we'll probably stick with Travis CI (Linux+Mac CPU + doc builds), GitLab CI (Linux CPU+GPU), Appveyor CI (Windows CPU), and Docker CI. With MPI (#590) we'll probably have to look into https://github.com/CliMA/slurmci. > it's already annoying that I have to wait several minutes for the GPU tests to run. Haha those were good times.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/139#issuecomment-682097986:404,test,tests,404,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/139#issuecomment-682097986,1,['test'],['tests']
Testability,Good catch! Added a `README.md` generally describing the benchmarks and with instructions on how to instantiate and run benchmarks scripts.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-732297432:57,benchmark,benchmarks,57,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1169#issuecomment-732297432,2,['benchmark'],['benchmarks']
Testability,"Good catch! I think we should test that, but indeed a slimmer version of that test is preferred.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2647#issuecomment-1181924885:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2647#issuecomment-1181924885,2,['test'],['test']
Testability,"Good idea! Does this mean tagging v0.94.0 (and one stop closer to v0.100) as it's a change to the public interface?. > Remove `OceananigansLogger`: rarely used. I use it in almost every script I write haha, but that's because I wrote it to my liking. There's a strong argument to be made that a logger configuration does not belong in Oceananigans.jl. I feel it's similar to Oceananigans' decision to not provide a default progress callback seeing as each user will probably want a different one. > Remove `StateChecker`: not used as far as I know. Yeah I think I used that to debug cubed sphere stuff. Could easily be defined in a validation script though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3872#issuecomment-2439726627:295,log,logger,295,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3872#issuecomment-2439726627,1,['log'],['logger']
Testability,Good idea!. @navidcy did you manually cancel the tests?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499729815:49,test,tests,49,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3054#issuecomment-1499729815,1,['test'],['tests']
Testability,"Good idea, let's change the phrase but keep this issue open so that I remember to tackle the performance benchmarks",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3758#issuecomment-2327680150:105,benchmark,benchmarks,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3758#issuecomment-2327680150,1,['benchmark'],['benchmarks']
Testability,Good logging should be a high priority item. Python's logging is great... Some options:; * [Base logging](https://docs.julialang.org/en/v1/stdlib/Logging/index.html); * [Memento.jl](https://github.com/invenia/Memento.jl); * [MicroLogging.jl](https://github.com/c42f/MicroLogging.jl),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71:5,log,logging,5,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71,4,"['Log', 'log']","['Logging', 'logging']"
Testability,"Good news: shallow water tests pass!. Bad news: the halo tests now has 12 fails, of 600 in total. . ```; <div class=""JobLogOutputComponent"" style=""box-sizing: border-box; background: rgb(23, 23, 23); border-radius: 3px; min-height: 85px; color: white; font-size: 12px; padding: 0px 0px 15px; width: 1108px; font-family: -apple-system, BlinkMacSystemFont, &quot;Segoe UI&quot;, Roboto, &quot;Helvetica Neue&quot;, Helvetica, sans-serif; font-style: normal; font-variant-ligatures: normal; font-variant-caps: normal; font-weight: 400; letter-spacing: normal; orphans: 2; text-align: start; text-indent: 0px; text-transform: none; white-space: normal; widows: 2; word-spacing: 0px; -webkit-text-stroke-width: 0px; text-decoration-thickness: initial; text-decoration-style: initial; text-decoration-color: initial;""><div class=""JobLogOutputComponent__Body"" style=""box-sizing: border-box; font-family: SFMono-Regular, Monaco, Menlo, Consolas, &quot;Liberation Mono&quot;, Courier, monospace;"">; Oceananigans \| 818 12 830; --; &nbsp; | Distributed MPI Oceananigans \| 816 12 828; &nbsp; | Multi architectures rank connectivity \| 28 28; &nbsp; | Local grids for distributed models \| 24 24; &nbsp; | Injection of halo communication BCs \| 168 168; &nbsp; | Halo communication \| 588 12 600; &nbsp; | Time stepping IncompressibleModel \| 4 4; &nbsp; | Time stepping ShallowWaterModel \| 4 4; &nbsp; | Distributed FFT-based Poisson solver \| 2 2; &nbsp; | ERROR: ERROR: ERROR: ERROR: LoadError: LoadError: LoadError: LoadError: Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.; &nbsp; | in expression starting at /storage7/buildkite-agent/builds/tartarus-mit-edu-6/clima/oceananigans/test/runtests.jl:80; &nbsp; | Some tests did not pass: 818 passed, 0 failed, 12 errored, 0 broken.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081:25,test,tests,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843285081,3,['test'],['tests']
Testability,"Good one. On Sat, Aug 10, 2019, 6:34 PM Ali Ramadhan <notifications@github.com> wrote:. > This PR introduces reorganizes the diagnostics structs and introduces a; > new HorizontallyAveragedVerticalProfile diagnostic that can calculate; > vertical profiles efficiently on-the-fly on CPUs and GPUs. Other; > diagnostics like product and covariance profiles can be built on top of it.; >; > HorizontallyAveragedVerticalProfile is kind of a mouthful, suggestions; > welcome if anyone has a better name. I wanted to explicitly state; > ""horizontally averaged"" as vertical profiles are commonly used as well and; > imply no averaging.; >; > The profile can be passed to an output writer which can write it to disk.; >; > The horizontal averaging currently relies on a parallel reduction prefix; > sum algorithm that I hacked over a CUDAnative.jl example, although I do; > have a test for the diagnostic so it does work. The algorithm can be more; > efficient (see JuliaGPU/CuArrays.jl#68; > <https://github.com/JuliaGPU/CuArrays.jl/issues/68>).; >; > It allocates very minimal amounts of memory (less than mean) and; > benchmarks show that it is ~20x faster than what we were doing before; > (copying to CPU and calculating there) which is great but it's ~5x slower; > than optimal performance.; >; > As it does not allocate memory, we can now calculate vertical profiles; > even when running large models that fill up memory.; >; > Although I should mention that an intermediate array with a size of at; > least 1*Ny*Nz is required for the parallel reduction step (so I'm using; > poisson_solvers.storage because it's a vanilla CuArray that can be; > overwritten).; >; > N, H = 512, 1; > T = N + 2H; >; > a = rand(T, T, T) |> CuArray; > h = zeros(N) |> CuArray; >; > What we were doing before:; >; > @benchmark CuArrays.@sync mean(Array(view(a, H:N+H, H:N+H, H:N+H)), dims=[1, 2]); >; > BenchmarkTools.Trial:; > memory estimate: 1.01 GiB; > allocs estimate: 250; > --------------; > minimum time: 684.013 m",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520187010:873,test,test,873,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/352#issuecomment-520187010,1,['test'],['test']
Testability,Good point! Yes. OK. Test is being written!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046437228:21,Test,Test,21,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2260#issuecomment-1046437228,1,['Test'],['Test']
Testability,Good thing to test as it exposed a typo. Resolves #539,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/549:14,test,test,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/549,1,['test'],['test']
Testability,"Good trick. On Wed, May 8, 2019, 8:00 PM jm-c <notifications@github.com> wrote:. > I did not update the output files, hoping that the travis tests will fail.; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/pull/215#issuecomment-490693873>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKXUEQRXF7WIV5YU3PETCMDPUNSQPANCNFSM4HLWAKKQ>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-490700852:141,test,tests,141,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/215#issuecomment-490700852,1,['test'],['tests']
Testability,Good! I wonder if we can add a test here too to wrap this up.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1239590711:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2721#issuecomment-1239590711,1,['test'],['test']
Testability,"Got rid of the `if` statements in the operators and closure operators which felt good (we should really merge the two sets of operators in PR #283). Had to do some extra halo filling and index gymnastics to get all the tests to pass again since we now have z-halos but almost everything works (regression passes so at least we know the numbers haven't changed). A few turbulence closure tests are now failing but I couldn't trace the issue, must be a halo issue. The CI logs will probably give more info but it's `test_constant_isotropic_diffusivity_fluxdiv` and `test_anisotropic_diffusivity_fluxdiv`. It's the z part that fails; ```julia; ∂ⱼ_2ν_Σ₃ⱼ(2, 1, 1, grid, closure, U...) == 6ν; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-518443963:219,test,tests,219,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/329#issuecomment-518443963,3,"['log', 'test']","['logs', 'tests']"
Testability,Got the 1D and 2D solvers working and confirmed that they converge spectrally using your 2D wavenumber construction. Here are the tests you've been craving: [`test_spectral_solvers.jl`](https://github.com/ali-ramadhan/OceanDispatch.jl/blob/fixing-nonhydrostatic-algorithm/test/test_spectral_solvers.jl),MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/6#issuecomment-439653114:130,test,tests,130,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/6#issuecomment-439653114,2,['test'],"['test', 'tests']"
Testability,"Got the checkpointer to work by defining a `saveproperty!` on `AdamsBashforthTimestepper`. Tests passed on my laptop, so I'm hoping CI pipelines will also pass.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/389#issuecomment-527174668:91,Test,Tests,91,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/389#issuecomment-527174668,1,['Test'],['Tests']
Testability,"Got the regression tests error (tests pass locally), it was from the change to the order of halo filling with open boundaries separated from normal boundaries which I have now corrected",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2152786764:19,test,tests,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3482#issuecomment-2152786764,2,['test'],['tests']
Testability,"Great job! Though I have not looked at the code, I have two comments:. 1. I am surprised that the choice of `regularization` affects the convergence rate. I will think about it more.; 2. The rate of convergence depends on the distribution of eigenvalues of the preconditioned linear operator. I have a piece code of that outputs the preconditioned linear operator as a dense `Matrix`, which can be useful for testing the convergence rate and new algorithms without invoking `Oceananigans`. It can be helpful for testing why `FlatExtrapolationOpenBoundaryCondition` results in a much slower convergence. Besides, I have found that grids with better symmetry have faster convergence because the resulting Laplacian operators have more repeated eigenvalues. In theory, the number of iterations required for the CG method to get the exact solution is the number of unique eigenvalues. ```Julia; using LinearAlgebra; using Oceananigans; using Oceananigans.Models.NonhydrostaticModels: ImmersedPoissonSolver; using Oceananigans.ImmersedBoundaries: active_cells_map, immersed_cell, mask_immersed_field!; using Oceananigans.Solvers: solve!; using Statistics: norm, mean. using Oceananigans.Solvers: precondition!. ENV[""JULIA_DEBUG""] = ""Solvers"". # ---------------------------------------------------------------------- #; # Define Parameters. # Numerical Technic; const arch = CPU(). # Grid; const Nx = 10; const Ny = 10; const Nz = 10; const Lx = 1.0; const Ly = 1.0; const Lz = 1.0. const Δz = Lz / 2 # elevation difference at the top. # ---------------------------------------------------------------------- #; # Define Utils. # Height at Top; @inline function z_top(y::R) where {R<:Real}; # return Lz - Δz * sin(π/2 * y/Ly) - Δz * 0.2; return Lz - Δz; end. # ---------------------------------------------------------------------- #; # Define the Simulation. # Grid; ib_grid = begin; underlying_grid = RectilinearGrid(; arch,; size = (Nx, Ny, Nz),; x = (-Lx / 2, Lx / 2),; y = (0.0, Ly),; z = (0.0, Lz),; t",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3848#issuecomment-2420373611:409,test,testing,409,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3848#issuecomment-2420373611,2,['test'],['testing']
Testability,Great to hear the tests are working!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1480991004:18,test,tests,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1480991004,1,['test'],['tests']
Testability,Great! I'll merge when tests pass.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2439#issuecomment-1100211147:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2439#issuecomment-1100211147,1,['test'],['tests']
Testability,"Great! Now we just need a test in CI to make sure it doesn't break in the future, and we can merge this PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2087#issuecomment-986785546:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2087#issuecomment-986785546,1,['test'],['test']
Testability,Great! When all tests pass you can merge.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2024689536:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3523#issuecomment-2024689536,1,['test'],['tests']
Testability,"Great, I also think option 4 is the best. I prefer the kwarg formulation, but I don't feel strongly about it. The issue atm is that I think I won't have time to finish this PR by myself for a few days (I couldn't figure out why some tests aren't passing, so it'll probably take me a fair amount of time to have everything done). So if this needs to be ready for AGU OSM I'd need some help getting the tests to pass (it might actually be better to start over in another PR).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050033459:233,test,tests,233,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2266#issuecomment-1050033459,2,['test'],['tests']
Testability,"Greg's main issue seemed to be that we didn't use discrete form for the BC function, which was fixed. So if we can get tests to pass it's probably good to merge.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3643#issuecomment-2377594509:119,test,tests,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3643#issuecomment-2377594509,1,['test'],['tests']
Testability,"Guys, is this a good idea? John. On Tue, Jun 25, 2019, 4:31 PM Ali Ramadhan <notifications@github.com> wrote:. > Copy pasting from @glwagner <https://github.com/glwagner>'s fork.; >; > Adaptive time stepping with a TimeStepWizard that computes time steps for; > you.; >; > I'll add some more docstrings and a couple of tests.; >; > cc @sandreza <https://github.com/sandreza>; >; > Resolves #189; > <https://github.com/climate-machine/Oceananigans.jl/issues/189>; > ------------------------------; > You can view, comment on, or merge this pull request online at:; >; > https://github.com/climate-machine/Oceananigans.jl/pull/297; > Commit Summary; >; > - Utils for adaptive time stepping.; > - Some docstrings.; >; > File Changes; >; > - *A* src/time_step_utils.jl; > <https://github.com/climate-machine/Oceananigans.jl/pull/297/files#diff-0>; > (104); >; > Patch Links:; >; > - https://github.com/climate-machine/Oceananigans.jl/pull/297.patch; > - https://github.com/climate-machine/Oceananigans.jl/pull/297.diff; >; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/climate-machine/Oceananigans.jl/pull/297?email_source=notifications&email_token=AKXUEQXE74LLYFD3QRG7BP3P4IT5HA5CNFSM4H3I7NT2YY3PNVWWK3TUL52HS4DFUVEXG43VMWVGG33NNVSW45C7NFSM4G3SCVLA>,; > or mute the thread; > <https://github.com/notifications/unsubscribe-auth/AKXUEQQTKNBSXD3NJO6ROKDP4IT5HANCNFSM4H3I7NTQ>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/297#issuecomment-505511666:319,test,tests,319,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/297#issuecomment-505511666,1,['test'],['tests']
Testability,"HB1dFdyaXRlcnMvb3V0cHV0X3dyaXRlcl91dGlscy5qbA==) | `64.28% <100.00%> (+5.31%)` | :arrow_up: |; | [...ion/convergence\_tests/ConvergenceTests/analysis.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvYW5hbHlzaXMuamw=) | | |; | [test/test\_verification.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ZlcmlmaWNhdGlvbi5qbA==) | | |; | [...nvergence\_tests/ConvergenceTests/file\_wrangling.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvZmlsZV93cmFuZ2xpbmcuamw=) | | |; | [examples/eady\_turbulence.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-ZXhhbXBsZXMvZWFkeV90dXJidWxlbmNlLmps) | | |; | [test/test\_pressure\_solvers.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X3ByZXNzdXJlX3NvbHZlcnMuamw=) | | |; | [test/test\_halo\_regions.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dGVzdC90ZXN0X2hhbG9fcmVnaW9ucy5qbA==) | | |; | [...\_tests/ConvergenceTests/TwoDimensionalDiffusion.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-dmVyaWZpY2F0aW9uL2NvbnZlcmdlbmNlX3Rlc3RzL0NvbnZlcmdlbmNlVGVzdHMvVHdvRGltZW5zaW9uYWxEaWZmdXNpb24uamw=) | | |; | [benchmark/benchmark\_utils.jl](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree#diff-YmVuY2htYXJrL2JlbmNobWFya191dGlscy5qbA==) | | |; | ... and [53 more](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797/diff?src=pr&el=tree-more) | |. ------. [Continue to review full report at Codecov](https://codecov.io/gh/CliMA/Oceananigans.jl/pull/797?src=pr&el=continue).; > **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta); > `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`; > Powered by ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968:2388,test,test,2388,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/797#issuecomment-657830968,2,['test'],['test']
Testability,Had some research deadline and couldn't come back to this problem. I will test with your suggestion and let you know.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1084029838:74,test,test,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1084029838,1,['test'],['test']
Testability,"Had some time to burn while waiting for stuff to train so I benchmarked some abstract operations:. Some outliers in there like `α * β - γ * δ / ζ` and `(u^2 + v^2 + w^2) / 2` so there should be some useful info. Tried to run on GPU but it wouldn't compile `α + β` even though it worked for me in the REPL :shrug: Worth trying again after #860. ```; Oceananigans v0.34.1 (DEVELOPMENT BRANCH); Julia Version 1.5.0; Commit 96786e22cc (2020-08-01 23:44 UTC); Platform Info:; OS: Linux (x86_64-pc-linux-gnu); CPU: Intel(R) Core(TM) i7-6700HQ CPU @ 2.60GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-9.0.1 (ORCJIT, skylake); ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────; Abstract operations benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 7.66s / 69.8% 6.85GiB / 89.5% ; Section ncalls time %tot avg alloc %tot avg; ───────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 [01] -α [CPU] 10 526μs 0.01% 52.6μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [02] √ζ [CPU] 10 987μs 0.02% 98.7μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [03] sin(β) [CPU] 10 6.97ms 0.13% 697μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [04] cos(γ) [CPU] 10 8.24ms 0.15% 824μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [05] exp(δ) [CPU] 10 7.06ms 0.13% 706μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [06] tanh(ζ) [CPU] 10 13.9ms 0.26% 1.39ms 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [07] α + β [CPU] 10 737μs 0.01% 73.7μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [08] α + β - γ [CPU] 10 191ms 3.58% 19.1ms 370MiB 5.90% 37.0MiB; 32× 32× 32 [09] α * β * γ * δ [CPU] 10 857μs 0.02% 85.7μs 29.2KiB 0.00% 2.92KiB; 32× 32× 32 [10] α * β - γ * δ / ζ [CPU] 10 299ms 5.59% 29.9ms 340MiB 5.42% 34.0MiB; 32× 32× 32 [11] u^2 + v^2 [CPU] 10 1.30ms 0.02% 130μs 29.2KiB 0.00% 2.92KiB; ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/870:60,benchmark,benchmarked,60,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/870,2,['benchmark'],"['benchmarked', 'benchmarks']"
Testability,Had they not passed!? I'm on my phone and thought if it let me merge they must have passed!. It's only the single column hydrostatic free surface models that this effects and I guess no one had used OceanBioMe with them before I tried earlier. I also think unless a test (e.g. in OceanBioME) was specifically looking for something like light attenuation to have been calculated it wouldn't be noticed just give weird results.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3173#issuecomment-1624206162:266,test,test,266,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3173#issuecomment-1624206162,1,['test'],['test']
Testability,"Haha it did take a while but with a satisfying ending!. And thanks for the suggestion! I didn't realize that `4.1.1` and `^4.1.1` would be the same here. But since it's okay with you, I'll merge to avoid waiting on another round of tests to pass :upside_down_face:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2448306882:232,test,tests,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3876#issuecomment-2448306882,1,['test'],['tests']
Testability,Haha so the link is dead again since we don't have a `benchmarks.jl` file. It should link to the documentation page on performance benchmarks. I will open a PR.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/608#issuecomment-663171078:54,benchmark,benchmarks,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/608#issuecomment-663171078,2,['benchmark'],['benchmarks']
Testability,Haine & Marshall (1998) channel validation test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/771:43,test,test,43,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/771,1,['test'],['test']
Testability,Happy to approve this if there's unanimous consent. I guess we should tag v0.50.0 with this PR and get the pain of breaking changes out of the way?. Out of paranoia I'm also running the convergence tests for this PR manually: https://buildkite.com/clima/oceananigans-validation-experiments/builds/128,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783458149:198,test,tests,198,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1393#issuecomment-783458149,1,['test'],['tests']
Testability,Happy to open a PR to fix `MultipleForcings` on the GPU and add some docs and tests if it's something we want to keep in the code.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2312690174:78,test,tests,78,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2312690174,1,['test'],['tests']
Testability,Happy to say that thanks to help from @ali-ramadhan all test pass. . I guess now all we need is for someone to approve it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843689562:56,test,test,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1662#issuecomment-843689562,1,['test'],['test']
Testability,Have you tried building the docs locally to see how the new `benchmarks.md` looks?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1952#issuecomment-902908856:61,benchmark,benchmarks,61,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1952#issuecomment-902908856,1,['benchmark'],['benchmarks']
Testability,"Having these functions in the operator module is what makes more sense to me. My logic for this opinion is that these functions are much more similar in structure and objective to the other operators rather than any function of the grid module which typically only require the grid itself as an input.; However, I am ok also to switch them in the grids module because I recognize that a rotation happens relative to a particular grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3718#issuecomment-2309048398:81,log,logic,81,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3718#issuecomment-2309048398,1,['log'],['logic']
Testability,"Heck yea it'd be great to test this and make it work for any number of forcings. Also I think it makes sense if `u= MultipleForcings(f1, f2)` is valid",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2313545088:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3736#issuecomment-2313545088,1,['test'],['test']
Testability,"Heh I think if you can produce a convergence plot then its worthy to be included in the code! Someone might want 6th order advection... > The bad news is that I don't know why we are not getting the correct values in Oceananigans, even though I am using the exact same tests. That sounds like you've isolated a bug...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-747710521:269,test,tests,269,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1276#issuecomment-747710521,1,['test'],['tests']
Testability,"Heh, well the `stratified_fluid_remains_at_rest_with_tilted_gravity_temperature_tracer` test fails. The log suggests that the problem is confined to a few grid points, since the mean is correct:. ```; [2021/07/29 16:10:56.038] INFO Simulation is stopping. Model time 1 hour has hit or exceeded simulation stop time 1 hour.; --;   | [2021/07/29 16:10:57.288] INFO ∂T∂z * g̃[2] = 0.0001065658790393914, mean(∂y_T) = 0.0001065658790360618, Δ = 3.32959842423014e-15 at t = 1 hour with θ=1°;   | [2021/07/29 16:10:57.288] INFO ∂T∂z * g̃[3] = 0.006105155121314884, mean(∂z_T) = 0.006105155121314366, Δ = 5.178149575790769e-16 at t = 1 hour with θ=1°;   | Tilted gravity: Test Failed at /var/lib/buildkite-agent/builds/tartarus-5/clima/oceananigans/test/test_dynamics.jl:290;   | Expression: all(∂T∂z * g̃[2] .≈ interior(∂y_T)); ```. https://github.com/CliMA/Oceananigans.jl/blob/9ecddac3fe2666e05f21e51b81ec2c403094e5ea/test/test_dynamics.jl#L241. I am skeptical about the value of this test. In general, discretizations _do not necessarily_ represent the balance states of the continuous systems they approximate. Thus in general this test should fail! It will succeed of course in the case that the discrete system shares a balanced state with the continuous state. I think this is flawed as a _test_ because, while certainly formulating discrete systems that share balanced states with their continuous systems is _desirable_, I'm not sure it's something we want to guarantee via CI. We should be allowed to violate this prescription if the discrete system has other _more important_ desirable properties. It could be a nice validation test though. In this particular case, the nonhydrostatic useful is most often used for simulations of _vigorous_ turbulence in which weak flows induced by a violation of hydrostatic balance are likely irrelevant.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890017453:88,test,test,88,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1910#issuecomment-890017453,8,"['Test', 'log', 'test']","['Test', 'log', 'test']"
Testability,"Hello everyone, I have tested ```VerticallyStretchedRectilinearGrid( )``` and found a hard time in setting up the time step for a stable solution. ; I will going to post the whole issue but before that I just want to know weather is there any adaptive time stepping method like we did have ```TimeStepWizard``` . I have searched and failed may be I might have missed it that's why I first ask this question.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1741:23,test,tested,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1741,1,['test'],['tested']
Testability,"Hello, . I've tested it in `Oceananigans v0.91.8` with:. ```; julia> versioninfo(); Julia Version 1.10.4; Commit 48d4fd48430 (2024-06-04 10:41 UTC); Build Info:; Official https://julialang.org/ release; Platform Info:; OS: Linux (x86_64-linux-gnu); CPU: 64 × Intel(R) Xeon(R) Gold 6130 CPU @ 2.10GHz; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-15.0.7 (ORCJIT, skylake-avx512); Threads: 1 default, 0 interactive, 1 GC (on 64 virtual cores); Environment:; JULIA_CUDA_MEMORY_POOL = none. julia> Oceananigans.CUDA.versioninfo(); CUDA runtime 12.1, artifact installation; CUDA driver 12.1; NVIDIA driver 530.30.2. CUDA libraries:; - CUBLAS: 12.1.3; - CURAND: 10.3.2; - CUFFT: 11.0.2; - CUSOLVER: 11.4.5; - CUSPARSE: 12.1.0; - CUPTI: 2023.1.1 (API 18.0.0); - NVML: 12.0.0+530.30.2. Julia packages:; - CUDA: 5.4.3; - CUDA_Driver_jll: 0.9.2+0; - CUDA_Runtime_jll: 0.14.1+0. Toolchain:; - Julia: 1.10.4; - LLVM: 15.0.7. Environment:; - JULIA_CUDA_MEMORY_POOL: none. Preferences:; - CUDA_Runtime_jll.version: 12.1. 1 device:; 0: Tesla V100-PCIE-32GB (sm_70, 30.884 GiB / 32.000 GiB available); ```; and the issue seems solved. ; I agree with @ali-ramadhan, it seems that this issue was fixed at some point, although I haven't managed to pinpoint the version, I think I had the issue when I was using `CUDA v5.1.2`",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-2298503471:14,test,tested,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3427#issuecomment-2298503471,1,['test'],['tested']
Testability,"Hello, ; Do you want to simulate a channel flow or a turbulent boundary layer? Because at the moment, you are just specifying the drag at the bottom (which I guess is a model for the no-slip boundary condition), while a channel requires no-slip at both the top and the bottom. Also, in case you want to simulate a turbulent boundary layer, take care that it is not a periodic case but spatially developing in the streamwise direction, so if you are looking for the self-similar solution (the log-law), you need to rescale somewhere at the beginning or the end of the domain. ; This is not a problem with a fully developed channel flow that is statistically homogeneous in the streamwise direction. Given that you probably need to specify the drag at the top and bottom (unless drag is only for roughness), also `cᴰᵇ` is wrong. This is because the closest grid center to the bottom is the first element in the `znodes` array, not the last:; ```julia; const z₁ = -1*znodes(Center,grid)[1] # Closest grid center to the bottom; ```; Let me know if that works",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1648148527:492,log,log-law,492,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195#issuecomment-1648148527,1,['log'],['log-law']
Testability,"Hello, @amontoison. Nice work. Do you see a performance improvement when switching to this package?; There should be some benchmarks in the `benchmark` folder that we can test (probably we need to update that folder a bit, let me know if you have problems with it)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2353126955:122,benchmark,benchmarks,122,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3778#issuecomment-2353126955,3,"['benchmark', 'test']","['benchmark', 'benchmarks', 'test']"
Testability,"Hello, I am getting this error while trying to add Oceananigans on the NASA Pleiade cluster. Any ideas? Thanks a lot ! Lia. (@v1.6) pkg> update Oceananigans; Updating registry at `~/.julia/registries/General`; Installed HDF5_jll ─── v1.10.5+7; Installed ColorTypes ─ v0.11.0; Installed HTTP ─────── v0.9.8; Installed HDF5 ─────── v0.13.7; Installed URIs ─────── v1.3.0; Downloaded artifact: HDF5; No Changes to `~/.julia/environments/v1.6/Project.toml`; Updating `~/.julia/environments/v1.6/Manifest.toml`; [3da002f7] ↑ ColorTypes v0.10.12 ⇒ v0.11.0; [f67ccb44] ↑ HDF5 v0.13.6 ⇒ v0.13.7; [cd3eb016] ↑ HTTP v0.8.19 ⇒ v0.9.8; [5c2747f8] + URIs v1.3.0; [0234f1f7] ↓ HDF5_jll v1.12.0+1 ⇒ v1.10.5+7; Building HDF5 → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/0b812e7872e2199a5a04944f486b4048944f1ed8/build.log`; Precompiling project...; ✗ Oceananigans; 15 dependencies successfully precompiled in 101 seconds (143 already precompiled); 1 dependency errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the package",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1635:819,log,log,819,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1635,1,['log'],['log']
Testability,"Hello, I am having some technical trouble installing and using Oceananigans. I am new to Julia and would like to try to set up Oceananigans on a Macbook. But it is running into issues. . (1) - installation process says some things are missing:; Building MPI → `~/.julia/scratchspaces/44cfe95a-1eb2-52ea-b672-e2afdf69b78f/d56a80d8cf8b9dc3050116346b3d83432b1912c0/build.log`; Precompiling project...; ✗ MPI; ✗ PencilArrays; ✗ PencilFFTs; ✗ Oceananigans; 89 dependencies successfully precompiled in 41 seconds; 4 dependencies errored. To see a full report either run `import Pkg; Pkg.precompile()` or load the packages. (2) - using Oceananigans is looking for MPI, but to my knowledge if I want to run on my computer, it shouldn't need MPI, like MITgcm using serial instead of parallel. But I don't know where to change the setting? This is what happens when I call using Oceananigans:. julia> using Oceananigans; [ Info: Precompiling Oceananigans [9e8cae18-63c1-5223-a75c-80ca9d6e9a09]; ERROR: LoadError: MPI.jl not properly configured, please run `Pkg.build(""MPI"")`.; Stacktrace:; [1] error(s::String); @ Base ./error.jl:33; [2] top-level scope; @ ~/.julia/packages/MPI/08SPr/src/MPI.jl:38; [3] include; @ ./Base.jl:418 [inlined]; [4] include_package_for_output(pkg::Base.PkgId, input::String, depot_path::Vector{String}, dl_load_path::Vector{String}, load_path::Vector{String}, concrete_deps::Vector{Pair{Base.PkgId, UInt64}}, source::String); @ Base ./loading.jl:1318; [5] top-level scope; @ none:1; [6] eval; @ ./boot.jl:373 [inlined]; [7] eval(x::Expr); @ Base.MainInclude ./client.jl:453; [8] top-level scope; @ none:1; in expression starting at /Users/sean/.julia/packages/MPI/08SPr/src/MPI.jl:1. caused by: LoadError: InitError: could not load library ""/Users/sean/.julia/artifacts/48a9a608db31268626d8b8d4d1272c3e7ccbf7d5/lib/libmpifort.12.dylib""; dlopen(/Users/sean/.julia/artifacts/48a9a608db31268626d8b8d4d1272c3e7ccbf7d5/lib/libmpifort.12.dylib, 0x0001): Library not loaded: @rpath/libquadm",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2480:368,log,log,368,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2480,1,['log'],['log']
Testability,"Hello, I'm interested in this feature. I've managed to implement the same feature @glwagner suggested of `max_filesize` within the `NetCDFOutputWriter`, in addition to its test. I'm currently doing the testing of the changes, and if it works, I will submit a PR. Currently the code is in my fork of Oceananigans (https://github.com/josuemtzmo/Oceananigans.jl/tree/netcdf_split)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1994081895:172,test,test,172,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2967#issuecomment-1994081895,2,['test'],"['test', 'testing']"
Testability,"Hello,. I've been working with @johnryantaylor, and we've been using Lagrangian Particles but have come across an issue. To preface, the issue be my miss understanding of how to use tracked fields but I can't find an obvious solution. Essentially the problem seems to be that to define an tracked field for a tracer you have to already have the model defined, but to do that you have to have the particles defined. A work around for this was to make the model, then define the particles, then redefine the model. This would run and not error, but would result in the tracked field property of the particles not actually being updated. Running it yet again appears to fix it and make it; work. In order to fix this I've modified the `update_particle_properties!` function to explicitly use the models tracer fields when it is a tracer field being tracked. I've also updated the tests which seem to run. If you run the tests on the previous version of the code then the property t does not get updated (but will run with this set up). I hope this is the best place for me to make this pull request since you're updating particle tracking anyway!. Jago",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2662:877,test,tests,877,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2662,2,['test'],['tests']
Testability,"Hello,; My [fork](https://github.com/matinraayai/Oceananigans.jl) of Oceananigans.jl is in the process of adding AMDGPU support for the code base. I've added a new architecture called ROCMGPU, and changed the name of the GPU architecture to CUDAGPU. ; Some of the operations are ported, and the tests are updated to use ROCMGPU as well. @christophernhill and I are in the process of running each test suite to see what other operations need to be tweaked for AMDGPU.; 1. I would like to push this work on a branch on the main codebase, called amdgpu for it to get more attention.; 2. Any help on getting the tests working would be much appreciated.; Thanks",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2493:295,test,tests,295,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2493,3,['test'],"['test', 'tests']"
Testability,"Hello,; This branch contains my group's efforts to make Oceananigans.jl work with AMDGPU.jl as well as preliminary ports of PencilFFTs.jl for distributed FFTs on both CUDA and AMD GPUs. It uses a fork of AMDGPU.jl with ROCSparse support. It was working fine until today, when I rebased my fork to master. Now the distributed tests doesn't work on my end. The tests don't work on the master branch either. The rest of the tests should work fine. I need help from the developers to review this code and discuss any CUDA-specific features still remaining, as well as testing the distributed CUDA/ROCM support for FFTs. Thanks. Closes #1546",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2949:325,test,tests,325,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2949,4,['test'],"['testing', 'tests']"
Testability,"Here I've removed the over-specification that `DiscreteForcing` must have a `Function` in the second parameter so that an object can be put there instead, and a method on that object be the forcing function (don't think I'm describing this very well). This is useful if you want to pass information to a forcing by defining a struct like:; ```julia; struct StructForcing{D}; data :: D; end. (forcing::StructForcing)(i, j, k, grid, clock, model_fields) = forcing.data[i, j, k]; ```. Then this would fail with this error:; <details>; <summary>; MethodError: objects of type DiscreteForcing{Nothing, StructForcing{Array{Float64, 3}}} are not callable; </summary>; Struct method forcing [CPU]: Error During Test at /Users/jago/Documents/Projects/Oceananigans.jl/test/test_forcings.jl:204; Test threw exception; Expression: struct_method_forcing(arch); MethodError: objects of type DiscreteForcing{Nothing, StructForcing{Array{Float64, 3}}} are not callable; Stacktrace:; [1] u_velocity_tendency; @ ~/Documents/Projects/Oceananigans.jl/src/Models/NonhydrostaticModels/nonhydrostatic_tendency_kernel_functions.jl:71 [inlined]; [2] cpu_calculate_Gu!; @ ~/.julia/packages/KernelAbstractions/cWlFz/src/macros.jl:276 [inlined]; [3] cpu_calculate_Gu!(__ctx__::KernelAbstractions.CompilerMetadata{KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.NoDynamicCheck, CartesianIndex{3}, Nothing, KernelAbstractions.NDIteration.NDRange{3, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, KernelAbstractions.NDIteration.StaticSize{(1, 1, 1)}, Nothing, Nothing}}, Gu::Field{Face, Center, Center, Nothing, RectilinearGrid{Float64, Periodic, Periodic, Bounded, Float64, Float64, Float64, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}, Int64}}, OffsetVector{Float64, StepRangeLen{Float64, Base.TwicePrecision{Float",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3237:703,Test,Test,703,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3237,3,"['Test', 'test']","['Test', 'test']"
Testability,"Here are some plots for the incompressible model's benchmarks. Note that I also added a benchmark for Nx=256 however, anything larger (e.g. Nx=512) resulted in an out of memory error even when ran by itself. times; ![incompressible_times](https://user-images.githubusercontent.com/45054739/120524817-77b06080-c3a5-11eb-999b-48a936947268.png). speedups going from cpu to gpu; ![incompressible_speedup](https://user-images.githubusercontent.com/45054739/120527123-f7d7c580-c3a7-11eb-90b5-05d451f10663.png); ; Also, a small change done to the shallow water graph above. The y-axis label has been changed to ""Time (ms)"" for more clarity.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-853237538:51,benchmark,benchmarks,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-853237538,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Here are some profiling results that were done on Satori with nvprof. This is a GPU profile of the nonhydrostatic model.; ```; ==104758== NVPROF is profiling process 104758, command: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project benchmarkable_incompressible_model.jl. Oceananigans v0.60.0; Julia Version 1.6.2; Commit 1b93d53fc4 (2021-07-14 15:36 UTC); Platform Info:; OS: Linux (powerpc64le-unknown-linux-gnu); CPU: unknown; WORD_SIZE: 64; LIBM: libopenlibm; LLVM: libLLVM-11.0.1 (ORCJIT, pwr9); GPU: Tesla V100-SXM2-32GB. CUDA toolkit 10.2.89, local installation; CUDA driver 10.2.0; NVIDIA driver 440.64.0. Libraries: ; - CUBLAS: 10.2.2; - CURAND: 10.1.2; - CUFFT: 10.1.2; - CUSOLVER: 10.3.0; - CUSPARSE: 10.3.1; - CUPTI: 12.0.0; - NVML: 10.0.0+440.64.0; - CUDNN: missing; - CUTENSOR: missing. Toolchain:; - Julia: 1.6.2; - LLVM: 11.0.1; - PTX ISA support: 3.2, 4.0, 4.1, 4.2, 4.3, 5.0, 6.0, 6.1, 6.3, 6.4, 6.5; - Device capability support: sm_30, sm_32, sm_35, sm_37, sm_50, sm_52, sm_53, sm_60, sm_61, sm_62, sm_70, sm_72, sm_75. 2 devices:; 0: Tesla V100-SXM2-32GB (sm_70, 31.432 GiB / 31.749 GiB available); 1: Tesla V100-SXM2-32GB (sm_70, 31.738 GiB / 31.749 GiB available); nothing. [2021/07/30 10:27:44.108] INFO Setting up benchmark: (GPU, Float64, 128)...; [2021/07/30 10:28:25.970] INFO warming up; [2021/07/30 10:29:55.456] WARN Calling CUDA.@profile only informs an external profiler to start.; The user is responsible for launching Julia under a CUDA profiler. It is recommended to use Nsight Systems, which supports interactive profiling:; $ nsys launch julia -@-> /home/henryguo/.julia/packages/CUDA/lwSps/lib/cudadrv/profile.jl:71; [2021/07/30 10:29:58.016] INFO done profiling (GPU, Float64, 128); ==104758== Profiling application: /nobackup/users/henryguo/projects/henry-test/julia-1.6.2/bin/julia --project benchmarkable_incompressible_model.jl; ==104758== Profiling result:; Type Time(%) Time Calls Avg Min Max Name; GPU activities: 12.29% 502.36u",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912:223,test,test,223,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912,1,['test'],['test']
Testability,"Here are some results for weak and strong scaling of distributed shallow water model on one node with 32 cores. The efficiency for both goes down to 80% on 32 cores. This is comparable to what @ali-ramadhan found a while back, but not sure if that made it on an issue or a PR. I'm now trying to go to 64 cores on 2 nodes, and hope to have some results to show soon, after I figure out some weird behavour. ```; Shallow water model weak scaling benchmark; ┌──────────────┬─────────┬────────────┬────────────┬────────────┬────────────┬──────────┬────────┬─────────┐; │ size │ ranks │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├──────────────┼─────────┼────────────┼────────────┼────────────┼────────────┼──────────┼────────┼─────────┤; │ (4096, 256) │ (1, 1) │ 357.509 ms │ 357.738 ms │ 357.932 ms │ 359.397 ms │ 1.60 MiB │ 2774 │ 10 │; │ (4096, 512) │ (1, 2) │ 371.114 ms │ 371.639 ms │ 372.070 ms │ 381.467 ms │ 1.49 MiB │ 3116 │ 20 │; │ (4096, 1024) │ (1, 4) │ 371.134 ms │ 372.336 ms │ 372.644 ms │ 379.017 ms │ 1.49 MiB │ 3116 │ 40 │; │ (4096, 2048) │ (1, 8) │ 376.120 ms │ 376.283 ms │ 378.017 ms │ 409.322 ms │ 1.49 MiB │ 3116 │ 80 │; │ (4096, 4096) │ (1, 16) │ 388.076 ms │ 394.677 ms │ 396.207 ms │ 426.799 ms │ 1.49 MiB │ 3116 │ 160 │; │ (4096, 8192) │ (1, 32) │ 428.043 ms │ 444.197 ms │ 445.236 ms │ 479.791 ms │ 1.49 MiB │ 3116 │ 320 │; └──────────────┴─────────┴────────────┴────────────┴────────────┴────────────┴──────────┴────────┴─────────┘; [2021/06/08 11:49:56.194] INFO Writing Shallow_water_model_weak_scaling_benchmark.html...; Shallow water model weak scaling speedup; ┌──────────────┬─────────┬──────────┬────────────┬──────────┬─────────┐; │ size │ ranks │ slowdown │ efficiency │ memory │ allocs │; ├──────────────┼─────────┼──────────┼────────────┼──────────┼─────────┤; │ (4096, 256) │ (1, 1) │ 1.0 │ 1.0 │ 1.0 │ 1.0 │; │ (4096, 512) │ (1, 2) │ 1.03886 │ 0.962595 │ 0.930602 │ 1.12329 │; │ (4096, 1024) │ (1, 4) │ 1.04081 │ 0.960794 │ 0.930602 │ 1.12329 │; │ ",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-857089098:444,benchmark,benchmark,444,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1722#issuecomment-857089098,1,['benchmark'],['benchmark']
Testability,"Here are the results of `benchmark_tracers.jl` between the `arbitrary-tracers-outer-loops` branch (this PR) and the `arbitrary-tracers-inner-loops` branch. Outer loops is faster in all cases. PS: `arbitrary-tracers-inner-loops` errored for 0 active + 0 passive tracers so this particular benchmark isn't included below, but maybe it doesn't matter as outer loops seem to perform much better. ---. ### `arbitrary-tracers-outer-loops`; ```; ───────────────────────────────────────────────────────────────────────────────────────────────────────────; Tracer benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 119s / 2.11% 19.7GiB / 0.48% . Section ncalls time %tot avg alloc %tot avg; ───────────────────────────────────────────────────────────────────────────────────────────────────────────; 256×256×256 0 active + 0 passive (GPU, Float64) 10 206ms 8.24% 20.6ms 6.11MiB 6.37% 625KiB; 256×256×256 0 active + 1 passive (GPU, Float64) 10 234ms 9.36% 23.4ms 7.62MiB 7.94% 780KiB; 256×256×256 0 active + 2 passive (GPU, Float64) 10 258ms 10.3% 25.8ms 9.17MiB 9.56% 939KiB; 256×256×256 1 active + 0 passive (GPU, Float64) 10 232ms 9.28% 23.2ms 7.68MiB 8.01% 787KiB; 256×256×256 2 active + 0 passive (GPU, Float64) 10 266ms 10.6% 26.6ms 9.14MiB 9.53% 936KiB; 256×256×256 2 active + 3 passive (GPU, Float64) 10 348ms 13.9% 34.8ms 13.8MiB 14.4% 1.38MiB; 256×256×256 2 active + 5 passive (GPU, Float64) 10 409ms 16.3% 40.9ms 17.0MiB 17.7% 1.70MiB; 256×256×256 2 active + 10 passive (GPU, Float64) 10 551ms 22.0% 55.1ms 25.4MiB 26.5% 2.54MiB; ───────────────────────────────────────────────────────────────────────────────────────────────────────────; ```. ### `arbitrary-tracers-inner-loops`; ```; ───────────────────────────────────────────────────────────────────────────────────────────────────────────; Tracer benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 120s / 2.20% 19.1GiB / 0.33% . Section ncalls time %tot a",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-542302613:288,benchmark,benchmark,288,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-542302613,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Here is a convergence plot showing 5th-order convergence for `WENO5`:. ![one_dimensional_convergence](https://user-images.githubusercontent.com/20099589/93711854-a7714e00-fb1f-11ea-80ef-dece17e79d69.png). and some `WENO5` GPU benchmarks from Satori:. ```; ─────────────────────────────────────────────────────────────────────────────────────────────────────────; Advection scheme benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 78.3s / 5.30% 7.46GiB / 0.35% ; Section ncalls time %tot avg alloc %tot avg; ─────────────────────────────────────────────────────────────────────────────────────────────────────────; 64× 64× 64 CenteredFourthOrder [CPU, Float64] 10 818ms 19.7% 81.8ms 2.19MiB 8.31% 224KiB; 64× 64× 64 CenteredSecondOrder [CPU, Float64] 10 495ms 11.9% 49.5ms 2.19MiB 8.31% 224KiB; 64× 64× 64 WENO5 [CPU, Float64] 10 1.85s 44.6% 185ms 2.19MiB 8.31% 224KiB; 256×256×256 CenteredFourthOrder [GPU, Float64] 10 368ms 8.87% 36.8ms 6.60MiB 25.0% 676KiB; 256×256×256 CenteredSecondOrder [GPU, Float64] 10 238ms 5.75% 23.8ms 6.60MiB 25.0% 676KiB; 256×256×256 WENO5 [GPU, Float64] 10 377ms 9.10% 37.7ms 6.60MiB 25.0% 676KiB; ─────────────────────────────────────────────────────────────────────────────────────────────────────────; ```. Surprisingly WENO5 is only ~1.6x slower than 2nd-order centered advection on GPUs. Kernel fusion must be saving us there since it's ~3.7x slower on CPUs.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-695785754:226,benchmark,benchmarks,226,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/592#issuecomment-695785754,2,['benchmark'],['benchmarks']
Testability,"Here is the MWE related to this issue:; ```julia; # this is a MWE for reproducing AveragedTimeInterval errors; using Oceananigans; using Printf; using Plots. function test_simulation(stop_time, Δt, δt, overwrite); grid = RectilinearGrid(size=(2), z = (-1,1), topology=(Oceananigans.Flat, Oceananigans.Flat, Oceananigans.Bounded)); uᵢ(z) = 0; T=2; u_forcing(z, t) = 10*sin(2*pi/T*t). model = NonhydrostaticModel(; grid, ; forcing = (u = u_forcing,),; timestepper = :RungeKutta3). ; set!(model, u=uᵢ). simulation = Simulation(model; Δt, stop_time); u = model.velocities.u. simulation.output_writers[:timeavg] = NetCDFOutputWriter(model, (u=u,),; filename = ""timeavg.nc"",; schedule = AveragedTimeInterval(1δt, window=δt, stride = 1),; # schedule = TimeInterval(δt),; overwrite_existing = overwrite); ; checkpointer = Checkpointer(model,; schedule = TimeInterval(stop_time),; prefix = ""test"",; cleanup = true). simulation.output_writers[:checkpointer] = checkpointer. function progress_message(sim) ; wta = sim.output_writers[:timeavg].outputs[""u""]; wd = wta.window_start_time; ws = wta.window_start_iteration; pc = wta.previous_collection_time; fo = wta.fetch_operand; res = sum(wta.result); mct = model.clock.time; interval = wta.schedule.interval; window = wta.schedule.window; timestep = model.clock.last_stage_Δt; # pis = wta.schedule.previous_interval_stop_time; cll = wta.schedule.collecting; nat = next_actuation_time(wta.schedule); fat = wta.schedule.first_actuation_time; actuation = wta.schedule.actuations; @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim), "", model clock time:"", mct,; "", window: "", window, "", u-avg: "", res, "", window_start_time: "", wd, "", window_start_iteration: "", ws, "", previous_collection_time:"", pc, "", fetch_operand: "", fo, "", interval: "", interval, "", collecting: "", cll,; "", next_actuation_time: "", nat, "", first_actuation_time: "", fat, "", actuation: "", actuation, "", timestep: "", timestep). # @info string(""Iter: "", iteration(sim), "", time: "", pre",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295024645:882,test,test,882,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3717#issuecomment-2295024645,1,['test'],['test']
Testability,"Here's a few thoughts:. - Is there a unit issue? It looks like drag is imposed in the numerical solution (the velocity goes to 0). But the drag seems weaker in the analytical solution for some reason.; - It looks like you are using a time-step criterion based on free surface gravity waves, but I think its likely you are using the split-explicit free surface which has no such restriction. So you can take longer time-steps (not that this would change the present discussion).; - it probably makes sense to test how the numerical solution depends on spatial resolution; - if you also have the plotting code with the analytical solution, it would be nice to have a single script that runs the simulation and produces the comparison. That way we can check to make sure that the plotting script doesn't also have bugs (and also have an easy way to run this ourselves)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2137697636:508,test,test,508,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/775#issuecomment-2137697636,1,['test'],['test']
Testability,"Here's a new 1D validation case that tests a ""buoyant particle"" model using a dynamic slip velocity that depends on buoyancy. The particle concentration field migrates to it's neural buoyancy (here in the center of the domain), until the particle concentration reaches a steady-state in a competition between diffusion and buoyant slippage. https://user-images.githubusercontent.com/15271942/161167309-bfedffdb-6f2b-4552-8f49-1ec23ce7b4ed.mp4",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1085241172:37,test,tests,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2389#issuecomment-1085241172,1,['test'],['tests']
Testability,"Here's a script with a visualization. ```julia; using Oceananigans; using Oceananigans.Units; using GLMakie. grid = RectilinearGrid(topology=(Periodic, Flat, Bounded), size=(64, 32), x=(0, 200), z=(0, 100)). model = NonhydrostaticModel(; grid,; timestepper = :RungeKutta3,; advection = UpwindBiasedFifthOrder(),; buoyancy = BuoyancyTracer(),; tracers = :b). noise(x, y, z) = 1e-6 * (rand() - 1/2); constant_stratification(x, y, z) = 1e-5 * z; set!(model, u=noise, b=constant_stratification). simulation = Simulation(model, Δt=10.0, stop_iteration=1000); progress(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress, IterationInterval(10)). u, v, w = model.velocities; e = (u^2 + w^2) / 2; E = Field(Integral(e, dims=:)); outputs = merge(model.velocities, model.tracers, (; e, E)). filename = ""test.jld2""; simulation.output_writers[:fields] = JLD2OutputWriter(model, outputs;; filename,; schedule = IterationInterval(10),; overwrite_existing = true). run!(simulation). wt = FieldTimeSeries(filename, ""w""); et = FieldTimeSeries(filename, ""e""); bt = FieldTimeSeries(filename, ""b""); Et = FieldTimeSeries(filename, ""E""); times = wt.times; Nt = length(times). fig = Figure(resolution=(1800, 900)). axw = Axis(fig[2, 1], xlabel=""x (m)"", ylabel=""z (m)"", title=""Vertical velocity""); axe = Axis(fig[2, 2], xlabel=""x (m)"", ylabel=""z (m)"", title=""Kinetic energy""); axb = Axis(fig[2, 3], xlabel=""x (m)"", ylabel=""z (m)"", title=""Buoyancy""); axE = Axis(fig[3, 1:3], xlabel=""Time (s)"", ylabel=""Volume averaged kinetic energy""). slider = Slider(fig[1, 1:2], range=1:Nt, startvalue=1); n = slider.value. wn = @lift interior(wt[$n], :, 1, :); en = @lift interior(et[$n], :, 1, :); bn = @lift interior(bt[$n], :, 1, :). x, y, z = nodes(et). wlim = maximum(abs, wt); elim = maximum(abs, et). heatmap!(axw, x, z, wn, colorrange=(-wlim, wlim), colormap=:balance); heatmap!(axe, x, z, en, colorrange=(0, elim), colormap=:solar); heatmap!(axb, x, z, b",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976:869,test,test,869,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2935#issuecomment-1442576976,1,['test'],['test']
Testability,"Here's a simple hydrostatic model benchmark. ```julia; using Oceananigans; using BenchmarkTools. grid = RectilinearGrid(CPU(), size=(128, 128, 1), x=(0, 2π), y=(0, 2π), z=(0, 1), topology=(Periodic, Periodic, Bounded)); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection=WENO(), tracer_advection=WENO()); ϵ(x, y, z) = 2rand() - 1; set!(model, u=ϵ, v=ϵ). function lots_of_steps!(model, Δt, steps=100); for _ = 1:steps; time_step!(model, Δt); end; end. @btime lots_of_steps!(model, 0.01); ```. Results. ```julia; 10.220 s (85845109 allocations: 37.94 GiB) # this PR; 6.284 s (66184308 allocations: 16.31 GiB) # this PR with KA downgraded to 0.7.2; ```. So we are close but not there yet. What about solvers ... ?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085:34,benchmark,benchmark,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3026#issuecomment-1482146085,2,"['Benchmark', 'benchmark']","['BenchmarkTools', 'benchmark']"
Testability,"Here's a test script:; ```julia; using Oceananigans; using Oceananigans.Units; using StructArrays; using Printf; using Random; using Statistics. Random.seed!(123). grid = RectilinearGrid(CPU(), Float64,; size = (2, 2, 2),; halo = (5, 5, 5),; x = (0, 1),; y = (0, 1),; z = (-1, 0),; topology = (Periodic, Bounded, Bounded)). #%%; struct SimpleParticle{X}; x :: X; y :: X; z :: X; end. x_particle = collect(0:0.25:1.5); y_particle = collect(0:0.25:1.5); z_particle = collect(fill(-0.5, length(x_particle))). particles = StructArray{SimpleParticle}((x_particle, y_particle, z_particle)). lagrangian_particles = LagrangianParticles(particles). #%%; model = NonhydrostaticModel(; ; grid = grid,; timestepper = :RungeKutta3,; advection = WENO(order=9),; particles = lagrangian_particles; ). u, v, w = model.velocities. simulation = Simulation(model, Δt=0.1seconds, stop_iteration=2). wall_clock = [time_ns()]. function print_progress(sim); @printf(""i: %d, t: %s, wall time: %s, max(u): (%6.3e, %6.3e, %6.3e) m/s, next Δt: %s\n"",; sim.model.clock.iteration,; prettytime(sim.model.clock.time),; prettytime(1e-9 * (time_ns() - wall_clock[1])),; maximum(abs, sim.model.velocities.u),; maximum(abs, sim.model.velocities.v),; maximum(abs, sim.model.velocities.w),; prettytime(sim.Δt)); @info ""x(particle): $(round.(lagrangian_particles.properties.x, digits=2)), y(particle): $(round.(lagrangian_particles.properties.y, digits=2)), z(particle): $(round.(lagrangian_particles.properties.z, digits=2))\n"". wall_clock[1] = time_ns(). return nothing; end. simulation.callbacks[:print_progress] = Callback(print_progress, IterationInterval(1)). run!(simulation); ```; In the test script, the domain is initialized to be `Periodic, Bounded, Bounded`, so particles should be shifted if $x \geq 1$, bounced if $y > 1$, $z<-1$. Here's the output of the script:; ```; [ Info: Initializing simulation...; i: 0, t: 0 seconds, wall time: 5.450 seconds, max(u): (0.000e+00, 0.000e+00, 0.000e+00) m/s, next Δt: 100 ms; [ Info: x(",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3416#issuecomment-1875732332:9,test,test,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3416#issuecomment-1875732332,1,['test'],['test']
Testability,"Here's an illustration:. ```julia; using Oceananigans. Nx, Ny, Nz = 100, 100, 100; latitude = longitude = z = (0, 1); underlying_grid = LatitudeLongitudeGrid(size=(Nx, Ny, Nz); latitude, longitude, z); grid = ImmersedBoundaryGrid(underlying_grid, GridFittedBottom((λ, φ) -> 0.5)). ci = CenterField(grid); ciw = view(ci, 1:Nx, 1:Ny, 1:Nz). cu = CenterField(underlying_grid); cuw = view(cu, 1:Nx, 1:Ny, 1:Nz). for n = 1:10; @time minimum(ci); @time minimum(ciw); @time minimum(cu); @time minimum(cuw); end; ```. Note there is such a concept as ""stubborn compilation"" so we sometimes have to invoke functions a few times to get them to compile... Now I get:. ```julia; julia> @time minimum(ci); 0.000888 seconds (331 allocations: 33.148 KiB); 0.0. julia> @time minimum(ciw); 1.611260 seconds (7.27 M allocations: 7.968 GiB, 37.23% gc time); 0.0. julia> @time minimum(cu); 0.001069 seconds (387 allocations: 21.586 KiB); 0.0. julia> @time minimum(cuw); 0.001060 seconds (686 allocations: 33.258 KiB); 0.0; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3750#issuecomment-2377521775:543,stub,stubborn,543,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3750#issuecomment-2377521775,1,['stub'],['stubborn']
Testability,"Here's another code snipped that I have been using to test this:. ```julia; using Oceananigans; using Oceananigans.Utils: with_tracers; using Random; using Enzyme. Random.seed!(123); arch = CPU(); Nx = Ny = 32; x = y = (0, 2π); z = (0, 1); g = 4^2; c = sqrt(g). grid = RectilinearGrid(arch, size=(Nx, Ny, 1); x, y, z, topology=(Periodic, Periodic, Bounded)); closure = ScalarDiffusivity(ν=1e-2); momentum_advection = Centered(order=2); free_surface = ExplicitFreeSurface(gravitational_acceleration=g); model = HydrostaticFreeSurfaceModel(; grid, momentum_advection, free_surface, closure). ϵ(x, y, z) = 2randn() - 1; set!(model, u=ϵ, v=ϵ). u_init = deepcopy(model.velocities.u); v_init = deepcopy(model.velocities.v). Δx = minimum_xspacing(grid); Δt = 0.01 * Δx / c; for n = 1:10; time_step!(model, Δt; euler=true); end. u_truth = deepcopy(model.velocities.u); v_truth = deepcopy(model.velocities.v). function set_viscosity!(model, viscosity); new_closure = ScalarDiffusivity(ν=viscosity); names = (); new_closure = with_tracers(names, new_closure); model.closure = new_closure; return nothing; end. function viscous_hydrostatic_turbulence(ν, model, u_init, v_init, Δt, u_truth, v_truth); # Initialize the model; model.clock.iteration = 0; model.clock.time = 0; #model.clock.last_Δt = Inf; set_viscosity!(model, ν); #set!(model, u=u_init, v=v_init, η=0); set!(model, u=u_init, v=v_init); fill!(parent(model.free_surface.η), 0). # Step it forward; for n = 1:10; time_step!(model, Δt; euler=true); end. # Compute the sum square error; u, v, w = model.velocities; Nx, Ny, Nz = size(model.grid); err = 0.0; for j = 1:Ny, i = 1:Nx; err += @inbounds (u[i, j, 1] - u_truth[i, j, 1])^2 +; (v[i, j, 1] - v_truth[i, j, 1])^2; end. return err::Float64; end. # Use a manual finite difference to compute a gradient; Δν = 1e-6; ν1 = 1.1e-2; ν2 = ν1 + Δν; e1 = viscous_hydrostatic_turbulence(ν1, model, u_init, v_init, Δt, u_truth, v_truth); e2 = viscous_hydrostatic_turbulence(ν2, model, u_init, v_init, Δt, u_truth",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438720198:54,test,test,54,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3867#issuecomment-2438720198,1,['test'],['test']
Testability,"Here's some benchmarks against the current implementation. Contrary to what I just claimed, there is some speed up for `Bounded` domains, especially with 2D problems (where avoiding halos is advantageous) -- but nothing too significant. Note these are with `WENO5` advection, which should pessimize `Periodic` models as there are larger halos to fill. I came to the prior conclusions by running the two-dimensional turbulence example. I'll try to make sure the ""speed up"" is generic and also benchmark GPU and the hydrostatic model. # `main`. ## Modest 3D model (128x128x128). ```; Topologies benchmarks; ┌───────────────┬─────────────────┬────────────────────────────────┬────────────┬────────────┬────────────┬────────────┬────────────┬────────┬─────────┐; │ Architectures │ Ns │ Topologies │ min │ median │ mean │ max │ memory │ allocs │ samples │; ├───────────────┼─────────────────┼────────────────────────────────┼────────────┼────────────┼────────────┼────────────┼────────────┼────────┼─────────┤; │ CPU │ (128, 128, 128) │ (Periodic, Bounded, Periodic) │ 900.894 ms │ 901.887 ms │ 902.516 ms │ 905.129 ms │ 703.45 KiB │ 1081 │ 6 │; │ CPU │ (128, 128, 128) │ (Bounded, Periodic, Bounded) │ 895.527 ms │ 911.386 ms │ 910.441 ms │ 921.211 ms │ 772.19 KiB │ 1131 │ 6 │; │ CPU │ (128, 128, 128) │ (Periodic, Bounded, Bounded) │ 900.389 ms │ 904.161 ms │ 906.879 ms │ 916.145 ms │ 771.44 KiB │ 1115 │ 6 │; │ CPU │ (128, 128, 128) │ (Bounded, Bounded, Bounded) │ 903.676 ms │ 910.638 ms │ 910.295 ms │ 914.968 ms │ 837.97 KiB │ 1154 │ 6 │; │ CPU │ (128, 128, 128) │ (Periodic, Periodic, Bounded) │ 886.053 ms │ 892.564 ms │ 894.281 ms │ 904.917 ms │ 703.45 KiB │ 1081 │ 6 │; │ CPU │ (128, 128, 128) │ (Bounded, Periodic, Periodic) │ 910.500 ms │ 924.085 ms │ 923.571 ms │ 931.683 ms │ 703.45 KiB │ 1081 │ 6 │; │ CPU │ (128, 128, 128) │ (Periodic, Periodic, Periodic) │ 914.391 ms │ 916.636 ms │ 916.407 ms │ 917.164 ms │ 575.12 KiB │ 1010 │ 6 │; │ CPU │ (128, 128, 128) │ (Bounded, Bounded, Periodic",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1115745728:12,benchmark,benchmarks,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2477#issuecomment-1115745728,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Here's some ideas:. ```julia; grid = RectilinearGrid(size=(4, 5, 6), extent=(1, 1, 1)); a = CenterField(grid); b = CenterField(grid, indices = (2, :, :)); @test indices(a * b) == (2:2, :, :). # repeat for y and z slices?. c = CenterField(grid); d = XFaceField(grid, indices=(2:3, :, :)); @test indices(c * d) == (3:3, :, :) # right?. # repeat for y and z...; ```. Those, plus maybe some tests for `UnaryOperation`, etc, cover the non-trivial cases I can think of.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1262822892:156,test,test,156,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2740#issuecomment-1262822892,3,['test'],"['test', 'tests']"
Testability,"Here's some results for reference (flat bottom no slip), ""no slip"", ""free slip"", and ""bottom drag"" for fractional heights h=0.1 and h=0.2:. # h = 0.1; https://user-images.githubusercontent.com/15271942/164373427-e614311e-7ff0-492c-a0de-6156eadd24ae.mp4. # h = 0.2; https://user-images.githubusercontent.com/15271942/164373538-08dcc7ff-820c-4492-9a75-a4a406d2c416.mp4. Energy always decreases (rapidly). Momentum is more squirrely, but fortunately we do find that specifying drag / no-slip seems to extract more momentum than otherwise (eg than with free slip boundary conditions). The amount of momentum lost with a free-slip boundary condition and hills of size `h=0.2` is roughly equivalent to the flat bottom case with no-slip. There's also transient periods with `h=0.2` where the case with no-slip boundary conditions has more momentum than free-slip. I'm going to run a few more cases at higher resolution. We should also have a more quantitative validation test.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104703550:964,test,test,964,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1104703550,1,['test'],['test']
Testability,"Here's something: https://github.com/CliMA/Oceananigans.jl/pull/1770. I'm trying to run the benchmarks but they take a while, so that's in progress.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868845455:92,benchmark,benchmarks,92,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1764#issuecomment-868845455,1,['benchmark'],['benchmarks']
Testability,"Here's the code used for the profiling.; ```; push!(LOAD_PATH, joinpath(@__DIR__, "".."")). #using BenchmarkTools; using CUDA; using Oceananigans; using Benchmarks. # Benchmark parameters. Arch = GPU; FT = Float64; N = 128. print_system_info(). # Define benchmarks. @info ""Setting up benchmark: ($Arch, $FT, $N)..."". grid = RegularRectilinearGrid(FT, size=(N, N, N), extent=(1, 1, 1)); model = NonhydrostaticModel(architecture=Arch(), grid=grid). @info ""warming up"". time_step!(model, 1). CUDA.@profile time_step!(model, 10000). @info ""done profiling ($Arch, $FT, $N)""; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890071837:97,Benchmark,BenchmarkTools,97,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1912#issuecomment-890071837,5,"['Benchmark', 'benchmark']","['Benchmark', 'BenchmarkTools', 'Benchmarks', 'benchmark', 'benchmarks']"
Testability,"Here's what I posted earlier:. > Correct: time-averaging a TKE ComputedField; Wrong: time-averaging a TKE KernelComputedField; Wrong: time-averaging a dissipation ComputedField; Wrong: time-averaging a dissipation KernelComputedField. From this list I might infer that the two ingredients are 1) `KernelComputedField` OR 2) gradients. Gradients / interpolation ping boundary conditions, which are tricky so there's good reason to test that. Maybe two tests: one for `ComputedField` with interpolation or derivatives, and another with `KernelComputedField` (that's maybe a bit simpler)?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817992499:430,test,test,430,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817992499,2,['test'],"['test', 'tests']"
Testability,"Here's what we currently do:; https://github.com/CliMA/Oceananigans.jl/blob/b6dd1fa9b1d740f7d8cb4be116a24cbba0042f86/src/Fields/field.jl#L500. Here's a test script:. ```Julia; using Oceananigans; using BenchmarkTools; using LinearAlgebra. Nx, Ny, Nz = 128, 128, 16. grid = RectilinearGrid(size=(Nx, Ny, Nz), x=(-4, 4), y=(-4, 4), z=(-4, 0), topology=(Bounded, Bounded, Bounded)). a = CenterField(grid); b = CenterField(grid). ε(x, y, z) = randn(). set!(a, ε); set!(b, ε). true_dot(a, b) = sum(interior(a) .* interior(b)). dot_current(a::Field, b::Field) = mapreduce((x, y) -> x * y, +, interior(a), interior(b)). function dot_faster(a, b); s = zero(eltype(a.grid)). @inbounds @simd for I ∈ CartesianIndices(a); s += a[I] * b[I]; end. return s; end; ```. I get. ```julia. julia> isapprox(dot_current(a, b), true_dot(a, b)); true. julia> isapprox(dot_faster(a, b), true_dot(a, b)); true. julia> @btime true_dot($a, $b);; 149.667 μs (29 allocations: 2.00 MiB). julia> @btime dot_current($a, $b);; 1.289 ms (34 allocations: 2.00 MiB). julia> @btime dot_faster($a, $b);; 74.041 μs (0 allocations: 0 bytes); ```. So we can get a ~15x speedup with zero allocations. With only this change, running a `HydrostaticFreeSurfaceModel` simulation with a PGC free surface solver gave a ~20% speedup on the CPU.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2725:152,test,test,152,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2725,2,"['Benchmark', 'test']","['BenchmarkTools', 'test']"
Testability,"Here:. ```Julia; using Oceananigans, Test; using Oceananigans.Models.HydrostaticFreeSurfaceModels: ColumnEnsembleSize. grid = RectilinearGrid(size=2, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1). coriolises = [FPlane(f=1.0) FPlane(f=1.0); FPlane(f=1.0) FPlane(f=1.1)]. model_kwargs = (; tracers=nothing, buoyancy=nothing, closure=nothing); simulation_kwargs = (; Δt=0.01, stop_iteration=100). models = [HydrostaticFreeSurfaceModel(; grid, coriolis=coriolises[i, j], model_kwargs...) for i=1:2, j=1:2]. set_ic!(model) = set!(model, u=sqrt(2), v=sqrt(2)). for model in models; set_ic!(model); simulation = Simulation(model; simulation_kwargs...); run!(simulation); end . ensemble_size = ColumnEnsembleSize(Nz=2, ensemble=(2, 2), Hz=1); ensemble_grid = RectilinearGrid(size=ensemble_size, z=(-1, 0), topology=(Flat, Flat, Bounded), halo=1); ensemble_model = HydrostaticFreeSurfaceModel(; grid=ensemble_grid, coriolis=coriolises, model_kwargs...); set_ic!(ensemble_model); ensemble_simulation = Simulation(ensemble_model; simulation_kwargs...); run!(ensemble_simulation). for i = 1:2, j = 1:2 ; @test parent(ensemble_model.velocities.u)[i, j, :] == parent(models[i, j].velocities.u)[1, 1, :]; end; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308131024:37,Test,Test,37,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2809#issuecomment-1308131024,2,"['Test', 'test']","['Test', 'test']"
Testability,"Hey @ChrisRackauckas thanks for having a look!. We do this operator-splitting method and the pressure term is treated implicitly (while all other terms are treated explicitly). To step from time `n` to `n + 1` first an explicit 2nd-order Adams-Bashforth step is used to calculate the right-hand-side at time `n + 1/2` and the pressure is calculated at `n + 1/2` by solving a Poisson equation. Then we time step the solution from time `n` to `n + 1` via a forward Euler step (using the right-hand-side evaluated at `n + 1/2`). I'm not super familiar with IMEX schemes although perhaps this is equivalent to IMEXEuler?. PS: Yes our numerical methods are pretty pathetic :(. Could be a great idea to rely on DifferentialEquations.jl for time-stepping. We'd get more options and any performance boost would be awesome! In particular, we've been hoping to upgrade to a higher-order low-storage time stepping method. Maybe a good first step would be to try and replicate the current time-stepping method we use and see if all the tests pass?. I can start looking into trying to do this. I don't think I saw `AB2` as an [option](https://docs.juliadiffeq.org/latest/solvers/ode_solve.html) (only `AB3` and up) but maybe another method can replicate what `AB2` does for us (or I can code something up).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/391#issuecomment-528849991:1024,test,tests,1024,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/391#issuecomment-528849991,1,['test'],['tests']
Testability,"Hey @arcavaliere thanks for working on this! Just added ""[WIP]"" to the title as that's our convention for PRs that are still a work in progress. About your error, you did define `min_enabled_level` but I think you need to [import methods from `Logging` to extend them](https://discourse.julialang.org/t/overloading-operators/6773). I think something like this would work:; ```julia; import Logging: min_enabled_level; min_enabled_level(logger::ModelLogger) = logger.min_level; ```; or; ```julia; import Logging; Logging.min_enabled_level(logger::ModelLogger) = logger.min_level; ```; and the same goes for `shouldlog` and `handle_message`. ---. Might also be good to `include(""logging.jl"")` in `src/Oceananigans.jl` so it gets exported and available to users after `using Oceananigans`. PS: Looks like your second account made the commits haha. We can fix this later.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-542247142:244,Log,Logging,244,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-542247142,9,"['Log', 'log']","['Logging', 'logger', 'logging']"
Testability,"Hey @arcavaliere that would be awesome if you have the time! It's not a glamorous issue but super important for developing good software. How familiar are you with Julia?. I think the first step is to figure out how to use the logging macros, e.g. `@info` and `@debug`, to print the current time (and possibly even filename and line number) to provide more useful logging messages. So instead of; ```julia; julia> @info ""Test line""; [ Info: Test line; ```; which isn't super useful hopefully we can have logging messages like; ```julia; [09/10/2019 16:12:33] some_file.jl:55: Test line; ```; which would be more useful. If that's possible, I think we can start logging a lot more stuff knowing that the messages will have useful timestamps and line numbers.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540173008:227,log,logging,227,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540173008,7,"['Test', 'log']","['Test', 'logging']"
Testability,"Hey @tomchor thank you for testing out the example and reporting this! Indeed we did a lot of refactoring for v0.11 and you've become the first victim haha. I updated the example with the right keyword argument and removed the stale link (PR #450). . I'd like to revive the full rising thermal bubble example soon but for now @glwagner has put together some pretty cool examples with plots: https://github.com/climate-machine/Oceananigans.jl/tree/master/examples. Let us know if you had a simulation in mind you're trying to run, we're more than happy to help!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/449#issuecomment-539722982:27,test,testing,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/449#issuecomment-539722982,1,['test'],['testing']
Testability,"Hey thanks for doing all this! Things look a lot neater. Just have a few comments/thoughts that I'll pepper throughout but should be good to merge!. > A `Model` constructor is now provided in which all important information can be input via keyword arguments. This is great for understanding what the model does, I agree. Would still be nice to keep the ""legacy constructor"" around for when you just want to create a simple `Model` for playing around with or for testing. And it makes for very nice and simple example code. > I also reduced the computational burden of a few of the tests, and changed to factor of 2 resolutions since this makes sense for FFTs (though relatively unimportant for testing, I think should encourage users to use powers of 2 and make a habit of using them ourselves). I would argue against this. While we should try to use powers of 2 for performance, I think that overly restricts the model resolutions we can be running at. There are a LOT of choices between e.g. `512x512x128` and `1024x1024x128`. It might be that the largest model that fits in memory isn't nice powers of 2. Users may have various reasons for running resolutions that aren't powers of 2. Either way, we should always be testing a wide range of grid sizes (and weird grid sizes like `109x77x13`) because the code should work for all of them. If computational cost becomes an issue we should look into paying for extra CI resources rather than reduce testing. > A few more notes:. Might be good to create some new issues based on those just to keep track of what needs to be done. > The examples are outdated. We should probably reduce the number of examples until the code becomes more stable, and commit to maintaining the few that remain. This is something I'm actively working on in a different branch. I'll make sure they work with the changes in this pull request. > Lots of work to do!. For sure!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/97#issuecomment-468525078:463,test,testing,463,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/97#issuecomment-468525078,5,['test'],"['testing', 'tests']"
Testability,"Hey! I just tried out the vertically stretched grid and I'm finding a few issues:. 1. The `OutputWriter` is complaining that there is no field `zC`; 2. It didn't work with the `FT=Float64` argument, so I am using the following. ```; grid = VerticallyStretchedRectilinearGrid(; architecture = GPU(),; size = (Nx,Ny,Nz), x=(0, Lx), y=(0, Ly), zF=zF,; halo = (3, 3, 3),; topology = (Periodic, Bounded, Bounded)); ```. 3. It asks me to use: `halo = (3, 3, 3)` and not `halo = (1, 1, 1)` . 4. For testing purposes, I tried using a linear grid with `zF = collect(-160:2.5:0)`. I ran for 1 short timestep and it produces NaN's in the `u` field. However, using the same linear grid with `RegularRectilinearGrid(size=(Nx, Ny, Nz), extent=(Δx*Nx, Δy*Ny, Δz*Nz), topology = (Periodic, Bounded, Bounded))` works fine. Any ideas?. Many thanks!",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1429:492,test,testing,492,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1429,1,['test'],['testing']
Testability,"Hi @PharmCat that would be a really interesting application. Are you thinking of a moving mesh where the grid changes with time or are you thinking of a moving boundary?. If it's a moving boundary then I think it's possible to simulate with the current version of Oceananigans. Support for topography/boundaries is not official as there is no API to specify topography but we've been using the forcing functions API to implement a continuous forcing immersed boundary method to add topography. Basically you strongly relax the velocity to zero inside the topography. For an example, this PR adds an example/test for viscous flow around a cylinder: https://github.com/CliMA/Oceananigans.jl/pull/693. These are the pertinent lines (PR needs updating a bit as API has changed, improved we think): https://github.com/CliMA/Oceananigans.jl/pull/693/files#diff-7331d4b1c4f866ed7dfe0952578bf1cfR18-R27. I think if you can define a `boundary(x, y, z, t)` function that returns `1.0` inside the boundary and `0.0` outside the boundary then we can use a very similar script to simulate a moving boundary. Let us know if you're interested in trying it out and we would be more than happy to help out with setting up the script.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/830#issuecomment-668806992:607,test,test,607,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/830#issuecomment-668806992,1,['test'],['test']
Testability,"Hi @astrobc1, this is an ancient issue for the Oceananigans.jl package. We've organized the modules in Oceananigans.jl in a more logical way a long time ago so this issue has not been relevant for over a year. We (the Oceananigans.jl developers) are not Julia developers and cannot fix https://github.com/JuliaLang/julia/issues/269. If you are interested, it seems that https://github.com/JuliaLang/julia/pull/32658 might resolve the issue as part of Julia 1.6.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/69#issuecomment-695841338:129,log,logical,129,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/69#issuecomment-695841338,1,['log'],['logical']
Testability,"Hi @c42f thank you for chiming in! Will definitely ping you as we work on logging. I think we probably should have tackled logging much earlier. We still use `@printf` and vanilla `@info` for logging, which has been quite counter-productive haha. Definitely hoping we can reach a useful logger that can; * help developers by providing info and debug messages. Also nice in test logs.; * help users understand what the model is doing and provide a better and more responsive user experience by logging what the model is doing. This is where `@setup` and `@diagnostic` logging messages might be really nice. Although `@setup` and `@diagnostic` might be bad names as they don't imply logging? Not sure of the best solution but maybe your kwarg suggestion would help here, e.g. `@info source=""diagnostic"" msg`?. @arcavaliere seems to be developing a pretty general-purpose `ModelLogger` which hopefully we can adapt for all these uses! @arcavaliere I'm more than happy to help if you need anything. MicroLogging.jl looks pretty neat! I like that it puts the log level, file name, and line number on the right as putting them on the left causes messages not to align and makes logs harder to read. TensorBoardLogger looks pretty cool! Would be awesome to have something like that one day, but I guess you'd have to use something like ncusrses...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-542677876:74,log,logging,74,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-542677876,11,"['log', 'test']","['log', 'logger', 'logging', 'logs', 'test']"
Testability,"Hi @miguelraz, that's awesome! Thanks for taking the time to read through the issues and for posting. If you have some time we can talk over text (e.g. Slack) or voice (e.g. Hangouts or Skype) to figure out some possibilities if you're interested?. Unfortunately I'm on the road for a while so probably can't talk until May 13-15 or after May 21 but let me know!. I think we're still figuring out the tests. Some of these aren't really well-developed. For example, @mukund-gupta did some work on the thermal wind balance test (work in progress, see pull request #179) but it turns out it's not super easy to implement properly since we're solving the rotating incompressible Navier-Stokes equations with the Boussinesq approximation. That said, I'm sure we can figure out some cool examples! What sort of stuff are you interested in?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/157#issuecomment-489884819:401,test,tests,401,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/157#issuecomment-489884819,2,['test'],"['test', 'tests']"
Testability,"Hi @navidcy - you have great timing - it looks like the most recent release of the julia-vscode extension fixed the issue - I have tested it on a basic Oceananigans script and the debugger seems to be working now. the core issue here was with JuliaInterpreter.jl which was fixed and updated in the julia-vscode extension, which then fixed the issue. thank you so much for your help and patience!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697433147:131,test,tested,131,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3171#issuecomment-1697433147,1,['test'],['tested']
Testability,"Hi @navidcy, thanks for checking in!. I have been using `RegularRectilinearGrid ` for now and have not tried going back to `VerticallyStretchedRectilinearGrid` with the latest version of Oceananigans. If it's useful, I'm happy to test this out, but I might not be actively using the stretched grid for the time being.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1574#issuecomment-882726654:230,test,test,230,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1574#issuecomment-882726654,1,['test'],['test']
Testability,"Hi @pnavaro thanks for opening this issue. Yeah this is an issue on some clusters so it might be worth adding a note in the documentation. In my case I think the login node had a GPU so I was able to build on the login node then just precompile and run on the compute node without internet access. But this was also before CUDA.jl which very nicely downloads CUDA artifacts for you so it just relied on the local CUDA toolkit. Do you have access to the CUDA toolkit on the login node via something like `module load cuda`? Might allow you to build on the login node without a GPU but might be weird to have CUDA but no GPU. Your compute node must have a CUDA installation. Looks like the CUDA.jl documentation has a section on how to make use of a local CUDA installation: https://juliagpu.gitlab.io/CUDA.jl/installation/overview/#CUDA-toolkit. If you can find where the CUDA toolkit is installed on your compute node, then maybe all you have to do is set one of the `CUDA_HOME`, `CUDA_ROOT` or `CUDA_PATH` environment variables?. Looks like creating a container with CUDA.jl is an option but it still requires a CUDA toolkit at runtime: https://juliagpu.gitlab.io/CUDA.jl/installation/overview/#Containers. Let us know if this helps or if you're able to get up and running on your compute node. Would be good to figure this out and add to the documentation. The #gpu channel on Julia's Slack or the GPU section of the Julia Discourse might also be good places to ask if we can't figure it out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1035#issuecomment-707637840:162,log,login,162,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1035#issuecomment-707637840,4,['log'],['login']
Testability,"Hi @simone-silvestri ; Thank for the suggestion.; I see the change in `flat_advective_fluxes`. I will do some test to see if I can reproduce my previous result. ; However, I think it is quite weird to keep other terms without the advection. Why don't we turn off whole u momentum calculation? Also, I think several examples still treat `flat` as a flat periodic boundary (e.g., Tilted BBL). . @glwagner I update the grid layout in the main text.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2742#issuecomment-1252620822:110,test,test,110,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2742#issuecomment-1252620822,1,['test'],['test']
Testability,Hi @syou83syou83. Can you please add to the post a logfile of the error you are getting?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1083533441:51,log,logfile,51,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1083533441,1,['log'],['logfile']
Testability,"Hi All,. I rerun the simulations using the newest version of the code, . julia>; [17:03]fspereira@ch-fe1[/lustre/scratch5/fspereira/OCEANANIGANS/test/case5]# julia; _; _ _ _(_)_ | Documentation: https://docs.julialang.org; (_) | (_) (_) |; _ _ _| |_ __ _ | Type ""?"" for help, ""]?"" for Pkg help.; | | | | | | |/ _` | |; | | |_| | | | (_| | | Version 1.6.7 (2022-07-19); _/ |\__'_|_|_|\__'_| | Official https://julialang.org/ release; |__/ |. julia> import Pkg. julia> Pkg.status(""Oceananigans""); Status `~/.julia/environments/v1.6/Project.toml`; [9e8cae18] Oceananigans v0.77.5. and a script based on the one available on oceananigans webpage (I only changed the grid size, constant, and set the random seed. I also tried without these changes):. [https://github.com/CliMA/Oceananigans.jl/blob/main/examples/ocean_wind_mixing_and_convection.jl](https://urldefense.com/v3/__https://github.com/CliMA/Oceananigans.jl/blob/main/examples/ocean_wind_mixing_and_convection.jl__;!!Bt8fGhp8LhKGRg!Hq-26fs0ZjyKWL5dfg0ho6lLfmeo_jfgVK18dHbvsUBFODEetRH9g_Jail-Z6ZLUs4OLQeSzVSKFWq6Ve2_bO315jP8wE0frJVA$). Unfortunately, the new code/script led to the same reproducibility problem. I ran 4 simulations using the same script (attached) and obtained 4 different average ww profiles. . ![tec_ww_time_c1](https://user-images.githubusercontent.com/80914369/193948250-57bde9a3-ab27-4224-a443-341599e2107e.png). [c16_128_128m.jl.zip](https://github.com/CliMA/Oceananigans.jl/files/9711438/c16_128_128m.jl.zip). Any ideas or suggestions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1267712816:145,test,test,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2766#issuecomment-1267712816,1,['test'],['test']
Testability,"Hi Oceananigans,. Thank you very much for making your code open!; @olmozavala and I are currently testing out to see if we can run realistic simulations of the Gulf of Mexico but the documentation (https://clima.github.io/OceananigansDocumentation/stable/appendix/library/#Oceananigans.Grids.LatitudeLongitudeGrid) seems to only have examples with a flat bottom. Could you advise how one would prescribe a realistic ocean bathymetry?. Thank you.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3389:98,test,testing,98,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3389,1,['test'],['testing']
Testability,Hi all! . Thank you for the helpful advice and sorry for my delayed response! I am using shared gpu resources on my school's HPC and have not been able to access any resources to test anything out yet so I will update here once I can get some testing done on my side. Thank you again for the help!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1509#issuecomment-812702328:179,test,test,179,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1509#issuecomment-812702328,2,['test'],"['test', 'testing']"
Testability,"Hi all! I've been testing the Lagrangian particles method (ideally on GPUs, but I'm including the error messages for CPU compilation for simplicity) and am running into two issues: (1) tracking dynamical fields, and using (2) Lagrangian particles with immersed boundary active. Would love to hear what is working/isn't available w.r.t. this method or if I'm making a mistake somewhere ... or any other suggestions!. (1) (solved, see comment below) Tracking dynamical fields I'm testing here is the LagrangianParticles for temperature/salinity (version below testing for CPUs). I tested Lagrangian particle tracking for saving x,y,z locations first, which works. However, once I add in T as a tracked field:. ```Julia. #++++ Lagrangian particles. n_particles = 1000;. x₀ = 50*ones(n_particles); . y₀ = (rand(n_particles).-0.5)*params.Ly;. z₀ = params.Lz*rand(n_particles); . T=3*ones(n_particles); # the initialization shouldn't matter?. struct CustomParticle; x::Float64 # x-coordinate; y::Float64 # y-coordinate; z::Float64 # z-coordinate; T::Float64 # Temperature; end. particles = StructArray{CustomParticle}((x₀, y₀, z₀, T));. # Define tracked fields as a NamedTuple; tracked_fields = (T=particles.T,). # Initialize LagrangianParticles with the StructArray and tracked fields; lagrangian_particles = LagrangianParticles(particles; tracked_fields=tracked_fields). #include in the model setup; model = NonhydrostaticModel(grid = grid, ; particles=lagrangian_particles,; advection = WENO(grid=grid, order=5),; timestepper = :QuasiAdamsBashforth2, ; tracers = (:T, :S),; buoyancy = Buoyancy(model=SeawaterBuoyancy(equation_of_state=LinearEquationOfState(thermal_expansion = 3.87e-5,; haline_contraction = 7.86e-4)), gravity_unit_vector=(-sind(θ),0,-cosd(θ))),; coriolis = FPlane(0e-4),; closure = closure,; forcing = forcing,; boundary_conditions = boundary_conditions,; ). ```. I get the following error:. ```Julia. LoadError: MethodError: _fractional_indices(::Tuple{Float64, Float64, Float64}, ::Re",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3609:18,test,testing,18,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3609,4,['test'],"['tested', 'testing']"
Testability,"Hi all, I recently switched from using v0.30.0 to using the latest version of the master branch, and I am now unable to add the CuArrays package, as it seems to clash with some of the packages used by Oceananigans. Has anyone else experienced this? I was able to reproduce this issue on two computers. When reverting back to v0.30.0, I have no such problem and can add CuArrays without packages clashing. Thanks for letting me know if you get the same issue!. Full error message suggest that Adapt, GPUArrays, CUDA and NNlib are clashing with CuArrays but I am a beginner at Julia so not sure I interpret the error correctly. I tried removing Oceananigans and all dependencies, installing CuArrays first and then adding Oceananigans, but I get the same problem doing things in that order. ```; ERROR: Unsatisfiable requirements detected for package CuArrays [3a865a2d]:; CuArrays [3a865a2d] log:; ├─possible versions are: [0.2.1, 0.3.0, 0.4.0, 0.5.0, 0.6.0-0.6.2, 0.7.0-0.7.3, 0.8.0-0.8.1, 0.9.0-0.9.1, 1.0.0-1.0.2, 1.1.0, 1.2.0-1.2.1, 1.3.0, 1.4.0-1.4.7, 1.5.0, 1.6.0, 1.7.0-1.7.3, 2.0.0-2.0.1, 2.1.0, 2.2.0-2.2.2] or uninstalled; ├─restricted to versions * by an explicit requirement, leaving only versions [0.2.1, 0.3.0, 0.4.0, 0.5.0, 0.6.0-0.6.2, 0.7.0-0.7.3, 0.8.0-0.8.1, 0.9.0-0.9.1, 1.0.0-1.0.2, 1.1.0, 1.2.0-1.2.1, 1.3.0, 1.4.0-1.4.7, 1.5.0, 1.6.0, 1.7.0-1.7.3, 2.0.0-2.0.1, 2.1.0, 2.2.0-2.2.2]; ├─restricted by compatibility requirements with Adapt [79e6a3ab] to versions: [0.2.1, 0.3.0] or uninstalled, leaving only versions: [0.2.1, 0.3.0]; │ └─Adapt [79e6a3ab] log:; │ ├─possible versions are: [0.3.0-0.3.1, 0.4.0-0.4.2, 1.0.0-1.0.1, 1.1.0, 2.0.0-2.0.2] or uninstalled; │ └─restricted to versions 2 by Oceananigans [9e8cae18], leaving only versions 2.0.0-2.0.2; │ └─Oceananigans [9e8cae18] log:; │ ├─possible versions are: 0.30.0 or uninstalled; │ └─Oceananigans [9e8cae18] is fixed to version 0.30.0; ├─restricted by compatibility requirements with GPUArrays [0c68f7d7] to versions: 0.2.1",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/796:891,log,log,891,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/796,1,['log'],['log']
Testability,"Hi all,. Greg, do you know if Cat Vreugdenhi is visiting GFD this summer? It may be easy to ask her to run an example without stretched grid. That said, do we have a good sense of how important a stretched grid is for the accuracy of our LES simulations?. Raffaele. > On Jul 10, 2019, at 9:32 AM, Ali Ramadhan <notifications@github.com> wrote:; > ; > We agreed this could be a test case against which we can verify the implementation of AMD in PR #309, although the published results use a slightly modified version of AMD.; > ; > They report a number of LES runs, and since we don't have a vertically stretched grid, it might be easiest to try and reproduce the Pr = 0.7 case which they do with (Nx, Ny, Nz) = (64, 49, 64) grid points [for Ri=0 or 0.01, for Ri = 0.04 it's (64, 65, 64)]. I might suggest focusing on the Ri = 0 case as they also run a resolved DNS with (Nx, Ny, Nz) = (256, 129, 256) against which we might be able to compare (might not be possible, depending on vertical grid stretching).; > ; > Unfortunately, I don't think we can reproduce their results without a vertically stretched grid... If I understand the paper correctly, the grid is stretched according to; > ; > y_j = h*tanh(Sf*(2*(j-1)/(Ny-1))) / tanh(Sf); > so for h=1 you get grid spacings of Δy ~ 0.125 away from the wall and Δy ~ 0.0000035 adjacent to the wall. So a faithful reproduction would need 35000+ vertical levels lol.; > ; > I don't fully understand how they got their values for the vertical grid cell size adjacent to the wall ∆y_w^+, but it seems like if h = 100,000 then our values agree (they get a spacing of Δy ~ 0.35 adjacent to the wall). Either way, the ratio between the thickest and thinnest spacings is ~35,000.; > ; > Not sure if there's still a way we could compare results in this case without a vertically stretched grid...; > ; > Absolute worst case scenario, I've been working on an implementation of a vertically stretched grid (see PRs #283 and #306) but it's a work in progress and mi",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/310#issuecomment-510066077:377,test,test,377,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/310#issuecomment-510066077,1,['test'],['test']
Testability,"Hi all,. I think there's been a mistake in the open boundary filling that's only becoming a problem now that we're trying to fill non-zero value. https://github.com/CliMA/Oceananigans.jl/blob/3ea2545331d9910d8b467dd8eb31074fb426af5b/src/BoundaryConditions/fill_halo_regions_open.jl#L86-L91. The open fill has always set point at index `1` on the right hand side and `grid.N+1` on the right hand side, but `1` is part of the prognostic domain and halo points we need are just for computing gradients at the face point, which should be at `0`. I came across this because I've only been testing open boundaries on the right side, but was checking it worked in the other directions and realised it always failed when I just switched the direction and sides for a simple case. Am I missing something here?",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3810:584,test,testing,584,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3810,1,['test'],['testing']
Testability,"Hi all,. Thanks, @glwagner for creating the [PR](https://github.com/CliMA/Oceananigans.jl/pull/3660) for solving the issue of `TimeInterval`. After merging it, I noticed a potential problem related to `AveragedTimeInterval`. Specifically, when resuming from a checkpoint, discontinuity seems to occur. For instance, in the figure below, the tidally averaged velocity is saved for each tidal period. The first run covers days 0-20, and the second run covers days 20-40. A noticeable discontinuity appears at the checkpoint transition from the first run.; <img width=""301"" alt=""image"" src=""https://github.com/user-attachments/assets/ffe04dc8-d829-49a7-8052-0b5a58c2b9a3"">. Here is a MWE for this issue:; ```julia; # this is a MWE for reproducing errors from using AveragedTimeInterval; using Oceananigans; using Printf; using Plots. """""" Set up a simple simulation to test picking up from a checkpoint. """""". function test_simulation(stop_time, Δt, δt, overwrite); grid = RectilinearGrid(size=(2), z = (-1,1), topology=(Oceananigans.Flat, Oceananigans.Flat, Oceananigans.Bounded)); uᵢ(z) = 0; T=2; u_forcing(z, t) = 10*sin(2*pi/T*t). model = NonhydrostaticModel(; grid, ; forcing = (u = u_forcing,),; timestepper = :RungeKutta3). ; set!(model, u=uᵢ). simulation = Simulation(model; Δt, stop_time); u = model.velocities.u. progress_message(sim) = @info string(""Iter: "", iteration(sim), "", time: "", prettytime(sim)); simulation.callbacks[:progress] = Callback(progress_message, TimeInterval(δt)). simulation.output_writers[:timeavg] = NetCDFOutputWriter(model, (u=u,),; filename = ""timeavg.nc"",; schedule = AveragedTimeInterval(δt, window=δt),; # schedule = TimeInterval(δt),; overwrite_existing = overwrite); ; checkpointer = Checkpointer(model,; schedule = TimeInterval(stop_time),; prefix = ""test"",; cleanup = true). simulation.output_writers[:checkpointer] = checkpointer. return simulation; end. run(`sh -c ""rm test_iteration*.jld2""`). Δt = .01 # timestep (s); T1 = 5 # first simulation stop time (s); ",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3670:865,test,test,865,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3670,1,['test'],['test']
Testability,"Hi all,; I have met some strange things in a simple channel flow case, the velocity profile is larger than the log-low profile, and the momentum flux of the second and third points are obviously lower than bottom boundary condition (or other point near the bottom boundary). The code is written below, what causes this difference?; ![u_profile (2)](https://github.com/CliMA/Oceananigans.jl/assets/117068415/14e2c865-ec3b-4065-a13a-213a99257d31); ![uw_flux (1)](https://github.com/CliMA/Oceananigans.jl/assets/117068415/1cd16836-6f59-465b-8d02-0577052b52ba). ```julia; const H=15 #/m; grid = RectilinearGrid(GPU(),size=(64,64,64), extent=(π*H, π*H, H)); const u★=0.01 #friction velocity; Fx(x,y,z,t)=u★^2/H #forcing. const z₀ = H*1e-4 # m (roughness length); const κ = 0.4 # von Karman constant; const z₁ = -1*znodes(Center,grid)[grid.Nz] # Closest grid center to the bottom; const cᴰᵇ = (κ / log(z₁ / z₀))^2 # Drag coefficient. @inline drag_u(x, y, t, u, v, p) = - p.cᴰᵇ * √(u^2 + v^2) * (u); @inline drag_v(x, y, t, u, v, p) = - p.cᴰᵇ * √(u^2 + v^2) * (v). drag_bc_u = FluxBoundaryCondition(drag_u, field_dependencies=(:u, :v), parameters=(; cᴰᵇ)); drag_bc_v = FluxBoundaryCondition(drag_v, field_dependencies=(:u, :v), parameters=(; cᴰᵇ)). u_bcs = FieldBoundaryConditions(top=FluxBoundaryCondition(0.0),bottom = drag_bc_u); v_bcs = FieldBoundaryConditions(bottom = drag_bc_v). model = NonhydrostaticModel(; grid, coriolis,; advection = WENO(),; timestepper = :RungeKutta3,; tracers =(:T,:S),; buoyancy = SeawaterBuoyancy(),; closure = AnisotropicMinimumDissipation(),; boundary_conditions = (u=u_bcs,v=v_bcs,T=T_bcs,S=S_bcs),; forcing=(u=Fx,)); ```",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3195:111,log,log-low,111,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3195,2,['log'],"['log', 'log-low']"
Testability,"Hi guys, please feel free to ping me on all logging-related stuff for CLiMA. I pushed through the logging frontend API which exists in 1.0 and I think it can help you understand your simulations. I'm particularly keen to hear use cases related to CLIMA because it's a large scale code with several modules running in a distributed execution environment. Some new logging backend components will need to be invented to make this work well but I think the existing logging frontend is a solid foundation to build on. Regarding live tracking of simulation progress, a couple of points:; * The logging system is designed for exactly this kind of thing - it should slot in nicely; * For graphs you could check out TensorBoardLogger. It's designed for ML applications, but the core need seems similar: TensorBoard is a log aggregator which provides rich graphical display for certain data types and can run on the cluster where the compute is happening.; * `MicroLogging` master contains some utilities to make progress reporting nicer so you could check those out. There's also ProgressLogging.jl which does something similar. (Eventually we should to consolidate some of these tools.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-542576768:44,log,logging-related,44,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-542576768,6,['log'],"['log', 'logging', 'logging-related']"
Testability,"Hi there,; 2 comments:; 1) does not look like the most urgent thing in the to-do list so we could wait until; we have discussion in person.; 2) with realistic EOS, we will need to comute density to get the hydrostatic ; pressure AND N^2 (as input of mixing/SGS closuse scheme). Can express; everything as normalised by rho_c but could easily get confusing. On Fri, May 24, 2019 at 06:08:42AM -0700, Ali Ramadhan wrote:; > Looks good to me! Agree that it should just pass the golden master test.; > ; > Would also be good to get @jm-c's comments before merging.; > ; > -- ; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub:; > https://github.com/climate-machine/Oceananigans.jl/pull/236#issuecomment-495619852",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/236#issuecomment-495694077:489,test,test,489,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/236#issuecomment-495694077,1,['test'],['test']
Testability,"Hi, I'd like to help out with this! What would you like logged?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540086370:56,log,logged,56,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/71#issuecomment-540086370,1,['log'],['logged']
Testability,"Hi,; I encounter an error when running `pkg> test Oceananigans` despite being able to run example simulation internal_wave.jl on both CPU and GPU. The description of CUDA error code 201 is also attached below. ```; ERROR: LoadError: CUDA error (code 201, CUDA_ERROR_INVALID_CONTEXT); Stacktrace:; [1] throw_api_error(::CUDAdrv.cudaError_enum) at /home/raphael/.julia/packages/CUDAdrv/Uc14X/src/error.jl:105; [2] macro expansion at /home/raphael/.julia/packages/CUDAdrv/Uc14X/src/error.jl:112 [inlined]; [3] cuCtxGetDevice(::Base.RefValue{Int32}) at /home/raphael/.julia/packages/CUDAapi/XuSHC/src/call.jl:93; [4] device at /home/raphael/.julia/packages/CUDAdrv/Uc14X/src/context.jl:142 [inlined]; [5] device! at /home/raphael/.julia/packages/CUDAnative/ierw8/src/init.jl:198 [inlined]; [6] device!(::CUDAdrv.CuDevice) at /home/raphael/.julia/packages/CUDAnative/ierw8/src/init.jl:188; [7] top-level scope at /home/raphael/.julia/packages/Oceananigans/1xP6n/test/runtests.jl:74; [8] include(::String) at ./client.jl:439; [9] top-level scope at none:6; in expression starting at /home/raphael/.julia/packages/Oceananigans/1xP6n/test/runtests.jl:61; ERROR: Package Oceananigans errored during testing; ```. Has anyone encountered this issue? I am on master 0.30.0. Thanks for your help!; ![Screenshot_2020-07-02 CUDA Driver API CUDA Toolkit Documentation](https://user-images.githubusercontent.com/31293515/86409162-4f484f80-bc86-11ea-8736-bad7a9da5345.png)",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/788:45,test,test,45,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/788,4,['test'],"['test', 'testing']"
Testability,"Hi,; I have been working with a shallow water model simulation that consists simply of a stochastic height field as the initial condition. It's been working well on a 2pi by 2pi domain without using the Units module. . However, once I tried to scale this same simulation to a 2000km by 2000km domain, I encountered some issues. Specifically, it seems the simulation becomes static. The output I'm viewing is just the height field animation. I also apologize if the initial condition code is confusing and added an image of the initial height function. I scaled the initial height function to match the domain so that should not be a source of bugs, theoretically. I've been testing and trying to fix this issue but am not sure what to do. . Thanks for any help or advice!. **Code:**; ```; using Oceananigans; using Oceananigans.Models: ShallowWaterModel; using Oceananigans.Units. #Parameters; Nx, Ny = 128, 128; Lx = 1000kilometer; Ly = 1000kilometer. grid = RectilinearGrid(size = (Nx, Ny),; x=(-Lx, Lx), y=(-Lx, Ly),; topology = (Periodic, Periodic, Flat)). model = ShallowWaterModel(; grid=grid,; gravitational_acceleration=9.81,; coriolis=FPlane(f=1),; ). #SMOOTH RANDOM FUNCTION; using Random; Random.seed!(17). n = 16; m = 16; len = n * m * 4. global alea; alea = rand(-1:1, (n, m, 4)). function rand_smth(x::Float64, y::Float64); X = x / 1000000; Y = y / 1000000; val = 0; for i in 1:n; for j in 1:m; ar = alea[i,j,1]; br = alea[i,j,2]; cr = alea[i,j,3]; dr = alea[i,j,4]; val += ar * cos(i * x) * cos(j * y); val += br * cos(i * x) * sin(j * y); val += cr * sin(i * x) * cos(j * y); val += dr * sin(i * x) * sin(j * y); end; end; return val; end; #End of smooth random function. H = 1kilometer # unperturbed layer depth. h₀(x, y, t) = H + rand_smth(x,y). set!(model, h=h₀). uh, vh, h = model.solution. simulation = Simulation(model, Δt=0.002, stop_iteration=10000). using Oceananigans.OutputWriters: JLD2OutputWriter, IterationInterval. simulation.output_writers[:fields] =; JLD2OutputWriter(",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2671:674,test,testing,674,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2671,1,['test'],['testing']
Testability,"High-order advection schemes invoke wide stencils that can produce unintended non-zero fluxes across solid immersed boundaries. This PR elides advective fluxes across immersed boundaries for `GridFittedImmersedBoundary` to address that. In addition, we should probably introduce boundary-conditional interpolation so that we limit to second-order advection close to immersed boundaries. I'll drop that into this PR too and add a test for high-order advection with immersed boundaries.",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1719:429,test,test,429,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1719,1,['test'],['test']
Testability,"Higher resolution... ## h = 0.1; https://user-images.githubusercontent.com/15271942/164504233-495feaa3-47b9-46f7-8c31-b26c2ec1301c.mp4. ## h = 0.2; https://user-images.githubusercontent.com/15271942/164504265-94bd02b7-a78f-4bac-92ee-47ce3150f092.mp4. the `h = 0.2` are weird. Possibly the viscosity is not high enough so at that topographic height the solution is dominated by form drag / topographic interaction. I'm running another suite at lower Re to test that. Overall it looks like things are working, but cases with strong topographic interaction may require a new pressure solver if the momentum budget is important.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105427369:455,test,test,455,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2437#issuecomment-1105427369,1,['test'],['test']
Testability,Hijacking @christophernhill's branch and work!. @jm-c set up the same velocity halo exchange from https://github.com/CliMA/Oceananigans.jl/blob/7cc147bbf831fe4de66584d812e56debcfa6e43f/test/test_cubed_sphere_halo_exchange.jl#L378-L382 in MITgcm from which we were able to figure out where the Oceananigans cubed sphere halo exchange was going wrong. There were a several discrepancies (all at halo corners or adjacent to the halo corners). ```; u face 1: 2 discrepancies; v face 1: 3 discrepancies; u face 2: 2 discrepancies; v face 2: 3 discrepancies; u face 3: 1 discrepancies; v face 3: 2 discrepancies; u face 4: 1 discrepancies; v face 4: 3 discrepancies; u face 5: 0 discrepancies; v face 5: 2 discrepancies; u face 6: 0 discrepancies; v face 6: 2 discrepancies; u: 6 discrepancies; v: 15 discrepancies; ```. Not totally sure why our halo exchange algorithm isn't filling these correctly so for now we fix each one after filling all the velocity halos. Now that our halo exchange exactly matches MITgcm's we might want to add some extra tests to make sure we're testing each of these points. Some existing tests need to be cleaned up too. After this fix the Rossby-Haurwitz validation seems pretty happy (it used to exhibit numerical artifacts at some corners then blow up after a few days). https://user-images.githubusercontent.com/20099589/118747990-0317e680-b829-11eb-94c3-40002f928e52.mp4. The eddying aquaplanet validation from PR #1602 doesn't look as happy so it might still have setup issues (and maybe also plotting issues since vorticity is at the corners).,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1669:185,test,test,185,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1669,4,['test'],"['test', 'testing', 'tests']"
Testability,"Hm, I see... you might be trying to run the one found inside the `validation` directory, right?. I suggest you start of by trying to run the scripts in the `examples` directory. They are continuously tested and should run with the latest version. We'll figure out though the issues and fix the problems for the scripts that live in the `validation` directory (if you are specifically interested on one of those).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807697594:200,test,tested,200,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1507#issuecomment-807697594,1,['test'],['tested']
Testability,Hm... I also noticed they were defined here:; https://github.com/CliMA/Oceananigans.jl/blob/a3faff771f3dec60be12cc7fab8ebabeffc1657e/test/test_time_stepping.jl#L202; so I thought the code I removed was redundant. But perhaps some tests were using that... I'll look into it.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2016#issuecomment-946342621:133,test,test,133,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2016#issuecomment-946342621,2,['test'],"['test', 'tests']"
Testability,Hm... You didn't rush to merge. Tests on master look OK: https://buildkite.com/clima/oceananigans/builds/1587. Also the example seems to be in its latest and greatest version :); https://github.com/CliMA/Oceananigans.jl/blob/27b1324dca660ce8cb7f5e205dd7400bdd23cb3d/examples/Bickley_jet_shallow_water.jl#L83-L86. Also the `dev` version of the docs includes the example: https://clima.github.io/OceananigansDocumentation/dev/generated/Bickley_jet_shallow_water/; (without the `\begin{align}...`) You may need to refresh the browser to see it? Or make sure you select `dev` version from the dev; I think the default version of the docs you see is the latest stable tagged release. The buildkite icon status I think is confused...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798958905:32,Test,Tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1305#issuecomment-798958905,1,['Test'],['Tests']
Testability,Hmm yes and this also must not be tested!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3681#issuecomment-2269869101:34,test,tested,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3681#issuecomment-2269869101,1,['test'],['tested']
Testability,"Hmm, I can't reproduce the same results exactly. All I did before was honestly open a Julia session and just paste the examples you guys posted one by one. Here's [a pastebin](https://pastebin.com/gC5k5n7X) with my whole session testing the commands I got in the previous post. (The comments of course don't reflect the outcome anymore.)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-746683879:229,test,testing,229,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-746683879,1,['test'],['testing']
Testability,"Hmm, I don't think we have tested that we can _re-index_ a `WindowedField`. That's what we're trying to do here.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116295969:27,test,tested,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2508#issuecomment-1116295969,1,['test'],['tested']
Testability,"Hmm, I looked at one of the errors and saw the following:. ```. Immersed boundaries with hydrostatic free surface models: Error During Test at /net/ocean/home/data44/data5/glwagner/.buildkite-agent/builds/sverdrup-5/clima/oceananigans/test/test_hydrostatic_free_surface_immersed_boundaries_vertical_integrals.jl:4;   | Got exception outside of a @test;   | The grid halo (1, 1, 1) must be larger than either (1, 1, 1) or (3, 3, 3);  ; ```. Can't say I know what's going wrong though.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2108#issuecomment-989074195:135,Test,Test,135,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2108#issuecomment-989074195,3,"['Test', 'test']","['Test', 'test']"
Testability,"Hmm, check your environment again, or try restarting julia, because I don't think you should get that error (the tests pass for example, suggesting that things run without erroring)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386780100:113,test,tests,113,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3805#issuecomment-2386780100,1,['test'],['tests']
Testability,"Hmm, interesting. The test uses. ```julia; window = 6Δt ; stride = 2 ; ```. I wonder if we should try fractional windows like you use. Maybe there's a bug associated with the 1.999. I'll set up something quickly.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-818004533:22,test,test,22,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-818004533,1,['test'],['test']
Testability,"Hmm, it could make sense to make benchmarking results more prominent. Please feel free to update the benchmarks. More generally I think we need a streamlined way of updating the benchmarks so that we can recreate them easily for (for example) every minor release.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880829840:33,benchmark,benchmarking,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1852#issuecomment-880829840,3,['benchmark'],"['benchmarking', 'benchmarks']"
Testability,"Hmm, the NetCDF tests are now throwing a different error. I see the problem: the size of a field depends on the topology. I'll fix it.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/644#issuecomment-591030049:16,test,tests,16,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/644#issuecomment-591030049,1,['test'],['tests']
Testability,"Hmm, the benchmark uses old syntax, though I do think we should benchmark immersed boundary stuff. I'm going to close this because it's outdated, but I'll open an issue about writing comprehensive and useful benchmarks for `ImmersedBoundaryGrid`.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1699#issuecomment-1104645049:9,benchmark,benchmark,9,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1699#issuecomment-1104645049,3,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Hmm, we could set up a test that uses momentum. I'm not sure the physics of the model matter here, this more seems to be an issue with how time-averaging works (thus a forced tracer is hopefully sufficient --- but we may need to try to average diagnostics / computed fields?)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817983202:23,test,test,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817983202,1,['test'],['test']
Testability,"Hmm, well I guess we should add that combination to. https://github.com/CliMA/Oceananigans.jl/blob/main/benchmark/benchmark_hydrostatic_model.jl. and re-run the benchmarks.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172668651:104,benchmark,benchmark,104,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2635#issuecomment-1172668651,2,['benchmark'],"['benchmark', 'benchmarks']"
Testability,"Hmm, well it looks like we do compute arguments:. https://github.com/CliMA/Oceananigans.jl/blob/abd447980898bcbfe099d71258d4e52f3cf090f9/src/AbstractOperations/kernel_function_operation.jl#L75. But if the arguments are themselves wrapped inside a `NamedTuple` --- or any other object --- then they won't be computed. In other words `compute!(perturbation_velocities)` does not compute the elements of `perturbation_velocities`. We could add a method `compute!(tup::Tuple) = Tuple(compute!(t) for t in tup)` and also for `NamedTuple`. But I'm not sure this is the best API. Maybe it's better to require that arguments that need to be computed should be included directly as arguments. Seems like its up for debate. PS it does seem to test this correctly then we need to further evaluate . ```julia; f_perturbation = Field(f_perturbation_op); compute!(f_perturbation); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3455#issuecomment-1927373508:733,test,test,733,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3455#issuecomment-1927373508,1,['test'],['test']
Testability,"Hmm. I believe that scalar operations are (or were) _specifically_ allowed globally in our `runtests.jl`, overriding any default. Thus `@disallowscalar` was used to disallow scalar operations for certain testing code without disallowing them globally for all subsequent tests. I don't think it matters whether or not scalar iteration is allowed by default since we are manually controlling that setting. Furthermore, I don't think removing `@disallowscalar` would cause tests to fail; rather, it means that those tests _will_ pass even if they have scalar operations (where previously they would not have passed or would have thrown an error). Instead of using `@disallowscalar` we can flip the global state; eg we can replace. ```julia; @disallowscalar statement; ```. with. ```julia; CUDA.allowscalar(false); statement; CUDA.allowscalar(true); ```. Perhaps this is what we want?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863612256:204,test,testing,204,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1740#issuecomment-863612256,4,['test'],"['testing', 'tests']"
Testability,"Hmm. We know from mathematics that the pressure boundary conditions must be obtained by evaluating the momentum equation on the boundary. If we are *not* doing that, we are not calculating pressure correctly (therefore, if the test passes, the test is flawed). If we *are* doing that, then this test could serve as a test that we are doing that correctly. As far as I know we are not evaluating the pressure correctly. Therefore, this test must fail if it is implemented correctly. It must also be noted that this test is incomplete. The pressure boundary condition is obtained by evaluating the momentum equation on the boundary --- and this applies to any momentum equation, including those with LES closures, biharmonic viscosity, anisotropic viscosity, wave-averaged surface wave terms, as well as arbitrary user-defined terms. It is possible to evaluate the momentum equation on the boundary (since we already evaluate in the interior) and use the result to determine inhomogeneous boundary conditions; this is permitted by the algorithm we use and its implementation is described in Schumann and Sweet (1979).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-565765963:227,test,test,227,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/573#issuecomment-565765963,6,['test'],['test']
Testability,Hmm... I'm going to test whether JLD2 works with 1.6...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1547#issuecomment-814257048:20,test,test,20,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1547#issuecomment-814257048,1,['test'],['test']
Testability,Hmm... there's a function in `CUDA.jl` called `partial_mapreduce_grid` that might contain logic that depends on the size of the kernel (not sure): https://github.com/JuliaGPU/CUDA.jl/blob/92f1001861641cb173af49454b05c91728cbfc3d/src/mapreduce.jl#L91,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1684#issuecomment-845597699:90,log,logic,90,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1684#issuecomment-845597699,1,['log'],['logic']
Testability,Hmmm a lot of failures due to CUDA scalar `getindex` operations even though we explicitly set `CUDA.allowscalar(true)` in `runtests.jl`... We could take this opportunity to get rid of all scalar operations in the tests and just use `CUDA.@allowscalar` where it's needed. Maybe new CUDA scalar operations are hurting performance and that's why GPU CI has slowed down?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-816964002:213,test,tests,213,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1514#issuecomment-816964002,1,['test'],['tests']
Testability,"Hmmm that might be it. I tried to construct an analytic solution that obeys all the boundary conditions: using the source term **f(x,y,z) = 4(x²+y²-1-π²/H²) cos(2πz/Lz) exp(-(x²+y²))** the analytic solution is **ϕ(x,y,z) = cos(2πz/H) exp(-(x²+y²))** which does satisfy ∂ϕ/∂z = 0 at z=0 and z=H, and is ""numerically periodic"" as the exponential should decay to < machine epsilon at the boundaries in a large enough domain, but maybe I did something wrong in the process. I'll try testing with a different analytic solution. I wanted to avoid a function that is just sines and cosines as that would give a spectral solution that is accurate to within machine precision, which doesn't help with testing convergence properties.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/7#issuecomment-439692344:479,test,testing,479,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/7#issuecomment-439692344,2,['test'],['testing']
Testability,Hmmm yeah @glwagner points out in #402 that it may be the halo filling causing this regression. My guess is that we need `@inline` for all the halo filling functions. This would only manifest as an issue on the CPU but the GPU `@inline`s by default in many cases. I'll benchmark on a branch and open a PR if it's this easy.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/397#issuecomment-531221034:269,benchmark,benchmark,269,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/397#issuecomment-531221034,1,['benchmark'],['benchmark']
Testability,"Hmmm, GitLab didn't run for some reason so I ran the tests on Google Cloud and everything passes now. ```; Test Summary: | Pass Broken Total; Oceananigans | 1261 7 1268; Testing Oceananigans tests passed ; ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519516895:53,test,tests,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/343#issuecomment-519516895,4,"['Test', 'test']","['Test', 'Testing', 'tests']"
Testability,"Hmmm, I don't know if many log levels will be that helpful. I guess for debug messages we'll want to have the file name and line number, but for user-facing info messages maybe we should remove the file name and line number and instead a custom log level like `DIAGNOSTIC` or `MODEL_SETUP` will be useful. I think one place that logging can hugely improve user experience is in setting up large models, especially on the GPU, where you could be waiting for several minutes while all of Julia, CUDA, and Oceananigans compiles, model is being set up, memory is allocated, etc. We know it takes time but most users will think that something is wrong if Julia is silent for 5 minutes. In this context info messages can be useful and reassure the user that Oceananigans is working properly. It's well known that progress indicators improve user experience, e.g.: https://www.nngroup.com/articles/progress-indicators/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-546952192:27,log,log,27,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/478#issuecomment-546952192,3,['log'],"['log', 'logging']"
Testability,"Hmmm, I think he made some pretty cool movies and plotted a dispersion relation so I thought verification experiment (or test + accompanying example) makes more sense as it could be pretty useful to users. Up to @suyashbire1 though. It also tests the box pressure solver (wall bounded in all three dimensions). He might have tried turning it into a Matsuno-Gill setup?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/640#issuecomment-590148777:121,test,test,121,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/640#issuecomment-590148777,2,['test'],"['test', 'tests']"
Testability,"Hmmm, I think it was created with the first PR that introduces the test and then left untouched. What if we regenerate the data in main. Will it work on previous versions?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439353217:67,test,test,67,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1439353217,1,['test'],['test']
Testability,"Hmmm, I think the error you hit with the triply periodic pressure solver was a trivial typo but the triply periodic solver doesn't actually work (big constant error). ```; [18/03/2020 22:54:46] Convergence of L¹-normed error, Float64, (64³ -> 128³), topology=(Periodic, Periodic, Periodic): -0.012063993747747548 --- Info /Users/travis/build/climate-machine/Oceananigans.jl/test/test_pressure_solvers.jl:189; ```. To be fair, it hasn't been tested and a warning is printed when trying to use it. Although the box pressure solver seems to work and passes the convergence test so I suspect there's a stupid bug somewhere as otherwise we're using the same approach/method for all these solvers. I tried changing the test thinking it might have had something to do with `-Lz < z < 0` vs. `0 < z < Lz` but that wasn't it. I propose we merge this PR skipping the triply periodic Poisson solver convergence test as fixing the triply periodic solver seems to warrant it's own PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/704#issuecomment-602546312:374,test,test,374,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/704#issuecomment-602546312,5,['test'],"['test', 'tested']"
Testability,"Hmmm, a GPU Enzyme test is consistently failing and distributed tests are segfaulting. Lemme re-run the builds and hope things magically change haha :crossed_fingers:",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3902#issuecomment-2459940162:19,test,test,19,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3902#issuecomment-2459940162,2,['test'],"['test', 'tests']"
Testability,"Hmmm, gave it a try but tests pass on my laptop so not sure how to go about reproducing the failing tests...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/479#issuecomment-542817890:24,test,tests,24,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/479#issuecomment-542817890,2,['test'],['tests']
Testability,"Hmmm, if it's indeed incapable of compiling the entire operation might be helpful to be able to find out exactly at which size it fails. I'm still thinking that it might be something to be fixed/improved in CUDA.jl. I can try to do some test as I update #870.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-738842830:237,test,test,237,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1241#issuecomment-738842830,1,['test'],['test']
Testability,"Hmmm, interestingly in your benchmarks the 128^3 models were faster than the 32^3 models!. Benchmark results from 32^3 models:. For 1-2 tracers inner and outer loops seem the same, but for many tracers, inner loops seems better now on the GPU. For the CPU, outer loops is still much better. Not sure what to make of this. We're definitely not saturating the GPU so maybe it's not worth considering the case of small GPU models too much?. Outer loops seems like the way to go?. ### Outer loops (this PR); ```; ───────────────────────────────────────────────────────────────────────────────────────────────────────────; Tracer benchmarks Time Allocations ; ────────────────────── ───────────────────────; Tot / % measured: 132s / 0.60% 15.9GiB / 0.63% . Section ncalls time %tot avg alloc %tot avg; ───────────────────────────────────────────────────────────────────────────────────────────────────────────; 32× 32× 32 0 active + 0 passive (CPU, Float64) 10 32.2ms 4.06% 3.22ms 551KiB 0.52% 55.1KiB; 32× 32× 32 0 active + 1 passive (CPU, Float64) 10 39.2ms 4.95% 3.92ms 642KiB 0.61% 64.2KiB; 32× 32× 32 0 active + 2 passive (CPU, Float64) 10 42.1ms 5.32% 4.21ms 736KiB 0.70% 73.6KiB; 32× 32× 32 1 active + 0 passive (CPU, Float64) 10 38.4ms 4.85% 3.84ms 652KiB 0.62% 65.2KiB; 32× 32× 32 2 active + 0 passive (CPU, Float64) 10 43.2ms 5.46% 4.32ms 747KiB 0.71% 74.7KiB; 32× 32× 32 2 active + 3 passive (CPU, Float64) 10 55.6ms 7.02% 5.56ms 0.98MiB 0.96% 100KiB; 32× 32× 32 2 active + 5 passive (CPU, Float64) 10 63.9ms 8.07% 6.39ms 1.15MiB 1.12% 118KiB; 32× 32× 32 2 active + 10 passive (CPU, Float64) 10 80.5ms 10.2% 8.05ms 1.59MiB 1.54% 162KiB. 32× 32× 32 0 active + 0 passive (GPU, Float64) 10 29.1ms 3.67% 2.91ms 6.11MiB 5.94% 625KiB; 32× 32× 32 0 active + 1 passive (GPU, Float64) 10 33.2ms 4.19% 3.32ms 7.62MiB 7.41% 780KiB; 32× 32× 32 0 active + 2 passive (GPU, Float64) 10 36.9ms 4.66% 3.69ms 9.12MiB 8.88% 934KiB; 32× 32× 32 1 active + 0 passive (GPU, Float64) 10 33.5ms 4.23% 3.35ms 7.63MiB 7.42",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-542378924:28,benchmark,benchmarks,28,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/452#issuecomment-542378924,3,"['Benchmark', 'benchmark']","['Benchmark', 'benchmarks']"
Testability,"Hmmm, looks like it's failing the verification experiment tests but passes everything else... ```; 336 Stratified Couette flow verification [CPU]: Error During Test at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:25; 337 Test threw exception; 338 Expression: run_stratified_couette_flow_verification(arch); 339 UndefVarError: simulate_stratified_couette_flow not defined; 340 Stacktrace:; 341 [1] run_stratified_couette_flow_verification(::CPU) at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:14; 342 [2] top-level scope at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:25; 343 [3] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Test/src/Test.jl:1083; 344 [4] top-level scope at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:24; 345 [5] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.1/Test/src/Test.jl:1083; 346 [6] top-level scope at /builds/JuliaGPU/Oceananigans-jl/test/test_verification.jl:20; ```. Will look into it. Should be a simple fix.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/559#issuecomment-563230624:58,test,tests,58,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/559#issuecomment-563230624,12,"['Test', 'test']","['Test', 'test', 'tests']"
Testability,"Hmmm, maybe more of a question for @glwagner but can you nest `ComputedField`s (is it tested?)? I think I always passed an abstract operation to a `ComputedField`. So I might try. ```julia; u_tot = u + U; b_tot = b + B. Ro_abs = ComputedField(-∂y(u_tot) / f0); Ri_abs = ComputedField(∂z(b_tot) / (∂z(u_tot)^2)); dbdz_abs = ComputedField(∂z(b_tot)); dudz_abs = ComputedField(∂z(u_tot)); Ri_abs2 = ComputedField(∂z(b_tot) / ∂z(u_tot)^2); ```. Otherwise might help to describe how `compute!(Ri_abs)` and `compute!(Ri_abs2)` are different from `Ri_cons`, e.g. is it completely wrong, factor of 2, only wrong at the boundary, etc.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1323#issuecomment-768625302:86,test,tested,86,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1323#issuecomment-768625302,1,['test'],['tested']
Testability,"Hmmm, not sure what the issue could be but dissipation field does look well-behaved. I agree that the time average isn't what I would expect based on the movie of the dissipation snapshots. Maybe the best way to approach this is to design a simple test that uses `KernelComputedField` + `TimeAveragedInterval`?. I'll have a look at the code to see if there's anything that stands out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809585691:248,test,test,248,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-809585691,1,['test'],['test']
Testability,"Hmmm, seems like tests are failing. Some with `KeyError: key ""timeseries"" not found` and some with file not found type errors.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/479#issuecomment-542394106:17,test,tests,17,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/479#issuecomment-542394106,1,['test'],['tests']
Testability,"Hmmm, should we be using [`CUDA.has_cuda_gpu`](https://cuda.juliagpu.org/dev/api/essentials/#CUDA.has_cuda_gpu) instead of [`CUDA.has_cuda`](https://cuda.juliagpu.org/dev/api/essentials/#CUDA.has_cuda)?. Since Tartarus actually has GPUs (we just hide them via an environment variable in CI, e.g. https://github.com/CliMA/Oceananigans.jl/blob/main/.buildkite/pipeline.yml#L77) I can see `CUDA.has_cuda_gpu` returning false (which we want) while `CUDA.has_cuda` would return true (not what we want). This might fix the unit tests (`test_field.jl`) but there are other failures that might not be related to this. Confusingly I see no recent changes in CUDA.jl that would lead to a difference in behavior for `has_cuda` (see changes for `src/initialization.jl`) but there were a lot of changes between v3.3.6 and v3.5.0 that I wouldn't understand: https://github.com/JuliaGPU/CUDA.jl/compare/v3.3.6...v3.5.0",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942845682:522,test,tests,522,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-942845682,1,['test'],['tests']
Testability,"Hmmm, so it looks like tests take longer now so Travis CI and GitLab CI will more often than not time out and fail 😞 . Maybe it's time to split up the tests into 3-4 smaller jobs?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/860#issuecomment-675489972:23,test,tests,23,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/860#issuecomment-675489972,2,['test'],['tests']
Testability,"Hmmm, the `@test ds isa FieldDataset` test is passing but all the other tests are failing with ``UndefVarError: `ds` not defined`` even though they come right after and within the scope of the same `@testset`... Reproduces locally too. Will see if I can fix it locally. EDIT: Never mind, was a typo. This is why we write tests and actually read the stack trace...",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3754#issuecomment-2338824132:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3754#issuecomment-2338824132,5,['test'],"['test', 'tests', 'testset']"
Testability,"Hmmm, yeah one issue is that we don't actually test `show` methods. Perhaps it would be good to add a bunch of `show` tests which would also increase code coverage.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/700#issuecomment-599480673:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/700#issuecomment-599480673,2,['test'],"['test', 'tests']"
Testability,"Hmmm, yeah one issue is that we don't actually test `show` methods. Perhaps it would be good to add a bunch of `show` tests which would also increase code coverage. _Originally posted by @ali-ramadhan in https://github.com/climate-machine/Oceananigans.jl/issues/700#issuecomment-599480673_",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/705:47,test,test,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/705,2,['test'],"['test', 'tests']"
Testability,"Hmmm, yeah so the GitLab CI GPU tests always get stuck testing the pressure solvers (which is where we start creating FFT plans) with Julia 1.3+. Was never able to reproduce this on any machine I have access to. Example build logs:; Julia 1.3: https://gitlab.com/JuliaGPU/Oceananigans-jl/-/jobs/444576929; Julia 1.5: https://gitlab.com/JuliaGPU/Oceananigans-jl/-/jobs/444576930. @maleadt Was wondering if you have any ideas about what's going on? Maybe someone else had similiar issues. I'll isolate exactly which test/line it always gets stuck on.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589135055:32,test,tests,32,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/636#issuecomment-589135055,4,"['log', 'test']","['logs', 'test', 'testing', 'tests']"
Testability,"Hmmm, yeah so the current way we handle test dependencies (compatible with Julia 1.x but not 2.0+) doesn't seem to let us instantiate a test environment with packages required for benchmarking. We can [update the way we handle test dependencies](https://julialang.github.io/Pkg.jl/v1/creating-packages/index.html#Test-specific-dependencies-in-Julia-1.2-and-above-1) (compatible with Julia 1.2+) and define a `test/Project.toml` so then we just run with the test environment with `julia --project test` (from the repo's root dir) and we should get the packages we need for benchmarking while users won't (which is what we want I think). If this sounds like a good idea to you, I can make the change (probably should be in a separate PR). Oceananigans already requires Julia 1.3 anyways.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/727#issuecomment-612908744:40,test,test,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/727#issuecomment-612908744,9,"['Test', 'benchmark', 'test']","['Test-specific-dependencies-in-Julia-', 'benchmarking', 'test']"
Testability,"Hmnm, I thought there existed a Poisson solver that worked for each topology. Maybe I'm wrong?. I looked at your code and see you want to use `(Periodic, Flat, Bounded)`. I also checked in `test_poisson_solver.jl` and see this does test that particular topology but the test is for instantiating. . Is it possible that the model can instantiate but not solve the poisson problem for this topology? If yes then do we want a stronger test?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-877905755:232,test,test,232,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1849#issuecomment-877905755,3,['test'],['test']
Testability,Hold on --- tests may not pass...,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/252#issuecomment-497104431:12,test,tests,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/252#issuecomment-497104431,1,['test'],['tests']
Testability,"Honestly, my thought is that that test should catch the error already. I; can't immediately think of anything else required.; I might implement that test manually on my end and see if the results are; correct. Like I said, there's a possibility that I'm just using; AveragedTimeInterval wrong... On Mon, Apr 12, 2021 at 10:13 AM Gregory L. Wagner ***@***.***>; wrote:. > We have a test that satisfies those requirements I believe:; >; >; > https://github.com/CliMA/Oceananigans.jl/blob/39ee546803b05fdf1fdaec2880fede5b5aaebe10/test/test_netcdf_output_writer.jl#L476-L570; >; > In particular it uses a tracer solution that decays exponentially in time; > at a rate that is different at every grid point.; >; > What are the additional ingredients in your script that lead to a bug?; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817981813>,; > or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADEX5KVVXNDWA7HVZ4HYBTTTIMS4HANCNFSM4Z7XXUAQ>; > .; >. -- ; Tomás L. Chor; Postdoctoral researcher; Atmospheric and Oceanic Science department; University of Maryland; https://tomchor.github.io/",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817984388:34,test,test,34,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817984388,4,['test'],['test']
Testability,How about a test?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1426238455:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2912#issuecomment-1426238455,1,['test'],['test']
Testability,How about a test? If it's not trivial then don't worry.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896350743:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1932#issuecomment-896350743,1,['test'],['test']
Testability,How about benchmarking the examples?. We should have a fully-loaded example too.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1089#issuecomment-713730714:10,benchmark,benchmarking,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1089#issuecomment-713730714,1,['benchmark'],['benchmarking']
Testability,"How about few tests? E.g., some similar to what is discussed in #2189. Would that be useful you reckon?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022625228:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2190#issuecomment-1022625228,1,['test'],['tests']
Testability,"How about something like this. ```julia; archs = (CPU(),) # just to make this code run. timesteppers = (:QuasiAdamsBashforth2, :RungeKutta3); y_topologies = (Periodic(), Flat()); vertical_grids = (uniform=(-1,1), stretched=[-1, -0.5, 0.0, 0.4, 0.7, 1]). lagrangian_particle_test_grid(arch, ::Periodic, z) = RectilinearGrid(arch; topology=(Periodic, Periodic, Bounded), size=(5, 5, 5), x=(-1, 1), y=(-1, 1), z); lagrangian_particle_test_grid(arch, ::Flat, z) = RectilinearGrid(arch; topology=(Periodic, Flat, Bounded), size=(5, 5), x=(-1, 1), z). for arch in archs, timestepper in timesteppers, y_topo in y_topologies, (z_grid_type, z) in pairs(vertical_grids); @info "" Testing Lagrangian particle tracking [$(typeof(arch)), $timestepper] with y $(typeof(y_topo)) on vertically $z_grid_type grid ...""; grid = lagrangian_particle_test_grid(arch, y_topo, z); # run_simple_particle_tracking_tests(arch, grid, timestepper); @show grid; end; ```. which would give us these 8 (per architecture) test cases. ```julia; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically uniform grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] regularly spaced with Δz=0.4; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Periodic on vertically stretched grid ...; grid = 5×5×5 RectilinearGrid{Float64, Periodic, Periodic, Bounded} on CPU with 3×3×3 halo; ├── Periodic x ∈ [-1.0, 1.0) regularly spaced with Δx=0.4; ├── Periodic y ∈ [-1.0, 1.0) regularly spaced with Δy=0.4; └── Bounded z ∈ [-1.0, 1.0] variably spaced with min(Δz)=0.3, max(Δz)=0.5; [ Info: Testing Lagrangian particle tracking [CPU, QuasiAdamsBashforth2] with y Flat on vertically uniform grid ...; grid = 5×1×5 RectilinearGrid{Float64, Periodic, Flat, Bounded} on CPU with 3×0×",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232:669,Test,Testing,669,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3550#issuecomment-2063314232,2,"['Test', 'test']","['Testing', 'test']"
Testability,How about the tests that fail? Wanna work together to get them done?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528889163:14,test,tests,14,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3090#issuecomment-1528889163,1,['test'],['tests']
Testability,"How about we work on a minimal test / example? If you can list the essential ingrdients, I can write up a test and submit a PR.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817964604:31,test,test,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1517#issuecomment-817964604,2,['test'],['test']
Testability,"How can we address this? I would prefer that we time-step `w`, but I think changing the algorithm causes tests to fail. Should we open a branch to test?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/338#issuecomment-526842565:105,test,tests,105,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/338#issuecomment-526842565,2,['test'],"['test', 'tests']"
Testability,How did the tracer advection test pass then?,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3280#issuecomment-1744976086:29,test,test,29,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3280#issuecomment-1744976086,1,['test'],['test']
Testability,"How will we test code for Metal GPU? Is there anything available through github actions, or will we have to hook something up via buildkite?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1732647490:12,test,test,12,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3288#issuecomment-1732647490,1,['test'],['test']
Testability,"However, we don't support reducing across the 4th dimension (yet). I think we should merge this now since it resolves #2424, but we should also raise an issue to add a test or two. Closes #2424",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2425:168,test,test,168,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2425,1,['test'],['test']
Testability,"Huh, I wasn't aware of that work! I'm amazed at how much is in there. Some of the air-sea stuff is overlapping with work we've done at ClimaOcean. I had assumed that we would want to implement bulk formula in the context of ClimaOcean's `OceanSeaIceModel`. But that package is taking a different approach, so maybe we should consider that. How should we proceed? I do think it's best to work on a single tool rather than copy or replicate efforts in many places. As for wall stress models for rough boundaries, given what I see in that package I feel it makes sense to design some generalizable infrastructure in Oceananigans for implementing / testing different wall models. What I've written above is merely one choice I think.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3807#issuecomment-2386230966:645,test,testing,645,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3807#issuecomment-2386230966,1,['test'],['testing']
Testability,"Huh, so its the difference between. https://user-images.githubusercontent.com/15271942/165942956-f73c2f7c-88dd-4c1a-9775-c209a2007894.mp4. where the hydrostatic pressure is treated _explicitly_ (via RK3 in this example) by integrating buoyancy, and. https://user-images.githubusercontent.com/15271942/165942854-8061b8fe-a254-4ed0-8f66-d6283415fd8a.mp4. where pressure is treated implicitly with an elliptic solve and fractional step (at every RK3 stage...). I tested reducing the time-step and don't see any convergence with time-step. Reducing the time-step and running 5 times as long produces. https://user-images.githubusercontent.com/15271942/165946791-6cb90b71-f361-42d9-82db-b16baaf6c3db.mp4. On `main` the same does:. https://user-images.githubusercontent.com/15271942/165952404-00e93a46-65a2-4b9b-a617-43a424f455b1.mp4. Note also these results depend on resolution (which I'm not showing). So it seems both are wrong but one is more so and it's O(1) in time. I also tested WENO5 advection (no difference) and high resolution (seems to make a difference).",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1114810950:460,test,tested,460,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2347#issuecomment-1114810950,2,['test'],['tested']
Testability,"Hummmm no, I don't. `cpudata` should be tested on the GPU. Where is that function used anyways?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-941344608:40,test,tested,40,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2005#issuecomment-941344608,1,['test'],['tested']
Testability,Hydrostatic model explicit vs. implicit free surface benchmarks + some small fixes,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1604:53,benchmark,benchmarks,53,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1604,1,['benchmark'],['benchmarks']
Testability,HydrostaticFreeSurfaceModel regression test,MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1373:39,test,test,39,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1373,1,['test'],['test']
Testability,I 'll merge when the last test passes,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1146244837:26,test,test,26,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2522#issuecomment-1146244837,1,['test'],['test']
Testability,"I added a `ParticleAdvectionForcing` that behaves similarly to `dynamics(particles, model, Δt)` which allows user to specify any velocities it wishes to add to the model by passing in `NonHydrostaticModel(..., advective_forcing = ParticleAdvectiveForcing(u=some_u, v=some_v, w=some_w))` . The arguments are functions that take `(particles, model, Δt)` as inputs. . When I am trying to test my code I ran into a problem:; ```; ERROR: UndefVarError: `flattened_node` not defined; ```. https://github.com/CliMA/Oceananigans.jl/blob/a73e845a7a7bce8e22e9453670c1c20b67dbfc3a/src/Models/LagrangianParticleTracking/lagrangian_particle_advection.jl#L92. @simone-silvestri I see that you added this and I couldn't find anywhere in the code where `flattened_node` is defined. What is it supposed to be?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1837241191:385,test,test,385,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3396#issuecomment-1837241191,1,['test'],['test']
Testability,I added a bit more explanation and tests should pass now.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/839#issuecomment-670069530:35,test,tests,35,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/839#issuecomment-670069530,1,['test'],['tests']
Testability,"I added a script for looking at coarse, 3D baroclinic adjustment with GM starting with either a gradient in `y` or in `x`: https://github.com/CliMA/Oceananigans.jl/blob/0d04d4014c9ecc06deb158c42a2b3e3cd7699b31/validation/mesoscale_turbulence/coarse_baroclinic_adjustment.jl. It was tricky to get this to work in the first place; it seems we need diffusion to stabilize GM right now. I settled on adding biharmonic diffusivity with a time scale of 10 days. The script computes a mean in the direction perpendicular to the initial gradient. When the gradient is initially in `y`:. https://user-images.githubusercontent.com/15271942/164878441-a0660d6e-3241-4ec4-a473-cf0c65c70fa6.mp4. When the gradient is in `x`:. https://user-images.githubusercontent.com/15271942/164878658-18604606-9374-4008-894e-29ee7e49782a.mp4. From this it seems that the diffusivity is at least doing the right thing (but the stencil may still be non-optimal). We also need to test on a lat-lon grid.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107363713:949,test,test,949,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2463#issuecomment-1107363713,1,['test'],['test']
Testability,"I added a test for `WindowedSpatialAverage` but I the docs keep failing and I don't know why. I'd appreciate some help. Btw, when I test locally everything passes, but the github tests fail somewhere that I can't figure out.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787118994:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1397#issuecomment-787118994,3,['test'],"['test', 'tests']"
Testability,"I added a test that fails due to #3829. I should also test the non-FFT case and test that the proper pre-conditioner was initialized. So the test could be better but it does fail as it should. What we need is a `using Oceananigans.ImmersedBoundaries` but the solvers module is defined well before the immersed boundaries module. So for a solver to depend on the immersed boundaries module, and really just the `ImmersedBoundaryGrid` type then the immersed boundaries module needs to be included first. Based on these comments maybe it's desirable to change the order of inclusion? But maybe it'll take some work. So otherwise we probably need to define another abstract type in `src/Oceananigans.jl` but this solution isn't ideal. https://github.com/CliMA/Oceananigans.jl/blob/13bf409616af8c155b72d8869b7b8f97ae0e844b/src/Oceananigans.jl#L214-L228. Resolves #3829",MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3830:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3830,4,['test'],['test']
Testability,I added a test to #2397 but it doesn't catch this bug: https://github.com/CliMA/Oceananigans.jl/blob/5c35f5dcf1ca109938a66913b05cdbc2f1616509/test/test_lagrangian_particle_tracking.jl,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1084515653:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2395#issuecomment-1084515653,2,['test'],['test']
Testability,I added a test; feel free to modify at your liking!,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1987940006:10,test,test,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3498#issuecomment-1987940006,1,['test'],['test']
Testability,"I added tests and updated the documentation so will merge once tests pass. I also added more readable (i.e. reads like how you would say it) boundary condition constructors, e.g.; ```julia; fbc = FluxBoundaryCondition(-1e-3); vbc = ValueBoundaryCondition(25); ```",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/620#issuecomment-586595933:8,test,tests,8,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/620#issuecomment-586595933,2,['test'],['tests']
Testability,I added the flat lat/lon grid test because it has its own functions [here](https://github.com/CliMA/Oceananigans.jl/blob/main/src/Models/HydrostaticFreeSurfaceModels/single_column_model_mode.jl) which failed when I was testing something. But if this isn't tested elsewhere we might as well remove it? I also don't really see why it would exist since a lat/lon grid with flat dimensions is the same as a rectilinear grid.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630559577:30,test,test,30,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/3179#issuecomment-1630559577,3,['test'],"['test', 'tested', 'testing']"
Testability,I added three forcing function + time-stepping tests to make sure it always works now. CPU and GPU tests passed on Google Cloud so all CI pipelines should pass hopefully. @glwagner Please approve and merge if it looks okay.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/388#issuecomment-526924304:47,test,tests,47,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/388#issuecomment-526924304,2,['test'],['tests']
Testability,"I admit that I'm not quite satisfied with these:. https://github.com/CliMA/Oceananigans.jl/blob/b9c902660826454e43585cb49d9b358aec32b9f0/test/test_multi_region_cubed_sphere.jl#L9-L65. tests, mostly because looking at the code I can't understand what's happening -- they are not human-readable. I'll try to fix them. Perhaps @siddharthabishnu could you add docstring with some explanation?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653573292:137,test,test,137,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2867#issuecomment-1653573292,2,['test'],"['test', 'tests']"
Testability,"I agree that I would expect it to saturate at higher than 16 if there were 48 cores, but clearly I'm wrong. Getting another benchmark would be a good idea. I'm happy to consider the numba + parallel idea since that would be good to test the architecture. This [mini-course](https://github.com/omlins/parallel-gpu-workshop-JuliaCon21) did give some threaded examples to solve the diffusion equation in 3D. I wonder if we might want to ask Ludovic if they have done any scalings for multi-threading?. I'm happy to discuss this with @hennyg888 on Monday and see what we come up with. Others are happy to join the discussion if they like.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886074548:124,benchmark,benchmark,124,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1861#issuecomment-886074548,2,"['benchmark', 'test']","['benchmark', 'test']"
Testability,I agree that having a flexible particle tracking framework is more important. I've already started refactoring with @suyashbire1. Just wanted to benchmark the barebones implementation first to ensure that the extra features don't slow it down by 100x. Sometimes it's easy to introduce huge slowdowns on the GPU.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-733209783:145,benchmark,benchmark,145,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1091#issuecomment-733209783,1,['benchmark'],['benchmark']
Testability,"I agree that the AMD and Smagorinsky-Lilly schemes would be sufficient here, so there's not probably no reason to even test BLASIUS scheme.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1002#issuecomment-701490625:119,test,test,119,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1002#issuecomment-701490625,1,['test'],['test']
Testability,"I agree with your arguments. However, if I understood correctly, my only; concern (as a user) is that if you set them to zero by default,; setting `closure=IsotropicDiffusivity()` in a model will create a; simulation that will have no diffusivities and most likely will crash. From; a user perspective that's not the expected behavior I think, right?. On Wed, Dec 16, 2020, 18:17 Gregory L. Wagner <notifications@github.com>; wrote:. > IsotropicDiffusivity currently uses a viscosity and thermal diffusivity; > appropriate for water at 20 degrees Celsius and 35 psu:; >; >; > https://github.com/CliMA/Oceananigans.jl/blob/81db22f4a26396142e8cd5b5a4c50c75790c1d50/src/TurbulenceClosures/turbulence_closure_implementations/isotropic_diffusivity.jl#L11-L28; >; > When I put this in I originally thought it was positive because it; > provided a reference. It's also cute because its ""oceanic"".; >; > But as time has gone on I now fear its actually surprising and also not; > very useful, since it's not actually a common to use Oceananigans for; > direct numerical simulations of miniscule boxes with molecular transport; > coefficients. Instead, IsotropicDiffusivity is useful for 1) idealized; > problems and education and 2) as a simple turbulence closure when setting; > up a simulation / testing ideas, possibly prior to implementing a more; > complicated closure. This ""ocean-realistic"" default is inconvenient for; > either case.; >; > So, I propose changing the default for both the viscosity and diffusivity; > to 0.; >; > cc @tomchor <https://github.com/tomchor> @xiaozhour; > <https://github.com/xiaozhour>; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/CliMA/Oceananigans.jl/issues/1278>, or unsubscribe; > <https://github.com/notifications/unsubscribe-auth/ADEX5KU2HG7BRG62RUDLKJTSVFS5JANCNFSM4U64DLDA>; > .; >",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/1278#issuecomment-747170506:1289,test,testing,1289,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/1278#issuecomment-747170506,1,['test'],['testing']
Testability,"I agree with your four points and that a default of `with_halos = true` makes sense in anticipation of a more powerful fields abstraction. I'm happy to change the default (will commit once tests pass), I just wanted the option of including or excluding halos for different use cases. This also means that this PR does not introduce breaking changes anymore. I also revised the tests to actually reconstruct the `Average` as opposed to just setting `T̅.with_halos = true` which does not test the constructor.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/859#issuecomment-674786222:189,test,tests,189,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/859#issuecomment-674786222,3,['test'],"['test', 'tests']"
Testability,"I agree, let's just disable this test for now so we can merge outstanding PRs and rewrite the test",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087:33,test,test,33,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2922#issuecomment-1430155087,2,['test'],['test']
Testability,I agree. We have an advection convergence test so this could be closed. Producing some movies to show the behavior of different advection schemes would be cool and educational but already exists in many places and isn't within the scope of this issue.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/481#issuecomment-663170486:42,test,test,42,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/481#issuecomment-663170486,1,['test'],['test']
Testability,"I already tested it for some complex calculations (TKE, Ri, Ro and Ertel PV) and the results are correct!",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1293#issuecomment-759837562:10,test,tested,10,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1293#issuecomment-759837562,1,['test'],['tested']
Testability,I also got confused by . https://github.com/CliMA/Oceananigans.jl/blob/4f1fe0fa7edd9489ba20875be64b69daa0a77b95/test/test_dynamics.jl#L32-L37. until I realized that `z_viscosity` here is used only to determine a stable but non-trivial time step.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2291#issuecomment-1055425366:112,test,test,112,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2291#issuecomment-1055425366,1,['test'],['test']
Testability,I also noticed we're not testing `closure = nothing` in `test_turbulence_closures.jl` (although there's some implicit testing since that is the default option). So I'd also like to add `nothing` to the list of tested closures https://github.com/CliMA/Oceananigans.jl/blob/6cbe8cf339b58170c51846160d832a431e42715c/test/dependencies_for_runtests.jl#L57-L64,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865:25,test,testing,25,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2951#issuecomment-1448610865,4,['test'],"['test', 'tested', 'testing']"
Testability,I also ran the tests on a server and all the tests passed on both CPUs and GPUs.,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968103207:15,test,tests,15,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3394#issuecomment-1968103207,2,['test'],['tests']
Testability,"I also reported this on https://github.com/CliMA/Oceananigans.jl/issues/3056, so maybe we should close this to avoid multiple issues of the same problem. I don't have a PR specifically trying to fix that, but it is possible that https://github.com/CliMA/Oceananigans.jl/pull/3606 fixes, or least ameliorates, the issue. @mncrowe can you test your simulation on that branch and check if you see the same behavior?",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/3614#issuecomment-2150439493:337,test,test,337,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/3614#issuecomment-2150439493,1,['test'],['test']
Testability,"I am a little perplexed, because it seemed that tests on the PR passed (except for documentation, which is mysteriously broken right now due to a dependency that's getting updated during `dev ..` in the docs build). ![image](https://user-images.githubusercontent.com/15271942/114247433-ed6df200-9949-11eb-8649-f270ee7e12c7.png). ![image](https://user-images.githubusercontent.com/15271942/114247449-f5c62d00-9949-11eb-96af-02532bde76ef.png)",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817010193:48,test,tests,48,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/1566#issuecomment-817010193,1,['test'],['tests']
Testability,I am also surprised that these tests are passing in julia 1.6 without complaining of scalar operations,MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1277736598:31,test,tests,31,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2701#issuecomment-1277736598,1,['test'],['tests']
Testability,"I am closing the issue because the solution is to give always `Float64` as suggested by @simone-silvestri . ```julia; @inline tank(x, y) = ifelse(radius(x, y) < L, -H, Float64(0.0)); ```. I tested and this is working now.; Had some issues in the boundaries, but I might discuss that in another issue/discussion.",MatchSource.ISSUE_COMMENT,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1089373051:190,test,tested,190,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/issues/2367#issuecomment-1089373051,1,['test'],['tested']
Testability,I am currently running a 0.083-degree global ocean simulation on Tesla V100 GPUs. I am benchmarking a bit to understand where we can target optimization to improve the performance and I thought I would leave the benchmarks here to document them for later use. (we do not have to merge this PR),MatchSource.ISSUE,CliMA,Oceananigans.jl,v0.93.2,https://github.com/CliMA/Oceananigans.jl/pull/2760:87,benchmark,benchmarking,87,https://clima.github.io/OceananigansDocumentation/stable,https://github.com/CliMA/Oceananigans.jl/pull/2760,2,['benchmark'],"['benchmarking', 'benchmarks']"
