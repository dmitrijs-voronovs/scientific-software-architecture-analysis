quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,filename,wiki,url,total_similar,target_keywords,target_matched_words
Availability," .pdf. scanpy.get.aggregate. Contents . aggregate(). scanpy.get.aggregate#. scanpy.get.aggregate(adata, by, func, *, axis=None, mask=None, dof=1, layer=None, obsm=None, varm=None)[source]#; Aggregate data matrix based on some categorical grouping.; This function is useful for pseudobulking as well as plotting.; Aggregation to perform is specified by func, which can be a single metric or a; list of metrics. Each metric is computed over the group and results in a new layer; in the output AnnData object.; If none of layer, obsm, or varm are passed in, X will be used for aggregation data. Parameters:. adata AnnDataAnnData to be aggregated. by str | Collection[str]Key of the column to be grouped-by. func Union[Literal['count_nonzero', 'mean', 'sum', 'var'], Iterable[Literal['count_nonzero', 'mean', 'sum', 'var']]]How to aggregate. axis Optional[Literal['obs', 0, 'var', 1]] (default: None)Axis on which to find group by column. mask ndarray[Any, dtype[bool]] | str | None (default: None)Boolean mask (or key to column containing mask) to apply along the axis. dof int (default: 1)Degrees of freedom for variance. Defaults to 1. layer str | None (default: None)If not None, key for aggregation data. obsm str | None (default: None)If not None, key for aggregation data. varm str | None (default: None)If not None, key for aggregation data. Return type:; AnnData. Returns:; Aggregated AnnData. Examples; Calculating mean expression and number of nonzero entries per cluster:; >>> import scanpy as sc, pandas as pd; >>> pbmc = sc.datasets.pbmc3k_processed().raw.to_adata(); >>> pbmc.shape; (2638, 13714); >>> aggregated = sc.get.aggregate(pbmc, by=""louvain"", func=[""mean"", ""count_nonzero""]); >>> aggregated; AnnData object with n_obs × n_vars = 8 × 13714; obs: 'louvain'; var: 'n_cells'; layers: 'mean', 'count_nonzero'. We can group over multiple columns:; >>> pbmc.obs[""percent_mito_binned""] = pd.cut(pbmc.obs[""percent_mito""], bins=5); >>> sc.get.aggregate(pbmc, by=[""louvain"", ""percent_mito_bi",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.aggregate.html:10157,mask,mask,10157,en/stable/generated/scanpy.get.aggregate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.aggregate.html,3,['mask'],['mask']
Availability," a sequence containing the size for each cell. The order should be; the same as in adata.obs. color_map Colormap | str | None (default: None)Color map to use for continous variables. Can be a name or a; Colormap instance (e.g. ""magma”, ""viridis""; or mpl.cm.cividis), see get_cmap().; If None, the value of mpl.rcParams[""image.cmap""] is used.; The default color_map can be set using set_figure_params(). palette str | Sequence[str] | Cycler | None (default: None)Colors to use for plotting categorical annotation groups.; The palette can be a valid ListedColormap name; ('Set2', 'tab20', …), a Cycler object, a dict mapping; categories to colors, or a sequence of colors. Colors must be valid to; matplotlib. (see is_color_like()).; If None, mpl.rcParams[""axes.prop_cycle""] is used unless the categorical; variable already has colors stored in adata.uns[""{var}_colors""].; If provided, values of adata.uns[""{var}_colors""] will be set. na_color Union[str, tuple[float, ...], None] (default: None)Color to use for null or masked values. Can be anything matplotlib accepts as a; color. Used for all points if color=None. na_in_legend bool (default: True)If there are missing values, whether they get an entry in the legend. Currently; only implemented for categorical legends. frameon bool | None (default: None)Draw a frame around the scatter plot. Defaults to value set in; set_figure_params(), defaults to True. title str | Sequence[str] | None (default: None)Provide title for panels either as string or list of strings,; e.g. ['title1', 'title2', ...]. vmin Union[str, float, Callable[[Sequence[float]], float], Sequence[Union[str, float, Callable[[Sequence[float]], float]]], None] (default: None)The value representing the lower limit of the color scale. Values smaller than vmin are plotted; with the same color as vmin. vmin can be a number, a string, a function or None. If; vmin is a string and has the format pN, this is interpreted as a vmin=percentile(N).; For example vmin=’p1.5’ is interpre",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html:16341,mask,masked,16341,en/stable/api/generated/scanpy.pl.spatial.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html,1,['mask'],['masked']
Availability," analytic Pearson residuals#; With version 1.9, scanpy introduces new preprocessing functions based on Pearson residuals into the experimental.pp module. These functions implement the core steps of the preprocessing described and benchmarked in Lause et al. (2021).; In the first part, this tutorial introduces the new core functions by demonstrating their usage on two example datasets. In the second part, we briefly explain the optional arguments and their default settings. Finally, two wrapper functions that run the whole Pearson residual workflow at once are briefly discussed. Background#; In brief, Pearson residuals transform raw UMI counts into a representation where three aims are achieved:. remove the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seurat’s scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; Thi",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:11137,down,downstream,11137,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['down'],['downstream']
Availability," and uses the same broadcasting rules as other arguments pr1538 I Virshup; print_versions() now uses session_info pr2089 P Angerer I Virshup. Ecosystem#; Multiple packages have been added to our ecosystem page, including:. decoupler a for footprint analysis and pathway enrichement pr2186 PB Mompel; dandelion for B-cell receptor analysis pr1953 Z Tuong; CIARA a feature selection tools for identifying rare cell types pr2175 M Stock. Bug fixes#. Fixed finding variables with use_raw=True and basis=None in scanpy.pl.scatter() pr2027 E Rice; Fixed scanpy.pp.scrublet() to address issue1957 FlMai and ensure raw counts are used for simulation; Functions in scanpy.datasets no longer throw OldFormatWarnings when using anndata 0.8 pr2096 I Virshup; Fixed use of scanpy.pp.neighbors() with method='rapids': RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. pr1828 M Zaslavsky; Removed pytables dependency by implementing read_10x_h5 with h5py due to installation errors on Windows pr2064; Fixed bug in scanpy.external.pp.hashsolo() where default value was set improperly pr2190 B Reiz; Fixed bug in scanpy.pl.embedding() functions where an error could be raised when there were missing values and large numbers of categories pr2187 I Virshup. Version 1.8#. 1.8.2 2021-11-3#. Documentation#. Update conda installation instructions pr1974 L Heumos. Bug fixes#. Fix plotting after scanpy.tl.filter_rank_genes_groups() pr1942 S Rybakov; Fix use_raw=None using anndata.AnnData.var_names if anndata.AnnData.raw; is present in scanpy.tl.score_genes() pr1999 M Klein; Fix compatibility with UMAP 0.5.2 pr2028 L Mcinnes; Fixed non-determinism in scanpy.pl.paga() node positions pr1922 I Virshup. Ecosystem#. Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem. 1.8.1 2021-07-07#. Bug fixes#. Fixed reproducibility of scanpy.tl.score_genes(). Calculation and output is now float64 type. pr1890 I Kucins",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:24833,error,errors,24833,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['error'],['errors']
Availability," color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/G",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19872,down,download,19872,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['down'],['download']
Availability," for leiden clustering by scanpy.external.tl.phenograph() pr1080 A Mousa; Deprecate scanpy.external.pp.scvi pr1554 G Xing; Updated default params of sam() to work with larger data pr1540 A Tarashansky. Documentation#. New contribution guide pr1544 I Virshup; zsh installation instructions pr1444 P Angerer. Performance#. Speed up read_10x_h5() pr1402 P Weiler; Speed ups for obs_df() pr1499 F Ramirez. Bugfixes#. Consistent fold-change, fractions calculation for filter_rank_genes_groups pr1391 S Rybakov; Fixed bug where score_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integer dense arrays pr1400 I Virshup; Fix docstring formatting for rank_genes_groups() pr1417 P Weiler; Removed PendingDeprecationWarning`s from use of `np.matrix pr1424 P Weiler; Fixed indexing byg in ~scanpy.pp.highly_variable_genes pr1456 V Bergen; Fix default number of genes for marker_genes_overlap pr1464 MD Luecken; Fixed passing groupby and dendrogram_key to dendrogram() pr1465 M Varma; Fixed download path of pbmc3k_processed pr1472 D Strobl; Better error message when computing DE with a group of size 1 pr1490 J Manning; Update cugraph API usage for v0.16 pr1494 R Ilango; Fixed marker_gene_overlap default value for top_n_markers pr1464 MD Luecken; Pass random_state to RAPIDs UMAP pr1474 C Nolet; Fixed anndata version requirement for concat() (re-exported from scanpy as sc.concat) pr1491 I Virshup; Fixed the width of the progress bar when downloading data pr1507 M Klein; Updated link for moignard15 dataset pr1542 I Virshup; Fixed bug where calling set_figure_params could block if IPython was installed, but not used. pr1547 I Virshup; violin() no longer fails if .raw not present pr1548 I Virshup; spatial() refactoring and better handling of spatial data pr1512 G Palla; pca() works with chunked=True again pr1592 I Virshup; ingest() now works with umap-learn 0.5.0 pr1601 S Rybakov. Version 1.6#. 1.6.0 2020-08-15#; This release includes an overhaul of dotplot(), mat",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:33142,down,download,33142,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,"['down', 'error']","['download', 'error']"
Availability," indexed by group ids; 'pvals_adj', sorted np.recarray to be indexed by group ids (0:00:00); WARNING: dendrogram data not found (using key=dendrogram_clusters). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.; using 'X_pca' with n_pcs = 50; Storing dendrogram info using `.uns['dendrogram_clusters']`; WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.; categories: 0, 1, 2, etc.; var_group_labels: 3. We see that CR2 recapitulates the spatial structure. sc.pl.spatial(adata, img_key=""hires"", color=[""clusters"", ""CR2""]). sc.pl.spatial(adata, img_key=""hires"", color=[""COL1A2"", ""SYPL1""], alpha=0.7). MERFISH example#; In case you have spatial data generated with FISH-based techniques, just read the cordinate table and assign it to the adata.obsm element.; Let’s take a look at the example from Xia et al. 2019.; First, we need to download the coordinate and counts data from the original publication: coordinates to ./data/pnas.1912459116.sd15.csv and counts to ./data/pnas.1912459116.sd12.csv. # If needed:; # %pip install openpyxl. coordinates = pd.read_excel(""./data/pnas.1912459116.sd15.xlsx"", index_col=0); counts = sc.read_csv(""./data/pnas.1912459116.sd12.csv"").transpose(). adata_merfish = counts[coordinates.index, :].copy(); adata_merfish.obsm[""spatial""] = coordinates.to_numpy(). We will perform standard preprocessing and dimensionality reduction. sc.pp.normalize_per_cell(adata_merfish, counts_per_cell_after=1e6); sc.pp.log1p(adata_merfish); sc.pp.pca(adata_merfish, n_comps=15); sc.pp.neighbors(adata_merfish); sc.tl.umap(adata_merfish); sc.tl.leiden(; adata_merfish,; key_added=""clusters"",; resolution=0.5,; n_iterations=2,; flavor=""igraph"",; directed=False,; ). normalizing by total count per cell; finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finish",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:19890,down,download,19890,en/stable/tutorials/spatial/basic-analysis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html,1,['down'],['download']
Availability," norm = MidpointNormalize(vmin=vmin - vpadding, vmax=vmax + vpadding, midpoint=0); # Plot umap; fig = sc.pl.umap(; adata,; color=""B_cell_score"",; cmap=""coolwarm"",; s=20,; norm=norm,; return_fig=True,; show=False,; ); # Adjust Colorbar ylim to be just outside of vmin,vmax and not far outside of this range; # as the padding we set initially may be too broad; cmap_yticklabels = np.array([t._y for t in fig.axes[1].get_yticklabels()]); fig.axes[1].set_ylim(; max(cmap_yticklabels[cmap_yticklabels < vmin]),; min(cmap_yticklabels[cmap_yticklabels > vmax]),; ). adata.obs.drop(""B_cell_score"", axis=1, inplace=True). Colorblind friendly palettes#; There are different resources that allow creation of colorblind friendly palettes. Example python packages are continous virids palettes and discrete bokeh palettes. Some tools to help you assess whether your palette is color blind friendly include:. Coloring for Colorblindness is a web based tool which can simulate different kinds of color blindness for a discrete palette; Color Oracle a downloadable app which applies a color blindness filter to your screen. UMAP#; This section shows some umap() (and embedding()) specific tips. Coloring cell subset#; Here we show how we can plot all cells as a background and then plot on top indivdual cell groups in color.; We can color-in only specific cell groups when using categorical colors with the groups parameter. ax = sc.pl.umap(adata, color=[""bulk_labels""], groups=[""Dendritic""], show=False). # We can change the 'NA' in the legend that represents all cells outside of the; # specified groups; legend_texts = ax.get_legend().get_texts(); # Find legend object whose text is ""NA"" and change it; for legend_text in legend_texts:; if legend_text.get_text() == ""NA"":; legend_text.set_text(""other cell types""). We can also plot continous values of an individual cell group using the obs_mask key word argument:. sc.pl.umap(adata, color=""IGJ"", mask_obs=(adata.obs.bulk_labels == ""CD19+ B""), size=20). Cell orde",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:30605,down,downloadable,30605,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,1,['down'],['downloadable']
Availability," scanpy.tl.tsne() pr1854 I Virshup. Version 1.7#. 1.7.2 2021-04-07#. Bug fixes#. scanpy.logging.print_versions() now works when python<3.8 pr1691 I Virshup; scanpy.pp.regress_out() now uses joblib as the parallel backend, and should stop oversubscribing threads pr1694 I Virshup; scanpy.pp.highly_variable_genes() with flavor=""seurat_v3"" now returns correct gene means and -variances when used with batch_key pr1732 J Lause; scanpy.pp.highly_variable_genes() now throws a warning instead of an error when non-integer values are passed for method ""seurat_v3"". The check can be skipped by passing check_values=False. pr1679 G Palla. Ecosystem#. Added triku a feature selection method to the ecosystem page pr1722 AM Ascensión; Added dorothea and progeny to the ecosystem page pr1767 P Badia-i-Mompel. 1.7.1 2021-02-24#. Documentation#. More twitter handles for core devs pr1676 G Eraslan. Bug fixes#. dendrogram() use 1 - correlation as distance matrix to compute the dendrogram pr1614 F Ramirez; Fixed obs_df()/ var_df() erroring when keys not passed pr1637 I Virshup; Fixed argument handling for scanpy.pp.scrublet() J Manning; Fixed passing of kwargs to scanpy.pl.violin() when stripplot was also used pr1655 M van den Beek; Fixed colorbar creation in scanpy.pl.timeseries_as_heatmap pr1654 M van den Beek. 1.7.0 2021-02-03#. Features#. Add new 10x Visium datasets to visium_sge() pr1473 G Palla; Enable download of source image for 10x visium datasets in visium_sge() pr1506 H Spitzer; Refactor of scanpy.pl.spatial(). Better support for plotting without an image, as well as directly providing images pr1512 G Palla; Dict input for scanpy.queries.enrich() pr1488 G Eraslan; rank_genes_groups_df() can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once pr1388 G Eraslan; Color annotations for gene sets in heatmap() are now matched to color for cluster pr1511 L Sikkema; PCA plots can now annotate axes with variance explained pr1470 ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:30070,error,erroring,30070,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['error'],['erroring']
Availability," the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seurat’s guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seurat’s authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10360,Down,Download,10360,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['Down'],['Download']
Availability," to three optional arguments besides the raw counts:. Overdispersion parameter theta#; To compute Pearson residuals, we need an estimation of the technical variance in the data. There is still a debate on which noise distribution is most appropiate for scRNA UMI data, with Poisson or the Negative binomial being likely candidates. We implemented the negative binomial model here, which is overdispersed compared to Poisson. The amount of overdispersion is controlled by the argument theta, where a smaller theta corresponds to larger overdispersion. Lause et al. (2021) recommend using the default theta=100, as noise in negative control data without biological variation was fit well by this value. If Poisson behavior is desired, the overdispersion parameter can instead be set to infinity (theta=np.Inf). Clipping threshold clip#; When a gene is expressed in only very few cells, and missing in all others, it will generate very large residuals for these few cells. In turn, these cells might dominate in downstream processing. To avoid such unbalanced behavior, Hafemeister & Satija (2019) introduced a heuristic that clips all residuals to +-sqrt(n_cells). This is the default behavior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable ge",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:28372,down,downstream,28372,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['down'],['downstream']
Availability,", legend_loc=""on data"", title="""", frameon=False, save="".pdf""; ). WARNING: saving figure to file figures/umap.pdf. Now that we annotated the cell types, let us visualize the marker genes. sc.pl.dotplot(adata, marker_genes, groupby=""leiden"");. There is also a very compact violin plot. sc.pl.stacked_violin(adata, marker_genes, groupby=""leiden"");. During the course of this analysis, the AnnData accumlated the following annotations. adata. AnnData object with n_obs × n_vars = 2638 × 1838; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'leiden'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'mean', 'std'; uns: 'hvg', 'leiden', 'leiden_colors', 'log1p', 'neighbors', 'pca', 'rank_genes_groups', 'umap'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'connectivities', 'distances'. # `compression='gzip'` saves disk space, and slightly slows down writing and subsequent reading; adata.write(results_file, compression=""gzip""). Get a rough overview of the file using h5ls, which has many options - for more details see here. The file format might still be subject to further optimization in the future. All reading functions will remain backwards-compatible, though.; If you want to share this file with people who merely want to use it for visualization, a simple way to reduce the file size is by removing the dense scaled and corrected data matrix. The file still contains the raw data used in the visualizations in adata.raw. adata.raw.to_adata().write(""./write/pbmc3k_withoutX.h5ad""). previous; Preprocessing and clustering. next; Integrating data using ingest and BBKNN. Contents; . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:25414,down,down,25414,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['down'],['down']
Availability,".cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Settings. Settings#; A convenience function for setting some default matplotlib.rcParams and a; high-resolution jupyter display backend useful for use in notebooks. set_figure_params; Set resolution/size, styling and format of figures. An instance of the ScanpyConfig is available as scanpy.settings and allows configuring Scanpy. _settings.ScanpyConfig; Config manager for scanpy. Some selected settings are discussed in the following.; Influence the global behavior of plotting functions. In non-interactive scripts,; you’d usually want to set settings.autoshow to False. autoshow; Automatically show figures if autosave == False (default True). autosave; Automatically save figures in figdir (default False). The default directories for saving figures, caching files and storing datasets. figdir; Directory for saving figures (default './figures/'). cachedir; Directory for cache files (default './cache/'). datasetdir; Directory for example datasets (default './data/'). The verbosity of logging output, where verbosity levels have the following; meaning: 0=’error’, 1=’warning’, 2=’info’, 3=’hint’, 4=more details, 5=even more; details, etc. verbosity; Verbosity level (default warning). Print versions of packages that might influence numerical results. logging.print_header; Versions that might influence the numerical results. logging.print_versions; Print versions of imported packages, OS, and jupyter environment. previous; scanpy.Neighbors.to_igraph. next; scanpy.set_figure_params. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/settings.html:10279,error,error,10279,en/stable/api/settings.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/settings.html,1,['error'],['error']
Availability,".external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering 3k PBMCs (legacy workflow). Contents . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seurat’s guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seurat’s authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_pa",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:9901,avail,available,9901,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['avail'],['available']
Availability,".scverse.org. GitHub ; Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments. https://github.com/scverse/scanpy. Other resources. Follow changes in the release notes.; Find tools that harmonize well with anndata & Scanpy at scverse.org/packages/; Check out our contribution guide for development practices.; Consider citing Genome Biology (2018) along with original references. News#. rapids-singlecell brings scanpy to the GPU! 2024-03-18#; rapids-singlecell by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. Scanpy hits 100 contributors! 2022-03-31#; 100 people have contributed to Scanpy’s source code!; Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it’s helped them accomplish.; Thanks to all our contributors for making this project possible!. New community channels 2022-03-31#; We’ve moved our forums and have a new publicly available chat!. Our discourse forum has migrated to a joint scverse forum (discourse.scverse.org).; Our private developer Slack has been replaced by a public Zulip chat (scverse.zulipchat.com). Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01#; Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. Muon, a framework for multimodal has been published in Genome Biology.; Squidpy a toolkit for working with spatial single cell data has been published in Nature Methods. (past news). next; Installation. Contents; . News; rapids-singlecell brings scanpy to the GPU! 2024-03-18; Scanpy hits 100 contributors! 2022-03-31; New community channels 2022-03-31; Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/index.html:11748,avail,available,11748,en/stable/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/index.html,1,['avail'],['available']
Availability,"4555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5ad cache file to speedup reading next time. To demonstrate that Pearson residuals select meaningful genes on these PBMC datasets, we will compare the gene selection to a set of marker genes that were identified in the PBMC3k tutorial. They map to PBMC cell types as follows:; ['IL7R', # CD4 T cells; 'LYZ', 'CD14', # CD14+ Monocytes; 'MS4A1', # B cells; 'CD8A', # CD8 T cells; 'GNLY', 'NKG7', # NK cells; 'FCGR3A', 'MS4A7', # FCGR3A+ Monocytes; 'FCER1A', 'CST3', # Dendritic Cells; 'PPBP'] # Megakaryocytes. A good gene selection should include these differentially expressed genes. # marker genes from table in pbmc3k tutorial; markers ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:12980,down,downloaded,12980,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['down'],['downloaded']
Availability,"67-018-07931-2. [Fec18]; Ron Fechtner. Pypairs - a python scrna-seq classifier. rfechtner/pypairs, 2018. URL: rfechtner/pypairs. [FR91]; Thomas M. J. Fruchterman and Edward M. Reingold. Graph drawing by force‐directed placement. Software: Practice and Experience, 21(11):1129–1164, nov 1991. URL: https://doi.org/10.1002/spe.4380211102, doi:10.1002/spe.4380211102. [GCC00]; Timothy S. Gardner, Charles R. Cantor, and James J. Collins. Construction of a genetic toggle switch in escherichia coli. Nature, 403(6767):339–342, jan 2000. URL: https://doi.org/10.1038/35002131, doi:10.1038/35002131. [HBT15]; Laleh Haghverdi, Florian Buettner, and Fabian J. Theis. Diffusion maps for high-dimensional single-cell analysis of differentiation data. Bioinformatics, 31(18):2989–2998, may 2015. URL: https://doi.org/10.1093/bioinformatics/btv325, doi:10.1093/bioinformatics/btv325. [HBW+16]; Laleh Haghverdi, Maren Büttner, F Alexander Wolf, Florian Buettner, and Fabian J Theis. Diffusion pseudotime robustly reconstructs lineage branching. Nature Methods, 13(10):845–848, aug 2016. URL: https://doi.org/10.1038/nmeth.3971, doi:10.1038/nmeth.3971. [HLMM18]; Laleh Haghverdi, Aaron T L Lun, Michael D Morgan, and John C Marioni. Batch effects in single-cell rna-sequencing data are corrected by matching mutual nearest neighbors. Nature Biotechnology, 36(5):421–427, apr 2018. URL: https://doi.org/10.1038/nbt.4091, doi:10.1038/nbt.4091. [HBB19]; Brian Hie, Bryan Bryson, and Bonnie Berger. Efficient integration of heterogeneous single-cell transcriptomes using scanorama. Nature Biotechnology, 37(6):685–691, may 2019. URL: https://doi.org/10.1038/s41587-019-0113-3, doi:10.1038/s41587-019-0113-3. [IKM+11]; Saiful Islam, Una Kjällquist, Annalena Moliner, Pawel Zajac, Jian-Bing Fan, Peter Lönnerberg, and Sten Linnarsson. Characterization of the single-cell transcriptional landscape by highly multiplex rna-seq. Genome Research, 21(7):1160–1167, may 2011. URL: https://doi.org/10.1101/gr.110882.110, doi:10",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:13790,robust,robustly,13790,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['robust'],['robustly']
Availability,"; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_dotplot. Contents . rank_genes_groups_dotplot(). scanpy.pl.rank_genes_groups_dotplot#. scanpy.pl.rank_genes_groups_dotplot(adata, groups=None, *, n_genes=None, groupby=None, values_to_plot=None, var_names=None, gene_symbols=None, min_logfoldchange=None, key=None, show=None, save=None, return_fig=False, **kwds)[source]#; Plot ranking of genes using dotplot plot (see dotplot()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Setting this option allows; alternative names to be used. groupby str | None (default: None)The key of the observation grouping to consider. By default,; the groupby is chosen from the rank genes groups parameter but; other groupby options can be used. It is expected that; groupby is a categorical. If groupby is not a categorical observation,; it would be subdivided into num_categories (see dotplot()). min_logfoldchange float | None (default: None)Value to filter genes in groups if their logfoldchange is less than the; min_logfoldchange. key str | None (default: None)Key used to store the ranking results in adata.uns. values_to_plot Optional[Literal['scores', 'logfoldchanges', 'pvals', 'pvals_adj', 'log10_pvals', 'log10_pvals_adj",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html:9911,down,down,9911,en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html,1,['down'],['down']
Availability,"; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_tracksplot. Contents . rank_genes_groups_tracksplot(). scanpy.pl.rank_genes_groups_tracksplot#. scanpy.pl.rank_genes_groups_tracksplot(adata, groups=None, *, n_genes=None, groupby=None, var_names=None, gene_symbols=None, min_logfoldchange=None, key=None, show=None, save=None, **kwds)[source]#; Plot ranking of genes using heatmap plot (see heatmap()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Setting this option allows; alternative names to be used. groupby str | None (default: None)The key of the observation grouping to consider. By default,; the groupby is chosen from the rank genes groups parameter but; other groupby options can be used. It is expected that; groupby is a categorical. If groupby is not a categorical observation,; it would be subdivided into num_categories (see dotplot()). min_logfoldchange float | None (default: None)Value to filter genes in groups if their logfoldchange is less than the; min_logfoldchange. key str | None (default: None)Key used to store the ranking results in adata.uns. show bool | None (default: None)Show the plot, do not return axis. save bool | None (default: None)If True or a s",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html:9887,down,down,9887,en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html,1,['down'],['down']
Availability,"; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sortedcontainers 2.4.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 13:25. Reading the data#; We will use two Visium spatial transcriptomics dataset of the mouse brain (Sagittal), which are publicly available from the 10x genomics website.; The function datasets.visium_sge() downloads the dataset from 10x genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and visualize them.; When using your own Visium data, use Scanpy’s read_visium() function to import it. adata_spatial_anterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Anterior""; ); adata_spatial_posterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Posterior""; ). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Anterior/filtered_feature_bc_matrix.h5; (0:00:01); reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_bc_matrix.h5; (0:00:01). adata_spatial_anterior.var_names_make_unique(); adata_spatial_posterior.var_names_make_unique(); sc.pp.calculate_qc_metrics(adata_spatial_anterior, inplace=True); sc.pp.calculate_qc_metrics(adata_spatial_posterior, inplace=True). for name, adata in [; (""anterior"", adata",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:12929,down,downloads,12929,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['down'],['downloads']
Availability,"BMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seurat’s guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seurat’s authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # u",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10522,down,download,10522,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['down'],['download']
Availability,"Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_bc_matrix.h5; (0:00:01). adata_spatial_anterior.var_names_make_unique(); adata_spatial_posterior.var_names_make_unique(); sc.pp.calculate_qc_metrics(adata_spatial_anterior, inplace=True); sc.pp.calculate_qc_metrics(adata_spatial_posterior, inplace=True). for name, adata in [; (""anterior"", adata_spatial_anterior),; (""posterior"", adata_spatial_posterior),; ]:; fig, axs = plt.subplots(1, 4, figsize=(12, 3)); fig.suptitle(f""Covariates for filtering: {name}""). sns.histplot(adata.obs[""total_counts""], kde=False, ax=axs[0]); sns.histplot(; adata.obs[""total_counts""][adata.obs[""total_counts""] < 20000],; kde=False,; bins=40,; ax=axs[1],; ); sns.histplot(adata.obs[""n_genes_by_counts""], kde=False, bins=60, ax=axs[2]); sns.histplot(; adata.obs[""n_genes_by_counts""][adata.obs[""n_genes_by_counts""] < 4000],; kde=False,; bins=60,; ax=axs[3],; ). sc.datasets.visium_sge downloads the filtered visium dataset, the output of spaceranger that contains only spots within the tissue slice. Indeed, looking at standard QC metrics we can observe that the samples do not contain empty spots.; We proceed to normalize Visium counts data with the built-in normalize_total method from Scanpy, and detect highly-variable genes (for later). As discussed previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); no",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:14551,down,downloads,14551,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['down'],['downloads']
Availability,"a matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. Cells from the same batch must be; contiguously stored in adata. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_scanorama')The name of the field in adata.obsm where the integrated; embeddings will be stored after running this function. Defaults; to X_scanorama. knn int (default: 20)Number of nearest neighbors to use for matching. sigma float (default: 15)Correction smoothing parameter on Gaussian kernel. approx bool (default: True)Use approximate nearest neighbors with Python annoy;; greatly speeds up matching runtime. alpha float (default: 0.1)Alignment score minimum cutoff. batch_size int (default: 5000)The batch size used in the alignment vector computation. Useful; when integrating very large (>100k samples) datasets. Set to; large value that runs within available memory. kwargsAny additional arguments will be passed to; scanorama.assemble(). Return type:; None. Returns:; Updates adata with the field adata.obsm[adjusted_basis],; containing Scanorama embeddings such that different experiments; are integrated. Example; First, load libraries and example dataset, and preprocess.; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.recipe_zheng17(adata); >>> sc.pp.pca(adata). We now arbitrarily assign a batch metadata variable to each cell; for the sake of example, but during real usage there would already; be a column in adata.obs giving the experiment each cell came; from.; >>> adata.obs['batch'] = 1350*['a'] + 1350*['b']. Finally, run Scanorama. Afterwards, there will be a new table in; adata.obsm containing the Scanorama embeddings.; >>> sce.pp.scanorama_integrate(adata, 'batch', verbose=1); Processing datasets a <=> b; >>> 'X_scanorama' in adata.obsm; True. previous; scanpy.",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:10990,avail,available,10990,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,1,['avail'],['available']
Availability,"a sequence containing the size for each cell. The order should be; the same as in adata.obs. color_map Colormap | str | None (default: None)Color map to use for continous variables. Can be a name or a; Colormap instance (e.g. ""magma”, ""viridis""; or mpl.cm.cividis), see get_cmap().; If None, the value of mpl.rcParams[""image.cmap""] is used.; The default color_map can be set using set_figure_params(). palette str | Sequence[str] | Cycler | None (default: None)Colors to use for plotting categorical annotation groups.; The palette can be a valid ListedColormap name; ('Set2', 'tab20', …), a Cycler object, a dict mapping; categories to colors, or a sequence of colors. Colors must be valid to; matplotlib. (see is_color_like()).; If None, mpl.rcParams[""axes.prop_cycle""] is used unless the categorical; variable already has colors stored in adata.uns[""{var}_colors""].; If provided, values of adata.uns[""{var}_colors""] will be set. na_color Union[str, tuple[float, ...]] (default: 'lightgray')Color to use for null or masked values. Can be anything matplotlib accepts as a; color. Used for all points if color=None. na_in_legend bool (default: True)If there are missing values, whether they get an entry in the legend. Currently; only implemented for categorical legends. frameon bool | None (default: None)Draw a frame around the scatter plot. Defaults to value set in; set_figure_params(), defaults to True. title str | Sequence[str] | None (default: None)Provide title for panels either as string or list of strings,; e.g. ['title1', 'title2', ...]. vmin Union[str, float, Callable[[Sequence[float]], float], Sequence[Union[str, float, Callable[[Sequence[float]], float]]], None] (default: None)The value representing the lower limit of the color scale. Values smaller than vmin are plotted; with the same color as vmin. vmin can be a number, a string, a function or None. If; vmin is a string and has the format pN, this is interpreted as a vmin=percentile(N).; For example vmin=’p1.5’ is interpr",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html:14792,mask,masked,14792,en/stable/generated/scanpy.external.pl.phate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html,8,['mask'],['masked']
Availability,"al.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.downsample_counts. Contents . downsample_counts(). scanpy.pp.downsample_counts#. scanpy.pp.downsample_counts(adata, counts_per_cell=None, total_counts=None, *, random_state=0, replace=False, copy=False)[source]#; Downsample counts from count matrix.; If counts_per_cell is specified, each cell will downsampled.; If total_counts is specified, expression matrix will be downsampled to; contain at most total_counts. Parameters:. adata AnnDataAnnotated data matrix. counts_per_cell int | Collection[int] | None (default: None)Target total counts per cell. If a cell has more than ‘counts_per_cell’,; it will be downsampled to this number. Resulting counts can be specified; on a per cell basis by passing an array.Should be an integer or integer; ndarray with same length as number of obs. total_counts int | None (default: None)Target total counts. If the count matrix has more than total_counts; it will be downsampled to have this number. random_state Union[int, RandomState, None] (default: 0)Random seed for subsampling. replace bool (default: False)Whether to sample the counts with replacement. copy bool (default: False)Determines whether a copy of adata is return",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html:9459,Down,Downsample,9459,en/stable/generated/scanpy.pp.downsample_counts.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html,1,['Down'],['Downsample']
Availability,"alantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tests. Contents . Running the tests; Miscellaneous tips. Writing tests; What to test; Performance; Plotting tests. Tests#; Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. Running the tests#; We use pytest to test scanpy.; To run the tests, simply run hatch test.; It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. Only run a subset of the tests.; This can be done by specifying paths or test name patterns using the -k argument (e.g. hatch test test_plotting.py or hatch test -k ""test_umap*""); Run the tests in parallel using the -n argument (e.g. hatch test -n 8). Miscellaneous tips#. A lot of warnings can be thrown while running the test suite.; It’s often easier to read the test results with them hidden via the --disable-pytest-warnings argument. Writing tests#; You can refer to the existing test suite for examples.; If you haven’t written tests before, Software Carpentry has an in-depth testing guide.; We highly recommend using Test-Driven Development when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function.; Consider parameterizing your tests using the pytest.mark.parameterize and pytest.fixture decorators.; You can read more about fixtures in pytest’s d",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/testing.html:9722,down,down,9722,en/stable/dev/testing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/testing.html,1,['down'],['down']
Availability,"am; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_stacked_violin. Contents . rank_genes_groups_stacked_violin(). scanpy.pl.rank_genes_groups_stacked_violin#. scanpy.pl.rank_genes_groups_stacked_violin(adata, groups=None, *, n_genes=None, groupby=None, gene_symbols=None, var_names=None, min_logfoldchange=None, key=None, show=None, save=None, return_fig=False, **kwds)[source]#; Plot ranking of genes using stacked_violin plot; (see stacked_violin()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Setting this option allows; alternative names to be used. groupby str | None (default: None)The key of the observation grouping to consider. By default,; the groupby is chosen from the rank genes groups parameter but; other groupby options can be used. It is expected that; groupby is a categorical. If groupby is not a categorical observation,; it would be subdivided into num_categories (see dotplot()). min_logfoldchange float | None (default: None)Value to filter genes in groups if their logfoldchange is less than the; min_logfoldchange. key str | None (default: None)Key used to store the ranking results in adata.uns. show bool | None (default: None)Show the plot, do not return axis. save bool | None (default: None)If True or a s",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html:9940,down,down,9940,en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html,1,['down'],['down']
Availability,"ame of dataset in Cell Browser, a string without special characters.; This is written to data_dir/cellbrowser.conf.; Ideally this is a short unique name for the dataset,; like ""pbmc3k"" or ""tabulamuris"". embedding_keys Iterable[str] | Mapping[str, str] | str | None (default: None)2-D embeddings in adata.obsm to export.; The prefix X_ or X_draw_graph_ is not necessary.; Coordinates missing from adata are skipped.; By default (or when specifying 'all' or None), these keys are tried:; [""tsne"", ""umap"", ""pagaFa"", ""pagaFr"", ""pagaUmap"", ""phate"",; ""fa"", ""fr"", ""kk"", ""drl"", ""rt"", ""trimap""].; For these, default display labels are automatically used.; For other values, you can specify a mapping from coordinate name to; display label, e.g. {""tsne"": ""t-SNE by Scanpy""}. annot_keys Iterable[str] | Mapping[str, str] | None (default: ('louvain', 'percent_mito', 'n_genes', 'n_counts'))Annotations in adata.obsm to export.; Can be a mapping from annotation column name to display label.; Specify None for all available columns in .obs. skip_matrix bool (default: False)Do not export the matrix.; If you had previously exported this adata into the same data_dir,; then there is no need to export the whole matrix again.; This option will make the export a lot faster,; e.g. when only coordinates or meta data were changed. html_dir Path | str | None (default: None)If this variable is set, the export will build html; files from data_dir to html_dir, creating html/js/json files.; Usually there is one global html output directory for all datasets.; Often, html_dir is located under a webserver’s (like Apache); htdocs directory or is copied to one.; A directory html_dir/project_name will be created and; an index.html will be created under html_dir for all subdirectories.; Existing files will be overwritten.; If do not to use html_dir,; you can use the command line tool cbBuild to build the html directory. port int | None (default: None)If this variable and html_dir are set,; Python’s built-in web serve",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.cellbrowser.html:11540,avail,available,11540,en/stable/generated/scanpy.external.exporting.cellbrowser.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.cellbrowser.html,1,['avail'],['available']
Availability,"anpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering 3k PBMCs (legacy workflow). Contents . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seurat’s guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seurat’s authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10016,down,download,10016,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['down'],['download']
Availability,"anpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. Search. Error; Please activate JavaScript to enable the search functionality. Ctrl+K. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/search.html:9211,Error,Error,9211,en/stable/search.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/search.html,1,['Error'],['Error']
Availability,"antir.utils.run_magic_imputation. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields:. Diffusion maps,used for magic imputation, and to generate multi-scale data matrix,. X_palantir_diff_comp - ndarray (obsm, dtype float)Array of Diffusion components. palantir_EigenValues - ndarray (uns, dtype float)Array of corresponding eigen values. palantir_diff_op - spmatrix (obsp, dtype float)The diffusion operator matrix. Multi scale space results,used to build tsne on diffusion components, and to compute branch probabilities; and waypoints,. X_palantir_multiscale - ndarray (obsm, dtype float)Multi scale data matrix. MAGIC imputation,used for plotting gene expression on tsne, and gene expression trends,. palantir_imp - ndarray (layers, dtype float)Imputed data matrix (MAGIC imputation). Example; >>> import scanpy.external as sce; >>> import scanpy as sc. A sample data is available here.; Load sample data; >>> adata = sc.read_csv(filename=""Palantir/data/marrow_sample_scseq_counts.csv.gz""). Cleanup and normalize; >>> sc.pp.filter_cells(adata, min_counts=1000); >>> sc.pp.filter_genes(adata, min_counts=10); >>> sc.pp.normalize_per_cell(adata); >>> sc.pp.log1p(adata). Data preprocessing; Palantir builds diffusion maps using one of two optional inputs:; Principal component analysis; >>> sc.pp.pca(adata, n_comps=300). or,; Nearist neighbors graph; >>> sc.pp.neighbors(adata, knn=30). Diffusion maps; Palantir determines the diffusion maps of the data as an estimate of the low; dimensional phenotypic manifold of the data.; >>> sce.tl.palantir(adata, n_components=5, knn=30). if pre-computed distances are to be used,; >>> sce.tl.palantir(; ... adata,; ... n_components=5,; ... knn=30,; ... use_adjacency_matrix=True,; ... distances_key=""distances"",; ... ). Visualizing Palantir results; tSNE visualization; important for Palantir!; Palantir constructs the tSNE map in",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:12050,avail,available,12050,en/stable/external/generated/scanpy.external.tl.palantir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html,1,['avail'],['available']
Availability,"ar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined on the same variables. var_names = adata_ref.var_names.intersection(adata.var_names); adata_ref = adata_ref[:, var_names]; adata = adata[:, var_names]. The model and graph (here PCA, neighbors, UMAP) trained on the reference data will explain the biological variation observed within it. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The manifold still looks",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:11228,error,errors,11228,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['error'],['errors']
Availability,"atasets distributed as h5ad 2020-04-01; Scanpy featured in Nature Biotechnoloogy 2020-02-01; Scanpy has been selected an “Essential open source software for science” by CZI 2019-11-14; Nature Biotechnology: A comparison of single-cell trajectory inference methods 2019-04-01; Science “Breakthrough of the Year 2018” 2018-12-01. News#. rapids-singlecell brings scanpy to the GPU! 2024-03-18#; rapids-singlecell by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. Scanpy hits 100 contributors! 2022-03-31#; 100 people have contributed to Scanpy’s source code!; Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it’s helped them accomplish.; Thanks to all our contributors for making this project possible!. New community channels 2022-03-31#; We’ve moved our forums and have a new publicly available chat!. Our discourse forum has migrated to a joint scverse forum (discourse.scverse.org).; Our private developer Slack has been replaced by a public Zulip chat (scverse.zulipchat.com). Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01#; Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. Muon, a framework for multimodal has been published in Genome Biology.; Squidpy a toolkit for working with spatial single cell data has been published in Nature Methods. scVelo on the cover of Nature Biotechnology 2020-12-01#; Scanpy’s counterpart for RNA velocity, scVelo, made it on the cover of Nature Biotechnology [tweet]. Scanpy selected among 20 papers for 20 years of Genome Biology 2020-08-01#; Genome Biology: Celebrating 20 Years of Genome Biology selected the initial Scanpy paper for the year 2018 among 20 papers for 20 years [tweet]. COVID-19 datasets distributed as h5ad 2020-04-0",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/news.html:10611,avail,available,10611,en/stable/news.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/news.html,1,['avail'],['available']
Availability,"ayer=None, obsm=None, mask_obs=None)[source]#; Scale data to unit variance and zero mean. Note; Variables (genes) that do not display any variation (are constant across; all observations) are retained and (for zero_center==True) set to 0; during this operation. In the future, they might be set to NaNs. Parameters:. data AnnData | spmatrix | ndarray | ArrayThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. zero_center bool (default: True)If False, omit zero-centering variables, which allows to handle sparse; input efficiently. max_value float | None (default: None)Clip (truncate) to this value after scaling. If None, do not clip. copy bool (default: False)Whether this function should be performed inplace. If an AnnData object; is passed, this also determines if a copy is returned. layer str | None (default: None)If provided, which element of layers to scale. obsm str | None (default: None)If provided, which element of obsm to scale. mask_obs ndarray[Any, dtype[bool]] | str | None (default: None)Restrict both the derivation of scaling parameters and the scaling itself; to a certain set of observations. The mask is specified as a boolean array; or a string referring to an array in obs.; This will transform data from csc to csr format if issparse(data). Return type:; AnnData | spmatrix | ndarray | Array | None. Returns:; Returns None if copy=False, else returns an updated AnnData object. Sets the following fields:. adata.X | adata.layers[layer]numpy.ndarray | scipy.sparse._csr.csr_matrix (dtype float)Scaled count data matrix. adata.var['mean']pandas.Series (dtype float)Means per gene before scaling. adata.var['std']pandas.Series (dtype float)Standard deviations per gene before scaling. adata.var['var']pandas.Series (dtype float)Variances per gene before scaling. previous; scanpy.pp.regress_out. next; scanpy.pp.subsample. Contents; . scale(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.scale.html:10523,mask,mask,10523,en/stable/generated/scanpy.pp.scale.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.scale.html,1,['mask'],['mask']
Availability,"bi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.compute_transitions. Contents . Neighbors.compute_transitions(). scanpy.Neighbors.compute_transitions#. Neighbors.compute_transitions(*, density_normalize=True)[source]#; Compute transition matrix. Parameters:. density_normalize bool (default: True)The density rescaling of Coifman and Lafon (2006): Then only the; geometry of the data matters, not the sampled density. Returns:; Makes attributes .transitions_sym and .transitions available. previous; scanpy.Neighbors.compute_neighbors. next; scanpy.Neighbors.getdoc. Contents; . Neighbors.compute_transitions(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_transitions.html:9693,avail,available,9693,en/stable/generated/scanpy.Neighbors.compute_transitions.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_transitions.html,1,['avail'],['available']
Availability,"but perform a basic transformation on the data matrix. Basic Preprocessing#; For visual quality control, see highest_expr_genes() and; filter_genes_dispersion() in scanpy.pl. pp.calculate_qc_metrics; Calculate quality control metrics. pp.filter_cells; Filter cell outliers based on counts and numbers of genes expressed. pp.filter_genes; Filter genes based on number of cells or counts. pp.highly_variable_genes; Annotate highly variable genes [Satija et al., 2015, Stuart et al., 2019, Zheng et al., 2017]. pp.log1p; Logarithmize the data matrix. pp.pca; Principal component analysis [Pedregosa et al., 2011]. pp.normalize_total; Normalize counts per cell. pp.regress_out; Regress out (mostly) unwanted sources of variation. pp.scale; Scale data to unit variance and zero mean. pp.subsample; Subsample to a fraction of the number of observations. pp.downsample_counts; Downsample counts from count matrix. Recipes#. pp.recipe_zheng17; Normalization and filtering as of Zheng et al. [2017]. pp.recipe_weinreb17; Normalization and filtering as of [Weinreb et al., 2017]. pp.recipe_seurat; Normalization and filtering as of Seurat [Satija et al., 2015]. Batch effect correction#; Also see [Data integration]. Note that a simple batch correction method is available via pp.regress_out(). Checkout scanpy.external for more. pp.combat; ComBat function for batch effect correction [Johnson et al., 2006, Leek et al., 2017, Pedersen, 2012]. Doublet detection#. pp.scrublet; Predict doublets using Scrublet [Wolock et al., 2019]. pp.scrublet_simulate_doublets; Simulate doublets by adding the counts of random observed transcriptome pairs. Neighbors#. pp.neighbors; Computes the nearest neighbors distance matrix and a neighborhood graph of observations [McInnes et al., 2018]. previous; API. next; scanpy.pp.calculate_qc_metrics. Contents; . Basic Preprocessing; Recipes; Batch effect correction; Doublet detection; Neighbors. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html:10875,avail,available,10875,en/stable/api/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html,1,['avail'],['available']
Availability,"canpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.pbmc3k. Contents . pbmc3k(). scanpy.datasets.pbmc3k#. scanpy.datasets.pbmc3k()[source]#; 3k PBMCs from 10x Genomics.; The data consists in 3k PBMCs from a Healthy Donor and is freely available; from 10x Genomics (file from this webpage).; The exact same data is also used in Seurat’s basic clustering tutorial. Note; This downloads 5.9 MB of data upon the first call of the function and stores it in; datasetdir/pbmc3k_raw.h5ad. The following code was run to produce the file.; adata = sc.read_10x_mtx(; # the directory with the `.mtx` file; './data/filtered_gene_bc_matrices/hg19/',; # use gene symbols for the variable names (variables-axis index); var_names='gene_symbols',; # write a cache file for faster subsequent reading; cache=True,; ). adata.var_names_make_unique() # this is unnecessary if using 'gene_ids'; adata.write('write/pbmc3k_raw.h5ad', compression='gzip'). Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.pbmc3k(); AnnData object with n_obs × n_vars = 2700 × 32738; var: 'gene_ids'. previous; scanpy.datasets.moignard15. next; scanpy.datasets.pbmc3k_processed. Contents; . pbmc3k(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k.html:9569,down,downloads,9569,en/stable/generated/scanpy.datasets.pbmc3k.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k.html,1,['down'],['downloads']
Availability,"ce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen flavor. sc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key=""sample""). sc.pl.highly_variable_genes(adata). Dimensionality Reduction#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function leiden() or tsne(). In our experience, there does not seem to be signifigant downside to overestimating the numer of principal components. sc.pl.pca_variance_ratio(adata, n_pcs=50, log=True). You can also plot the principal components to see if there are any potentially undesired features (e.g. batch, QC metrics) driving signifigant variation in this dataset. In this case, there isn’t anything too alarming, but it’s a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data co",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:15983,down,downside,15983,en/stable/tutorials/basics/clustering.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html,1,['down'],['downside']
Availability,"cinnes; Fixed non-determinism in scanpy.pl.paga() node positions pr1922 I Virshup. Ecosystem#. Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem. 1.8.1 2021-07-07#. Bug fixes#. Fixed reproducibility of scanpy.tl.score_genes(). Calculation and output is now float64 type. pr1890 I Kucinski; Workarounds for some changes/ bugs in pandas 1.3 pr1918 I Virshup; Fixed bug where sc.pl.paga_compare could mislabel nodes on the paga graph pr1898 I Virshup; Fixed handling of use_raw with scanpy.tl.rank_genes_groups() pr1934 I Virshup. 1.8.0 2021-06-28#. Metrics module#. Added scanpy.metrics module!. Added scanpy.metrics.gearys_c() for spatial autocorrelation pr915 I Virshup; Added scanpy.metrics.morans_i() for global spatial autocorrelation pr1740 I Virshup, G Palla; Added scanpy.metrics.confusion_matrix() for comparing labellings pr915 I Virshup. Features#. Added layer and copy kwargs to normalize_total() pr1667 I Virshup; Added vcenter and norm arguments to the plotting functions pr1551 G Eraslan; Standardized and expanded available arguments to the sc.pl.rank_genes_groups* family of functions. pr1529 F Ramirez I Virshup. See examples sections of rank_genes_groups_dotplot() and rank_genes_groups_matrixplot() for demonstrations. scanpy.tl.tsne() now supports the metric argument and records the passed parameters pr1854 I Virshup; scanpy.pl.scrublet_score_distribution() now uses same API as other scanpy functions for saving/ showing plots pr1741 J Manning. Ecosystem#. Added Cubé to ecosystem page pr1878 C Lambden; Added triku a feature selection method to the ecosystem page pr1722 AM Ascensión; Added dorothea and progeny to the ecosystem page pr1767 P Badia-i-Mompel. Documentation#. Added Community page to docs pr1856 I Virshup; Added rendered examples to many plotting functions issue1664 A Schaar L Zappia bio-la L Hetzel L Dony M Buttner K Hrovatin F Ramirez I Virshup LouisK92 mayarali; Integrated DocSearch, a find-as-you-type documentat",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:26545,avail,available,26545,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['avail'],['available']
Availability,"clipping of array in scale() pr3100 P Ashish & S Dicks. 1.10.1 2024-04-09#. Documentation#. Added how-to example on plotting with Marsilea pr2974 Y Zheng. Bug fixes#. Fix aggregate when aggregating by more than two groups pr2965 I Virshup. Performance#. scale() now uses numba kernels for sparse.csr_matrix and sparse.csc_matrix when zero_center==False and mask_obs is provided. This greatly speed up execution pr2942 S Dicks. 1.10.0 2024-03-26#; scanpy 1.10 brings a large amount of new features, performance improvements, and improved documentation.; Some highlights:. Improved support for out-of-core workflows via dask. See new tutorial: Using dask with Scanpy demonstrating counts-to-clusters for 1.4 million cells in <10 min.; A new basic clustering tutorial demonstrating an updated workflow.; Opt-in increased performance for neighbor search and clustering (how to guide).; Ability to mask observations or variables from a number of methods (see Customizing Scanpy plots for an example with plotting embeddings); A new function aggregate() for computing aggregations of your data, very useful for pseudo bulking!. Features#. scrublet() and scrublet_simulate_doublets() were moved from scanpy.external.pp to scanpy.pp. The scrublet implementation is now maintained as part of scanpy pr2703 P Angerer; scanpy.pp.pca(), scanpy.pp.scale(), scanpy.pl.embedding(), and scanpy.experimental.pp.normalize_pearson_residuals_pca() now support a mask parameter pr2272 C Bright, T Marcella, & P Angerer; Enhanced dask support for some internal utilities, paving the way for more extensive dask support pr2696 P Angerer; scanpy.pp.highly_variable_genes() supports dask for the default seurat and cell_ranger flavors pr2809 P Angerer; New function scanpy.get.aggregate() which allows grouped aggregations over your data. Useful for pseudobulking! pr2590 Isaac Virshup Ilan Gold Jon Bloom; scanpy.pp.neighbors() now has a transformer argument allowing the use of different ANN/ KNN libraries pr2536 P Angerer;",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:14517,mask,mask,14517,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['mask'],['mask']
Availability,"cosine'] (default: 'euclidean')Distance metric to define nearest neighbors. Note that performance will be; slower for correlation and cosine. n_jobs int (default: -1)Nearest Neighbors and Jaccard coefficients will be computed in parallel using; n_jobs. If 1 is given, no parallelism is used. If set to -1, all CPUs are used.; For n_jobs below -1, n_cpus + 1 + n_jobs are used. q_tol float (default: 0.001)Tolerance, i.e. precision, for monitoring modularity optimization. louvain_time_limit int (default: 2000)Maximum number of seconds to run modularity optimization. If exceeded the best; result so far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an iteration in which there was no; improvement. use_weights bool (default: True)Use vertices in the Leiden computation. seed int | None (default: None)Leiden initialization of the optimization. copy bool (default: False)Return a copy or write to adata. kargs AnyAdditional arguments passed to find_partition() and the; constructor of the partition_type. Return type:; tuple[ndarray | None, spmatrix, float | None] | None. Returns:; Depending on copy, returns or updates adata with the following fields:. communities - ndarray (obs, dtype int)integer array of ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:12276,avail,available,12276,en/stable/external/generated/scanpy.external.tl.phenograph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html,1,['avail'],['available']
Availability,"counts_mt. sc.pl.scatter(adata, ""total_counts"", ""n_genes_by_counts"", color=""pct_counts_mt""). Based on the QC metric plots, one could now remove cells that have too many mitochondrial genes expressed or too many total counts by setting manual or automatic thresholds. However, sometimes what appears to be poor QC metrics can be driven by real biology so we suggest starting with a very permissive filtering strategy and revisiting it at a later point. We therefore now only filter cells with less than 100 genes expressed and genes that are detected in less than 3 cells.; Additionally, it is important to note that for datasets with multiple batches, quality control should be performed for each sample individually as quality control thresholds can very substantially between batches. sc.pp.filter_cells(adata, min_genes=100); sc.pp.filter_genes(adata, min_cells=3). Doublet detection#; As a next step, we run a doublet detection algorithm. Identifying doublets is crucial as they can lead to misclassifications or distortions in downstream analysis steps. Scanpy contains the doublet detection method Scrublet [Wolock et al., 2019]. Scrublet predicts cell doublets using a nearest-neighbor classifier of observed transcriptomes and simulated doublets. scanpy.pp.scrublet() adds doublet_score and predicted_doublet to .obs. One can now either filter directly on predicted_doublet or use the doublet_score later during clustering to filter clusters with high doublet scores. sc.pp.scrublet(adata, batch_key=""sample""). We can remove doublets by either filtering out the cells called as doublets, or waiting until we’ve done a clustering pass and filtering out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:13375,down,downstream,13375,en/stable/tutorials/basics/clustering.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html,1,['down'],['downstream']
Availability,"d plotting method scrublet_score_distribution() pr1476 J Manning; hashsolo() for HTO demultiplexing [Bernstein et al., 2020] pr1432 NJ Bernstein; Added scirpy (sc-AIRR analysis) to ecosystem page pr1453 G Sturm; Added scvi-tools to ecosystem page pr1421 A Gayoso. External tools (changes)#. Updates for palantir() and palantir_results() pr1245 A Mousa; Fixes to harmony_timeseries() docs pr1248 A Mousa; Support for leiden clustering by scanpy.external.tl.phenograph() pr1080 A Mousa; Deprecate scanpy.external.pp.scvi pr1554 G Xing; Updated default params of sam() to work with larger data pr1540 A Tarashansky. Documentation#. New contribution guide pr1544 I Virshup; zsh installation instructions pr1444 P Angerer. Performance#. Speed up read_10x_h5() pr1402 P Weiler; Speed ups for obs_df() pr1499 F Ramirez. Bugfixes#. Consistent fold-change, fractions calculation for filter_rank_genes_groups pr1391 S Rybakov; Fixed bug where score_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integer dense arrays pr1400 I Virshup; Fix docstring formatting for rank_genes_groups() pr1417 P Weiler; Removed PendingDeprecationWarning`s from use of `np.matrix pr1424 P Weiler; Fixed indexing byg in ~scanpy.pp.highly_variable_genes pr1456 V Bergen; Fix default number of genes for marker_genes_overlap pr1464 MD Luecken; Fixed passing groupby and dendrogram_key to dendrogram() pr1465 M Varma; Fixed download path of pbmc3k_processed pr1472 D Strobl; Better error message when computing DE with a group of size 1 pr1490 J Manning; Update cugraph API usage for v0.16 pr1494 R Ilango; Fixed marker_gene_overlap default value for top_n_markers pr1464 MD Luecken; Pass random_state to RAPIDs UMAP pr1474 C Nolet; Fixed anndata version requirement for concat() (re-exported from scanpy as sc.concat) pr1491 I Virshup; Fixed the width of the progress bar when downloading data pr1507 M Klein; Updated link for moignard15 dataset pr1542 I Virshup; Fixed bug where calling set_figure_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:32668,error,error,32668,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['error'],['error']
Availability,"default: None)Use the layers attribute of adata if present: specify the layer for; x, y and color. If layers is a string, then it is expanded to; (layers, layers, layers). basis Optional[Literal['pca', 'tsne', 'umap', 'diffmap', 'draw_graph_fr']] (default: None)String that denotes a plotting tool that computed coordinates. sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Iterable[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Collection[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center']] (default: 'right margin')Location of legend, either 'on data', 'right margin', None,; or a valid keyword for the loc parameter of Legend. legend_fontsize Union[int, float, Literal['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'], None] (default: None)Numeric size in pt or string describing the size.; See set_fontsize(). legend_fontweight Union[int, Literal['light', 'normal', 'medium', 'semibold', 'bold', 'heavy', 'black'], None] (default: None)Legend font weight. A numeric value in range 0-1000 or a string.; Defaults to 'bold' if legend_loc == 'on data', otherwise to 'normal'.; See set_fontweight(). legend_fontoutline float | ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html:11334,avail,available,11334,en/stable/generated/scanpy.pl.scatter.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html,1,['avail'],['available']
Availability,"ding on {'.pdf', '.png', '.svg'}. ax _AxesSubplot | None (default: None)A matplotlib axes object. Only works if plotting a single component. vmin float | None (default: None)The value representing the lower limit of the color scale. Values smaller than vmin are plotted; with the same color as vmin. vmax float | None (default: None)The value representing the upper limit of the color scale. Values larger than vmax are plotted; with the same color as vmax. vcenter float | None (default: None)The value representing the center of the color scale. Useful for diverging colormaps. norm Normalize | None (default: None)Custom color normalization object from matplotlib. See; https://matplotlib.org/stable/tutorials/colors/colormapnorms.html for details. kwdsAre passed to matplotlib.pyplot.scatter(). Return type:; DotPlot | dict | None. Returns:; If return_fig is True, returns a DotPlot object,; else if show is false, return axes dict. See also. DotPlotThe DotPlot class can be used to to control several visual parameters not available in this function. rank_genes_groups_dotplot()to plot marker genes identified using the rank_genes_groups() function. Examples; Create a dot plot using the given markers and the PBMC example dataset grouped by; the category ‘bulk_labels’.; import scanpy as sc; adata = sc.datasets.pbmc68k_reduced(); markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; sc.pl.dotplot(adata, markers, groupby='bulk_labels', dendrogram=True). Using var_names as dict:; markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; sc.pl.dotplot(adata, markers, groupby='bulk_labels', dendrogram=True). Get DotPlot object for fine tuning; dp = sc.pl.dotplot(adata, markers, 'bulk_labels', return_fig=True); dp.add_totals().style(dot_edge_color='black', dot_edge_lw=0.5).show(). The axes used can be obtained using the get_axes() method; axes_dict = dp.get_axes(); print(axes_dict). previous; scanpy.pl.heatmap. next; scanpy.pl.tracksplot. Contents; . dotplot(). By Scanp",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dotplot.html:16679,avail,available,16679,en/stable/generated/scanpy.pl.dotplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dotplot.html,1,['avail'],['available']
Availability,"duals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seurat’s scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.uns[""name""] = ""PBMC 3k (v1)""; adata_pbmc10k.uns[""name""] = ""PBMC 10k (v3)"". ... writing an h5ad cache file to speedup reading next time; ... writing an h5",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:12366,down,download,12366,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['down'],['download']
Availability,"e (same as basis); and will be transformed by scale_factor.; If not provided, image is automatically cropped to bounds of basis,; plus a border. alpha_img float (default: 1.0)Alpha value for image. bw bool | None (default: False)Plot image data in gray scale. sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center']] (default: 'right margin')Location of legend, either 'on data', 'right margin', None,; or a valid keyword for the loc parameter of Legend. legend_fontsize Union[int, float, Literal['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'], None] (default: None)Numeric size in pt or string describing the size.; See set_fontsize(). legend_fontweight Union[int, Literal['light', 'normal', 'medium', 'semibold', 'bold', 'heavy', 'black']] (default: 'bold')Legend font weight. A numeric value in range 0-1000 or a string.; Defaults to 'bold' if legend_loc == 'on data', otherwise to 'normal'.; See set_fontweight(). legend_fontoutline int | None (",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html:13965,avail,available,13965,en/stable/api/generated/scanpy.pl.spatial.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html,1,['avail'],['available']
Availability,"e improvements, and improved documentation.; Some highlights:. Improved support for out-of-core workflows via dask. See new tutorial: Using dask with Scanpy demonstrating counts-to-clusters for 1.4 million cells in <10 min.; A new basic clustering tutorial demonstrating an updated workflow.; Opt-in increased performance for neighbor search and clustering (how to guide).; Ability to mask observations or variables from a number of methods (see Customizing Scanpy plots for an example with plotting embeddings); A new function aggregate() for computing aggregations of your data, very useful for pseudo bulking!. Features#. scrublet() and scrublet_simulate_doublets() were moved from scanpy.external.pp to scanpy.pp. The scrublet implementation is now maintained as part of scanpy pr2703 P Angerer; scanpy.pp.pca(), scanpy.pp.scale(), scanpy.pl.embedding(), and scanpy.experimental.pp.normalize_pearson_residuals_pca() now support a mask parameter pr2272 C Bright, T Marcella, & P Angerer; Enhanced dask support for some internal utilities, paving the way for more extensive dask support pr2696 P Angerer; scanpy.pp.highly_variable_genes() supports dask for the default seurat and cell_ranger flavors pr2809 P Angerer; New function scanpy.get.aggregate() which allows grouped aggregations over your data. Useful for pseudobulking! pr2590 Isaac Virshup Ilan Gold Jon Bloom; scanpy.pp.neighbors() now has a transformer argument allowing the use of different ANN/ KNN libraries pr2536 P Angerer; scanpy.experimental.pp.highly_variable_genes() using flavor='pearson_residuals' now uses numba for variance computation and is faster pr2612 S Dicks & P Angerer; scanpy.tl.leiden() now offers igraph’s implementation of the leiden algorithm via via flavor when set to igraph. leidenalg’s implementation is still default, but discouraged. pr2815 I Gold; scanpy.pp.highly_variable_genes() has new flavor seurat_v3_paper that is in its implementation consistent with the paper description in Stuart et al 2018.",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:15066,mask,mask,15066,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['mask'],['mask']
Availability,"e of two methods (see prune below). prune bool (default: False)prune=False, symmetrize by taking the average between the graph and its; transpose. prune=True, symmetrize by taking the product between the graph; and its transpose. min_cluster_size int (default: 10)Cells that end up in a cluster smaller than min_cluster_size are considered; outliers and are assigned to -1 in the cluster labels. jaccard bool (default: True)If True, use Jaccard metric between k-neighborhoods to build graph. If; False, use a Gaussian kernel. primary_metric Literal['euclidean', 'manhattan', 'correlation', 'cosine'] (default: 'euclidean')Distance metric to define nearest neighbors. Note that performance will be; slower for correlation and cosine. n_jobs int (default: -1)Nearest Neighbors and Jaccard coefficients will be computed in parallel using; n_jobs. If 1 is given, no parallelism is used. If set to -1, all CPUs are used.; For n_jobs below -1, n_cpus + 1 + n_jobs are used. q_tol float (default: 0.001)Tolerance, i.e. precision, for monitoring modularity optimization. louvain_time_limit int (default: 2000)Maximum number of seconds to run modularity optimization. If exceeded the best; result so far is returned. nn_method Literal['kdtree', 'brute'] (default: 'kdtree')Whether to use brute force or kdtree for nearest neighbor search.; For very large high-dimensional data sets, brute force, with parallel; computation, performs faster than kdtree. partition_type type[MutableVertexPartition] | None (default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:11709,Toler,Tolerance,11709,en/stable/external/generated/scanpy.external.tl.phenograph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html,1,['Toler'],['Tolerance']
Availability,"e; scanpy.pp.highly_variable_genes() now throws a warning instead of an error when non-integer values are passed for method ""seurat_v3"". The check can be skipped by passing check_values=False. pr1679 G Palla. Ecosystem#. Added triku a feature selection method to the ecosystem page pr1722 AM Ascensión; Added dorothea and progeny to the ecosystem page pr1767 P Badia-i-Mompel. 1.7.1 2021-02-24#. Documentation#. More twitter handles for core devs pr1676 G Eraslan. Bug fixes#. dendrogram() use 1 - correlation as distance matrix to compute the dendrogram pr1614 F Ramirez; Fixed obs_df()/ var_df() erroring when keys not passed pr1637 I Virshup; Fixed argument handling for scanpy.pp.scrublet() J Manning; Fixed passing of kwargs to scanpy.pl.violin() when stripplot was also used pr1655 M van den Beek; Fixed colorbar creation in scanpy.pl.timeseries_as_heatmap pr1654 M van den Beek. 1.7.0 2021-02-03#. Features#. Add new 10x Visium datasets to visium_sge() pr1473 G Palla; Enable download of source image for 10x visium datasets in visium_sge() pr1506 H Spitzer; Refactor of scanpy.pl.spatial(). Better support for plotting without an image, as well as directly providing images pr1512 G Palla; Dict input for scanpy.queries.enrich() pr1488 G Eraslan; rank_genes_groups_df() can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once pr1388 G Eraslan; Color annotations for gene sets in heatmap() are now matched to color for cluster pr1511 L Sikkema; PCA plots can now annotate axes with variance explained pr1470 bfurtwa; Plots with groupby arguments can now group by values in the index by passing the index’s name (like pd.DataFrame.groupby). pr1583 F Ramirez; Added na_color and na_in_legend keyword arguments to embedding() plots. Allows specifying color for missing or filtered values in plots like umap() or spatial() pr1356 I Virshup; embedding() plots now support passing dict of {cluster_name: cluster_color, ...} for palette",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:30455,down,download,30455,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['down'],['download']
Availability,"ed and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg19/"", # the directory with the `.mtx` file; var_names=""gene_symbols"", # use gene symbols for the variable names (variables-axis index); cache=True, # write a cache file for faster subsequent reading; ). ... reading from cache file cache/data-filtered_gene_bc_matrices-hg19-matrix.h5ad. Note; See anndata-tutorials/getting-started for a more co",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10795,error,errors,10795,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['error'],['errors']
Availability,"electing genes that vary strongly across batches pr622 G Eraslan. Bug fixes#. rank_genes_groups() t-test implementation doesn’t return NaN when variance is 0, also changed to scipy’s implementation pr621 I Virshup; umap() with init_pos='paga' detects correct dtype A Wolf; louvain() and leiden() auto-generate key_added=louvain_R upon passing restrict_to, which was temporarily changed in 1.4.1 A Wolf. Code design#. neighbors() and umap() got rid of UMAP legacy code and introduced UMAP as a dependency pr576 S Rybakov. 1.4.1 2019-04-26#. New functionality#. Scanpy has a command line interface again. Invoking it with scanpy somecommand [args] calls scanpy-somecommand [args], except for builtin commands (currently scanpy settings) pr604 P Angerer; ebi_expression_atlas() allows convenient download of EBI expression atlas I Virshup; marker_gene_overlap() computes overlaps of marker genes M Luecken; filter_rank_genes_groups() filters out genes based on fold change and fraction of cells expressing genes F Ramirez; normalize_total() replaces normalize_per_cell(), is more efficient and provides a parameter to only normalize using a fraction of expressed genes S Rybakov; downsample_counts() has been sped up, changed default value of replace parameter to False pr474 I Virshup; embedding_density() computes densities on embeddings pr543 M Luecken; palantir() interfaces Palantir [Setty et al., 2019] pr493 A Mousa. Code design#. .layers support of scatter plots F Ramirez; fix double-logarithmization in compute of log fold change in rank_genes_groups() A Muñoz-Rojas; fix return sections of docs P Angerer. Version 1.3#. 1.3.8 2019-02-05#. various documentation and dev process improvements; Added combat() function for batch effect correction [Johnson et al., 2006, Leek et al., 2017, Pedersen, 2012] pr398 M Lange. 1.3.7 2019-01-02#. API changed from import scanpy as sc to import scanpy.api as sc.; phenograph() wraps the graph clustering package Phenograph [Levine et al., 2015] thanks to ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:43267,down,download,43267,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['down'],['download']
Availability,"es Delvenne, and Mauricio Barahona. Random walks, markov processes and the multiscale modular organization of complex networks. IEEE Transactions on Network Science and Engineering, 1(2):76–90, jul 2014. URL: https://doi.org/10.1109/TNSE.2015.2391998, doi:10.1109/tnse.2015.2391998. [LBK21]; Jan Lause, Philipp Berens, and Dmitry Kobak. Analytic pearson residuals for normalization of single-cell rna-seq umi data. Genome Biology, sep 2021. URL: https://doi.org/10.1186/s13059-021-02451-7, doi:10.1186/s13059-021-02451-7. [LJP+17]; Jeffrey T. Leek, W. Evan Johnson, Hilary S. Parker, Elana J.Fertig, Andrew E. Jaffe, John D. Storey, Yuqing Zhang, and Leonardo Collado Torres. Sva. 2017. URL: https://bioconductor.org/packages/sva, doi:10.18129/B9.BIOC.SVA. [LSB+15]; Jacob H. Levine, Erin F. Simonds, Sean C. Bendall, Kara L. Davis, El-ad D. Amir, Michelle D. Tadmor, Oren Litvin, Harris G. Fienberg, Astraea Jager, Eli R. Zunder, Rachel Finck, Amanda L. Gedman, Ina Radtke, James R. Downing, Dana Pe’er, and Garry P. Nolan. Data-driven phenotypic dissection of aml reveals progenitor-like cells that correlate with prognosis. Cell, 162(1):184–197, jul 2015. URL: https://doi.org/10.1016/j.cell.2015.05.047, doi:10.1016/j.cell.2015.05.047. [LWT19]; Mohammad Lotfollahi, F. Alexander Wolf, and Fabian J. Theis. Scgen predicts single-cell perturbation responses. Nature Methods, 16(8):715–721, jul 2019. URL: https://doi.org/10.1038/s41592-019-0494-8, doi:10.1038/s41592-019-0494-8. [LBC+21]; Malte Luecken, Daniel Burkhardt, Robrecht Cannoodt, Christopher Lance, Aditi Agrawal, Hananeh Aliee, Ann Chen, Louise Deconinck, Angela Detweiler, Alejandro Granados, Shelly Huynh, Laura Isacco, Yang Kim, Dominik Klein, Bony De Kumar, Sunil Kuppasani, Heiko Lickert, Aaron McGeever, Joaquin Melgarejo, Honey Mekonen, Maurizio Morri, Michaela Müller, Norma Neff, Sheryl Paul, Bastian Rieck, Kaylie Schneider, Scott Steelman, Michael Sterr, Daniel Treacy, Alexander Tong, Alexandra-Chloe Villani, Guilin Wang, J",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:17711,Down,Downing,17711,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['Down'],['Downing']
Availability,"external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.downsample_counts. Contents . downsample_counts(). scanpy.pp.downsample_counts#. scanpy.pp.downsample_counts(adata, counts_per_cell=None, total_counts=None, *, random_state=0, replace=False, copy=False)[source]#; Downsample counts from count matrix.; If counts_per_cell is specified, each cell will downsampled.; If total_counts is specified, expression matrix will be downsampled to; contain at most total_counts. Parameters:. adata AnnDataAnnotated data matrix. counts_per_cell int | Collection[int] | None (default: None)Target total counts per cell. If a cell has more than ‘counts_per_cell’,; it will be downsampled to this number. Resulting counts can be specified; on a per cell basis by passing an array.Should be an integer or integer; ndarray with same length as number of obs. total_counts int | None (default: None)Target total counts. If the count matrix has more than total_counts; it will be downsampled to have this number. random_state Union[int, RandomState, None] (default: 0)Random seed for subsampling. replace bool (default: False)Whether to sample the counts with replacement. copy bool (default: False)Determines whether a copy of adata is returned. Return type:; AnnData | None. Returns:; Returns None if copy=False, else returns an AnnData object. Sets t",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html:9545,down,downsampled,9545,en/stable/generated/scanpy.pp.downsample_counts.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html,1,['down'],['downsampled']
Availability,"g on {'.pdf', '.png', '.svg'}. ax _AxesSubplot | None (default: None)A matplotlib axes object. Only works if plotting a single component. vmin float | None (default: None)The value representing the lower limit of the color scale. Values smaller than vmin are plotted; with the same color as vmin. vmax float | None (default: None)The value representing the upper limit of the color scale. Values larger than vmax are plotted; with the same color as vmax. vcenter float | None (default: None)The value representing the center of the color scale. Useful for diverging colormaps. norm Normalize | None (default: None)Custom color normalization object from matplotlib. See; https://matplotlib.org/stable/tutorials/colors/colormapnorms.html for details. kwdsAre passed to violinplot(). Return type:; StackedViolin | dict | None. Returns:; If return_fig is True, returns a StackedViolin object,; else if show is false, return axes dict. See also. StackedViolinThe StackedViolin class can be used to to control several visual parameters not available in this function. rank_genes_groups_stacked_violin()using the rank_genes_groups() function. Examples; Visualization of violin plots of a few genes grouped by the category bulk_labels:; import scanpy as sc; adata = sc.datasets.pbmc68k_reduced(); markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; sc.pl.stacked_violin(adata, markers, groupby='bulk_labels', dendrogram=True). Same visualization but passing var_names as dict, which adds a grouping of; the genes on top of the image:; markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; sc.pl.stacked_violin(adata, markers, groupby='bulk_labels', dendrogram=True). Get StackedViolin object for fine tuning; vp = sc.pl.stacked_violin(adata, markers, 'bulk_labels', return_fig=True); vp.add_totals().style(ylim=(0,5)).show(). The axes used can be obtained using the get_axes() method:; axes_dict = vp.get_axes(); print(axes_dict). previous; scanpy.pl.violin. next; scanpy.pl.matrixplot.",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.stacked_violin.html:16331,avail,available,16331,en/stable/generated/scanpy.pl.stacked_violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.stacked_violin.html,1,['avail'],['available']
Availability,"g the size for each cell. The order should be; the same as in adata.obs. color_map str | Colormap | None (default: None)Color map to use for continous variables. Can be a name or a; Colormap instance (e.g. ""magma”, ""viridis""; or mpl.cm.cividis), see get_cmap().; If None, the value of mpl.rcParams[""image.cmap""] is used.; The default color_map can be set using set_figure_params(). palette Union[Cycler, ListedColormap, str, tuple[float, ...], Sequence[Union[str, tuple[float, ...]]], None] (default: None)Colors to use for plotting categorical annotation groups.; The palette can be a valid ListedColormap name; ('Set2', 'tab20', …), a Cycler object, a dict mapping; categories to colors, or a sequence of colors. Colors must be valid to; matplotlib. (see is_color_like()).; If None, mpl.rcParams[""axes.prop_cycle""] is used unless the categorical; variable already has colors stored in adata.uns[""{var}_colors""].; If provided, values of adata.uns[""{var}_colors""] will be set. na_colorColor to use for null or masked values. Can be anything matplotlib accepts as a; color. Used for all points if color=None. na_in_legendIf there are missing values, whether they get an entry in the legend. Currently; only implemented for categorical legends. frameon bool | None (default: None)Draw a frame around the scatter plot. Defaults to value set in; set_figure_params(), defaults to True. title str | None (default: None)Provide title for panels either as string or list of strings,; e.g. ['title1', 'title2', ...]. show bool | None (default: None)Show the plot, do not return axis. save str | bool | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {'.pdf', '.png', '.svg'}. ax Axes | None (default: None)A matplotlib axes object. Only works if plotting a single component. Return type:; Axes | list[Axes] | None. Returns:; If show==False a Axes or a list of it. previous; Plotting: pl. next; scanpy.pl.heatmap. Contents;",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html:13713,mask,masked,13713,en/stable/generated/scanpy.pl.scatter.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html,1,['mask'],['masked']
Availability,"grate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.get.aggregate. Contents . aggregate(). scanpy.get.aggregate#. scanpy.get.aggregate(adata, by, func, *, axis=None, mask=None, dof=1, layer=None, obsm=None, varm=None)[source]#; Aggregate data matrix based on some categorical grouping.; This function is useful for pseudobulking as well as plotting.; Aggregation to perform is specified by func, which can be a single metric or a; list of metrics. Each metric is computed over the group and results in a new layer; in the output AnnData object.; If none of layer, obsm, or varm are passed in, X will be used for aggregation data. Parameters:. adata AnnDataAnnData to be aggregated. by str | Collection[str]Key of the column to be grouped-by. func Union[Literal['count_nonzero', 'mean', 'sum', 'var'], Iterable[Literal['count_nonzero', 'mean', 'sum', 'var']]]How to aggregate. axis Optional[Literal['obs', 0, 'var', 1]] (default: None)Axis on which to find group by column. mask ndarray[Any, dtype[bool]] | str | None (default: None)Boolean mask (or key to column containing mask) to apply along the axis. dof int (default: 1)Degrees of freedom for variance. Defaults to 1. layer str | None (default: None)",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.aggregate.html:9350,mask,mask,9350,en/stable/generated/scanpy.get.aggregate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.aggregate.html,1,['mask'],['mask']
Availability,"he chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functions’ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pears",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:30439,avail,available,30439,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['avail'],['available']
Availability,"ic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.ebi_expression_atlas. Contents . ebi_expression_atlas(). scanpy.datasets.ebi_expression_atlas#. scanpy.datasets.ebi_expression_atlas(accession, *, filter_boring=False)[source]#; Load a dataset from the EBI Single Cell Expression Atlas.; The atlas can be browsed online to find the accession you want.; Downloaded datasets are saved in the directory specified by; datasetdir. Parameters:. accession strDataset accession. Like E-GEOD-98816 or E-MTAB-4888.; This can be found in the url on the datasets page, for example E-GEOD-98816. filter_boring bool (default: False)Whether boring labels in .obs should be automatically removed, such as; labels with a single or n_obs distinct values. Return type:; AnnData. Returns:; Annotated data matrix. Example; >>> import scanpy as sc; >>> sc.datasets.ebi_expression_atlas(""E-MTAB-4888"") ; AnnData object with n_obs × n_vars = 2261 × 23899; obs: 'Sample Characteristic[organism]', 'Sample Characteristic Ontology Term[organism]', ..., 'Factor Value[cell type]', 'Factor Value Ontology Term[cell type]'. previous; scanpy.datasets.blobs. next; scanpy.datasets.krumsiek11. Contents; . ebi_expression_atlas(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.ebi_expression_atlas.html:9563,Down,Downloaded,9563,en/stable/generated/scanpy.datasets.ebi_expression_atlas.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.ebi_expression_atlas.html,1,['Down'],['Downloaded']
Availability,"iduals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations – and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the squar",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23291,down,downstream,23291,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['down'],['downstream']
Availability,"ies; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.magic. Contents . magic(). scanpy.external.pp.magic#. scanpy.external.pp.magic(adata, name_list=None, *, knn=5, decay=1, knn_max=None, t=3, n_pca=100, solver='exact', knn_dist='euclidean', random_state=None, n_jobs=None, verbose=False, copy=None, **kwargs)[source]#; Markov Affinity-based Graph Imputation of Cells (MAGIC) API [van Dijk et al., 2018].; MAGIC is an algorithm for denoising and transcript recover of single cells; applied to single-cell sequencing data. MAGIC builds a graph from the data; and uses diffusion to smooth out noise and recover the data manifold.; The algorithm implemented here has changed primarily in two ways; compared to the algorithm described in van Dijk et al. [2018]. Firstly, we use; the adaptive kernel described in Moon et al. [2019] for; improved stability. Secondly, data diffusion is applied; in the PCA space, rather than the data space, for speed and; memory improvements.; More information and bug reports; here. For help, visit; <https://krishnaswamylab.org/get-help>. Parameters:. adata AnnDataAn anndata file with .raw attribute representing raw counts. name_list Union[Literal['all_genes', 'pca_only'], Sequence[str], None] (default: None)Denoised genes to return. The default 'all_genes'/None; may require a large amount of memory if the input data is sparse.; Another possibility is 'pca_only'. knn int (default: 5)number of nearest neighbors on which to bui",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html:9656,recover,recover,9656,en/stable/generated/scanpy.external.pp.magic.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html,1,['recover'],['recover']
Availability,"ighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seurat’s guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seurat’s authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O data/pbmc3k_filtered_gene_bc_matrices.tar.gz; # !cd data; tar -xzf pbmc3k_filtered_gene_bc_matrices.tar.gz; # !mkdir write. Note; Download the notebook by clicking on the Edit on GitHub button. On GitHub, you can download using the Raw button via right-click and Save Link As. Alternatively, download the whole scanpy-tutorial repository. Note; In Jupyter notebooks and lab, you can see the documentation for a python function by hitting SHIFT + TAB. Hit it twice to expand the view. import pandas as pd; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. results_file = ""write/pbmc3k.h5ad"" # the file that will store the analysis results. Read in the count matrix into an AnnData object, which holds many slots for annotations and different representations of the data. It also comes with its own HDF5-based file format: .h5ad. adata = sc.read_10x_mtx(; ""data/filtered_gene_bc_matrices/hg1",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:10443,down,download,10443,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['down'],['download']
Availability,"ilename.; Infer the filetype if ending on {'.pdf', '.png', '.svg'}. ax _AxesSubplot | None (default: None)A matplotlib axes object. Only works if plotting a single component. vmin float | None (default: None)The value representing the lower limit of the color scale. Values smaller than vmin are plotted; with the same color as vmin. vmax float | None (default: None)The value representing the upper limit of the color scale. Values larger than vmax are plotted; with the same color as vmax. vcenter float | None (default: None)The value representing the center of the color scale. Useful for diverging colormaps. norm Normalize | None (default: None)Custom color normalization object from matplotlib. See; https://matplotlib.org/stable/tutorials/colors/colormapnorms.html for details. kwdsAre passed to matplotlib.pyplot.pcolor(). Return type:; MatrixPlot | dict[str, Axes] | None. Returns:; If return_fig is True, returns a MatrixPlot object,; else if show is false, return axes dict. See also. MatrixPlotThe MatrixPlot class can be used to to control several visual parameters not available in this function. rank_genes_groups_matrixplot()to plot marker genes identified using the rank_genes_groups() function. Examples; import scanpy as sc; adata = sc.datasets.pbmc68k_reduced(); markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; sc.pl.matrixplot(adata, markers, groupby='bulk_labels', dendrogram=True). Using var_names as dict:; markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; sc.pl.matrixplot(adata, markers, groupby='bulk_labels', dendrogram=True). Get Matrix object for fine tuning:; mp = sc.pl.matrixplot(adata, markers, 'bulk_labels', return_fig=True); mp.add_totals().style(edge_color='black').show(). The axes used can be obtained using the get_axes() method; axes_dict = mp.get_axes(). previous; scanpy.pl.stacked_violin. next; scanpy.pl.clustermap. Contents; . matrixplot(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.matrixplot.html:14858,avail,available,14858,en/stable/generated/scanpy.pl.matrixplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.matrixplot.html,1,['avail'],['available']
Availability,"ior of all functions for Pearson residuals discussed here. If desired, a different threshold can be set using the clip argument. If no clipping is desired, use clip=np.Inf. chunksize and best practice to obtain Pearson residuals for large datasets#; Raw scRNA UMI counts are usually sparse, and can thus be stored efficiently for large datasets. However, when the count matrix is transformed to Pearson residuals, the data becomes dense. To avoid memory problems, we recommend that you reduce the size of your count matrix by gene selection, before running normalize_pearson_residuals(adata) on the reduced data. To perform RAM-efficient gene selection, use highly_variable_genes(adata,flavor='pearson_residuals') with the chunksize argument: This will still use Pearson residual variance to identify variable genes, but won’t compute all residuals at once. Reduce the chunksize as needed if you run into RAM issues during gene selection. Note that a very small chunksize will slow down the computation, so try to set it as large as possible with your resources.; As an example, we used chunksize=1000 when processing a dataset with 2 million cells in a machine with 500 GB RAM. For smaller machines, we would recommend to reduce this below 100. Wrapper functions for Pearson residuals preprocessing#; The scanpy.experimental.pp module also ships two wrappers that run multiple pre-processing steps at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper fun",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:29533,down,down,29533,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['down'],['down']
Availability,"ject; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Trajectory inference for hematopoiesis in mouse. Contents . Preprocessing and Visualization; Optional: Denoising the graph; Clustering and PAGA; Recomputing the embedding using PAGA-initialization; Reconstructing gene changes along PAGA paths for a given set of genes. Trajectory inference for hematopoiesis in mouse#. See also; More examples for trajectory inference on complex datasets can be found in the; PAGA repository [Wolf et al., 2019], for instance, multi-resolution analyses of whole animals,; such as for planaria for data of Plass et al. [2018]. Reconstructing myeloid and erythroid differentiation for data of Paul et al. (2015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots per inch) yields small inline figures; sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. adata = sc.datasets.paul15(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. adata. AnnData object with n_obs × n_vars = 2730 × 3451 ; obs: 'paul15_clusters'; uns: 'iroot'. Let us work with a higher precision than the default ‘float32’ to ensure exactly the same results across different computational platforms. # this is not required and results will be comparable without it; adata.X = adata.X.astype(""float64""). Preprocessing and Visualization#; Apply a simple preprocessing recipe. sc.pp.recipe_zheng17(adata). running recipe zheng17; normalizing counts per cell; finished (0",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:10014,error,errors,10014,en/stable/tutorials/trajectories/paga-paul15.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html,1,['error'],['errors']
Availability,"l using the -n argument (e.g. hatch test -n 8). Miscellaneous tips#. A lot of warnings can be thrown while running the test suite.; It’s often easier to read the test results with them hidden via the --disable-pytest-warnings argument. Writing tests#; You can refer to the existing test suite for examples.; If you haven’t written tests before, Software Carpentry has an in-depth testing guide.; We highly recommend using Test-Driven Development when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function.; Consider parameterizing your tests using the pytest.mark.parameterize and pytest.fixture decorators.; You can read more about fixtures in pytest’s documentation, but we’d also recommend searching our test suite for existing usage. What to test#; If you’re not sure what to tests about your function, some ideas include:. Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see pytest.raises docs).; Are there input values which should cause your function to error?; Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; Can you place bounds on the values returned by your function?; Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; Are you optimizing a method? Check that it’s results are the same as a gold standard implementation. Performance#; It’s more important that you’re accurately testing the code works than it is that test suite runs quickly.; That said, it’s nice when the test suite runs fast.; You can check how long tests take to run by passing --durations=0 argu",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/testing.html:11010,error,error,11010,en/stable/dev/testing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/testing.html,1,['error'],['error']
Availability,"l.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.downsample_counts. Contents . downsample_counts(). scanpy.pp.downsample_counts#. scanpy.pp.downsample_counts(adata, counts_per_cell=None, total_counts=None, *, random_state=0, replace=False, copy=False)[source]#; Downsample counts from count matrix.; If counts_per_cell is specified, each cell will downsampled.; If total_counts is specified, expression matrix will be downsampled to; contain at most total_counts. Parameters:. adata AnnDataAnnotated data matrix. counts_per_cell int | Collection[int] | None (default: None)Target total counts per cell. If a cell has more than ‘counts_per_cell’,; it will be downsampled to this number. Resulting counts can be specified; on a per cell basis by passing an array.Should be an integer or integer; ndarray with same length as number of obs. total_counts int | None (default: None)Target total counts. If the count matrix has more than total_counts; it will be downsampled to have this number. random_state Union[int, RandomState, None] (default: 0)Random seed for subsampling. replace bool (default: False)Whether to sample the counts with replacement. copy bool (default: False)Determines whether a copy of adata is returned. Return type:; AnnData | None. Returns:; Returns None if copy=False, else returns an AnnData object. Sets the following fields:. adata.Xnumpy.ndarray | scipy.sparse.spmatrix (dtype float)Downsampled counts matrix. previous; scanpy.pp.subsample. next; scanpy.pp.recipe_zheng17. Contents; . downsample_counts(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html:9855,down,downsampled,9855,en/stable/generated/scanpy.pp.downsample_counts.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html,3,"['Down', 'down']","['Downsampled', 'downsampled']"
Availability,"le with dask arrays. 'tsqr'Only available with dask arrays. “tsqr”; algorithm from Benson et. al. (2013). Changed in version 1.9.3: Default value changed from 'arpack' to None. Changed in version 1.4.5: Default value changed from 'auto' to 'arpack'. Efficient computation of the principal components of a sparse matrix; currently only works with the 'arpack’ or 'lobpcg' solvers.; If X is a dask array, dask-ml classes PCA,; IncrementalPCA, or; TruncatedSVD will be used.; Otherwise their scikit-learn counterparts PCA,; IncrementalPCA, or; TruncatedSVD will be used. random_state Union[int, RandomState, None] (default: 0)Change to use different initial states for the optimization. return_info bool (default: False)Only relevant when not passing an AnnData:; see “Returns”. mask_var ndarray[Any, dtype[bool]] | str | None | Empty (default: _empty)To run only on a certain set of genes given by a boolean array; or a string referring to an array in var.; By default, uses .var['highly_variable'] if available, else everything. use_highly_variable bool | None (default: None)Whether to use highly variable genes only, stored in; .var['highly_variable'].; By default uses them if they have been determined beforehand. Deprecated since version 1.10.0: Use mask_var instead. layerLayer of adata to use as expression values. dtype Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]] (default: 'float32')Numpy data type string to which to convert the result. chunked bool (default: False)If True, perform an incremental PCA on segments of chunk_size.; The incremental PCA automatically zero centers and ignores settings of; random_seed and svd_solver. Uses sklearn IncrementalPCA or; dask-ml IncrementalPCA. If False, perform a full PCA and; use sklearn PCA or; dask-ml PCA. chunk_size int | None (default: None)Number of observations to include in each chunk.; Required if ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html:12474,avail,available,12474,en/stable/generated/scanpy.pp.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html,1,['avail'],['available']
Availability,"lo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.pbmc3k. Contents . pbmc3k(). scanpy.datasets.pbmc3k#. scanpy.datasets.pbmc3k()[source]#; 3k PBMCs from 10x Genomics.; The data consists in 3k PBMCs from a Healthy Donor and is freely available; from 10x Genomics (file from this webpage).; The exact same data is also used in Seurat’s basic clustering tutorial. Note; This downloads 5.9 MB of data upon the first call of the function and stores it in; datasetdir/pbmc3k_raw.h5ad. The following code was run to produce the file.; adata = sc.read_10x_mtx(; # the directory with the `.mtx` file; './data/filtered_gene_bc_matrices/hg19/',; # use gene symbols for the variable names (variables-axis index); var_names='gene_symbols',; # write a cache file for faster subsequent reading; cache=True,; ). adata.var_names_make_unique() # this is unnecessary if using 'gene_ids'; adata.write('write/pbmc3k_raw.h5ad', compression='gzip'). Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.pbmc3k(); AnnData object with n_obs × n_vars = 2700 × 32738; var: 'gene_ids'. previous; scanpy.datasets.moignard15. next; scanpy.datasets.pbmc3k_processed. Contents; . pbmc3k(). By Scanpy devel",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k.html:9430,avail,available,9430,en/stable/generated/scanpy.datasets.pbmc3k.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k.html,1,['avail'],['available']
Availability,"lts with them hidden via the --disable-pytest-warnings argument. Writing tests#; You can refer to the existing test suite for examples.; If you haven’t written tests before, Software Carpentry has an in-depth testing guide.; We highly recommend using Test-Driven Development when contributing code.; This not only ensures you have tests written, it often makes implementation easier since you start out with a specification for your function.; Consider parameterizing your tests using the pytest.mark.parameterize and pytest.fixture decorators.; You can read more about fixtures in pytest’s documentation, but we’d also recommend searching our test suite for existing usage. What to test#; If you’re not sure what to tests about your function, some ideas include:. Are there arguments which conflict with each other? Check that if they are both passed, the function throws an error (see pytest.raises docs).; Are there input values which should cause your function to error?; Did you add a helpful error message that recommends better outputs? Check that that error message is actually thrown.; Can you place bounds on the values returned by your function?; Are there different input values which should generate equivalent output (e.g. if an array is sparse or dense)?; Do you have arguments which should have orthogonal effects on the output? Check that they are independent. For example, if there is a flag for extended output, the base output should remain the same either way.; Are you optimizing a method? Check that it’s results are the same as a gold standard implementation. Performance#; It’s more important that you’re accurately testing the code works than it is that test suite runs quickly.; That said, it’s nice when the test suite runs fast.; You can check how long tests take to run by passing --durations=0 argument to pytest.; Hopefully your new tests won’t show up on top!; Some approaches to this include:. Is there a common setup/ computation happening in each test? Consider ca",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/testing.html:11102,error,error,11102,en/stable/dev/testing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/testing.html,3,['error'],['error']
Availability,"matrix that is not a tool. Other than tools, preprocessing steps usually don’t return an easily interpretable annotation, but perform a basic transformation on the data matrix. Basic Preprocessing#; For visual quality control, see highest_expr_genes() and; filter_genes_dispersion() in scanpy.pl. pp.calculate_qc_metrics; Calculate quality control metrics. pp.filter_cells; Filter cell outliers based on counts and numbers of genes expressed. pp.filter_genes; Filter genes based on number of cells or counts. pp.highly_variable_genes; Annotate highly variable genes [Satija et al., 2015, Stuart et al., 2019, Zheng et al., 2017]. pp.log1p; Logarithmize the data matrix. pp.pca; Principal component analysis [Pedregosa et al., 2011]. pp.normalize_total; Normalize counts per cell. pp.regress_out; Regress out (mostly) unwanted sources of variation. pp.scale; Scale data to unit variance and zero mean. pp.subsample; Subsample to a fraction of the number of observations. pp.downsample_counts; Downsample counts from count matrix. Recipes#. pp.recipe_zheng17; Normalization and filtering as of Zheng et al. [2017]. pp.recipe_weinreb17; Normalization and filtering as of [Weinreb et al., 2017]. pp.recipe_seurat; Normalization and filtering as of Seurat [Satija et al., 2015]. Batch effect correction#; Also see [Data integration]. Note that a simple batch correction method is available via pp.regress_out(). Checkout scanpy.external for more. pp.combat; ComBat function for batch effect correction [Johnson et al., 2006, Leek et al., 2017, Pedersen, 2012]. Doublet detection#. pp.scrublet; Predict doublets using Scrublet [Wolock et al., 2019]. pp.scrublet_simulate_doublets; Simulate doublets by adding the counts of random observed transcriptome pairs. Neighbors#. pp.neighbors; Computes the nearest neighbors distance matrix and a neighborhood graph of observations [McInnes et al., 2018]. previous; API. next; scanpy.pp.calculate_qc_metrics. Contents; . Basic Preprocessing; Recipes; Batch effect c",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html:10492,Down,Downsample,10492,en/stable/api/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html,1,['Down'],['Downsample']
Availability,"mponent analysis; >>> sc.pp.pca(adata, n_comps=300). or,; Nearist neighbors graph; >>> sc.pp.neighbors(adata, knn=30). Diffusion maps; Palantir determines the diffusion maps of the data as an estimate of the low; dimensional phenotypic manifold of the data.; >>> sce.tl.palantir(adata, n_components=5, knn=30). if pre-computed distances are to be used,; >>> sce.tl.palantir(; ... adata,; ... n_components=5,; ... knn=30,; ... use_adjacency_matrix=True,; ... distances_key=""distances"",; ... ). Visualizing Palantir results; tSNE visualization; important for Palantir!; Palantir constructs the tSNE map in the embedded space since these maps better; represent the differentiation trajectories.; >>> sc.tl.tsne(adata, n_pcs=2, use_rep='X_palantir_multiscale', perplexity=150). tsne by cell size; >>> sc.pl.tsne(adata, color=""n_counts""). Imputed gene expression visualized on tSNE maps; >>> sc.pl.tsne(; ... adata,; ... gene_symbols=['CD34', 'MPO', 'GATA1', 'IRF8'],; ... layer='palantir_imp',; ... color=['CD34', 'MPO', 'GATA1', 'IRF8']; ... ). Running Palantir; Palantir can be run by specifying an approximate early cell. While Palantir; automatically determines the terminal states, they can also be specified using the; termine_states parameter.; >>> start_cell = 'Run5_164698952452459'; >>> pr_res = sce.tl.palantir_results(; ... adata,; ... early_cell=start_cell,; ... ms_data='X_palantir_multiscale',; ... num_waypoints=500,; ... ). Note; A start_cell must be defined for every data set. The start cell for; this dataset was chosen based on high expression of CD34. At this point the returned Palantir object pr_res can be used for all downstream; analysis and plotting. Please consult this notebook; Palantir_sample_notebook.ipynb.; It provides a comprehensive guide to draw gene expression trends, amongst other; things. previous; scanpy.external.tl.phate. next; scanpy.external.tl.trimap. Contents; . palantir(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:14086,down,downstream,14086,en/stable/external/generated/scanpy.external.tl.palantir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html,1,['down'],['downstream']
Availability,"n by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functions’ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:31186,Down,Download,31186,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['Down'],['Download']
Availability,"n the monocytes and dendritic cell clusters, the new data is otherwise mapped relatively homogeneously.; The megakaryoctes are only present in adata_ref and no cells from adata map onto them. If interchanging reference data and query data, Megakaryocytes do not appear as a separate cluster anymore. This is an extreme case as the reference data is very small; but one should always question if the reference data contain enough biological variation to meaningfully accomodate query data. Using BBKNN#. sc.tl.pca(adata_concat). %%time; sc.external.pp.bbknn(adata_concat, batch_key=""batch"") # running bbknn 1.3.6. CPU times: user 1.67 s, sys: 749 ms, total: 2.42 s; Wall time: 324 ms. sc.tl.umap(adata_concat). sc.pl.umap(adata_concat, color=[""batch"", ""louvain""]). Also BBKNN doesn’t maintain the Megakaryocytes cluster. However, it seems to mix cells more homogeneously. Pancreas#; The following data has been used in the scGen paper [Lotfollahi et al., 2019], has been used here,; was curated here and can be downloaded from here (the BBKNN paper).; It contains data for human pancreas from 4 different studies [Baron et al., 2016, Muraro et al., 2016, Segerstolpe et al., 2016, Wang et al., 2016],; which have been used in the seminal papers on single-cell dataset integration [Butler et al., 2018, Haghverdi et al., 2018] and many times ever since. # note that this collection of batches is already intersected on the genes; adata_all = sc.read(; ""data/pancreas.h5ad"",; backup_url=""https://www.dropbox.com/s/qj1jlm9w10wmt0u/pancreas.h5ad?dl=1"",; ). adata_all.shape. (14693, 2448). Inspect the cell types observed in these studies. counts = adata_all.obs.celltype.value_counts(); counts. alpha 4214; beta 3354; ductal 1804; acinar 1368; not applicable 1154; delta 917; gamma 571; endothelial 289; activated_stellate 284; dropped 178; quiescent_stellate 173; mesenchymal 80; macrophage 55; PSC 54; unclassified endocrine 41; co-expression 39; mast 32; epsilon 28; mesenchyme 27; schwann 13; t_cell 7;",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:14416,down,downloaded,14416,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['down'],['downloaded']
Availability,"n-Whitney-U) test is very similar. We recommend using the latter in publications, see e.g., Sonison & Robinson (2018). You might also consider much more powerful differential testing packages like MAST, limma, DESeq2 and, for python, the recent diffxpy. sc.tl.rank_genes_groups(adata, ""leiden"", method=""wilcoxon""); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:03). Save the result. adata.write(results_file). As an alternative, let us rank genes using logistic regression. For instance, this has been suggested by Natranos et al. (2018). The essential difference is that here, we use a multi-variate appraoch whereas conventional differential tests are uni-variate. Clark et al. (2014) has more details. sc.tl.rank_genes_groups(adata, ""leiden"", method=""logreg"", max_iter=1000); sc.pl.rank_genes_groups(adata, n_genes=25, sharey=False). ranking genes; finished (0:00:32). With the exceptions of IL7R, which is only found by the t-test and FCER1A, which is only found by the other two appraoches, all marker genes are recovered in all approaches. Louvain Group; Markers; Cell Type. 0; IL7R; CD4 T cells. 1; CD14, LYZ; CD14+ Monocytes. 2; MS4A1; B cells. 3; CD8A; CD8 T cells. 4; GNLY, NKG7; NK cells. 5; FCGR3A, MS4A7; FCGR3A+ Monocytes. 6; FCER1A, CST3; Dendritic Cells. 7; PPBP; Megakaryocytes. Let us also define a list of marker genes for later reference. marker_genes = [; *[""IL7R"", ""CD79A"", ""MS4A1"", ""CD8A"", ""CD8B"", ""LYZ"", ""CD14""],; *[""LGALS3"", ""S100A8"", ""GNLY"", ""NKG7"", ""KLRB1""],; *[""FCGR3A"", ""MS4A7"", ""FCER1A"", ""CST3"", ""PPBP""],; ]. Reload the object that has been save with the Wilcoxon Rank-Sum test result. adata = sc.read(results_file). Show the 10 top ranked genes per cluster 0, 1, …, 7 in a dataframe. pd.DataFrame(adata.uns[""rank_genes_groups""][""names""]).head(5). 0; 1; 2; 3; 4; 5; 6; 7. 0; RPS12; CD74; LST1; NKG7; CCL5; LYZ; HLA-DPA1; PF4. 1; LDHB; CD79A; FCER1G; GZMB; NKG7; S100A9; HLA-DPB1; SDPR. 2; RPS25; HLA-DRA; AIF1; GNLY; CST7; S100A",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:21174,recover,recovered,21174,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['recover'],['recovered']
Availability,"nal.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_heatmap. Contents . rank_genes_groups_heatmap(). scanpy.pl.rank_genes_groups_heatmap#. scanpy.pl.rank_genes_groups_heatmap(adata, groups=None, *, n_genes=None, groupby=None, gene_symbols=None, var_names=None, min_logfoldchange=None, key=None, show=None, save=None, **kwds)[source]#; Plot ranking of genes using heatmap plot (see heatmap()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Setting this option allows; alternative names to be used. groupby str | None (default: None)The key of the observation grouping to consider. By default,; the groupby is chosen from the rank genes groups parameter but; other groupby options can be used. It is expected that; groupby is a categorical. If groupby is not a categorical observation,; it would be subdivided into num_categories (see dotplot()). min_logfoldchange float | None (default: None)Value to filter genes in groups if their logfoldchange is less than the; min_logfoldchange. key str | None (default: None)Key used to store the ranking results in adata.uns. show bool | None (default: None)Show the plot, do not return axis. save bool | None (default: None)If True or a s",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html:9872,down,down,9872,en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html,1,['down'],['down']
Availability,"nal.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Versioning. Contents . Semantic versioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. 1.7.x for the 1.7 release series).; For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs are assigned a patch version milestone such as 1.7.4.; Once the PR is approved and merged,",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:9588,down,down,9588,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,1,['down'],['down']
Availability,"nal.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.magic. Contents . magic(). scanpy.external.pp.magic#. scanpy.external.pp.magic(adata, name_list=None, *, knn=5, decay=1, knn_max=None, t=3, n_pca=100, solver='exact', knn_dist='euclidean', random_state=None, n_jobs=None, verbose=False, copy=None, **kwargs)[source]#; Markov Affinity-based Graph Imputation of Cells (MAGIC) API [van Dijk et al., 2018].; MAGIC is an algorithm for denoising and transcript recover of single cells; applied to single-cell sequencing data. MAGIC builds a graph from the data; and uses diffusion to smooth out noise and recover the data manifold.; The algorithm implemented here has changed primarily in two ways; compared to the algorithm described in van Dijk et al. [2018]. Firstly, we use; the adaptive kernel described in Moon et al. [2019] for; improved stability. Secondly, data diffusion is applied; in the PCA space, rather than the data space, for speed and; memory improvements.; More information and bug reports; here. For help, visit; <https://krishnaswamylab.org/get-help>. Parameters:. adata AnnDataAn anndata file with .raw attribute representing raw counts. name_list Union[Literal['all_genes', 'pca_only'], Sequence[str], None] (default: None)Denoised genes to return. The default 'all_genes'/None; may require a large amount of memory if the input data is sparse.; Another possibility is 'pca_only'. knn int (default: 5)number of nearest neighbors on which to build kernel. decay float | None (default: 1)sets decay rate of kernel tails.; If None, alpha decaying kernel is n",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html:9800,recover,recover,9800,en/stable/generated/scanpy.external.pp.magic.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html,1,['recover'],['recover']
Availability,"ng NA; pygments 2.17.2; pyparsing 3.1.1; pythonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 17:28. Reading the data#; We will use a Visium spatial transcriptomics dataset of the human lymphnode, which is publicly available from the 10x genomics website: link.; The function datasets.visium_sge() downloads the dataset from 10x Genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and percentage of mitochondrial read counts per sample.; When using your own Visium data, use sc.read_visium() function to import it. adata = sc.datasets.visium_sge(sample_id=""V1_Human_Lymph_Node""); adata.var_names_make_unique(); adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(adata, qc_vars=[""mt""], inplace=True). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Human_Lymph_Node/filtered_feature_bc_matrix.h5; (0:00:01). This is how the adata structure looks like for Visium data. adata. AnnData object with n_obs × n_vars = 4035 × 36601; obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts'",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:12375,avail,available,12375,en/stable/tutorials/spatial/basic-analysis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html,1,['avail'],['available']
Availability,"no biological differences between cells. We then only keep the deviations from this model, the residuals, as representation of the data.; This implicitly performs normalization by sequencing depth and variance stabilization: As the null model expects the technical sources of variance, they are removed from the data. In contrast, biological variance is preserved: The null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations – and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23130,down,downstream,23130,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['down'],['downstream']
Availability,"nsampling counts MD Luecken; default 'louvain_groups' are called 'louvain' A Wolf; 'X_diffmap' contains the zero component, plotting remains unchanged A Wolf. Version 0.4#. 0.4.4 2018-02-26#. embed cells using umap() [McInnes et al., 2018] pr92 G Eraslan; score sets of genes, e.g. for cell cycle, using score_genes() [Satija et al., 2015]:; notebook. 0.4.3 2018-02-09#. clustermap(): heatmap from hierarchical clustering,; based on seaborn.clustermap() [Waskom et al., 2016] A Wolf; only return matplotlib.axes.Axes in plotting functions of sc.pl; when show=False, otherwise None A Wolf. 0.4.2 2018-01-07#. amendments in PAGA and its plotting functions A Wolf. 0.4.0 2017-12-23#. export to SPRING [Weinreb et al., 2017] for interactive visualization of data:; spring tutorial S Wollock. Version 0.3#. 0.3.2 2017-11-29#. finding marker genes via rank_genes_groups_violin() improved,; see issue51 F Ramirez. 0.3.0 2017-11-16#. AnnData gains method concatenate() A Wolf; AnnData is available as the separate anndata package P Angerer, A Wolf; results of PAGA simplified A Wolf. Version 0.2#. 0.2.9 2017-10-25#. Initial release of the new trajectory inference method PAGA#. paga() computes an abstracted, coarse-grained (PAGA) graph of the neighborhood graph A Wolf; paga_compare() plot this graph next an embedding A Wolf; paga_path() plots a heatmap through a node sequence in the PAGA graph A Wolf. 0.2.1 2017-07-24#; Scanpy includes preprocessing, visualization, clustering, pseudotime and; trajectory inference, differential expression testing and simulation of gene; regulatory networks. The implementation efficiently deals with datasets of more; than one million cells. A Wolf, P Angerer. Version 0.1#. 0.1.0 2017-05-17#; Scanpy computationally outperforms and allows reproducing both the Cell Ranger; R kit’s; and most of Seurat’s; clustering workflows. A Wolf, P Angerer. previous; Ecosystem. next; Community. Contents; . Version 1.10; 1.10.3 2024-09-17; Bug fixes. 1.10.2 2024-06-25; Developm",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:51642,avail,available,51642,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['avail'],['available']
Availability,"nt | None (default: 1000)Minimum number of principal components to use. Specify None to use; pre-computed components. The higher the value the better to capture 85% of the; variance. n_jobs int (default: -2)Nearest Neighbors will be computed in parallel using n_jobs. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates .obsm, .obsp and .uns with the following:. X_harmony - ndarray (obsm, dtype float)force directed layout. harmony_aff - spmatrix (obsp, dtype float)affinity matrix. harmony_aff_aug - spmatrix (obsp, dtype float)augmented affinity matrix. harmony_timepoint_var - str (uns)The name of the variable passed as tp. harmony_timepoint_connections - ndarray (uns, dtype str)The links between time points. Example; >>> from itertools import product; >>> import pandas as pd; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce. Load AnnData; A sample with real data is available here.; Random data sets of three time points with two replicates each:; >>> adata_ref = sc.datasets.pbmc3k(); >>> start = [596, 615, 1682, 1663, 1409, 1432]; >>> adata = AnnData.concatenate(; ... *(adata_ref[i : i + 1000] for i in start),; ... join=""outer"",; ... batch_key=""sample"",; ... batch_categories=[f""sa{i}_Rep{j}"" for i, j in product((1, 2, 3), (1, 2))],; ... ); >>> time_points = adata.obs[""sample""].str.split(""_"", expand=True)[0]; >>> adata.obs[""time_points""] = pd.Categorical(; ... time_points, categories=['sa1', 'sa2', 'sa3']; ... ). Normalize and filter for highly expressed genes; >>> sc.pp.normalize_total(adata, target_sum=10000); >>> sc.pp.log1p(adata); >>> sc.pp.highly_variable_genes(adata, n_top_genes=1000, subset=True). Run harmony_timeseries; >>> sce.tl.harmony_timeseries(adata, tp=""time_points"", n_components=500). Plot time points:; >>> sce.pl.harmony_timeseries(adata). For further demonstration of Harmony visualizations please follow the notebook;",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:11768,avail,available,11768,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,1,['avail'],['available']
Availability,"of pl-generic marker genes and quality control. 1.2.0 2018-06-08. Version 1.1; 1.1.0 2018-06-01. Version 1.0; 1.0.0 2018-03-30; Major updates; Further updates. Version 0.4; 0.4.4 2018-02-26; 0.4.3 2018-02-09; 0.4.2 2018-01-07; 0.4.0 2017-12-23. Version 0.3; 0.3.2 2017-11-29; 0.3.0 2017-11-16. Version 0.2; 0.2.9 2017-10-25; Initial release of the new trajectory inference method PAGA. 0.2.1 2017-07-24. Version 0.1; 0.1.0 2017-05-17. Release notes#. Version 1.10#. 1.10.3 2024-09-17#. Bug fixes#. Prevent empty control gene set in score_genes() M Müller (pr2875); Fix subset=True of highly_variable_genes() when flavor is seurat or cell_ranger, and batch_key!=None E Roellin (pr3042); Add compatibility with numpy 2.0 P Angerer pr3065 and (pr3115); Fix legend_loc argument in scanpy.pl.embedding() not accepting matplotlib parameters P Angerer (pr3163); Fix dispersion cutoff in highly_variable_genes() in presence of NaNs P Angerer (pr3176); Fix axis labeling for swapped axes in rank_genes_groups_stacked_violin() Ilan Gold (pr3196); Upper bound dask on account of issuescverse/anndata#1579 Ilan Gold (pr3217); The fa2-modified package replaces forceatlas2 for the latter’s lack of maintenance A Alam (pr3220). 1.10.2 2024-06-25#. Development Process#. Add performance benchmarking pr2977 R Shrestha, P Angerer. Documentation#. Document several missing parameters in docstring pr2888 S Cheney; Fixed incorrect instructions in “testing” dev docs pr2994 I Virshup; Update marsilea tutorial to use group_ methods pr3001 I Virshup; Fixed citations pr3032 P Angerer; Improve dataset documentation pr3060 P Angerer. Bug fixes#. Compatibility with matplotlib 3.9 pr2999 I Virshup; Add clear errors where backed mode-like matrices (i.e., from sparse_dataset) are not supported pr3048 I gold; Write out full pca results when _choose_representation is called i.e., neighbors() without pca() pr3079 I gold; Fix deprecated use of .A with sparse matrices pr3084 P Angerer; Fix zappy support pr3089 P Angerer; F",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:12503,mainten,maintenance,12503,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['mainten'],['maintenance']
Availability,"of principal components to compute. Defaults to 50, or 1 - minimum; dimension size of selected representation. layer str | None (default: None)If provided, which element of layers to use for PCA. zero_center bool | None (default: True)If True, compute standard PCA from covariance matrix.; If False, omit zero-centering variables; (uses scikit-learn TruncatedSVD or; dask-ml TruncatedSVD),; which allows to handle sparse input efficiently.; Passing None decides automatically based on sparseness of the data. svd_solver str | None (default: None)SVD solver to use:. NoneSee chunked and zero_center descriptions to determine which class will be used.; Depending on the class and the type of X different values for default will be set.; If scikit-learn PCA is used, will give 'arpack',; if scikit-learn TruncatedSVD is used, will give 'randomized',; if dask-ml PCA or IncrementalPCA is used, will give 'auto',; if dask-ml TruncatedSVD is used, will give 'tsqr'. 'arpack'for the ARPACK wrapper in SciPy (svds()); Not available with dask arrays. 'randomized'for the randomized algorithm due to Halko (2009). For dask arrays,; this will use svd_compressed(). 'auto'chooses automatically depending on the size of the problem. 'lobpcg'An alternative SciPy solver. Not available with dask arrays. 'tsqr'Only available with dask arrays. “tsqr”; algorithm from Benson et. al. (2013). Changed in version 1.9.3: Default value changed from 'arpack' to None. Changed in version 1.4.5: Default value changed from 'auto' to 'arpack'. Efficient computation of the principal components of a sparse matrix; currently only works with the 'arpack’ or 'lobpcg' solvers.; If X is a dask array, dask-ml classes PCA,; IncrementalPCA, or; TruncatedSVD will be used.; Otherwise their scikit-learn counterparts PCA,; IncrementalPCA, or; TruncatedSVD will be used. random_state Union[int, RandomState, None] (default: 0)Change to use different initial states for the optimization. return_info bool (default: False)Only relevant w",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html:11220,avail,available,11220,en/stable/generated/scanpy.pp.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html,1,['avail'],['available']
Availability,"of vmin and vmax from the cenetr; # Adapted from https://stackoverflow.com/a/50003503; class MidpointNormalize(mcolors.Normalize):; def __init__(self, vmin=None, vmax=None, midpoint=0, clip=False):; self.midpoint = midpoint; mcolors.Normalize.__init__(self, vmin, vmax, clip). def __call__(self, value, clip=None):; value = np.array(value).astype(float); normalized_min = max(; 0.0,; 0.5; * (1.0 - abs((self.midpoint - self.vmin) / (self.midpoint - self.vmax))),; ); normalized_max = min(; 1.0,; 0.5; * (1.0 + abs((self.vmax - self.midpoint) / (self.midpoint - self.vmin))),; ); normalized_mid = 0.5; x, y = (; [self.vmin, self.midpoint, self.vmax],; [normalized_min, normalized_mid, normalized_max],; ); return np.ma.masked_array(np.interp(value, x, y)). # Add padding arround vmin and vmax as Colorbar sets value limits to round numbers below and; # above the vmin and vmax, respectively, which means that they can not be assigned the correct; # color with our nomalisation function that is limited to vmin and vmax; # However, this padding reduces the dynamic range as we set a broad padding and; # then later discard values that are not needed for the rounding up and down; # of the vmin and vmax on the Colorbar, respectively; vmin = adata.obs[""B_cell_score""].min(); vmax = adata.obs[""B_cell_score""].max(); vpadding = (vmax - vmin) * 0.2; norm = MidpointNormalize(vmin=vmin - vpadding, vmax=vmax + vpadding, midpoint=0); # Plot umap; fig = sc.pl.umap(; adata,; color=""B_cell_score"",; cmap=""coolwarm"",; s=20,; norm=norm,; return_fig=True,; show=False,; ); # Adjust Colorbar ylim to be just outside of vmin,vmax and not far outside of this range; # as the padding we set initially may be too broad; cmap_yticklabels = np.array([t._y for t in fig.axes[1].get_yticklabels()]); fig.axes[1].set_ylim(; max(cmap_yticklabels[cmap_yticklabels < vmin]),; min(cmap_yticklabels[cmap_yticklabels > vmax]),; ). adata.obs.drop(""B_cell_score"", axis=1, inplace=True). Colorblind friendly palettes#; There are dif",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:29398,down,down,29398,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,1,['down'],['down']
Availability,"oning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.dendrogram. Contents . dendrogram(). scanpy.tl.dendrogram#. scanpy.tl.dendrogram(adata, groupby, *, n_pcs=None, use_rep=None, var_names=None, use_raw=None, cor_method='pearson', linkage_method='complete', optimal_ordering=False, key_added=None, inplace=True)[source]#; Computes a hierarchical clustering for the given groupby categories.; By default, the PCA representation is used unless .X; has less than 50 variables.; Alternatively, a list of var_names (e.g. genes) can be given.; Average values of either var_names or components are used; to compute a correlation matrix.; The hierarchical clustering can be visualized using; scanpy.pl.dendrogram() or multiple other visualizations that can; include a dendrogram: matrixplot(),; heatmap(), dotplot(),; and stacked_violin(). Note; The computation of the hierarchical clustering is based on predefined; groups and not per cell. The correlation matrix is computed using by; default pearson but other methods are available. Parameters:. adata AnnDataAnnotated data matrix. n_pcs int | None (default: None)Use this many PCs. If n_pcs==0 use .X if use_rep is None. use_rep str | None (default: None)Use the indicated representation. 'X' or any key for .obsm is valid.; If None, the representation is chosen automatically:; For .n_vars < N_PCS (default: 50), .X is used, otherwise ‘X_pca’ is used.; If ‘X_pca’ is not present, it’s computed with default parameters or n_pcs if present. var_names Sequence[str] | None (default: None)List of var_names to use for computing the hierarchical clustering.; If var_names is given, then use_rep and n_pcs is ignored. use_raw bool | None (default: None)Only when var_names is not None.; Use raw attribute of adata if present. cor_method str (default: 'pearson')correlation method to use.; Options are ‘pearson’, ‘kendall’, and ‘spearman’. linkage_method str (default: 'complete')linkage method to use. See scipy.cluster.hierarchy.linkage()",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dendrogram.html:10203,avail,available,10203,en/stable/generated/scanpy.tl.dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dendrogram.html,1,['avail'],['available']
Availability,"ore_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integer dense arrays pr1400 I Virshup; Fix docstring formatting for rank_genes_groups() pr1417 P Weiler; Removed PendingDeprecationWarning`s from use of `np.matrix pr1424 P Weiler; Fixed indexing byg in ~scanpy.pp.highly_variable_genes pr1456 V Bergen; Fix default number of genes for marker_genes_overlap pr1464 MD Luecken; Fixed passing groupby and dendrogram_key to dendrogram() pr1465 M Varma; Fixed download path of pbmc3k_processed pr1472 D Strobl; Better error message when computing DE with a group of size 1 pr1490 J Manning; Update cugraph API usage for v0.16 pr1494 R Ilango; Fixed marker_gene_overlap default value for top_n_markers pr1464 MD Luecken; Pass random_state to RAPIDs UMAP pr1474 C Nolet; Fixed anndata version requirement for concat() (re-exported from scanpy as sc.concat) pr1491 I Virshup; Fixed the width of the progress bar when downloading data pr1507 M Klein; Updated link for moignard15 dataset pr1542 I Virshup; Fixed bug where calling set_figure_params could block if IPython was installed, but not used. pr1547 I Virshup; violin() no longer fails if .raw not present pr1548 I Virshup; spatial() refactoring and better handling of spatial data pr1512 G Palla; pca() works with chunked=True again pr1592 I Virshup; ingest() now works with umap-learn 0.5.0 pr1601 S Rybakov. Version 1.6#. 1.6.0 2020-08-15#; This release includes an overhaul of dotplot(), matrixplot(), and stacked_violin() (pr1210 F Ramirez), and of the internals of rank_genes_groups() (pr1156 S Rybakov). Overhaul of dotplot(), matrixplot(), and stacked_violin() pr1210 F Ramirez#. An overhauled tutorial Core plotting functions.; New plotting classes can be accessed directly (e.g., DotPlot) or using the return_fig param.; It is possible to plot log fold change and p-values in the rank_genes_groups_dotplot() family of functions.; Added ax parameter which allows embedding the plot in other images.; Added opti",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:33596,down,downloading,33596,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['down'],['downloading']
Availability,"org/10.7554/eLife.48994, doi:10.7554/elife.48994. [TWvE19]; V. A. Traag, L. Waltman, and N. J. van Eck. From louvain to leiden: guaranteeing well-connected communities. Scientific Reports, mar 2019. URL: https://doi.org/10.1038/s41598-019-41695-z, doi:10.1038/s41598-019-41695-z. [Tra15]; Vincent Traag. Louvain-igraph: v0.5.3. 2015. URL: https://zenodo.org/record/35117, doi:10.5281/ZENODO.35117. [Uly16]; Dmitry Ulyanov. Multicore-tsne. DmitryUlyanov/Multicore-TSNE, 2016. URL: DmitryUlyanov/Multicore-TSNE. [vdMH08]; Laurens van der Maaten and Geoffrey Hinton. Visualizing data using t-sne. Journal of Machine Learning Research, 9(86):2579–2605, 2008. URL: http://jmlr.org/papers/v9/vandermaaten08a.html. [vDSN+18]; David van Dijk, Roshan Sharma, Juozas Nainys, Kristina Yim, Pooja Kathail, Ambrose J. Carr, Cassandra Burdziak, Kevin R. Moon, Christine L. Chaffer, Diwakar Pattabiraman, Brian Bierie, Linas Mazutis, Guy Wolf, Smita Krishnaswamy, and Dana Pe’er. Recovering gene interactions from single-cell data using data diffusion. Cell, 174(3):716–729.e27, jul 2018. URL: https://doi.org/10.1016/j.cell.2018.05.061, doi:10.1016/j.cell.2018.05.061. [WGS+16]; Yue J. Wang, Maria L. Golson, Jonathan Schug, Daniel Traum, Chengyang Liu, Kumar Vivek, Craig Dorrell, Ali Naji, Alvin C. Powers, Kyong-Mi Chang, Markus Grompe, and Klaus H. Kaestner. Single-cell mass cytometry analysis of the human endocrine pancreas. Cell Metabolism, 24(4):616–626, oct 2016. URL: https://doi.org/10.1016/j.cmet.2016.09.007, doi:10.1016/j.cmet.2016.09.007. [WBDrewokane+16]; Michael Waskom, Olga Botvinnik, Drewokane, Paul Hobson, , David, Yaroslav Halchenko, Saulius Lukauskas, John B. Cole, Jordi Warmenhoven, Julian De Ruiter, Stephan Hoyer, Jake Vanderplas, Santi Villalba, Gero Kunter, Eric Quintero, Marcel Martin, Alistair Miles, Kyle Meyer, Tom Augspurger, Tal Yarkoni, Pete Bachant, Mike Williams, Constantine Evans, Clark Fitzgerald, , Brian, Daniel Wehner, Gregory Hitz, Erik Ziegler, Adel Qalieh, and Anto",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:26736,Recover,Recovering,26736,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['Recover'],['Recovering']
Availability,"ories within the key for sample; annotation, tuple needs to contain (obs_key, list_of_categories). key_added str (default: 'leiden')adata.obs key under which to add the cluster labels. adjacency spmatrix | None (default: None)Sparse adjacency matrix of the graph, defaults to neighbors connectivities. directed bool | None (default: None)Whether to treat the graph as directed or undirected. use_weights bool (default: True)If True, edge weights from the graph are used in the computation; (placing more emphasis on stronger edges). n_iterations int (default: -1)How many iterations of the Leiden clustering algorithm to perform.; Positive values above 2 define the total number of iterations to perform,; -1 has the algorithm run until it reaches its optimal clustering.; 2 is faster and the default for underlying packages. partition_type type[MutableVertexPartition] | None (default: None)Type of partition to use.; Defaults to RBConfigurationVertexPartition.; For the available options, consult the documentation for; find_partition(). neighbors_key str | None (default: None)Use neighbors connectivities as adjacency.; If not specified, leiden looks .obsp[‘connectivities’] for connectivities; (default storage place for pp.neighbors).; If specified, leiden looks; .obsp[.uns[neighbors_key][‘connectivities_key’]] for connectivities. obsp str | None (default: None)Use .obsp[obsp] as adjacency. You can’t specify both; obsp and neighbors_key at the same time. copy bool (default: False)Whether to copy adata or modify it inplace. flavor Literal['leidenalg', 'igraph'] (default: 'leidenalg')Which package’s implementation to use. **clustering_argsAny further arguments to pass to find_partition() (which in turn passes arguments to the partition_type); or igraph.Graph.community_leiden() from igraph. Return type:; AnnData | None. Returns:; Returns None if copy=False, else returns an AnnData object. Sets the following fields:. adata.obs['leiden' | key_added]pandas.Series (dtype category)Array o",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.leiden.html:11319,avail,available,11319,en/stable/generated/scanpy.tl.leiden.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.leiden.html,1,['avail'],['available']
Availability,"otplot#; The dotplot visualization is useful to get an overview of the genes that show differential expression. To make the resulting image more compact we will use n_genes=4 to show only the top 4 scoring genes. sc.pl.rank_genes_groups_dotplot(pbmc, n_genes=4). In order to get a better representation we can plot log fold changes instead of gene expression. Also, we want to focus on genes that have a log fold change >= 3 between the cell type expression and the rest of cells.; In this case we set values_to_plot='logfoldchanges' and min_logfoldchange=3.; Because log fold change is a divergent scale we also adjust the min and max to be plotted and use a divergent color map. Notice in the following plot that is rather difficult to distinguish between T-cell populations. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=4,; values_to_plot=""logfoldchanges"",; min_logfoldchange=3,; vmax=7,; vmin=-7,; cmap=""bwr"",; ). Focusing on particular groups#; Next, we use a dotplot focusing only on two groups (the groups option is also available for violin, heatmap and matrix plots). Here, we set n_genes=30 as in this case it will show all the genes that have a min_logfoldchange=4 up to 30. sc.pl.rank_genes_groups_dotplot(; pbmc,; n_genes=30,; values_to_plot=""logfoldchanges"",; min_logfoldchange=4,; vmax=7,; vmin=-7,; cmap=""bwr"",; groups=[""3"", ""7""],; ). Visualize marker genes using matrixplot#; For the following plot the we use the previously computed ‘scaled’ values (stored in layer scaled) and use a divergent color map. sc.pl.rank_genes_groups_matrixplot(; pbmc, n_genes=3, use_raw=False, vmin=-3, vmax=3, cmap=""bwr"", layer=""scaled""; ). Visualize marker genes using stacked violin plots#. sc.pl.rank_genes_groups_stacked_violin(pbmc, n_genes=3, cmap=""viridis_r""). Visualize marker genes using heatmap#. sc.pl.rank_genes_groups_heatmap(; pbmc,; n_genes=3,; use_raw=False,; swap_axes=True,; vmin=-3,; vmax=3,; cmap=""bwr"",; layer=""scaled"",; figsize=(10, 7),; show=False,; );. Showing 10 genes per ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:21804,avail,available,21804,en/stable/tutorials/plotting/core.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html,1,['avail'],['available']
Availability,"patibility with numpy 2.0 P Angerer pr3065 and (pr3115); Fix legend_loc argument in scanpy.pl.embedding() not accepting matplotlib parameters P Angerer (pr3163); Fix dispersion cutoff in highly_variable_genes() in presence of NaNs P Angerer (pr3176); Fix axis labeling for swapped axes in rank_genes_groups_stacked_violin() Ilan Gold (pr3196); Upper bound dask on account of issuescverse/anndata#1579 Ilan Gold (pr3217); The fa2-modified package replaces forceatlas2 for the latter’s lack of maintenance A Alam (pr3220). 1.10.2 2024-06-25#. Development Process#. Add performance benchmarking pr2977 R Shrestha, P Angerer. Documentation#. Document several missing parameters in docstring pr2888 S Cheney; Fixed incorrect instructions in “testing” dev docs pr2994 I Virshup; Update marsilea tutorial to use group_ methods pr3001 I Virshup; Fixed citations pr3032 P Angerer; Improve dataset documentation pr3060 P Angerer. Bug fixes#. Compatibility with matplotlib 3.9 pr2999 I Virshup; Add clear errors where backed mode-like matrices (i.e., from sparse_dataset) are not supported pr3048 I gold; Write out full pca results when _choose_representation is called i.e., neighbors() without pca() pr3079 I gold; Fix deprecated use of .A with sparse matrices pr3084 P Angerer; Fix zappy support pr3089 P Angerer; Fix dotplot group order with pandas 1.x pr3101 P Angerer. Performance#. sparse_mean_variance_axis now uses all cores for the calculations pr3015 S Dicks; pp.highly_variable_genes with flavor=seurat_v3 now uses a numba kernel pr3017 S Dicks; Speed up scrublet() pr3044 S Dicks and pr3056 P Angerer; Speed up clipping of array in scale() pr3100 P Ashish & S Dicks. 1.10.1 2024-04-09#. Documentation#. Added how-to example on plotting with Marsilea pr2974 Y Zheng. Bug fixes#. Fix aggregate when aggregating by more than two groups pr2965 I Virshup. Performance#. scale() now uses numba kernels for sparse.csr_matrix and sparse.csc_matrix when zero_center==False and mask_obs is provided. This gre",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:13005,error,errors,13005,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['error'],['errors']
Availability,"pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_matrixplot. Contents . rank_genes_groups_matrixplot(). scanpy.pl.rank_genes_groups_matrixplot#. scanpy.pl.rank_genes_groups_matrixplot(adata, groups=None, *, n_genes=None, groupby=None, values_to_plot=None, var_names=None, gene_symbols=None, min_logfoldchange=None, key=None, show=None, save=None, return_fig=False, **kwds)[source]#; Plot ranking of genes using matrixplot plot (see matrixplot()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Setting this option allows; alternative names to be used. groupby str | None (default: None)The key of the observation grouping to consider. By default,; the groupby is chosen from the rank genes groups parameter but; other groupby options can be used. It is expected that; groupby is a categorical. If groupby is not a categorical observation,; it would be subdivided into num_categories (see dotplot()). min_logfoldchange float | None (default: None)Value to filter genes in groups if their logfoldchange is less than the; min_logfoldchange. key str | None (default: None)Key used to store the ranking results in adata.uns. values_to_plot Optional[Literal['scores', 'logfoldchanges', 'pvals', 'pvals_adj', 'log10_pvals', 'log10_pvals_adj",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html:9932,down,down,9932,en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html,1,['down'],['down']
Availability,"print analysis and pathway enrichement pr2186 PB Mompel; dandelion for B-cell receptor analysis pr1953 Z Tuong; CIARA a feature selection tools for identifying rare cell types pr2175 M Stock. Bug fixes#. Fixed finding variables with use_raw=True and basis=None in scanpy.pl.scatter() pr2027 E Rice; Fixed scanpy.pp.scrublet() to address issue1957 FlMai and ensure raw counts are used for simulation; Functions in scanpy.datasets no longer throw OldFormatWarnings when using anndata 0.8 pr2096 I Virshup; Fixed use of scanpy.pp.neighbors() with method='rapids': RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. pr1828 M Zaslavsky; Removed pytables dependency by implementing read_10x_h5 with h5py due to installation errors on Windows pr2064; Fixed bug in scanpy.external.pp.hashsolo() where default value was set improperly pr2190 B Reiz; Fixed bug in scanpy.pl.embedding() functions where an error could be raised when there were missing values and large numbers of categories pr2187 I Virshup. Version 1.8#. 1.8.2 2021-11-3#. Documentation#. Update conda installation instructions pr1974 L Heumos. Bug fixes#. Fix plotting after scanpy.tl.filter_rank_genes_groups() pr1942 S Rybakov; Fix use_raw=None using anndata.AnnData.var_names if anndata.AnnData.raw; is present in scanpy.tl.score_genes() pr1999 M Klein; Fix compatibility with UMAP 0.5.2 pr2028 L Mcinnes; Fixed non-determinism in scanpy.pl.paga() node positions pr1922 I Virshup. Ecosystem#. Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem. 1.8.1 2021-07-07#. Bug fixes#. Fixed reproducibility of scanpy.tl.score_genes(). Calculation and output is now float64 type. pr1890 I Kucinski; Workarounds for some changes/ bugs in pandas 1.3 pr1918 I Virshup; Fixed bug where sc.pl.paga_compare could mislabel nodes on the paga graph pr1898 I Virshup; Fixed handling of use_raw with scanpy.tl.rank_genes_groups() pr1934 I Virshup. 1",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:25010,error,error,25010,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['error'],['error']
Availability,"py.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.n_jobs. Contents . ScanpyConfig.n_jobs. scanpy._settings.ScanpyConfig.n_jobs#. property ScanpyConfig.n_jobs: int[source]#; Default number of jobs/ CPUs to use for parallel computing.; Set to -1 in order to use all available cores.; Not all algorithms support special behavior for numbers < -1,; so make sure to leave this setting as >= -1. previous; scanpy._settings.ScanpyConfig.max_memory. next; scanpy._settings.ScanpyConfig.plot_suffix. Contents; . ScanpyConfig.n_jobs. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html:9489,avail,available,9489,en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html,1,['avail'],['available']
Availability,"r continous variables. If None, no colorbar; is added. sizePoint size. If None, is automatically computed as 120000 / n_cells.; Can be a sequence containing the size for each cell. The order should be; the same as in adata.obs. color_mapColor map to use for continous variables. Can be a name or a; Colormap instance (e.g. ""magma”, ""viridis""; or mpl.cm.cividis), see get_cmap().; If None, the value of mpl.rcParams[""image.cmap""] is used.; The default color_map can be set using set_figure_params(). paletteColors to use for plotting categorical annotation groups.; The palette can be a valid ListedColormap name; ('Set2', 'tab20', …), a Cycler object, a dict mapping; categories to colors, or a sequence of colors. Colors must be valid to; matplotlib. (see is_color_like()).; If None, mpl.rcParams[""axes.prop_cycle""] is used unless the categorical; variable already has colors stored in adata.uns[""{var}_colors""].; If provided, values of adata.uns[""{var}_colors""] will be set. na_colorColor to use for null or masked values. Can be anything matplotlib accepts as a; color. Used for all points if color=None. na_in_legendIf there are missing values, whether they get an entry in the legend. Currently; only implemented for categorical legends. frameonDraw a frame around the scatter plot. Defaults to value set in; set_figure_params(), defaults to True. titleProvide title for panels either as string or list of strings,; e.g. ['title1', 'title2', ...]. vminThe value representing the lower limit of the color scale. Values smaller than vmin are plotted; with the same color as vmin. vmin can be a number, a string, a function or None. If; vmin is a string and has the format pN, this is interpreted as a vmin=percentile(N).; For example vmin=’p1.5’ is interpreted as the 1.5 percentile. If vmin is function, then; vmin is interpreted as the return value of the function over the list of values to plot.; For example to set vmin tp the mean of the values to plot, def my_vmin(values): return; np.mean(",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html:11893,mask,masked,11893,en/stable/api/generated/scanpy.pl.pca_overview.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html,1,['mask'],['masked']
Availability,"r genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram options; Plot correlation. Core plotting functions#; Author: Fidel Ramírez; This tutorial explores the visualization possibilities of scanpy and is divided into three sections:. Scatter plots for embeddings (eg. UMAP, t-SNE); Identification of clusters using known marker genes; Visualization of differentially expressed genes. In this tutorial, we will use a dataset from 10x containing 68k cells from PBMC. Scanpy, includes in its distribution a reduced sample of this dataset consisting of only 700 cells and 765 highly variable genes. This dataset has been already preprocessed and UMAP computed.; In this tutorial, we will also use the following literature markers:. B-cell: CD79A, MS4A1; Plasma: IGJ (JCHAIN); T-cell: CD3D; NK: GNLY, NKG7; Myeloid: CST3, LYZ; Monocytes: FCGR3A; Dendritic: FCER1A. Scatter plots for embeddings#; With scanpy, scatter plots for tSNE, UMAP and several other embeddings are readily available using the sc.pl.tsne, sc.pl.umap etc. functions. See here the list of options.; Those functions access the data stored in adata.obsm. For example sc.pl.umap uses the information stored in adata.obsm['X_umap']. For more flexibility, any key stored in adata.obsm can be used with the generic function sc.pl.embedding. import scanpy as sc; from matplotlib.pyplot import rc_context. sc.set_figure_params(dpi=100, color_map=""viridis_r""); sc.settings.verbosity = 0; sc.logging.print_header(). scanpy==1.10.0rc2.dev6+g14555ba4.d20240226 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Load pbmc dataset#. pbmc = sc.datasets.pbmc68k_reduced(). # inspect pbmc contents; pbmc. AnnData object with n_obs × n_vars = 700 × 765; obs: 'bulk_labels', 'n_genes', 'percent_mito', 'n_counts', 'S_score', 'G2M_score', 'phase', 'louvain'; var: 'n_count",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:10788,avail,available,10788,en/stable/tutorials/plotting/core.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html,1,['avail'],['available']
Availability,"rce]#; Processed Visium Spatial Gene Expression data from 10x Genomics’ database.; The database can be browsed online to find the sample_id you want. Parameters:. sample_id Literal['V1_Breast_Cancer_Block_A_Section_1', 'V1_Breast_Cancer_Block_A_Section_2', 'V1_Human_Heart', 'V1_Human_Lymph_Node', 'V1_Mouse_Kidney', 'V1_Adult_Mouse_Brain', 'V1_Mouse_Brain_Sagittal_Posterior', 'V1_Mouse_Brain_Sagittal_Posterior_Section_2', 'V1_Mouse_Brain_Sagittal_Anterior', 'V1_Mouse_Brain_Sagittal_Anterior_Section_2', 'V1_Human_Brain_Section_1', 'V1_Human_Brain_Section_2', 'V1_Adult_Mouse_Brain_Coronal_Section_1', 'V1_Adult_Mouse_Brain_Coronal_Section_2', 'Targeted_Visium_Human_Cerebellum_Neuroscience', 'Parent_Visium_Human_Cerebellum', 'Targeted_Visium_Human_SpinalCord_Neuroscience', 'Parent_Visium_Human_SpinalCord', 'Targeted_Visium_Human_Glioblastoma_Pan_Cancer', 'Parent_Visium_Human_Glioblastoma', 'Targeted_Visium_Human_BreastCancer_Immunology', 'Parent_Visium_Human_BreastCancer', 'Targeted_Visium_Human_OvarianCancer_Pan_Cancer', 'Targeted_Visium_Human_OvarianCancer_Immunology', 'Parent_Visium_Human_OvarianCancer', 'Targeted_Visium_Human_ColorectalCancer_GeneSignature', 'Parent_Visium_Human_ColorectalCancer'] (default: 'V1_Breast_Cancer_Block_A_Section_1')The ID of the data sample in 10x’s spatial database. include_hires_tiff bool (default: False)Download and include the high-resolution tissue image (tiff) in; adata.uns[""spatial""][sample_id][""metadata""][""source_image_path""]. Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.visium_sge(sample_id='V1_Breast_Cancer_Block_A_Section_1'); AnnData object with n_obs × n_vars = 3798 × 36601; obs: 'in_tissue', 'array_row', 'array_col'; var: 'gene_ids', 'feature_types', 'genome'; uns: 'spatial'; obsm: 'spatial'. previous; scanpy.datasets.toggleswitch. next; Deprecated functions. Contents; . visium_sge(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.visium_sge.html:10780,Down,Download,10780,en/stable/generated/scanpy.datasets.visium_sge.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.visium_sge.html,1,['Down'],['Download']
Availability,"reprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. CI. Contents . Plotting tests; Viewing plots from failed tests on Azure pipelines; Misc. CI#. Plotting tests#; A frequent frustration in testing is the reproducibility of the plots and matplotlib’s behaviour in different environments.; We have some tooling to help with this. Viewing plots from failed tests on Azure pipelines#; The fixtures check_same_image and image_comparer upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. Select your failing test. And open the attachments tab. From here you can view and download the images which were compared, as well as a diff between them. Misc#; matplotlib.testing.setup() tries to establish a consistent environment for creating plots. Make sure it’s active!. previous; Documentation. next; Versioning. Contents; . Plotting tests; Viewing plots from failed tests on Azure pipelines; Misc. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/ci.html:9820,down,download,9820,en/stable/dev/ci.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/ci.html,1,['down'],['download']
Availability,"rnal.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. API. API#; Import Scanpy as:; import scanpy as sc. Note; Additional functionality is available in the broader ecosystem, with some tools being wrapped in the scanpy.external module. Preprocessing: pp; Basic Preprocessing; Recipes; Batch effect correction; Doublet detection; Neighbors. Tools: tl; Embeddings; Clustering and trajectory inference; Data integration; Marker genes; Gene scores, Cell cycle; Simulations. Plotting: pl; Generic; Classes; Preprocessing; Tools. Reading; scanpy.read; scanpy.read_10x_h5; scanpy.read_10x_mtx; scanpy.read_visium; scanpy.read_h5ad; scanpy.read_csv; scanpy.read_excel; scanpy.read_hdf; scanpy.read_loom; scanpy.read_mtx; scanpy.read_text; scanpy.read_umi_tools. Get object from AnnData: get; scanpy.get.obs_df; scanpy.get.var_df; scanpy.get.rank_genes_groups_df; scanpy.get.aggregate. Queries; scanpy.queries.biomart_annotations; scanpy.queries.gene_coordinates; scanpy.queries.mitochondrial_genes; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_r",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/index.html:9296,avail,available,9296,en/stable/api/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/index.html,1,['avail'],['available']
Availability,"ro-centering variables; (uses scikit-learn TruncatedSVD or; dask-ml TruncatedSVD),; which allows to handle sparse input efficiently.; Passing None decides automatically based on sparseness of the data. svd_solver str | None (default: None)SVD solver to use:. NoneSee chunked and zero_center descriptions to determine which class will be used.; Depending on the class and the type of X different values for default will be set.; If scikit-learn PCA is used, will give 'arpack',; if scikit-learn TruncatedSVD is used, will give 'randomized',; if dask-ml PCA or IncrementalPCA is used, will give 'auto',; if dask-ml TruncatedSVD is used, will give 'tsqr'. 'arpack'for the ARPACK wrapper in SciPy (svds()); Not available with dask arrays. 'randomized'for the randomized algorithm due to Halko (2009). For dask arrays,; this will use svd_compressed(). 'auto'chooses automatically depending on the size of the problem. 'lobpcg'An alternative SciPy solver. Not available with dask arrays. 'tsqr'Only available with dask arrays. “tsqr”; algorithm from Benson et. al. (2013). Changed in version 1.9.3: Default value changed from 'arpack' to None. Changed in version 1.4.5: Default value changed from 'auto' to 'arpack'. Efficient computation of the principal components of a sparse matrix; currently only works with the 'arpack’ or 'lobpcg' solvers.; If X is a dask array, dask-ml classes PCA,; IncrementalPCA, or; TruncatedSVD will be used.; Otherwise their scikit-learn counterparts PCA,; IncrementalPCA, or; TruncatedSVD will be used. random_state Union[int, RandomState, None] (default: 0)Change to use different initial states for the optimization. return_info bool (default: False)Only relevant when not passing an AnnData:; see “Returns”. mask_var ndarray[Any, dtype[bool]] | str | None | Empty (default: _empty)To run only on a certain set of genes given by a boolean array; or a string referring to an array in var.; By default, uses .var['highly_variable'] if available, else everything. use_highly_v",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html:11506,avail,available,11506,en/stable/generated/scanpy.pp.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html,1,['avail'],['available']
Availability,"rsioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. 1.7.x for the 1.7 release series).; For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs are assigned a patch version milestone such as 1.7.4.; Once the PR is approved and merged, the bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures. Technical details#; The [meeseeks bot][] reacts to commands like this,; given as a comment on the PR, or a label or milestone description:. @Meeseeksdev backport <branch>. In our case, these commands are part of the milestone description,; which causes the merge of a PR assigned to a milestone to trigger the bot. previous; CI. next; Making a release. Contents; . Semantic versioning; Version numbers. Tooling; Technical details. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:10731,failure,failures,10731,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,1,['failure'],['failures']
Availability,"rue,; vmin=-3,; vmax=3,; cmap=""bwr"",; layer=""scaled"",; figsize=(10, 7),; show=False,; );. Showing 10 genes per category, turning the gene labels off and swapping the axes. Notice that when the image is swapped, a color code for the categories appear instead of the ‘brackets’. sc.pl.rank_genes_groups_heatmap(; pbmc,; n_genes=10,; use_raw=False,; swap_axes=True,; show_gene_labels=False,; vmin=-3,; vmax=3,; cmap=""bwr"",; ). Visualize marker genes using tracksplot#. sc.pl.rank_genes_groups_tracksplot(pbmc, n_genes=3). Comparison of marker genes using split violin plots#; In scanpy, is very easy to compare marker genes using split violin plots for all groups at once. with rc_context({""figure.figsize"": (9, 1.5)}):; sc.pl.rank_genes_groups_violin(pbmc, n_genes=20, jitter=False). Dendrogram options#; Most of the visualizations can arrange the categories using a dendrogram. However, the dendrogram can also be plotted independently as follows:. # compute hierarchical clustering using PCs (several distance metrics and linkage methods are available).; sc.tl.dendrogram(pbmc, ""bulk_labels""). ax = sc.pl.dendrogram(pbmc, ""bulk_labels""). Plot correlation#; Together with the dendrogram it is possible to plot the correlation (by default ‘pearson’) of the categories. ax = sc.pl.correlation_matrix(pbmc, ""bulk_labels"", figsize=(5, 3.5)). previous; Plotting. next; Customizing Scanpy plots. Contents; . Scatter plots for embeddings; Load pbmc dataset; Visualization of gene expression and other variables. Identification of clusters based on known marker genes; dotplot; violin plot; stacked-violin plot; matrixplot. Combining plots in subplots; Heatmaps; Tracksplot; Visualization of marker genes; Visualize marker genes using dotplot; Focusing on particular groups. Visualize marker genes using matrixplot; Visualize marker genes using stacked violin plots; Visualize marker genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:23704,avail,available,23704,en/stable/tutorials/plotting/core.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html,1,['avail'],['available']
Availability,"s at once:. sc.experimental.pp.normalize_pearson_residuals_pca() performs normalization by Pearson residuals and PCA in one go. This function is helpful to quickly obtain a Pearson residual-based data representation when highly variable genes are already defined, as only those are used by default.; sc.experimental.pp.recipe_pearson_residuals() performs gene selection and normalization by Pearson residuals, and PCA on top. This is intended to make the full Pearson residual preprocessing available in one step. All hyperparameters of the individual steps can still be controlled using the wrapper functions’ arguments. See the documentation for details. References / See also#; Hafemeister & Satija (2019), Normalization and variance stabilization of single-cell RNA-seq data using regularized negative binomial regression, Genome Biology; Lause et al. (2021), Analytic Pearson residuals for normalization of single-cell RNA-seq UMI data, Genome Biology; Wagner (2021), Normalization methods for single-cell RNA-Seq data, Youtube; Choudhary & Satija (2022), Comparison and evaluation of statistical error models for scRNA-seq, Genome Biology. previous; Experimental. next; Using dask with Scanpy. Contents; . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:31050,error,error,31050,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['error'],['error']
Availability,"s enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; $ gh repo clone scverse/scanpy; $ cd scanpy. Hatch (recommended)Pip/PyPICondaTo use one of the predefined Hatch environments in hatch.toml,; run either hatch test [args] or hatch run [env:]command [...args], e.g.:; $ hatch test -p # run tests in parallel; $ hatch run docs:build # build docs; $ hatch run towncrier:create # create changelog entry. If you are using pip>=21.3, an editable install can be made:; $ python -m venv .venv; $ source .venv/bin/activate; $ pip install -e '.[dev,test]'. If you want to let conda handle the installations of dependencies, do:; $ pipx install beni; $ beni pyproject.toml > environment.yml; $ conda env create -f environment.yml; $ conda activate scanpy; $ pip install -e '.[dev,doc,test]'. For instructions on how to work with the code, see the contribution guide. Docker#; If you’re using Docker, you can use e.g. the image gcfntnu/scanpy from Docker Hub. Troubleshooting#; If you get a Permission denied error, never use sudo pip. Instead, use virtual environments or:; $ pip install --user scanpy. previous; Scanpy – Single-Cell Analysis in Python. next; Tutorials. Contents; . Development Version; Docker; Troubleshooting. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:11171,error,error,11171,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,1,['error'],['error']
Availability,"scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 17:28. Reading the data#; We will use a Visium spatial transcriptomics dataset of the human lymphnode, which is publicly available from the 10x genomics website: link.; The function datasets.visium_sge() downloads the dataset from 10x Genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and percentage of mitochondrial read counts per sample.; When using your own Visium data, use sc.read_visium() function to import it. adata = sc.datasets.visium_sge(sample_id=""V1_Human_Lymph_Node""); adata.var_names_make_unique(); adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(adata, qc_vars=[""mt""], inplace=True). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Human_Lymph_Node/filtered_feature_bc_matrix.h5; (0:00:01). This is how the adata structure looks like for Visium data. adata. AnnData object with n_obs × n_vars = 4035 × 36601; obs: 'in_tissue', 'array_row', 'array_col', 'n_genes_by_counts', 'log1p_n_genes_by_counts', 'total_counts', 'log1p_total_counts', 'pct_counts_in_top_50_genes', 'pct_counts_in_top_100_genes', 'pct_counts_in_top_200_genes', 'pct_counts_in_top_500_genes', 'total_co",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:12458,down,downloads,12458,en/stable/tutorials/spatial/basic-analysis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html,1,['down'],['downloads']
Availability,"sets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.verbosity. Contents . ScanpyConfig.verbosity. scanpy._settings.ScanpyConfig.verbosity#. property ScanpyConfig.verbosity: Verbosity[source]#; Verbosity level (default warning); Level 0: only show ‘error’ messages.; Level 1: also show ‘warning’ messages.; Level 2: also show ‘info’ messages.; Level 3: also show ‘hint’ messages.; Level 4: also show very detailed progress for ‘debug’ging. previous; scanpy._settings.ScanpyConfig.plot_suffix. next; scanpy._settings.ScanpyConfig.writedir. Contents; . ScanpyConfig.verbosity. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html:9474,error,error,9474,en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html,1,['error'],['error']
Availability,"sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Contributing code. Contents . Development workflow; Code style. Contributing code#. Development workflow#. Fork the Scanpy repository to your own GitHub account; Create a development environment; Create a new branch for your PR; Add your feature or bugfix to the codebase; Make sure all tests are passing; Build and visually check any changed documentation; Open a PR back to the main repository. Code style#; Code contributions will be formatted and style checked using Ruff.; Ignored checks are configured in the tool.ruff.lint section of pyproject.toml.; To learn how to ignore checks per line please read about ignoring errors.; Additionally, we use Scanpy’s EditorConfig,; so using an editor/IDE with support for both is helpful. previous; Contributing. next; Getting set up. Contents; . Development workflow; Code style. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/code.html:9849,error,errors,9849,en/stable/dev/code.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/code.html,1,['error'],['errors']
Availability,"son residuals.; Higher values correspond to less overdispersion (var = mean + mean^2/theta), and theta=np.inf corresponds to a Poisson model. clip float | None (default: None)Determines if and how residuals are clipped:. If None, residuals are clipped to the interval [-sqrt(n_obs), sqrt(n_obs)], where n_obs is the number of cells in the dataset (default behavior).; If any scalar c, residuals are clipped to the interval [-c, c]. Set clip=np.inf for no clipping. n_comps int | None (default: 50)Number of principal components to compute in the PCA step. random_state float (default: 0)Random seed for setting the initial states for the optimization in the PCA step. kwargs_pca Mapping[str, Any] (default: mappingproxy({}))Dictionary of further keyword arguments passed on to scanpy.pp.pca(). mask_var ndarray | str | None | Empty (default: _empty)To run only on a certain set of genes given by a boolean array; or a string referring to an array in var.; By default, uses .var['highly_variable'] if available, else everything. use_highly_variable bool | None (default: None)Whether to use highly variable genes only, stored in; .var['highly_variable'].; By default uses them if they have been determined beforehand. Deprecated since version 1.10.0: Use mask_var instead. check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. Return type:; AnnData | None. Returns:; If inplace=False, returns the Pearson residual-based PCA results (as AnnData; object). If inplace=True, updates adata with the following fields:. .uns['pearson_residuals_normalization']['pearson_residuals_df']The subset of highly variable genes, normalized by Pearson residuals. .uns['pe",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html:11299,avail,available,11299,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,1,['avail'],['available']
Availability,"specified, this looks; .obsp[.uns[neighbors_key][‘connectivities_key’]] for connectivities. arrows bool (default: False)Show arrows (deprecated in favour of scvelo.pl.velocity_embedding). arrows_kwds Mapping[str, Any] | None (default: None)Passed to quiver(). sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center']] (default: 'right margin')Location of legend, either 'on data', 'right margin', None,; or a valid keyword for the loc parameter of Legend. legend_fontsize Union[int, float, Literal['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'], None] (default: None)Numeric size in pt or string describing the size.; See set_fontsize(). legend_fontweight Union[int, Literal['light', 'normal', 'medium', 'semibold', 'bold', 'heavy', 'black']] (default: 'bold')Legend font weight. A numeric value in range 0-1000 or a string.; Defaults to 'bold' if legend_loc == 'on data', otherwise to 'normal'.; See set_fontweight(). legend_fontoutline int | None (",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html:12389,avail,available,12389,en/stable/generated/scanpy.external.pl.phate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html,6,['avail'],['available']
Availability,"st as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see neighbors() A Wolf; graph abstraction: AGA is renamed to PAGA: paga(); now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; louvain() and dpt(), the; connectivity measure has been improved A Wolf; logistic regression for finding marker genes; rank_genes_groups() with parameter method='logreg' A Wolf; louvain() provides a better implementation for; reclustering via restrict_to A Wolf; scanpy no longer modifies rcParams upon import, call; settings.set_figure_params to set the ‘scanpy style’ A Wolf; default cache directory is ./cache/, set settings.cachedir to change; this; nested directories in this are avoided A Wolf; show edges in scatter plots based on graph visualization; draw_graph() and umap() by passing edges=True A Wolf; downsample_counts() for downsampling counts MD Luecken; default 'louvain_groups' are called 'louvain' A Wolf; 'X_diffmap' contains the zero component, plotting remains unchanged A Wolf. Version 0.4#. 0.4.4 2018-02-26#. embed cells using umap() [McInnes et al., 2018] pr92 G Eraslan; score sets of genes, e.g. for cell cycle, using score_genes() [Satija et al., 2015]:; notebook. 0.4.3 2018-02-09#. clustermap(): heatmap from hierarchical clustering,; based on seaborn.clustermap() [Waskom et al., 2016] A Wolf; only return matplotlib.axes.Axes in plotting functions of sc.pl; when show=False, otherwise None A Wolf. 0.4.2 2018-01-07#. amendments in PAGA and its plotting functions A Wolf. 0.4.0 2017-12-23#. export to SPRING [Weinreb et al., 2017] for interactive visualization of data:; spring tutorial S Wollock. Version 0.3#. 0.3.2 2017-11-29#. finding marker genes via rank_genes_groups_violin() improved,; see issue51 F Ramirez. 0.3.0 2017-11-16#. AnnData gains method concatenate() A Wolf; AnnD",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:50659,down,downsampling,50659,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['down'],['downsampling']
Availability,"surement outliers,; i.e. “unreliable” observations.; Only provide one of the optional parameters min_counts, min_genes,; max_counts, max_genes per call. Parameters:. data AnnData | spmatrix | ndarray | ArrayThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. min_counts int | None (default: None)Minimum number of counts required for a cell to pass filtering. min_genes int | None (default: None)Minimum number of genes expressed required for a cell to pass filtering. max_counts int | None (default: None)Maximum number of counts required for a cell to pass filtering. max_genes int | None (default: None)Maximum number of genes expressed required for a cell to pass filtering. inplace bool (default: True)Perform computation inplace or return result. Return type:; AnnData | tuple[ndarray, ndarray] | None. Returns:; Depending on inplace, returns the following arrays or directly subsets; and annotates the data matrix:. cells_subsetndarrayBoolean index mask that does filtering. True means that the; cell is kept. False means the cell is removed. number_per_cellndarrayDepending on what was thresholded (counts or genes),; the array stores n_counts or n_cells per gene. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.krumsiek11(); UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.; utils.warn_names_duplicates(""obs""); >>> adata.obs_names_make_unique(); >>> adata.n_obs; 640; >>> adata.var_names.tolist() ; ['Gata2', 'Gata1', 'Fog1', 'EKLF', 'Fli1', 'SCL',; 'Cebpa', 'Pu.1', 'cJun', 'EgrNab', 'Gfi1']; >>> # add some true zeros; >>> adata.X[adata.X < 0.3] = 0; >>> # simply compute the number of genes per cell; >>> sc.pp.filter_cells(adata, min_genes=0); >>> adata.n_obs; 640; >>> int(adata.obs['n_genes'].min()); 1; >>> # filter manually; >>> adata_copy = adata[adata.obs['n_genes'] >= 3]; >>> adata_copy.n_obs; 554; >>> int(adata_copy.obs['n_genes'].min()); 3; >>> # actually do some fi",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_cells.html:10630,mask,mask,10630,en/stable/generated/scanpy.pp.filter_cells.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_cells.html,1,['mask'],['mask']
Availability,"t wants to be plotted. By default; adata.raw.X is plotted. If use_raw=False is set, then adata.X is plotted.; If layer is set to a valid layer name, then the layer is plotted. layer; takes precedence over use_raw. annotate_var_explained bool (default: False). sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center']] (default: 'right margin')Location of legend, either 'on data', 'right margin', None,; or a valid keyword for the loc parameter of Legend. legend_fontsize Union[int, float, Literal['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'], None] (default: None)Numeric size in pt or string describing the size.; See set_fontsize(). legend_fontweight Union[int, Literal['light', 'normal', 'medium', 'semibold', 'bold', 'heavy', 'black']] (default: 'bold')Legend font weight. A numeric value in range 0-1000 or a string.; Defaults to 'bold' if legend_loc == 'on data', otherwise to 'normal'.; See set_fontweight(). legend_fontoutline int | None (",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca.html:11840,avail,available,11840,en/stable/api/generated/scanpy.pl.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca.html,1,['avail'],['available']
Availability,"t() now uses smallest_dot argument correctly pr1771 S Flemming. Development Process#. Switched to flit for building and deploying the package, a simple tool with an easy to understand command line interface and metadata pr1527 P Angerer; Use pre-commit for style checks pr1684 pr1848 L Heumos I Virshup. Deprecations#. Dropped support for Python 3.6. More details here. pr1897 I Virshup; Deprecated layers and layers_norm kwargs to normalize_total() pr1667 I Virshup; Deprecated MulticoreTSNE backend for scanpy.tl.tsne() pr1854 I Virshup. Version 1.7#. 1.7.2 2021-04-07#. Bug fixes#. scanpy.logging.print_versions() now works when python<3.8 pr1691 I Virshup; scanpy.pp.regress_out() now uses joblib as the parallel backend, and should stop oversubscribing threads pr1694 I Virshup; scanpy.pp.highly_variable_genes() with flavor=""seurat_v3"" now returns correct gene means and -variances when used with batch_key pr1732 J Lause; scanpy.pp.highly_variable_genes() now throws a warning instead of an error when non-integer values are passed for method ""seurat_v3"". The check can be skipped by passing check_values=False. pr1679 G Palla. Ecosystem#. Added triku a feature selection method to the ecosystem page pr1722 AM Ascensión; Added dorothea and progeny to the ecosystem page pr1767 P Badia-i-Mompel. 1.7.1 2021-02-24#. Documentation#. More twitter handles for core devs pr1676 G Eraslan. Bug fixes#. dendrogram() use 1 - correlation as distance matrix to compute the dendrogram pr1614 F Ramirez; Fixed obs_df()/ var_df() erroring when keys not passed pr1637 I Virshup; Fixed argument handling for scanpy.pp.scrublet() J Manning; Fixed passing of kwargs to scanpy.pl.violin() when stripplot was also used pr1655 M van den Beek; Fixed colorbar creation in scanpy.pl.timeseries_as_heatmap pr1654 M van den Beek. 1.7.0 2021-02-03#. Features#. Add new 10x Visium datasets to visium_sge() pr1473 G Palla; Enable download of source image for 10x visium datasets in visium_sge() pr1506 H Spitzer; Refactor ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:29544,error,error,29544,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['error'],['error']
Availability,"tation where three aims are achieved:. remove the technical variation that comes from differences in total counts between cells; stabilize the mean-variance relationship across genes, i.e. ensure that biological signal from both low and high expression genes can contribute similarly to downstream processing; genes that are homogenously expressed (like housekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seurat’s scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:11839,error,errors,11839,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['error'],['errors']
Availability,"ternal.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. How to preprocess UMI count data with analytic Pearson residuals. Contents . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. How to preprocess UMI count data with analytic Pearson residuals#; With version 1.9, scanpy introduces new preprocessing functions based on Pearson residuals into the experimental.pp module. These functions implement the core steps",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:9379,Down,Download,9379,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['Down'],['Download']
Availability,"ternal.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.downsample_counts. Contents . downsample_counts(). scanpy.pp.downsample_counts#. scanpy.pp.downsample_counts(adata, counts_per_cell=None, total_counts=None, *, random_state=0, replace=False, copy=False)[source]#; Downsample counts from count matrix.; If counts_per_cell is specified, each cell will downsampled.; If total_counts is specified, expression matrix will be downsampled to; contain at most total_counts. Parameters:. adata AnnDataAnnotated data matrix. counts_per_cell int | Collection[int] | None (default: None)Target total counts per cell. If a cell has more than ‘counts_per_cell’,; it will be downsampled to this number. Resulting counts can be specified; on a per cell basis by passing an array.Should be an integer or integer; ndarray with same length as number of obs. total_counts int | None (default: None)Target total counts. If the count matrix has more than total_counts; it will be downsampled to have this number. random_state Union[int, RandomState, None] (default: 0)Random seed for subsampling. replace bool (default: False)Whether to sample the counts with replacement. copy bool (default: False)Determines whether a copy of adata is returned. Return type:; AnnData | None. Returns:; Returns None if copy=False, else returns an AnnData object. Sets the following fields:. adata.Xnumpy.ndarray | scipy.sparse.spmatrix (dtype float)Dow",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html:9615,down,downsampled,9615,en/stable/generated/scanpy.pp.downsample_counts.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html,1,['down'],['downsampled']
Availability,"th scVI pr1085 G Xing; Guide for using Scanpy in R pr1186 L Zappia. Performance#. pca() now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets pr1066 A Tarashansky; score_genes() now has an efficient implementation for sparse matrices with missing values pr1196 redst4r. Warning; The new pca() implementation can result in slightly different results for sparse matrices. See the pr (pr1066) and documentation for more info. Code design#. stacked_violin() can now be used as a subplot pr1084 P Angerer; score_genes() has improved logging pr1119 G Eraslan; scale() now saves mean and standard deviation in the var pr1173 A Wolf; harmony_timeseries() pr1091 A Mousa. Bug fixes#. combat() now works when obs_names aren’t unique. pr1215 I Virshup; scale() can now be used on dense arrays without centering pr1160 simonwm; regress_out() now works when some features are constant pr1194 simonwm; normalize_total() errored if the passed object was a view pr1200 I Virshup; neighbors() sometimes ignored the n_pcs param pr1124 V Bergen; ebi_expression_atlas() which contained some out-of-date URLs pr1102 I Virshup; ingest() for UMAP 0.4 pr1165 S Rybakov; louvain() for Louvain 0.6 pr1197 I Virshup; highly_variable_genes() which could lead to incorrect results when the batch_key argument was used pr1180 G Eraslan; ingest() where an inconsistent number of neighbors was used pr1111 S Rybakov. Version 1.4#. 1.4.6 2020-03-17#. Functionality in external#. sam() self-assembling manifolds [Tarashansky et al., 2019] pr903 A Tarashansky; harmony_timeseries() for trajectory inference on discrete time points pr994 A Mousa; wishbone() for trajectory inference (bifurcations) pr1063 A Mousa. Code design#. violin now reads .uns['colors_...'] pr1029 michalk8. Bug fixes#. adapt ingest() for UMAP 0.4 pr1038 pr1106 S Rybakov; compat with matplotlib 3.1 and 3.2 pr1090 I Virshup, P Angerer; fix PAGA for new igraph pr1037 P Angerer; fix rapid",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:39432,error,errored,39432,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['error'],['errored']
Availability,"thonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scanorama 1.7.4; scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sortedcontainers 2.4.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 13:25. Reading the data#; We will use two Visium spatial transcriptomics dataset of the mouse brain (Sagittal), which are publicly available from the 10x genomics website.; The function datasets.visium_sge() downloads the dataset from 10x genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and visualize them.; When using your own Visium data, use Scanpy’s read_visium() function to import it. adata_spatial_anterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Anterior""; ); adata_spatial_posterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Posterior""; ). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Anterior/filtered_feature_bc_matrix.h5; (0:00:01); reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_bc_matrix.h5; (0:00:01). adata_spatial_anterior.var_names_make_unique(); adata_spatial_posterior.var_names_make_unique();",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:12852,avail,available,12852,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['avail'],['available']
Availability,"ts . pca_overview(). scanpy.pl.pca_overview#. scanpy.pl.pca_overview(adata, **params)[source]#; Plot PCA results.; The parameters are the ones of the scatter plot. Call pca_ranking separately; if you want to change the default settings. Parameters:. adata AnnDataAnnotated data matrix. colorKeys for observation/cell annotation either as list [""ann1"", ""ann2""] or; string ""ann1,ann2,..."". use_rawUse raw attribute of adata if present. sort_orderFor continuous annotations used as color parameter, plot data points; with higher values on top of others. groupsRestrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. componentsFor instance, ['1,2', '2,3']. To plot all available components use; components='all'. projectionProjection of plot (default: '2d'). legend_locLocation of legend, either 'on data', 'right margin', None,; or a valid keyword for the loc parameter of Legend. legend_fontsizeNumeric size in pt or string describing the size.; See set_fontsize(). legend_fontweightLegend font weight. A numeric value in range 0-1000 or a string.; Defaults to 'bold' if legend_loc == 'on data', otherwise to 'normal'.; See set_fontweight(). legend_fontoutlineLine width of the legend font outline in pt. Draws a white outline using; the path effect withStroke. colorbar_locWhere to place the colorbar for continous variables. If None, no colorbar; is added. sizePoint size. If None, is automatically computed as 120000 / n_cells.; Can be a sequence containing the size for each cell. The order should be; the same as in adata.obs. color_mapColor map to use for continous variables. Can be a name or a; Colormap instance (e.g. ""magma”, ""viridis""; or mpl.cm.cividis), see get_cmap().",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html:10246,avail,available,10246,en/stable/api/generated/scanpy.pl.pca_overview.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html,1,['avail'],['available']
Availability,"tte length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nn",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19806,down,downloaded,19806,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['down'],['downloaded']
Availability,"ult: None)Name of the AnnData object layer that wants to be plotted. By default; adata.raw.X is plotted. If use_raw=False is set, then adata.X is plotted.; If layer is set to a valid layer name, then the layer is plotted. layer; takes precedence over use_raw. sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center']] (default: 'right margin')Location of legend, either 'on data', 'right margin', None,; or a valid keyword for the loc parameter of Legend. legend_fontsize Union[int, float, Literal['xx-small', 'x-small', 'small', 'medium', 'large', 'x-large', 'xx-large'], None] (default: None)Numeric size in pt or string describing the size.; See set_fontsize(). legend_fontweight Union[int, Literal['light', 'normal', 'medium', 'semibold', 'bold', 'heavy', 'black']] (default: 'bold')Legend font weight. A numeric value in range 0-1000 or a string.; Defaults to 'bold' if legend_loc == 'on data', otherwise to 'normal'.; See set_fontweight(). legend_fontoutline int | None (",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.diffmap.html:11710,avail,available,11710,en/stable/api/generated/scanpy.pl.diffmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.diffmap.html,1,['avail'],['available']
Availability,"unts"", ""pct_counts_mt"", ""log1p_n_genes_by_counts""],; wspace=0.5,; ncols=2,; ). Manual cell-type annotation#. Note; This section of the tutorial is expanded upon using prior knowledge resources like automated assignment and gene enrichment in the scverse tutorial here. Cell type annotation is laborous and repetitive task, one which typically requires multiple rounds of subclustering and re-annotation. It’s difficult to show the entirety of the process in this tutorial, but we aim to show how the tools scanpy provides assist in this process.; We have now reached a point where we have obtained a set of cells with decent quality, and we can proceed to their annotation to known cell types. Typically, this is done using genes that are exclusively expressed by a given cell type, or in other words these genes are the marker genes of the cell types, and are thus used to distinguish the heterogeneous groups of cells in our data. Previous efforts have collected and curated various marker genes into available resources, such as CellMarker, TF-Marker, and PanglaoDB. The cellxgene gene expression tool can also be quite useful to see which cell types a gene has been expressed in across many existing datasets.; Commonly and classically, cell type annotation uses those marker genes subsequent to the grouping of the cells into clusters. So, let’s generate a set of clustering solutions which we can then use to annotate our cell types. Here, we will use the Leiden clustering algorithm which will extract cell communities from our nearest neighbours graph. for res in [0.02, 0.5, 2.0]:; sc.tl.leiden(; adata, key_added=f""leiden_res_{res:4.2f}"", resolution=res, flavor=""igraph""; ). Notably, the number of clusters that we define is largely arbitrary, and so is the resolution parameter that we use to control for it. As such, the number of clusters is ultimately bound to the stable and biologically-meaningful groups that we can ultimately distringuish, typically done by experts in the correspond",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:19243,avail,available,19243,en/stable/tutorials/basics/clustering.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html,1,['avail'],['available']
Availability,"use in the scanpy workflow as an alternative to neighbors(). Note; This is just a wrapper of bbknn.bbknn(): up to date docstring,; more information and bug reports there. Parameters:. adata AnnDataNeeds the PCA computed and stored in adata.obsm[""X_pca""]. batch_key str (default: 'batch')adata.obs column name discriminating between your batches. use_rep str (default: 'X_pca')The dimensionality reduction in .obsm to use for neighbour detection. Defaults to PCA. approx bool (default: True)If True, use approximate neighbour finding - annoy or PyNNDescent. This results; in a quicker run time for large datasets while also potentially increasing the degree of; batch correction. use_annoy bool (default: True)Only used when approx=True. If True, will use annoy for neighbour finding. If; False, will use pyNNDescent instead. metric Union[str, Callable, DistanceMetric] (default: 'euclidean')What distance metric to use. The options depend on the choice of neighbour algorithm.; ”euclidean”, the default, is always available.; Annoy supports “angular”, “manhattan” and “hamming”.; PyNNDescent supports metrics listed in pynndescent.distances.named_distances; and custom functions, including compiled Numba code.; >>> import pynndescent; >>> pynndescent.distances.named_distances.keys() ; dict_keys(['euclidean', 'l2', 'sqeuclidean', 'manhattan', 'taxicab', 'l1', 'chebyshev', 'linfinity',; 'linfty', 'linf', 'minkowski', 'seuclidean', 'standardised_euclidean', 'wminkowski', ...]). KDTree supports members of sklearn.neighbors.KDTree’s valid_metrics list, or parameterised; DistanceMetric objects:; >>> import sklearn.neighbors; >>> sklearn.neighbors.KDTree.valid_metrics; ['euclidean', 'l2', 'minkowski', 'p', 'manhattan', 'cityblock', 'l1', 'chebyshev', 'infinity']. Note; check the relevant documentation for up-to-date lists. copy bool (default: False)If True, return a copy instead of writing to the supplied adata. neighbors_within_batch int (default: 3)How many top neighbours to report for eac",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.bbknn.html:11031,avail,available,11031,en/stable/generated/scanpy.external.pp.bbknn.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.bbknn.html,1,['avail'],['available']
Availability,"usekeeping genes) have small variance, while genes that are differentially expressed (like marker genes) have high variance. Thus, computing Pearson residuals replace the common steps of explicitly normalizing by sequencing depth and log-transforming the data for variance stabilization.; The analytic Pearson residuals presented here are similar to Seurat’s scTransform model (Hafemeister & Satija, 2019), but use a simplified model that allows an analytic solution. See Lause et al. (2021) for details. Preparations#. import numpy as np; import matplotlib.pyplot as plt; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_header(); sc.settings.set_figure_params(dpi=80, facecolor=""white""). scanpy==1.10.0rc2.dev6+g14555ba4 anndata==0.11.0.dev78+g64ab900 umap==0.5.5 numpy==1.26.3 scipy==1.11.4 pandas==2.2.0 scikit-learn==1.3.2 statsmodels==0.14.1 igraph==0.10.8 pynndescent==0.5.11. Download data#; This tutorial uses two 10X datasets that are processed in parallel:. the 3k PBMC (v1 chemistry) dataset; the 10k PBMC (v3 chemistry) dataset. Uncomment this cell to create directories, download and unpack the data:. # !mkdir tutorial_data; # !mkdir tutorial_data/pbmc3k_v1; # !mkdir tutorial_data/pbmc10k_v3. # !wget http://cf.10xgenomics.com/samples/cell-exp/1.1.0/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz -O tutorial_data/pbmc3k_v1.tar.gz; # !cd tutorial_data; tar -xzf pbmc3k_v1.tar.gz -C pbmc3k_v1 --strip-components 2. # !wget https://cf.10xgenomics.com/samples/cell-exp/3.0.0/pbmc_10k_v3/pbmc_10k_v3_filtered_feature_bc_matrix.tar.gz -O tutorial_data/pbmc10k_v3.tar.gz; # !cd tutorial_data; tar -xzf pbmc10k_v3.tar.gz -C pbmc10k_v3 --strip-components 1. Load data#; Here we load the two downloaded datasets from disk and create AnnData objects for them. adata_pbmc3k = sc.read_10x_mtx(""tutorial_data/pbmc3k_v1/"", cache=True); adata_pbmc10k = sc.read_10x_mtx(""tutorial_data/pbmc10k_v3/"", cache=True). adata_pbmc3k.u",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:12165,Down,Download,12165,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['Down'],['Download']
Availability,"uting; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.draw_graph. Contents . draw_graph(). scanpy.tl.draw_graph#. scanpy.tl.draw_graph(adata, layout='fa', *, init_pos=None, root=None, random_state=0, n_jobs=None, adjacency=None, key_added_ext=None, neighbors_key=None, obsp=None, copy=False, **kwds)[source]#; Force-directed graph drawing [Chippada, 2018, Islam et al., 2011, Jacomy et al., 2014].; An alternative to tSNE that often preserves the topology of the data; better. This requires to run neighbors(), first.; The default layout (‘fa’, ForceAtlas2, Jacomy et al. [2014]) uses the package fa2-modified; [Chippada, 2018], which can be installed via pip install fa2-modified.; Force-directed graph drawing describes a class of long-established; algorithms for visualizing graphs.; It has been suggested for visualizing single-cell data by Islam et al. [2011].; Many other layouts as implemented in igraph [Csárdi and Nepusz, 2006] are available.; Similar approaches have been used by Zunder et al. [2015] or Weinreb et al. [2017]. Parameters:. adata AnnDataAnnotated data matrix. layout Literal['fr', 'drl', 'kk', 'grid_fr', 'lgl', 'rt', 'rt_circular', 'fa'] (default: 'fa')‘fa’ (ForceAtlas2) or any valid igraph layout. Of particular interest; are ‘fr’ (Fruchterman Reingold), ‘grid_fr’ (Grid Fruchterman Reingold,; faster than ‘fr’), ‘kk’ (Kamadi Kawai’, slower than ‘fr’), ‘lgl’ (Large; Graph, very fast), ‘drl’ (Distributed Recursive Layout, pretty fast) and; ‘rt’ (Reingold Tilford tree layout). root int | None (default: None)Root for tree layouts. random_state Union[int, RandomState, None] (default: 0)For layouts with random initialization like ‘fr’, change this to use; different intial states for the optimization. If None, no seed is set. adjacency spmatrix | None (default: None)Sparse adjacency matrix of the graph, defaults to neighbors connectivities. key_added_ext str | None (default:",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.draw_graph.html:10126,avail,available,10126,en/stable/generated/scanpy.tl.draw_graph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.draw_graph.html,1,['avail'],['available']
Availability,"variance matrix.; If False, omit zero-centering variables; (uses scikit-learn TruncatedSVD or; dask-ml TruncatedSVD),; which allows to handle sparse input efficiently.; Passing None decides automatically based on sparseness of the data. svd_solver str | None (default: None)SVD solver to use:. NoneSee chunked and zero_center descriptions to determine which class will be used.; Depending on the class and the type of X different values for default will be set.; If scikit-learn PCA is used, will give 'arpack',; if scikit-learn TruncatedSVD is used, will give 'randomized',; if dask-ml PCA or IncrementalPCA is used, will give 'auto',; if dask-ml TruncatedSVD is used, will give 'tsqr'. 'arpack'for the ARPACK wrapper in SciPy (svds()); Not available with dask arrays. 'randomized'for the randomized algorithm due to Halko (2009). For dask arrays,; this will use svd_compressed(). 'auto'chooses automatically depending on the size of the problem. 'lobpcg'An alternative SciPy solver. Not available with dask arrays. 'tsqr'Only available with dask arrays. “tsqr”; algorithm from Benson et. al. (2013). Changed in version 1.9.3: Default value changed from 'arpack' to None. Changed in version 1.4.5: Default value changed from 'auto' to 'arpack'. Efficient computation of the principal components of a sparse matrix; currently only works with the 'arpack’ or 'lobpcg' solvers.; If X is a dask array, dask-ml classes PCA,; IncrementalPCA, or; TruncatedSVD will be used.; Otherwise their scikit-learn counterparts PCA,; IncrementalPCA, or; TruncatedSVD will be used. random_state Union[int, RandomState, None] (default: 0)Change to use different initial states for the optimization. return_info bool (default: False)Only relevant when not passing an AnnData:; see “Returns”. mask_var ndarray[Any, dtype[bool]] | str | None | Empty (default: _empty)To run only on a certain set of genes given by a boolean array; or a string referring to an array in var.; By default, uses .var['highly_variable'] if avai",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html:11467,avail,available,11467,en/stable/generated/scanpy.pp.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html,1,['avail'],['available']
Availability,"with a sentence per line (for easier git diffs).; Check that the docs look like what you expect them too! It’s easy to forget to add a reference to function, be sure it got added and looks right. Look at sc.tl.louvain as an example for everything mentioned here. Plots in docstrings#; One of the most useful things you can include in a docstring is examples of how the function should be used.; These are a great way to demonstrate intended usage and give users a template they can copy and modify.; We’re able to include the plots produced by these snippets in the rendered docs using matplotlib’s plot directive.; For examples of this, see the Examples sections of dotplot() or calculate_qc_metrics().; Note that anything in these sections will need to be run when the docs are built, so please keep them computationally light. If you need computed features (e.g. an embedding, differential expression results) load data that has this precomputed.; Try to re-use datasets, this reduces the amount of data that needs to be downloaded to the CI server. Params section#; The Params abbreviation is a legit replacement for Parameters.; To document parameter types use type annotations on function parameters.; These will automatically populate the docstrings on import, and when the documentation is built.; Use the python standard library types (defined in collections.abc and typing modules) for containers, e.g.; Sequences (like list),; Iterables (like set), and; Mappings (like dict).; Always specify what these contain, e.g. {'a': (1, 2)} → Mapping[str, Tuple[int, int]].; If you can’t use one of those, use a concrete class like AnnData.; If your parameter only accepts an enumeration of strings, specify them like so: Literal['elem-1', 'elem-2']. Returns section#; There are three types of return sections – prose, tuple, and a mix of both. Prose is for simple cases.; Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifie",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:12466,down,downloaded,12466,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,1,['down'],['downloaded']
Availability,"with key ‘connectivities’ containing the kNN adjacency; matrix output by SAM. If built-in scanpy dimensionality reduction; methods are to be used using the SAM-output AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user interface written with; Plotly and ipythonwidgets for interactively exploring and annotating; the scRNAseq data and running SAM.; Dependencies can be installed with Anaconda by following the instructions in; the self-assembling-manifold Github README:; atarashansky/self-assembling-manifold; In a Jupyter notebook, execute the following to launch the interface:; >>> from samalg.gui import SAMGUI; >>> sam_gui = SAMGUI(sam_obj) # sam_obj is your SAM object; >>> sam_gui.SamPlot. This can also be enabled in Jupyer Lab by following the instructions in the; self-assembling-manifold README. previous",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:14277,avail,available,14277,en/stable/external/generated/scanpy.external.tl.sam.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html,1,['avail'],['available']
Availability,"x = axs[row_idx, col_idx]; sc.pl.umap(adata, color=marker, ax=ax, show=False, frameon=False, s=20); # Add cell type as row label - here we simply add it as ylabel of; # the first Axes object in the row; if col_idx == 0:; # We disabled axis drawing in UMAP to have plots without background and border; # so we need to re-enable axis to plot the ylabel; ax.axis(""on""); ax.tick_params(; top=""off"",; bottom=""off"",; left=""off"",; right=""off"",; labelleft=""on"",; labelbottom=""off"",; ); ax.set_ylabel(cell_type + ""\n"", rotation=90, fontsize=14); ax.set(frame_on=False); col_idx += 1; # Remove unused column Axes in the current row; while col_idx < ncol:; axs[row_idx, col_idx].remove(); col_idx += 1; # Alignment within the Figure; fig.tight_layout(). Plot size#; There are multiple options for adjusting plot size, as shown below.; We can adjust plot size by setting rcParams['figure.figsize'], which will also change settings for future plots.; These are either available through scanpy’s set_figure_params which wraps Matplotlib’s rcParams or by modifying them directly. rcParams[""figure.figsize""] = (2, 2); sc.pl.umap(adata, color=""bulk_labels""); # Set back to value selected above; rcParams[""figure.figsize""] = FIGSIZE. We can set rcParams for a single plot with a context manager which won’t change the setting for future plots. with plt.rc_context({""figure.figsize"": (5, 5)}):; sc.pl.umap(adata, color=""bulk_labels""). We can also create an Axes object with a predefined size and pass it to a scanpy plotting function. fig, ax = plt.subplots(figsize=(4, 4)); sc.pl.umap(adata, color=""bulk_labels"", ax=ax). The figsize is divided between all Axes and spaces between them. Thus, if we have multiple Axes (columns or rows) we must accordingly increase figsize.; However, if we do not pass Axes objects to the scanpy embedding function it will automatically create individual Axes with the size of the current global figsize (as specified by e.g. matplotlib figure.figsize). ncol = 2; nrow = 1; figsize = 3;",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:17450,avail,available,17450,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,1,['avail'],['available']
Availability,"y.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.filter_genes. Contents . filter_genes(). scanpy.pp.filter_genes#. scanpy.pp.filter_genes(data, *, min_counts=None, min_cells=None, max_counts=None, max_cells=None, inplace=True, copy=False)[source]#; Filter genes based on number of cells or counts.; Keep genes that have at least min_counts counts or are expressed in at; least min_cells cells or have at most max_counts counts or are expressed; in at most max_cells cells.; Only provide one of the optional parameters min_counts, min_cells,; max_counts, max_cells per call. Parameters:. data AnnData | spmatrix | ndarray | ArrayAn annotated data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes. min_counts int | None (default: None)Minimum number of counts required for a gene to pass filtering. min_cells int | None (default: None)Minimum number of cells expressed required for a gene to pass filtering. max_counts int | None (default: None)Maximum number of counts required for a gene to pass filtering. max_cells int | None (default: None)Maximum number of cells expressed required for a gene to pass filtering. inplace bool (default: True)Perform computation inplace or return result. Return type:; AnnData | tuple[ndarray, ndarray] | None. Returns:; Depending on inplace, returns the following arrays or directly subsets; and annotates the data matrix. gene_subsetndarrayBoolean index mask that does filtering. True means that the; gene is kept. False means the gene is removed. number_per_genendarrayDepending on what was thresholded (counts or cells), the array stores; n_counts or n_cells per gene. previous; scanpy.pp.filter_cells. next; scanpy.pp.highly_variable_genes. Contents; . filter_genes(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes.html:10613,mask,mask,10613,en/stable/generated/scanpy.pp.filter_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes.html,1,['mask'],['mask']
Availability,"y.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Settings. Settings#; A convenience function for setting some default matplotlib.rcParams and a; high-resolution jupyter display backend useful for use in notebooks. set_figure_params; Set resolution/size, styling and format of figures. An instance of the ScanpyConfig is available as scanpy.settings and allows configuring Scanpy. _settings.ScanpyConfig; Config manager for scanpy. Some selected settings are discussed in the following.; Influence the global behavior of plotting functions. In non-interactive scripts,; you’d usually want to set settings.autoshow to False. autoshow; Automatically show figures if autosave == False (default True). autosave; Automatically save figures in figdir (default False). The default directories for saving figures, caching files and storing datasets. figdir; Directory for saving figures (default './figures/'). cachedir; Directory for cache files (default './cache/'). datasetdir; Directory for example datasets (default './data/'). The verbosity of logging output, where verbosity levels have the following; meaning: 0=’error’, 1=’warning’, 2=’info’, 3=’hint’, 4=more details, 5=even more; details, etc. verbosity; Verbosity level (default warning). Print versions of packages that might influence numerical results. log",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/settings.html:9487,avail,available,9487,en/stable/api/settings.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/settings.html,1,['avail'],['available']
Availability,"ón; Added dorothea and progeny to the ecosystem page pr1767 P Badia-i-Mompel. Documentation#. Added Community page to docs pr1856 I Virshup; Added rendered examples to many plotting functions issue1664 A Schaar L Zappia bio-la L Hetzel L Dony M Buttner K Hrovatin F Ramirez I Virshup LouisK92 mayarali; Integrated DocSearch, a find-as-you-type documentation index search. pr1754 P Angerer; Reorganized reference docs pr1753 I Virshup; Clarified docs issues for neighbors(),; diffmap(), calculate_qc_metrics() pr1680 G Palla; Fixed typos in grouped plot doc-strings pr1877 C Rands; Extended examples for differential expression plotting. pr1529 F Ramirez. See rank_genes_groups_dotplot() or rank_genes_groups_matrixplot() for examples. Bug fixes#. Fix scanpy.pl.paga_path() TypeError with recent versions of anndata pr1047 P Angerer; Fix detection of whether IPython is running pr1844 I Virshup; Fixed reproducibility of scanpy.tl.diffmap() (added random_state) pr1858 I Kucinski; Fixed errors and warnings from embedding plots with small numbers of categories after sns.set_palette was called pr1886 I Virshup; Fixed handling of gene_symbols argument in a number of sc.pl.rank_genes_groups* functions pr1529 F Ramirez I Virshup; Fixed handling of use_raw for sc.tl.rank_genes_groups when no .raw is present pr1895 I Virshup; scanpy.pl.rank_genes_groups_violin() now works for raw=False pr1669 M van den Beek; scanpy.pl.dotplot() now uses smallest_dot argument correctly pr1771 S Flemming. Development Process#. Switched to flit for building and deploying the package, a simple tool with an easy to understand command line interface and metadata pr1527 P Angerer; Use pre-commit for style checks pr1684 pr1848 L Heumos I Virshup. Deprecations#. Dropped support for Python 3.6. More details here. pr1897 I Virshup; Deprecated layers and layers_norm kwargs to normalize_total() pr1667 I Virshup; Deprecated MulticoreTSNE backend for scanpy.tl.tsne() pr1854 I Virshup. Version 1.7#. 1.7.2 2021-04-07#. Bu",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:28107,error,errors,28107,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['error'],['errors']
Deployability," Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. T",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10279,release,release,10279,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability," AnnData, users; should recompute the neighbors using .obs['X_pca'] with; scanpy.pp.neighbors. .obsm['X_pca']The principal components output by SAM. .obsm['X_umap']The UMAP projection output by SAM. .layers['X_disp']The expression matrix used for nearest-neighbor averaging. .layers['X_knn_avg']The nearest-neighbor-averaged expression data used for computing the; spatial dispersions of genes. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. * Running SAM *; Assuming we are given an AnnData object called adata, we can run the SAM; algorithm as follows:; >>> sam_obj = sce.tl.sam(adata,inplace=True). The input AnnData object should contain unstandardized, non-negative; expression values. Preferably, the data should be log-normalized and no; genes should be filtered out.; Please see the documentation for a description of all available parameters.; For more detailed tutorials, please visit the original Github repository:; atarashansky/self-assembling-manifold; * Plotting *; To visualize the output, we can use:; >>> sce.pl.sam(adata,projection='X_umap'). sce.pl.sam accepts all keyword arguments used in the; matplotlib.pyplot.scatter function.; * SAMGUI *; SAM comes with the SAMGUI module, a graphical-user interface written with; Plotly and ipythonwidgets for interactively exploring and annotating; the scRNAseq data and running SAM.; Dependencies can be installed with Anaconda by following the instructions in; the self-assembling-manifold Github README:; atarashansky/self-assembling-manifold; In a Jupyter notebook, execute the following to launch the interface:; >>> from samalg.gui import SAMGUI; >>> sam_gui = SAMGUI(sam_obj) # sam_obj is your SAM object; >>> sam_gui.SamPlot. This can also be enabled in Jupyer Lab by following the instructions in the; self-assembling-manifold README. previous; scanpy.external.tl.trimap. next; scanpy.external.tl.phenograph. Contents; . sam(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:14813,install,installed,14813,en/stable/external/generated/scanpy.external.tl.sam.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html,1,['install'],['installed']
Deployability," Bug fixes. Version 1.8; 1.8.2 2021-11-3; Documentation; Bug fixes; Ecosystem. 1.8.1 2021-07-07; Bug fixes. 1.8.0 2021-06-28; Metrics module; Features; Ecosystem; Documentation; Bug fixes; Development Process; Deprecations. Version 1.7; 1.7.2 2021-04-07; Bug fixes; Ecosystem. 1.7.1 2021-02-24; Documentation; Bug fixes. 1.7.0 2021-02-03; Features; External tools (new); External tools (changes); Documentation; Performance; Bugfixes. Version 1.6; 1.6.0 2020-08-15; Overhaul of dotplot(), matrixplot(), and stacked_violin() pr1210 F Ramirez; Additions; Bug fixes. Version 1.5; 1.5.1 2020-05-21; Bug fixes. 1.5.0 2020-05-15; Spatial data support; New functionality; External tools; Performance; Code design; Bug fixes. Version 1.4; 1.4.6 2020-03-17; Functionality in external; Code design; Bug fixes. 1.4.5 2019-12-30; New functionality; Code design. 1.4.4 2019-07-20; New functionality; Bug fixes; Code design. 1.4.3 2019-05-14; Bug fixes; Code design. 1.4.2 2019-05-06; New functionality; Bug fixes; Code design. 1.4.1 2019-04-26; New functionality; Code design. Version 1.3; 1.3.8 2019-02-05; 1.3.7 2019-01-02; 1.3.6 2018-12-11; Major updates; Interactive exploration of analysis results through manifold viewers; Code design. 1.3.5 2018-12-09; 1.3.4 2018-11-24; 1.3.3 2018-11-05; Major updates; Code design. 1.3.1 2018-09-03; RNA velocity in single cells LaManno2018; Plotting (pl-generic); There now is a section on imputation in external:. Version 1.2; 1.2.1 2018-06-08; Plotting of pl-generic marker genes and quality control. 1.2.0 2018-06-08. Version 1.1; 1.1.0 2018-06-01. Version 1.0; 1.0.0 2018-03-30; Major updates; Further updates. Version 0.4; 0.4.4 2018-02-26; 0.4.3 2018-02-09; 0.4.2 2018-01-07; 0.4.0 2017-12-23. Version 0.3; 0.3.2 2017-11-29; 0.3.0 2017-11-16. Version 0.2; 0.2.9 2017-10-25; Initial release of the new trajectory inference method PAGA. 0.2.1 2017-07-24. Version 0.1; 0.1.0 2017-05-17. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:54314,update,updates,54314,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,5,"['release', 'update']","['release', 'updates']"
Deployability," None (default: None)Name of the AnnData object layer that wants to be plotted. By default; adata.raw.X is plotted. If use_raw=False is set, then adata.X is plotted.; If layer is set to a valid layer name, then the layer is plotted. layer; takes precedence over use_raw. edges bool (default: False)Show edges. edges_width float (default: 0.1)Width of edges. edges_color str | Sequence[float] | Sequence[str] (default: 'grey')Color of edges. See draw_networkx_edges(). neighbors_key str | None (default: None)Where to look for neighbors connectivities.; If not specified, this looks .obsp[‘connectivities’] for connectivities; (default storage place for pp.neighbors).; If specified, this looks; .obsp[.uns[neighbors_key][‘connectivities_key’]] for connectivities. arrows bool (default: False)Show arrows (deprecated in favour of scvelo.pl.velocity_embedding). arrows_kwds Mapping[str, Any] | None (default: None)Passed to quiver(). sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center'",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html:11699,continuous,continuous,11699,en/stable/generated/scanpy.external.pl.phate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html,5,['continuous'],['continuous']
Deployability," None (default: None)image data to plot, overrides img_key. scale_factor float | None (default: None)Scaling factor used to map from coordinate space to pixel space.; Found by default if library_id and img_key can be resolved.; Otherwise defaults to 1.. spot_size float | None (default: None)Diameter of spot (in coordinate space) for each point. Diameter; in pixels of the spots will be size * spot_size * scale_factor.; This argument is required if it cannot be resolved from library info. crop_coord tuple[int, int, int, int] | None (default: None)Coordinates to use for cropping the image (left, right, top, bottom).; These coordinates are expected to be in pixel space (same as basis); and will be transformed by scale_factor.; If not provided, image is automatically cropped to bounds of basis,; plus a border. alpha_img float (default: 1.0)Alpha value for image. bw bool | None (default: False)Plot image data in gray scale. sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center'",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html:13275,continuous,continuous,13275,en/stable/api/generated/scanpy.pl.spatial.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html,1,['continuous'],['continuous']
Deployability," PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAP’s implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tu",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10668,integrat,integration,10668,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integration']
Deployability," Waskom, Olga Botvinnik, Drewokane, Paul Hobson, , David, Yaroslav Halchenko, Saulius Lukauskas, John B. Cole, Jordi Warmenhoven, Julian De Ruiter, Stephan Hoyer, Jake Vanderplas, Santi Villalba, Gero Kunter, Eric Quintero, Marcel Martin, Alistair Miles, Kyle Meyer, Tom Augspurger, Tal Yarkoni, Pete Bachant, Mike Williams, Constantine Evans, Clark Fitzgerald, , Brian, Daniel Wehner, Gregory Hitz, Erik Ziegler, Adel Qalieh, and Antony Lee. Seaborn: v0.7.1 (june 2016). 2016. URL: https://zenodo.org/record/54844, doi:10.5281/ZENODO.54844. [WWK17]; Caleb Weinreb, Samuel Wolock, and Allon M Klein. Spring: a kinetic interface for visualizing high dimensional single-cell expression data. Bioinformatics, 34(7):1246–1248, dec 2017. URL: https://doi.org/10.1093/bioinformatics/btx792, doi:10.1093/bioinformatics/btx792. [WKSR+09]; Dominik M Wittmann, Jan Krumsiek, Julio Saez-Rodriguez, Douglas A Lauffenburger, Steffen Klamt, and Fabian J Theis. Transforming boolean models to continuous models: methodology and application to t-cell receptor signaling. BMC Systems Biology, sep 2009. URL: https://doi.org/10.1186/1752-0509-3-98, doi:10.1186/1752-0509-3-98. [WAT18]; F. Alexander Wolf, Philipp Angerer, and Fabian J. Theis. Scanpy: large-scale single-cell gene expression data analysis. Genome Biology, 19(1):15, feb 2018. URL: https://doi.org/10.1186/s13059-017-1382-0, doi:10.1186/s13059-017-1382-0. [WHP+19]; F. Alexander Wolf, Fiona K. Hamey, Mireya Plass, Jordi Solana, Joakim S. Dahlin, Berthold Göttgens, Nikolaus Rajewsky, Lukas Simon, and Fabian J. Theis. Paga: graph abstraction reconciles clustering with trajectory inference through a topology preserving map of single cells. Genome Biology, mar 2019. URL: https://doi.org/10.1186/s13059-019-1663-x, doi:10.1186/s13059-019-1663-x. [WLK19]; Samuel L. Wolock, Romain Lopez, and Allon M. Klein. Scrublet: computational identification of cell doublets in single-cell transcriptomic data. Cell Systems, 8(4):281–291.e9, apr 2019. URL: https:/",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:28315,continuous,continuous,28315,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['continuous'],['continuous']
Deployability," and uses the same broadcasting rules as other arguments pr1538 I Virshup; print_versions() now uses session_info pr2089 P Angerer I Virshup. Ecosystem#; Multiple packages have been added to our ecosystem page, including:. decoupler a for footprint analysis and pathway enrichement pr2186 PB Mompel; dandelion for B-cell receptor analysis pr1953 Z Tuong; CIARA a feature selection tools for identifying rare cell types pr2175 M Stock. Bug fixes#. Fixed finding variables with use_raw=True and basis=None in scanpy.pl.scatter() pr2027 E Rice; Fixed scanpy.pp.scrublet() to address issue1957 FlMai and ensure raw counts are used for simulation; Functions in scanpy.datasets no longer throw OldFormatWarnings when using anndata 0.8 pr2096 I Virshup; Fixed use of scanpy.pp.neighbors() with method='rapids': RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. pr1828 M Zaslavsky; Removed pytables dependency by implementing read_10x_h5 with h5py due to installation errors on Windows pr2064; Fixed bug in scanpy.external.pp.hashsolo() where default value was set improperly pr2190 B Reiz; Fixed bug in scanpy.pl.embedding() functions where an error could be raised when there were missing values and large numbers of categories pr2187 I Virshup. Version 1.8#. 1.8.2 2021-11-3#. Documentation#. Update conda installation instructions pr1974 L Heumos. Bug fixes#. Fix plotting after scanpy.tl.filter_rank_genes_groups() pr1942 S Rybakov; Fix use_raw=None using anndata.AnnData.var_names if anndata.AnnData.raw; is present in scanpy.tl.score_genes() pr1999 M Klein; Fix compatibility with UMAP 0.5.2 pr2028 L Mcinnes; Fixed non-determinism in scanpy.pl.paga() node positions pr1922 I Virshup. Ecosystem#. Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem. 1.8.1 2021-07-07#. Bug fixes#. Fixed reproducibility of scanpy.tl.score_genes(). Calculation and output is now float64 type. pr1890 I Kucins",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:24820,install,installation,24820,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['install'],['installation']
Deployability," basis='X_pca', adjusted_basis='X_scanorama', knn=20, sigma=15, approx=True, alpha=0.1, batch_size=5000, **kwargs)[source]#; Use Scanorama [Hie et al., 2019] to integrate different experiments.; Scanorama [Hie et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments stored in an AnnData object. This; function should be run after performing PCA but before computing; the neighbor graph, as illustrated in the example below.; This uses the implementation of scanorama [Hie et al., 2019]. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. Cells from the same batch must be; contiguously stored in adata. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_scanorama')The name of the field in adata.obsm where the integrated; embeddings will be stored after running this function. Defaults; to X_scanorama. knn int (default: 20)Number of nearest neighbors to use for matching. sigma float (default: 15)Correction smoothing parameter on Gaussian kernel. approx bool (default: True)Use approximate nearest neighbors with Python annoy;; greatly speeds up matching runtime. alpha float (default: 0.1)Alignment score minimum cutoff. batch_size int (default: 5000)The batch size used in the alignment vector computation. Useful; when integrating very large (>100k samples) datasets. Set to; large value that runs within available memory. kwargsAny additional arguments will be passed to; scanorama.assemble(). Return type:; None. Returns:; Updates adata with the field adata.obsm[adjusted_basis],; containing Scanorama embeddings such that different experiments; are integrated. Example; First, load libraries and example dataset, and preprocess.; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> adata = sc.datasets.pbmc3k(); >>> ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:10390,integrat,integrated,10390,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,1,['integrat'],['integrated']
Deployability," boolean columns of .var which identify variables you could; want to control for (e.g. “ERCC” or “mito”). percent_top Collection[int] | None (default: (50, 100, 200, 500))List of ranks (where genes are ranked by expression) at which the cumulative; proportion of expression will be reported as a percentage. This can be used to; assess library complexity. Ranks are considered 1-indexed, and if empty or None; don’t calculate.; E.g. percent_top=[50] finds cumulative proportion to the 50th most expressed gene. layer str | None (default: None)If provided, use adata.layers[layer] for expression values instead; of adata.X. use_raw bool (default: False)If True, use adata.raw.X for expression values instead of adata.X. inplace bool (default: False)Whether to place calculated metrics in adata’s .obs and .var. log1p bool (default: True)Set to False to skip computing log1p transformed annotations. Return type:; tuple[DataFrame, DataFrame] | None. Returns:; Depending on inplace returns calculated metrics; (as DataFrame) or updates adata’s obs and var.; Observation level metrics include:. total_{var_type}_by_{expr_type}E.g. “total_genes_by_counts”. Number of genes with positive counts in a cell. total_{expr_type}E.g. “total_counts”. Total number of counts for a cell. pct_{expr_type}_in_top_{n}_{var_type} – for n in percent_topE.g. “pct_counts_in_top_50_genes”. Cumulative percentage of counts; for 50 most expressed genes in a cell. total_{expr_type}_{qc_var} – for qc_var in qc_varsE.g. “total_counts_mito”. Total number of counts for variables in; qc_vars. pct_{expr_type}_{qc_var} – for qc_var in qc_varsE.g. “pct_counts_mito”. Proportion of total counts for a cell which; are mitochondrial. Variable level metrics include:. total_{expr_type}E.g. “total_counts”. Sum of counts for a gene. n_genes_by_{expr_type}E.g. “n_genes_by_counts”. The number of genes with at least 1 count in a cell. Calculated for all cells. mean_{expr_type}E.g. “mean_counts”. Mean expression over all cells. n_cell",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.calculate_qc_metrics.html:11185,update,updates,11185,en/stable/generated/scanpy.pp.calculate_qc_metrics.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.calculate_qc_metrics.html,1,['update'],['updates']
Deployability," comprehensive toolkit for working with spatial single cell omics data. PASTE Princeton. PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. bento 🍱 UC San Diego. Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. Multimodal integration#. MUON and MuData EMBL/ DKFZ. MUON, and it’s associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. Adaptive immune receptor repertoire (AIRR)#. scirpy Medical University of Innsbruck. scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. dandelion University of Cambridge. dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. Long reads#. Swan UC Irvine. Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. Analysis methods#. scvi-tools#. scvi-tools Berkeley. scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. Fate mapping#. CellRank Helmholtz Munich. CellRank is a framework to uncover cellular dynamics based on single-cell data.; It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. Differential expression#. diffxpy Helmholtz Munich. Data integration#. scanaroma MIT. Modeling perturbations#. scGen / trVAE Helmholtz Munich. Feature selection#. triku 🦔 ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:11325,integrat,integrates,11325,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,1,['integrat'],['integrates']
Deployability," dpt() draw_graph(); umap() diffmap(); paga() require prior computation of the graph:; sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata) instead of; previously sc.tl.louvain(adata, n_neighbors=5); install numba via conda install numba, which replaces cython; the default connectivity measure (dpt will look different using default; settings) changed. setting method='gauss' in sc.pp.neighbors uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example paul15.; namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; replace occurances of group_by with groupby (consistency with; pandas); it is worth checking out the notebook examples to see changes, e.g.; the seurat example.; upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different. Further updates#. UMAP [McInnes et al., 2018] can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see neighbors() A Wolf; graph abstraction: AGA is renamed to PAGA: paga(); now,; it only measures connectivities between partitions of the single-cell graph,; pseudotime and clustering need to be computed separately via; louvain() and dpt(), the; connectivity measure has been improved A Wolf; logistic regression for finding marker genes; rank_genes_groups() with parameter method='logreg' A Wolf; louvain() provides a better implementation for; reclustering via restrict_to A Wolf; scanpy no longer modifies rcParams upon import, call; settings.set_figure_params to set the ‘scanpy style’ A Wolf; default cache directory is ./cache/, set settings.cachedir to change; this; nested directories in this are avoided A Wolf; show edges in scatter plo",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:49548,update,updates,49548,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['update'],['updates']
Deployability," for identifying rare cell types pr2175 M Stock. Bug fixes#. Fixed finding variables with use_raw=True and basis=None in scanpy.pl.scatter() pr2027 E Rice; Fixed scanpy.pp.scrublet() to address issue1957 FlMai and ensure raw counts are used for simulation; Functions in scanpy.datasets no longer throw OldFormatWarnings when using anndata 0.8 pr2096 I Virshup; Fixed use of scanpy.pp.neighbors() with method='rapids': RAPIDS cuML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. pr1828 M Zaslavsky; Removed pytables dependency by implementing read_10x_h5 with h5py due to installation errors on Windows pr2064; Fixed bug in scanpy.external.pp.hashsolo() where default value was set improperly pr2190 B Reiz; Fixed bug in scanpy.pl.embedding() functions where an error could be raised when there were missing values and large numbers of categories pr2187 I Virshup. Version 1.8#. 1.8.2 2021-11-3#. Documentation#. Update conda installation instructions pr1974 L Heumos. Bug fixes#. Fix plotting after scanpy.tl.filter_rank_genes_groups() pr1942 S Rybakov; Fix use_raw=None using anndata.AnnData.var_names if anndata.AnnData.raw; is present in scanpy.tl.score_genes() pr1999 M Klein; Fix compatibility with UMAP 0.5.2 pr2028 L Mcinnes; Fixed non-determinism in scanpy.pl.paga() node positions pr1922 I Virshup. Ecosystem#. Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem. 1.8.1 2021-07-07#. Bug fixes#. Fixed reproducibility of scanpy.tl.score_genes(). Calculation and output is now float64 type. pr1890 I Kucinski; Workarounds for some changes/ bugs in pandas 1.3 pr1918 I Virshup; Fixed bug where sc.pl.paga_compare could mislabel nodes on the paga graph pr1898 I Virshup; Fixed handling of use_raw with scanpy.tl.rank_genes_groups() pr1934 I Virshup. 1.8.0 2021-06-28#. Metrics module#. Added scanpy.metrics module!. Added scanpy.metrics.gearys_c() for spatial autocorrelation pr915 I Virshup; ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:25161,Update,Update,25161,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,"['Update', 'install']","['Update', 'installation']"
Deployability," for leiden clustering by scanpy.external.tl.phenograph() pr1080 A Mousa; Deprecate scanpy.external.pp.scvi pr1554 G Xing; Updated default params of sam() to work with larger data pr1540 A Tarashansky. Documentation#. New contribution guide pr1544 I Virshup; zsh installation instructions pr1444 P Angerer. Performance#. Speed up read_10x_h5() pr1402 P Weiler; Speed ups for obs_df() pr1499 F Ramirez. Bugfixes#. Consistent fold-change, fractions calculation for filter_rank_genes_groups pr1391 S Rybakov; Fixed bug where score_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integer dense arrays pr1400 I Virshup; Fix docstring formatting for rank_genes_groups() pr1417 P Weiler; Removed PendingDeprecationWarning`s from use of `np.matrix pr1424 P Weiler; Fixed indexing byg in ~scanpy.pp.highly_variable_genes pr1456 V Bergen; Fix default number of genes for marker_genes_overlap pr1464 MD Luecken; Fixed passing groupby and dendrogram_key to dendrogram() pr1465 M Varma; Fixed download path of pbmc3k_processed pr1472 D Strobl; Better error message when computing DE with a group of size 1 pr1490 J Manning; Update cugraph API usage for v0.16 pr1494 R Ilango; Fixed marker_gene_overlap default value for top_n_markers pr1464 MD Luecken; Pass random_state to RAPIDs UMAP pr1474 C Nolet; Fixed anndata version requirement for concat() (re-exported from scanpy as sc.concat) pr1491 I Virshup; Fixed the width of the progress bar when downloading data pr1507 M Klein; Updated link for moignard15 dataset pr1542 I Virshup; Fixed bug where calling set_figure_params could block if IPython was installed, but not used. pr1547 I Virshup; violin() no longer fails if .raw not present pr1548 I Virshup; spatial() refactoring and better handling of spatial data pr1512 G Palla; pca() works with chunked=True again pr1592 I Virshup; ingest() now works with umap-learn 0.5.0 pr1601 S Rybakov. Version 1.6#. 1.6.0 2020-08-15#; This release includes an overhaul of dotplot(), mat",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:33273,Update,Update,33273,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['Update'],['Update']
Deployability," genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson resi",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23752,pipeline,pipelines,23752,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['pipeline'],['pipelines']
Deployability," if filtering is needed.; some arguments were renamed; copy is replaced by inplace. Normalize each cell by total counts over all genes, so that every cell has; the same total count after normalization.; Similar functions are used, for example, by Seurat [Satija et al., 2015], Cell Ranger; [Zheng et al., 2017] or SPRING [Weinreb et al., 2017]. Parameters:. data AnnData | ndarray | spmatrixThe (annotated) data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes. counts_per_cell_after float | None (default: None)If None, after normalization, each cell has a total count equal; to the median of the counts_per_cell before normalization. counts_per_cell ndarray | None (default: None)Precomputed counts per cell. key_n_counts str (default: 'n_counts')Name of the field in adata.obs where the total counts per cell are; stored. copy bool (default: False)If an AnnData is passed, determines whether a copy; is returned. min_counts int (default: 1)Cells with counts less than min_counts are filtered out during; normalization. Return type:; AnnData | ndarray | spmatrix | None. Returns:; Returns None if copy=False, else returns an updated AnnData object. Sets the following fields:. adata.Xnumpy.ndarray | scipy.sparse._csr.csr_matrix (dtype float)Normalized count data matrix. Examples; >>> import scanpy as sc; >>> adata = AnnData(np.array([[1, 0], [3, 0], [5, 6]], dtype=np.float32)); >>> print(adata.X.sum(axis=1)); [ 1. 3. 11.]; >>> sc.pp.normalize_per_cell(adata); >>> print(adata.obs); n_counts; 0 1.0; 1 3.0; 2 11.0; >>> print(adata.X.sum(axis=1)); [3. 3. 3.]; >>> sc.pp.normalize_per_cell(; ... adata, counts_per_cell_after=1,; ... key_n_counts='n_counts2',; ... ); >>> print(adata.obs); n_counts n_counts2; 0 1.0 3.0; 1 3.0 3.0; 2 11.0 3.0; >>> print(adata.X.sum(axis=1)); [1. 1. 1.]. previous; scanpy.pp.filter_genes_dispersion. next; External API. Contents; . normalize_per_cell(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_per_cell.html:10916,update,updated,10916,en/stable/generated/scanpy.pp.normalize_per_cell.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_per_cell.html,1,['update'],['updated']
Deployability," module. scanpy.external.exporting. ; module. scanpy.external.pl. ; module. scanpy.external.pp. ; module. scanpy.external.tl. ; module. scanpy.get. ; module. scanpy.metrics. ; module. scanpy.pl. ; module. scanpy.pp. ; module. scanpy.queries. ; module. scanpy.tl. ; module. ScanpyConfig (class in scanpy._settings). scatter() (in module scanpy.pl). score_genes() (in module scanpy.tl). score_genes_cell_cycle() (in module scanpy.tl). scrublet() (in module scanpy.pp). scrublet_score_distribution() (in module scanpy.pl). scrublet_simulate_doublets() (in module scanpy.pp). set_figure_params() (in module scanpy). (scanpy._settings.ScanpyConfig method). show() (scanpy.pl.DotPlot method). (scanpy.pl.MatrixPlot method). (scanpy.pl.StackedViolin method). sim() (in module scanpy.pl). (in module scanpy.tl). spatial() (in module scanpy.pl). spring_project() (in module scanpy.external.exporting). stacked_violin() (in module scanpy.pl). StackedViolin (class in scanpy.pl). style() (scanpy.pl.DotPlot method). (scanpy.pl.MatrixPlot method). (scanpy.pl.StackedViolin method). subsample() (in module scanpy.pp). swap_axes() (scanpy.pl.DotPlot method). (scanpy.pl.MatrixPlot method). (scanpy.pl.StackedViolin method). T. to_igraph() (scanpy.Neighbors method). toggleswitch() (in module scanpy.datasets). tracksplot() (in module scanpy.pl). transitions (scanpy.Neighbors property). transitions_sym (scanpy.Neighbors property). trimap() (in module scanpy.external.pl). (in module scanpy.external.tl). tsne() (in module scanpy.pl). (in module scanpy.tl). U. umap() (in module scanpy.pl). (in module scanpy.tl). V. var_df() (in module scanpy.get). verbosity (scanpy._settings.ScanpyConfig property). violin() (in module scanpy.pl). visium_sge() (in module scanpy.datasets). W. wishbone() (in module scanpy.external.tl). wishbone_marker_trajectory() (in module scanpy.external.pl). writedir (scanpy._settings.ScanpyConfig property). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/genindex.html:19836,toggle,toggleswitch,19836,en/stable/genindex.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/genindex.html,1,['toggle'],['toggleswitch']
Deployability," release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed someth",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10366,release,release,10366,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability," release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Deb",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10320,patch,patch,10320,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,2,"['patch', 'release']","['patch', 'release']"
Deployability," scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.getdoc. Contents . DotPlot.getdoc(). scanpy.pl.DotPlot.getdoc#. DotPlot.getdoc() → str | None[source]#. previous; scanpy.pl.DotPlot.get_axes. next; scanpy.pl.DotPlot.legend. Contents; . DotPlot.getdoc(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.getdoc.html:9058,Release,Release,9058,en/stable/api/generated/classes/scanpy.pl.DotPlot.getdoc.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.getdoc.html,2,"['Release', 'release']","['Release', 'release']"
Deployability," scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Spatial. Spatial#. Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. previous; Trajectory inference for hematopoiesis in mouse. next; Analysis and visualization of spatial transcriptomics data. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:9041,Release,Release,9041,en/stable/tutorials/spatial/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html,3,"['Integrat', 'Release', 'release']","['Integrating', 'Release', 'release']"
Deployability," scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT. Contents . MatrixPlot.MIN_FIGURE_HEIGHT. scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT#. MatrixPlot.MIN_FIGURE_HEIGHT = 2.5[source]#. previous; scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES. next; scanpy.pl.MatrixPlot.add_dendrogram. Contents; . MatrixPlot.MIN_FIGURE_HEIGHT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:9072,Release,Release,9072,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability," scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT. Contents . StackedViolin.DEFAULT_CATEGORY_HEIGHT. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT#. StackedViolin.DEFAULT_CATEGORY_HEIGHT = 0.35[source]#. previous; scanpy.pl.StackedViolin. next; scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH. Contents; . StackedViolin.DEFAULT_CATEGORY_HEIGHT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:9081,Release,Release,9081,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability," scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE. Contents . StackedViolin.DEFAULT_ROW_PALETTE. scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE#. StackedViolin.DEFAULT_ROW_PALETTE = None[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING. next; scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX. Contents; . StackedViolin.DEFAULT_ROW_PALETTE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:9077,Release,Release,9077,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability," scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9958,release,releases,9958,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['releases']
Deployability," scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9377,integrat,integration,9377,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,2,['integrat'],['integration']
Deployability," scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Ecosystem. Contents . Viewers; Portals; Modalities; RNA velocity; Spatial Transcriptomics Tools; Multimodal integration; Adaptive immune receptor repertoire (AIRR); Long reads. Analysis methods; scvi-tools; Fate mapping; Differential expression; Data integration; Modeling perturbations; Feature selection; Annotation/ Enrichment Analysis. Ecosystem#. Warning; We are no longer accepting new tools on this page.; Instead, please submit your tool to the scverse ecosystem package listing. Viewers#; Interactive manifold viewers. cellxgene via direct reading of .h5ad CZI; cirrocumulus via direct reading of .h5ad Broad Inst.; cell browser via exporing through cellbrowser() UCSC; SPRING via exporting through spring_project() Harvard Med; vitessce for purely browser based viewing of zarr formatted AnnData files Harvard Med. Portals#. the Gene Expression Analysis Resource U Maryland; the Galaxy Project for the Human Cell Atlas [tweet] U Freiburg; the Expression Atlas EMBL-EBI. Modalities#. RNA velocity#. scVelo Helmholtz Munich. Spatial Transcriptomics Tools#. squidpy Helmholtz Munich. Squidpy is a comprehensive toolkit for working with spatial single cell omics data. PASTE Princeton. PASTE is a computational method to align and integrate spatial tra",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:9468,integrat,integration,9468,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,1,['integrat'],['integration']
Deployability," type 2 diabetes. Cell Metabolism, 24(4):593–607, oct 2016. URL: https://doi.org/10.1016/j.cmet.2016.08.020, doi:10.1016/j.cmet.2016.08.020. [SKL+19]; Manu Setty, Vaidotas Kiseliovas, Jacob Levine, Adam Gayoso, Linas Mazutis, and Dana Pe’er. Characterization of cell fate probabilities in single-cell data with palantir. Nature Biotechnology, 37(4):451–460, mar 2019. URL: https://doi.org/10.1038/s41587-019-0068-4, doi:10.1038/s41587-019-0068-4. [STRZ+16]; Manu Setty, Michelle D Tadmor, Shlomit Reich-Zeliger, Omer Angel, Tomer Meir Salame, Pooja Kathail, Kristy Choi, Sean Bendall, Nir Friedman, and Dana Pe’er. Wishbone identifies bifurcating developmental trajectories from single-cell data. Nature Biotechnology, 34(6):637–645, may 2016. URL: https://doi.org/10.1038/nbt.3569, doi:10.1038/nbt.3569. [SBH+19]; Tim Stuart, Andrew Butler, Paul Hoffman, Christoph Hafemeister, Efthymia Papalexi, William M. Mauck, Yuhan Hao, Marlon Stoeckius, Peter Smibert, and Rahul Satija. Comprehensive integration of single-cell data. Cell, 177(7):1888–1902.e21, jun 2019. URL: https://doi.org/10.1016/j.cell.2019.05.031, doi:10.1016/j.cell.2019.05.031. [TXL+19]; Alexander J Tarashansky, Yuan Xue, Pengyang Li, Stephen R Quake, and Bo Wang. Self-assembling manifolds in single-cell rna sequencing data. eLife, sep 2019. URL: https://doi.org/10.7554/eLife.48994, doi:10.7554/elife.48994. [TWvE19]; V. A. Traag, L. Waltman, and N. J. van Eck. From louvain to leiden: guaranteeing well-connected communities. Scientific Reports, mar 2019. URL: https://doi.org/10.1038/s41598-019-41695-z, doi:10.1038/s41598-019-41695-z. [Tra15]; Vincent Traag. Louvain-igraph: v0.5.3. 2015. URL: https://zenodo.org/record/35117, doi:10.5281/ZENODO.35117. [Uly16]; Dmitry Ulyanov. Multicore-tsne. DmitryUlyanov/Multicore-TSNE, 2016. URL: DmitryUlyanov/Multicore-TSNE. [vdMH08]; Laurens van der Maaten and Geoffrey Hinton. Visualizing data using t-sne. Journal of Machine Learning Research, 9(86):2579–2605, 2008. URL: http://jmlr.o",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:25435,integrat,integration,25435,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['integrat'],['integration']
Deployability," within-batch residual; variance. chunksize int (default: 1000)If flavor='pearson_residuals', this dertermines how many genes are processed at; once while computing the residual variance. Choosing a smaller value will reduce; the required memory. flavor Literal['pearson_residuals'] (default: 'pearson_residuals')Choose the flavor for identifying highly variable genes. In this experimental; version, only ‘pearson_residuals’ is functional. check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. layer str | None (default: None)Layer to use as input instead of X. If None, X is used. subset bool (default: False)If True, subset the data to highly-variable genes after finding them.; Otherwise merely indicate highly variable genes in adata.var (see below). inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. Return type:; DataFrame | None. Returns:; If inplace=True, adata.var is updated with the following fields. Otherwise,; returns the same fields as DataFrame. highly_variableboolboolean indicator of highly-variable genes. meansfloatmeans per gene. variancesfloatvariance per gene. residual_variancesfloatFor flavor='pearson_residuals', residual variance per gene. Averaged in the; case of multiple batches. highly_variable_rankfloatFor flavor='pearson_residuals', rank of the gene according to residual.; variance, median rank in the case of multiple batches. highly_variable_nbatchesintIf batch_key given, denotes in how many batches genes are detected as HVG. highly_variable_intersectionboolIf batch_key given, denotes the genes that are highly variable in all batches. Notes; Experimental version of sc.pp.highly_variable_genes(). previous; scanpy.experimental.pp.normalize_pearson_residuals_pc",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html:12217,update,update,12217,en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,1,['update'],['update']
Deployability,"() plots now support passing dict of {cluster_name: cluster_color, ...} for palette argument pr1392 I Virshup. External tools (new)#. Add Scanorama integration to scanpy external API (scanorama_integrate(), Hie et al. [2019]) pr1332 B Hie; Scrublet [Wolock et al., 2019] integration: scrublet(), scrublet_simulate_doublets(), and plotting method scrublet_score_distribution() pr1476 J Manning; hashsolo() for HTO demultiplexing [Bernstein et al., 2020] pr1432 NJ Bernstein; Added scirpy (sc-AIRR analysis) to ecosystem page pr1453 G Sturm; Added scvi-tools to ecosystem page pr1421 A Gayoso. External tools (changes)#. Updates for palantir() and palantir_results() pr1245 A Mousa; Fixes to harmony_timeseries() docs pr1248 A Mousa; Support for leiden clustering by scanpy.external.tl.phenograph() pr1080 A Mousa; Deprecate scanpy.external.pp.scvi pr1554 G Xing; Updated default params of sam() to work with larger data pr1540 A Tarashansky. Documentation#. New contribution guide pr1544 I Virshup; zsh installation instructions pr1444 P Angerer. Performance#. Speed up read_10x_h5() pr1402 P Weiler; Speed ups for obs_df() pr1499 F Ramirez. Bugfixes#. Consistent fold-change, fractions calculation for filter_rank_genes_groups pr1391 S Rybakov; Fixed bug where score_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integer dense arrays pr1400 I Virshup; Fix docstring formatting for rank_genes_groups() pr1417 P Weiler; Removed PendingDeprecationWarning`s from use of `np.matrix pr1424 P Weiler; Fixed indexing byg in ~scanpy.pp.highly_variable_genes pr1456 V Bergen; Fix default number of genes for marker_genes_overlap pr1464 MD Luecken; Fixed passing groupby and dendrogram_key to dendrogram() pr1465 M Varma; Fixed download path of pbmc3k_processed pr1472 D Strobl; Better error message when computing DE with a group of size 1 pr1490 J Manning; Update cugraph API usage for v0.16 pr1494 R Ilango; Fixed marker_gene_overlap default value for top_n_markers pr1464 ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:32391,install,installation,32391,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['install'],['installation']
Deployability,"() replaces normalize_per_cell(), is more efficient and provides a parameter to only normalize using a fraction of expressed genes S Rybakov; downsample_counts() has been sped up, changed default value of replace parameter to False pr474 I Virshup; embedding_density() computes densities on embeddings pr543 M Luecken; palantir() interfaces Palantir [Setty et al., 2019] pr493 A Mousa. Code design#. .layers support of scatter plots F Ramirez; fix double-logarithmization in compute of log fold change in rank_genes_groups() A Muñoz-Rojas; fix return sections of docs P Angerer. Version 1.3#. 1.3.8 2019-02-05#. various documentation and dev process improvements; Added combat() function for batch effect correction [Johnson et al., 2006, Leek et al., 2017, Pedersen, 2012] pr398 M Lange. 1.3.7 2019-01-02#. API changed from import scanpy as sc to import scanpy.api as sc.; phenograph() wraps the graph clustering package Phenograph [Levine et al., 2015] thanks to A Mousa. 1.3.6 2018-12-11#. Major updates#. a new plotting gallery for visualizing-marker-genes F Ramirez; tutorials are integrated on ReadTheDocs, pbmc3k and paga-paul15 A Wolf. Interactive exploration of analysis results through manifold viewers#. CZI’s cellxgene directly reads .h5ad files the cellxgene developers; the UCSC Single Cell Browser requires exporting via cellbrowser() M Haeussler. Code design#. highly_variable_genes() supersedes filter_genes_dispersion(), it gives the same results but, by default, expects logarithmized data and doesn’t subset A Wolf. 1.3.5 2018-12-09#. uncountable figure improvements pr369 F Ramirez. 1.3.4 2018-11-24#. leiden() wraps the recent graph clustering package by Traag et al. [2019] K Polanski; bbknn() wraps the recent batch correction package [Polański et al., 2019] K Polanski; calculate_qc_metrics() caculates a number of quality control metrics, similar to calculateQCMetrics from Scater [McCarthy et al., 2017] I Virshup. 1.3.3 2018-11-05#. Major updates#. a fully distributed pre",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:44508,update,updates,44508,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['update'],['updates']
Deployability,"(1) fork the repository on github and (2) clone the repository to your local machine.; This is very straight forward if you’re using GitHub’s CLI:; $ gh repo fork scverse/scanpy --clone --remote. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the main development branch to track our repository.; To do this manually, first make a fork of the repository by clicking the “fork” button on our main github package. Then, on your machine, run:; $ # Clone your fork of the repository (substitute in your username); $ git clone https://github.com/{your-username}/scanpy.git; $ # Enter the cloned repository; $ cd scanpy; $ # Add our repository as a remote; $ git remote add upstream https://github.com/scverse/scanpy.git; $ # git branch --set-upstream-to ""upstream/main"". pre-commit#; We use pre-commit to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!; You can install pre-commit with:; $ pip install pre-commit. You can then install it to run while developing here with:; $ pre-commit install. From the root of the repo.; If you choose not to run the hooks on each commit, you can run them manually with pre-commit run --files={your files}. Creating a branch for your feature#; All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the main branch.; You can create a branch with:; $ git checkout main # Starting from the main branch; $ git pull # Syncing with the repo; $ git switch -c {your-branch-name} # Making and changing to the new branch. Open a pull request#; When you’re ready to have your code reviewed, push your changes up to your fork:; $ # The first time you push the branch, you'll need to tell git where; $ git push --set-upstream origin {your-branch-name}; $ # After that, just use; $ git push. And open a pull request by",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html:10917,install,install,10917,en/stable/dev/getting-set-up.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html,2,['install'],['install']
Deployability,"(; values=adata.obs.phase, categories=phases, ordered=True; ); sc.pl.umap(adata, color=[""phase"", ""phase_ordered""], wspace=0.5); # This just removes the newly added ordered column from adata as we do not need it below; adata.obs.drop(""phase_ordered"", axis=1, inplace=True). Change the Legend title and move the Legend to a different location. fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); ax = fig.axes[0]; ax.legend_.set_title(""Cell type""); # Change Legend location; ax.legend_.set_bbox_to_anchor((-0.2, -0.7)). Make a customized Legend by replacing the Legend instance in the plot.; In case we want to add multiple Legend instances we need to use plt.gca().add_artist(legend) (shown in one of the below sections). from matplotlib.lines import Line2D. fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); ax = fig.axes[0]; # Remove original Legend; ax.legend_.remove(); # Make new Legend; l1 = ax.legend(; # Add Legend element for each color group; handles=[; # Instead of Line2D we can also use other matplotlib objects, such as Patch, etc.; Line2D(; [0],; [0],; marker=""x"",; color=c,; lw=0,; label=l,; markerfacecolor=c,; markersize=7,; ); # Color groups in adata; for l, c in zip(; list(adata.obs.bulk_labels.cat.categories), adata.uns[""bulk_labels_colors""]; ); ],; # Customize Legend outline; # Remove background; frameon=False,; # Make more Legend columns; ncols=2,; # Change location to not overlap with the plot; bbox_to_anchor=(1, 1),; # Set title; title=""Cell type"",; ). Annotating scatter plots#; We can plot ontop of already created plots to mark objects.; Here we show how to encircle a single object on the plot and then add a new Legend to explain the mark. fig, ax = plt.subplots(figsize=(3, 3)); sc.pl.umap(adata, color=[""bulk_labels""], ax=ax, show=False). # Encircle part of the plot. # Find location on the plot where circle should be added; location_cells = adata[adata.obs.bulk_labels == ""CD56+ NK"", :].obsm[""X_umap""]; x = location_cells[:, 0].mean(",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:22760,Patch,Patch,22760,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,1,['Patch'],['Patch']
Deployability,"(default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_scanorama')The name of the field in adata.obsm where the integrated; embeddings will be stored after running this function. Defaults; to X_scanorama. knn int (default: 20)Number of nearest neighbors to use for matching. sigma float (default: 15)Correction smoothing parameter on Gaussian kernel. approx bool (default: True)Use approximate nearest neighbors with Python annoy;; greatly speeds up matching runtime. alpha float (default: 0.1)Alignment score minimum cutoff. batch_size int (default: 5000)The batch size used in the alignment vector computation. Useful; when integrating very large (>100k samples) datasets. Set to; large value that runs within available memory. kwargsAny additional arguments will be passed to; scanorama.assemble(). Return type:; None. Returns:; Updates adata with the field adata.obsm[adjusted_basis],; containing Scanorama embeddings such that different experiments; are integrated. Example; First, load libraries and example dataset, and preprocess.; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.recipe_zheng17(adata); >>> sc.pp.pca(adata). We now arbitrarily assign a batch metadata variable to each cell; for the sake of example, but during real usage there would already; be a column in adata.obs giving the experiment each cell came; from.; >>> adata.obs['batch'] = 1350*['a'] + 1350*['b']. Finally, run Scanorama. Afterwards, there will be a new table in; adata.obsm containing the Scanorama embeddings.; >>> sce.pp.scanorama_integrate(adata, 'batch', verbose=1); Processing datasets a <=> b; >>> 'X_scanorama' in adata.obsm; True. previous; scanpy.external.pp.mnn_correct. next; scanpy.external.pp.hashsolo. Contents; . scanorama_integrate(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:11237,integrat,integrated,11237,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,1,['integrat'],['integrated']
Deployability,"(default: None)Defaults to RBConfigurationVertexPartition. For the; available options, consult the documentation for; find_partition(). resolution_parameter float (default: 1)A parameter value controlling the coarseness of the clustering in Leiden. Higher; values lead to more clusters. Set to None if overriding partition_type to; one that does not accept a resolution_parameter. n_iterations int (default: -1)Number of iterations to run the Leiden algorithm. If the number of iterations is; negative, the Leiden algorithm is run until an iteration in which there was no; improvement. use_weights bool (default: True)Use vertices in the Leiden computation. seed int | None (default: None)Leiden initialization of the optimization. copy bool (default: False)Return a copy or write to adata. kargs AnyAdditional arguments passed to find_partition() and the; constructor of the partition_type. Return type:; tuple[ndarray | None, spmatrix, float | None] | None. Returns:; Depending on copy, returns or updates adata with the following fields:. communities - ndarray (obs, dtype int)integer array of community assignments for each row in data. graph - spmatrix (obsp, dtype float)the graph that was used for clustering. Q - float (uns, dtype float)the modularity score for communities on graph. Example; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> import numpy as np; >>> import pandas as pd. With annotated data as input:; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.normalize_per_cell(adata). Then do PCA:; >>> sc.pp.pca(adata, n_comps=100). Compute phenograph clusters:; Louvain community detection; >>> sce.tl.phenograph(adata, clustering_algo=""louvain"", k=30). Leiden community detection; >>> sce.tl.phenograph(adata, clustering_algo=""leiden"", k=30). Return only Graph object; >>> sce.tl.phenograph(adata, clustering_algo=None, k=30). Now to show phenograph on tSNE (for example):; Compute tSNE:; >>> sc.tl.tsne(adata, random_state=7). Plot phen",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:13208,update,updates,13208,en/stable/external/generated/scanpy.external.tl.phenograph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html,1,['update'],['updates']
Deployability,"*kwargs)[source]#; Scatter plot in Diffusion Map basis. Parameters:. adata AnnDataAnnotated data matrix. color str | Sequence[str] | None (default: None)Keys for annotations of observations/cells or variables/genes, e.g.,; 'ann1' or ['ann1', 'ann2']. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Setting this option allows; alternative names to be used. use_raw bool | None (default: None)Use .raw attribute of adata for coloring with gene expression. If None,; defaults to True if layer isn’t provided and adata.raw is present. layer str | None (default: None)Name of the AnnData object layer that wants to be plotted. By default; adata.raw.X is plotted. If use_raw=False is set, then adata.X is plotted.; If layer is set to a valid layer name, then the layer is plotted. layer; takes precedence over use_raw. sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center'",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.diffmap.html:11020,continuous,continuous,11020,en/stable/api/generated/scanpy.pl.diffmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.diffmap.html,1,['continuous'],['continuous']
Deployability,", float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbors(adata_spatial, use_rep=""X_scanorama""); sc.tl.umap(adata_spatial); sc.tl.leiden(; adata_spatial, key_added=""clusters"", n_iterations=2, flavor=""igraph"", directed=False; ). computing neighbors; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:02); computing UMAP; finished: added; 'X_umap', UMAP coo",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16492,integrat,integrated,16492,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integrated']
Deployability,", jan 2000. URL: https://doi.org/10.1038/35002131, doi:10.1038/35002131. [HBT15]; Laleh Haghverdi, Florian Buettner, and Fabian J. Theis. Diffusion maps for high-dimensional single-cell analysis of differentiation data. Bioinformatics, 31(18):2989–2998, may 2015. URL: https://doi.org/10.1093/bioinformatics/btv325, doi:10.1093/bioinformatics/btv325. [HBW+16]; Laleh Haghverdi, Maren Büttner, F Alexander Wolf, Florian Buettner, and Fabian J Theis. Diffusion pseudotime robustly reconstructs lineage branching. Nature Methods, 13(10):845–848, aug 2016. URL: https://doi.org/10.1038/nmeth.3971, doi:10.1038/nmeth.3971. [HLMM18]; Laleh Haghverdi, Aaron T L Lun, Michael D Morgan, and John C Marioni. Batch effects in single-cell rna-sequencing data are corrected by matching mutual nearest neighbors. Nature Biotechnology, 36(5):421–427, apr 2018. URL: https://doi.org/10.1038/nbt.4091, doi:10.1038/nbt.4091. [HBB19]; Brian Hie, Bryan Bryson, and Bonnie Berger. Efficient integration of heterogeneous single-cell transcriptomes using scanorama. Nature Biotechnology, 37(6):685–691, may 2019. URL: https://doi.org/10.1038/s41587-019-0113-3, doi:10.1038/s41587-019-0113-3. [IKM+11]; Saiful Islam, Una Kjällquist, Annalena Moliner, Pawel Zajac, Jian-Bing Fan, Peter Lönnerberg, and Sten Linnarsson. Characterization of the single-cell transcriptional landscape by highly multiplex rna-seq. Genome Research, 21(7):1160–1167, may 2011. URL: https://doi.org/10.1101/gr.110882.110, doi:10.1101/gr.110882.110. [JVHB14]; Mathieu Jacomy, Tommaso Venturini, Sebastien Heymann, and Mathieu Bastian. Forceatlas2, a continuous graph layout algorithm for handy network visualization designed for the gephi software. PLoS ONE, 9(6):e98679, jun 2014. URL: https://doi.org/10.1371/journal.pone.0098679, doi:10.1371/journal.pone.0098679. [JLR06]; W. Evan Johnson, Cheng Li, and Ariel Rabinovic. Adjusting batch effects in microarray expression data using empirical bayes methods. Biostatistics, 8(1):118–127, apr 2006. URL",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:14290,integrat,integration,14290,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['integrat'],['integration']
Deployability,. API — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_DOT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/index.html:59,Install,Installation,59,en/stable/api/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Basics — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:62,Install,Installation,62,en/stable/tutorials/basics/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. CI — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_DOT_E,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/ci.html:58,Install,Installation,58,en/stable/dev/ci.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/ci.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Classes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/classes.html:63,Install,Installation,63,en/stable/api/classes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/classes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Community — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAUL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/community.html:65,Install,Installation,65,en/stable/community.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/community.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Contributing code — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/code.html:73,Install,Installation,73,en/stable/dev/code.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/code.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Contributing — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/index.html:68,Install,Installation,68,en/stable/dev/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Contributors — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/contributors.html:68,Install,Installation,68,en/stable/contributors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/contributors.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Core plotting functions — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:79,Install,Installation,79,en/stable/tutorials/plotting/core.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Datasets — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/datasets.html:64,Install,Installation,64,en/stable/api/datasets.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/datasets.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Deprecated functions — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/deprecated.html:76,Install,Installation,76,en/stable/api/deprecated.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/deprecated.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Documentation — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DE,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:69,Install,Installation,69,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Ecosystem — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAUL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:65,Install,Installation,65,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Experimental — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/experimental.html:68,Install,Installation,68,en/stable/api/experimental.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/experimental.html,6,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Exporting — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAUL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/exporting.html:65,Install,Installation,65,en/stable/external/exporting.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/exporting.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. External API — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/index.html:68,Install,Installation,68,en/stable/external/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Get object from AnnData: get — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/get.html:84,Install,Installation,84,en/stable/api/get.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/get.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. How to — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/index.html:62,Install,Installation,62,en/stable/how-to/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Index — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_DO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/genindex.html:61,Install,Installation,61,en/stable/genindex.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/genindex.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Installation — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:2,Install,Installation,2,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,4,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Integrating data using ingest and BBKNN — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:2,Integrat,Integrating,2,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,4,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Making a release — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:11,release,release,11,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,4,"['Install', 'Integrat', 'release']","['Installation', 'Integrating', 'release']"
Deployability,. Metrics — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/metrics.html:63,Install,Installation,63,en/stable/api/metrics.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/metrics.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. News — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_DOT,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/news.html:60,Install,Installation,60,en/stable/news.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/news.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Plotting with Marsilea — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/plotting-with-marsilea.html:78,Install,Installation,78,en/stable/how-to/plotting-with-marsilea.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/plotting-with-marsilea.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Plotting — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:64,Install,Installation,64,en/stable/tutorials/plotting/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Plotting: PL — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/plotting.html:68,Install,Installation,68,en/stable/external/plotting.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/plotting.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,". Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.draw_graph. Contents . draw_graph(). scanpy.tl.draw_graph#. scanpy.tl.draw_graph(adata, layout='fa', *, init_pos=None, root=None, random_state=0, n_jobs=None, adjacency=None, key_added_ext=None, neighbors_key=None, obsp=None, copy=False, **kwds)[source]#; Force-directed graph drawing [Chippada, 2018, Islam et al., 2011, Jacomy et al., 2014].; An alternative to tSNE that often preserves the topology of the data; better. This requires to run neighbors(), first.; The default layout (‘fa’, ForceAtlas2, Jacomy et al. [2014]) uses the package fa2-modified; [Chippada, 2018], which can be installed via pip install fa2-modified.; Force-directed graph drawing describes a class of long-established; algorithms for visualizing graphs.; It has been suggested for visualizing single-cell data by Islam et al. [2011].; Many other layouts as implemented in igraph [Csárdi and Nepusz, 2006] are available.; Similar approaches have been used by Zunder et al. [2015] or Weinreb et al. [2017]. Parameters:. adata AnnDataAnnotated data matrix. layout Literal['fr', 'drl', 'kk', 'grid_fr', 'lgl', 'rt', 'rt_circular', 'fa'] (default: 'fa')‘fa’ (ForceAtlas2) or any valid igraph layout. Of particular interest; are ‘fr’ (Fruchterman Reingold), ‘grid_fr’ (Grid Fruchterman Reingold,; faster than ‘fr’), ‘kk’ (Kamadi Kawai’, slower than ‘fr’), ‘lgl’ (Large; Graph, very fast), ‘drl’ (Distributed Recursive Layout, pretty fast) and; ‘rt’ (Reingold Tilford tree layout). root int | None (default: None)Root for tree layouts. random_state Union[int, RandomState, None] (default: 0)For layout",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.draw_graph.html:9827,install,installed,9827,en/stable/generated/scanpy.tl.draw_graph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.draw_graph.html,2,['install'],"['install', 'installed']"
Deployability,. Plotting: pl — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/plotting.html:68,Install,Installation,68,en/stable/api/plotting.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/plotting.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Preprocessing and clustering 3k PBMCs (legacy workflow) — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotP,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:111,Install,Installation,111,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Preprocessing: PP — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html:73,Install,Installation,73,en/stable/external/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Preprocessing: pp — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html:73,Install,Installation,73,en/stable/api/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Queries — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/queries.html:63,Install,Installation,63,en/stable/api/queries.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/queries.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Reading — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/reading.html:63,Install,Installation,63,en/stable/api/reading.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/reading.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. References — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAU,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:66,Install,Installation,66,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Release notes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DE,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:2,Release,Release,2,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,4,"['Install', 'Integrat', 'Release']","['Installation', 'Integrating', 'Release']"
Deployability,. Search - scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/search.html:62,Install,Installation,62,en/stable/search.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/search.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Settings — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/settings.html:64,Install,Installation,64,en/stable/api/settings.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/settings.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Spatial — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html:63,Install,Installation,63,en/stable/tutorials/spatial/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Tests — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAULT_DO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/testing.html:61,Install,Installation,61,en/stable/dev/testing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/testing.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Tools: TL — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAUL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/tools.html:65,Install,Installation,65,en/stable/external/tools.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/tools.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Tools: tl — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAUL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/tools.html:65,Install,Installation,65,en/stable/api/tools.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/tools.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Trajectories — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:68,Install,Installation,68,en/stable/tutorials/trajectories/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Trajectory inference for hematopoiesis in mouse — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFA,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:103,Install,Installation,103,en/stable/tutorials/trajectories/paga-paul15.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Tutorials — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAUL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/index.html:65,Install,Installation,65,en/stable/tutorials/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Usage Principles — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/usage-principles.html:72,Install,Installation,72,en/stable/usage-principles.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/usage-principles.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Using dask with Scanpy — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:78,Install,Installation,78,en/stable/tutorials/experimental/dask.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Using other kNN libraries in Scanpy — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html:91,Install,Installation,91,en/stable/how-to/knn-transformers.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. Versioning — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFAU,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:66,Install,Installation,66,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,". paga() improved, see PAGA; the default model changed, restore the previous default model by passing model='v1.0'. Version 1.1#. 1.1.0 2018-06-01#. set_figure_params() by default passes vector_friendly=True and allows you to produce reasonablly sized pdfs by rasterizing large scatter plots A Wolf; draw_graph() defaults to the ForceAtlas2 layout [Chippada, 2018, Jacomy et al., 2014], which is often more visually appealing and whose computation is much faster S Wollock; scatter() also plots along variables axis MD Luecken; pca() and log1p() support chunk processing S Rybakov; regress_out() is back to multiprocessing F Ramirez; read() reads compressed text files G Eraslan; mitochondrial_genes() for querying mito genes FG Brundu; mnn_correct() for batch correction [Haghverdi et al., 2018, Kang, 2018]; phate() for low-dimensional embedding [Moon et al., 2019] S Gigante; sandbag(), cyclone() for scoring genes [Fechtner, 2018, Scialdone et al., 2015]. Version 1.0#. 1.0.0 2018-03-30#. Major updates#. Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in 6h, 130K cells in 14min, and 68K cells in 3min A Wolf; the API gained a preprocessing function neighbors() and a; class Neighbors() to which all basic graph computations are; delegated A Wolf. Warning; Upgrading to 1.0 isn’t fully backwards compatible in the following changes. the graph-based tools louvain(); dpt() draw_graph(); umap() diffmap(); paga() require prior computation of the graph:; sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata) instead of; previously sc.tl.louvain(adata, n_neighbors=5); install numba via conda install numba, which replaces cython; the default connectivity measure (dpt will look different using default; settings) changed. setting method='gauss' in sc.pp.neighbors uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example paul15.; namings of returned annotation have changed for less bloated AnnD",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:48130,update,updates,48130,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['update'],['updates']
Deployability,. scanpy.Neighbors — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.html:72,Install,Installation,72,en/stable/generated/scanpy.Neighbors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.compute_eigen — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sca,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_eigen.html:86,Install,Installation,86,en/stable/generated/scanpy.Neighbors.compute_eigen.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_eigen.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.compute_neighbors — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON;,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_neighbors.html:90,Install,Installation,90,en/stable/generated/scanpy.Neighbors.compute_neighbors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_neighbors.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.compute_transitions — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_transitions.html:92,Install,Installation,92,en/stable/generated/scanpy.Neighbors.compute_transitions.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_transitions.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.connectivities — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.connectivities.html:87,Install,Installation,87,en/stable/generated/scanpy.Neighbors.connectivities.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.connectivities.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.distances — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.distances.html:82,Install,Installation,82,en/stable/generated/scanpy.Neighbors.distances.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.distances.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.distances_dpt — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sca,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.distances_dpt.html:86,Install,Installation,86,en/stable/generated/scanpy.Neighbors.distances_dpt.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.distances_dpt.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.eigen_basis — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.eigen_basis.html:84,Install,Installation,84,en/stable/generated/scanpy.Neighbors.eigen_basis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.eigen_basis.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.eigen_values — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.eigen_values.html:85,Install,Installation,85,en/stable/generated/scanpy.Neighbors.eigen_values.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.eigen_values.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.getdoc — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.getdoc.html:79,Install,Installation,79,en/stable/generated/scanpy.Neighbors.getdoc.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.getdoc.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.rp_forest — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.rp_forest.html:82,Install,Installation,82,en/stable/generated/scanpy.Neighbors.rp_forest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.rp_forest.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.to_igraph — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.to_igraph.html:82,Install,Installation,82,en/stable/generated/scanpy.Neighbors.to_igraph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.to_igraph.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.transitions — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.transitions.html:84,Install,Installation,84,en/stable/generated/scanpy.Neighbors.transitions.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.transitions.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.Neighbors.transitions_sym — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; s,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.transitions_sym.html:88,Install,Installation,88,en/stable/generated/scanpy.Neighbors.transitions_sym.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.transitions_sym.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.html:85,Install,Installation,85,en/stable/generated/scanpy._settings.ScanpyConfig.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.N_PCS — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.N_PCS.html:91,Install,Installation,91,en/stable/generated/scanpy._settings.ScanpyConfig.N_PCS.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.N_PCS.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.autosave — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.autosave.html:94,Install,Installation,94,en/stable/generated/scanpy._settings.ScanpyConfig.autosave.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.autosave.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.autoshow — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.autoshow.html:94,Install,Installation,94,en/stable/generated/scanpy._settings.ScanpyConfig.autoshow.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.autoshow.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.cache_compression — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFA,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.cache_compression.html:103,Install,Installation,103,en/stable/generated/scanpy._settings.ScanpyConfig.cache_compression.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.cache_compression.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.cachedir — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.cachedir.html:94,Install,Installation,94,en/stable/generated/scanpy._settings.ScanpyConfig.cachedir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.cachedir.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.categories_to_ignore — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.categories_to_ignore.html:106,Install,Installation,106,en/stable/generated/scanpy._settings.ScanpyConfig.categories_to_ignore.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.categories_to_ignore.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.datasetdir — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.datasetdir.html:96,Install,Installation,96,en/stable/generated/scanpy._settings.ScanpyConfig.datasetdir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.datasetdir.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.figdir — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.figdir.html:92,Install,Installation,92,en/stable/generated/scanpy._settings.ScanpyConfig.figdir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.figdir.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.file_format_data — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAU,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.file_format_data.html:102,Install,Installation,102,en/stable/generated/scanpy._settings.ScanpyConfig.file_format_data.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.file_format_data.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.file_format_figs — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAU,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.file_format_figs.html:102,Install,Installation,102,en/stable/generated/scanpy._settings.ScanpyConfig.file_format_figs.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.file_format_figs.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.logfile — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.logfile.html:93,Install,Installation,93,en/stable/generated/scanpy._settings.ScanpyConfig.logfile.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.logfile.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.logpath — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.logpath.html:93,Install,Installation,93,en/stable/generated/scanpy._settings.ScanpyConfig.logpath.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.logpath.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.max_memory — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.max_memory.html:96,Install,Installation,96,en/stable/generated/scanpy._settings.ScanpyConfig.max_memory.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.max_memory.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.n_jobs — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html:92,Install,Installation,92,en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.plot_suffix — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_CO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.plot_suffix.html:97,Install,Installation,97,en/stable/generated/scanpy._settings.ScanpyConfig.plot_suffix.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.plot_suffix.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.set_figure_params — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFA,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.set_figure_params.html:103,Install,Installation,103,en/stable/generated/scanpy._settings.ScanpyConfig.set_figure_params.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.set_figure_params.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.verbosity — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html:95,Install,Installation,95,en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy._settings.ScanpyConfig.writedir — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.writedir.html:94,Install,Installation,94,en/stable/generated/scanpy._settings.ScanpyConfig.writedir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.writedir.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.blobs — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Do,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.blobs.html:77,Install,Installation,77,en/stable/generated/scanpy.datasets.blobs.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.blobs.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.ebi_expression_atlas — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.ebi_expression_atlas.html:92,Install,Installation,92,en/stable/generated/scanpy.datasets.ebi_expression_atlas.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.ebi_expression_atlas.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.krumsiek11 — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.krumsiek11.html:82,Install,Installation,82,en/stable/generated/scanpy.datasets.krumsiek11.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.krumsiek11.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.moignard15 — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.moignard15.html:82,Install,Installation,82,en/stable/generated/scanpy.datasets.moignard15.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.moignard15.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.paul15 — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.paul15.html:78,Install,Installation,78,en/stable/generated/scanpy.datasets.paul15.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.paul15.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.pbmc3k — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k.html:78,Install,Installation,78,en/stable/generated/scanpy.datasets.pbmc3k.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.pbmc3k_processed — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; s,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k_processed.html:88,Install,Installation,88,en/stable/generated/scanpy.datasets.pbmc3k_processed.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k_processed.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.pbmc68k_reduced — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc68k_reduced.html:87,Install,Installation,87,en/stable/generated/scanpy.datasets.pbmc68k_reduced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc68k_reduced.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.datasets.toggleswitch — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.toggleswitch.html:18,toggle,toggleswitch,18,en/stable/generated/scanpy.datasets.toggleswitch.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.toggleswitch.html,4,"['Install', 'Integrat', 'toggle']","['Installation', 'Integrating', 'toggleswitch']"
Deployability,. scanpy.datasets.visium_sge — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.visium_sge.html:82,Install,Installation,82,en/stable/generated/scanpy.datasets.visium_sge.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.visium_sge.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.experimental.pp.highly_variable_genes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html:100,Install,Installation,100,en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.experimental.pp.normalize_pearson_residuals — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html:106,Install,Installation,106,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.experimental.pp.normalize_pearson_residuals_pca — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html:110,Install,Installation,110,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.experimental.pp.recipe_pearson_residuals — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFA,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html:103,Install,Installation,103,en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.exporting.cellbrowser — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.cellbrowser.html:93,Install,Installation,93,en/stable/generated/scanpy.external.exporting.cellbrowser.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.cellbrowser.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.exporting.spring_project — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.spring_project.html:96,Install,Installation,96,en/stable/generated/scanpy.external.exporting.spring_project.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.spring_project.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pl.phate — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html:80,Install,Installation,80,en/stable/generated/scanpy.external.pl.phate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pl.sam — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.sam.html:78,Install,Installation,78,en/stable/generated/scanpy.external.pl.sam.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.sam.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pl.trimap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.p,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.trimap.html:81,Install,Installation,81,en/stable/generated/scanpy.external.pl.trimap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.trimap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pl.wishbone_marker_trajectory — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAUL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html:101,Install,Installation,101,en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pp.bbknn — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.bbknn.html:80,Install,Installation,80,en/stable/generated/scanpy.external.pp.bbknn.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.bbknn.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pp.dca — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.dca.html:78,Install,Installation,78,en/stable/generated/scanpy.external.pp.dca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.dca.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pp.harmony_integrate — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html:92,Install,Installation,92,en/stable/generated/scanpy.external.pp.harmony_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pp.hashsolo — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.hashsolo.html:83,Install,Installation,83,en/stable/generated/scanpy.external.pp.hashsolo.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.hashsolo.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pp.magic — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html:80,Install,Installation,80,en/stable/generated/scanpy.external.pp.magic.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pp.mnn_correct — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sca,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.mnn_correct.html:86,Install,Installation,86,en/stable/generated/scanpy.external.pp.mnn_correct.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.mnn_correct.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.pp.scanorama_integrate — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:94,Install,Installation,94,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.cyclone — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:82,Install,Installation,82,en/stable/external/generated/scanpy.external.tl.cyclone.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.harmony_timeseries — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:93,Install,Installation,93,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.palantir — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:83,Install,Installation,83,en/stable/external/generated/scanpy.external.tl.palantir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.palantir_results — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:91,Install,Installation,91,en/stable/external/generated/scanpy.external.tl.palantir_results.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.phate — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:80,Install,Installation,80,en/stable/external/generated/scanpy.external.tl.phate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.phenograph — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:85,Install,Installation,85,en/stable/external/generated/scanpy.external.tl.phenograph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.sam — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:78,Install,Installation,78,en/stable/external/generated/scanpy.external.tl.sam.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.sandbag — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:82,Install,Installation,82,en/stable/external/generated/scanpy.external.tl.sandbag.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.trimap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.p,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:81,Install,Installation,81,en/stable/external/generated/scanpy.external.tl.trimap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.external.tl.wishbone — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:83,Install,Installation,83,en/stable/external/generated/scanpy.external.tl.wishbone.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.get.aggregate — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.aggregate.html:76,Install,Installation,76,en/stable/generated/scanpy.get.aggregate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.aggregate.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.get.obs_df — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.obs_df.html:73,Install,Installation,73,en/stable/generated/scanpy.get.obs_df.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.obs_df.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.get.rank_genes_groups_df — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.rank_genes_groups_df.html:87,Install,Installation,87,en/stable/generated/scanpy.get.rank_genes_groups_df.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.rank_genes_groups_df.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.get.var_df — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.var_df.html:73,Install,Installation,73,en/stable/generated/scanpy.get.var_df.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.var_df.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.logging.print_header — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.logging.print_header.html:83,Install,Installation,83,en/stable/generated/scanpy.logging.print_header.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.logging.print_header.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,". scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Queries. Queries#; This module provides useful queries for annotation and enrichment. queries.biomart_annotations; Retrieve gene annotations from ensembl biomart. queries.gene_coordinates; Retrieve gene coordinates for specific organism through BioMart. queries.mitochondrial_genes; Mitochondrial gene symbols for specific organism through BioMart. queries.enrich; Get enrichment for DE results. previous; scanpy.get.aggregate. next; scanpy.queries.biomart_annotations. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/queries.html:9041,Release,Release,9041,en/stable/api/queries.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/queries.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,. scanpy.logging.print_versions — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.logging.print_versions.html:85,Install,Installation,85,en/stable/generated/scanpy.logging.print_versions.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.logging.print_versions.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.metrics.confusion_matrix — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.confusion_matrix.html:87,Install,Installation,87,en/stable/generated/scanpy.metrics.confusion_matrix.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.confusion_matrix.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.metrics.gearys_c — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.gearys_c.html:79,Install,Installation,79,en/stable/generated/scanpy.metrics.gearys_c.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.gearys_c.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.metrics.morans_i — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.morans_i.html:79,Install,Installation,79,en/stable/generated/scanpy.metrics.morans_i.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.morans_i.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.html:73,Install,Installation,73,en/stable/api/generated/classes/scanpy.pl.DotPlot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_CO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT.html:97,Install,Installation,97,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH.html:96,Install,Installation,96,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_COLORMAP — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON;,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLORMAP.html:90,Install,Installation,90,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLORMAP.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLORMAP.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE.html:100,Install,Installation,100,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_COLOR_ON — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON;,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_ON.html:90,Install,Installation,90,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_ON.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_ON.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR.html:95,Install,Installation,95,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW.html:92,Install,Installation,92,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_DOT_MAX — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; ,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MAX.html:89,Install,Installation,89,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MAX.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MAX.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_DOT_MIN — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; ,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MIN.html:89,Install,Installation,89,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MIN.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MIN.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT.html:93,Install,Installation,93,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH.html:95,Install,Installation,95,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING.html:96,Install,Installation,96,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING.html:96,Install,Installation,96,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX.html:93,Install,Installation,93,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT.html:95,Install,Installation,95,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE.html:99,Install,Installation,99,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT.html:94,Install,Installation,94,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.DEFAULT_WSPACE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; s,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_WSPACE.html:88,Install,Installation,88,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_WSPACE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_WSPACE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.MAX_NUM_CATEGORIES — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.MAX_NUM_CATEGORIES.html:92,Install,Installation,92,en/stable/api/generated/classes/scanpy.pl.DotPlot.MAX_NUM_CATEGORIES.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.MAX_NUM_CATEGORIES.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT.html:91,Install,Installation,91,en/stable/api/generated/classes/scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.add_dendrogram — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; s,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.add_dendrogram.html:88,Install,Installation,88,en/stable/api/generated/classes/scanpy.pl.DotPlot.add_dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.add_dendrogram.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.add_totals — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.add_totals.html:84,Install,Installation,84,en/stable/api/generated/classes/scanpy.pl.DotPlot.add_totals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.add_totals.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.get_axes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.get_axes.html:82,Install,Installation,82,en/stable/api/generated/classes/scanpy.pl.DotPlot.get_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.get_axes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.getdoc — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.getdoc.html:80,Install,Installation,80,en/stable/api/generated/classes/scanpy.pl.DotPlot.getdoc.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.getdoc.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.legend — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.legend.html:80,Install,Installation,80,en/stable/api/generated/classes/scanpy.pl.DotPlot.legend.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.legend.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.make_figure — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.make_figure.html:85,Install,Installation,85,en/stable/api/generated/classes/scanpy.pl.DotPlot.make_figure.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.make_figure.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.savefig — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.p,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.savefig.html:81,Install,Installation,81,en/stable/api/generated/classes/scanpy.pl.DotPlot.savefig.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.savefig.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.show — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.show.html:78,Install,Installation,78,en/stable/api/generated/classes/scanpy.pl.DotPlot.show.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.show.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.style — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html:79,Install,Installation,79,en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.DotPlot.swap_axes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.swap_axes.html:83,Install,Installation,83,en/stable/api/generated/classes/scanpy.pl.DotPlot.swap_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.swap_axes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:76,Install,Installation,76,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:100,Install,Installation,100,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:99,Install,Installation,99,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_COLORMAP — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:93,Install,Installation,93,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFA,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:103,Install,Installation,103,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:95,Install,Installation,95,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:92,Install,Installation,92,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_C,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:98,Install,Installation,98,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:96,Install,Installation,96,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.DEFAULT_WSPACE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:91,Install,Installation,91,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:95,Install,Installation,95,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html:94,Install,Installation,94,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.add_dendrogram — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_dendrogram.html:91,Install,Installation,91,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_dendrogram.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.add_totals — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_totals.html:87,Install,Installation,87,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_totals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_totals.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.get_axes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:85,Install,Installation,85,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.getdoc — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:83,Install,Installation,83,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.legend — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:83,Install,Installation,83,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.make_figure — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; s,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:88,Install,Installation,88,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.savefig — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:84,Install,Installation,84,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.show — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.p,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:81,Install,Installation,81,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.style — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:82,Install,Installation,82,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.MatrixPlot.swap_axes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sca,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:86,Install,Installation,86,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:79,Install,Installation,79,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFA,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html:103,Install,Installation,103,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAU,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:102,Install,Installation,102,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_COLORMAP — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:96,Install,Installation,96,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:106,Install,Installation,106,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_CUT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:91,Install,Installation,91,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:100,Install,Installation,100,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_INNER — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:93,Install,Installation,93,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_JITTER — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:94,Install,Installation,94,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:99,Install,Installation,99,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAUL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:101,Install,Installation,101,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_C,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:98,Install,Installation,98,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAU,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:102,Install,Installation,102,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEF,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:104,Install,Installation,104,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAU,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:102,Install,Installation,102,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html:99,Install,Installation,99,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:99,Install,Installation,99,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_CO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:97,Install,Installation,97,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_WSPACE — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:94,Install,Installation,94,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.DEFAULT_YLIM — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:92,Install,Installation,92,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_C,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:98,Install,Installation,98,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_CO,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:97,Install,Installation,97,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.add_dendrogram — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:94,Install,Installation,94,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.add_totals — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON;,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:90,Install,Installation,90,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.get_axes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; s,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:88,Install,Installation,88,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.getdoc — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sca,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:86,Install,Installation,86,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.legend — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sca,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:86,Install,Installation,86,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.make_figure — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:91,Install,Installation,91,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.savefig — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:87,Install,Installation,87,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.show — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:84,Install,Installation,84,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.style — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:85,Install,Installation,85,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.StackedViolin.swap_axes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; ,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:89,Install,Installation,89,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.clustermap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.clustermap.html:76,Install,Installation,76,en/stable/generated/scanpy.pl.clustermap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.clustermap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.dendrogram — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dendrogram.html:76,Install,Installation,76,en/stable/generated/scanpy.pl.dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dendrogram.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.diffmap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.diffmap.html:73,Install,Installation,73,en/stable/api/generated/scanpy.pl.diffmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.diffmap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.dotplot — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dotplot.html:73,Install,Installation,73,en/stable/generated/scanpy.pl.dotplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dotplot.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.dpt_groups_pseudotime — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.dpt_groups_pseudotime.html:87,Install,Installation,87,en/stable/api/generated/scanpy.pl.dpt_groups_pseudotime.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.dpt_groups_pseudotime.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.dpt_timeseries — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.dpt_timeseries.html:80,Install,Installation,80,en/stable/api/generated/scanpy.pl.dpt_timeseries.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.dpt_timeseries.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.draw_graph — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.draw_graph.html:76,Install,Installation,76,en/stable/api/generated/scanpy.pl.draw_graph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.draw_graph.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.embedding — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotP,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.embedding.html:75,Install,Installation,75,en/stable/api/generated/scanpy.pl.embedding.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.embedding.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.embedding_density — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.embedding_density.html:83,Install,Installation,83,en/stable/api/generated/scanpy.pl.embedding_density.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.embedding_density.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.filter_genes_dispersion — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; ,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.filter_genes_dispersion.html:89,Install,Installation,89,en/stable/api/generated/scanpy.pl.filter_genes_dispersion.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.filter_genes_dispersion.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.heatmap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.heatmap.html:73,Install,Installation,73,en/stable/generated/scanpy.pl.heatmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.heatmap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.highest_expr_genes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.highest_expr_genes.html:84,Install,Installation,84,en/stable/api/generated/scanpy.pl.highest_expr_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.highest_expr_genes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.highly_variable_genes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.highly_variable_genes.html:87,Install,Installation,87,en/stable/api/generated/scanpy.pl.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.highly_variable_genes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.matrixplot — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.matrixplot.html:76,Install,Installation,76,en/stable/generated/scanpy.pl.matrixplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.matrixplot.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.paga — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga.html:70,Install,Installation,70,en/stable/api/generated/scanpy.pl.paga.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.paga_compare — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga_compare.html:78,Install,Installation,78,en/stable/api/generated/scanpy.pl.paga_compare.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga_compare.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.paga_path — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotP,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga_path.html:75,Install,Installation,75,en/stable/api/generated/scanpy.pl.paga_path.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga_path.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.pca — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DE,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca.html:69,Install,Installation,69,en/stable/api/generated/scanpy.pl.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.pca_loadings — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_loadings.html:78,Install,Installation,78,en/stable/api/generated/scanpy.pl.pca_loadings.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_loadings.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.pca_overview — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html:78,Install,Installation,78,en/stable/api/generated/scanpy.pl.pca_overview.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.pca_variance_ratio — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_variance_ratio.html:84,Install,Installation,84,en/stable/api/generated/scanpy.pl.pca_variance_ratio.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_variance_ratio.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.rank_genes_groups — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups.html:83,Install,Installation,83,en/stable/api/generated/scanpy.pl.rank_genes_groups.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.rank_genes_groups_dotplot — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html:91,Install,Installation,91,en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.rank_genes_groups_heatmap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html:91,Install,Installation,91,en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.rank_genes_groups_matrixplot — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html:94,Install,Installation,94,en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.rank_genes_groups_stacked_violin — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_C,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html:98,Install,Installation,98,en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.rank_genes_groups_tracksplot — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html:94,Install,Installation,94,en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.rank_genes_groups_violin — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON;,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_violin.html:90,Install,Installation,90,en/stable/api/generated/scanpy.pl.rank_genes_groups_violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_violin.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.ranking — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.ranking.html:73,Install,Installation,73,en/stable/generated/scanpy.pl.ranking.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.ranking.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.scatter — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html:73,Install,Installation,73,en/stable/generated/scanpy.pl.scatter.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.scrublet_score_distribution — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.scrublet_score_distribution.html:93,Install,Installation,93,en/stable/api/generated/scanpy.pl.scrublet_score_distribution.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.scrublet_score_distribution.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.sim — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DE,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.sim.html:69,Install,Installation,69,en/stable/api/generated/scanpy.pl.sim.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.sim.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.spatial — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html:73,Install,Installation,73,en/stable/api/generated/scanpy.pl.spatial.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.stacked_violin — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.stacked_violin.html:80,Install,Installation,80,en/stable/generated/scanpy.pl.stacked_violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.stacked_violin.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.tracksplot — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.tracksplot.html:76,Install,Installation,76,en/stable/generated/scanpy.pl.tracksplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.tracksplot.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.tsne — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.tsne.html:70,Install,Installation,70,en/stable/api/generated/scanpy.pl.tsne.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.tsne.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.umap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.umap.html:70,Install,Installation,70,en/stable/api/generated/scanpy.pl.umap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.umap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pl.violin — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.violin.html:72,Install,Installation,72,en/stable/generated/scanpy.pl.violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.violin.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.calculate_qc_metrics — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sca,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.calculate_qc_metrics.html:86,Install,Installation,86,en/stable/generated/scanpy.pp.calculate_qc_metrics.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.calculate_qc_metrics.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.combat — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.combat.html:72,Install,Installation,72,en/stable/api/generated/scanpy.pp.combat.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.combat.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.downsample_counts — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html:83,Install,Installation,83,en/stable/generated/scanpy.pp.downsample_counts.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.filter_cells — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_cells.html:78,Install,Installation,78,en/stable/generated/scanpy.pp.filter_cells.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_cells.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.filter_genes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes.html:78,Install,Installation,78,en/stable/generated/scanpy.pp.filter_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.filter_genes_dispersion — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; ,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes_dispersion.html:89,Install,Installation,89,en/stable/generated/scanpy.pp.filter_genes_dispersion.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes_dispersion.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.highly_variable_genes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.highly_variable_genes.html:87,Install,Installation,87,en/stable/generated/scanpy.pp.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.highly_variable_genes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.log1p — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.log1p.html:71,Install,Installation,71,en/stable/generated/scanpy.pp.log1p.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.log1p.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.neighbors — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotP,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.neighbors.html:75,Install,Installation,75,en/stable/api/generated/scanpy.pp.neighbors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.neighbors.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.normalize_per_cell — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanp,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_per_cell.html:84,Install,Installation,84,en/stable/generated/scanpy.pp.normalize_per_cell.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_per_cell.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.normalize_total — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.p,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_total.html:81,Install,Installation,81,en/stable/generated/scanpy.pp.normalize_total.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_total.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.pca — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DE,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html:69,Install,Installation,69,en/stable/generated/scanpy.pp.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.recipe_seurat — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_seurat.html:79,Install,Installation,79,en/stable/api/generated/scanpy.pp.recipe_seurat.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_seurat.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.recipe_weinreb17 — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_weinreb17.html:82,Install,Installation,82,en/stable/api/generated/scanpy.pp.recipe_weinreb17.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_weinreb17.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.recipe_zheng17 — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_zheng17.html:80,Install,Installation,80,en/stable/api/generated/scanpy.pp.recipe_zheng17.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_zheng17.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.regress_out — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Do,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.regress_out.html:77,Install,Installation,77,en/stable/generated/scanpy.pp.regress_out.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.regress_out.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.scale — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.scale.html:71,Install,Installation,71,en/stable/generated/scanpy.pp.scale.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.scale.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.scrublet — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet.html:74,Install,Installation,74,en/stable/api/generated/scanpy.pp.scrublet.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.scrublet_simulate_doublets — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_O,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet_simulate_doublets.html:92,Install,Installation,92,en/stable/api/generated/scanpy.pp.scrublet_simulate_doublets.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet_simulate_doublets.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.pp.subsample — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotP,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.subsample.html:75,Install,Installation,75,en/stable/generated/scanpy.pp.subsample.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.subsample.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.queries.biomart_annotations — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON;,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.biomart_annotations.html:90,Install,Installation,90,en/stable/generated/scanpy.queries.biomart_annotations.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.biomart_annotations.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.queries.enrich — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Do,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.enrich.html:77,Install,Installation,77,en/stable/generated/scanpy.queries.enrich.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.enrich.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.queries.gene_coordinates — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.gene_coordinates.html:87,Install,Installation,87,en/stable/generated/scanpy.queries.gene_coordinates.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.gene_coordinates.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.queries.mitochondrial_genes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON;,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.mitochondrial_genes.html:90,Install,Installation,90,en/stable/generated/scanpy.queries.mitochondrial_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.mitochondrial_genes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DEFA,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read.html:67,Install,Installation,67,en/stable/generated/scanpy.read.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_10x_h5 — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_h5.html:74,Install,Installation,74,en/stable/generated/scanpy.read_10x_h5.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_h5.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_10x_mtx — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotP,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_mtx.html:75,Install,Installation,75,en/stable/generated/scanpy.read_10x_mtx.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_mtx.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_csv — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_csv.html:71,Install,Installation,71,en/stable/generated/scanpy.read_csv.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_csv.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_excel — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_excel.html:73,Install,Installation,73,en/stable/generated/scanpy.read_excel.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_excel.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_h5ad — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_h5ad.html:72,Install,Installation,72,en/stable/generated/scanpy.read_h5ad.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_h5ad.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_hdf — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_hdf.html:71,Install,Installation,71,en/stable/generated/scanpy.read_hdf.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_hdf.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_loom — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_loom.html:72,Install,Installation,72,en/stable/generated/scanpy.read_loom.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_loom.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_mtx — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_mtx.html:71,Install,Installation,71,en/stable/generated/scanpy.read_mtx.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_mtx.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_text — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_text.html:72,Install,Installation,72,en/stable/generated/scanpy.read_text.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_text.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_umi_tools — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Do,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_umi_tools.html:77,Install,Installation,77,en/stable/generated/scanpy.read_umi_tools.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_umi_tools.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.read_visium — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_visium.html:74,Install,Installation,74,en/stable/generated/scanpy.read_visium.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_visium.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.set_figure_params — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.set_figure_params.html:80,Install,Installation,80,en/stable/generated/scanpy.set_figure_params.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.set_figure_params.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.dendrogram — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dendrogram.html:76,Install,Installation,76,en/stable/generated/scanpy.tl.dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dendrogram.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.diffmap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.diffmap.html:73,Install,Installation,73,en/stable/generated/scanpy.tl.diffmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.diffmap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.dpt — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DE,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dpt.html:69,Install,Installation,69,en/stable/generated/scanpy.tl.dpt.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dpt.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.draw_graph — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.draw_graph.html:76,Install,Installation,76,en/stable/generated/scanpy.tl.draw_graph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.draw_graph.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.embedding_density — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.embedding_density.html:83,Install,Installation,83,en/stable/generated/scanpy.tl.embedding_density.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.embedding_density.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.filter_rank_genes_groups — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON;,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.filter_rank_genes_groups.html:90,Install,Installation,90,en/stable/generated/scanpy.tl.filter_rank_genes_groups.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.filter_rank_genes_groups.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.ingest — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html:72,Install,Installation,72,en/stable/generated/scanpy.tl.ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.leiden — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.leiden.html:72,Install,Installation,72,en/stable/generated/scanpy.tl.leiden.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.leiden.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.louvain — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.louvain.html:73,Install,Installation,73,en/stable/generated/scanpy.tl.louvain.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.louvain.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.marker_gene_overlap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.marker_gene_overlap.html:85,Install,Installation,85,en/stable/generated/scanpy.tl.marker_gene_overlap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.marker_gene_overlap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.paga — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.paga.html:70,Install,Installation,70,en/stable/generated/scanpy.tl.paga.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.paga.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.rank_genes_groups — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.rank_genes_groups.html:83,Install,Installation,83,en/stable/generated/scanpy.tl.rank_genes_groups.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.rank_genes_groups.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.score_genes — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.Do,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.score_genes.html:77,Install,Installation,77,en/stable/generated/scanpy.tl.score_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.score_genes.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.score_genes_cell_cycle — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; s,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.score_genes_cell_cycle.html:88,Install,Installation,88,en/stable/generated/scanpy.tl.score_genes_cell_cycle.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.score_genes_cell_cycle.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.sim — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.DE,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.sim.html:69,Install,Installation,69,en/stable/generated/scanpy.tl.sim.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.sim.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.tsne — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.tsne.html:70,Install,Installation,70,en/stable/generated/scanpy.tl.tsne.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.tsne.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,. scanpy.tl.umap — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.D,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.umap.html:70,Install,Installation,70,en/stable/generated/scanpy.tl.umap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.umap.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,".; Sequences (like list),; Iterables (like set), and; Mappings (like dict).; Always specify what these contain, e.g. {'a': (1, 2)} → Mapping[str, Tuple[int, int]].; If you can’t use one of those, use a concrete class like AnnData.; If your parameter only accepts an enumeration of strings, specify them like so: Literal['elem-1', 'elem-2']. Returns section#; There are three types of return sections – prose, tuple, and a mix of both. Prose is for simple cases.; Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and not by its type. Provide type annotation in the function header.; Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you added something as annotation to an `AnnData` object. Examples#; For simple cases, use prose as in normalize_total():; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in calculate_qc_metrics().; Do not add types in the docstring, but specify them in the function signature:; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ... Many functions also just modify parts of the passed AnnData object, like e.g. dpt().; You can then combine prose and lists to best describe what happens:; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:13827,update,updates,13827,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,1,['update'],['updates']
Deployability,".ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_excel. Contents . read_excel(). scanpy.read_excel#. scanpy.read_excel(filename, sheet, dtype='float32')[source]#; Read .xlsx (Excel) file.; Assumes that the first columns stores the row names and the first row the; column names. Parameters:. filename PathLikeFile name to read from. sheet str | intName of sheet in Excel file. Return type:; AnnData. previous; scanpy.read_csv. next; scanpy.read_hdf. Contents; . read_excel(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_excel.html:9051,Release,Release,9051,en/stable/generated/scanpy.read_excel.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_excel.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,".ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_COLORMAP. Contents . MatrixPlot.DEFAULT_COLORMAP. scanpy.pl.MatrixPlot.DEFAULT_COLORMAP#. MatrixPlot.DEFAULT_COLORMAP = 'viridis'[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH. next; scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. Contents; . MatrixPlot.DEFAULT_COLORMAP. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html:9071,Release,Release,9071,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLORMAP.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,".ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR. Contents . MatrixPlot.DEFAULT_EDGE_COLOR. scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR#. MatrixPlot.DEFAULT_EDGE_COLOR = 'gray'[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. next; scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW. Contents; . MatrixPlot.DEFAULT_EDGE_COLOR. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html:9073,Release,Release,9073,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,".ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE. Contents . DotPlot.DEFAULT_SIZE_LEGEND_TITLE. scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE#. DotPlot.DEFAULT_SIZE_LEGEND_TITLE = 'Fraction of cells\nin group (%)'[source]#. previous; scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT. next; scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT. Contents; . DotPlot.DEFAULT_SIZE_LEGEND_TITLE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE.html:9077,Release,Release,9077,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX. Contents . DotPlot.DEFAULT_SAVE_PREFIX. scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX#. DotPlot.DEFAULT_SAVE_PREFIX = 'dotplot_'[source]#. previous; scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING. next; scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT. Contents; . DotPlot.DEFAULT_SAVE_PREFIX. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX.html:9071,Release,Release,9071,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE. Contents . DotPlot.DEFAULT_COLOR_LEGEND_TITLE. scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE#. DotPlot.DEFAULT_COLOR_LEGEND_TITLE = 'Mean expression\nin group'[source]#. previous; scanpy.pl.DotPlot.DEFAULT_COLORMAP. next; scanpy.pl.DotPlot.DEFAULT_COLOR_ON. Contents; . DotPlot.DEFAULT_COLOR_LEGEND_TITLE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE.html:9078,Release,Release,9078,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,".datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.swap_axes. Contents . MatrixPlot.swap_axes(). scanpy.pl.MatrixPlot.swap_axes#. MatrixPlot.swap_axes(*, swap_axes=True)[source]#; Plots a transposed image.; By default, the x axis contains var_names (e.g. genes) and the y; axis the groupby categories. By setting swap_axes then x are; the groupby categories and y the var_names. Parameters:. swap_axes bool | None (default: True)Boolean to turn on (True) or off (False) ‘swap_axes’. Default True. Return type:; Self. Returns:; Returns self for method chaining. previous; scanpy.pl.MatrixPlot.style. next; scanpy.pl.StackedViolin. Contents; . MatrixPlot.swap_axes(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html:9064,Release,Release,9064,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.swap_axes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,".external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.ingest. Contents . ingest(). scanpy.tl.ingest#. scanpy.tl.ingest(adata, adata_ref, *, obs=None, embedding_method=('umap', 'pca'), labeling_method='knn', neighbors_key=None, inplace=True, **kwargs)[source]#; Map labels and embeddings from reference data to new data.; Integrating data using ingest and BBKNN; Integrates embeddings and annotations of an adata with a reference dataset; adata_ref through projecting on a PCA (or alternate; model) that has been fitted on the reference data. The function uses a knn; classifier for mapping labels and the UMAP package [McInnes et al., 2018] for mapping; the embeddings. Note; We refer to this asymmetric dataset integration as ingesting; annotations from reference data to new data. This is different from; learning a joint representation that integrates both datasets in an; unbiased way, as CCA (e.g. in Seurat) or a conditional VAE (e.g. in; scVI) would do. You need to run neighbors() on adata_ref before; passing it. Parameters:. adata AnnDataThe annotated data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes. This is the dataset without labels and; embeddings. adata_ref AnnDataThe annotated data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes.; Variables (n_vars and var_names) of adata_ref should be the same; as in adata.; This is the dataset with labels and embeddings; which need to be mapped to adata. obs str | Iterable[str] | None (default: None)Labels’ keys in adata_ref.obs which need to be mapped to adata.obs; (inferred for observation of adata). embedding_method str | Iterable[str] (default: ('umap', 'pca'))Embeddings in adata_ref which need",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html:9893,integrat,integration,9893,en/stable/generated/scanpy.tl.ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html,1,['integrat'],['integration']
Deployability,".external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using other kNN libraries in Scanpy. Using other kNN libraries in Scanpy#; Since Scanpy was released, there has been quite some development in the space of approximate nearest neighbor detection.; In our example, we’re going to use Annoy:. %pip install -qU ""pip""; %pip install -q ""scanpy"" ""sklearn-ann[annoy]"". Note: you may need to restart the kernel to use updated packages.; Note: you may need to restart the kernel to use updated packages. import scanpy as sc; from sklearn_ann.kneighbors.annoy import AnnoyTransformer # noqa: F401. sc.logging.print_header(). scanpy==1.10.0rc2.dev0+g48b495d9.d20240222 anndata==0.10.5.post1 umap==0.5.5 numpy==1.26.4 scipy==1.12.0 pandas==2.2.0 scikit-learn==1.4.1.post1 statsmodels==0.14.1 igraph==0.11.4 pynndescent==0.5.11. Our nearest neighbors implementation uses the PCA embedding by default, so let’s pre-compute that:. adata_default = sc.datasets.paul15(); sc.pp.pca(adata_default); adata_annoy, adata_pynnd = adata_default.copy(), adata_default.copy(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. The best way to use a third-party approximate nearest neighbors implementation is to use sklearn-ann. It provides kNN Transformer classes wrapping several popular approximate nearest neighbor libraries.; Explicitly setting the transformer paramet",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html:9605,update,updated,9605,en/stable/how-to/knn-transformers.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html,1,['update'],['updated']
Deployability,".g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Clear out old distributions; $ rm -r dist; $ # Build source distribution and wheel both; $ python",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10650,release,releases,10650,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['releases']
Deployability,".g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Clear out old distributions; $ rm -r dist; $ # Build source distribution and wheel both; $ python -m build; $ # Now check those build artifacts; $ twine check dist/*; $ # List the wheel archive’s contents; $ bsdtar -tf dist/*.whl. You can also upload the package to <test.pypi.org> (tutorial); $ twine upload --repository testpypi dist/*. The above approximates what the publish workflow does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). previous; Versioning. next; Contributors. Contents; . Preparing the release; Actually making the release; After making a release; ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:11296,release,release,11296,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,.gene_coordinates.rst; scanpy.queries.mitochondrial_genes.rst; scanpy.read.rst; scanpy.read_10x_h5.rst; scanpy.read_10x_mtx.rst; scanpy.read_csv.rst; scanpy.read_excel.rst; scanpy.read_h5ad.rst; scanpy.read_hdf.rst; scanpy.read_loom.rst; scanpy.read_mtx.rst; scanpy.read_text.rst; scanpy.read_umi_tools.rst; scanpy.read_visium.rst; scanpy.set_figure_params.rst; scanpy.tl.dendrogram.rst; scanpy.tl.diffmap.rst; scanpy.tl.dpt.rst; scanpy.tl.draw_graph.rst; scanpy.tl.embedding_density.rst; scanpy.tl.filter_rank_genes_groups.rst; scanpy.tl.ingest.rst; scanpy.tl.leiden.rst; scanpy.tl.louvain.rst; scanpy.tl.marker_gene_overlap.rst; scanpy.tl.paga.rst; scanpy.tl.rank_genes_groups.rst; scanpy.tl.score_genes.rst; scanpy.tl.score_genes_cell_cycle.rst; scanpy.tl.sim.rst; scanpy.tl.tsne.rst; scanpy.tl.umap.rst. /how-to; ; index.md; knn-transformers.ipynb; plotting-with-marsilea.ipynb. /release-notes; ; index.md. /tutorials; . /basics; ; clustering.ipynb; clustering-2017.ipynb; index.md; integrating-data-using-ingest.ipynb. /experimental; ; dask.ipynb; index.md; pearson_residuals.ipynb. /plotting; ; advanced.ipynb; core.ipynb; index.md. /spatial; ; index.md; integration-scanorama.ipynb. /trajectories; ; index.md; paga-paul15.ipynb. index.md. community.md; contributors.md; ecosystem.md; index.md; installation.md; news.md; references.rst; usage-principles.md. /_static; . /css; ; rtd_sphinx_search.min.css. /js; ; rtd_search_config.js; rtd_sphinx_search.min.js. /scripts; ; bootstrap.js; pydata-sphinx-theme.js; rtd-sphinx-search.js; sphinx-book-theme.js. /styles; ; bootstrap.css; pydata-sphinx-theme.css; scanpy.css; sphinx-book-theme.css; theme.css. /vendor; . /fontawesome; . /6.5.2; . /css; ; all.min.css. /js; ; all.min.js. /webfonts; ; fa-brands-400.ttf; fa-brands-400.woff2; fa-regular-400.ttf; fa-regular-400.woff2; fa-solid-900.ttf; fa-solid-900.woff2; fa-v4compatibility.ttf; fa-v4compatibility.woff2. basic.css; clipboard.min.js; copybutton.css; copybutton.js; design-tabs.js; doctool,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:9732,integrat,integrating-data-using-ingest,9732,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,1,['integrat'],['integrating-data-using-ingest']
Deployability,".n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.get_axes. Contents . DotPlot.get_axes(). scanpy.pl.DotPlot.get_axes#. DotPlot.get_axes()[source]#. Return type:; dict[str, Axes]. previous; scanpy.pl.DotPlot.add_totals. next; scanpy.pl.DotPlot.getdoc. Contents; . DotPlot.get_axes(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.get_axes.html:9060,Release,Release,9060,en/stable/api/generated/classes/scanpy.pl.DotPlot.get_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.get_axes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,".pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.tsne. Contents . tsne(). scanpy.tl.tsne#. scanpy.tl.tsne(adata, n_pcs=None, *, use_rep=None, perplexity=30, metric='euclidean', early_exaggeration=12, learning_rate=1000, random_state=0, use_fast_tsne=False, n_jobs=None, copy=False)[source]#; t-SNE [Amir et al., 2013, Pedregosa et al., 2011, van der Maaten and Hinton, 2008].; t-distributed stochastic neighborhood embedding (tSNE, van der Maaten and Hinton [2008]) has been; proposed for visualizating single-cell data by Amir et al. [2013]. Here, by default,; we use the implementation of scikit-learn [Pedregosa et al., 2011]. You can achieve; a huge speedup and better convergence if you install Multicore-tSNE; by Ulyanov [2016], which will be automatically detected by Scanpy. Parameters:. adata AnnDataAnnotated data matrix. n_pcs int | None (default: None)Use this many PCs. If n_pcs==0 use .X if use_rep is None. use_rep str | None (default: None)Use the indicated representation. 'X' or any key for .obsm is valid.; If None, the representation is chosen automatically:; For .n_vars < N_PCS (default: 50), .X is used, otherwise ‘X_pca’ is used.; If ‘X_pca’ is not present, it’s computed with default parameters or n_pcs if present. perplexity float | int (default: 30)The perplexity is related to the number of nearest neighbors that; is used in other manifold learning algorithms. Larger datasets; usually require a larger perplexity. Consider selecting a value; between 5 and 50. The choice is not extremely critical since t-SNE; is quite insensitive to this parameter. metric str (default: 'euclidean')Distance metric calculate neighbors on. early_exaggeration float | int (default: 12)Controls",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.tsne.html:9876,install,install,9876,en/stable/generated/scanpy.tl.tsne.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.tsne.html,1,['install'],['install']
Deployability,".pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Usage Principles. Contents . Workflow; AnnData. Usage Principles#; Import Scanpy as:; import scanpy as sc. Workflow#; The typical workflow consists of subsequent calls of data analysis tools; in sc.tl, e.g.:; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP. where adata is an AnnData object.; Each of these calls adds annotation to an expression matrix X,; which stores n_obs observations (cells) of n_vars variables (genes).; For each tool, there typically is an associated plotting function in sc.pl:; sc.pl.umap(adata, **plotting_params). If you pass show=False, a Axes instance is returned; and you have all of matplotlib’s detailed configuration possibilities.; To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate inplace on adata and return None –; this also allows to easily transition to out-of-memory pipelines.; If you want to return a copy of the AnnData object; and leave the passed adata unchanged, pass copy=True or inplace=False. AnnData#; Scanpy is based on anndata, which provides the AnnData class. At the most basic level, an AnnData object adata stores; a data matrix adata.X, annotation of observations; adata.obs and variables adata.var as pd.DataFrame and unstructured; annotation adata.uns as dict. Names of observations and; variables can be accessed via adata.obs_names and adata.var_names,; respectively. AnnData objects can be sliced like; dataframes, for example, adata_subset = adata[:, list_of_gene_names].; For more, see this blog post.; To read a data file to an AnnData object, call:; adata = sc.read(filename). to initialize an AnnData ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/usage-principles.html:9898,configurat,configuration,9898,en/stable/usage-principles.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/usage-principles.html,1,['configurat'],['configuration']
Deployability,".pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Installation. Contents . Development Version; Docker; Troubleshooting. Installation#; To use scanpy from another project, install it using your favourite environment manager:. Hatch (recommended)Pip/PyPICondaAdding scanpy[leiden] to your dependencies is enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; $ gh repo clone scverse/scanpy; $ cd scanpy. Hatch (recommended)Pip/PyPICondaTo use one of the predefined Hatch environments in hatch.toml,; run either hatch test [args] or hatch run [env:]command [...args], e.g.:; $ hatch test -p # run tests in parallel; $ hatch run docs:build # build docs; $ hatch run towncrier:create # create changelog entry. If you are using pip>=21.3, an editable install can be made:; $ python -m venv .venv; $ source .venv/bin/activate; $ pip install -e '.[dev,test]'. If you want to let conda handle the installations of dependencies, do:; $ pipx install beni; $ beni pyproject.toml > environment.yml; $ conda env create -f environment.yml; $ conda activate ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:9859,install,installs,9859,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,1,['install'],['installs']
Deployability,".pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Preprocessing: PP. Contents . Data integration; Sample demultiplexing; Imputation. Preprocessing: PP#. Data integration#. pp.bbknn(adata, *[, batch_key, use_rep, ...]); Batch balanced kNN [Polański et al., 2019]. pp.harmony_integrate(adata, key, *[, basis, ...]); Use harmonypy [Korsunsky et al., 2019] to integrate different experiments. pp.mnn_correct(*datas[, var_index, ...]); Correct batch effects by matching mutual nearest neighbors [Haghverdi et al., 2018] [Kang, 2018]. pp.scanorama_integrate(adata, key, *[, ...]); Use Scanorama [Hie et al., 2019] to integrate different experiments. Sample demultiplexing#. pp.hashsolo(adata, cell_hashing_columns, *); Probabilistic demultiplexing of cell hashing data using HashSolo [Bernstein et al., 2020]. Imputation#; Note that the fundamental limitations of imputation are still under debate. pp.dca(adata[, mode, ae_type, ...]); Deep count autoencoder [Eraslan et al., 2019]. pp.magic(adata[, name_list, knn, decay, ...]); Markov Affinity-based Graph Imputation of Cells (MAGIC) API [van Dijk et al., 2018]. previous; External API. next; scanpy.external.pp.bbkn",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html:9333,integrat,integration,9333,en/stable/external/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html,1,['integrat'],['integration']
Deployability,".read. Contents . read(). scanpy.read#. scanpy.read(filename, backed=None, *, sheet=None, ext=None, delimiter=None, first_column_names=False, backup_url=None, cache=False, cache_compression=_empty, **kwargs)[source]#; Read file and return AnnData object.; To speed up reading, consider passing cache=True, which creates an hdf5; cache file. Parameters:. filename Path | strIf the filename has no file extension, it is interpreted as a key for; generating a filename via sc.settings.writedir / (filename +; sc.settings.file_format_data). This is the same behavior as in; sc.read(filename, ...). backed Optional[Literal['r', 'r+']] (default: None)If 'r', load AnnData in backed mode instead; of fully loading it into memory (memory mode). If you want to modify; backed attributes of the AnnData object, you need to choose 'r+'. sheet str | None (default: None)Name of sheet/table in hdf5 or Excel file. ext str | None (default: None)Extension that indicates the file type. If None, uses extension of; filename. delimiter str | None (default: None)Delimiter that separates data within text file. If None, will split at; arbitrary number of white spaces, which is different from enforcing; splitting at any single white space ' '. first_column_names bool (default: False)Assume the first column stores row names. This is only necessary if; these are not strings: strings in the first column are automatically; assumed to be row names. backup_url str | None (default: None)Retrieve the file from an URL if not present on disk. cache bool (default: False)If False, read from source, if True, read from fast ‘h5ad’ cache. cache_compression Union[Literal['gzip', 'lzf'], None, Empty] (default: _empty)See the h5py Filter pipeline.; (Default: settings.cache_compression). kwargsParameters passed to read_loom(). Return type:; AnnData. Returns:; An AnnData object. previous; Reading. next; scanpy.read_10x_h5. Contents; . read(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read.html:10939,pipeline,pipeline,10939,en/stable/generated/scanpy.read.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read.html,1,['pipeline'],['pipeline']
Deployability,".scverse.org. GitHub ; Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments. https://github.com/scverse/scanpy. Other resources. Follow changes in the release notes.; Find tools that harmonize well with anndata & Scanpy at scverse.org/packages/; Check out our contribution guide for development practices.; Consider citing Genome Biology (2018) along with original references. News#. rapids-singlecell brings scanpy to the GPU! 2024-03-18#; rapids-singlecell by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. Scanpy hits 100 contributors! 2022-03-31#; 100 people have contributed to Scanpy’s source code!; Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it’s helped them accomplish.; Thanks to all our contributors for making this project possible!. New community channels 2022-03-31#; We’ve moved our forums and have a new publicly available chat!. Our discourse forum has migrated to a joint scverse forum (discourse.scverse.org).; Our private developer Slack has been replaced by a public Zulip chat (scverse.zulipchat.com). Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01#; Two large toolkits extending our ecosystem to new modalities have had their manuscripts published!. Muon, a framework for multimodal has been published in Genome Biology.; Squidpy a toolkit for working with spatial single cell data has been published in Nature Methods. (past news). next; Installation. Contents; . News; rapids-singlecell brings scanpy to the GPU! 2024-03-18; Scanpy hits 100 contributors! 2022-03-31; New community channels 2022-03-31; Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/index.html:12307,Install,Installation,12307,en/stable/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/index.html,1,['Install'],['Installation']
Deployability,".tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Installation. Contents . Development Version; Docker; Troubleshooting. Installation#; To use scanpy from another project, install it using your favourite environment manager:. Hatch (recommended)Pip/PyPICondaAdding scanpy[leiden] to your dependencies is enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; $ gh repo clone scverse/scanpy; $ cd scanpy. Hatch (recommended)Pip/PyPICondaTo use one of the predefined Hatch environments in hatch.toml,; run either hatch test [args] or hatch run [env:]command [...args], e.g.:; $ hatch test -p # run tests in parallel; $ hatch run docs:build # build docs; $ hatch run towncrier:create # create changelog entry. If",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:9589,install,install,9589,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,1,['install'],['install']
Deployability,".writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. Contents . MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE#. MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE = 'Mean expression\nin group'[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_COLORMAP. next; scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR. Contents; . MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html:9081,Release,Release,9081,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_COLOR_LEGEND_TITLE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Clear out old distributions; $ rm -r dist; $ # Build source distribution and wheel both; $ python -m build; $ # Now check those build artifacts; $ twine check dist/*; $ # List the wheel archive’s contents; $ bsdtar -tf dist/*.whl. You can also upload the package to <test.pypi.org> (tutorial); $ twine upload --repository testpypi dist/*. The above approximates what the publish workflow does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). previous; Versioning. next; Contributors. Contents; . Preparing the release; Actually making the release; After making a release; Debugging the build process. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:11419,configurat,configuration,11419,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,4,"['configurat', 'release']","['configuration', 'release']"
Deployability,"2-24; Documentation; Bug fixes. 1.7.0 2021-02-03; Features; External tools (new); External tools (changes); Documentation; Performance; Bugfixes. Version 1.6; 1.6.0 2020-08-15; Overhaul of dotplot(), matrixplot(), and stacked_violin() pr1210 F Ramirez; Additions; Bug fixes. Version 1.5; 1.5.1 2020-05-21; Bug fixes. 1.5.0 2020-05-15; Spatial data support; New functionality; External tools; Performance; Code design; Bug fixes. Version 1.4; 1.4.6 2020-03-17; Functionality in external; Code design; Bug fixes. 1.4.5 2019-12-30; New functionality; Code design. 1.4.4 2019-07-20; New functionality; Bug fixes; Code design. 1.4.3 2019-05-14; Bug fixes; Code design. 1.4.2 2019-05-06; New functionality; Bug fixes; Code design. 1.4.1 2019-04-26; New functionality; Code design. Version 1.3; 1.3.8 2019-02-05; 1.3.7 2019-01-02; 1.3.6 2018-12-11; Major updates; Interactive exploration of analysis results through manifold viewers; Code design. 1.3.5 2018-12-09; 1.3.4 2018-11-24; 1.3.3 2018-11-05; Major updates; Code design. 1.3.1 2018-09-03; RNA velocity in single cells LaManno2018; Plotting (pl-generic); There now is a section on imputation in external:. Version 1.2; 1.2.1 2018-06-08; Plotting of pl-generic marker genes and quality control. 1.2.0 2018-06-08. Version 1.1; 1.1.0 2018-06-01. Version 1.0; 1.0.0 2018-03-30; Major updates; Further updates. Version 0.4; 0.4.4 2018-02-26; 0.4.3 2018-02-09; 0.4.2 2018-01-07; 0.4.0 2017-12-23. Version 0.3; 0.3.2 2017-11-29; 0.3.0 2017-11-16. Version 0.2; 0.2.9 2017-10-25; Initial release of the new trajectory inference method PAGA. 0.2.1 2017-07-24. Version 0.1; 0.1.0 2017-05-17. Release notes#. Version 1.10#. 1.10.3 2024-09-17#. Bug fixes#. Prevent empty control gene set in score_genes() M Müller (pr2875); Fix subset=True of highly_variable_genes() when flavor is seurat or cell_ranger, and batch_key!=None E Roellin (pr3042); Add compatibility with numpy 2.0 P Angerer pr3065 and (pr3115); Fix legend_loc argument in scanpy.pl.embedding() not ac",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:11122,update,updates,11122,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['update'],['updates']
Deployability,"3 2024-09-17#. Bug fixes#. Prevent empty control gene set in score_genes() M Müller (pr2875); Fix subset=True of highly_variable_genes() when flavor is seurat or cell_ranger, and batch_key!=None E Roellin (pr3042); Add compatibility with numpy 2.0 P Angerer pr3065 and (pr3115); Fix legend_loc argument in scanpy.pl.embedding() not accepting matplotlib parameters P Angerer (pr3163); Fix dispersion cutoff in highly_variable_genes() in presence of NaNs P Angerer (pr3176); Fix axis labeling for swapped axes in rank_genes_groups_stacked_violin() Ilan Gold (pr3196); Upper bound dask on account of issuescverse/anndata#1579 Ilan Gold (pr3217); The fa2-modified package replaces forceatlas2 for the latter’s lack of maintenance A Alam (pr3220). 1.10.2 2024-06-25#. Development Process#. Add performance benchmarking pr2977 R Shrestha, P Angerer. Documentation#. Document several missing parameters in docstring pr2888 S Cheney; Fixed incorrect instructions in “testing” dev docs pr2994 I Virshup; Update marsilea tutorial to use group_ methods pr3001 I Virshup; Fixed citations pr3032 P Angerer; Improve dataset documentation pr3060 P Angerer. Bug fixes#. Compatibility with matplotlib 3.9 pr2999 I Virshup; Add clear errors where backed mode-like matrices (i.e., from sparse_dataset) are not supported pr3048 I gold; Write out full pca results when _choose_representation is called i.e., neighbors() without pca() pr3079 I gold; Fix deprecated use of .A with sparse matrices pr3084 P Angerer; Fix zappy support pr3089 P Angerer; Fix dotplot group order with pandas 1.x pr3101 P Angerer. Performance#. sparse_mean_variance_axis now uses all cores for the calculations pr3015 S Dicks; pp.highly_variable_genes with flavor=seurat_v3 now uses a numba kernel pr3017 S Dicks; Speed up scrublet() pr3044 S Dicks and pr3056 P Angerer; Speed up clipping of array in scale() pr3100 P Ashish & S Dicks. 1.10.1 2024-04-09#. Documentation#. Added how-to example on plotting with Marsilea pr2974 Y Zheng. Bug fixes#",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:12784,Update,Update,12784,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['Update'],['Update']
Deployability,"5; Spatial data support; New functionality; External tools; Performance; Code design; Bug fixes. Version 1.4; 1.4.6 2020-03-17; Functionality in external; Code design; Bug fixes. 1.4.5 2019-12-30; New functionality; Code design. 1.4.4 2019-07-20; New functionality; Bug fixes; Code design. 1.4.3 2019-05-14; Bug fixes; Code design. 1.4.2 2019-05-06; New functionality; Bug fixes; Code design. 1.4.1 2019-04-26; New functionality; Code design. Version 1.3; 1.3.8 2019-02-05; 1.3.7 2019-01-02; 1.3.6 2018-12-11; Major updates; Interactive exploration of analysis results through manifold viewers; Code design. 1.3.5 2018-12-09; 1.3.4 2018-11-24; 1.3.3 2018-11-05; Major updates; Code design. 1.3.1 2018-09-03; RNA velocity in single cells LaManno2018; Plotting (pl-generic); There now is a section on imputation in external:. Version 1.2; 1.2.1 2018-06-08; Plotting of pl-generic marker genes and quality control. 1.2.0 2018-06-08. Version 1.1; 1.1.0 2018-06-01. Version 1.0; 1.0.0 2018-03-30; Major updates; Further updates. Version 0.4; 0.4.4 2018-02-26; 0.4.3 2018-02-09; 0.4.2 2018-01-07; 0.4.0 2017-12-23. Version 0.3; 0.3.2 2017-11-29; 0.3.0 2017-11-16. Version 0.2; 0.2.9 2017-10-25; Initial release of the new trajectory inference method PAGA. 0.2.1 2017-07-24. Version 0.1; 0.1.0 2017-05-17. Release notes#. Version 1.10#. 1.10.3 2024-09-17#. Bug fixes#. Prevent empty control gene set in score_genes() M Müller (pr2875); Fix subset=True of highly_variable_genes() when flavor is seurat or cell_ranger, and batch_key!=None E Roellin (pr3042); Add compatibility with numpy 2.0 P Angerer pr3065 and (pr3115); Fix legend_loc argument in scanpy.pl.embedding() not accepting matplotlib parameters P Angerer (pr3163); Fix dispersion cutoff in highly_variable_genes() in presence of NaNs P Angerer (pr3176); Fix axis labeling for swapped axes in rank_genes_groups_stacked_violin() Ilan Gold (pr3196); Upper bound dask on account of issuescverse/anndata#1579 Ilan Gold (pr3217); The fa2-modified packag",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:11452,update,updates,11452,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,['update'],['updates']
Deployability,": None)Key for .uns['paga'] that specifies the matrix that stores the edges; to be drawn dashed grey. If None, no dashed edges are drawn. single_component bool (default: False)Restrict to largest connected component. fontsize int | None (default: None)Font size for node labels. fontoutline int | None (default: None)Width of the white outline around fonts. text_kwds Mapping[str, Any] (default: mappingproxy({}))Keywords for text(). node_size_scale float (default: 1.0)Increase or decrease the size of the nodes. node_size_power float (default: 0.5)The power with which groups sizes influence the radius of the nodes. edge_width_scale float (default: 1.0)Edge with scale in units of rcParams['lines.linewidth']. min_edge_width float | None (default: None)Min width of solid edges. max_edge_width float | None (default: None)Max width of solid and dashed edges. arrowsize int (default: 30)For directed graphs, choose the size of the arrow head head’s length and; width. See :py:class: matplotlib.patches.FancyArrowPatch for attribute; mutation_scale for more info. export_to_gexf bool (default: False)Export to gexf format to be read by graph visualization programs such as; Gephi. normalize_to_color bool (default: False)Whether to normalize categorical plots to color or the underlying; grouping. cmap str | Colormap | None (default: None)The color map. cax Axes | None (default: None)A matplotlib axes object for a potential colorbar. cb_kwds Mapping[str, Any] (default: mappingproxy({}))Keyword arguments for Colorbar,; for instance, ticks. add_pos bool (default: True)Add the positions to adata.uns['paga']. title str | None (default: None)Provide a title. frameon bool | None (default: None)Draw a frame around the PAGA graph. plot bool (default: True)If False, do not create the figure, simply compute the layout. save bool | str | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {'.pdf', '.png', '.svg'}. ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga.html:14041,patch,patches,14041,en/stable/api/generated/scanpy.pl.paga.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga.html,1,['patch'],['patches']
Deployability,"; Bug fixes; Code design. 1.4.2 2019-05-06; New functionality; Bug fixes; Code design. 1.4.1 2019-04-26; New functionality; Code design. Version 1.3; 1.3.8 2019-02-05; 1.3.7 2019-01-02; 1.3.6 2018-12-11; Major updates; Interactive exploration of analysis results through manifold viewers; Code design. 1.3.5 2018-12-09; 1.3.4 2018-11-24; 1.3.3 2018-11-05; Major updates; Code design. 1.3.1 2018-09-03; RNA velocity in single cells LaManno2018; Plotting (pl-generic); There now is a section on imputation in external:. Version 1.2; 1.2.1 2018-06-08; Plotting of pl-generic marker genes and quality control. 1.2.0 2018-06-08. Version 1.1; 1.1.0 2018-06-01. Version 1.0; 1.0.0 2018-03-30; Major updates; Further updates. Version 0.4; 0.4.4 2018-02-26; 0.4.3 2018-02-09; 0.4.2 2018-01-07; 0.4.0 2017-12-23. Version 0.3; 0.3.2 2017-11-29; 0.3.0 2017-11-16. Version 0.2; 0.2.9 2017-10-25; Initial release of the new trajectory inference method PAGA. 0.2.1 2017-07-24. Version 0.1; 0.1.0 2017-05-17. Release notes#. Version 1.10#. 1.10.3 2024-09-17#. Bug fixes#. Prevent empty control gene set in score_genes() M Müller (pr2875); Fix subset=True of highly_variable_genes() when flavor is seurat or cell_ranger, and batch_key!=None E Roellin (pr3042); Add compatibility with numpy 2.0 P Angerer pr3065 and (pr3115); Fix legend_loc argument in scanpy.pl.embedding() not accepting matplotlib parameters P Angerer (pr3163); Fix dispersion cutoff in highly_variable_genes() in presence of NaNs P Angerer (pr3176); Fix axis labeling for swapped axes in rank_genes_groups_stacked_violin() Ilan Gold (pr3196); Upper bound dask on account of issuescverse/anndata#1579 Ilan Gold (pr3217); The fa2-modified package replaces forceatlas2 for the latter’s lack of maintenance A Alam (pr3220). 1.10.2 2024-06-25#. Development Process#. Add performance benchmarking pr2977 R Shrestha, P Angerer. Documentation#. Document several missing parameters in docstring pr2888 S Cheney; Fixed incorrect instructions in “testing” dev",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:11753,Release,Release,11753,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['Release'],['Release']
Deployability,"; adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spatial""][:, 1] < 6000, :; ]; adata_posterior_subset = adata_spatial_posterior[; (adata_spatial_posterior.obsm[""spatial""][:, 1] < 4000); & (adata_spatial_posterior.obsm[""spatial""][:, 0] < 6000),; :,; ]. Run integration with Scanorama. adatas_anterior = [adata_cortex, adata_anterior_subset]; adatas_posterior = [adata_cortex, adata_posterior_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ). At this step, we have integrated each visium dataset in a common embedding with the scRNA-seq dataset. In such embedding space, we can compute distances between samples and use such distances as weights to be used for for propagating labels from the scRNA-seq dataset to the Visium dataset.; Such approach is very similar to the TransferData function in Seurat (see paper). Here, we re-implement the label transfer function with a simple python function, see below.; Frist, ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:22768,integrat,integrated,22768,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integrated']
Deployability,"; plt.close(); axes = sc.pl.umap(adata, color=[""bulk_labels"", ""S_score""], show=False); print(""Axes list from two categorical plots:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); print(""Axes list from a figure with one categorical plot:"", fig.axes); plt.close(). print(""\nContinous plots:""); axes = sc.pl.umap(adata, color=[""IGJ""], show=False); print(""Axes from one continuous plot:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""IGJ""], return_fig=True); print(""Axes list from a figure of one continous plot:"", fig.axes); plt.close(). Categorical plots:; Axis from a single category plot: Axes(0.125,0.11;0.775x0.77); Axes list from two categorical plots: [<Axes: title={'center': 'bulk_labels'}, xlabel='UMAP1', ylabel='UMAP2'>, <Axes: title={'center': 'S_score'}, xlabel='UMAP1', ylabel='UMAP2'>]; Axes list from a figure with one categorical plot: [<Axes: title={'center': 'bulk_labels'}, xlabel='UMAP1', ylabel='UMAP2'>]. Continous plots:; Axes from one continuous plot: Axes(0.125,0.11;0.70525x0.77); Axes list from a figure of one continous plot: [<Axes: title={'center': 'IGJ'}, xlabel='UMAP1', ylabel='UMAP2'>, <Axes: label='<colorbar>'>]. Certain plots (e.g. dotplot) are more complex, having a special plot object with multiple Axes that are used to plot different parts of the plot. axes = sc.pl.dotplot(adata, [""CD79A"", ""MS4A1""], ""bulk_labels"", show=False); print(""Axes returned from dotplot object:"", axes); dp = sc.pl.dotplot(adata, [""CD79A"", ""MS4A1""], ""bulk_labels"", return_fig=True); print(""DotPlot object:"", dp); plt.close(). Axes returned from dotplot object: {'mainplot_ax': <Axes: >, 'size_legend_ax': <Axes: title={'center': 'Fraction of cells\nin group (%)'}>, 'color_legend_ax': <Axes: title={'center': 'Mean expression\nin group'}>}; DotPlot object: <scanpy.plotting._dotplot.DotPlot object at 0x7f4cb17b4850>. Using matplotlib Axes to customize plot alignment#; When combining multiple different plots one can pass pre-defined ma",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:13350,continuous,continuous,13350,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,1,['continuous'],['continuous']
Deployability,"; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT. Contents . DotPlot.DEFAULT_CATEGORY_HEIGHT. scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT#. DotPlot.DEFAULT_CATEGORY_HEIGHT = 0.35[source]#. previous; scanpy.pl.DotPlot. next; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH. Contents; . DotPlot.DEFAULT_CATEGORY_HEIGHT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT.html:9075,Release,Release,9075,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9267,Integrat,Integrating,9267,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['Integrat'],['Integrating']
Deployability,"; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tutorials. Contents . Basic workflows; Visualization; Trajectory inference; Spatial data; Experimental; Older tutorials. Tutorials#. See also; For more tutorials featureing scanpy and other scverse ecosystem tools, check out the curated set of tutorials at scverse.org/learn. Basic workflows#. Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Visualization#. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectory inference#. See also; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. CellRank; Dynamo. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial data#. See also; For more up-to-date tutorials on working with spatial data, see:. SquidPy tutorials; SpatialData tutorials; Scverse ecosystem spatial tutorials. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental#. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Older tutorials#; A number of older tutorials can be found at:. The scanpy_usage repository. previous; Installation. next; Basics. Contents; . Basic workflows; Visualization; Trajectory inference; Spatial data; Experimental; Older tutorials. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/index.html:10180,Integrat,Integrating,10180,en/stable/tutorials/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/index.html,2,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,"API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, sele",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9233,release,release,9233,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"C metrics) driving signifigant variation in this dataset. In this case, there isn’t anything too alarming, but it’s a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; co",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17211,integrat,integrate,17211,en/stable/tutorials/basics/clustering.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html,2,['integrat'],"['integrate', 'integration']"
Deployability,"Config.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT. Contents . StackedViolin.DEFAULT_STRIPPLOT. scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT#. StackedViolin.DEFAULT_STRIPPLOT = False[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX. next; scanpy.pl.StackedViolin.DEFAULT_WSPACE. Contents; . StackedViolin.DEFAULT_STRIPPLOT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html:9075,Release,Release,9075,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", index_col=""sample_name""; ); meta = meta.loc[counts.index]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20278,integrat,integration,20278,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,2,['integrat'],"['integrated', 'integration']"
Deployability,"Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Plotting: PL. Plotting: PL#. pl.phate(adata, *[, color, mask_obs, ...]); Scatter plot in PHATE basis. pl.trimap(adata, *[, color, mask_obs, ...]); Scatter plot in TriMap basis. pl.sam(adata[, projection, c, cmap, ...]); Scatter plot using the SAM projection or another input projection. pl.wishbone_marker_trajectory(adata, markers, *); Plot marker trends along trajectory, and return trajectory branches for further analysis and visualization (heatmap, etc..). previous; scanpy.external.tl.cyclone. next; scanpy.external.pl.phate. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/plotting.html:9046,Release,Release,9046,en/stable/external/plotting.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/plotting.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"I Virshup. Features#. Added layer and copy kwargs to normalize_total() pr1667 I Virshup; Added vcenter and norm arguments to the plotting functions pr1551 G Eraslan; Standardized and expanded available arguments to the sc.pl.rank_genes_groups* family of functions. pr1529 F Ramirez I Virshup. See examples sections of rank_genes_groups_dotplot() and rank_genes_groups_matrixplot() for demonstrations. scanpy.tl.tsne() now supports the metric argument and records the passed parameters pr1854 I Virshup; scanpy.pl.scrublet_score_distribution() now uses same API as other scanpy functions for saving/ showing plots pr1741 J Manning. Ecosystem#. Added Cubé to ecosystem page pr1878 C Lambden; Added triku a feature selection method to the ecosystem page pr1722 AM Ascensión; Added dorothea and progeny to the ecosystem page pr1767 P Badia-i-Mompel. Documentation#. Added Community page to docs pr1856 I Virshup; Added rendered examples to many plotting functions issue1664 A Schaar L Zappia bio-la L Hetzel L Dony M Buttner K Hrovatin F Ramirez I Virshup LouisK92 mayarali; Integrated DocSearch, a find-as-you-type documentation index search. pr1754 P Angerer; Reorganized reference docs pr1753 I Virshup; Clarified docs issues for neighbors(),; diffmap(), calculate_qc_metrics() pr1680 G Palla; Fixed typos in grouped plot doc-strings pr1877 C Rands; Extended examples for differential expression plotting. pr1529 F Ramirez. See rank_genes_groups_dotplot() or rank_genes_groups_matrixplot() for examples. Bug fixes#. Fix scanpy.pl.paga_path() TypeError with recent versions of anndata pr1047 P Angerer; Fix detection of whether IPython is running pr1844 I Virshup; Fixed reproducibility of scanpy.tl.diffmap() (added random_state) pr1858 I Kucinski; Fixed errors and warnings from embedding plots with small numbers of categories after sns.set_palette was called pr1886 I Virshup; Fixed handling of gene_symbols argument in a number of sc.pl.rank_genes_groups* functions pr1529 F Ramirez I Virshup; Fix",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:27424,Integrat,Integrated,27424,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['Integrat'],['Integrated']
Deployability,"ML no longer returns a squared Euclidean distance matrix, so we should not square-root the kNN distance matrix. pr1828 M Zaslavsky; Removed pytables dependency by implementing read_10x_h5 with h5py due to installation errors on Windows pr2064; Fixed bug in scanpy.external.pp.hashsolo() where default value was set improperly pr2190 B Reiz; Fixed bug in scanpy.pl.embedding() functions where an error could be raised when there were missing values and large numbers of categories pr2187 I Virshup. Version 1.8#. 1.8.2 2021-11-3#. Documentation#. Update conda installation instructions pr1974 L Heumos. Bug fixes#. Fix plotting after scanpy.tl.filter_rank_genes_groups() pr1942 S Rybakov; Fix use_raw=None using anndata.AnnData.var_names if anndata.AnnData.raw; is present in scanpy.tl.score_genes() pr1999 M Klein; Fix compatibility with UMAP 0.5.2 pr2028 L Mcinnes; Fixed non-determinism in scanpy.pl.paga() node positions pr1922 I Virshup. Ecosystem#. Added PASTE (a tool to align and integrate spatial transcriptomics data) to scanpy ecosystem. 1.8.1 2021-07-07#. Bug fixes#. Fixed reproducibility of scanpy.tl.score_genes(). Calculation and output is now float64 type. pr1890 I Kucinski; Workarounds for some changes/ bugs in pandas 1.3 pr1918 I Virshup; Fixed bug where sc.pl.paga_compare could mislabel nodes on the paga graph pr1898 I Virshup; Fixed handling of use_raw with scanpy.tl.rank_genes_groups() pr1934 I Virshup. 1.8.0 2021-06-28#. Metrics module#. Added scanpy.metrics module!. Added scanpy.metrics.gearys_c() for spatial autocorrelation pr915 I Virshup; Added scanpy.metrics.morans_i() for global spatial autocorrelation pr1740 I Virshup, G Palla; Added scanpy.metrics.confusion_matrix() for comparing labellings pr915 I Virshup. Features#. Added layer and copy kwargs to normalize_total() pr1667 I Virshup; Added vcenter and norm arguments to the plotting functions pr1551 G Eraslan; Standardized and expanded available arguments to the sc.pl.rank_genes_groups* family of function",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:25602,integrat,integrate,25602,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['integrat'],['integrate']
Deployability,"Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. Analysis methods#. scvi-tools#. scvi-tools Berkeley. scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. Fate mapping#. CellRank Helmholtz Munich. CellRank is a framework to uncover cellular dynamics based on single-cell data.; It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. Differential expression#. diffxpy Helmholtz Munich. Data integration#. scanaroma MIT. Modeling perturbations#. scGen / trVAE Helmholtz Munich. Feature selection#. triku 🦔 Biodonostia Health Research Institute; CIARA Helmholtz Munich. CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. Annotation/ Enrichment Analysis#; Analyses using curated prior knowledge. decoupler is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. Institute for Computational Biomedicine, Heidelberg University; Cubé Harvard University. Intuitive Nonparametric Gene Network Search Algorithm that learns from existing biological pathways & multiplicative gene interference patterns. previous; scanpy.external.exporting.cellbrowser. next; Release notes. Contents; . Viewers; Portals; Modalities; RNA velocity; Spatial Transcriptomics Tools; Multimodal integration; Adaptive immune receptor repertoire (AIRR); Long reads. Analysis methods; scvi-tools; Fate mapping; Differential expression; Data integration; Modeling perturbations; Feature selection; Annotation/ Enrichment Analysis. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:12996,Release,Release,12996,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,3,"['Release', 'integrat']","['Release', 'integration']"
Deployability,"R) repertoires. dandelion University of Cambridge. dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. Long reads#. Swan UC Irvine. Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. Analysis methods#. scvi-tools#. scvi-tools Berkeley. scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. Fate mapping#. CellRank Helmholtz Munich. CellRank is a framework to uncover cellular dynamics based on single-cell data.; It incorporates modalities such as RNA velocity, pseudotime, developmental potential, real-time information, etc. Differential expression#. diffxpy Helmholtz Munich. Data integration#. scanaroma MIT. Modeling perturbations#. scGen / trVAE Helmholtz Munich. Feature selection#. triku 🦔 Biodonostia Health Research Institute; CIARA Helmholtz Munich. CIARA is an algorithm for feature selection, that aims for the identification of rare cell types via scRNA-Seq data in scanpy. Annotation/ Enrichment Analysis#; Analyses using curated prior knowledge. decoupler is a collection of footprint enrichment methods that allows to infer transcription factor or pathway activities. Institute for Computational Biomedicine, Heidelberg University; Cubé Harvard University. Intuitive Nonparametric Gene Network Search Algorithm that learns from existing biological pathways & multiplicative gene interference patterns. previous; scanpy.external.exporting.cellbrowser. next; Release notes. Contents; . Viewers; Portals; Modalities; RNA velocity; Spatial Transcriptomics Tools; Multimodal integration; Adaptive immune receptor repertoire (AIRR); Long reads. Analysis methods; scvi-tools; Fa",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:12206,integrat,integration,12206,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,1,['integrat'],['integration']
Deployability,ScanpyConfig.cachedir.rst; scanpy._settings.ScanpyConfig.categories_to_ignore.rst; scanpy._settings.ScanpyConfig.datasetdir.rst; scanpy._settings.ScanpyConfig.figdir.rst; scanpy._settings.ScanpyConfig.file_format_data.rst; scanpy._settings.ScanpyConfig.file_format_figs.rst; scanpy._settings.ScanpyConfig.logfile.rst; scanpy._settings.ScanpyConfig.logpath.rst; scanpy._settings.ScanpyConfig.max_memory.rst; scanpy._settings.ScanpyConfig.n_jobs.rst; scanpy._settings.ScanpyConfig.N_PCS.rst; scanpy._settings.ScanpyConfig.plot_suffix.rst; scanpy._settings.ScanpyConfig.rst; scanpy._settings.ScanpyConfig.set_figure_params.rst; scanpy._settings.ScanpyConfig.verbosity.rst; scanpy._settings.ScanpyConfig.writedir.rst; scanpy.datasets.blobs.rst; scanpy.datasets.ebi_expression_atlas.rst; scanpy.datasets.krumsiek11.rst; scanpy.datasets.moignard15.rst; scanpy.datasets.paul15.rst; scanpy.datasets.pbmc3k.rst; scanpy.datasets.pbmc3k_processed.rst; scanpy.datasets.pbmc68k_reduced.rst; scanpy.datasets.toggleswitch.rst; scanpy.datasets.visium_sge.rst; scanpy.experimental.pp.highly_variable_genes.rst; scanpy.experimental.pp.normalize_pearson_residuals.rst; scanpy.experimental.pp.normalize_pearson_residuals_pca.rst; scanpy.experimental.pp.recipe_pearson_residuals.rst; scanpy.external.exporting.cellbrowser.rst; scanpy.external.exporting.spring_project.rst; scanpy.external.pl.phate.rst; scanpy.external.pl.sam.rst; scanpy.external.pl.trimap.rst; scanpy.external.pl.wishbone_marker_trajectory.rst; scanpy.external.pp.bbknn.rst; scanpy.external.pp.dca.rst; scanpy.external.pp.harmony_integrate.rst; scanpy.external.pp.hashsolo.rst; scanpy.external.pp.magic.rst; scanpy.external.pp.mnn_correct.rst; scanpy.external.pp.scanorama_integrate.rst; scanpy.get.aggregate.rst; scanpy.get.obs_df.rst; scanpy.get.rank_genes_groups_df.rst; scanpy.get.var_df.rst; scanpy.logging.print_header.rst; scanpy.logging.print_versions.rst; scanpy.metrics.confusion_matrix.rst; scanpy.metrics.gearys_c.rst; scanpy.metrics.morans_i,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:6545,toggle,toggleswitch,6545,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,1,['toggle'],['toggleswitch']
Deployability,"ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.cachedir. Contents . ScanpyConfig.cachedir. scanpy._settings.ScanpyConfig.cachedir#. property ScanpyConfig.cachedir: Path[source]#; Directory for cache files (default './cache/'). previous; scanpy._settings.ScanpyConfig.cache_compression. next; scanpy._settings.ScanpyConfig.categories_to_ignore. Contents; . ScanpyConfig.cachedir. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.cachedir.html:9072,Release,Release,9072,en/stable/generated/scanpy._settings.ScanpyConfig.cachedir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.cachedir.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"The triplets are sampled from the high-dimensional representation of the; points and a weighting scheme is used to reflect the importance of each; triplet.; TriMap provides a significantly better global view of the data than the; other dimensionality reduction methods such t-SNE, LargeVis, and UMAP.; The global structure includes relative distances of the clusters, multiple; scales in the data, and the existence of possible outliers. We define a; global score to quantify the quality of an embedding in reflecting the; global structure of the data. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)Number of dimensions of the embedding. n_inliers int (default: 10)Number of inlier points for triplet constraints. n_outliers int (default: 5)Number of outlier points for triplet constraints. n_random int (default: 5)Number of random triplet constraints per point. metric Literal['angular', 'euclidean', 'hamming', 'manhattan'] (default: 'euclidean')Distance measure: ‘angular’, ‘euclidean’, ‘hamming’, ‘manhattan’. weight_adj float (default: 500.0)Adjusting the weights using a non-linear transformation. lr float (default: 1000.0)Learning rate. n_iters int (default: 400)Number of iterations. verbose bool | int | None (default: None)If True, print the progress report.; If None, sc.settings.verbosity is used. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields. X_trimapndarray, (obsm, shape=(n_samples, n_components), dtype float)TriMap coordinates of data. Example; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> pbmc = sc.datasets.pbmc68k_reduced(); >>> pbmc = sce.tl.trimap(pbmc, copy=True); >>> sce.pl.trimap(pbmc, color=['bulk_labels'], s=10). previous; scanpy.external.tl.palantir. next; scanpy.external.tl.sam. Contents; . trimap(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:11288,update,updates,11288,en/stable/external/generated/scanpy.external.tl.trimap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html,1,['update'],['updates']
Deployability,"_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using other kNN libraries in Scanpy. Using other kNN libraries in Scanpy#; Since Scanpy was released, there has been quite some development in the space of approximate nearest neighbor detection.; In our example, we’re going to use Annoy:. %pip install -qU ""pip""; %pip install -q ""scanpy"" ""sklearn-ann[annoy]"". Note: you may need to restart the kernel to use updated packages.; Note: you may need to restart the kernel to use updated packages. import scanpy as sc; from sklearn_ann.kneighbors.annoy import AnnoyTransformer # noqa: F401. sc.logging.print_header(). scanpy==1.10.0rc2.dev0+g48b495d9.d20240222 anndata==0.10.5.post1 umap==0.5.5 numpy==1.26.4 scipy==1.12.0 pandas==2.2.0 scikit-learn==1.4.1.post1 statsmodels==0.14.1 igraph==0.11.4 pynndescent==0.5.11. Our nearest neighbors implementation uses the PCA embedding by default, so let’s pre-compute that:. adata_default = sc.datasets.paul15(); sc.pp.pca(adata_default); adata_annoy, adata_pynnd = adata_default.copy(), adata_default.copy(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. The best way to use",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html:9338,release,released,9338,en/stable/how-to/knn-transformers.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html,1,['release'],['released']
Deployability,"_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Contributing. Contributing#; Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. Contributing code; Development workflow; Code style. Getting set up; Working with git; Forking and cloning; pre-commit; Creating a branch for your feature; Open a pull request. Development environments. Tests; Running the tests; Miscellaneous tips. Writing tests; What to test; Performance; Plotting tests. Documentation; Building the docs; Adding to the docs; docstrings format; Plots in docstrings; Params section; Returns section; Examples. CI; Plotting tests; Viewing plots from failed tests on Azure pipelines; Misc. Versioning; Semantic versioning; Version numbers. Tooling; Technical details. Making a release; Preparing the release; Actually making the release; After making a release; Debugging the build process. Parts of the guidelines have been adapted from the pandas and MDAnalysis guides.; These are both excellent guides and we highly recommend checking them out. previous; News. next; Contributing code. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/index.html:9880,pipeline,pipelines,9880,en/stable/dev/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/index.html,5,"['pipeline', 'release']","['pipelines', 'release']"
Deployability,"_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announc",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9933,release,release,9933,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.get.var_df. Contents . var_df(). scanpy.get.var_df#. scanpy.get.var_df(adata, keys=(), varm_keys=(), *, layer=None)[source]#; Return values for observations in adata. Parameters:. adata AnnDataAnnData object to get values from. keys Iterable[str] (default: ())Keys from either .obs_names, or .var.columns. varm_keys Iterable[tuple[str, int]] (default: ())Tuple of (key from varm, column index of varm[key]). layer str | None (default: None)Layer of adata to use as expression values. Return type:; DataFrame. Returns:; A dataframe with adata.var_names as index, and values specified by keys; and varm_keys. previous; scanpy.get.obs_df. next; scanpy.get.rank_genes_groups_df. Contents; . var_df(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.var_df.html:9051,Release,Release,9051,en/stable/generated/scanpy.get.var_df.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.var_df.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"_settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH. Contents . DotPlot.DEFAULT_LEGENDS_WIDTH. scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH#. DotPlot.DEFAULT_LEGENDS_WIDTH = 1.5[source]#. previous; scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT. next; scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING. Contents; . DotPlot.DEFAULT_LEGENDS_WIDTH. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH.html:9073,Release,Release,9073,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"_settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_JITTER. Contents . StackedViolin.DEFAULT_JITTER. scanpy.pl.StackedViolin.DEFAULT_JITTER#. StackedViolin.DEFAULT_JITTER = False[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_INNER. next; scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE. Contents; . StackedViolin.DEFAULT_JITTER. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html:9072,Release,Release,9072,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"_settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX. Contents . StackedViolin.DEFAULT_SAVE_PREFIX. scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX#. StackedViolin.DEFAULT_SAVE_PREFIX = 'stacked_violin_'[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE. next; scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT. Contents; . StackedViolin.DEFAULT_SAVE_PREFIX. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html:9077,Release,Release,9077,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_SAVE_PREFIX.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ). At this step, we have integrated each visium dataset in a common embedding with the scRNA-seq dataset. In such embedding space, we can compute distances between samples and use such distances as weights to be used for for propagating labels from the scRNA-seq dataset to the Visium dataset.; Such approach is very similar to the TransferData function in Seurat (see paper). Here, we re-implement the label transfer function with a simple python function, see below.; Frist, let’s compute cosine distances between the visium dataset and the scRNA-seq dataset, in the common embedding space. from sklearn.metrics.pairwise import cosine_distances. distances_anterior = 1 - cosine_distances(; adata_cortex_anterior[adata_cortex_anterior.obs.dataset == ""smart-seq""].obsm[; ""X_scanorama""; ],; adata_cortex_anterior[adata_cortex_anterior.obs.dataset == ""visium""].obsm[; ""X_scanorama""; ],; ); distances_posterior = 1 - cosine_distances(; adata_cortex_posterior[adata_cortex_posterior.obs.dataset == ""smart-seq""].obsm[; ""X_scanorama""; ],; adata_cortex_posterio",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:23320,integrat,integrated,23320,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integrated']
Deployability,"al variance. Choosing a smaller value will reduce; the required memory. flavor Literal['pearson_residuals'] (default: 'pearson_residuals')Choose the flavor for identifying highly variable genes. In this experimental; version, only ‘pearson_residuals’ is functional. check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. layer str | None (default: None)Layer to use as input instead of X. If None, X is used. subset bool (default: False)If True, subset the data to highly-variable genes after finding them.; Otherwise merely indicate highly variable genes in adata.var (see below). inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. Return type:; DataFrame | None. Returns:; If inplace=True, adata.var is updated with the following fields. Otherwise,; returns the same fields as DataFrame. highly_variableboolboolean indicator of highly-variable genes. meansfloatmeans per gene. variancesfloatvariance per gene. residual_variancesfloatFor flavor='pearson_residuals', residual variance per gene. Averaged in the; case of multiple batches. highly_variable_rankfloatFor flavor='pearson_residuals', rank of the gene according to residual.; variance, median rank in the case of multiple batches. highly_variable_nbatchesintIf batch_key given, denotes in how many batches genes are detected as HVG. highly_variable_intersectionboolIf batch_key given, denotes the genes that are highly variable in all batches. Notes; Experimental version of sc.pp.highly_variable_genes(). previous; scanpy.experimental.pp.normalize_pearson_residuals_pca. next; scanpy.experimental.pp.recipe_pearson_residuals. Contents; . highly_variable_genes(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html:12387,update,updated,12387,en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,1,['update'],['updated']
Deployability,"alantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Plotting: pl. Contents . Generic; Classes; Preprocessing; Tools; PCA; Embeddings. Branching trajectories and pseudotime, clustering; Marker genes; Simulations. Plotting: pl#; The plotting module scanpy.pl largely parallels the tl.* and a few of the pp.* functions.; For most tools and for some preprocessing functions, you’ll find a plotting function with the same name.; See Core plotting functions for an overview of how to use these functions. Note; See the Settings section for all important plotting configurations. Generic#. pl.scatter; Scatter plot along observations or variables axes. pl.heatmap; Heatmap of the expression values of genes. pl.dotplot; Makes a dot plot of the expression values of var_names. pl.tracksplot; In this type of plot each var_name is plotted as a filled line plot where the y values correspond to the var_name values and x is each of the cells. pl.violin; Violin plot. pl.stacked_violin; Stacked violin plots. pl.matrixplot; Creates a heatmap of the mean expression values per group of each var_names. pl.clustermap; Hierarchically-clustered heatmap. pl.ranking; Plot rankings. pl.dendrogram; Plots a dendrogram of the categories defined in groupby. Classes#; These classes allow fine tuning of visual parameters. pl.DotPlot; Allows the visualization of two values that are encoded as dot size and color. pl.MatrixPlot; Allows the visualization of values using a color map. pl.StackedViolin; Stacked violin plots. Preprocessing#; Methods for visua",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/plotting.html:9725,configurat,configurations,9725,en/stable/api/plotting.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/plotting.html,1,['configurat'],['configurations']
Deployability,"anch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Cle",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10546,release,release,10546,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,4,['release'],"['release', 'releases']"
Deployability,"anpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CUT. Contents . StackedViolin.DEFAULT_CUT. scanpy.pl.StackedViolin.DEFAULT_CUT#. StackedViolin.DEFAULT_CUT = 0[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. next; scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM. Contents; . StackedViolin.DEFAULT_CUT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html:9069,Release,Release,9069,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CUT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"anpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.toggleswitch. Contents . toggleswitch(). scanpy.datasets.toggleswitch#. scanpy.datasets.toggleswitch()[source]#; Simulated toggleswitch.; Data obtained simulating a simple toggleswitch [Gardner et al., 2000]; Simulate via sim(). Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.toggleswitch(); UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.; utils.warn_names_duplicates(""obs""); AnnData object with n_obs × n_vars = 200 × 2; uns: 'iroot'. previous; scanpy.datasets.paul15. next; scanpy.datasets.visium_sge. Contents; . toggleswitch(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.toggleswitch.html:9062,Release,Release,9062,en/stable/generated/scanpy.datasets.toggleswitch.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.toggleswitch.html,10,"['Release', 'release', 'toggle']","['Release', 'release', 'toggleswitch']"
Deployability,"anpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_text. Contents . read_text(). scanpy.read_text#. scanpy.read_text(filename, delimiter=None, first_column_names=None, dtype='float32')[source]#; Read .txt, .tab, .data (text) file.; Same as read_csv() but with default delimiter None. Parameters:. filename PathLike | Iterator[str]Data file, filename or stream. delimiter str | None (default: None)Delimiter that separates data within text file. If None, will split at; arbitrary number of white spaces, which is different from enforcing; splitting at single white space ' '. first_column_names bool | None (default: None)Assume the first column stores row names. dtype str (default: 'float32')Numpy data type. Return type:; AnnData. previous; scanpy.read_mtx. next; scanpy.read_umi_tools. Contents; . read_text(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_text.html:9050,Release,Release,9050,en/stable/generated/scanpy.read_text.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_text.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"anpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Ecosystem. Contents . Viewers; Portals; Modalities; RNA velocity; Spatial Transcriptomics Tools; Multimodal integration; Adaptive immune receptor repertoire (AIRR); Long reads. Analysis methods; scvi-tools; Fate mapping; Differential expression; Data integration; Modeling perturbations; Feature selection; Annotation/ Enrichment Analysis. Ecosystem#. Warning; We are no longer accepting new tools on this page.; Instead, please submit your tool to the scverse ecosystem package listing. Viewers#; Interactive manifold viewers. cellxgene via direct reading of .h5ad CZI; cirrocumulus via direct reading of .h5ad Broad Inst.; cell browser via exporing through cellbrowser() UCSC; SPRING via exporting through spring_project() Harvard Med; vitessce for purely browser based viewing of zarr formatted AnnData files Harvard Med. Portals#. the Gene Expression Analysis Resource U Maryland; the Galaxy Project for the Human Cell Atlas [tweet] U Freiburg; the Expression Atlas EMBL-EBI. Modalities#. RNA velocity#. scVelo Helmholtz Munich. Spatial Transcriptomics Tools#. squidpy Helmholtz Munich. Squidpy ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:9325,integrat,integration,9325,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,1,['integrat'],['integration']
Deployability,"anpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Preprocessing: PP. Contents . Data integration; Sample demultiplexing; Imputation. Preprocessing: PP#. Data integration#. pp.bbknn(adata, *[, batch_key, use_rep, ...]); Batch balanced kNN [Polański et al., 2019]. pp.harmony_integrate(adata, key, *[, basis, ...]); Use harmonypy [Korsunsky et al., 2019] to integrate different experiments. pp.mnn_correct(*datas[, var_index, ...]); Correct batch effects by matching mutual nearest neighbors [Haghverdi et al., 2018] [Kang, 2018]. pp.scanorama_integrate(adata, key, *[, ...]); Use Scanorama [Hie et al., 2019] to integrate different experiments. Sample demultiplexing#. pp.hashsolo(adata, cell_hashing_columns, *); Probabilistic demultiplexing of cell hashing data using HashSolo [Bernstein et al., 2020]. Imputation#; Note that the fundamental limitations of imputation are still under debate. pp.dca(adata[, mode, ae_type, ...]); Deep count autoencoder [Eraslan et al., 2019]. pp.magic(adata[, name_list, knn, decay, ...]); Markov Affinity-based Graph Imputation of Cells (MAGIC) API [van Dijk et al., 2018]. previous; External API. next; scanpy.external.pp.bbknn. Contents; . Data integration; Sample demultiplexing; Imputation. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html:9531,integrat,integrate,9531,en/stable/external/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html,3,['integrat'],"['integrate', 'integration']"
Deployability,"anpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.file_format_figs. Contents . ScanpyConfig.file_format_figs. scanpy._settings.ScanpyConfig.file_format_figs#. property ScanpyConfig.file_format_figs: str[source]#; File format for saving figures.; For example ‘png’, ‘pdf’ or ‘svg’. Many other formats work as well (see; matplotlib.pyplot.savefig). previous; scanpy._settings.ScanpyConfig.file_format_data. next; scanpy._settings.ScanpyConfig.logfile. Contents; . ScanpyConfig.file_format_figs. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.file_format_figs.html:9080,Release,Release,9080,en/stable/generated/scanpy._settings.ScanpyConfig.file_format_figs.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.file_format_figs.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"anpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Contributors. Contents . Current developers; Other roles; Former developers. Contributors#; anndata graph | scanpy graph| ☀ = maintainer. Current developers#. Isaac Virshup, lead developer since 2019 ☀; Gökcen Eraslan, developer, diverse contributions ☀; Sergei Rybakov, developer, diverse contributions ☀; Fidel Ramirez developer, plotting ☀; Giovanni Palla, developer, spatial data; Malte Luecken, developer, community & forum; Lukas Heumos, developer, diverse contributions; Philipp Angerer, developer, software quality, initial anndata conception ☀. Other roles#. Alex Wolf: lead developer 2016-2019, initial anndata & scanpy conception; Fabian Theis & lab: enabling guidance, support and environment. Former developers#. Tom White: developer 2018-2019, distributed computing. previous; Making a release. next; References. Contents; . Current developers; Other roles; Former developers. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/contributors.html:10020,release,release,10020,en/stable/contributors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/contributors.html,1,['release'],['release']
Deployability,"anpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. Search. Error; Please activate JavaScript to enable the search functionality. Ctrl+K. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/search.html:9040,Release,Release,9040,en/stable/search.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/search.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"anpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Deprecated functions. Deprecated functions#. pp.filter_genes_dispersion; Extract highly variable genes [Satija et al., 2015, Zheng et al., 2017]. pp.normalize_per_cell; Normalize total counts per cell. previous; scanpy.datasets.visium_sge. next; scanpy.pp.filter_genes_dispersion. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/deprecated.html:9054,Release,Release,9054,en/stable/api/deprecated.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/deprecated.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"anpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT. Contents . MatrixPlot.DEFAULT_CATEGORY_HEIGHT. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT#. MatrixPlot.DEFAULT_CATEGORY_HEIGHT = 0.35[source]#. previous; scanpy.pl.MatrixPlot. next; scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH. Contents; . MatrixPlot.DEFAULT_CATEGORY_HEIGHT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html:9078,Release,Release,9078,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"anpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_hdf. Contents . read_hdf(). scanpy.read_hdf#. scanpy.read_hdf(filename, key)[source]#; Read .h5 (hdf5) file.; Note: Also looks for fields row_names and col_names. Parameters:. filename PathLikeFilename of data file. key strName of dataset in the file. Return type:; AnnData. previous; scanpy.read_excel. next; scanpy.read_loom. Contents; . read_hdf(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_hdf.html:9049,Release,Release,9049,en/stable/generated/scanpy.read_hdf.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_hdf.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ansform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbor",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16062,integrat,integrated,16062,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integrated']
Deployability,"are first sorted by; how many batches they are a HVG. If flavor='pearson_residuals', ties are; broken by the median rank (across batches) based on within-batch residual; variance. chunksize int (default: 1000)If flavor='pearson_residuals', this dertermines how many genes are processed at; once while computing the residual variance. Choosing a smaller value will reduce; the required memory. n_comps int | None (default: 50)Number of principal components to compute in the PCA step. random_state float | None (default: 0)Random seed for setting the initial states for the optimization in the PCA step. kwargs_pca dict (default: {})Dictionary of further keyword arguments passed on to scanpy.pp.pca(). check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. Return type:; tuple[AnnData, DataFrame] | None. Returns:; If inplace=False, separately returns the gene selection results (as; DataFrame) and Pearson residual-based PCA results (as; AnnData). If inplace=True, updates adata with the; following fields for gene selection results:. .var['highly_variable']boolboolean indicator of highly-variable genes. .var['means']floatmeans per gene. .var['variances']floatvariances per gene. .var['residual_variances']floatPearson residual variance per gene. Averaged in the case of multiple; batches. .var['highly_variable_rank']floatRank of the gene according to residual variance, median rank in the; case of multiple batches. .var['highly_variable_nbatches']intIf batch_key is given, this denotes in how many batches genes are; detected as HVG. .var['highly_variable_intersection']boolIf batch_key is given, this denotes the genes that are highly variable; i",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html:11939,update,update,11939,en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,1,['update'],['update']
Deployability,"ase notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.highly_variable_genes. Contents . highly_variable_genes(). scanpy.pp.highly_variable_genes#. scanpy.pp.highly_variable_genes(adata, *, layer=None, n_top_genes=None, min_disp=0.5, max_disp=inf, min_mean=0.0125, max_mean=3, span=0.3, n_bins=20, flavor='seurat', subset=False, inplace=True, batch_key=None, check_values=True)[source]#; Annotate highly variable genes [Satija et al., 2015, Stuart et al., 2019, Zheng et al., 2017].; Expects logarithmized data, except when flavor='seurat_v3'/'seurat_v3_paper', in which count; data is expected.; Depending on flavor, this reproduces the R-implementations of Seurat; [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019].; 'seurat_v3'/'seurat_v3_paper' requires scikit-misc package. If you plan to use this flavor, consider; installing scanpy with this optional dependency: scanpy[skmisc].; For the dispersion-based methods (flavor='seurat' Satija et al. [2015] and; flavor='cell_ranger' Zheng et al. [2017]), the normalized dispersion is obtained; by scaling with the mean and standard deviation of the dispersions for genes; falling into a given bin for mean expression of genes. This means that for each; bin of mean expression, highly variable genes are selected.; For flavor='seurat_v3'/'seurat_v3_paper' [Stuart et al., 2019], a normalized variance for each gene; is computed. First, the data are standardized (i.e., z-score normalization; per feature) with a regularized standard deviation. Next, the normalized variance; is computed as the variance of each gene after the transformation. Genes are ranked; by the normalized variance.; Only if batch_key is not None, the two flavors differ: For flavor='seurat_v3', genes are first sorted by the median (across batches) rank, with ties broken by the number of batches a gene is a ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.highly_variable_genes.html:10059,install,installing,10059,en/stable/generated/scanpy.pp.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.highly_variable_genes.html,1,['install'],['installing']
Deployability,"ase. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10173,patch,patch,10173,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['patch'],['patch']
Deployability,"ata analysis. Genome Biology, 19(1):15, feb 2018. URL: https://doi.org/10.1186/s13059-017-1382-0, doi:10.1186/s13059-017-1382-0. [WHP+19]; F. Alexander Wolf, Fiona K. Hamey, Mireya Plass, Jordi Solana, Joakim S. Dahlin, Berthold Göttgens, Nikolaus Rajewsky, Lukas Simon, and Fabian J. Theis. Paga: graph abstraction reconciles clustering with trajectory inference through a topology preserving map of single cells. Genome Biology, mar 2019. URL: https://doi.org/10.1186/s13059-019-1663-x, doi:10.1186/s13059-019-1663-x. [WLK19]; Samuel L. Wolock, Romain Lopez, and Allon M. Klein. Scrublet: computational identification of cell doublets in single-cell transcriptomic data. Cell Systems, 8(4):281–291.e9, apr 2019. URL: https://doi.org/10.1016/j.cels.2018.11.005, doi:10.1016/j.cels.2018.11.005. [ZTB+17]; Grace X. Y. Zheng, Jessica M. Terry, Phillip Belgrader, Paul Ryvkin, Zachary W. Bent, Ryan Wilson, Solongo B. Ziraldo, Tobias D. Wheeler, Geoff P. McDermott, Junjie Zhu, Mark T. Gregory, Joe Shuga, Luz Montesclaros, Jason G. Underwood, Donald A. Masquelier, Stefanie Y. Nishimura, Michael Schnall-Levin, Paul W. Wyatt, Christopher M. Hindson, Rajiv Bharadwaj, Alexander Wong, Kevin D. Ness, Lan W. Beppu, H. Joachim Deeg, Christopher McFarland, Keith R. Loeb, William J. Valente, Nolan G. Ericson, Emily A. Stevens, Jerald P. Radich, Tarjei S. Mikkelsen, Benjamin J. Hindson, and Jason H. Bielas. Massively parallel digital transcriptional profiling of single cells. Nature Communications, jan 2017. URL: https://doi.org/10.1038/ncomms14049, doi:10.1038/ncomms14049. [ZLG+15]; Eli R. Zunder, Ernesto Lujan, Yury Goltsev, Marius Wernig, and Garry P. Nolan. A continuous molecular roadmap to ipsc reprogramming through progression analysis of single-cell mass cytometry. Cell Stem Cell, 16(3):323–337, mar 2015. URL: https://doi.org/10.1016/j.stem.2015.01.015, doi:10.1016/j.stem.2015.01.015. previous; Contributors. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:30274,continuous,continuous,30274,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['continuous'],['continuous']
Deployability,"attrs 23.2.0; babel 2.14.0; certifi 2024.02.02; cffi 1.16.0; charset_normalizer 3.3.2; colorama 0.4.6; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; exceptiongroup 1.2.0; executing 2.0.1; fastjsonschema NA; fqdn NA; h5py 3.10.0; idna 3.6; ipykernel 6.29.0; isoduration NA; jedi 0.19.1; jinja2 3.1.3; joblib 1.3.2; json5 NA; jsonpointer 2.4; jsonschema 4.21.1; jsonschema_specifications NA; jupyter_events 0.9.0; jupyter_server 2.12.5; jupyterlab_server 2.25.2; kiwisolver 1.4.5; legacy_api_wrap NA; legendkit 0.3.4; llvmlite 0.42.0; markupsafe 2.1.5; matplotlib_inline 0.1.6; mpl_toolkits NA; natsort 8.4.0; nbformat 5.9.2; numba 0.59.1; overrides NA; packaging 23.2; parso 0.8.3; patsy 0.5.6; pexpect 4.9.0; platformdirs 4.1.0; prometheus_client NA; prompt_toolkit 3.0.43; psutil 5.9.8; ptyprocess 0.7.0; pure_eval 0.2.2; pyarrow 15.0.0; pydev_ipython NA; pydevconsole NA; pydevd 2.9.5; pydevd_file_utils NA; pydevd_plugins NA; pydevd_tracing NA; pygments 2.17.2; pyparsing 3.1.1; pythonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scipy 1.12.0; seaborn 0.13.2; send2trash NA; six 1.16.0; sklearn 1.4.0; sniffio 1.3.0; sphinxcontrib NA; stack_data 0.6.3; statsmodels 0.14.1; threadpoolctl 3.2.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zmq 25.1.2. . -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.11; -----; Python 3.10.0 | packaged by conda-forge | (default, Nov 20 2021, 02:27:15) [Clang 11.1.0 ]; macOS-14.2.1-arm64-arm-64bit; -----; Session information updated at 2024-04-19 15:23. previous; Using other kNN libraries in Scanpy. next; API. Contents; . Heatmap; Matrixplot; Dot plot; Tracksplot; Stacked Violin; More information. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/plotting-with-marsilea.html:19224,update,updated,19224,en/stable/how-to/plotting-with-marsilea.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/plotting-with-marsilea.html,1,['update'],['updated']
Deployability,"ayer=None, obsm=None, mask_obs=None)[source]#; Scale data to unit variance and zero mean. Note; Variables (genes) that do not display any variation (are constant across; all observations) are retained and (for zero_center==True) set to 0; during this operation. In the future, they might be set to NaNs. Parameters:. data AnnData | spmatrix | ndarray | ArrayThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. zero_center bool (default: True)If False, omit zero-centering variables, which allows to handle sparse; input efficiently. max_value float | None (default: None)Clip (truncate) to this value after scaling. If None, do not clip. copy bool (default: False)Whether this function should be performed inplace. If an AnnData object; is passed, this also determines if a copy is returned. layer str | None (default: None)If provided, which element of layers to scale. obsm str | None (default: None)If provided, which element of obsm to scale. mask_obs ndarray[Any, dtype[bool]] | str | None (default: None)Restrict both the derivation of scaling parameters and the scaling itself; to a certain set of observations. The mask is specified as a boolean array; or a string referring to an array in obs.; This will transform data from csc to csr format if issparse(data). Return type:; AnnData | spmatrix | ndarray | Array | None. Returns:; Returns None if copy=False, else returns an updated AnnData object. Sets the following fields:. adata.X | adata.layers[layer]numpy.ndarray | scipy.sparse._csr.csr_matrix (dtype float)Scaled count data matrix. adata.var['mean']pandas.Series (dtype float)Means per gene before scaling. adata.var['std']pandas.Series (dtype float)Standard deviations per gene before scaling. adata.var['var']pandas.Series (dtype float)Variances per gene before scaling. previous; scanpy.pp.regress_out. next; scanpy.pp.subsample. Contents; . scale(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.scale.html:10784,update,updated,10784,en/stable/generated/scanpy.pp.scale.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.scale.html,1,['update'],['updated']
Deployability,"bag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Versioning. Contents . Semantic versioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. 1.7.x for the 1.7 release series).; For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs are assigned a patch version milestone such as 1.7.4.; Once the PR is approved and merged, the bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures. Technical details#; The [mees",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:9760,release,releases,9760,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,1,['release'],['releases']
Deployability,"bag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_h5ad. Contents . read_h5ad(). scanpy.read_h5ad#. scanpy.read_h5ad(filename, backed=None, *, as_sparse=(), as_sparse_fmt=<class 'scipy.sparse._csr.csr_matrix'>, chunk_size=6000)[source]#; Read .h5ad-formatted hdf5 file. Parameters:. filename str | PathFile name of data file. backed Union[Literal['r', 'r+'], bool, None] (default: None)If 'r', load AnnData in backed mode; instead of fully loading it into memory (memory mode).; If you want to modify backed attributes of the AnnData object,; you need to choose 'r+'.; Currently, backed only support updates to X. That means any; changes to other slots like obs will not be written to disk in; backed mode. If you would like save changes made to these slots; of a backed AnnData, write them to a new file; (see write()). For an example, see; [here] (https://anndata-tutorials.readthedocs.io/en/latest/getting-started.html#Partial-reading-of-large-data). as_sparse Sequence[str] (default: ())If an array was saved as dense, passing its name here will read it as; a sparse_matrix, by chunk of size chunk_size. as_sparse_fmt type[spmatrix] (default: <class 'scipy.sparse._csr.csr_matrix'>)Sparse format class to read elements from as_sparse in as. chunk_size int (default: 6000)Used only when loading sparse dataset that is stored as dense.; Loading iterates through chunks of the dataset of this row size; until it reads the whole dataset.; Higher size means higher memory consumption and higher (to a point); loading speed. Return type:; AnnData. previous; scanpy.read_visium. next; scanpy.r",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_h5ad.html:9786,update,updates,9786,en/stable/generated/scanpy.read_h5ad.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_h5ad.html,1,['update'],['updates']
Deployability,"bi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.compute_transitions. Contents . Neighbors.compute_transitions(). scanpy.Neighbors.compute_transitions#. Neighbors.compute_transitions(*, density_normalize=True)[source]#; Compute transition matrix. Parameters:. density_normalize bool (default: True)The density rescaling of Coifman and Lafon (2006): Then only the; geometry of the data matters, not the sampled density. Returns:; Makes attributes .transitions_sym and .transitions available. previous; scanpy.Neighbors.compute_neighbors. next; scanpy.Neighbors.getdoc. Contents; . Neighbors.compute_transitions(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_transitions.html:9070,Release,Release,9070,en/stable/generated/scanpy.Neighbors.compute_transitions.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_transitions.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"bool | None (default: None)Use approximate nearest neighbor method (annoy) for the KNN; classifier. get_doublet_neighbor_parents bool (default: False)If True, return (in .uns) the parent transcriptomes that generated the; doublet neighbors of each observed transcriptome. This information can; be used to infer the cell states that generated a given doublet state. n_neighbors int | None (default: None)Number of neighbors used to construct the KNN graph of observed; transcriptomes and simulated doublets. If None, this is; automatically set to np.round(0.5 * np.sqrt(n_obs)). threshold float | None (default: None)Doublet score threshold for calling a transcriptome a doublet. If; None, this is set automatically by looking for the minimum between; the two modes of the doublet_scores_sim_ histogram. It is best; practice to check the threshold visually using the; doublet_scores_sim_ histogram and/or based on co-localization of; predicted doublets in a 2-D embedding. verbose bool (default: True)If True, log progress updates. copy bool (default: False)If True, return a copy of the input adata with Scrublet results; added. Otherwise, Scrublet results are added in place. random_state Union[int, RandomState, None] (default: 0)Initial state for doublet simulation and nearest neighbors. Return type:; AnnData | None. Returns:; if copy=True it returns or else adds fields to adata. Those fields:. .obs['doublet_score']Doublet scores for each observed transcriptome. .obs['predicted_doublet']Boolean indicating predicted doublet status. .uns['scrublet']['doublet_scores_sim']Doublet scores for each simulated doublet transcriptome. .uns['scrublet']['doublet_parents']Pairs of .obs_names used to generate each simulated doublet; transcriptome. .uns['scrublet']['parameters']Dictionary of Scrublet parameters. See also. scrublet_simulate_doublets()Run Scrublet’s doublet simulation separately for advanced usage. scrublet_score_distribution()Plot histogram of doublet scores for observed transcriptom",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet.html:14104,update,updates,14104,en/stable/api/generated/scanpy.pp.scrublet.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet.html,1,['update'],['updates']
Deployability,"bplots(1, 2, figsize=(15, 10)). for i, library in enumerate(; [""V1_Mouse_Brain_Sagittal_Anterior"", ""V1_Mouse_Brain_Sagittal_Posterior""]; ):; ad = adata_spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more ca",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19241,integrat,integration,19241,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integration']
Deployability,"brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", inde",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:20091,integrat,integration,20091,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integration']
Deployability,"bs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Experimental. Experimental#. How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. previous; Integrating spatial data with scRNA-seq using scanorama. next; How to preprocess UMI count data with analytic Pearson residuals. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html:9046,Release,Release,9046,en/stable/tutorials/experimental/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/index.html,3,"['Integrat', 'Release', 'release']","['Integrating', 'Release', 'release']"
Deployability,"but perform a basic transformation on the data matrix. Basic Preprocessing#; For visual quality control, see highest_expr_genes() and; filter_genes_dispersion() in scanpy.pl. pp.calculate_qc_metrics; Calculate quality control metrics. pp.filter_cells; Filter cell outliers based on counts and numbers of genes expressed. pp.filter_genes; Filter genes based on number of cells or counts. pp.highly_variable_genes; Annotate highly variable genes [Satija et al., 2015, Stuart et al., 2019, Zheng et al., 2017]. pp.log1p; Logarithmize the data matrix. pp.pca; Principal component analysis [Pedregosa et al., 2011]. pp.normalize_total; Normalize counts per cell. pp.regress_out; Regress out (mostly) unwanted sources of variation. pp.scale; Scale data to unit variance and zero mean. pp.subsample; Subsample to a fraction of the number of observations. pp.downsample_counts; Downsample counts from count matrix. Recipes#. pp.recipe_zheng17; Normalization and filtering as of Zheng et al. [2017]. pp.recipe_weinreb17; Normalization and filtering as of [Weinreb et al., 2017]. pp.recipe_seurat; Normalization and filtering as of Seurat [Satija et al., 2015]. Batch effect correction#; Also see [Data integration]. Note that a simple batch correction method is available via pp.regress_out(). Checkout scanpy.external for more. pp.combat; ComBat function for batch effect correction [Johnson et al., 2006, Leek et al., 2017, Pedersen, 2012]. Doublet detection#. pp.scrublet; Predict doublets using Scrublet [Wolock et al., 2019]. pp.scrublet_simulate_doublets; Simulate doublets by adding the counts of random observed transcriptome pairs. Neighbors#. pp.neighbors; Computes the nearest neighbors distance matrix and a neighborhood graph of observations [McInnes et al., 2018]. previous; API. next; scanpy.pp.calculate_qc_metrics. Contents; . Basic Preprocessing; Recipes; Batch effect correction; Doublet detection; Neighbors. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html:10815,integrat,integration,10815,en/stable/api/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html,1,['integrat'],['integration']
Deployability,"canpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Classes. Classes#; AnnData is reexported from anndata.; Represent data as a neighborhood structure, usually a knn graph. Neighbors; Data represented as graph of nearest neighbors. previous; scanpy.experimental.pp.recipe_pearson_residuals. next; scanpy.Neighbors. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/classes.html:9041,Release,Release,9041,en/stable/api/classes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/classes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"canpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.figdir. Contents . ScanpyConfig.figdir. scanpy._settings.ScanpyConfig.figdir#. property ScanpyConfig.figdir: Path[source]#; Directory for saving figures (default './figures/'). previous; scanpy._settings.ScanpyConfig.datasetdir. next; scanpy._settings.ScanpyConfig.file_format_data. Contents; . ScanpyConfig.figdir. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.figdir.html:9070,Release,Release,9070,en/stable/generated/scanpy._settings.ScanpyConfig.figdir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.figdir.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"canpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.swap_axes. Contents . StackedViolin.swap_axes(). scanpy.pl.StackedViolin.swap_axes#. StackedViolin.swap_axes(*, swap_axes=True)[source]#; Plots a transposed image.; By default, the x axis contains var_names (e.g. genes) and the y; axis the groupby categories. By setting swap_axes then x are; the groupby categories and y the var_names. Parameters:. swap_axes bool | None (default: True)Boolean to turn on (True) or off (False) ‘swap_axes’. Default True. Return type:; Self. Returns:; Returns self for method chaining. previous; scanpy.pl.StackedViolin.style. next; scanpy.pl.highest_expr_genes. Contents; . StackedViolin.swap_axes(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html:9067,Release,Release,9067,en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.swap_axes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"cipal component analysis [Pedregosa et al., 2011]. tl.tsne; t-SNE [Amir et al., 2013, Pedregosa et al., 2011, van der Maaten and Hinton, 2008]. tl.umap; Embed the neighborhood graph using UMAP [McInnes et al., 2018]. tl.draw_graph; Force-directed graph drawing [Chippada, 2018, Islam et al., 2011, Jacomy et al., 2014]. tl.diffmap; Diffusion Maps [Coifman et al., 2005, Haghverdi et al., 2015, Wolf et al., 2018]. Compute densities on embeddings. tl.embedding_density; Calculate the density of cells in an embedding (per condition). Clustering and trajectory inference#. tl.leiden; Cluster cells into subgroups [Traag et al., 2019]. tl.louvain; Cluster cells into subgroups [Blondel et al., 2008, Levine et al., 2015, Traag, 2015]. tl.dendrogram; Computes a hierarchical clustering for the given groupby categories. tl.dpt; Infer progression of cells through geodesic distance along the graph [Haghverdi et al., 2016, Wolf et al., 2019]. tl.paga; Mapping out the coarse-grained connectivity structures of complex manifolds [Wolf et al., 2019]. Data integration#. tl.ingest; Map labels and embeddings from reference data to new data. Marker genes#. tl.rank_genes_groups; Rank genes for characterizing groups. tl.filter_rank_genes_groups; Filters out genes based on log fold change and fraction of genes expressing the gene within and outside the groupby categories. tl.marker_gene_overlap; Calculate an overlap score between data-deriven marker genes and provided markers. Gene scores, Cell cycle#. tl.score_genes; Score a set of genes [Satija et al., 2015]. tl.score_genes_cell_cycle; Score cell cycle genes [Satija et al., 2015]. Simulations#. tl.sim; Simulate dynamic gene expression data [Wittmann et al., 2009] [Wolf et al., 2018]. previous; scanpy.pp.neighbors. next; scanpy.tl.tsne. Contents; . Embeddings. Clustering and trajectory inference; Data integration; Marker genes; Gene scores, Cell cycle; Simulations. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/tools.html:10694,integrat,integration,10694,en/stable/api/tools.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/tools.html,2,['integrat'],['integration']
Deployability,"clusters). Running `sc.tl.dendrogram` with default parameters. For fine tuning it is recommended to run `sc.tl.dendrogram` independently.; using 'X_pca' with n_pcs = 50; Storing dendrogram info using `.uns['dendrogram_clusters']`; WARNING: Groups are not reordered because the `groupby` categories and the `var_group_labels` are different.; categories: 0, 1, 2, etc.; var_group_labels: 3. We see that CR2 recapitulates the spatial structure. sc.pl.spatial(adata, img_key=""hires"", color=[""clusters"", ""CR2""]). sc.pl.spatial(adata, img_key=""hires"", color=[""COL1A2"", ""SYPL1""], alpha=0.7). MERFISH example#; In case you have spatial data generated with FISH-based techniques, just read the cordinate table and assign it to the adata.obsm element.; Let’s take a look at the example from Xia et al. 2019.; First, we need to download the coordinate and counts data from the original publication: coordinates to ./data/pnas.1912459116.sd15.csv and counts to ./data/pnas.1912459116.sd12.csv. # If needed:; # %pip install openpyxl. coordinates = pd.read_excel(""./data/pnas.1912459116.sd15.xlsx"", index_col=0); counts = sc.read_csv(""./data/pnas.1912459116.sd12.csv"").transpose(). adata_merfish = counts[coordinates.index, :].copy(); adata_merfish.obsm[""spatial""] = coordinates.to_numpy(). We will perform standard preprocessing and dimensionality reduction. sc.pp.normalize_per_cell(adata_merfish, counts_per_cell_after=1e6); sc.pp.log1p(adata_merfish); sc.pp.pca(adata_merfish, n_comps=15); sc.pp.neighbors(adata_merfish); sc.tl.umap(adata_merfish); sc.tl.leiden(; adata_merfish,; key_added=""clusters"",; resolution=0.5,; n_iterations=2,; flavor=""igraph"",; directed=False,; ). normalizing by total count per cell; finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finished (0:00:08); computing neighbors; using 'X_pca' with n_pcs = 15; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pai",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:20076,install,install,20076,en/stable/tutorials/spatial/basic-analysis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html,1,['install'],['install']
Deployability,"d15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.recipe_weinreb17. Contents . recipe_weinreb17(). scanpy.pp.recipe_weinreb17#. scanpy.pp.recipe_weinreb17(adata, *, log=True, mean_threshold=0.01, cv_threshold=2, n_pcs=50, svd_solver='randomized', random_state=0, copy=False)[source]#; Normalization and filtering as of [Weinreb et al., 2017].; Expects non-logarithmized data.; If using logarithmized data, pass log=False. Parameters:. adata AnnDataAnnotated data matrix. log bool (default: True)Logarithmize data?. copy bool (default: False)Return a copy if true. Return type:; AnnData | None. previous; scanpy.pp.recipe_zheng17. next; scanpy.pp.recipe_seurat. Contents; . recipe_weinreb17(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_weinreb17.html:9060,Release,Release,9060,en/stable/api/generated/scanpy.pp.recipe_weinreb17.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_weinreb17.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.logfile. Contents . ScanpyConfig.logfile. scanpy._settings.ScanpyConfig.logfile#. property ScanpyConfig.logfile: TextIO[source]#; The open file to write logs to.; Set it to a Path or str to open a new one.; The default None corresponds to sys.stdout in jupyter notebooks; and to sys.stderr otherwise.; For backwards compatibility, setting it to '' behaves like setting it to None. previous; scanpy._settings.ScanpyConfig.file_format_figs. next; scanpy._settings.ScanpyConfig.logpath. Contents; . ScanpyConfig.logfile. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.logfile.html:9071,Release,Release,9071,en/stable/generated/scanpy._settings.ScanpyConfig.logfile.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.logfile.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"di, Aaron T L Lun, Michael D Morgan, and John C Marioni. Batch effects in single-cell rna-sequencing data are corrected by matching mutual nearest neighbors. Nature Biotechnology, 36(5):421–427, apr 2018. URL: https://doi.org/10.1038/nbt.4091, doi:10.1038/nbt.4091. [HBB19]; Brian Hie, Bryan Bryson, and Bonnie Berger. Efficient integration of heterogeneous single-cell transcriptomes using scanorama. Nature Biotechnology, 37(6):685–691, may 2019. URL: https://doi.org/10.1038/s41587-019-0113-3, doi:10.1038/s41587-019-0113-3. [IKM+11]; Saiful Islam, Una Kjällquist, Annalena Moliner, Pawel Zajac, Jian-Bing Fan, Peter Lönnerberg, and Sten Linnarsson. Characterization of the single-cell transcriptional landscape by highly multiplex rna-seq. Genome Research, 21(7):1160–1167, may 2011. URL: https://doi.org/10.1101/gr.110882.110, doi:10.1101/gr.110882.110. [JVHB14]; Mathieu Jacomy, Tommaso Venturini, Sebastien Heymann, and Mathieu Bastian. Forceatlas2, a continuous graph layout algorithm for handy network visualization designed for the gephi software. PLoS ONE, 9(6):e98679, jun 2014. URL: https://doi.org/10.1371/journal.pone.0098679, doi:10.1371/journal.pone.0098679. [JLR06]; W. Evan Johnson, Cheng Li, and Ariel Rabinovic. Adjusting batch effects in microarray expression data using empirical bayes methods. Biostatistics, 8(1):118–127, apr 2006. URL: https://doi.org/10.1093/biostatistics/kxj037, doi:10.1093/biostatistics/kxj037. [Kan18]; Chris Kang. Mnnpy - mnn-correct in python. chriscainx/mnnpy, 2018. URL: chriscainx/mnnpy. [KMF+19]; Ilya Korsunsky, Nghia Millard, Jean Fan, Kamil Slowikowski, Fan Zhang, Kevin Wei, Yuriy Baglaenko, Michael Brenner, Po-ru Loh, and Soumya Raychaudhuri. Fast, sensitive and accurate integration of single-cell data with harmony. Nature Methods, 16(12):1289–1296, nov 2019. URL: https://doi.org/10.1038/s41592-019-0619-0, doi:10.1038/s41592-019-0619-0. [KMST11]; Jan Krumsiek, Carsten Marr, Timm Schroeder, and Fabian J. Theis. Hierarchical differentia",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:14920,continuous,continuous,14920,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['continuous'],['continuous']
Deployability,"dir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.autosave. Contents . ScanpyConfig.autosave. scanpy._settings.ScanpyConfig.autosave#. property ScanpyConfig.autosave: bool[source]#; Automatically save figures in figdir (default False).; Do not show plots/figures interactively. previous; scanpy._settings.ScanpyConfig. next; scanpy._settings.ScanpyConfig.autoshow. Contents; . ScanpyConfig.autosave. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.autosave.html:9072,Release,Release,9072,en/stable/generated/scanpy._settings.ScanpyConfig.autosave.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.autosave.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"e branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Clear out old distributions; $ rm -r dist; $ # Build source distribution and wheel both; $ python -m build; $ # Now check those build artifacts; $ twine check dist/*; $ # List the wheel archive’s contents; $ bsdtar -tf dist/*.whl. You can also upload the package to <test.pypi.org> (tutorial); $ twine upload --repository testpypi dist/*. The above approximates what the publish workflow does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). previous; Versioning. next; Contributors. Contents; . Preparing the release; A",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:11246,release,release,11246,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"e iteratively starting from one reference dataset, one can use ingest. Mapping onto a reference batch using ingest#; Choose one reference batch for training the model and setting up the neighborhood graph (here, a PCA) and separate out all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as ‘celltype’) and embeddings (such as ‘X_pca’ and ‘X_umap’) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuou",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17326,integrat,integrating,17326,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integrating']
Deployability,"e. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. External API. External API#. Warning; We are no longer accepting new tools into scanpy.external.; Instead, please submit your tool to the scverse ecosystem package listing. Note; For tools that integrate well with scanpy and anndata, see:. The scverse ecosystem; Scanpy’s ecosystem ecosystem page. Import Scanpy’s wrappers to external tools as:; import scanpy.external as sce. Preprocessing: PP; Data integration; Sample demultiplexing; Imputation. Tools: TL; Embeddings; Clustering and trajectory inference; Gene scores, Cell cycle. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. previous; scanpy.pp.normalize_per_cell. next; Preprocessing: PP. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/index.html:9414,integrat,integrate,9414,en/stable/external/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/index.html,2,['integrat'],"['integrate', 'integration']"
Deployability,"e; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.recipe_zheng17. Contents . recipe_zheng17(). scanpy.pp.recipe_zheng17#. scanpy.pp.recipe_zheng17(adata, *, n_top_genes=1000, log=True, plot=False, copy=False)[source]#; Normalization and filtering as of Zheng et al. [2017].; Reproduces the preprocessing of Zheng et al. [2017] – the Cell Ranger R Kit of 10x; Genomics.; Expects non-logarithmized data.; If using logarithmized data, pass log=False.; The recipe runs the following steps; sc.pp.filter_genes(adata, min_counts=1) # only consider genes with more than 1 count; sc.pp.normalize_per_cell( # normalize with total UMI count per cell; adata, key_n_counts='n_counts_all'; ); filter_result = sc.pp.filter_genes_dispersion( # select highly-variable genes; adata.X, flavor='cell_ranger', n_top_genes=n_top_genes, log=False; ); adata = adata[:, filter_result.gene_subset] # subset the genes; sc.pp.normalize_per_cell(adata) # renormalize after filtering; if log: sc.pp.log1p(adata) # log transform: adata.X = log(adata.X + 1); sc.pp.scale(adata) # scale to unit variance and shift to zero mean. Parameters:. adata AnnDataAnnotated data matrix. n_top_genes int (default: 1000)Number of genes to keep. log bool (default: True)Take logarithm. plot bool (default: False)Show a plot of the gene dispersion vs. mean relation. copy bool (default: False)Return a copy of adata instead of updating it. Return type:; AnnData | None. Returns:; Returns or updates adata depending on copy. previous; scanpy.pp.downsample_counts. next; scanpy.pp.recipe_weinreb17. Contents; . recipe_zheng17(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_zheng17.html:10638,update,updates,10638,en/stable/api/generated/scanpy.pp.recipe_zheng17.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_zheng17.html,1,['update'],['updates']
Deployability,"e; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.harmony_integrate. Contents . harmony_integrate(). scanpy.external.pp.harmony_integrate#. scanpy.external.pp.harmony_integrate(adata, key, *, basis='X_pca', adjusted_basis='X_pca_harmony', **kwargs)[source]#; Use harmonypy [Korsunsky et al., 2019] to integrate different experiments.; Harmony [Korsunsky et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments. This function uses the python; port of Harmony, harmonypy, to integrate single-cell data; stored in an AnnData object. As Harmony works by adjusting the; principal components, this function should be run after performing; PCA but before computing the neighbor graph, as illustrated in the; example below. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_pca_harmony')The name of the field in adata.obsm where the adjusted PCA; table will be stored after running this function. Defaults to; X_pca_harmony. kwargsAny additional arguments will be passed to; harmonypy.run_harmony(). Retu",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html:9515,integrat,integrate,9515,en/stable/generated/scanpy.external.pp.harmony_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html,1,['integrat'],['integrate']
Deployability,"e_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using dask with Scanpy. Using dask with Scanpy#. Warning; 🔪 Beware sharp edges! 🔪; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may exhibit unexpected behaviour if dask arrays are passed to them. Stick to what’s outlined in this tutorial and you should be fine!; Please report any issues you run into over on the issue tracker. dask is a popular out-of-core, distributed array processing library that scanpy is beginning to support. Here we walk through a quick tutorial of using dask in a simple analysis task.; This notebook relies on optional dependencies in dask and sklearn_ann and annoy. Install them with:; pip install -U ""dask[array,distributed,diagnostics]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.logging.print_header(). scanpy==1.10.0rc2.dev103+gc6766d75 anndata==0.11.0.dev157+ge0b81f1.d20240812 umap==0.5.6 numpy==2.0.1 scipy==1.14.0 pandas==2.2.2 scikit-learn==1.5.1 statsmodels==0.14.2 igraph==0.11.6 pynndescent==0.5.13. Here, we’ll be working with a moderately large dataset of 1.4 million cells taken from: COVID-19 immune features revealed by a large-scale single-cell transcriptome atlas. if not Path(""cell_atlas.h5ad"").exists():; !wget https://datasets.cellxgene.cziscience.com/82eac9c1-485f-4e21-ab21-8510823d4f6e.h5ad -O ""cell_atlas.h5ad"". For more information on using distributed computing via dask, please see their documentation. In short, one needs to define both a cluster and a client to have some degree of control over the compute resources dask will use. It’s very likely you will have to tu",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:9887,Install,Install,9887,en/stable/tutorials/experimental/dask.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html,2,"['Install', 'install']","['Install', 'install']"
Deployability,"eature selection; Annotation/ Enrichment Analysis. Ecosystem#. Warning; We are no longer accepting new tools on this page.; Instead, please submit your tool to the scverse ecosystem package listing. Viewers#; Interactive manifold viewers. cellxgene via direct reading of .h5ad CZI; cirrocumulus via direct reading of .h5ad Broad Inst.; cell browser via exporing through cellbrowser() UCSC; SPRING via exporting through spring_project() Harvard Med; vitessce for purely browser based viewing of zarr formatted AnnData files Harvard Med. Portals#. the Gene Expression Analysis Resource U Maryland; the Galaxy Project for the Human Cell Atlas [tweet] U Freiburg; the Expression Atlas EMBL-EBI. Modalities#. RNA velocity#. scVelo Helmholtz Munich. Spatial Transcriptomics Tools#. squidpy Helmholtz Munich. Squidpy is a comprehensive toolkit for working with spatial single cell omics data. PASTE Princeton. PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. bento 🍱 UC San Diego. Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. Multimodal integration#. MUON and MuData EMBL/ DKFZ. MUON, and it’s associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. Adaptive immune receptor repertoire (AIRR)#. scirpy Medical University of Innsbruck. scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. dandelion University of Cambridge. dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. Long reads#. Swan UC Irvine. Swan is a Python library designed for the analysis and visualization of transcriptomes, especial",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:10454,integrat,integrate,10454,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,1,['integrat'],['integrate']
Deployability,"ed.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Clear out old distributions; $ rm -r dist; $ # Build source distribution and wheel both; $ python -m build; $ # Now check those build artifacts; $ twine check dist/*; $ # List the wheel archive’s contents; $ bsdtar -tf dist/*.whl. You can also upload t",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10844,release,release,10844,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"ee Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Clear out old distributions; $ rm -r dist; $ # Build source distribution and wheel both; $ python -m build; $ # Now check those build artifacts; $ twine check dist/*; $ # List the wheel archive’s contents; $ bsdtar -tf dist/*.whl. You can also upload the package to <test.pypi.org> (tutorial); $ twine upload",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10880,release,release,10880,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"efault: 10)Number of diffusion components. knn int (default: 30)Number of nearest neighbors for graph construction. alpha float (default: 0)Normalization parameter for the diffusion operator. use_adjacency_matrix bool (default: False)Use adaptive anisotropic adjacency matrix, instead of PCA projections; (default) to compute diffusion components. distances_key str | None (default: None)With use_adjacency_matrix=True, use the indicated distances key for .obsp.; If None, 'distances'. n_eigs int | None (default: None)Number of eigen vectors to use. If None specified, the number of eigen; vectors will be determined using eigen gap. Passed to; palantir.utils.determine_multiscale_space. impute_data bool (default: True)Impute data using MAGIC. n_steps int (default: 3)Number of steps in the diffusion operator. Passed to; palantir.utils.run_magic_imputation. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields:. Diffusion maps,used for magic imputation, and to generate multi-scale data matrix,. X_palantir_diff_comp - ndarray (obsm, dtype float)Array of Diffusion components. palantir_EigenValues - ndarray (uns, dtype float)Array of corresponding eigen values. palantir_diff_op - spmatrix (obsp, dtype float)The diffusion operator matrix. Multi scale space results,used to build tsne on diffusion components, and to compute branch probabilities; and waypoints,. X_palantir_multiscale - ndarray (obsm, dtype float)Multi scale data matrix. MAGIC imputation,used for plotting gene expression on tsne, and gene expression trends,. palantir_imp - ndarray (layers, dtype float)Imputed data matrix (MAGIC imputation). Example; >>> import scanpy.external as sce; >>> import scanpy as sc. A sample data is available here.; Load sample data; >>> adata = sc.read_csv(filename=""Palantir/data/marrow_sample_scseq_counts.csv.gz""). Cleanup and normalize; >>> sc.pp.filter_cells(adata",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:11221,update,updates,11221,en/stable/external/generated/scanpy.external.tl.palantir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html,1,['update'],['updates']
Deployability,"ellxgene via direct reading of .h5ad CZI; cirrocumulus via direct reading of .h5ad Broad Inst.; cell browser via exporing through cellbrowser() UCSC; SPRING via exporting through spring_project() Harvard Med; vitessce for purely browser based viewing of zarr formatted AnnData files Harvard Med. Portals#. the Gene Expression Analysis Resource U Maryland; the Galaxy Project for the Human Cell Atlas [tweet] U Freiburg; the Expression Atlas EMBL-EBI. Modalities#. RNA velocity#. scVelo Helmholtz Munich. Spatial Transcriptomics Tools#. squidpy Helmholtz Munich. Squidpy is a comprehensive toolkit for working with spatial single cell omics data. PASTE Princeton. PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. bento 🍱 UC San Diego. Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. Multimodal integration#. MUON and MuData EMBL/ DKFZ. MUON, and it’s associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. Adaptive immune receptor repertoire (AIRR)#. scirpy Medical University of Innsbruck. scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. dandelion University of Cambridge. dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. Long reads#. Swan UC Irvine. Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. Analysis methods#. scvi-tools#. scvi-tools Berkeley. scvi-tools hosts dee",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:10746,integrat,integration,10746,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,1,['integrat'],['integration']
Deployability,"ents can now group by values in the index by passing the index’s name (like pd.DataFrame.groupby). pr1583 F Ramirez; Added na_color and na_in_legend keyword arguments to embedding() plots. Allows specifying color for missing or filtered values in plots like umap() or spatial() pr1356 I Virshup; embedding() plots now support passing dict of {cluster_name: cluster_color, ...} for palette argument pr1392 I Virshup. External tools (new)#. Add Scanorama integration to scanpy external API (scanorama_integrate(), Hie et al. [2019]) pr1332 B Hie; Scrublet [Wolock et al., 2019] integration: scrublet(), scrublet_simulate_doublets(), and plotting method scrublet_score_distribution() pr1476 J Manning; hashsolo() for HTO demultiplexing [Bernstein et al., 2020] pr1432 NJ Bernstein; Added scirpy (sc-AIRR analysis) to ecosystem page pr1453 G Sturm; Added scvi-tools to ecosystem page pr1421 A Gayoso. External tools (changes)#. Updates for palantir() and palantir_results() pr1245 A Mousa; Fixes to harmony_timeseries() docs pr1248 A Mousa; Support for leiden clustering by scanpy.external.tl.phenograph() pr1080 A Mousa; Deprecate scanpy.external.pp.scvi pr1554 G Xing; Updated default params of sam() to work with larger data pr1540 A Tarashansky. Documentation#. New contribution guide pr1544 I Virshup; zsh installation instructions pr1444 P Angerer. Performance#. Speed up read_10x_h5() pr1402 P Weiler; Speed ups for obs_df() pr1499 F Ramirez. Bugfixes#. Consistent fold-change, fractions calculation for filter_rank_genes_groups pr1391 S Rybakov; Fixed bug where score_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integer dense arrays pr1400 I Virshup; Fix docstring formatting for rank_genes_groups() pr1417 P Weiler; Removed PendingDeprecationWarning`s from use of `np.matrix pr1424 P Weiler; Fixed indexing byg in ~scanpy.pp.highly_variable_genes pr1456 V Bergen; Fix default number of genes for marker_genes_overlap pr1464 MD Luecken; Fixed passing groupby",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:32008,Update,Updates,32008,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['Update'],['Updates']
Deployability,"er, if we want to obtain the colorbar axes object we need to use return_fig=True rather than show=False. When accessing Axes from Figure the returned object is a list and we need to select the relevant Axes to modify them. When returning Axes directly (e.g. with show=False) we obtain either an individual Axes object (if this is the only Axes object on the Figure) or a list of Axes (if multiple Axes were created). # Examples of returned objects from the UMAP function. print(""Categorical plots:""); axes = sc.pl.umap(adata, color=[""bulk_labels""], show=False); print(""Axis from a single category plot:"", axes); plt.close(); axes = sc.pl.umap(adata, color=[""bulk_labels"", ""S_score""], show=False); print(""Axes list from two categorical plots:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); print(""Axes list from a figure with one categorical plot:"", fig.axes); plt.close(). print(""\nContinous plots:""); axes = sc.pl.umap(adata, color=[""IGJ""], show=False); print(""Axes from one continuous plot:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""IGJ""], return_fig=True); print(""Axes list from a figure of one continous plot:"", fig.axes); plt.close(). Categorical plots:; Axis from a single category plot: Axes(0.125,0.11;0.775x0.77); Axes list from two categorical plots: [<Axes: title={'center': 'bulk_labels'}, xlabel='UMAP1', ylabel='UMAP2'>, <Axes: title={'center': 'S_score'}, xlabel='UMAP1', ylabel='UMAP2'>]; Axes list from a figure with one categorical plot: [<Axes: title={'center': 'bulk_labels'}, xlabel='UMAP1', ylabel='UMAP2'>]. Continous plots:; Axes from one continuous plot: Axes(0.125,0.11;0.70525x0.77); Axes list from a figure of one continous plot: [<Axes: title={'center': 'IGJ'}, xlabel='UMAP1', ylabel='UMAP2'>, <Axes: label='<colorbar>'>]. Certain plots (e.g. dotplot) are more complex, having a special plot object with multiple Axes that are used to plot different parts of the plot. axes = sc.pl.dotplot(adata, [""CD79A"", ""MS4A1""], ""b",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:12751,continuous,continuous,12751,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,1,['continuous'],['continuous']
Deployability,"erbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE. Contents . StackedViolin.DEFAULT_JITTER_SIZE. scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE#. StackedViolin.DEFAULT_JITTER_SIZE = 1[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_JITTER. next; scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH. Contents; . StackedViolin.DEFAULT_JITTER_SIZE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html:9077,Release,Release,9077,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ernal.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.harmony_integrate. Contents . harmony_integrate(). scanpy.external.pp.harmony_integrate#. scanpy.external.pp.harmony_integrate(adata, key, *, basis='X_pca', adjusted_basis='X_pca_harmony', **kwargs)[source]#; Use harmonypy [Korsunsky et al., 2019] to integrate different experiments.; Harmony [Korsunsky et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments. This function uses the python; port of Harmony, harmonypy, to integrate single-cell data; stored in an AnnData object. As Harmony works by adjusting the; principal components, this function should be run after performing; PCA but before computing the neighbor graph, as illustrated in the; example below. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_pca_harmony')The name of the field in adata.obsm where the adjusted PCA; table will be stored after running this function. Defaults to; X_pca_harmony. kwargsAny additional arguments will be passed to; harmonypy.run_harmony(). Returns:; Updates adata with the field adata.obsm[obsm_out_field],; containing principal components adjusted by Harmony such that; different experiments are integrated. Example; First, load librar",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html:9721,integrat,integrate,9721,en/stable/generated/scanpy.external.pp.harmony_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html,1,['integrat'],['integrate']
Deployability,"ernal.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.sim. Contents . sim(). scanpy.tl.sim#. scanpy.tl.sim(model, *, params_file=True, tmax=None, branching=None, nrRealizations=None, noiseObs=None, noiseDyn=None, step=None, seed=None, writedir=None)[source]#; Simulate dynamic gene expression data [Wittmann et al., 2009] [Wolf et al., 2018].; Sample from a stochastic differential equation model built from; literature-curated boolean gene regulatory networks, as suggested by; Wittmann et al. [2009]. The Scanpy implementation is due to Wolf et al. [2018]. Parameters:. model Literal['krumsiek11', 'toggleswitch']Model file in ‘sim_models’ directory. params_file bool (default: True)Read default params from file. tmax int | None (default: None)Number of time steps per realization of time series. branching bool | None (default: None)Only write realizations that contain new branches. nrRealizations int | None (default: None)Number of realizations. noiseObs float | None (default: None)Observatory/Measurement noise. noiseDyn float | None (default: None)Dynamic noise. step int | None (default: None)Interval for saving state of system. seed int | None (default: None)Seed for generation of random numbers. writedir Path | str | None (default: None)Path to directory for writing output files. Return type:; AnnData. Returns:; Annotated data matrix. Examples; See this use case. previous; scanpy.tl.score_genes_cell_cycle. next; Plotting: pl. Contents; . sim(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.sim.html:9779,toggle,toggleswitch,9779,en/stable/generated/scanpy.tl.sim.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.sim.html,1,['toggle'],['toggleswitch']
Deployability,"ernal.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. API. API#; Import Scanpy as:; import scanpy as sc. Note; Additional functionality is available in the broader ecosystem, with some tools being wrapped in the scanpy.external module. Preprocessing: pp; Basic Preprocessing; Recipes; Batch effect correction; Doublet detection; Neighbors. Tools: tl; Embeddings; Clustering and trajectory inference; Data integration; Marker genes; Gene scores, Cell cycle; Simulations. Plotting: pl; Generic; Classes; Preprocessing; Tools. Reading; scanpy.read; scanpy.read_10x_h5; scanpy.read_10x_mtx; scanpy.read_visium; scanpy.read_h5ad; scanpy.read_csv; scanpy.read_excel; scanpy.read_hdf; scanpy.read_loom; scanpy.read_mtx; scanpy.read_text; scanpy.read_umi_tools. Get object from AnnData: get; scanpy.get.obs_df; scanpy.get.var_df; scanpy.get.rank_genes_groups_df; scanpy.get.aggregate. Queries; scanpy.queries.biomart_annotations; scanpy.queries.gene_coordinates; scanpy.queries.mitochondrial_genes; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors. Settings; scanpy.set_figure_params; scanpy._settings.S",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/index.html:9562,integrat,integration,9562,en/stable/api/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/index.html,1,['integrat'],['integration']
Deployability,"esign#. violin now reads .uns['colors_...'] pr1029 michalk8. Bug fixes#. adapt ingest() for UMAP 0.4 pr1038 pr1106 S Rybakov; compat with matplotlib 3.1 and 3.2 pr1090 I Virshup, P Angerer; fix PAGA for new igraph pr1037 P Angerer; fix rapids compat of louvain pr1079 LouisFaure. 1.4.5 2019-12-30#; Please install scanpy==1.4.5.post3 instead of scanpy==1.4.5. New functionality#. ingest() maps labels and embeddings of reference data to new data Integrating data using ingest and BBKNN pr651 S Rybakov, A Wolf; queries recieved many updates including enrichment through gprofiler and more advanced biomart queries pr467 I Virshup; set_figure_params() allows setting figsize and accepts facecolor='white', useful for working in dark mode A Wolf. Code design#. downsample_counts now always preserves the dtype of it’s input, instead of converting floats to ints pr865 I Virshup; allow specifying a base for log1p() pr931 G Eraslan; run neighbors on a GPU using rapids pr830 T White; param docs from typed params P Angerer; embedding_density() now only takes one positional argument; similar for embedding_density(), which gains a param groupby pr965 A Wolf; webpage overhaul, ecosystem page, release notes, tutorials overhaul pr960 pr966 A Wolf. Warning. changed default solver in pca() from auto to arpack; changed default use_raw in score_genes() from False to None. 1.4.4 2019-07-20#. New functionality#. scanpy.get adds helper functions for extracting data in convenient formats pr619 I Virshup. Bug fixes#. Stopped deprecations warnings from AnnData 0.6.22 I Virshup. Code design#. normalize_total() gains param exclude_highly_expressed, and fraction is renamed to max_fraction with better docs A Wolf. 1.4.3 2019-05-14#. Bug fixes#. neighbors() correctly infers n_neighbors again from params, which was temporarily broken in v1.4.2 I Virshup. Code design#. calculate_qc_metrics() is single threaded by default for datasets under 300,000 cells – allowing cached compilation pr615 I Virshup. 1.4.2 2",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:41400,release,release,41400,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['release'],['release']
Deployability,"esults when the batch_key argument was used pr1180 G Eraslan; ingest() where an inconsistent number of neighbors was used pr1111 S Rybakov. Version 1.4#. 1.4.6 2020-03-17#. Functionality in external#. sam() self-assembling manifolds [Tarashansky et al., 2019] pr903 A Tarashansky; harmony_timeseries() for trajectory inference on discrete time points pr994 A Mousa; wishbone() for trajectory inference (bifurcations) pr1063 A Mousa. Code design#. violin now reads .uns['colors_...'] pr1029 michalk8. Bug fixes#. adapt ingest() for UMAP 0.4 pr1038 pr1106 S Rybakov; compat with matplotlib 3.1 and 3.2 pr1090 I Virshup, P Angerer; fix PAGA for new igraph pr1037 P Angerer; fix rapids compat of louvain pr1079 LouisFaure. 1.4.5 2019-12-30#; Please install scanpy==1.4.5.post3 instead of scanpy==1.4.5. New functionality#. ingest() maps labels and embeddings of reference data to new data Integrating data using ingest and BBKNN pr651 S Rybakov, A Wolf; queries recieved many updates including enrichment through gprofiler and more advanced biomart queries pr467 I Virshup; set_figure_params() allows setting figsize and accepts facecolor='white', useful for working in dark mode A Wolf. Code design#. downsample_counts now always preserves the dtype of it’s input, instead of converting floats to ints pr865 I Virshup; allow specifying a base for log1p() pr931 G Eraslan; run neighbors on a GPU using rapids pr830 T White; param docs from typed params P Angerer; embedding_density() now only takes one positional argument; similar for embedding_density(), which gains a param groupby pr965 A Wolf; webpage overhaul, ecosystem page, release notes, tutorials overhaul pr960 pr966 A Wolf. Warning. changed default solver in pca() from auto to arpack; changed default use_raw in score_genes() from False to None. 1.4.4 2019-07-20#. New functionality#. scanpy.get adds helper functions for extracting data in convenient formats pr619 I Virshup. Bug fixes#. Stopped deprecations warnings from AnnData 0.6.22 I ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:40656,Integrat,Integrating,40656,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,"['Integrat', 'update']","['Integrating', 'updates']"
Deployability,"et al., 2019]. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. Cells from the same batch must be; contiguously stored in adata. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_scanorama')The name of the field in adata.obsm where the integrated; embeddings will be stored after running this function. Defaults; to X_scanorama. knn int (default: 20)Number of nearest neighbors to use for matching. sigma float (default: 15)Correction smoothing parameter on Gaussian kernel. approx bool (default: True)Use approximate nearest neighbors with Python annoy;; greatly speeds up matching runtime. alpha float (default: 0.1)Alignment score minimum cutoff. batch_size int (default: 5000)The batch size used in the alignment vector computation. Useful; when integrating very large (>100k samples) datasets. Set to; large value that runs within available memory. kwargsAny additional arguments will be passed to; scanorama.assemble(). Return type:; None. Returns:; Updates adata with the field adata.obsm[adjusted_basis],; containing Scanorama embeddings such that different experiments; are integrated. Example; First, load libraries and example dataset, and preprocess.; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.recipe_zheng17(adata); >>> sc.pp.pca(adata). We now arbitrarily assign a batch metadata variable to each cell; for the sake of example, but during real usage there would already; be a column in adata.obs giving the experiment each cell came; from.; >>> adata.obs['batch'] = 1350*['a'] + 1350*['b']. Finally, run Scanorama. Afterwards, there will be a new table in; adata.obsm containing the Scanorama embeddings.; >>> sce.pp.scanorama_integrate(adata, 'batch', verbose=1); Processing datasets a <=> ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:10904,integrat,integrating,10904,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,1,['integrat'],['integrating']
Deployability,"ets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.ranking. Contents . ranking(). scanpy.pl.ranking#. scanpy.pl.ranking(adata, attr, keys, *, dictionary=None, indices=None, labels=None, color='black', n_points=30, log=False, include_lowest=False, show=None)[source]#; Plot rankings.; See, for example, how this is used in pl.pca_loadings. Parameters:. adata AnnDataThe data. attr Literal['var', 'obs', 'uns', 'varm', 'obsm']The attribute of AnnData that contains the score. keys str | Sequence[str]The scores to look up an array from the attribute of adata. Return type:; GridSpec | None. Returns:; Returns matplotlib gridspec with access to the axes. previous; scanpy.pl.clustermap. next; scanpy.pl.dendrogram. Contents; . ranking(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.ranking.html:9051,Release,Release,9051,en/stable/generated/scanpy.pl.ranking.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.ranking.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ettings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.autoshow. Contents . ScanpyConfig.autoshow. scanpy._settings.ScanpyConfig.autoshow#. property ScanpyConfig.autoshow: bool[source]#; Automatically show figures if autosave == False (default True).; There is no need to call the matplotlib pl.show() in this case. previous; scanpy._settings.ScanpyConfig.autosave. next; scanpy._settings.ScanpyConfig.cache_compression. Contents; . ScanpyConfig.autoshow. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.autoshow.html:9072,Release,Release,9072,en/stable/generated/scanpy._settings.ScanpyConfig.autoshow.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.autoshow.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ettings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.logging.print_header. Contents . print_header(). scanpy.logging.print_header#. scanpy.logging.print_header(*, file=None)[source]#; Versions that might influence the numerical results.; Matplotlib and Seaborn are excluded from this. Parameters:. file default: NoneOptional path for dependency output. previous; scanpy._settings.ScanpyConfig.set_figure_params. next; scanpy.logging.print_versions. Contents; . print_header(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.logging.print_header.html:9061,Release,Release,9061,en/stable/generated/scanpy.logging.print_header.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.logging.print_header.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.transitions. Contents . Neighbors.transitions. scanpy.Neighbors.transitions#. property Neighbors.transitions: ndarray | csr_matrix[source]#; Transition matrix (sparse matrix).; Is conjugate to the symmetrized transition matrix via:; self.transitions = self.Z * self.transitions_sym / self.Z. where self.Z is the diagonal matrix storing the normalization of the; underlying kernel matrix.; Notes; This has not been tested, in contrast to transitions_sym. previous; scanpy.Neighbors.rp_forest. next; scanpy.Neighbors.transitions_sym. Contents; . Neighbors.transitions. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.transitions.html:9062,Release,Release,9062,en/stable/generated/scanpy.Neighbors.transitions.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.transitions.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.scanorama_integrate. Contents . scanorama_integrate(). scanpy.external.pp.scanorama_integrate#. scanpy.external.pp.scanorama_integrate(adata, key, *, basis='X_pca', adjusted_basis='X_scanorama', knn=20, sigma=15, approx=True, alpha=0.1, batch_size=5000, **kwargs)[source]#; Use Scanorama [Hie et al., 2019] to integrate different experiments.; Scanorama [Hie et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments stored in an AnnData object. This; function should be run after performing PCA but before computing; the neighbor graph, as illustrated in the example below.; This uses the implementation of scanorama [Hie et al., 2019]. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. Cells from the same batch must be; contiguously stored in adata. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_scanorama')The name of the field in adata.obsm where the integrated; embeddings will be stored after running this function. Defaults; to X_scanorama. knn int (default: 20)Number of nearest neighbors to use for matching. sigma float (default: 15)Correction smoothing parameter on Gaussian kernel. approx bool (default: True)Use approximate nearest neighbo",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:9659,integrat,integrating,9659,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,1,['integrat'],['integrating']
Deployability,"external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_10x_mtx. Contents . read_10x_mtx(). scanpy.read_10x_mtx#. scanpy.read_10x_mtx(path, *, var_names='gene_symbols', make_unique=True, cache=False, cache_compression=_empty, gex_only=True, prefix=None)[source]#; Read 10x-Genomics-formatted mtx directory. Parameters:. path Path | strPath to directory for .mtx and .tsv files,; e.g. ‘./filtered_gene_bc_matrices/hg19/’. var_names Literal['gene_symbols', 'gene_ids'] (default: 'gene_symbols')The variables index. make_unique bool (default: True)Whether to make the variables index unique by appending ‘-1’,; ‘-2’ etc. or not. cache bool (default: False)If False, read from source, if True, read from fast ‘h5ad’ cache. cache_compression Union[Literal['gzip', 'lzf'], None, Empty] (default: _empty)See the h5py Filter pipeline.; (Default: settings.cache_compression). gex_only bool (default: True)Only keep ‘Gene Expression’ data and ignore other feature types,; e.g. ‘Antibody Capture’, ‘CRISPR Guide Capture’, or ‘Custom’. prefix str | None (default: None)Any prefix before matrix.mtx, genes.tsv and barcodes.tsv. For instance,; if the files are named patientA_matrix.mtx, patientA_genes.tsv and; patientA_barcodes.tsv the prefix is patientA_.; (Default: no prefix). Return type:; AnnData. Returns:; An AnnData object. previous; scanpy.read_10x_h5. next; scanpy.read_visium. Contents; . read_10x_mtx(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_mtx.html:10001,pipeline,pipeline,10001,en/stable/generated/scanpy.read_10x_mtx.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_mtx.html,1,['pipeline'],['pipeline']
Deployability,"ference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as ‘celltype’) and embeddings (such as ‘X_pca’ and ‘X_umap’) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isin([""1"", ""2"", ""3""])]. The following plot is a bit hard to rea",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17611,integrat,integrating,17611,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integrating']
Deployability,"ffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_COLORMAP. Contents . DotPlot.DEFAULT_COLORMAP. scanpy.pl.DotPlot.DEFAULT_COLORMAP#. DotPlot.DEFAULT_COLORMAP = 'winter'[source]#. previous; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH. next; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE. Contents; . DotPlot.DEFAULT_COLORMAP. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLORMAP.html:9068,Release,Release,9068,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLORMAP.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLORMAP.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT. Contents . DotPlot.DEFAULT_LARGEST_DOT. scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT#. DotPlot.DEFAULT_LARGEST_DOT = 200.0[source]#. previous; scanpy.pl.DotPlot.DEFAULT_DOT_MIN. next; scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH. Contents; . DotPlot.DEFAULT_LARGEST_DOT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT.html:9071,Release,Release,9071,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"fig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Trajectories. Trajectories#. Trajectory inference for hematopoiesis in mouse. previous; Customizing Scanpy plots. next; Trajectory inference for hematopoiesis in mouse. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html:9046,Release,Release,9046,en/stable/tutorials/trajectories/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/index.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"fig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.logging.print_versions. Contents . print_versions(). scanpy.logging.print_versions#. scanpy.logging.print_versions(*, file=None)[source]#; Print versions of imported packages, OS, and jupyter environment.; For more options (including rich output) use session_info.show directly. Parameters:. file Optional[IO[str]] (default: None)Optional path for output. previous; scanpy.logging.print_header. next; Datasets. Contents; . print_versions(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.logging.print_versions.html:9063,Release,Release,9063,en/stable/generated/scanpy.logging.print_versions.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.logging.print_versions.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"fig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.logpath. Contents . ScanpyConfig.logpath. scanpy._settings.ScanpyConfig.logpath#. property ScanpyConfig.logpath: Path | None[source]#; The file path logfile was set to. previous; scanpy._settings.ScanpyConfig.logfile. next; scanpy._settings.ScanpyConfig.max_memory. Contents; . ScanpyConfig.logpath. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.logpath.html:9071,Release,Release,9071,en/stable/generated/scanpy._settings.ScanpyConfig.logpath.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.logpath.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"finished (0:00:00): normalized adata.X and added 'n_counts', counts per cell before normalization (adata.obs); computing PCA; with n_comps=15; finished (0:00:08); computing neighbors; using 'X_pca' with n_pcs = 15; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:00); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:01); running Leiden clustering; finished: found 6 clusters and added; 'clusters', the cluster labels (adata.obs, categorical) (0:00:00). The experiment consisted in measuring gene expression counts from a single cell type (cultured U2-OS cells). Clusters consist of cell states at different stages of the cell cycle. We don’t expect to see specific structure in spatial dimensions given the experimental setup.; We can visualize the clusters obtained from running Leiden in UMAP space and spatial coordinates like this. adata_merfish. AnnData object with n_obs × n_vars = 645 × 12903; obs: 'n_counts', 'clusters'; uns: 'log1p', 'pca', 'neighbors', 'umap', 'leiden'; obsm: 'spatial', 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'distances', 'connectivities'. sc.pl.umap(adata_merfish, color=""clusters""); sc.pl.embedding(adata_merfish, basis=""spatial"", color=""clusters""). We hope you found the tutorial useful!; Report back to us which features/external tools you would like to see in Scanpy.; We are extending Scanpy and AnnData to support other spatial data types, such as Imaging Mass Cytometry and extend data structure to support spatial graphs and additional features. Stay tuned!. previous; Spatial. next; Integrating spatial data with scRNA-seq using scanorama. Contents; . Reading the data; QC and preprocessing; Manifold embedding and clustering based on transcriptional similarity; Visualization in spatial coordinates; Cluster marker genes; MERFISH example. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:22438,Integrat,Integrating,22438,en/stable/tutorials/spatial/basic-analysis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html,1,['Integrat'],['Integrating']
Deployability,"for Pearson residuals.; Higher values correspond to less overdispersion (var = mean + mean^2/theta), and theta=np.inf corresponds to a Poisson model. clip float | None (default: None)Determines if and how residuals are clipped:. If None, residuals are clipped to the interval [-sqrt(n_obs), sqrt(n_obs)], where n_obs is the number of cells in the dataset (default behavior).; If any scalar c, residuals are clipped to the interval [-c, c]. Set clip=np.inf for no clipping. check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. layer str | None (default: None)Layer to use as input instead of X. If None, X is used. inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. copy bool (default: False)If True, the function runs on a copy of the input object and returns the; modified copy. Otherwise, the input object is modified direcly. Not compatible; with inplace=False. Return type:; AnnData | dict[str, ndarray] | None. Returns:; If inplace=True, adata.X or the selected layer in adata.layers is updated; with the normalized values. adata.uns is updated with the following fields.; If inplace=False, the same fields are returned as dictionary with the; normalized values in results_dict['X']. .uns['pearson_residuals_normalization']['theta']The used value of the overdisperion parameter theta. .uns['pearson_residuals_normalization']['clip']The used value of the clipping parameter. .uns['pearson_residuals_normalization']['computed_on']The name of the layer on which the residuals were computed. previous; Experimental. next; scanpy.experimental.pp.normalize_pearson_residuals_pca. Contents; . normalize_pearson_residuals(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html:11352,update,updated,11352,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html,2,['update'],['updated']
Deployability,"g fixes#. Avoid warning in rank_genes_groups() if ‘t-test’ is passed pr1303 A Wolf; Restrict sphinx version to <3.1, >3.0 pr1297 I Virshup; Clean up _ranks and fix dendrogram for scipy 1.5 pr1290 S Rybakov; Use .raw to translate gene symbols if applicable pr1278 E Rice; Fix diffmap (issue1262) G Eraslan; Fix neighbors in spring_project issue1260 S Rybakov; Fix default size of dot in spatial plots pr1255 issue1253 giovp; Bumped version requirement of scipy to scipy>1.4 to support rmatmat argument of LinearOperator issue1246 I Virshup; Fix asymmetry of scores for the 'wilcoxon' method in rank_genes_groups() issue754 S Rybakov; Avoid trimming of gene names in rank_genes_groups() issue753 S Rybakov. Version 1.5#. 1.5.1 2020-05-21#. Bug fixes#. Fixed a bug in pca(), where random_state did not have an effect for sparse input pr1240 I Virshup; Fixed docstring in pca() which included an unused argument pr1240 I Virshup. 1.5.0 2020-05-15#; The 1.5.0 release adds a lot of new functionality, much of which takes advantage of anndata updates 0.7.0 - 0.7.2. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. Spatial data support#. Basic analysis Analysis and visualization of spatial transcriptomics data and integration with single cell data Integrating spatial data with scRNA-seq using scanorama G Palla; read_visium() read 10x Visium data pr1034 G Palla, P Angerer, I Virshup; visium_sge() load Visium data directly from 10x Genomics pr1013 M Mirkazemi, G Palla, P Angerer; spatial() plot spatial data pr1012 G Palla, P Angerer. New functionality#. Many functions, like neighbors() and umap(), now store cell-by-cell graphs in obsp pr1118 S Rybakov; scale() and log1p() can be used on any element in layers or obsm pr1173 I Virshup. External tools#. scanpy.external.pp.scvi for preprocessing with scVI pr1085 G Xing; Guide for using Scanpy in R pr1186 L Zappia. Performance#. pca() now uses eff",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:37505,release,release,37505,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,"['release', 'update']","['release', 'updates']"
Deployability,"g, Florent Ginhoux, and Evan W Newell. Dimensionality reduction for visualizing single-cell data using umap. Nature Biotechnology, 37(1):38–44, dec 2018. URL: https://doi.org/10.1038/nbt.4314, doi:10.1038/nbt.4314. [BFL+20]; Nicholas J. Bernstein, Nicole L. Fong, Irene Lam, Margaret A. Roy, David G. Hendrickson, and David R. Kelley. Solo: doublet identification in single-cell rna-seq via semi-supervised deep learning. Cell Systems, 11(1):95–101.e5, jul 2020. URL: https://doi.org/10.1016/j.cels.2020.05.010, doi:10.1016/j.cels.2020.05.010. [BGLL08]; Vincent D Blondel, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne Lefebvre. Fast unfolding of communities in large networks. Journal of Statistical Mechanics: Theory and Experiment, 2008(10):P10008, oct 2008. URL: https://doi.org/10.1088/1742-5468/2008/10/P10008, doi:10.1088/1742-5468/2008/10/p10008. [BHS+18]; Andrew Butler, Paul Hoffman, Peter Smibert, Efthymia Papalexi, and Rahul Satija. Integrating single-cell transcriptomic data across different conditions, technologies, and species. Nature Biotechnology, 36(5):411–420, apr 2018. URL: https://doi.org/10.1038/nbt.4096, doi:10.1038/nbt.4096. [Chi18]; Bhargav Chippada. Forceatlas2 for python. bhargavchippada/forceatlas2, 2018. URL: bhargavchippada/forceatlas2. [CLL+05]; R. R. Coifman, S. Lafon, A. B. Lee, M. Maggioni, B. Nadler, F. Warner, and S. W. Zucker. Geometric diffusions as a tool for harmonic analysis and structure definition of data: diffusion maps. Proceedings of the National Academy of Sciences, 102(21):7426–7431, may 2005. URL: https://doi.org/10.1073/pnas.0500334102, doi:10.1073/pnas.0500334102. [CN06]; G. Csárdi and T. Nepusz. The igraph software package for complex network research. InterJournal Complex Systems, pages 1695, 2006. URL: https://www.bibsonomy.org/bibtex/252e3e774bac8424cc9a3845a9c597344/lantiq. [ESM+19]; Gökcen Eraslan, Lukas M. Simon, Maria Mircea, Nikola S. Mueller, and Fabian J. Theis. Single-cell rna-seq denoising using a deep count au",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:11641,Integrat,Integrating,11641,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['Integrat'],['Integrating']
Deployability,"g, but it’s a good idea to explore this. sc.pl.pca(; adata,; color=[""sample"", ""sample"", ""pct_counts_mt"", ""pct_counts_mt""],; dimensions=[(0, 1), (2, 3), (0, 1), (2, 3)],; ncols=2,; size=2,; ). Nearest neighbor graph constuction and visualization#; Let us compute the neighborhood graph of cells using the PCA representation of the data matrix. sc.pp.neighbors(adata). This graph can then be embedded in two dimensions for visualiztion with UMAP (McInnes et al., 2018):. sc.tl.umap(adata). We can now visualize the UMAP according to the sample. sc.pl.umap(; adata,; color=""sample"",; # Setting a smaller point size to get prevent overlap; size=2,; ). Even though the data considered in this tutorial includes two different samples, we only observe a minor batch effect and we can continue with clustering and annotation of our data.; If you inspect batch effects in your UMAP it can be beneficial to integrate across samples and perform batch correction/integration. We recommend checking out scanorama and scvi-tools for batch integration. Clustering#; As with Seurat and many other frameworks, we recommend the Leiden graph-clustering method (community detection based on optimizing modularity) [Traag et al., 2019]. Note that Leiden clustering directly clusters the neighborhood graph of cells, which we already computed in the previous section. # Using the igraph implementation and a fixed number of iterations can be significantly faster, especially for larger datasets; sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2). sc.pl.umap(adata, color=[""leiden""]). Re-assess quality control and cell filtering#; As indicated before, we will now re-assess our filtering strategy by visualizing different QC metrics using UMAP. sc.pl.umap(; adata,; color=[""leiden"", ""predicted_doublet"", ""doublet_score""],; # increase horizontal space between panels; wspace=0.5,; size=3,; ). sc.pl.umap(; adata,; color=[""leiden"", ""log1p_total_counts"", ""pct_counts_mt"", ""log1p_n_genes_by_counts""],; wspace=0.5,; ncols=2,",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:17339,integrat,integration,17339,en/stable/tutorials/basics/clustering.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html,1,['integrat'],['integration']
Deployability,"g. use_highly_variable bool | None (default: None)Whether to use highly variable genes only, stored in; .var['highly_variable'].; By default uses them if they have been determined beforehand. Deprecated since version 1.10.0: Use mask_var instead. layerLayer of adata to use as expression values. dtype Union[dtype[Any], None, type[Any], _SupportsDType[dtype[Any]], str, tuple[Any, int], tuple[Any, Union[SupportsIndex, Sequence[SupportsIndex]]], list[Any], _DTypeDict, tuple[Any, Any]] (default: 'float32')Numpy data type string to which to convert the result. chunked bool (default: False)If True, perform an incremental PCA on segments of chunk_size.; The incremental PCA automatically zero centers and ignores settings of; random_seed and svd_solver. Uses sklearn IncrementalPCA or; dask-ml IncrementalPCA. If False, perform a full PCA and; use sklearn PCA or; dask-ml PCA. chunk_size int | None (default: None)Number of observations to include in each chunk.; Required if chunked=True was passed. copy bool (default: False)If an AnnData is passed, determines whether a copy; is returned. Is ignored otherwise. Return type:; AnnData | ndarray | spmatrix | None. Returns:; If data is array-like and return_info=False was passed,; this function returns the PCA representation of data as an; array of the same type as the input array.; Otherwise, it returns None if copy=False, else an updated AnnData object.; Sets the following fields:. .obsm['X_pca']spmatrix | ndarray (shape (adata.n_obs, n_comps))PCA representation of data. .varm['PCs']ndarray (shape (adata.n_vars, n_comps))The principal components containing the loadings. .uns['pca']['variance_ratio']ndarray (shape (n_comps,))Ratio of explained variance. .uns['pca']['variance']ndarray (shape (n_comps,))Explained variance, equivalent to the eigenvalues of the; covariance matrix. previous; scanpy.pp.log1p. next; scanpy.pp.normalize_total. Contents; . pca(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html:13885,update,updated,13885,en/stable/generated/scanpy.pp.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html,1,['update'],['updated']
Deployability,"g.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS. Contents . StackedViolin.DEFAULT_PLOT_YTICKLABELS. scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS#. StackedViolin.DEFAULT_PLOT_YTICKLABELS = False[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING. next; scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING. Contents; . StackedViolin.DEFAULT_PLOT_YTICKLABELS. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html:9082,Release,Release,9082,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"gakaryocytes do not appear as a separate cluster anymore. This is an extreme case as the reference data is very small; but one should always question if the reference data contain enough biological variation to meaningfully accomodate query data. Using BBKNN#. sc.tl.pca(adata_concat). %%time; sc.external.pp.bbknn(adata_concat, batch_key=""batch"") # running bbknn 1.3.6. CPU times: user 1.67 s, sys: 749 ms, total: 2.42 s; Wall time: 324 ms. sc.tl.umap(adata_concat). sc.pl.umap(adata_concat, color=[""batch"", ""louvain""]). Also BBKNN doesn’t maintain the Megakaryocytes cluster. However, it seems to mix cells more homogeneously. Pancreas#; The following data has been used in the scGen paper [Lotfollahi et al., 2019], has been used here,; was curated here and can be downloaded from here (the BBKNN paper).; It contains data for human pancreas from 4 different studies [Baron et al., 2016, Muraro et al., 2016, Segerstolpe et al., 2016, Wang et al., 2016],; which have been used in the seminal papers on single-cell dataset integration [Butler et al., 2018, Haghverdi et al., 2018] and many times ever since. # note that this collection of batches is already intersected on the genes; adata_all = sc.read(; ""data/pancreas.h5ad"",; backup_url=""https://www.dropbox.com/s/qj1jlm9w10wmt0u/pancreas.h5ad?dl=1"",; ). adata_all.shape. (14693, 2448). Inspect the cell types observed in these studies. counts = adata_all.obs.celltype.value_counts(); counts. alpha 4214; beta 3354; ductal 1804; acinar 1368; not applicable 1154; delta 917; gamma 571; endothelial 289; activated_stellate 284; dropped 178; quiescent_stellate 173; mesenchymal 80; macrophage 55; PSC 54; unclassified endocrine 41; co-expression 39; mast 32; epsilon 28; mesenchyme 27; schwann 13; t_cell 7; MHC class II 5; unclear 4; unclassified 2; Name: celltype, dtype: int64. To simplify visualization, let’s remove the 5 minority classes. minority_classes = counts.index[-5:].tolist() # get the minority classes; adata_all = adata_all[~adata_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:14673,integrat,integration,14673,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integration']
Deployability,"gend_loc=""on data"", title="""", frameon=False, save="".pdf""; ). WARNING: saving figure to file figures/umap.pdf. Now that we annotated the cell types, let us visualize the marker genes. sc.pl.dotplot(adata, marker_genes, groupby=""leiden"");. There is also a very compact violin plot. sc.pl.stacked_violin(adata, marker_genes, groupby=""leiden"");. During the course of this analysis, the AnnData accumlated the following annotations. adata. AnnData object with n_obs × n_vars = 2638 × 1838; obs: 'n_genes', 'n_genes_by_counts', 'total_counts', 'total_counts_mt', 'pct_counts_mt', 'leiden'; var: 'gene_ids', 'n_cells', 'mt', 'n_cells_by_counts', 'mean_counts', 'pct_dropout_by_counts', 'total_counts', 'highly_variable', 'means', 'dispersions', 'dispersions_norm', 'mean', 'std'; uns: 'hvg', 'leiden', 'leiden_colors', 'log1p', 'neighbors', 'pca', 'rank_genes_groups', 'umap'; obsm: 'X_pca', 'X_umap'; varm: 'PCs'; obsp: 'connectivities', 'distances'. # `compression='gzip'` saves disk space, and slightly slows down writing and subsequent reading; adata.write(results_file, compression=""gzip""). Get a rough overview of the file using h5ls, which has many options - for more details see here. The file format might still be subject to further optimization in the future. All reading functions will remain backwards-compatible, though.; If you want to share this file with people who merely want to use it for visualization, a simple way to reduce the file size is by removing the dense scaled and corrected data matrix. The file still contains the raw data used in the visualizations in adata.raw. adata.raw.to_adata().write(""./write/pbmc3k_withoutX.h5ad""). previous; Preprocessing and clustering. next; Integrating data using ingest and BBKNN. Contents; . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:26106,Integrat,Integrating,26106,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,1,['Integrat'],['Integrating']
Deployability,"gest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAP’s implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10252,integrat,integrations,10252,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integrations']
Deployability,"ght forward if you’re using GitHub’s CLI:; $ gh repo fork scverse/scanpy --clone --remote. This will fork the repo to your github account, create a clone of the repo on your current machine, add our repository as a remote, and set the main development branch to track our repository.; To do this manually, first make a fork of the repository by clicking the “fork” button on our main github package. Then, on your machine, run:; $ # Clone your fork of the repository (substitute in your username); $ git clone https://github.com/{your-username}/scanpy.git; $ # Enter the cloned repository; $ cd scanpy; $ # Add our repository as a remote; $ git remote add upstream https://github.com/scverse/scanpy.git; $ # git branch --set-upstream-to ""upstream/main"". pre-commit#; We use pre-commit to run some styling checks in an automated way.; We also test against these checks, so make sure you follow them!; You can install pre-commit with:; $ pip install pre-commit. You can then install it to run while developing here with:; $ pre-commit install. From the root of the repo.; If you choose not to run the hooks on each commit, you can run them manually with pre-commit run --files={your files}. Creating a branch for your feature#; All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the main branch.; You can create a branch with:; $ git checkout main # Starting from the main branch; $ git pull # Syncing with the repo; $ git switch -c {your-branch-name} # Making and changing to the new branch. Open a pull request#; When you’re ready to have your code reviewed, push your changes up to your fork:; $ # The first time you push the branch, you'll need to tell git where; $ git push --set-upstream origin {your-branch-name}; $ # After that, just use; $ git push. And open a pull request by going to the main repo and clicking New pull request.; GitHub is also pretty good about prompting you t",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html:10982,install,install,10982,en/stable/dev/getting-set-up.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html,2,['install'],['install']
Deployability,"gs.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_DOT_MIN. Contents . DotPlot.DEFAULT_DOT_MIN. scanpy.pl.DotPlot.DEFAULT_DOT_MIN#. DotPlot.DEFAULT_DOT_MIN = None[source]#. previous; scanpy.pl.DotPlot.DEFAULT_DOT_MAX. next; scanpy.pl.DotPlot.DEFAULT_LARGEST_DOT. Contents; . DotPlot.DEFAULT_DOT_MIN. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MIN.html:9067,Release,Release,9067,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MIN.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MIN.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"gs.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.distances. Contents . Neighbors.distances. scanpy.Neighbors.distances#. property Neighbors.distances: ndarray | csr_matrix | None[source]#; Distances between data points (sparse matrix). previous; scanpy.Neighbors.connectivities. next; scanpy.Neighbors.distances_dpt. Contents; . Neighbors.distances. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.distances.html:9060,Release,Release,9060,en/stable/generated/scanpy.Neighbors.distances.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.distances.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"gs.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING. Contents . DotPlot.DEFAULT_PLOT_X_PADDING. scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING#. DotPlot.DEFAULT_PLOT_X_PADDING = 0.8[source]#. previous; scanpy.pl.DotPlot.DEFAULT_LEGENDS_WIDTH. next; scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING. Contents; . DotPlot.DEFAULT_PLOT_X_PADDING. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING.html:9074,Release,Release,9074,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"gs.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING. Contents . StackedViolin.DEFAULT_PLOT_X_PADDING. scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING#. StackedViolin.DEFAULT_PLOT_X_PADDING = 0.5[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH. next; scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS. Contents; . StackedViolin.DEFAULT_PLOT_X_PADDING. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html:9080,Release,Release,9080,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"he null model is designed not to predict biological differences between cells. As a result, it will deviate from the observed counts starkly whenever genes differ in their expression between subpopulations – and produce large residuals in return. This will even work for genes that mark only small subpopulations. An example of detecting a rare subpopulation consisting of just 50 cells with Pearson residuals is presented in Lause et al. (2021).; As a result, the transformed data will show less technical variability, and biological signals from variable genes will be amplified. Therefore, downstream processing like PCA will be dominated by biological rather then technical variances. This is why it makes sense to use Pearson residuals as basis for downstream processing.; After reducing the dataset to the most variable genes in the previous steps, we will now transform our raw counts to residuals by calling normalize_pearson_residuals(adata). In our example pipeline, we then apply PCA to reduce the dataset to the most relevant dimensions. We visualize this reduced representation with t-SNE and perform Leiden clustering, which is again taken from the PBMC3k tutorial.; This is just one of many possible pipelines: After PCA, you could also use UMAP or other embeddings to inspect the data, and cluster the data with a different algorithm than Leiden. Preparations#; Because we will transform the raw data in adata.X to residuals in the next step, we first save a copy of the raw counts to adata.layers['raw']. Also, we save a depth-normalized and square-root transformed version of the data to adata.layers['sqrt_norm'], so we can use them for plotting normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pb",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:23504,pipeline,pipeline,23504,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['pipeline'],['pipeline']
Deployability,"hondrial_genes() for querying mito genes FG Brundu; mnn_correct() for batch correction [Haghverdi et al., 2018, Kang, 2018]; phate() for low-dimensional embedding [Moon et al., 2019] S Gigante; sandbag(), cyclone() for scoring genes [Fechtner, 2018, Scialdone et al., 2015]. Version 1.0#. 1.0.0 2018-03-30#. Major updates#. Scanpy is much faster and more memory efficient: preprocess, cluster and; visualize 1.3M cells in 6h, 130K cells in 14min, and 68K cells in 3min A Wolf; the API gained a preprocessing function neighbors() and a; class Neighbors() to which all basic graph computations are; delegated A Wolf. Warning; Upgrading to 1.0 isn’t fully backwards compatible in the following changes. the graph-based tools louvain(); dpt() draw_graph(); umap() diffmap(); paga() require prior computation of the graph:; sc.pp.neighbors(adata, n_neighbors=5); sc.tl.louvain(adata) instead of; previously sc.tl.louvain(adata, n_neighbors=5); install numba via conda install numba, which replaces cython; the default connectivity measure (dpt will look different using default; settings) changed. setting method='gauss' in sc.pp.neighbors uses; gauss kernel connectivities and reproduces the previous behavior,; see, for instance in the example paul15.; namings of returned annotation have changed for less bloated AnnData; objects, which means that some of the unstructured annotation of old; AnnData files is not recognized anymore; replace occurances of group_by with groupby (consistency with; pandas); it is worth checking out the notebook examples to see changes, e.g.; the seurat example.; upgrading scikit-learn from 0.18 to 0.19 changed the implementation of PCA,; some results might therefore look slightly different. Further updates#. UMAP [McInnes et al., 2018] can serve as a first visualization of the data just as tSNE,; in contrast to tSNE, UMAP directly embeds the single-cell graph and is faster;; UMAP is also used for measuring connectivities and computing neighbors,; see neighbors()",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:48755,install,install,48755,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,['install'],['install']
Deployability,"ial(). Better support for plotting without an image, as well as directly providing images pr1512 G Palla; Dict input for scanpy.queries.enrich() pr1488 G Eraslan; rank_genes_groups_df() can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once pr1388 G Eraslan; Color annotations for gene sets in heatmap() are now matched to color for cluster pr1511 L Sikkema; PCA plots can now annotate axes with variance explained pr1470 bfurtwa; Plots with groupby arguments can now group by values in the index by passing the index’s name (like pd.DataFrame.groupby). pr1583 F Ramirez; Added na_color and na_in_legend keyword arguments to embedding() plots. Allows specifying color for missing or filtered values in plots like umap() or spatial() pr1356 I Virshup; embedding() plots now support passing dict of {cluster_name: cluster_color, ...} for palette argument pr1392 I Virshup. External tools (new)#. Add Scanorama integration to scanpy external API (scanorama_integrate(), Hie et al. [2019]) pr1332 B Hie; Scrublet [Wolock et al., 2019] integration: scrublet(), scrublet_simulate_doublets(), and plotting method scrublet_score_distribution() pr1476 J Manning; hashsolo() for HTO demultiplexing [Bernstein et al., 2020] pr1432 NJ Bernstein; Added scirpy (sc-AIRR analysis) to ecosystem page pr1453 G Sturm; Added scvi-tools to ecosystem page pr1421 A Gayoso. External tools (changes)#. Updates for palantir() and palantir_results() pr1245 A Mousa; Fixes to harmony_timeseries() docs pr1248 A Mousa; Support for leiden clustering by scanpy.external.tl.phenograph() pr1080 A Mousa; Deprecate scanpy.external.pp.scvi pr1554 G Xing; Updated default params of sam() to work with larger data pr1540 A Tarashansky. Documentation#. New contribution guide pr1544 I Virshup; zsh installation instructions pr1444 P Angerer. Performance#. Speed up read_10x_h5() pr1402 P Weiler; Speed ups for obs_df() pr1499 F Ramirez. Bugfixes#. Consistent fold-change,",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:31537,integrat,integration,31537,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['integrat'],['integration']
Deployability,"iently deals with; datasets of more than one million cells.; Discuss usage on the scverse Discourse. Read the documentation.; If you’d like to contribute by opening an issue or creating a pull request, please take a look at our contribution guide.; scanpy is part of the scverse project (website, governance) and is fiscally sponsored by NumFOCUS.; If you like scverse and want to support our mission, please consider making a donation to support our efforts. Installation ; New to scanpy? Check out the installation guide. Installation. Tutorials ; The tutorials walk you through real-world applications of scanpy. Tutorials. API reference ; The API reference contains a detailed description of; the scanpy API. API. Discussion ; Need help? Reach out on our forum to get your questions answered!. https://discourse.scverse.org. GitHub ; Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments. https://github.com/scverse/scanpy. Other resources. Follow changes in the release notes.; Find tools that harmonize well with anndata & Scanpy at scverse.org/packages/; Check out our contribution guide for development practices.; Consider citing Genome Biology (2018) along with original references. News#. rapids-singlecell brings scanpy to the GPU! 2024-03-18#; rapids-singlecell by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. Scanpy hits 100 contributors! 2022-03-31#; 100 people have contributed to Scanpy’s source code!; Of course, contributions to the project are not limited to direct modification of the source code.; Many others have improved the project by building on top of it, participating in development discussions, helping others with usage, or by showing off what it’s helped them accomplish.; Thanks to all our contributors for making this project possible!. New community channels 2022-03-31#; We’ve moved our forums and have a new publicly available chat!. Our discourse forum has migrated to a joint scv",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/index.html:10816,release,release,10816,en/stable/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/index.html,1,['release'],['release']
Deployability,"ing.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.ingest. Contents . ingest(). scanpy.tl.ingest#. scanpy.tl.ingest(adata, adata_ref, *, obs=None, embedding_method=('umap', 'pca'), labeling_method='knn', neighbors_key=None, inplace=True, **kwargs)[source]#; Map labels and embeddings from reference data to new data.; Integrating data using ingest and BBKNN; Integrates embeddings and annotations of an adata with a reference dataset; adata_ref through projecting on a PCA (or alternate; model) that has been fitted on the reference data. The function uses a knn; classifier for mapping labels and the UMAP package [McInnes et al., 2018] for mapping; the embeddings. Note; We refer to this asymmetric dataset integration as ingesting; annotations from reference data to new data. This is different from; learning a joint representation that integrates both datasets in an; unbiased way, as CCA (e.g. in Seurat) or a conditional VAE (e.g. in; scVI) would do. You need to run neighbors() on adata_ref before; passing it. Parameters:. adata AnnDataThe annotated data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes. This is the dataset without labels and; embeddings. adata_ref AnnDataThe annotated data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes.; Variables (n_vars and var_names) of adata_ref should be the same; as in adata.; This is the dataset with labels and embeddings; which need to be mapped to adata. obs str | Iterable[str] | None (default: None)Labels’ keys in adata_ref.obs which need to be mapped to adata.obs; (inferred for observation of adata). embedding_method str | Iterable[str] (default: ('umap', 'pca'))Embeddings in adata_ref which need to be mapped to adata.; The only supported values are ‘umap’ and ‘pca’. labeling_method str (default: 'knn')The me",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html:10025,integrat,integrates,10025,en/stable/generated/scanpy.tl.ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html,1,['integrat'],['integrates']
Deployability,"ing.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Get object from AnnData: get. Get object from AnnData: get#; The module sc.get provides convenience functions for getting values back in; useful formats. get.obs_df; Return values for observations in adata. get.var_df; Return values for observations in adata. get.rank_genes_groups_df; scanpy.tl.rank_genes_groups() results in the form of a DataFrame. get.aggregate; Aggregate data matrix based on some categorical grouping. previous; scanpy.read_umi_tools. next; scanpy.get.obs_df. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/get.html:9062,Release,Release,9062,en/stable/api/get.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/get.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.get_axes. Contents . MatrixPlot.get_axes(). scanpy.pl.MatrixPlot.get_axes#. MatrixPlot.get_axes()[source]#. Return type:; dict[str, Axes]. previous; scanpy.pl.MatrixPlot.add_totals. next; scanpy.pl.MatrixPlot.getdoc. Contents; . MatrixPlot.get_axes(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html:9063,Release,Release,9063,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.get_axes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.cache_compression. Contents . ScanpyConfig.cache_compression. scanpy._settings.ScanpyConfig.cache_compression#. property ScanpyConfig.cache_compression: str | None[source]#; Compression for sc.read(..., cache=True) (default 'lzf').; May be 'lzf', 'gzip', or None. previous; scanpy._settings.ScanpyConfig.autoshow. next; scanpy._settings.ScanpyConfig.cachedir. Contents; . ScanpyConfig.cache_compression. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.cache_compression.html:9081,Release,Release,9081,en/stable/generated/scanpy._settings.ScanpyConfig.cache_compression.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.cache_compression.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING. Contents . DotPlot.DEFAULT_PLOT_Y_PADDING. scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING#. DotPlot.DEFAULT_PLOT_Y_PADDING = 1.0[source]#. previous; scanpy.pl.DotPlot.DEFAULT_PLOT_X_PADDING. next; scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX. Contents; . DotPlot.DEFAULT_PLOT_Y_PADDING. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING.html:9074,Release,Release,9074,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_PLOT_Y_PADDING.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH. Contents . StackedViolin.DEFAULT_CATEGORY_WIDTH. scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH#. StackedViolin.DEFAULT_CATEGORY_WIDTH = 0.37[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_CATEGORY_HEIGHT. next; scanpy.pl.StackedViolin.DEFAULT_COLORMAP. Contents; . StackedViolin.DEFAULT_CATEGORY_WIDTH. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html:9080,Release,Release,9080,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAP’s implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that integrates datasets in a symmetric way as BBKNN, Scanorma, Conos, CCA (e.g. in Seurat) or a conditional VAE (e.g. in scVI, trVAE) would do, but comparable to the initiall MNN implementation in scran. Take a look at tools in the external API or at the ecoystem page to get a start with other tools. import scanpy as sc; import pandas as pd. sc.settings.verbosity = 1 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); sc.settings.set_figure_params(dpi=80, frameon=False, figsize=(3, 3), facecolor=""white""). scanpy==1.5.0 anndata==0.7.1 umap==0.4.2 numpy==1.18.1 scipy==1.4.1 pandas==1.0.3 scikit-learn==0.22.1 statsmodels==0.11.0. PBMCs#; We consider an annotated reference dataset adata_ref and a dataset for which you want to query labels and embeddings adata. # this is an earlier version of the dataset from the pbmc3k tutorial; adata_ref = sc.datasets.pbmc3k_processed(); adata = sc.datasets.pbmc68k_reduced(). To use sc.tl.ingest, the datasets need to be defined o",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:10849,integrat,integrates,10849,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integrates']
Deployability,"is for simple cases.; Tuple return sections are formatted like parameters. Other than in numpydoc, each tuple is first characterized by the identifier and not by its type. Provide type annotation in the function header.; Mix of prose and tuple is relevant in complicated cases, e.g. when you want to describe that you added something as annotation to an `AnnData` object. Examples#; For simple cases, use prose as in normalize_total():; Returns; -------; Returns dictionary with normalized copies of `adata.X` and `adata.layers`; or updates `adata` with normalized versions of the original; `adata.X` and `adata.layers`, depending on `inplace`. For tuple return values, you can use the standard numpydoc way of populating it,; e.g. as in calculate_qc_metrics().; Do not add types in the docstring, but specify them in the function signature:; def myfunc(...) -> tuple[int, str]:; """"""; ...; Returns; -------; one_identifier; Description.; second_identifier; Description 2.; """"""; ... Many functions also just modify parts of the passed AnnData object, like e.g. dpt().; You can then combine prose and lists to best describe what happens:; Returns; -------; Depending on `copy`, returns or updates `adata` with the following fields. If `n_branchings==0`, no field `dpt_groups` will be written. dpt_pseudotime : :class:`~pandas.Series` (`adata.obs`, dtype `float`); Array of dim (number of samples) that stores the pseudotime of each; cell, that is, the DPT distance with respect to the root cell.; dpt_groups : :class:`pandas.Series` (`adata.obs`, dtype `category`); Array of dim (number of samples) that stores the subgroup id ('0',; '1', ...) for each cell. The groups typically correspond to; 'progenitor cells', 'undecided cells' or 'branches' of a process. previous; Tests. next; CI. Contents; . Building the docs; Adding to the docs; docstrings format; Plots in docstrings; Params section; Returns section; Examples. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:14481,update,updates,14481,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,1,['update'],['updates']
Deployability,"ity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Exporting. Exporting#. exporting.spring_project(adata, project_dir, ...); Exports to a SPRING project directory [Weinreb et al., 2017]. exporting.cellbrowser(adata, data_dir, ...); Export adata to a UCSC Cell Browser project directory. previous; scanpy.external.pl.wishbone_marker_trajectory. next; scanpy.external.exporting.spring_project. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/exporting.html:9043,Release,Release,9043,en/stable/external/exporting.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/exporting.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH. Contents . StackedViolin.DEFAULT_LINE_WIDTH. scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH#. StackedViolin.DEFAULT_LINE_WIDTH = 0.2[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH. next; scanpy.pl.StackedViolin.DEFAULT_PLOT_X_PADDING. Contents; . StackedViolin.DEFAULT_LINE_WIDTH. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html:9076,Release,Release,9076,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ividual scanpy ploting functions, as they create plots in different ways. Certain functions plot on individual Axes objects while others use the whole Figure, combining multiple Axes to display different parts of a single plot. There are also other differences, such as which types of legends are used (i.e. continous Colorbar or discrete Legend), etc. Figure and Axes objects#; scanpy plotting functions can return Figure or the plot object (by setting return_fig=True) or Axes (by setting show=False).; The show parameter also regulates when the plot is rendered. If we want to customize Axes after the scanpy plotting function was called we need to set show=False to ensure that the plot will be rendered only after we made all adjustments.; For example, from embedding plots (such as umap) we can obtain either axes (by setting show=False) or the whole figure (by setting return_fig=True) that stores axes in figure.axes. For every plotted category one Axes object will be created and for every continuous category two Axes objects: the UMAP plot and colorbar on the side. However, if we want to obtain the colorbar axes object we need to use return_fig=True rather than show=False. When accessing Axes from Figure the returned object is a list and we need to select the relevant Axes to modify them. When returning Axes directly (e.g. with show=False) we obtain either an individual Axes object (if this is the only Axes object on the Figure) or a list of Axes (if multiple Axes were created). # Examples of returned objects from the UMAP function. print(""Categorical plots:""); axes = sc.pl.umap(adata, color=[""bulk_labels""], show=False); print(""Axis from a single category plot:"", axes); plt.close(); axes = sc.pl.umap(adata, color=[""bulk_labels"", ""S_score""], show=False); print(""Axes list from two categorical plots:"", axes); plt.close(); fig = sc.pl.umap(adata, color=[""bulk_labels""], return_fig=True); print(""Axes list from a figure with one categorical plot:"", fig.axes); plt.close(). print(",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:11652,continuous,continuous,11652,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,1,['continuous'],['continuous']
Deployability,"ix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW. Contents . MatrixPlot.DEFAULT_EDGE_LW. scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW#. MatrixPlot.DEFAULT_EDGE_LW = 0.1[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_EDGE_COLOR. next; scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH. Contents; . MatrixPlot.DEFAULT_EDGE_LW. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html:9070,Release,Release,9070,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_YLIM. Contents . StackedViolin.DEFAULT_YLIM. scanpy.pl.StackedViolin.DEFAULT_YLIM#. StackedViolin.DEFAULT_YLIM = None[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_WSPACE. next; scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES. Contents; . StackedViolin.DEFAULT_YLIM. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html:9070,Release,Release,9070,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_YLIM.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Experimental. Experimental#; New methods that are in early development which are not (yet); integrated in Scanpy core. experimental.pp.normalize_pearson_residuals; Applies analytic Pearson residual normalization, based on Lause et al. [2021]. experimental.pp.normalize_pearson_residuals_pca; Applies analytic Pearson residual normalization and PCA, based on Lause et al. [2021]. experimental.pp.highly_variable_genes; Select highly variable genes using analytic Pearson residuals [Lause et al., 2021]. experimental.pp.recipe_pearson_residuals; Full pipeline for HVG selection and normalization by analytic Pearson residuals [Lause et al., 2021]. previous; scanpy.metrics.morans_i. next; scanpy.experimental.pp.normalize_pearson_residuals. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/experimental.html:9046,Release,Release,9046,en/stable/api/experimental.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/experimental.html,4,"['Release', 'integrat', 'pipeline', 'release']","['Release', 'integrated', 'pipeline', 'release']"
Deployability,"l API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Installation. Contents . Development Version; Docker; Troubleshooting. Installation#; To use scanpy from another project, install it using your favourite environment manager:. Hatch (recommended)Pip/PyPICondaAdding scanpy[leiden] to your dependencies is enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:9220,Install,Installation,9220,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,1,['Install'],['Installation']
Deployability,l API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Release notes. Contents . Version 1.10; 1.10.3 2024-09-17; Bug fixes. 1.10.2 2024-06-25; Development Process; Documentation; Bug fixes; Performance. 1.10.1 2024-04-09; Documentation; Bug fixes; Performance. 1.10.0 2024-03-26; Features; Documentation; Bug fixes; Development Process; Deprecations. Version 1.9; 1.9.8 2024-01-26; Bug fixes. 1.9.7 2024-01-25; Bug fixes. 1.9.6 2023-10-31; Bug fixes. 1.9.5 2023-09-08; Bug fixes. 1.9.4 2023-08-24; Bug fixes. 1.9.3 2023-03-02; Bug fixes. 1.9.2 2023-02-16; Bug fixes. 1.9.1 2022-04-05; Bug fixes. 1.9.0 2022-04-01; Tutorials; Experimental module; Features; Ecosystem; Bug fixes. Version 1.8; 1.8.2 2021-11-3; Documentation; Bug fixes; Ecosystem. 1.8.1 2021-07-07; Bug fixes. 1.8.0 2021-06-28; Metrics module; Features; Ecosystem; Documentation; Bug fixes; Development Process; Deprecations. Version 1.7; 1.7.2 2021-04-07; Bug fixes; Ecosystem. 1.7.1 2021-02-24; Documentation; Bug fixes. 1.7.0 2021-02-03; Features; External tools (new); External tools (changes),MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:9221,Release,Release,9221,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['Release'],['Release']
Deployability,"l.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using other kNN libraries in Scanpy. Using other kNN libraries in Scanpy#; Since Scanpy was released, there has been quite some development in the space of approximate nearest neighbor detection.; In our example, we’re going to use Annoy:. %pip install -qU ""pip""; %pip install -q ""scanpy"" ""sklearn-ann[annoy]"". Note: you may need to restart the kernel to use updated packages.; Note: you may need to restart the kernel to use updated packages. import scanpy as sc; from sklearn_ann.kneighbors.annoy import AnnoyTransformer # noqa: F401. sc.logging.print_header(). scanpy==1.10.0rc2.dev0+g48b495d9.d20240222 anndata==0.10.5.post1 umap==0.5.5 numpy==1.26.4 scipy==1.12.0 pandas==2.2.0 scikit-learn==1.4.1.post1 statsmodels==0.14.1 igraph==0.11.4 pynndescent==0.5.11. Our nearest neighbors implementation uses the PCA embedding by default, so let’s pre-compute that:. adata_default = sc.datasets.paul15(); sc.pp.pca(adata_default); adata_annoy, adata_pynnd = adata_default.copy(), adata_default.copy(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. The best way to use a third-party approximate nearest neighbors implementation is to use sklearn-ann. It provides kNN Transformer classes wrapping several popular approximate nearest neighbor libraries.; Explicitly setting the transformer parameter allows customizing how this function behaves.; By default, for s",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html:9672,update,updated,9672,en/stable/how-to/knn-transformers.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html,1,['update'],['updated']
Deployability,"l.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Installation. Contents . Development Version; Docker; Troubleshooting. Installation#; To use scanpy from another project, install it using your favourite environment manager:. Hatch (recommended)Pip/PyPICondaAdding scanpy[leiden] to your dependencies is enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; $ gh repo clone scverse/scanpy; $ cd scanpy. Hatch (recommended)Pip/PyPICondaTo use one of the predefined Hatch environments in hatch.toml,; run either hatch test [args] or hatch run [env:]command [...args], e.g.:; $ hatch test -p # run tests in parallel; $ hatch run docs:build # build docs; $ hatch run towncrier:create # create changelog entry. If you are using pip>=21.3, an editable install can be m",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:9621,install,installing,9621,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,2,['install'],['installing']
Deployability,"lantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.experimental.pp.recipe_pearson_residuals. Contents . recipe_pearson_residuals(). scanpy.experimental.pp.recipe_pearson_residuals#. scanpy.experimental.pp.recipe_pearson_residuals(adata, *, theta=100, clip=None, n_top_genes=1000, batch_key=None, chunksize=1000, n_comps=50, random_state=0, kwargs_pca={}, check_values=True, inplace=True)[source]#; Full pipeline for HVG selection and normalization by analytic Pearson residuals [Lause et al., 2021].; Applies gene selection based on Pearson residuals. On the resulting subset,; Pearson residual normalization and PCA are performed.; Expects raw count input. Parameters:. adata AnnDataThe annotated data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. theta float (default: 100)The negative binomial overdispersion parameter theta for Pearson residuals.; Higher values correspond to less overdispersion (var = mean + mean^2/theta), and theta=np.inf corresponds to a Poisson model. clip float | None (default: None)Determines if and how residuals are clipped:. If None, residuals are clipped to the interval [-sqrt(n_obs), sqrt(n_obs)], where n_obs is the number of cells in the dataset (default behavior).; If any scalar c, residuals are clipped to the interval [-c, c]. Set clip=np.inf for no clipping. n_top_genes i",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html:9615,pipeline,pipeline,9615,en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,1,['pipeline'],['pipeline']
Deployability,"lantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Versioning. Contents . Semantic versioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. 1.7.x for the 1.7 release series).; For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs are assigned a patch version milestone such as 1.7.4.; Once the PR is approved and merged, the bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:9718,release,releases,9718,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,1,['release'],['releases']
Deployability,"ll, 162(1):184–197, jul 2015. URL: https://doi.org/10.1016/j.cell.2015.05.047, doi:10.1016/j.cell.2015.05.047. [LWT19]; Mohammad Lotfollahi, F. Alexander Wolf, and Fabian J. Theis. Scgen predicts single-cell perturbation responses. Nature Methods, 16(8):715–721, jul 2019. URL: https://doi.org/10.1038/s41592-019-0494-8, doi:10.1038/s41592-019-0494-8. [LBC+21]; Malte Luecken, Daniel Burkhardt, Robrecht Cannoodt, Christopher Lance, Aditi Agrawal, Hananeh Aliee, Ann Chen, Louise Deconinck, Angela Detweiler, Alejandro Granados, Shelly Huynh, Laura Isacco, Yang Kim, Dominik Klein, Bony De Kumar, Sunil Kuppasani, Heiko Lickert, Aaron McGeever, Joaquin Melgarejo, Honey Mekonen, Maurizio Morri, Michaela Müller, Norma Neff, Sheryl Paul, Bastian Rieck, Kaylie Schneider, Scott Steelman, Michael Sterr, Daniel Treacy, Alexander Tong, Alexandra-Chloe Villani, Guilin Wang, Jia Yan, Ce Zhang, Angela Pisco, Smita Krishnaswamy, Fabian Theis, and Jonathan M Bloom. A sandbox for prediction and integration of dna, rna, and proteins in single cells. In J. Vanschoren and S. Yeung, editors, Proceedings of the Neural Information Processing Systems Track on Datasets and Benchmarks, volume 1. Curran, 2021. URL: https://datasets-benchmarks-proceedings.neurips.cc/paper_files/paper/2021/file/158f3069a435b314a80bdcb024f8e422-Paper-round2.pdf. [MCLW17]; Davis J McCarthy, Kieran R Campbell, Aaron T L Lun, and Quin F Wills. Scater: pre-processing, quality control, normalization and visualization of single-cell RNA-seq data in r. Bioinformatics, 33(8):1179–1186, jan 2017. URL: https://doi.org/10.1093/bioinformatics/btw777, doi:10.1093/bioinformatics/btw777. [MHM18]; Leland McInnes, John Healy, and James Melville. Umap: uniform manifold approximation and projection for dimension reduction. 2018. URL: https://arxiv.org/abs/1802.03426, doi:10.48550/ARXIV.1802.03426. [MWH+15]; Victoria Moignard, Steven Woodhouse, Laleh Haghverdi, Andrew J Lilly, Yosuke Tanaka, Adam C Wilkinson, Florian Buettner, Iain C Ma",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:18844,integrat,integration,18844,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['integrat'],['integration']
Deployability,"loat (default: 0)Random seed for setting the initial states for the optimization in the PCA step. kwargs_pca Mapping[str, Any] (default: mappingproxy({}))Dictionary of further keyword arguments passed on to scanpy.pp.pca(). mask_var ndarray | str | None | Empty (default: _empty)To run only on a certain set of genes given by a boolean array; or a string referring to an array in var.; By default, uses .var['highly_variable'] if available, else everything. use_highly_variable bool | None (default: None)Whether to use highly variable genes only, stored in; .var['highly_variable'].; By default uses them if they have been determined beforehand. Deprecated since version 1.10.0: Use mask_var instead. check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. Return type:; AnnData | None. Returns:; If inplace=False, returns the Pearson residual-based PCA results (as AnnData; object). If inplace=True, updates adata with the following fields:. .uns['pearson_residuals_normalization']['pearson_residuals_df']The subset of highly variable genes, normalized by Pearson residuals. .uns['pearson_residuals_normalization']['theta']The used value of the overdisperion parameter theta. .uns['pearson_residuals_normalization']['clip']The used value of the clipping parameter. .obsm['X_pca']PCA representation of data after gene selection (if applicable) and Pearson; residual normalization. .varm['PCs']The principal components containing the loadings. When inplace=True and; use_highly_variable=True, this will contain empty rows for the genes not; selected. .uns['pca']['variance_ratio']Ratio of explained variance. .uns['pca']['variance']Explained variance, eq",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html:11875,update,update,11875,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,1,['update'],['update']
Deployability,"lso test against these checks, so make sure you follow them!; You can install pre-commit with:; $ pip install pre-commit. You can then install it to run while developing here with:; $ pre-commit install. From the root of the repo.; If you choose not to run the hooks on each commit, you can run them manually with pre-commit run --files={your files}. Creating a branch for your feature#; All development should occur in branches dedicated to the particular work being done.; Additionally, unless you are a maintainer, all changes should be directed at the main branch.; You can create a branch with:; $ git checkout main # Starting from the main branch; $ git pull # Syncing with the repo; $ git switch -c {your-branch-name} # Making and changing to the new branch. Open a pull request#; When you’re ready to have your code reviewed, push your changes up to your fork:; $ # The first time you push the branch, you'll need to tell git where; $ git push --set-upstream origin {your-branch-name}; $ # After that, just use; $ git push. And open a pull request by going to the main repo and clicking New pull request.; GitHub is also pretty good about prompting you to open PRs for recently pushed branches.; We’ll try and get back to you soon!. Development environments#; It’s recommended to do development work in an isolated environment.; There are number of ways to do this, including virtual environments, conda environments, and virtual machines.; We think the easiest is probably Hatch environments.; Using one of the predefined environments in hatch.toml is as simple as running hatch test or hatch run docs:build (they will be created on demand).; For an in-depth guide, refer to the development install instructions of scanpy. previous; Contributing code. next; Tests. Contents; . Working with git; Forking and cloning; pre-commit; Creating a branch for your feature; Open a pull request. Development environments. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html:12547,install,install,12547,en/stable/dev/getting-set-up.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html,1,['install'],['install']
Deployability,"m; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tutorials. Contents . Basic workflows; Visualization; Trajectory inference; Spatial data; Experimental; Older tutorials. Tutorials#. See also; For more tutorials featureing scanpy and other scverse ecosystem tools, check out the curated set of tutorials at scverse.org/learn. Basic workflows#. Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Visualization#. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectory inference#. See also; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. CellRank; Dynamo. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial data#. See also; For more up-to-date tutorials on working with spatial data, see:. SquidPy tutorials; SpatialData tutorials; Scverse ecosystem spatial tutorials. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental#. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Older tutorials#; A number of older tutorials can be found at:. The scanpy_usage repository. previous; Installation. next; Basics. Contents; . Basic workflows; Visualization; Trajectory inference; Spatial data; Experimenta",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/index.html:9606,Integrat,Integrating,9606,en/stable/tutorials/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/index.html,1,['Integrat'],['Integrating']
Deployability,"mantic versioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. 1.7.x for the 1.7 release series).; For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs are assigned a patch version milestone such as 1.7.4.; Once the PR is approved and merged, the bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures. Technical details#; The [meeseeks bot][] reacts to commands like this,; given as a comment on the PR, or a label or milestone description:. @Meeseeksdev backport <branch>. In our case, these commands are part of the milestone description,; which causes the merge of a PR assigned to a milestone to trigger the bot. previous; CI. next; Making a release. Contents; . Semantic versioning; Version numbers. Tooling; Technical details. By Scanpy development team. ; © Copyright 2024, the Scanpy development ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:10211,release,release,10211,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,2,['release'],['release']
Deployability,"many top connectivities. May help with; population independence and improve the tidiness of clustering. The lower the value the; more independent the individual populations, at the cost of more conserved batch effect.; If None, sets the parameter value automatically to 10 times neighbors_within_batch; times the number of batches. Set to 0 to skip. annoy_n_trees int (default: 10)Only used with annoy neighbour identification. The number of trees to construct in the; annoy forest. More trees give higher precision when querying, at the cost of increased; run time and resource intensity. pynndescent_n_neighbors int (default: 30)Only used with pyNNDescent neighbour identification. The number of neighbours to include; in the approximate neighbour graph. More neighbours give higher precision when querying,; at the cost of increased run time and resource intensity. pynndescent_random_state int (default: 0)Only used with pyNNDescent neighbour identification. The RNG seed to use when creating; the graph. use_faiss bool (default: True)If approx=False and the metric is “euclidean”, use the faiss package to compute; nearest neighbours if installed. This improves performance at a minor cost to numerical; precision as faiss operates on float32. set_op_mix_ratio float (default: 1.0)UMAP connectivity computation parameter, float between 0 and 1, controlling the; blend between a connectivity matrix formed exclusively from mutual nearest neighbour; pairs (0) and a union of all observed neighbour relationships with the mutual pairs; emphasised (1). local_connectivity int (default: 1)UMAP connectivity computation parameter, how many nearest neighbors of each cell; are assumed to be fully connected (and given a connectivity value of 1). Return type:; AnnData | None. Returns:; The adata with the batch-corrected graph. previous; Preprocessing: PP. next; scanpy.external.pp.harmony_integrate. Contents; . bbknn(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.bbknn.html:13568,install,installed,13568,en/stable/generated/scanpy.external.pp.bbknn.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.bbknn.html,1,['install'],['installed']
Deployability,"mation and bug reports here. Parameters:. adata AnnDataThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. cell_hashing_columns Sequence[str].obs columns that contain cell hashing counts. priors tuple[float, float, float] (default: (0.01, 0.8, 0.19))Prior probabilities of each hypothesis, in; the order [negative, singlet, doublet]. The default is set to; [0.01, 0.8, 0.19] assuming barcode counts are from cells that; have passed QC in the transcriptome space, e.g. UMI counts, pct; mito reads, etc. pre_existing_clusters str | None (default: None)The column in .obs containing pre-existing cluster assignments; (e.g. Leiden clusters or cell types, but not batch assignments).; If provided, demultiplexing will be performed separately for each; cluster. number_of_noise_barcodes int | None (default: None)The number of barcodes used to create the noise distribution.; Defaults to len(cell_hashing_columns) - 2. inplace bool (default: True)Whether to update adata in-place or return a copy. Return type:; AnnData | None. Returns:; A copy of the input adata if inplace=False, otherwise the input; adata. The following fields are added:. .obs[""most_likely_hypothesis""]Index of the most likely hypothesis, where 0 corresponds to negative,; 1 to singlet, and 2 to doublet. .obs[""cluster_feature""]The cluster assignments used for demultiplexing. .obs[""negative_hypothesis_probability""]Probability of the negative hypothesis. .obs[""singlet_hypothesis_probability""]Probability of the singlet hypothesis. .obs[""doublet_hypothesis_probability""]Probability of the doublet hypothesis. .obs[""Classification""]:Classification of the cell, one of the barcodes in cell_hashing_columns,; ""Negative"", or ""Doublet"". Examples; >>> import anndata; >>> import scanpy.external as sce; >>> adata = anndata.read_h5ad(""data.h5ad""); >>> sce.pp.hashsolo(adata, [""Hash1"", ""Hash2"", ""Hash3""]); >>> adata.obs.head(). previous; scanpy.external.pp.scanorama_integrate. next; scanpy.ext",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.hashsolo.html:10595,update,update,10595,en/stable/generated/scanpy.external.pp.hashsolo.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.hashsolo.html,1,['update'],['update']
Deployability,"meter instead of always writing to (or overwriting) a default key pr2864 J Fan; scanpy.pp.scale() now clips np.ndarray also at - max_value for zero-centering pr2913 S Dicks; Support sparse chunks in dask scale(), normalize_total() and highly_variable_genes() (seurat and cell-ranger tested) pr2856 ilan-gold. Documentation#. Doc style overhaul pr2220 A Gayoso; Re-add search-as-you-type, this time via readthedocs-sphinx-search pr2805 P Angerer; Fixed a lot of broken usage examples pr2605 P Angerer; Improved harmonization of return field of sc.pp and sc.tl functions pr2742 E Roellin; Improved docs for percent_top argument of calculate_qc_metrics() pr2849 I Virshup; New basic clustering tutorial (Preprocessing and clustering), based on one from scverse-tutorials pr2901 I Virshup; Overhauled Tutorials page, and added new How to section to docs pr2901 I Virshup; Added a new tutorial on working with dask (Using dask with Scanpy) pr2901 I Gold I Virshup. Bug fixes#. Updated read_visium() such that it can read spaceranger 2.0 files L Lehner; Fix normalize_total() for dask pr2466 P Angerer; Fix setting sc.settings.verbosity in some cases pr2605 P Angerer; Fix all remaining pandas warnings pr2789 P Angerer; Fix some annoying plotting warnings around violin plots pr2844 P Angerer; Scanpy now has a test job which tests against the minumum versions of the dependencies. In the process of implementing this, many bugs associated with using older versions of pandas, anndata, numpy, and matplotlib were fixed. pr2816 I Virshup; Fix warnings caused by internal usage of pandas.DataFrame.stack with pandas>=2.1 pr2864I Virshup; scanpy.get.aggregate() now always returns numpy.ndarray pr2893 S Dicks; Removes self from array of neighbors for use_approx_neighbors = True in scrublet() pr2896S Dicks; Compatibility with scipy 1.13 pr2943 I Virshup; Fix use of dendrogram() on highly correlated low precision data pr2928 P Angerer; Fix pytest deprecation warning pr2879 P Angerer. Development Process#.",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:17825,Update,Updated,17825,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['Update'],['Updated']
Deployability,"mony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x f",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9267,release,release,9267,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,3,['release'],['release']
Deployability,"mony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Documentation. Contents . Building the docs; Adding to the docs; docstrings format; Plots in docstrings; Params section; Returns section; Examples. Documentation#. Building the docs#; To build the docs, run hatch run docs:build.; Afterwards, you can run hatch run docs:open to open docs/_build/html/index.html.; Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you’ve updated the docs.; If docs are not updating the way you expect, first try “force reloading” your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache (hatch run docs:clean) and try building them again. Adding to the docs#; For any user-visible changes, please make sure a note has been added to the release notes using hatch run towncrier:create.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts.; Once you’ve added a new function to the documentation, you’ll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to docs/api.md under a relevant heading.; For tutorials and more in depth examples, consider adding a notebook to the scanpy-tutorials repository.; The tutorials are tied to this repository via a submodule.; To update the submodule, run git submodule update --remote from the root of the repositor",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:9658,update,updated,9658,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,1,['update'],['updated']
Deployability,"more than max_fraction of the total counts; in at least one cell. The not-excluded genes will sum up to; target_sum. Providing this argument when adata.X is a Array; will incur blocking .compute() calls on the array. max_fraction float (default: 0.05)If exclude_highly_expressed=True, consider cells as highly expressed; that have more counts than max_fraction of the original total counts; in at least one cell. key_added str | None (default: None)Name of the field in adata.obs where the normalization factor is; stored. layer str | None (default: None)Layer to normalize instead of X. If None, X is normalized. inplace bool (default: True)Whether to update adata or return dictionary with normalized copies of; adata.X and adata.layers. copy bool (default: False)Whether to modify copied input object. Not compatible with inplace=False. Return type:; AnnData | dict[str, ndarray] | None. Returns:; Returns dictionary with normalized copies of adata.X and adata.layers; or updates adata with normalized version of the original; adata.X and adata.layers, depending on inplace. Example; >>> import sys; >>> from anndata import AnnData; >>> import scanpy as sc; >>> sc.settings.verbosity = 'info'; >>> sc.settings.logfile = sys.stdout # for doctests; >>> np.set_printoptions(precision=2); >>> adata = AnnData(np.array([; ... [3, 3, 3, 6, 6],; ... [1, 1, 1, 2, 2],; ... [1, 22, 1, 2, 2],; ... ], dtype='float32')); >>> adata.X; array([[ 3., 3., 3., 6., 6.],; [ 1., 1., 1., 2., 2.],; [ 1., 22., 1., 2., 2.]], dtype=float32); >>> X_norm = sc.pp.normalize_total(adata, target_sum=1, inplace=False)['X']; normalizing counts per cell; finished (0:00:00); >>> X_norm; array([[0.14, 0.14, 0.14, 0.29, 0.29],; [0.14, 0.14, 0.14, 0.29, 0.29],; [0.04, 0.79, 0.04, 0.07, 0.07]], dtype=float32); >>> X_norm = sc.pp.normalize_total(; ... adata, target_sum=1, exclude_highly_expressed=True,; ... max_fraction=0.2, inplace=False; ... )['X']; normalizing counts per cell. The following highly-expressed genes are not c",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_total.html:11866,update,updates,11866,en/stable/generated/scanpy.pp.normalize_total.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_total.html,1,['update'],['updates']
Deployability,"n; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Preprocessing: PP. Contents . Data integration; Sample demultiplexing; Imputation. Preprocessing: PP#. Data integration#. pp.bbknn(adata, *[, batch_key, use_rep, ...]); Batch balanced kNN [Polański et al., 2019]. pp.harmony_integrate(adata, key, *[, basis, ...]); Use harmonypy [Korsunsky et al., 2019] to integrate different experiments. pp.mnn_correct(*datas[, var_index, ...]); Correct batch effects by matching mutual nearest neighbors [Haghverdi et al., 2018] [Kang, 2018]. pp.scanorama_integrate(adata, key, *[, ...]); Use Scanorama [Hie et al., 2019] to integrate different experiments. Sample demultiplexing#. pp.hashsolo(adata, cell_hashing_columns, *); Probabilistic demultiplexing of cell hashing data using HashSolo [Bernstein et al., 2020]. Imputation#; Note that the fundamental limitations of imputation are still under debate. pp.dca(adata[, mode, ae_type, ...]); Deep count autoencoder [Eraslan et al., 2019]. pp.magic(adata[, name_list, knn, decay, ...]); Markov Affinity-based Graph Imputation of Cells (MAGIC) API [van Dijk et al., 2018",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html:9260,integrat,integration,9260,en/stable/external/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html,1,['integrat'],['integration']
Deployability,"nal.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.exporting.spring_project. Contents . spring_project(). scanpy.external.exporting.spring_project#. scanpy.external.exporting.spring_project(adata, project_dir, embedding_method, *, subplot_name=None, cell_groupings=None, custom_color_tracks=None, total_counts_key='n_counts', neighbors_key=None, overwrite=False)[source]#; Exports to a SPRING project directory [Weinreb et al., 2017].; Visualize annotation present in adata. By default, export all gene expression data; from adata.raw and categorical and continuous annotations present in adata.obs.; See SPRING or Weinreb et al. [2017] for details. Parameters:. adata AnnDataAnnotated data matrix: adata.uns['neighbors'] needs to; be present. project_dir Path | strPath to directory for exported SPRING files. embedding_method strName of a 2-D embedding in adata.obsm. subplot_name str | None (default: None)Name of subplot folder to be created at project_dir+""/""+subplot_name. cell_groupings str | Iterable[str] | None (default: None)Instead of importing all categorical annotations when None,; pass a list of keys for adata.obs. custom_color_tracks str | Iterable[str] | None (default: None)Specify specific adata.obs keys for continuous coloring. total_counts_key str (default: 'n_counts')Name of key for total transcript counts in adata.obs. overwrite bool (default: False)When True, existing counts matrices in project_dir are overwritten. Return type:; None. Examples; See this tutorial. previous; Exporting. next; scanpy.external.exporting.cellbrowser. Contents; . spring_project(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.spring_project.html:10444,continuous,continuous,10444,en/stable/generated/scanpy.external.exporting.spring_project.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.spring_project.html,1,['continuous'],['continuous']
Deployability,"nal.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9367,release,release,9367,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,2,['release'],['release']
Deployability,"nal.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.log1p. Contents . log1p(). scanpy.pp.log1p#. scanpy.pp.log1p(data, *, base=None, copy=False, chunked=None, chunk_size=None, layer=None, obsm=None)[source]#; Logarithmize the data matrix.; Computes \(X = \log(X + 1)\),; where \(log\) denotes the natural logarithm unless a different base is given. Parameters:. data AnnData | ndarray | spmatrixThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. base Number | None (default: None)Base of the logarithm. Natural logarithm is used by default. copy bool (default: False)If an AnnData is passed, determines whether a copy; is returned. chunked bool | None (default: None)Process the data matrix in chunks, which will save memory.; Applies only to AnnData. chunk_size int | None (default: None)n_obs of the chunks to process the data in. layer str | None (default: None)Entry of layers to transform. obsm str | None (default: None)Entry of obsm to transform. Return type:; AnnData | ndarray | spmatrix | None. Returns:; Returns or updates data, depending on copy. previous; scanpy.pp.highly_variable_genes. next; scanpy.pp.pca. Contents; . log1p(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.log1p.html:10258,update,updates,10258,en/stable/generated/scanpy.pp.log1p.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.log1p.html,1,['update'],['updates']
Deployability,"ndbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Installation. Contents . Development Version; Docker; Troubleshooting. Installation#; To use scanpy from another project, install it using your favourite environment manager:. Hatch (recommended)Pip/PyPICondaAdding scanpy[leiden] to your dependencies is enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; $ gh repo clone scverse/scanpy; $ cd scanpy. Hatch (recommended)Pip/PyPICondaTo use one of the predefined Hatch environments in hatch.toml,; run either hatch test [args] or hatch run [env:]command [...args], e.g.:; $ hatch test -p # run tests in parallel; $ hatch run docs:build # build docs; $ hatch run towncrier:create # create changelog entry. If you are using pip>=21.3, an editable install can be made:; $ python -m venv .venv; $ source .venv/bin/activate; $ pip install -e '.[dev,test]'. If you want to let conda handle the installations ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:9799,install,install,9799,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,1,['install'],['install']
Deployability,"ne; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Versioning. Contents . Semantic versioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. 1.7.x for the 1.7 release series).; For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs are assigned a patch version milestone such as 1.7.4.; Once the PR is approved and merged, the bot will attempt to make a backport and open a PR.; This will sometimes requi",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:9657,release,release,9657,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,1,['release'],['release']
Deployability,"nfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.MAX_NUM_CATEGORIES. Contents . DotPlot.MAX_NUM_CATEGORIES. scanpy.pl.DotPlot.MAX_NUM_CATEGORIES#. DotPlot.MAX_NUM_CATEGORIES = 500[source]#. previous; scanpy.pl.DotPlot.DEFAULT_WSPACE. next; scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT. Contents; . DotPlot.MAX_NUM_CATEGORIES. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.MAX_NUM_CATEGORIES.html:9070,Release,Release,9070,en/stable/api/generated/classes/scanpy.pl.DotPlot.MAX_NUM_CATEGORIES.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.MAX_NUM_CATEGORIES.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"nfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.connectivities. Contents . Neighbors.connectivities. scanpy.Neighbors.connectivities#. property Neighbors.connectivities: ndarray | csr_matrix | None[source]#; Connectivities between data points (sparse matrix). previous; scanpy.Neighbors. next; scanpy.Neighbors.distances. Contents; . Neighbors.connectivities. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.connectivities.html:9065,Release,Release,9065,en/stable/generated/scanpy.Neighbors.connectivities.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.connectivities.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"nfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM. Contents . StackedViolin.DEFAULT_DENSITY_NORM. scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM#. StackedViolin.DEFAULT_DENSITY_NORM: Literal['area', 'count', 'width'] = 'width'[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_CUT. next; scanpy.pl.StackedViolin.DEFAULT_INNER. Contents; . StackedViolin.DEFAULT_DENSITY_NORM. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html:9078,Release,Release,9078,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ng a release. Contributors; References. .md. .pdf. API. API#; Import Scanpy as:; import scanpy as sc. Note; Additional functionality is available in the broader ecosystem, with some tools being wrapped in the scanpy.external module. Preprocessing: pp; Basic Preprocessing; Recipes; Batch effect correction; Doublet detection; Neighbors. Tools: tl; Embeddings; Clustering and trajectory inference; Data integration; Marker genes; Gene scores, Cell cycle; Simulations. Plotting: pl; Generic; Classes; Preprocessing; Tools. Reading; scanpy.read; scanpy.read_10x_h5; scanpy.read_10x_mtx; scanpy.read_visium; scanpy.read_h5ad; scanpy.read_csv; scanpy.read_excel; scanpy.read_hdf; scanpy.read_loom; scanpy.read_mtx; scanpy.read_text; scanpy.read_umi_tools. Get object from AnnData: get; scanpy.get.obs_df; scanpy.get.var_df; scanpy.get.rank_genes_groups_df; scanpy.get.aggregate. Queries; scanpy.queries.biomart_annotations; scanpy.queries.gene_coordinates; scanpy.queries.mitochondrial_genes; scanpy.queries.enrich. Metrics; scanpy.metrics.confusion_matrix; scanpy.metrics.gearys_c; scanpy.metrics.morans_i. Experimental; scanpy.experimental.pp.normalize_pearson_residuals; scanpy.experimental.pp.normalize_pearson_residuals_pca; scanpy.experimental.pp.highly_variable_genes; scanpy.experimental.pp.recipe_pearson_residuals. Classes; scanpy.Neighbors. Settings; scanpy.set_figure_params; scanpy._settings.ScanpyConfig; scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. previous; Plotting with Marsilea. next; Preprocessing: pp. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/index.html:10892,toggle,toggleswitch,10892,en/stable/api/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/index.html,1,['toggle'],['toggleswitch']
Deployability,ngs.ScanpyConfig.cache_compression; scanpy._settings.ScanpyConfig.cachedir; scanpy._settings.ScanpyConfig.categories_to_ignore; scanpy._settings.ScanpyConfig.datasetdir; scanpy._settings.ScanpyConfig.figdir; scanpy._settings.ScanpyConfig.file_format_data; scanpy._settings.ScanpyConfig.file_format_figs; scanpy._settings.ScanpyConfig.logfile; scanpy._settings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contribut,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/community.html:8087,toggle,toggleswitch,8087,en/stable/community.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/community.html,312,['toggle'],['toggleswitch']
Deployability,"ngs.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_DOT_MAX. Contents . DotPlot.DEFAULT_DOT_MAX. scanpy.pl.DotPlot.DEFAULT_DOT_MAX#. DotPlot.DEFAULT_DOT_MAX = None[source]#. previous; scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW. next; scanpy.pl.DotPlot.DEFAULT_DOT_MIN. Contents; . DotPlot.DEFAULT_DOT_MAX. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MAX.html:9067,Release,Release,9067,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MAX.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_MAX.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ngs.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_mtx. Contents . read_mtx(). scanpy.read_mtx#. scanpy.read_mtx(filename, dtype='float32')[source]#; Read .mtx file. Parameters:. filename PathLikeThe filename. dtype str (default: 'float32')Numpy data type. Return type:; AnnData. previous; scanpy.read_loom. next; scanpy.read_text. Contents; . read_mtx(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_mtx.html:9049,Release,Release,9049,en/stable/generated/scanpy.read_mtx.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_mtx.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ngs.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.plot_suffix. Contents . ScanpyConfig.plot_suffix. scanpy._settings.ScanpyConfig.plot_suffix#. property ScanpyConfig.plot_suffix: str[source]#; Global suffix that is appended to figure filenames. previous; scanpy._settings.ScanpyConfig.n_jobs. next; scanpy._settings.ScanpyConfig.verbosity. Contents; . ScanpyConfig.plot_suffix. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.plot_suffix.html:9075,Release,Release,9075,en/stable/generated/scanpy._settings.ScanpyConfig.plot_suffix.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.plot_suffix.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"nishing from things like .uns['log1p'] pr2546 SP Shen; Depend on igraph instead of python-igraph pr2566 P Angerer; rank_genes_groups() now handles unsorted groups as intended pr2589 S Dicks; rank_genes_groups_df() now works for rank_genes_groups() with method=""logreg"" pr2601 S Dicks; scanpy.tl._utils._choose_representation now works with n_pcs if bigger than settings.N_PCS pr2610 S Dicks. 1.9.3 2023-03-02#. Bug fixes#. Variety of fixes against pandas 2.0.0rc0 pr2434 I Virshup. 1.9.2 2023-02-16#. Bug fixes#. highly_variable_genes() layer argument now works in tandem with batches pr2302 D Schaumont; highly_variable_genes() with flavor='cell_ranger' now handles the case in issue2230 where the number of calculated dispersions is less than n_top_genes pr2231 L Zappia; Fix compatibility with matplotlib 3.7 pr2414 I Virshup P Fisher; Fix scrublet numpy matrix compatibility issue pr2395 A Gayoso. 1.9.1 2022-04-05#. Bug fixes#. normalize_total() works when Dask is not installed pr2209 R Cannoodt; Fix embedding plots by bumping matplotlib dependency to version 3.4 pr2212 I Virshup. 1.9.0 2022-04-01#. Tutorials#. New tutorial on the usage of Pearson Residuals: How to preprocess UMI count data with analytic Pearson residuals J Lause, G Palla; Materials and recordings for Scanpy workshops by Maren Büttner. Experimental module#. Added scanpy.experimental module! Currently contains functionality related to pearson residuals in scanpy.experimental.pp pr1715 J Lause, G Palla, I Virshup. This includes:. normalize_pearson_residuals() for Pearson Residuals normalization; highly_variable_genes() for HVG selection with Pearson Residuals; normalize_pearson_residuals_pca() for Pearson Residuals normalization and dimensionality reduction with PCA; recipe_pearson_residuals() for Pearson Residuals normalization, HVG selection and dimensionality reduction with PCA. Features#. filter_rank_genes_groups() now allows to filter with absolute values of log fold change pr1649 S Rybakov; _choose_repres",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:21863,install,installed,21863,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['install'],['installed']
Deployability,"nored the n_pcs param pr1124 V Bergen; ebi_expression_atlas() which contained some out-of-date URLs pr1102 I Virshup; ingest() for UMAP 0.4 pr1165 S Rybakov; louvain() for Louvain 0.6 pr1197 I Virshup; highly_variable_genes() which could lead to incorrect results when the batch_key argument was used pr1180 G Eraslan; ingest() where an inconsistent number of neighbors was used pr1111 S Rybakov. Version 1.4#. 1.4.6 2020-03-17#. Functionality in external#. sam() self-assembling manifolds [Tarashansky et al., 2019] pr903 A Tarashansky; harmony_timeseries() for trajectory inference on discrete time points pr994 A Mousa; wishbone() for trajectory inference (bifurcations) pr1063 A Mousa. Code design#. violin now reads .uns['colors_...'] pr1029 michalk8. Bug fixes#. adapt ingest() for UMAP 0.4 pr1038 pr1106 S Rybakov; compat with matplotlib 3.1 and 3.2 pr1090 I Virshup, P Angerer; fix PAGA for new igraph pr1037 P Angerer; fix rapids compat of louvain pr1079 LouisFaure. 1.4.5 2019-12-30#; Please install scanpy==1.4.5.post3 instead of scanpy==1.4.5. New functionality#. ingest() maps labels and embeddings of reference data to new data Integrating data using ingest and BBKNN pr651 S Rybakov, A Wolf; queries recieved many updates including enrichment through gprofiler and more advanced biomart queries pr467 I Virshup; set_figure_params() allows setting figsize and accepts facecolor='white', useful for working in dark mode A Wolf. Code design#. downsample_counts now always preserves the dtype of it’s input, instead of converting floats to ints pr865 I Virshup; allow specifying a base for log1p() pr931 G Eraslan; run neighbors on a GPU using rapids pr830 T White; param docs from typed params P Angerer; embedding_density() now only takes one positional argument; similar for embedding_density(), which gains a param groupby pr965 A Wolf; webpage overhaul, ecosystem page, release notes, tutorials overhaul pr960 pr966 A Wolf. Warning. changed default solver in pca() from auto to arpack",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:40516,install,install,40516,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['install'],['install']
Deployability,"npy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.getdoc. Contents . StackedViolin.getdoc(). scanpy.pl.StackedViolin.getdoc#. StackedViolin.getdoc() → str | None[source]#. previous; scanpy.pl.StackedViolin.get_axes. next; scanpy.pl.StackedViolin.legend. Contents; . StackedViolin.getdoc(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html:9064,Release,Release,9064,en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.getdoc.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"npy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES. Contents . MatrixPlot.MAX_NUM_CATEGORIES. scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES#. MatrixPlot.MAX_NUM_CATEGORIES = 500[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_WSPACE. next; scanpy.pl.MatrixPlot.MIN_FIGURE_HEIGHT. Contents; . MatrixPlot.MAX_NUM_CATEGORIES. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html:9073,Release,Release,9073,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"npy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_INNER. Contents . StackedViolin.DEFAULT_INNER. scanpy.pl.StackedViolin.DEFAULT_INNER#. StackedViolin.DEFAULT_INNER = None[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_DENSITY_NORM. next; scanpy.pl.StackedViolin.DEFAULT_JITTER. Contents; . StackedViolin.DEFAULT_INNER. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html:9071,Release,Release,9071,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_INNER.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"npyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.categories_to_ignore. Contents . ScanpyConfig.categories_to_ignore. scanpy._settings.ScanpyConfig.categories_to_ignore#. property ScanpyConfig.categories_to_ignore: list[str][source]#; Categories that are omitted in plotting etc. previous; scanpy._settings.ScanpyConfig.cachedir. next; scanpy._settings.ScanpyConfig.datasetdir. Contents; . ScanpyConfig.categories_to_ignore. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.categories_to_ignore.html:9084,Release,Release,9084,en/stable/generated/scanpy._settings.ScanpyConfig.categories_to_ignore.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.categories_to_ignore.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"npyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Basics. Basics#. Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. previous; Tutorials. next; Preprocessing and clustering. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html:9040,Release,Release,9040,en/stable/tutorials/basics/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/index.html,3,"['Integrat', 'Release', 'release']","['Integrating', 'Release', 'release']"
Deployability,"npyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.getdoc. Contents . MatrixPlot.getdoc(). scanpy.pl.MatrixPlot.getdoc#. MatrixPlot.getdoc() → str | None[source]#. previous; scanpy.pl.MatrixPlot.get_axes. next; scanpy.pl.MatrixPlot.legend. Contents; . MatrixPlot.getdoc(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html:9061,Release,Release,9061,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.getdoc.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"npyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.N_PCS. Contents . ScanpyConfig.N_PCS. scanpy._settings.ScanpyConfig.N_PCS#. ScanpyConfig.N_PCS: int[source]#; Default number of principal components to use. previous; scanpy._settings.ScanpyConfig.writedir. next; scanpy._settings.ScanpyConfig.set_figure_params. Contents; . ScanpyConfig.N_PCS. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.N_PCS.html:9069,Release,Release,9069,en/stable/generated/scanpy._settings.ScanpyConfig.N_PCS.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.N_PCS.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"npyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT. Contents . StackedViolin.MIN_FIGURE_HEIGHT. scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT#. StackedViolin.MIN_FIGURE_HEIGHT = 2.5[source]#. previous; scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES. next; scanpy.pl.StackedViolin.add_dendrogram. Contents; . StackedViolin.MIN_FIGURE_HEIGHT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html:9075,Release,Release,9075,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"npyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.datasetdir. Contents . ScanpyConfig.datasetdir. scanpy._settings.ScanpyConfig.datasetdir#. property ScanpyConfig.datasetdir: Path[source]#; Directory for example datasets (default './data/'). previous; scanpy._settings.ScanpyConfig.categories_to_ignore. next; scanpy._settings.ScanpyConfig.figdir. Contents; . ScanpyConfig.datasetdir. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.datasetdir.html:9074,Release,Release,9074,en/stable/generated/scanpy._settings.ScanpyConfig.datasetdir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.datasetdir.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ns or variables axes.; Color the plot using annotations of observations (.obs), variables; (.var) or expression of genes (.var_names). Parameters:. adata AnnDataAnnotated data matrix. x str | None (default: None)x coordinate. y str | None (default: None)y coordinate. color str | Collection[str] | None (default: None)Keys for annotations of observations/cells or variables/genes,; or a hex color specification, e.g.,; 'ann1', '#fe57a1', or ['ann1', 'ann2']. use_raw bool | None (default: None)Whether to use raw attribute of adata. Defaults to True if .raw is present. layers str | Collection[str] | None (default: None)Use the layers attribute of adata if present: specify the layer for; x, y and color. If layers is a string, then it is expanded to; (layers, layers, layers). basis Optional[Literal['pca', 'tsne', 'umap', 'diffmap', 'draw_graph_fr']] (default: None)String that denotes a plotting tool that computed coordinates. sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Iterable[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Collection[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center', 'center']] (default: 'right margin')Location of legend, either ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html:10709,continuous,continuous,10709,en/stable/generated/scanpy.pl.scatter.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html,1,['continuous'],['continuous']
Deployability,"ntegrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tools: tl. Contents . Embeddings. Clustering and trajectory inference; Data integration; Marker genes; Gene scores, Cell cycle; Simulations. Tools: tl#; Any transformation of the data matrix that is not preprocessing. In contrast to a preprocessing function, a tool usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. Embeddings#. pp.pca; Principal component analysis [Pedregosa et al., 2011]. tl.tsne; t-SNE [Amir et al., 2013, Pedregosa et al., 2011, van der Maaten and Hinton, 2008]. tl.umap; Embed the neighborhood graph using UMAP [McInnes et al., 2018]. tl.draw_graph; Force-directed graph drawing [Chippada, 2018, Islam et al., 2011, Jacomy et al., 2014]. tl.diffmap; Diffusion Maps [Coifman et al., 2005, Haghverdi et al., 2015, Wolf et al., 2018]. Compute densities on embeddings. tl.embedding_density; Calculate the density of cells in an embedding (per condition). Clustering and trajectory inference#. tl.leiden; Cluster cells into subgroups [Traag et al., 2019]. tl.louvain; Cluster cells ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/tools.html:9293,integrat,integration,9293,en/stable/api/tools.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/tools.html,1,['integrat'],['integration']
Deployability,"nts.; Harmony [Korsunsky et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments. This function uses the python; port of Harmony, harmonypy, to integrate single-cell data; stored in an AnnData object. As Harmony works by adjusting the; principal components, this function should be run after performing; PCA but before computing the neighbor graph, as illustrated in the; example below. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_pca_harmony')The name of the field in adata.obsm where the adjusted PCA; table will be stored after running this function. Defaults to; X_pca_harmony. kwargsAny additional arguments will be passed to; harmonypy.run_harmony(). Returns:; Updates adata with the field adata.obsm[obsm_out_field],; containing principal components adjusted by Harmony such that; different experiments are integrated. Example; First, load libraries and example dataset, and preprocess.; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.recipe_zheng17(adata); >>> sc.pp.pca(adata). We now arbitrarily assign a batch metadata variable to each cell; for the sake of example, but during real usage there would already; be a column in adata.obs giving the experiment each cell came; from.; >>> adata.obs['batch'] = 1350*['a'] + 1350*['b']. Finally, run harmony. Afterwards, there will be a new table in; adata.obsm containing the adjusted PC’s.; >>> sce.pp.harmony_integrate(adata, 'batch'); >>> 'X_pca_harmony' in adata.obsm; True. previous; scanpy.external.pp.bbknn. next; scanpy.external.pp.mnn_correct. Contents; . harmony_integrate(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html:10679,integrat,integrated,10679,en/stable/generated/scanpy.external.pp.harmony_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html,1,['integrat'],['integrated']
Deployability,"o a valid layer name, then the layer is plotted. layer; takes precedence over use_raw. layout Optional[Literal['fr', 'drl', 'kk', 'grid_fr', 'lgl', 'rt', 'rt_circular', 'fa']] (default: None)One of the draw_graph() layouts.; By default, the last computed layout is used. edges bool (default: False)Show edges. edges_width float (default: 0.1)Width of edges. edges_color str | Sequence[float] | Sequence[str] (default: 'grey')Color of edges. See draw_networkx_edges(). neighbors_key str | None (default: None)Where to look for neighbors connectivities.; If not specified, this looks .obsp[‘connectivities’] for connectivities; (default storage place for pp.neighbors).; If specified, this looks; .obsp[.uns[neighbors_key][‘connectivities_key’]] for connectivities. arrows bool (default: False)Show arrows (deprecated in favour of scvelo.pl.velocity_embedding). arrows_kwds Mapping[str, Any] | None (default: None)Passed to quiver(). sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center'",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.draw_graph.html:11893,continuous,continuous,11893,en/stable/api/generated/scanpy.pl.draw_graph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.draw_graph.html,1,['continuous'],['continuous']
Deployability,"obs × n_vars.; Rows correspond to cells and columns to genes. theta float (default: 100)The negative binomial overdispersion parameter theta for Pearson residuals.; Higher values correspond to less overdispersion (var = mean + mean^2/theta), and theta=np.inf corresponds to a Poisson model. clip float | None (default: None)Determines if and how residuals are clipped:. If None, residuals are clipped to the interval [-sqrt(n_obs), sqrt(n_obs)], where n_obs is the number of cells in the dataset (default behavior).; If any scalar c, residuals are clipped to the interval [-c, c]. Set clip=np.inf for no clipping. check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. layer str | None (default: None)Layer to use as input instead of X. If None, X is used. inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. copy bool (default: False)If True, the function runs on a copy of the input object and returns the; modified copy. Otherwise, the input object is modified direcly. Not compatible; with inplace=False. Return type:; AnnData | dict[str, ndarray] | None. Returns:; If inplace=True, adata.X or the selected layer in adata.layers is updated; with the normalized values. adata.uns is updated with the following fields.; If inplace=False, the same fields are returned as dictionary with the; normalized values in results_dict['X']. .uns['pearson_residuals_normalization']['theta']The used value of the overdisperion parameter theta. .uns['pearson_residuals_normalization']['clip']The used value of the clipping parameter. .uns['pearson_residuals_normalization']['computed_on']The name of the layer on which the residuals were computed. previous; Experimental. next; scanpy.experimental.pp.normalize_pears",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html:10927,update,update,10927,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html,1,['update'],['update']
Deployability,"observation (cell) has a total; count equal to the median of total counts for observations (cells); before normalization. exclude_highly_expressed bool (default: False)Exclude (very) highly expressed genes for the computation of the; normalization factor (size factor) for each cell. A gene is considered; highly expressed, if it has more than max_fraction of the total counts; in at least one cell. The not-excluded genes will sum up to; target_sum. Providing this argument when adata.X is a Array; will incur blocking .compute() calls on the array. max_fraction float (default: 0.05)If exclude_highly_expressed=True, consider cells as highly expressed; that have more counts than max_fraction of the original total counts; in at least one cell. key_added str | None (default: None)Name of the field in adata.obs where the normalization factor is; stored. layer str | None (default: None)Layer to normalize instead of X. If None, X is normalized. inplace bool (default: True)Whether to update adata or return dictionary with normalized copies of; adata.X and adata.layers. copy bool (default: False)Whether to modify copied input object. Not compatible with inplace=False. Return type:; AnnData | dict[str, ndarray] | None. Returns:; Returns dictionary with normalized copies of adata.X and adata.layers; or updates adata with normalized version of the original; adata.X and adata.layers, depending on inplace. Example; >>> import sys; >>> from anndata import AnnData; >>> import scanpy as sc; >>> sc.settings.verbosity = 'info'; >>> sc.settings.logfile = sys.stdout # for doctests; >>> np.set_printoptions(precision=2); >>> adata = AnnData(np.array([; ... [3, 3, 3, 6, 6],; ... [1, 1, 1, 2, 2],; ... [1, 22, 1, 2, 2],; ... ], dtype='float32')); >>> adata.X; array([[ 3., 3., 3., 6., 6.],; [ 1., 1., 1., 2., 2.],; [ 1., 22., 1., 2., 2.]], dtype=float32); >>> X_norm = sc.pp.normalize_total(adata, target_sum=1, inplace=False)['X']; normalizing counts per cell; finished (0:00:00); >>> X_norm; array([",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_total.html:11544,update,update,11544,en/stable/generated/scanpy.pp.normalize_total.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_total.html,1,['update'],['update']
Deployability,"ograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case o",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9598,release,release,9598,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,4,"['patch', 'release']","['patch', 'release']"
Deployability,"ograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.ingest. Contents . ingest(). scanpy.tl.ingest#. scanpy.tl.ingest(adata, adata_ref, *, obs=None, embedding_method=('umap', 'pca'), labeling_method='knn', neighbors_key=None, inplace=True, **kwargs)[source]#; Map labels and embeddings from reference data to new data.; Integrating data using ingest and BBKNN; Integrates embeddings and annotations of an adata with a reference dataset; adata_ref through projecting on a PCA (or alternate; model) that has been fitted on the reference data. The function uses a knn; classifier for mapping labels and the UMAP package [McInnes et al., 2018] for mapping; the embeddings. Note; We refer to this asymmetric dataset integration as ingesting; annotations from reference data to new data. This is different from; learning a joint representation that integrates both datasets in an; unbiased way, as CCA (e.g. in Seurat) or a conditional VAE (e.g. in; scVI) would do. You need to run neighbors() on adata_ref before; passing it. Parameters:. adata AnnDataThe annotated data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes. This is the dataset without labels and; embeddings. adata_ref AnnDataThe annotated data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes.; Variables (n_vars and var_names) of adata_ref should be the same; as in adata.; This is the dataset with labels an",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html:9502,Integrat,Integrating,9502,en/stable/generated/scanpy.tl.ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html,2,['Integrat'],"['Integrates', 'Integrating']"
Deployability,"oi.org/10.1073/pnas.0500334102, doi:10.1073/pnas.0500334102. [CN06]; G. Csárdi and T. Nepusz. The igraph software package for complex network research. InterJournal Complex Systems, pages 1695, 2006. URL: https://www.bibsonomy.org/bibtex/252e3e774bac8424cc9a3845a9c597344/lantiq. [ESM+19]; Gökcen Eraslan, Lukas M. Simon, Maria Mircea, Nikola S. Mueller, and Fabian J. Theis. Single-cell rna-seq denoising using a deep count autoencoder. Nature Communications, jan 2019. URL: https://doi.org/10.1038/s41467-018-07931-2, doi:10.1038/s41467-018-07931-2. [Fec18]; Ron Fechtner. Pypairs - a python scrna-seq classifier. rfechtner/pypairs, 2018. URL: rfechtner/pypairs. [FR91]; Thomas M. J. Fruchterman and Edward M. Reingold. Graph drawing by force‐directed placement. Software: Practice and Experience, 21(11):1129–1164, nov 1991. URL: https://doi.org/10.1002/spe.4380211102, doi:10.1002/spe.4380211102. [GCC00]; Timothy S. Gardner, Charles R. Cantor, and James J. Collins. Construction of a genetic toggle switch in escherichia coli. Nature, 403(6767):339–342, jan 2000. URL: https://doi.org/10.1038/35002131, doi:10.1038/35002131. [HBT15]; Laleh Haghverdi, Florian Buettner, and Fabian J. Theis. Diffusion maps for high-dimensional single-cell analysis of differentiation data. Bioinformatics, 31(18):2989–2998, may 2015. URL: https://doi.org/10.1093/bioinformatics/btv325, doi:10.1093/bioinformatics/btv325. [HBW+16]; Laleh Haghverdi, Maren Büttner, F Alexander Wolf, Florian Buettner, and Fabian J Theis. Diffusion pseudotime robustly reconstructs lineage branching. Nature Methods, 13(10):845–848, aug 2016. URL: https://doi.org/10.1038/nmeth.3971, doi:10.1038/nmeth.3971. [HLMM18]; Laleh Haghverdi, Aaron T L Lun, Michael D Morgan, and John C Marioni. Batch effects in single-cell rna-sequencing data are corrected by matching mutual nearest neighbors. Nature Biotechnology, 36(5):421–427, apr 2018. URL: https://doi.org/10.1038/nbt.4091, doi:10.1038/nbt.4091. [HBB19]; Brian Hie, Bryan Bryson, and",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:13260,toggle,toggle,13260,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['toggle'],['toggle']
Deployability,"oject; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Documentation. Contents . Building the docs; Adding to the docs; docstrings format; Plots in docstrings; Params section; Returns section; Examples. Documentation#. Building the docs#; To build the docs, run hatch run docs:build.; Afterwards, you can run hatch run docs:open to open docs/_build/html/index.html.; Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you’ve updated the docs.; If docs are not updating the way you expect, first try “force reloading” your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache (hatch run docs:clean) and try building them again. Adding to the docs#; For any user-visible changes, please make sure a note has been added to the release notes using hatch run towncrier:create.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts.; Once you’ve added a new function to the documentation, you’ll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to docs/api.md under a relevant heading.; For tutorials and more in depth examples, consider adding a notebook to the scanpy-tutorials repository.; The tutorials are tied to this repository via a submodule.; To update the submodule, run git submodule update --remote from the root of the repository.; Subsequently, commit and push the changes in a PR.; This should be done before each release to ensure the tutorials are up to date. docstrings format#; We use the numpydoc style for writing docstrings.; We’d primarily suggest looking at existing docstrings for examples, but the napolean guide to numpy style docstrings is also a great source.; If y",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:10016,release,release,10016,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,1,['release'],['release']
Deployability,"ontributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fbpca NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; intervaltree NA; ipykernel 6.28.0; ipywidgets 8.1.1; isoduration NA; jedi 0.19.1; jinja2 3.1.3; joblib 1.3.2; json5 NA; jsonpointer 2.4; jsonschema ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:10133,install,install,10133,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['install'],['install']
Deployability,"ore_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integer dense arrays pr1400 I Virshup; Fix docstring formatting for rank_genes_groups() pr1417 P Weiler; Removed PendingDeprecationWarning`s from use of `np.matrix pr1424 P Weiler; Fixed indexing byg in ~scanpy.pp.highly_variable_genes pr1456 V Bergen; Fix default number of genes for marker_genes_overlap pr1464 MD Luecken; Fixed passing groupby and dendrogram_key to dendrogram() pr1465 M Varma; Fixed download path of pbmc3k_processed pr1472 D Strobl; Better error message when computing DE with a group of size 1 pr1490 J Manning; Update cugraph API usage for v0.16 pr1494 R Ilango; Fixed marker_gene_overlap default value for top_n_markers pr1464 MD Luecken; Pass random_state to RAPIDs UMAP pr1474 C Nolet; Fixed anndata version requirement for concat() (re-exported from scanpy as sc.concat) pr1491 I Virshup; Fixed the width of the progress bar when downloading data pr1507 M Klein; Updated link for moignard15 dataset pr1542 I Virshup; Fixed bug where calling set_figure_params could block if IPython was installed, but not used. pr1547 I Virshup; violin() no longer fails if .raw not present pr1548 I Virshup; spatial() refactoring and better handling of spatial data pr1512 G Palla; pca() works with chunked=True again pr1592 I Virshup; ingest() now works with umap-learn 0.5.0 pr1601 S Rybakov. Version 1.6#. 1.6.0 2020-08-15#; This release includes an overhaul of dotplot(), matrixplot(), and stacked_violin() (pr1210 F Ramirez), and of the internals of rank_genes_groups() (pr1156 S Rybakov). Overhaul of dotplot(), matrixplot(), and stacked_violin() pr1210 F Ramirez#. An overhauled tutorial Core plotting functions.; New plotting classes can be accessed directly (e.g., DotPlot) or using the return_fig param.; It is possible to plot log fold change and p-values in the rank_genes_groups_dotplot() family of functions.; Added ax parameter which allows embedding the plot in other images.; Added opti",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:33629,Update,Updated,33629,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,"['Update', 'install']","['Updated', 'installed']"
Deployability,"orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isin([""1"", ""2"", ""3""])]. The following plot is a bit hard to read, hence, move on to confusion matrices below. sc.pl.umap(adata_query, color=[""batch"", ""celltype"", ""celltype_orig""], wspace=0.4). Cell types conserved across batches#; Let us first focus on cell types that are conserved with the reference, to simplify reading of the confusion matrix. obs_query = adata_query.obs; # intersected categories; conserved_categories = obs_query.celltype.cat.categories.intersection(; obs_query.celltype_orig.cat.categories; ); # intersect categories; obs_query_conserved = obs_query.loc[; obs_query.celltype.isin(conserved_categories); & obs_query.celltype_orig.isin(conserved_categories); ]; # remove unused categories; obs_query_conserved.celltype.cat.remove_unused_categories(inplace=True); # remove unused c",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:18336,continuous,continuous,18336,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['continuous'],['continuous']
Deployability,"orting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Usage Principles. Contents . Workflow; AnnData. Usage Principles#; Import Scanpy as:; import scanpy as sc. Workflow#; The typical workflow consists of subsequent calls of data analysis tools; in sc.tl, e.g.:; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP. where adata is an AnnData object.; Each of these calls adds annotation to an expression matrix X,; which stores n_obs observations (cells) of n_vars variables (genes).; For each tool, there typically is an associated plotting function in sc.pl:; sc.pl.umap(adata, **plotting_params). If you pass show=False, a Axes instance is returned; and you have all of matplotlib’s detailed configuration possibilities.; To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate inplace on adata and return None –; this also allows to easily transition to out-of-memory pipelines.; If you want to return a copy of the AnnData object; and leave the passed adata unchanged, pass copy=True or inplace=False. AnnData#; Scanpy is based on anndata, which provides the AnnData class. At the most basic level, an AnnData object adata stores; a data matrix adata.X, annotation of observations; adata.obs and variables adata.var as pd.DataFrame and unstructured; annotation adata.uns as dict. Names of observations and; variables can be accessed via adata.obs_names and adata.var_names,; respectively. AnnData objects can be sliced like; dataframes, for example, adata_subset = adata[:, list_of_gene_names].; For more, see this blog post.; To read a data file to an AnnData object, call:; adata = sc.read(filename). to initialize an AnnData object. Possibly add further annotation using, e.g., pd.read_csv:; import pandas as pd; anno = pd.read_csv(filename_sample_annotation); adata.obs['cell_grou",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/usage-principles.html:9967,pipeline,pipelines,9967,en/stable/usage-principles.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/usage-principles.html,2,['pipeline'],['pipelines']
Deployability,"ot.index.isin(counts.columns)]; counts = counts.rename(columns=dict(zip(annot.index, annot[""ensembl_gene_id""]))); adata_cortex = an.AnnData(counts, obs=meta); sc.pp.normalize_total(adata_cortex, inplace=True); sc.pp.log1p(adata_cortex); adata_cortex.write_h5ad(""data/adata_processed.h5ad""). adata_cortex = sc.read(""./data/adata_processed.h5ad""). adata_spatial_anterior.var.set_index(""gene_ids"", inplace=True); adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spatial""][:, 1] < 6000, :; ]; adata_posterior_subset = adata_spatial_posterior[; (adata_spatial_posterior.obsm[""spatial""][:, 1] < 4000); & (adata_spatial_posterior.obsm[""spatial""][:, 0] < 6000),; :,; ]. Run integration with Scanorama. adatas_anterior = [adata_cortex, adata_anterior_subset]; adatas_posterior = [adata_cortex, adata_posterior_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ). At this step, we have integrated each visium dataset in a common em",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:22360,Integrat,Integration,22360,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['Integrat'],['Integration']
Deployability,"ot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.eigen_basis. Contents . Neighbors.eigen_basis. scanpy.Neighbors.eigen_basis#. property Neighbors.eigen_basis: ndarray[source]#; Eigen basis of transition matrix. previous; scanpy.Neighbors.distances_dpt. next; scanpy.Neighbors.eigen_values. Contents; . Neighbors.eigen_basis. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.eigen_basis.html:9062,Release,Release,9062,en/stable/generated/scanpy.Neighbors.eigen_basis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.eigen_basis.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ote; More information and bug reports here. Parameters:. adata AnnDataAnnotated data matrix of shape n_obs × n_vars. Rows correspond to; cells and columns to genes. Rows represent two or more time points,; where replicates of the same time point are consecutive in order. tp strkey name of observation annotation .obs representing time points. Time; points should be categorical of dtype=category. The unique categories for; the categorical will be used as the time points to construct the timepoint; connections. n_neighbors int (default: 30)Number of nearest neighbors for graph construction. n_components int | None (default: 1000)Minimum number of principal components to use. Specify None to use; pre-computed components. The higher the value the better to capture 85% of the; variance. n_jobs int (default: -2)Nearest Neighbors will be computed in parallel using n_jobs. copy bool (default: False)Return a copy instead of writing to adata. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates .obsm, .obsp and .uns with the following:. X_harmony - ndarray (obsm, dtype float)force directed layout. harmony_aff - spmatrix (obsp, dtype float)affinity matrix. harmony_aff_aug - spmatrix (obsp, dtype float)augmented affinity matrix. harmony_timepoint_var - str (uns)The name of the variable passed as tp. harmony_timepoint_connections - ndarray (uns, dtype str)The links between time points. Example; >>> from itertools import product; >>> import pandas as pd; >>> from anndata import AnnData; >>> import scanpy as sc; >>> import scanpy.external as sce. Load AnnData; A sample with real data is available here.; Random data sets of three time points with two replicates each:; >>> adata_ref = sc.datasets.pbmc3k(); >>> start = [596, 615, 1682, 1663, 1409, 1432]; >>> adata = AnnData.concatenate(; ... *(adata_ref[i : i + 1000] for i in start),; ... join=""outer"",; ... batch_key=""sample"",; ... batch_categories=[f""sa{i}_Rep{j}"" for i, j in product((1, 2, 3), (1, 2))],; ...",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:11161,update,updates,11161,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,1,['update'],['updates']
Deployability,"ounts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique"",; keys=[; k; for d in [; adatas_cor[0].uns[""spatial""],; adatas_cor[1].uns[""spatial""],; ]; for k, v in d.items(); ],; index_unique=""-"",; ). sc.pp.neighbors(adata_spatial, use_rep=""X_scanorama""); sc.tl.umap(adata_spatial); sc.tl.leiden(; adata_spatial, key_added=""clusters"", n_iterations=2, flavor=""igraph"", directed=False; ). computing neighbors; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['connectivities']`, weighted adjacency matrix (0:00:02); computing UMAP; finished: added; 'X_umap', UMAP coordinates (adata.obsm) (0:00:06); running Leiden clustering; finished: found 22 clusters and added; 'clusters', the cluster label",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:16652,integrat,integration,16652,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integration']
Deployability,"ource]#; Wishbone identifies bifurcating developmental trajectories from single-cell data; [Setty et al., 2016].; Wishbone is an algorithm for positioning single cells along bifurcating; developmental trajectories with high resolution. Wishbone uses multi-dimensional; single-cell data, such as mass cytometry or RNA-Seq data, as input and orders cells; according to their developmental progression, and it pinpoints bifurcation points; by labeling each cell as pre-bifurcation or as one of two post-bifurcation cell; fates. Note; More information and bug reports here. Parameters:. adata AnnDataAnnotated data matrix. start_cell strDesired start cell from obs_names. branch bool (default: True)Use True for Wishbone and False for Wanderlust. k int (default: 15)Number of nearest neighbors for graph construction. components Iterable[int] (default: (1, 2, 3))Components to use for running Wishbone. num_waypoints int | Collection (default: 250)Number of waypoints to sample. Returns:; Updates adata with the following fields:. trajectory_wishbone(adata.obs, dtype float64)Computed trajectory positions. branch_wishbone(adata.obs, dtype int64)Assigned branches. Example; >>> import scanpy.external as sce; >>> import scanpy as sc. Loading Data and Pre-processing; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.normalize_per_cell(adata); >>> sc.pp.pca(adata); >>> sc.tl.tsne(adata=adata, n_pcs=5, perplexity=30); >>> sc.pp.neighbors(adata, n_pcs=15, n_neighbors=10); >>> sc.tl.diffmap(adata, n_comps=10). Running Wishbone Core Function; Usually, the start cell for a dataset should be chosen based on high expression of; the gene of interest:; >>> sce.tl.wishbone(; ... adata=adata, start_cell='ACAAGAGACTTATC-1',; ... components=[2, 3], num_waypoints=150,; ... ). Visualizing Wishbone results; >>> sc.pl.tsne(adata, color=['trajectory_wishbone', 'branch_wishbone']); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ', 'MALAT1']; >>> sce.pl.wishbone_marker_trajectory(adata, markers, show=Tr",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:10414,Update,Updates,10414,en/stable/external/generated/scanpy.external.tl.wishbone.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html,1,['Update'],['Updates']
Deployability,"ousa. 1.3.6 2018-12-11#. Major updates#. a new plotting gallery for visualizing-marker-genes F Ramirez; tutorials are integrated on ReadTheDocs, pbmc3k and paga-paul15 A Wolf. Interactive exploration of analysis results through manifold viewers#. CZI’s cellxgene directly reads .h5ad files the cellxgene developers; the UCSC Single Cell Browser requires exporting via cellbrowser() M Haeussler. Code design#. highly_variable_genes() supersedes filter_genes_dispersion(), it gives the same results but, by default, expects logarithmized data and doesn’t subset A Wolf. 1.3.5 2018-12-09#. uncountable figure improvements pr369 F Ramirez. 1.3.4 2018-11-24#. leiden() wraps the recent graph clustering package by Traag et al. [2019] K Polanski; bbknn() wraps the recent batch correction package [Polański et al., 2019] K Polanski; calculate_qc_metrics() caculates a number of quality control metrics, similar to calculateQCMetrics from Scater [McCarthy et al., 2017] I Virshup. 1.3.3 2018-11-05#. Major updates#. a fully distributed preprocessing backend T White and the Laserson Lab. Code design#. read_10x_h5() and read_10x_mtx() read Cell Ranger 3.0 outputs pr334 Q Gong. Note; Also see changes in anndata 0.6. changed default compression to None in write_h5ad() to speed up read and write, disk space use is usually less critical; performance gains in write_h5ad() due to better handling of strings and categories S Rybakov. 1.3.1 2018-09-03#. RNA velocity in single cells [La Manno et al., 2018]#. Scanpy and AnnData support loom’s layers so that computations for single-cell RNA velocity [La Manno et al., 2018] become feasible S Rybakov and V Bergen; scvelo harmonizes with Scanpy and is able to process loom files with splicing information produced by Velocyto [La Manno et al., 2018], it runs a lot faster than the count matrix analysis of Velocyto and provides several conceptual developments. Plotting (Generic)#. dotplot() for visualizing genes across conditions and clusters, see here pr199 ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:45476,update,updates,45476,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['update'],['updates']
Deployability,"ously stored in adata. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_scanorama')The name of the field in adata.obsm where the integrated; embeddings will be stored after running this function. Defaults; to X_scanorama. knn int (default: 20)Number of nearest neighbors to use for matching. sigma float (default: 15)Correction smoothing parameter on Gaussian kernel. approx bool (default: True)Use approximate nearest neighbors with Python annoy;; greatly speeds up matching runtime. alpha float (default: 0.1)Alignment score minimum cutoff. batch_size int (default: 5000)The batch size used in the alignment vector computation. Useful; when integrating very large (>100k samples) datasets. Set to; large value that runs within available memory. kwargsAny additional arguments will be passed to; scanorama.assemble(). Return type:; None. Returns:; Updates adata with the field adata.obsm[adjusted_basis],; containing Scanorama embeddings such that different experiments; are integrated. Example; First, load libraries and example dataset, and preprocess.; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.recipe_zheng17(adata); >>> sc.pp.pca(adata). We now arbitrarily assign a batch metadata variable to each cell; for the sake of example, but during real usage there would already; be a column in adata.obs giving the experiment each cell came; from.; >>> adata.obs['batch'] = 1350*['a'] + 1350*['b']. Finally, run Scanorama. Afterwards, there will be a new table in; adata.obsm containing the Scanorama embeddings.; >>> sce.pp.scanorama_integrate(adata, 'batch', verbose=1); Processing datasets a <=> b; >>> 'X_scanorama' in adata.obsm; True. previous; scanpy.external.pp.mnn_correct. next; scanpy.external.pp.hashsolo. Contents; . scanorama_integrate(). By Scanpy development team. ; © Copyright 2024,",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:11110,Update,Updates,11110,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,1,['Update'],['Updates']
Deployability,"patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Clear out old distributions; $ rm -r dist; $ # Build source distribution and wheel both; $ python -m build; $ # Now check those build artifacts; $ twine check dist/*; $ # List the wheel archive’s contents; $ bsdtar -tf dist/*.whl. You can also upload the package to <test.pypi.org> (tutorial); $ twine upload --repository testpypi dist/*. The above approximates what the publish workflow does automatically for us.; If you want to replicate the process more exactly, make sure you are careful,; and create a version tag before building (make sure you delete it after uploading to TestPyPI!). previous;",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:11174,release,released,11174,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['released']
Deployability,"phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using other kNN libraries in Scanpy. Using other kNN libraries in Scanpy#; Since Scanpy was released, there has been quite some development in the space of approximate nearest neighbor detection.; In our example, we’re going to use Annoy:. %pip install -qU ""pip""; %pip install -q ""scanpy"" ""sklearn-ann[annoy]"". Note: you may need to restart the kernel to use updated packages.; Note: you may need to restart the kernel to use updated packages. import scanpy as sc; from sklearn_ann.kneighbors.annoy import AnnoyTransformer # noqa: F401. sc.logging.print_header(). scanpy==1.10.0rc2.dev0+g48b495d9.d20240222 anndata==0.10.5.post1 umap==0.5.5 numpy==1.26.4 scipy==1.12.0 pandas==2.2.0 scikit-learn==1.4.1.post1 statsmodels==0.14.1 igraph==0.11.4 pynndescent==0.5.11. Our nearest neighbors implementation uses the PCA embedding by default, so let’s pre-compute that:. adata_default = sc.datasets.paul15(); sc.pp.pca(adata_default); adata_annoy, adata_pynnd = adata_default.copy(), adata_default.copy(). WARNING: In Scanpy 0.*, this returned logarithmized data. Now it returns non-logarithmized data. The best way to use a third-party approximate nearest neighbors implementation is to use sklearn-ann. It provides kNN Transformer classes wrapping several popular approximate nea",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html:9491,install,install,9491,en/stable/how-to/knn-transformers.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html,2,['install'],['install']
Deployability,"phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tests. Contents . Running the tests; Miscellaneous tips. Writing tests; What to test; Performance; Plotting tests. Tests#; Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. Running the tests#; We use pytest to test scanpy.; To run the tests, simply run hatch test.; It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. Only run a subset of the tests.; This can be done by specifying paths or test name patterns using the -k argument (e.g. hatch test test_plotting.py or hatch test -k ""test_umap*""); Run the tests in parallel using the -n argument (e.g. hatch test -n 8). Miscellaneous tips#. A lot of warnings can be thrown while running the test suite.; It’s often easier to read the test results with them hidden via the --disable-pytest-warnings argument. Writing tests#; You can refer to the existing test suite for examples.; If you haven’t written tests before, Software Carpentry has an in-depth testing guide.; We highly recommend using Test-Driven Development when contributing code.; This not only ensures you have tests written, it often ma",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/testing.html:9525,release,release,9525,en/stable/dev/testing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/testing.html,1,['release'],['release']
Deployability,"plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW. Contents . DotPlot.DEFAULT_DOT_EDGELW. scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW#. DotPlot.DEFAULT_DOT_EDGELW = 0.2[source]#. previous; scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR. next; scanpy.pl.DotPlot.DEFAULT_DOT_MAX. Contents; . DotPlot.DEFAULT_DOT_EDGELW. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW.html:9070,Release,Release,9070,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_WSPACE. Contents . MatrixPlot.DEFAULT_WSPACE. scanpy.pl.MatrixPlot.DEFAULT_WSPACE#. MatrixPlot.DEFAULT_WSPACE = 0[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX. next; scanpy.pl.MatrixPlot.MAX_NUM_CATEGORIES. Contents; . MatrixPlot.DEFAULT_WSPACE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html:9069,Release,Release,9069,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_WSPACE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"previously, note that there are more sensible alternatives for normalization (see discussion in sc-tutorial paper and more recent alternatives such as SCTransform or GLM-PCA). for adata in [; adata_spatial_anterior,; adata_spatial_posterior,; ]:; sc.pp.normalize_total(adata, inplace=True); sc.pp.log1p(adata); sc.pp.highly_variable_genes(adata, flavor=""seurat"", n_top_genes=2000, inplace=True). normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var); normalizing counts per cell; finished (0:00:00); extracting highly variable genes; finished (0:00:00); --> added; 'highly_variable', boolean vector (adata.var); 'means', float vector (adata.var); 'dispersions', float vector (adata.var); 'dispersions_norm', float vector (adata.var). Data integration#; We are now ready to perform integration of the two dataset. As mentioned before, we will be using Scanorama for that. Scanorama returns two lists, one for the integrated embeddings and one for the corrected counts, for each dataset.; We would like to note that in this context using BBKNN or Ingest is also possible. adatas = [adata_spatial_anterior, adata_spatial_posterior]; adatas_cor = scanorama.correct_scanpy(adatas, return_dimred=True). Found 32285 genes among all datasets; [[0. 0.48882265]; [0. 0. ]]; Processing datasets (0, 1). We will concatenate the two datasets and save the integrated embeddings in adata_spatial.obsm['scanorama_embedding']. Furthermore we will compute UMAP to visualize the results and qualitatively assess the data integration task.; Notice that we are concatenating the two dataset with uns_merge=""unique"" strategy, in order to keep both images from the visium datasets in the concatenated anndata object. adata_spatial = sc.concat(; adatas_cor,; label=""library_id"",; uns_merge=""unique",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:15889,integrat,integration,15889,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,2,['integrat'],['integration']
Deployability,"py._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. How to. How to#; This section contains short examples on how to perform specific tasks with scanpy. Using other kNN libraries in Scanpy; Plotting with Marsilea; Heatmap; Matrixplot; Dot plot; Tracksplot; Stacked Violin; More information. previous; Usage Principles. next; Using other kNN libraries in Scanpy. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/index.html:9040,Release,Release,9040,en/stable/how-to/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/index.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR. Contents . DotPlot.DEFAULT_DOT_EDGECOLOR. scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR#. DotPlot.DEFAULT_DOT_EDGECOLOR = 'black'[source]#. previous; scanpy.pl.DotPlot.DEFAULT_COLOR_ON. next; scanpy.pl.DotPlot.DEFAULT_DOT_EDGELW. Contents; . DotPlot.DEFAULT_DOT_EDGECOLOR. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR.html:9073,Release,Release,9073,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH. Contents . StackedViolin.DEFAULT_LEGENDS_WIDTH. scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH#. StackedViolin.DEFAULT_LEGENDS_WIDTH = 1.5[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_JITTER_SIZE. next; scanpy.pl.StackedViolin.DEFAULT_LINE_WIDTH. Contents; . StackedViolin.DEFAULT_LEGENDS_WIDTH. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html:9079,Release,Release,9079,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_LEGENDS_WIDTH.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.transitions_sym. Contents . Neighbors.transitions_sym. scanpy.Neighbors.transitions_sym#. property Neighbors.transitions_sym: ndarray | csr_matrix | None[source]#; Symmetrized transition matrix (sparse matrix).; Is conjugate to the transition matrix via:; self.transitions_sym = self.Z / self.transitions * self.Z. where self.Z is the diagonal matrix storing the normalization of the; underlying kernel matrix. previous; scanpy.Neighbors.transitions. next; scanpy.Neighbors.compute_eigen. Contents; . Neighbors.transitions_sym. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.transitions_sym.html:9066,Release,Release,9066,en/stable/generated/scanpy.Neighbors.transitions_sym.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.transitions_sym.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.paul15. Contents . paul15(). scanpy.datasets.paul15#. scanpy.datasets.paul15()[source]#; Development of Myeloid Progenitors [Paul et al., 2015].; Non-logarithmized raw data.; The data has been sent out by Email from the Amit Lab. An R version for; loading the data can be found here. Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.paul15(); AnnData object with n_obs × n_vars = 2730 × 3451; obs: 'paul15_clusters'; uns: 'iroot'. previous; scanpy.datasets.pbmc68k_reduced. next; scanpy.datasets.toggleswitch. Contents; . paul15(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.paul15.html:9056,Release,Release,9056,en/stable/generated/scanpy.datasets.paul15.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.paul15.html,3,"['Release', 'release', 'toggle']","['Release', 'release', 'toggleswitch']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Analysis and visualization of spatial transcriptomics data. Contents . Reading the data; QC and preprocessing; Manifold embedding and clustering based on transcriptional similarity; Visualization in spatial coordinates; Cluster marker genes; MERFISH example. Analysis and visualization of spatial transcriptomics data#; Author: Giovanni Palla; .. note::; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial demonstrates how to work with spatial transcriptomics data within Scanpy.; We focus on 10x Genomics Visium data, and provide an example for MERFISH. import scanpy as sc; import pandas as pd; import matplotlib.pyplot as plt; import seaborn as sns. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4.d20240226; ----",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:9093,Release,Release,9093,en/stable/tutorials/spatial/basic-analysis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Core plotting functions. Contents . Scatter plots for embeddings; Load pbmc dataset; Visualization of gene expression and other variables. Identification of clusters based on known marker genes; dotplot; violin plot; stacked-violin plot; matrixplot. Combining plots in subplots; Heatmaps; Tracksplot; Visualization of marker genes; Visualize marker genes using dotplot; Focusing on particular groups. Visualize marker genes using matrixplot; Visualize marker genes using stacked violin plots; Visualize marker genes using heatmap; Visualize marker genes using tracksplot. Comparison of marker genes using split violin plots; Dendrogram options; Plot correlation. Core plotting functions#; Author: Fidel Ramírez; This tutorial explores the visualization possibilities of scanpy and is divided into three sections:. Scatter plots for embeddings (eg. UMAP, t-SNE); Identification of clust",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html:9057,Release,Release,9057,en/stable/tutorials/plotting/core.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/core.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Customizing Scanpy plots. Contents . Talking to matplotlib; Figure and Axes objects; Using matplotlib Axes to customize plot alignment; Plot size; Adjust space between subplots; Adapt axes appearance. Labels and legends; Customizing legends; Annotating scatter plots. Colors; Discrete palettes; Continous palettes; Colorblind friendly palettes. UMAP; Coloring cell subset; Cell ordering; Optimising UMAP layout. PAGA; Prune PAGA edges; PAGA layout; PAGA layout corresponding to UMAP. Customizing Scanpy plots#; This is an advanced tutorial on customizing scanpy plots. For an introduction to scanpy plotting functions please see the introductory tutorial. import scanpy as sc; import pandas as pd; import numpy as np. import matplotlib.pyplot as plt; import seaborn as sns; import matplotlib.colors as mcolors. # Inital setting for plot size; from matplotlib import rcParams. FIGSIZE =,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:9059,Release,Release,9059,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. How to preprocess UMI count data with analytic Pearson residuals. Contents . Background; Preparations; Download data; Load data. Perform Quality control; Basic filtering; Compute quality control metrics; Plot quality control metrics. Use Pearson residuals for selection of highly variable genes; Compute 2000 variable genes with Pearson residuals; Plot gene selection; Apply gene selection; Print resulting adata objects. Transforming raw counts to Pearson residuals; Preparations; Compute Pearson residuals; Compute PCA and t-SNE; Compute Neighborhood graph and Leiden clustering; Plot Leiden clusters on tSNE and PBMC marker genes. Optional input arguments; Overdispersion parameter theta; Clipping threshold clip; chunksize and best practice to obtain Pearson residuals for large datasets. Wrapper functions for Pearson residuals preprocessing; References / See also. How to preproc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:9099,Release,Release,9099,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PC",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9073,Release,Release,9073,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9090,Release,Release,9090,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Plotting with Marsilea. Contents . Heatmap; Matrixplot; Dot plot; Tracksplot; Stacked Violin; More information. Plotting with Marsilea#; Marsilea is a visualization library that allows user to create composable visualization in a declarative way.; You can use it to create many scanpy plots with easy customization.; Let’s first load the PBMC datdaset. import numpy as np; import scanpy as sc. pbmc = sc.datasets.pbmc3k_processed().raw.to_adata(); pbmc. AnnData object with n_obs × n_vars = 2638 × 13714; obs: 'n_genes', 'percent_mito', 'n_counts', 'louvain'; var: 'n_cells'; uns: 'draw_graph', 'louvain', 'louvain_colors', 'neighbors', 'pca', 'rank_genes_groups'; obsm: 'X_pca', 'X_tsne', 'X_umap', 'X_draw_graph_fr'; obsp: 'distances', 'connectivities'. Define the cells and markers that we want to draw. cell_markers = {; ""CD4 T cells"": [""IL7R""],; ""CD14+ Monocytes"": [""CD14"", ""LYZ""]",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/plotting-with-marsilea.html:9056,Release,Release,9056,en/stable/how-to/plotting-with-marsilea.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/plotting-with-marsilea.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering 3k PBMCs (legacy workflow). Contents . Preprocessing; Principal component analysis; Computing the neighborhood graph; Embedding the neighborhood graph; Clustering the neighborhood graph; Finding marker genes. Preprocessing and clustering 3k PBMCs (legacy workflow)#; In May 2017, this started out as a demonstration that Scanpy would allow to reproduce most of Seurat’s guided clustering tutorial (Satija et al., 2015).; We gratefully acknowledge Seurat’s authors for the tutorial! In the meanwhile, we have added and removed a few pieces.; The data consist of 3k PBMCs from a Healthy Donor and are freely available from 10x Genomics (here from this webpage). On a unix system, you can uncomment and run the following to download and unpack the data. The last line creates a directory for writing processed data. # !mkdir data; # !wget http://cf.10xgenomic",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html:9089,Release,Release,9089,en/stable/tutorials/basics/clustering-2017.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering-2017.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Preprocessing and clustering. Contents . Quality Control; Doublet detection. Normalization; Feature selection; Dimensionality Reduction; Nearest neighbor graph constuction and visualization; Clustering; Re-assess quality control and cell filtering; Manual cell-type annotation; Marker gene set; Differentially-expressed Genes as Markers. Preprocessing and clustering#. # Core scverse libraries; import scanpy as sc; import anndata as ad. # Data retrieval; import pooch. sc.settings.set_figure_params(dpi=50, facecolor=""white""). The data used in this basic preprocessing and clustering tutorial was collected from bone marrow mononuclear cells of healthy human donors and was part of openproblem’s NeurIPS 2021 benchmarking dataset [Luecken et al., 2021]. The samples used in this tutorial were measured using the 10X Multiome Gene Expression and Chromatin Accessability kit.; We are re",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:9063,Release,Release,9063,en/stable/tutorials/basics/clustering.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Trajectory inference for hematopoiesis in mouse. Contents . Preprocessing and Visualization; Optional: Denoising the graph; Clustering and PAGA; Recomputing the embedding using PAGA-initialization; Reconstructing gene changes along PAGA paths for a given set of genes. Trajectory inference for hematopoiesis in mouse#. See also; More examples for trajectory inference on complex datasets can be found in the; PAGA repository [Wolf et al., 2019], for instance, multi-resolution analyses of whole animals,; such as for planaria for data of Plass et al. [2018]. Reconstructing myeloid and erythroid differentiation for data of Paul et al. (2015). import numpy as np; import matplotlib.pyplot as pl; import scanpy as sc. sc.settings.verbosity = 3 # verbosity: errors (0), warnings (1), info (2), hints (3); sc.logging.print_versions(); results_file = ""./write/paul15.h5ad""; # low dpi (dots",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html:9081,Release,Release,9081,en/stable/tutorials/trajectories/paga-paul15.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/trajectories/paga-paul15.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using dask with Scanpy. Using dask with Scanpy#. Warning; 🔪 Beware sharp edges! 🔪; dask support in scanpy is new and highly experimental!; Many functions in scanpy do not support dask and may exhibit unexpected behaviour if dask arrays are passed to them. Stick to what’s outlined in this tutorial and you should be fine!; Please report any issues you run into over on the issue tracker. dask is a popular out-of-core, distributed array processing library that scanpy is beginning to support. Here we walk through a quick tutorial of using dask in a simple analysis task.; This notebook relies on optional dependencies in dask and sklearn_ann and annoy. Install them with:; pip install -U ""dask[array,distributed,diagnostics]"" sklearn_ann annoy. from pathlib import Path. import numpy as np; import dask.distributed as dd; import scanpy as sc; import anndata as ad; import h5py. sc.log",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:9056,Release,Release,9056,en/stable/tutorials/experimental/dask.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Using other kNN libraries in Scanpy. Using other kNN libraries in Scanpy#; Since Scanpy was released, there has been quite some development in the space of approximate nearest neighbor detection.; In our example, we’re going to use Annoy:. %pip install -qU ""pip""; %pip install -q ""scanpy"" ""sklearn-ann[annoy]"". Note: you may need to restart the kernel to use updated packages.; Note: you may need to restart the kernel to use updated packages. import scanpy as sc; from sklearn_ann.kneighbors.annoy import AnnoyTransformer # noqa: F401. sc.logging.print_header(). scanpy==1.10.0rc2.dev0+g48b495d9.d20240222 anndata==0.10.5.post1 umap==0.5.5 numpy==1.26.4 scipy==1.12.0 pandas==2.2.0 scikit-learn==1.4.1.post1 statsmodels==0.14.1 igraph==0.11.4 pynndescent==0.5.11. Our nearest neighbors implementation uses the PCA embedding by default, so let’s pre-compute that:. adata_default = sc.d",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html:9069,Release,Release,9069,en/stable/how-to/knn-transformers.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/how-to/knn-transformers.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. API. API#; Import Scanpy as:; import scanpy as sc. Note; Additional functionality is available in the broader ecosystem, with some tools being wrapped in the scanpy.external module. Preprocessing: pp; Basic Preprocessing; Recipes; Batch effect correction; Doublet detection; Neighbors. Tools: tl; Embeddings; Clustering and trajectory inference; Data integration; Marker genes; Gene scores, Cell cycle; Simulations. Plotting: pl; Generic; Classes; Preprocessing; Tools. Reading; scanpy.read; scanpy.read_10x_h5; scanpy.read_10x_mtx; scanpy.read_visium; scanpy.read_h5ad; scanpy.read_csv; scanpy.read_excel; scanpy.read_hdf; scanpy.read_loom; scanpy.read_mtx; scanpy.read_text; scanpy.read_umi_tools. Get object from AnnData: get; scanpy.get.obs_df; scanpy.get.var_df; scanpy.get.rank_genes_groups_df; scanpy.get.aggregate. Queries; scanpy.queries.biomart_annotations; scanpy.queries.gene_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/index.html:9037,Release,Release,9037,en/stable/api/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/index.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. CI. Contents . Plotting tests; Viewing plots from failed tests on Azure pipelines; Misc. CI#. Plotting tests#; A frequent frustration in testing is the reproducibility of the plots and matplotlib’s behaviour in different environments.; We have some tooling to help with this. Viewing plots from failed tests on Azure pipelines#; The fixtures check_same_image and image_comparer upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. Select your failing test. And open the attachments tab. From here you can view and download the images which were compared, as well as a diff between them. Misc#; matplotlib.testing.setup() tries to establish a consistent environment for creating plots. Make sure it’s active!. previous; Documentation. next; Versioning. Contents; . Plotting tests; Viewing plot",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/ci.html:9036,Release,Release,9036,en/stable/dev/ci.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/ci.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Contributing code. Contents . Development workflow; Code style. Contributing code#. Development workflow#. Fork the Scanpy repository to your own GitHub account; Create a development environment; Create a new branch for your PR; Add your feature or bugfix to the codebase; Make sure all tests are passing; Build and visually check any changed documentation; Open a PR back to the main repository. Code style#; Code contributions will be formatted and style checked using Ruff.; Ignored checks are configured in the tool.ruff.lint section of pyproject.toml.; To learn how to ignore checks per line please read about ignoring errors.; Additionally, we use Scanpy’s EditorConfig,; so using an editor/IDE with support for both is helpful. previous; Contributing. next; Getting set up. Contents; . Development workflow; Code style. By Scanpy development team. ; © Copyright 2024, the Scanpy de",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/code.html:9051,Release,Release,9051,en/stable/dev/code.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/code.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Contributing. Contributing#; Contributions to scanpy are welcome!; This section of the docs provides some guidelines and tips to follow when contributing. Contributing code; Development workflow; Code style. Getting set up; Working with git; Forking and cloning; pre-commit; Creating a branch for your feature; Open a pull request. Development environments. Tests; Running the tests; Miscellaneous tips. Writing tests; What to test; Performance; Plotting tests. Documentation; Building the docs; Adding to the docs; docstrings format; Plots in docstrings; Params section; Returns section; Examples. CI; Plotting tests; Viewing plots from failed tests on Azure pipelines; Misc. Versioning; Semantic versioning; Version numbers. Tooling; Technical details. Making a release; Preparing the release; Actually making the release; After making a release; Debugging the build process. Parts of t,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/index.html:9046,Release,Release,9046,en/stable/dev/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/index.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Contributors. Contents . Current developers; Other roles; Former developers. Contributors#; anndata graph | scanpy graph| ☀ = maintainer. Current developers#. Isaac Virshup, lead developer since 2019 ☀; Gökcen Eraslan, developer, diverse contributions ☀; Sergei Rybakov, developer, diverse contributions ☀; Fidel Ramirez developer, plotting ☀; Giovanni Palla, developer, spatial data; Malte Luecken, developer, community & forum; Lukas Heumos, developer, diverse contributions; Philipp Angerer, developer, software quality, initial anndata conception ☀. Other roles#. Alex Wolf: lead developer 2016-2019, initial anndata & scanpy conception; Fabian Theis & lab: enabling guidance, support and environment. Former developers#. Tom White: developer 2018-2019, distributed computing. previous; Making a release. next; References. Contents; . Current developers; Other roles; Former developer",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/contributors.html:9046,Release,Release,9046,en/stable/contributors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/contributors.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Documentation. Contents . Building the docs; Adding to the docs; docstrings format; Plots in docstrings; Params section; Returns section; Examples. Documentation#. Building the docs#; To build the docs, run hatch run docs:build.; Afterwards, you can run hatch run docs:open to open docs/_build/html/index.html.; Your browser and Sphinx cache docs which have been built previously.; Sometimes these caches are not invalidated when you’ve updated the docs.; If docs are not updating the way you expect, first try “force reloading” your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache (hatch run docs:clean) and try building them again. Adding to the docs#; For any user-visible changes, please make sure a note has been added to the release notes using hatch run towncrier:create.; We recommend waiting on this until your PR i",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:9047,Release,Release,9047,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Ecosystem. Contents . Viewers; Portals; Modalities; RNA velocity; Spatial Transcriptomics Tools; Multimodal integration; Adaptive immune receptor repertoire (AIRR); Long reads. Analysis methods; scvi-tools; Fate mapping; Differential expression; Data integration; Modeling perturbations; Feature selection; Annotation/ Enrichment Analysis. Ecosystem#. Warning; We are no longer accepting new tools on this page.; Instead, please submit your tool to the scverse ecosystem package listing. Viewers#; Interactive manifold viewers. cellxgene via direct reading of .h5ad CZI; cirrocumulus via direct reading of .h5ad Broad Inst.; cell browser via exporing through cellbrowser() UCSC; SPRING via exporting through spring_project() Harvard Med; vitessce for purely browser based viewing of zarr formatted AnnData files Harvard Med. Portals#. the Gene Expression Analysis Resource U Maryland; the",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:9043,Release,Release,9043,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. External API. External API#. Warning; We are no longer accepting new tools into scanpy.external.; Instead, please submit your tool to the scverse ecosystem package listing. Note; For tools that integrate well with scanpy and anndata, see:. The scverse ecosystem; Scanpy’s ecosystem ecosystem page. Import Scanpy’s wrappers to external tools as:; import scanpy.external as sce. Preprocessing: PP; Data integration; Sample demultiplexing; Imputation. Tools: TL; Embeddings; Clustering and trajectory inference; Gene scores, Cell cycle. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. previous; scanpy.pp.normalize_per_cell. next; Preprocessing: PP. By Scanpy development team. ; © Copyright 2024, the Scanpy ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/index.html:9046,Release,Release,9046,en/stable/external/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/index.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Getting set up. Contents . Working with git; Forking and cloning; pre-commit; Creating a branch for your feature; Open a pull request. Development environments. Getting set up#. Working with git#; This section of the docs covers our practices for working with git on our codebase. For more in-depth guides, we can recommend a few sources:; For a more complete git tutorials we recommend checking out:. Atlassian’s git tutorialBeginner friendly introductions to the git command line interface. Setting up git for GitHubConfiguring git to work with your GitHub user account. Forking and cloning#; To get the code, and be able to push changes back to the main project, you’ll need to (1) fork the repository on github and (2) clone the repository to your local machine.; This is very straight forward if you’re using GitHub’s CLI:; $ gh repo fork scverse/scanpy --clone --remote. This will f",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html:9049,Release,Release,9049,en/stable/dev/getting-set-up.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Installation. Contents . Development Version; Docker; Troubleshooting. Installation#; To use scanpy from another project, install it using your favourite environment manager:. Hatch (recommended)Pip/PyPICondaAdding scanpy[leiden] to your dependencies is enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. D",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:9046,Release,Release,9046,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9050,Release,Release,9050,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. News. Contents . rapids-singlecell brings scanpy to the GPU! 2024-03-18; Scanpy hits 100 contributors! 2022-03-31; New community channels 2022-03-31; Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01; scVelo on the cover of Nature Biotechnology 2020-12-01; Scanpy selected among 20 papers for 20 years of Genome Biology 2020-08-01; COVID-19 datasets distributed as h5ad 2020-04-01; Scanpy featured in Nature Biotechnoloogy 2020-02-01; Scanpy has been selected an “Essential open source software for science” by CZI 2019-11-14; Nature Biotechnology: A comparison of single-cell trajectory inference methods 2019-04-01; Science “Breakthrough of the Year 2018” 2018-12-01. News#. rapids-singlecell brings scanpy to the GPU! 2024-03-18#; rapids-singlecell by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. Scanpy hits 100 contr,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/news.html:9038,Release,Release,9038,en/stable/news.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/news.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Plotting: pl. Contents . Generic; Classes; Preprocessing; Tools; PCA; Embeddings. Branching trajectories and pseudotime, clustering; Marker genes; Simulations. Plotting: pl#; The plotting module scanpy.pl largely parallels the tl.* and a few of the pp.* functions.; For most tools and for some preprocessing functions, you’ll find a plotting function with the same name.; See Core plotting functions for an overview of how to use these functions. Note; See the Settings section for all important plotting configurations. Generic#. pl.scatter; Scatter plot along observations or variables axes. pl.heatmap; Heatmap of the expression values of genes. pl.dotplot; Makes a dot plot of the expression values of var_names. pl.tracksplot; In this type of plot each var_name is plotted as a filled line plot where the y values correspond to the var_name values and x is each of the cells. pl.viol",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/plotting.html:9046,Release,Release,9046,en/stable/api/plotting.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/plotting.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Preprocessing: PP. Contents . Data integration; Sample demultiplexing; Imputation. Preprocessing: PP#. Data integration#. pp.bbknn(adata, *[, batch_key, use_rep, ...]); Batch balanced kNN [Polański et al., 2019]. pp.harmony_integrate(adata, key, *[, basis, ...]); Use harmonypy [Korsunsky et al., 2019] to integrate different experiments. pp.mnn_correct(*datas[, var_index, ...]); Correct batch effects by matching mutual nearest neighbors [Haghverdi et al., 2018] [Kang, 2018]. pp.scanorama_integrate(adata, key, *[, ...]); Use Scanorama [Hie et al., 2019] to integrate different experiments. Sample demultiplexing#. pp.hashsolo(adata, cell_hashing_columns, *); Probabilistic demultiplexing of cell hashing data using HashSolo [Bernstein et al., 2020]. Imputation#; Note that the fundamental limitations of imputation are still under debate. pp.dca(adata[, mode, ae_type, ...]); Deep cou",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html:9051,Release,Release,9051,en/stable/external/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/preprocessing.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Preprocessing: pp. Contents . Basic Preprocessing; Recipes; Batch effect correction; Doublet detection; Neighbors. Preprocessing: pp#; Filtering of highly-variable genes, batch-effect correction, per-cell normalization, preprocessing recipes.; Any transformation of the data matrix that is not a tool. Other than tools, preprocessing steps usually don’t return an easily interpretable annotation, but perform a basic transformation on the data matrix. Basic Preprocessing#; For visual quality control, see highest_expr_genes() and; filter_genes_dispersion() in scanpy.pl. pp.calculate_qc_metrics; Calculate quality control metrics. pp.filter_cells; Filter cell outliers based on counts and numbers of genes expressed. pp.filter_genes; Filter genes based on number of cells or counts. pp.highly_variable_genes; Annotate highly variable genes [Satija et al., 2015, Stuart et al., 2019, Zhen",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html:9051,Release,Release,9051,en/stable/api/preprocessing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/preprocessing.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Reading. Reading#. Note; For reading annotation use pandas.read_…; and add it to your anndata.AnnData object. The following read functions are; intended for the numeric data in the data matrix X. Read common file formats using. read; Read file and return AnnData object. Read 10x formatted hdf5 files and directories containing .mtx files using. read_10x_h5; Read 10x-Genomics-formatted hdf5 file. read_10x_mtx; Read 10x-Genomics-formatted mtx directory. read_visium; Read 10x-Genomics-formatted visum dataset. Read other formats using functions borrowed from anndata. read_h5ad; Read .h5ad-formatted hdf5 file. read_csv; Read .csv file. read_excel; Read .xlsx (Excel) file. read_hdf; Read .h5 (hdf5) file. read_loom; Read .loom-formatted hdf5 file. read_mtx; Read .mtx file. read_text; Read .txt, .tab, .data (text) file. read_umi_tools; Read a gzipped condensed count matrix from umi_to",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/reading.html:9041,Release,Release,9041,en/stable/api/reading.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/reading.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Release notes. Contents . Version 1.10; 1.10.3 2024-09-17; Bug fixes. 1.10.2 2024-06-25; Development Process; Documentation; Bug fixes; Performance. 1.10.1 2024-04-09; Documentation; Bug fixes; Performance. 1.10.0 2024-03-26; Features; Documentation; Bug fixes; Development Process; Deprecations. Version 1.9; 1.9.8 2024-01-26; Bug fixes. 1.9.7 2024-01-25; Bug fixes. 1.9.6 2023-10-31; Bug fixes. 1.9.5 2023-09-08; Bug fixes. 1.9.4 2023-08-24; Bug fixes. 1.9.3 2023-03-02; Bug fixes. 1.9.2 2023-02-16; Bug fixes. 1.9.1 2022-04-05; Bug fixes. 1.9.0 2022-04-01; Tutorials; Experimental module; Features; Ecosystem; Bug fixes. Version 1.8; 1.8.2 2021-11-3; Documentation; Bug fixes; Ecosystem. 1.8.1 2021-07-07; Bug fixes. 1.8.0 2021-06-28; Metrics module; Features; Ecosystem; Documentation; Bug fixes; Development Process; Deprecations. Version 1.7; 1.7.2 2021-04-07; Bug fixes; Ecosystem.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:9047,Release,Release,9047,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Scanpy – Single-Cell Analysis in Python. Contents . News; rapids-singlecell brings scanpy to the GPU! 2024-03-18; Scanpy hits 100 contributors! 2022-03-31; New community channels 2022-03-31; Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01. Scanpy – Single-Cell Analysis in Python#; Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with anndata. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells.; Discuss usage on the scverse Discourse. Read the documentation.; If you’d like to contribute by opening an issue or creating a pull request, please take a look at our contribution guide.; scanpy is part of the scverse project (website, governance) and is fiscally ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/index.html:9074,Release,Release,9074,en/stable/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/index.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Settings. Settings#; A convenience function for setting some default matplotlib.rcParams and a; high-resolution jupyter display backend useful for use in notebooks. set_figure_params; Set resolution/size, styling and format of figures. An instance of the ScanpyConfig is available as scanpy.settings and allows configuring Scanpy. _settings.ScanpyConfig; Config manager for scanpy. Some selected settings are discussed in the following.; Influence the global behavior of plotting functions. In non-interactive scripts,; you’d usually want to set settings.autoshow to False. autoshow; Automatically show figures if autosave == False (default True). autosave; Automatically save figures in figdir (default False). The default directories for saving figures, caching files and storing datasets. figdir; Directory for saving figures (default './figures/'). cachedir; Directory for cache files",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/settings.html:9042,Release,Release,9042,en/stable/api/settings.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/settings.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tests. Contents . Running the tests; Miscellaneous tips. Writing tests; What to test; Performance; Plotting tests. Tests#; Possibly the most important part of contributing to any open source package is the test suite.; Implementations may change, but the only way we can know the code is working before making a release is the test suite. Running the tests#; We use pytest to test scanpy.; To run the tests, simply run hatch test.; It can take a while to run the whole test suite. There are a few ways to cut down on this while working on a PR:. Only run a subset of the tests.; This can be done by specifying paths or test name patterns using the -k argument (e.g. hatch test test_plotting.py or hatch test -k ""test_umap*""); Run the tests in parallel using the -n argument (e.g. hatch test -n 8). Miscellaneous tips#. A lot of warnings can be thrown while running the test suite.; It’s o",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/testing.html:9039,Release,Release,9039,en/stable/dev/testing.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/testing.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tools: TL. Contents . Embeddings; Clustering and trajectory inference; Gene scores, Cell cycle. Tools: TL#. Embeddings#. tl.phate(adata[, n_components, k, a, ...]); PHATE [Moon et al., 2019]. tl.palantir(adata, *[, n_components, knn, ...]); Run Diffusion maps using the adaptive anisotropic kernel [Setty et al., 2019]. tl.trimap(adata[, n_components, n_inliers, ...]); TriMap: Large-scale Dimensionality Reduction Using Triplets [Amid and Warmuth, 2019]. tl.sam(adata, *[, max_iter, num_norm_avg, ...]); Self-Assembling Manifolds single-cell RNA sequencing analysis tool [Tarashansky et al., 2019]. Clustering and trajectory inference#. tl.phenograph(data[, clustering_algo, k, ...]); PhenoGraph clustering [Levine et al., 2015]. tl.harmony_timeseries(adata, tp, *[, ...]); Harmony time series for data visualization with augmented affinity matrix at discrete time points [Nowotschin et ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/tools.html:9043,Release,Release,9043,en/stable/external/tools.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/tools.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tools: tl. Contents . Embeddings. Clustering and trajectory inference; Data integration; Marker genes; Gene scores, Cell cycle; Simulations. Tools: tl#; Any transformation of the data matrix that is not preprocessing. In contrast to a preprocessing function, a tool usually adds an easily interpretable annotation to the data matrix, which can then be visualized with a corresponding plotting function. Embeddings#. pp.pca; Principal component analysis [Pedregosa et al., 2011]. tl.tsne; t-SNE [Amir et al., 2013, Pedregosa et al., 2011, van der Maaten and Hinton, 2008]. tl.umap; Embed the neighborhood graph using UMAP [McInnes et al., 2018]. tl.draw_graph; Force-directed graph drawing [Chippada, 2018, Islam et al., 2011, Jacomy et al., 2014]. tl.diffmap; Diffusion Maps [Coifman et al., 2005, Haghverdi et al., 2015, Wolf et al., 2018]. Compute densities on embeddings. tl.embedding_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/tools.html:9043,Release,Release,9043,en/stable/api/tools.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/tools.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Tutorials. Contents . Basic workflows; Visualization; Trajectory inference; Spatial data; Experimental; Older tutorials. Tutorials#. See also; For more tutorials featureing scanpy and other scverse ecosystem tools, check out the curated set of tutorials at scverse.org/learn. Basic workflows#. Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Visualization#. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectory inference#. See also; For more powerful tools for analysing single cell dynamics, check out the Scverse ecosystem packages:. CellRank; Dynamo. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial data#. See also; For more up-to-date tutorials on working with spatial data, see:. SquidPy tutorials; SpatialData tutorials; Scverse ecosystem spatial tutor",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/index.html:9043,Release,Release,9043,en/stable/tutorials/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/index.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Usage Principles. Contents . Workflow; AnnData. Usage Principles#; Import Scanpy as:; import scanpy as sc. Workflow#; The typical workflow consists of subsequent calls of data analysis tools; in sc.tl, e.g.:; sc.tl.umap(adata, **tool_params) # embed a neighborhood graph of the data using UMAP. where adata is an AnnData object.; Each of these calls adds annotation to an expression matrix X,; which stores n_obs observations (cells) of n_vars variables (genes).; For each tool, there typically is an associated plotting function in sc.pl:; sc.pl.umap(adata, **plotting_params). If you pass show=False, a Axes instance is returned; and you have all of matplotlib’s detailed configuration possibilities.; To facilitate writing memory-efficient pipelines, by default,; Scanpy tools operate inplace on adata and return None –; this also allows to easily transition to out-of-memory pipelines",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/usage-principles.html:9050,Release,Release,9050,en/stable/usage-principles.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/usage-principles.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Versioning. Contents . Semantic versioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this schem",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:9044,Release,Release,9044,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. References. References#. [AW19]; Ehsan Amid and Manfred K. Warmuth. Trimap: large-scale dimensionality reduction using triplets. 2019. URL: https://arxiv.org/abs/1910.00204, doi:10.48550/ARXIV.1910.00204. [ADT+13]; El-ad David Amir, Kara L Davis, Michelle D Tadmor, Erin F Simonds, Jacob H Levine, Sean C Bendall, Daniel K Shenfeld, Smita Krishnaswamy, Garry P Nolan, and Dana Pe’er. Visne enables visualization of high dimensional single-cell data and reveals phenotypic heterogeneity of leukemia. Nature Biotechnology, 31(6):545–552, may 2013. URL: https://doi.org/10.1038/nbt.2594, doi:10.1038/nbt.2594. [AHB+15]; Philipp Angerer, Laleh Haghverdi, Maren Büttner, Fabian J. Theis, Carsten Marr, and Florian Buettner. Destiny: diffusion maps for large-scale single-cell data in r. Bioinformatics, 32(8):1241–1243, dec 2015. URL: https://doi.org/10.1093/bioinformatics/btv715, doi:10.109",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:9044,Release,Release,9044,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors. Contents . Neighbors. scanpy.Neighbors#. class scanpy.Neighbors(adata, *, n_dcs=None, neighbors_key=None)[source]#; Data represented as graph of nearest neighbors.; Represent a data matrix as a graph of nearest neighbor relations (edges); among data points (nodes). Parameters:. adata AnnDataAnnotated data object. n_dcs int | None (default: None)Number of diffusion components to use. neighbors_key str | None (default: None)Where to look in .uns and .obsp for neighbors data. Attributes. connectivities; Connectivities between data points (sparse matrix). distances; Distances between data points (sparse matrix). distances_dpt; DPT distances. eigen_basis; Eigen basis of transition matrix. eigen_values; Eigen values of transition matrix. rp_forest. transitions; Transition matrix (sparse matrix). transitions_sym; Symmetrized transition matrix (sparse matrix). Meth",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.html:9050,Release,Release,9050,en/stable/generated/scanpy.Neighbors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.compute_eigen. Contents . Neighbors.compute_eigen(). scanpy.Neighbors.compute_eigen#. Neighbors.compute_eigen(n_comps=15, sym=None, sort='decrease', random_state=0)[source]#; Compute eigen decomposition of transition matrix. Parameters:. n_comps int (default: 15)Number of eigenvalues/vectors to be computed, set n_comps = 0 if; you need all eigenvectors. sym bool | None (default: None)Instead of computing the eigendecomposition of the assymetric; transition matrix, computed the eigendecomposition of the symmetric; Ktilde matrix. random_state Union[int, RandomState, None] (default: 0)A numpy random seed. Returns:; Writes the following attributes. eigen_valuesndarrayEigenvalues of transition matrix. eigen_basisndarrayMatrix of eigenvectors (stored in columns). .eigen_basis is; projection of data matrix on right eigenvectors, that is, the; projection on the diff",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_eigen.html:9064,Release,Release,9064,en/stable/generated/scanpy.Neighbors.compute_eigen.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_eigen.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.compute_neighbors. Contents . Neighbors.compute_neighbors(). scanpy.Neighbors.compute_neighbors#. Neighbors.compute_neighbors(n_neighbors=30, n_pcs=None, *, use_rep=None, knn=True, method='umap', transformer=None, metric='euclidean', metric_kwds=mappingproxy({}), random_state=0)[source]#; Compute distances and connectivities of neighbors. Parameters:. n_neighbors int (default: 30)Use this number of nearest neighbors. n_pcs int | None (default: None)Use this many PCs. If n_pcs==0 use .X if use_rep is None. use_rep str | None (default: None)Use the indicated representation. 'X' or any key for .obsm is valid.; If None, the representation is chosen automatically:; For .n_vars < N_PCS (default: 50), .X is used, otherwise ‘X_pca’ is used.; If ‘X_pca’ is not present, it’s computed with default parameters or n_pcs if present. knn bool (default: True)Restrict result ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_neighbors.html:9068,Release,Release,9068,en/stable/generated/scanpy.Neighbors.compute_neighbors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.compute_neighbors.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig. Contents . ScanpyConfig. scanpy._settings.ScanpyConfig#. class scanpy._settings.ScanpyConfig(*, verbosity=Verbosity.warning, plot_suffix='', file_format_data='h5ad', file_format_figs='pdf', autosave=False, autoshow=True, writedir='./write/', cachedir='./cache/', datasetdir='./data/', figdir='./figures/', cache_compression='lzf', max_memory=15, n_jobs=1, logfile=None, categories_to_ignore=('N/A', 'dontknow', 'no_gate', '?'), _frameon=True, _vector_friendly=False, _low_resolution_warning=True, n_pcs=50)[source]#; Config manager for scanpy.; Attributes. autosave; Automatically save figures in figdir (default False). autoshow; Automatically show figures if autosave == False (default True). cache_compression; Compression for sc.read(..., cache=True) (default 'lzf'). cachedir; Directory for cache files (default './cache/'). categories_to_ignore; Cate",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.html:9063,Release,Release,9063,en/stable/generated/scanpy._settings.ScanpyConfig.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.set_figure_params. Contents . ScanpyConfig.set_figure_params(). scanpy._settings.ScanpyConfig.set_figure_params#. ScanpyConfig.set_figure_params(*, scanpy=True, dpi=80, dpi_save=150, frameon=True, vector_friendly=True, fontsize=14, figsize=None, color_map=None, format='pdf', facecolor=None, transparent=False, ipython_format='png2x')[source]#; Set resolution/size, styling and format of figures. Parameters:. scanpy bool (default: True)Init default values for matplotlib.rcParams suited for Scanpy. dpi int (default: 80)Resolution of rendered figures – this influences the size of figures in notebooks. dpi_save int (default: 150)Resolution of saved figures. This should typically be higher to achieve; publication quality. frameon bool (default: True)Add frames and axes labels to scatter plots. vector_friendly bool (default: True)Plot scatter plots usin",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.set_figure_params.html:9081,Release,Release,9081,en/stable/generated/scanpy._settings.ScanpyConfig.set_figure_params.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.set_figure_params.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.blobs. Contents . blobs(). scanpy.datasets.blobs#. scanpy.datasets.blobs(*, n_variables=11, n_centers=5, cluster_std=1.0, n_observations=640, random_state=0)[source]#; Gaussian Blobs. Parameters:. n_variables int (default: 11)Dimension of feature space. n_centers int (default: 5)Number of cluster centers. cluster_std float (default: 1.0)Standard deviation of clusters. n_observations int (default: 640)Number of observations. By default, this is the same observation number; as in scanpy.datasets.krumsiek11(). random_state Union[int, RandomState, None] (default: 0)Determines random number generation for dataset creation. Return type:; AnnData. Returns:; Annotated data matrix containing a observation annotation ‘blobs’ that; indicates cluster identity. Examples; >>> import scanpy as sc; >>> sc.datasets.blobs(); AnnData object with n_obs × n_vars = 640 × 11; obs: ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.blobs.html:9055,Release,Release,9055,en/stable/generated/scanpy.datasets.blobs.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.blobs.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.ebi_expression_atlas. Contents . ebi_expression_atlas(). scanpy.datasets.ebi_expression_atlas#. scanpy.datasets.ebi_expression_atlas(accession, *, filter_boring=False)[source]#; Load a dataset from the EBI Single Cell Expression Atlas.; The atlas can be browsed online to find the accession you want.; Downloaded datasets are saved in the directory specified by; datasetdir. Parameters:. accession strDataset accession. Like E-GEOD-98816 or E-MTAB-4888.; This can be found in the url on the datasets page, for example E-GEOD-98816. filter_boring bool (default: False)Whether boring labels in .obs should be automatically removed, such as; labels with a single or n_obs distinct values. Return type:; AnnData. Returns:; Annotated data matrix. Example; >>> import scanpy as sc; >>> sc.datasets.ebi_expression_atlas(""E-MTAB-4888"") ; AnnData object with n_obs × n_vars = 2261",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.ebi_expression_atlas.html:9070,Release,Release,9070,en/stable/generated/scanpy.datasets.ebi_expression_atlas.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.ebi_expression_atlas.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.krumsiek11. Contents . krumsiek11(). scanpy.datasets.krumsiek11#. scanpy.datasets.krumsiek11()[source]#; Simulated myeloid progenitors [Krumsiek et al., 2011].; The literature-curated boolean network from Krumsiek et al. [2011] was used to; simulate the data. It describes development to four cell fates annotated in; obs[""cell_type""]:; “monocyte” (Mo), “erythrocyte” (Ery), “megakaryocyte” (Mk) and “neutrophil” (Neu).; See also the discussion of this data in Wolf et al. [2019].; Simulate via sim(). Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.krumsiek11(); UserWarning: Observation names are not unique. To make them unique, call `.obs_names_make_unique`.; utils.warn_names_duplicates(""obs""); AnnData object with n_obs × n_vars = 640 × 11; obs: 'cell_type'; uns: 'iroot', 'highlights'. previous; scanpy.da",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.krumsiek11.html:9060,Release,Release,9060,en/stable/generated/scanpy.datasets.krumsiek11.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.krumsiek11.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.moignard15. Contents . moignard15(). scanpy.datasets.moignard15#. scanpy.datasets.moignard15()[source]#; Hematopoiesis in early mouse embryos [Moignard et al., 2015].; The data was obtained using qRT–PCR.; X contains the normalized dCt values from supp. table 7 of the publication.; obs[""exp_groups""] contains the stages derived by; flow sorting and GFP marker status:; “primitive streak” (PS), “neural plate” (NP), “head fold (HF),; “four somite” blood/GFP⁺ (4SG), and “four somite” endothelial/GFP¯ (4SFG). Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.moignard15(); AnnData object with n_obs × n_vars = 3934 × 42; obs: 'exp_groups'; uns: 'iroot', 'exp_groups_colors'. previous; scanpy.datasets.krumsiek11. next; scanpy.datasets.pbmc3k. Contents; . moignard15(). By Scanpy development team. ; © Copyright 202",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.moignard15.html:9060,Release,Release,9060,en/stable/generated/scanpy.datasets.moignard15.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.moignard15.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.pbmc3k. Contents . pbmc3k(). scanpy.datasets.pbmc3k#. scanpy.datasets.pbmc3k()[source]#; 3k PBMCs from 10x Genomics.; The data consists in 3k PBMCs from a Healthy Donor and is freely available; from 10x Genomics (file from this webpage).; The exact same data is also used in Seurat’s basic clustering tutorial. Note; This downloads 5.9 MB of data upon the first call of the function and stores it in; datasetdir/pbmc3k_raw.h5ad. The following code was run to produce the file.; adata = sc.read_10x_mtx(; # the directory with the `.mtx` file; './data/filtered_gene_bc_matrices/hg19/',; # use gene symbols for the variable names (variables-axis index); var_names='gene_symbols',; # write a cache file for faster subsequent reading; cache=True,; ). adata.var_names_make_unique() # this is unnecessary if using 'gene_ids'; adata.write('write/pbmc3k_raw.h5ad', compression='gz",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k.html:9056,Release,Release,9056,en/stable/generated/scanpy.datasets.pbmc3k.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.pbmc3k_processed. Contents . pbmc3k_processed(). scanpy.datasets.pbmc3k_processed#. scanpy.datasets.pbmc3k_processed()[source]#; Processed 3k PBMCs from 10x Genomics.; Processed using the basic tutorial Preprocessing and clustering 3k PBMCs (legacy workflow).; For preprocessing, cells are filtered out that have few gene counts or too high a percent_mito.; The counts are logarithmized and only genes marked by highly_variable_genes() are retained.; The obs variables n_counts and percent_mito are corrected for; using regress_out(), and values are scaled and clipped by scale().; Finally, pca() and neighbors() are calculated.; As analysis steps, the embeddings tsne() and umap() are performed.; Communities are identified using louvain() and marker genes using rank_genes_groups(). Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k_processed.html:9066,Release,Release,9066,en/stable/generated/scanpy.datasets.pbmc3k_processed.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc3k_processed.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.pbmc68k_reduced. Contents . pbmc68k_reduced(). scanpy.datasets.pbmc68k_reduced#. scanpy.datasets.pbmc68k_reduced()[source]#; Subsampled and processed 68k PBMCs.; PBMC 68k dataset from 10x Genomics.; The original PBMC 68k dataset was preprocessed with steps including; normalize_total()[1] and scale().; It was saved keeping only 724 cells and 221 highly variable genes.; The saved file contains the annotation of cell types (key: 'bulk_labels'),; UMAP coordinates, louvain clustering and gene rankings based on the; bulk_labels. [1]; Back when the dataset was created, normalize_per_cell() was used instead. Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.pbmc68k_reduced(); AnnData object with n_obs × n_vars = 700 × 765; obs: 'bulk_labels', 'n_genes', 'percent_mito', 'n_counts', 'S_score', 'G2M_score', 'phase",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc68k_reduced.html:9065,Release,Release,9065,en/stable/generated/scanpy.datasets.pbmc68k_reduced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.pbmc68k_reduced.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.datasets.visium_sge. Contents . visium_sge(). scanpy.datasets.visium_sge#. scanpy.datasets.visium_sge(sample_id='V1_Breast_Cancer_Block_A_Section_1', *, include_hires_tiff=False)[source]#; Processed Visium Spatial Gene Expression data from 10x Genomics’ database.; The database can be browsed online to find the sample_id you want. Parameters:. sample_id Literal['V1_Breast_Cancer_Block_A_Section_1', 'V1_Breast_Cancer_Block_A_Section_2', 'V1_Human_Heart', 'V1_Human_Lymph_Node', 'V1_Mouse_Kidney', 'V1_Adult_Mouse_Brain', 'V1_Mouse_Brain_Sagittal_Posterior', 'V1_Mouse_Brain_Sagittal_Posterior_Section_2', 'V1_Mouse_Brain_Sagittal_Anterior', 'V1_Mouse_Brain_Sagittal_Anterior_Section_2', 'V1_Human_Brain_Section_1', 'V1_Human_Brain_Section_2', 'V1_Adult_Mouse_Brain_Coronal_Section_1', 'V1_Adult_Mouse_Brain_Coronal_Section_2', 'Targeted_Visium_Human_Cerebellum_Neuroscience', 'P",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.visium_sge.html:9060,Release,Release,9060,en/stable/generated/scanpy.datasets.visium_sge.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.visium_sge.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.experimental.pp.highly_variable_genes. Contents . highly_variable_genes(). scanpy.experimental.pp.highly_variable_genes#. scanpy.experimental.pp.highly_variable_genes(adata, *, theta=100, clip=None, n_top_genes=None, batch_key=None, chunksize=1000, flavor='pearson_residuals', check_values=True, layer=None, subset=False, inplace=True)[source]#; Select highly variable genes using analytic Pearson residuals [Lause et al., 2021].; In Lause et al. [2021], Pearson residuals of a negative binomial offset model are computed; (with overdispersion theta shared across genes). By default, overdispersion; theta=100 is used and residuals are clipped to sqrt(n_obs). Finally, genes; are ranked by residual variance.; Expects raw count input. Parameters:. adata AnnDataThe annotated data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. theta float (default",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html:9078,Release,Release,9078,en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.experimental.pp.normalize_pearson_residuals. Contents . normalize_pearson_residuals(). scanpy.experimental.pp.normalize_pearson_residuals#. scanpy.experimental.pp.normalize_pearson_residuals(adata, *, theta=100, clip=None, check_values=True, layer=None, inplace=True, copy=False)[source]#; Applies analytic Pearson residual normalization, based on Lause et al. [2021].; The residuals are based on a negative binomial offset model with overdispersion; theta shared across genes. By default, residuals are clipped to sqrt(n_obs); and overdispersion theta=100 is used.; Expects raw count input. Parameters:. adata AnnDataThe annotated data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. theta float (default: 100)The negative binomial overdispersion parameter theta for Pearson residuals.; Higher values correspond to less overdispersion (var = mean ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html:9084,Release,Release,9084,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.experimental.pp.normalize_pearson_residuals_pca. Contents . normalize_pearson_residuals_pca(). scanpy.experimental.pp.normalize_pearson_residuals_pca#. scanpy.experimental.pp.normalize_pearson_residuals_pca(adata, *, theta=100, clip=None, n_comps=50, random_state=0, kwargs_pca=mappingproxy({}), mask_var=_empty, use_highly_variable=None, check_values=True, inplace=True)[source]#; Applies analytic Pearson residual normalization and PCA, based on Lause et al. [2021].; The residuals are based on a negative binomial offset model with overdispersion; theta shared across genes. By default, residuals are clipped to sqrt(n_obs),; overdispersion theta=100 is used, and PCA is run with 50 components.; Operates on the subset of highly variable genes in adata.var['highly_variable']; by default. Expects raw count input. Parameters:. adata AnnDataThe annotated data matrix of shape n_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html:9088,Release,Release,9088,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.experimental.pp.recipe_pearson_residuals. Contents . recipe_pearson_residuals(). scanpy.experimental.pp.recipe_pearson_residuals#. scanpy.experimental.pp.recipe_pearson_residuals(adata, *, theta=100, clip=None, n_top_genes=1000, batch_key=None, chunksize=1000, n_comps=50, random_state=0, kwargs_pca={}, check_values=True, inplace=True)[source]#; Full pipeline for HVG selection and normalization by analytic Pearson residuals [Lause et al., 2021].; Applies gene selection based on Pearson residuals. On the resulting subset,; Pearson residual normalization and PCA are performed.; Expects raw count input. Parameters:. adata AnnDataThe annotated data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. theta float (default: 100)The negative binomial overdispersion parameter theta for Pearson residuals.; Higher values correspond to less overdispersi",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html:9081,Release,Release,9081,en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.exporting.cellbrowser. Contents . cellbrowser(). scanpy.external.exporting.cellbrowser#. scanpy.external.exporting.cellbrowser(adata, data_dir, data_name, *, embedding_keys=None, annot_keys=('louvain', 'percent_mito', 'n_genes', 'n_counts'), cluster_field='louvain', nb_marker=50, skip_matrix=False, html_dir=None, port=None, do_debug=False)[source]#; Export adata to a UCSC Cell Browser project directory. If html_dir is; set, subsequently build the html files from the project directory into; html_dir. If port is set, start an HTTP server in the background and; serve html_dir on port.; By default, export all gene expression data from adata.raw, the; annotations louvain, percent_mito, n_genes and n_counts and the top; nb_marker cluster markers. All existing files in data_dir are; overwritten, except cellbrowser.conf.; See UCSC Cellbrowser for; details. Parameters",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.cellbrowser.html:9071,Release,Release,9071,en/stable/generated/scanpy.external.exporting.cellbrowser.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.cellbrowser.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.exporting.spring_project. Contents . spring_project(). scanpy.external.exporting.spring_project#. scanpy.external.exporting.spring_project(adata, project_dir, embedding_method, *, subplot_name=None, cell_groupings=None, custom_color_tracks=None, total_counts_key='n_counts', neighbors_key=None, overwrite=False)[source]#; Exports to a SPRING project directory [Weinreb et al., 2017].; Visualize annotation present in adata. By default, export all gene expression data; from adata.raw and categorical and continuous annotations present in adata.obs.; See SPRING or Weinreb et al. [2017] for details. Parameters:. adata AnnDataAnnotated data matrix: adata.uns['neighbors'] needs to; be present. project_dir Path | strPath to directory for exported SPRING files. embedding_method strName of a 2-D embedding in adata.obsm. subplot_name str | None (default: None)Name of subpl",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.spring_project.html:9074,Release,Release,9074,en/stable/generated/scanpy.external.exporting.spring_project.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.spring_project.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pl.phate. Contents . phate(). scanpy.external.pl.phate#. scanpy.external.pl.phate(adata, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color='lightgray', na_in_legend=True, size=None, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', **kwargs)[source]#; Scatter plot in PHATE ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html:9058,Release,Release,9058,en/stable/generated/scanpy.external.pl.phate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.phate.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pl.sam. Contents . sam(). scanpy.external.pl.sam#. scanpy.external.pl.sam(adata, projection='X_umap', *, c=None, cmap='Spectral_r', linewidth=0.0, edgecolor='k', axes=None, colorbar=True, s=10.0, **kwargs)[source]#; Scatter plot using the SAM projection or another input projection. Parameters:. projection str | ndarray (default: 'X_umap')A case-sensitive string indicating the projection to display (a key; in adata.obsm) or a 2D numpy array with cell coordinates. If None,; projection defaults to UMAP. c str | ndarray | None (default: None)Cell color values overlaid on the projection. Can be a string from adata.obs; to overlay cluster assignments / annotations or a 1D numpy array. axes Axes | None (default: None)Plot output to the specified, existing axes. If None, create new; figure window. kwargs Anyall keyword arguments in matplotlib.pyplot.scatter are eligi",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.sam.html:9056,Release,Release,9056,en/stable/generated/scanpy.external.pl.sam.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.sam.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pl.trimap. Contents . trimap(). scanpy.external.pl.trimap#. scanpy.external.pl.trimap(adata, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color='lightgray', na_in_legend=True, size=None, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', **kwargs)[source]#; Scatter plot in Tr",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.trimap.html:9059,Release,Release,9059,en/stable/generated/scanpy.external.pl.trimap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.trimap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pl.wishbone_marker_trajectory. Contents . wishbone_marker_trajectory(). scanpy.external.pl.wishbone_marker_trajectory#. scanpy.external.pl.wishbone_marker_trajectory(adata, markers, *, no_bins=150, smoothing_factor=1, min_delta=0.1, show_variance=False, figsize=None, return_fig=False, show=True, save=None, ax=None)[source]#; Plot marker trends along trajectory, and return trajectory branches for further; analysis and visualization (heatmap, etc..). Parameters:. adata AnnDataAnnotated data matrix. markers Collection[str]Iterable of markers/genes to be plotted. show_variance bool (default: False)Logical indicating if the trends should be accompanied with variance. no_bins int (default: 150)Number of bins for calculating marker density. smoothing_factor int (default: 1)Parameter controlling the degree of smoothing. min_delta float (default: 0.1)Minimum differenc",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html:9079,Release,Release,9079,en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.bbknn. Contents . bbknn(). scanpy.external.pp.bbknn#. scanpy.external.pp.bbknn(adata, *, batch_key='batch', use_rep='X_pca', approx=True, use_annoy=True, metric='euclidean', copy=False, neighbors_within_batch=3, n_pcs=50, trim=None, annoy_n_trees=10, pynndescent_n_neighbors=30, pynndescent_random_state=0, use_faiss=True, set_op_mix_ratio=1.0, local_connectivity=1, **kwargs)[source]#; Batch balanced kNN [Polański et al., 2019].; Batch balanced kNN alters the kNN procedure to identify each cell’s top neighbours in; each batch separately instead of the entire cell pool with no accounting for batch.; The nearest neighbours for each batch are then merged to create a final list of; neighbours for the cell. Aligns batches in a quick and lightweight manner.; For use in the scanpy workflow as an alternative to neighbors(). Note; This is just a wrapper of bbknn.bbkn",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.bbknn.html:9058,Release,Release,9058,en/stable/generated/scanpy.external.pp.bbknn.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.bbknn.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.dca. Contents . dca(). scanpy.external.pp.dca#. scanpy.external.pp.dca(adata, mode='denoise', *, ae_type='nb-conddisp', normalize_per_cell=True, scale=True, log1p=True, hidden_size=(64, 32, 64), hidden_dropout=0.0, batchnorm=True, activation='relu', init='glorot_uniform', network_kwds=mappingproxy({}), epochs=300, reduce_lr=10, early_stop=15, batch_size=32, optimizer='RMSprop', random_state=0, threads=None, learning_rate=None, verbose=False, training_kwds=mappingproxy({}), return_model=False, return_info=False, copy=False)[source]#; Deep count autoencoder [Eraslan et al., 2019].; Fits a count autoencoder to the raw count data given in the anndata object; in order to denoise the data and to capture hidden representation of; cells in low dimensions. Type of the autoencoder and return values are; determined by the parameters. Note; More information and bug re",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.dca.html:9056,Release,Release,9056,en/stable/generated/scanpy.external.pp.dca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.dca.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.harmony_integrate. Contents . harmony_integrate(). scanpy.external.pp.harmony_integrate#. scanpy.external.pp.harmony_integrate(adata, key, *, basis='X_pca', adjusted_basis='X_pca_harmony', **kwargs)[source]#; Use harmonypy [Korsunsky et al., 2019] to integrate different experiments.; Harmony [Korsunsky et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments. This function uses the python; port of Harmony, harmonypy, to integrate single-cell data; stored in an AnnData object. As Harmony works by adjusting the; principal components, this function should be run after performing; PCA but before computing the neighbor graph, as illustrated in the; example below. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. basis str (default: 'X_p",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html:9070,Release,Release,9070,en/stable/generated/scanpy.external.pp.harmony_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.hashsolo. Contents . hashsolo(). scanpy.external.pp.hashsolo#. scanpy.external.pp.hashsolo(adata, cell_hashing_columns, *, priors=(0.01, 0.8, 0.19), pre_existing_clusters=None, number_of_noise_barcodes=None, inplace=True)[source]#; Probabilistic demultiplexing of cell hashing data using HashSolo [Bernstein et al., 2020]. Note; More information and bug reports here. Parameters:. adata AnnDataThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. cell_hashing_columns Sequence[str].obs columns that contain cell hashing counts. priors tuple[float, float, float] (default: (0.01, 0.8, 0.19))Prior probabilities of each hypothesis, in; the order [negative, singlet, doublet]. The default is set to; [0.01, 0.8, 0.19] assuming barcode counts are from cells that; have passed QC in the transcriptome space, e.g. UMI counts, ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.hashsolo.html:9061,Release,Release,9061,en/stable/generated/scanpy.external.pp.hashsolo.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.hashsolo.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.magic. Contents . magic(). scanpy.external.pp.magic#. scanpy.external.pp.magic(adata, name_list=None, *, knn=5, decay=1, knn_max=None, t=3, n_pca=100, solver='exact', knn_dist='euclidean', random_state=None, n_jobs=None, verbose=False, copy=None, **kwargs)[source]#; Markov Affinity-based Graph Imputation of Cells (MAGIC) API [van Dijk et al., 2018].; MAGIC is an algorithm for denoising and transcript recover of single cells; applied to single-cell sequencing data. MAGIC builds a graph from the data; and uses diffusion to smooth out noise and recover the data manifold.; The algorithm implemented here has changed primarily in two ways; compared to the algorithm described in van Dijk et al. [2018]. Firstly, we use; the adaptive kernel described in Moon et al. [2019] for; improved stability. Secondly, data diffusion is applied; in the PCA space, rather than th",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html:9058,Release,Release,9058,en/stable/generated/scanpy.external.pp.magic.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.mnn_correct. Contents . mnn_correct(). scanpy.external.pp.mnn_correct#. scanpy.external.pp.mnn_correct(*datas, var_index=None, var_subset=None, batch_key='batch', index_unique='-', batch_categories=None, k=20, sigma=1.0, cos_norm_in=True, cos_norm_out=True, svd_dim=None, var_adj=True, compute_angle=False, mnn_order=None, svd_mode='rsvd', do_concatenate=True, save_raw=False, n_jobs=None, **kwargs)[source]#; Correct batch effects by matching mutual nearest neighbors [Haghverdi et al., 2018] [Kang, 2018].; This uses the implementation of mnnpy [Kang, 2018].; Depending on do_concatenate, returns matrices or AnnData objects in the; original order containing corrected expression values or a concatenated; matrix or AnnData object.; Be reminded that it is not advised to use the corrected data matrices for; differential expression testing.; More information and bug",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.mnn_correct.html:9064,Release,Release,9064,en/stable/generated/scanpy.external.pp.mnn_correct.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.mnn_correct.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.scanorama_integrate. Contents . scanorama_integrate(). scanpy.external.pp.scanorama_integrate#. scanpy.external.pp.scanorama_integrate(adata, key, *, basis='X_pca', adjusted_basis='X_scanorama', knn=20, sigma=15, approx=True, alpha=0.1, batch_size=5000, **kwargs)[source]#; Use Scanorama [Hie et al., 2019] to integrate different experiments.; Scanorama [Hie et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments stored in an AnnData object. This; function should be run after performing PCA but before computing; the neighbor graph, as illustrated in the example below.; This uses the implementation of scanorama [Hie et al., 2019]. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. Cells from the same batch must be; contiguously stored",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:9072,Release,Release,9072,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.cyclone. Contents . cyclone(). scanpy.external.tl.cyclone#. scanpy.external.tl.cyclone(adata, marker_pairs=None, *, iterations=1000, min_iter=100, min_pairs=50)[source]#; Assigns scores and predicted class to observations [Scialdone et al., 2015] [Fechtner, 2018].; Calculates scores for each observation and each phase and assigns prediction; based on marker pairs indentified by sandbag().; This reproduces the approach of Scialdone et al. [2015] in the implementation of; Fechtner [2018]. Parameters:. adata AnnDataThe annotated data matrix. marker_pairs Mapping[str, Collection[tuple[str, str]]] | None (default: None)Mapping of categories to lists of marker pairs.; See sandbag() output. iterations int (default: 1000)An integer scalar specifying the number of; iterations for random sampling to obtain a cycle score. min_iter int (default: 100)An integer scalar ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html:9060,Release,Release,9060,en/stable/external/generated/scanpy.external.tl.cyclone.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.cyclone.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.harmony_timeseries. Contents . harmony_timeseries(). scanpy.external.tl.harmony_timeseries#. scanpy.external.tl.harmony_timeseries(adata, tp, *, n_neighbors=30, n_components=1000, n_jobs=-2, copy=False)[source]#; Harmony time series for data visualization with augmented affinity matrix; at discrete time points [Nowotschin et al., 2019].; Harmony time series is a framework for data visualization, trajectory; detection and interpretation for scRNA-seq data measured at discrete; time points. Harmony constructs an augmented affinity matrix by augmenting; the kNN graph affinity matrix with mutually nearest neighbors between; successive time points. This augmented affinity matrix forms the basis for; generated a force directed layout for visualization and also serves as input; for computing the diffusion operator which can be used for trajectory; detection using",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html:9071,Release,Release,9071,en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.harmony_timeseries.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir. Contents . palantir(). scanpy.external.tl.palantir#. scanpy.external.tl.palantir(adata, *, n_components=10, knn=30, alpha=0, use_adjacency_matrix=False, distances_key=None, n_eigs=None, impute_data=True, n_steps=3, copy=False)[source]#; Run Diffusion maps using the adaptive anisotropic kernel [Setty et al., 2019].; Palantir is an algorithm to align cells along differentiation trajectories.; Palantir models differentiation as a stochastic process where stem cells; differentiate to terminally differentiated cells by a series of steps through; a low dimensional phenotypic manifold. Palantir effectively captures the; continuity in cell states and the stochasticity in cell fate determination.; Palantir has been designed to work with multidimensional single cell data; from diverse technologies such as Mass cytometry and single cell RNA-seq. Note; More ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html:9061,Release,Release,9061,en/stable/external/generated/scanpy.external.tl.palantir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.palantir_results. Contents . palantir_results(). scanpy.external.tl.palantir_results#. scanpy.external.tl.palantir_results(adata, early_cell, *, ms_data='X_palantir_multiscale', terminal_states=None, knn=30, num_waypoints=1200, n_jobs=-1, scale_components=True, use_early_cell_as_start=False, max_iterations=25)[source]#; Running Palantir; A convenience function that wraps palantir.core.run_palantir to compute branch; probabilities and waypoints. Parameters:. adata AnnDataAn AnnData object. early_cell strStart cell for pseudotime construction. ms_data str (default: 'X_palantir_multiscale')Palantir multi scale data matrix,. terminal_states list | None (default: None)List of user defined terminal states. knn int (default: 30)Number of nearest neighbors for graph construction. num_waypoints int (default: 1200)Number of waypoints to sample. n_jobs int (default: ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html:9069,Release,Release,9069,en/stable/external/generated/scanpy.external.tl.palantir_results.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.palantir_results.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phate. Contents . phate(). scanpy.external.tl.phate#. scanpy.external.tl.phate(adata, n_components=2, *, k=5, a=15, n_landmark=2000, t='auto', gamma=1.0, n_pca=100, knn_dist='euclidean', mds_dist='euclidean', mds='metric', n_jobs=None, random_state=None, verbose=None, copy=False, **kwargs)[source]#; PHATE [Moon et al., 2019].; Potential of Heat-diffusion for Affinity-based Trajectory Embedding (PHATE); embeds high dimensional single-cell data into two or three dimensions for; visualization of biological progressions.; For more information and access to the object-oriented interface, read the; PHATE documentation. For; tutorials, bug reports, and R/MATLAB implementations, visit the PHATE; GitHub page. For help; using PHATE, go here. Parameters:. adata AnnDataAnnotated data matrix. n_components int (default: 2)number of dimensions in which the data will be e",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:9058,Release,Release,9058,en/stable/external/generated/scanpy.external.tl.phate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.phenograph. Contents . phenograph(). scanpy.external.tl.phenograph#. scanpy.external.tl.phenograph(data, clustering_algo='louvain', *, k=30, directed=False, prune=False, min_cluster_size=10, jaccard=True, primary_metric='euclidean', n_jobs=-1, q_tol=0.001, louvain_time_limit=2000, nn_method='kdtree', partition_type=None, resolution_parameter=1, n_iterations=-1, use_weights=True, seed=None, copy=False, **kargs)[source]#; PhenoGraph clustering [Levine et al., 2015].; PhenoGraph is a clustering method designed for high-dimensional single-cell; data. It works by creating a graph (“network”) representing phenotypic similarities; between cells and then identifying communities in this graph. It supports both; Louvain and Leiden algorithms for community detection. Note; More information and bug reports here. Parameters:. data AnnData | ndarray | spmatrixAnnData, o",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html:9063,Release,Release,9063,en/stable/external/generated/scanpy.external.tl.phenograph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phenograph.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.sam. Contents . sam(). scanpy.external.tl.sam#. scanpy.external.tl.sam(adata, *, max_iter=10, num_norm_avg=50, k=20, distance='correlation', standardization='StandardScaler', weight_pcs=False, sparse_pca=False, n_pcs=150, n_genes=3000, projection='umap', inplace=True, verbose=True)[source]#; Self-Assembling Manifolds single-cell RNA sequencing analysis tool [Tarashansky et al., 2019].; SAM iteratively rescales the input gene expression matrix to emphasize; genes that are spatially variable along the intrinsic manifold of the data.; It outputs the gene weights, nearest neighbor matrix, and a 2D projection.; The AnnData input should contain unstandardized, non-negative values.; Preferably, the data should be log-normalized and no genes should be filtered out. Parameters:. k int (default: 20)The number of nearest neighbors to identify for each cell. distance ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html:9056,Release,Release,9056,en/stable/external/generated/scanpy.external.tl.sam.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sam.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.sandbag. Contents . sandbag(). scanpy.external.tl.sandbag#. scanpy.external.tl.sandbag(adata, annotation=None, *, fraction=0.65, filter_genes=None, filter_samples=None)[source]#; Calculate marker pairs of genes [Fechtner, 2018, Scialdone et al., 2015].; Calculates the pairs of genes serving as marker pairs for each phase,; based on a matrix of gene counts and an annotation of known phases.; This reproduces the approach of Scialdone et al. [2015] in the implementation of; Fechtner [2018].; More information and bug reports here. Parameters:. adata AnnDataThe annotated data matrix. annotation Mapping[str, Collection[Union[str, int, bool]]] | None (default: None)Mapping from category to genes, e.g. {'phase': [Gene1, ...]}.; Defaults to data.vars['category']. fraction float (default: 0.65)Fraction of cells per category where marker criteria must be satisfied. f",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html:9060,Release,Release,9060,en/stable/external/generated/scanpy.external.tl.sandbag.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.sandbag.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.trimap. Contents . trimap(). scanpy.external.tl.trimap#. scanpy.external.tl.trimap(adata, n_components=2, *, n_inliers=10, n_outliers=5, n_random=5, metric='euclidean', weight_adj=500.0, lr=1000.0, n_iters=400, verbose=None, copy=False)[source]#; TriMap: Large-scale Dimensionality Reduction Using Triplets [Amid and Warmuth, 2019].; TriMap is a dimensionality reduction method that uses triplet constraints; to form a low-dimensional embedding of a set of points. The triplet; constraints are of the form “point i is closer to point j than point k”.; The triplets are sampled from the high-dimensional representation of the; points and a weighting scheme is used to reflect the importance of each; triplet.; TriMap provides a significantly better global view of the data than the; other dimensionality reduction methods such t-SNE, LargeVis, and UMAP.; The global str",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html:9059,Release,Release,9059,en/stable/external/generated/scanpy.external.tl.trimap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.trimap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.tl.wishbone. Contents . wishbone(). scanpy.external.tl.wishbone#. scanpy.external.tl.wishbone(adata, start_cell, *, branch=True, k=15, components=(1, 2, 3), num_waypoints=250)[source]#; Wishbone identifies bifurcating developmental trajectories from single-cell data; [Setty et al., 2016].; Wishbone is an algorithm for positioning single cells along bifurcating; developmental trajectories with high resolution. Wishbone uses multi-dimensional; single-cell data, such as mass cytometry or RNA-Seq data, as input and orders cells; according to their developmental progression, and it pinpoints bifurcation points; by labeling each cell as pre-bifurcation or as one of two post-bifurcation cell; fates. Note; More information and bug reports here. Parameters:. adata AnnDataAnnotated data matrix. start_cell strDesired start cell from obs_names. branch bool (default: True",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html:9061,Release,Release,9061,en/stable/external/generated/scanpy.external.tl.wishbone.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.wishbone.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.get.aggregate. Contents . aggregate(). scanpy.get.aggregate#. scanpy.get.aggregate(adata, by, func, *, axis=None, mask=None, dof=1, layer=None, obsm=None, varm=None)[source]#; Aggregate data matrix based on some categorical grouping.; This function is useful for pseudobulking as well as plotting.; Aggregation to perform is specified by func, which can be a single metric or a; list of metrics. Each metric is computed over the group and results in a new layer; in the output AnnData object.; If none of layer, obsm, or varm are passed in, X will be used for aggregation data. Parameters:. adata AnnDataAnnData to be aggregated. by str | Collection[str]Key of the column to be grouped-by. func Union[Literal['count_nonzero', 'mean', 'sum', 'var'], Iterable[Literal['count_nonzero', 'mean', 'sum', 'var']]]How to aggregate. axis Optional[Literal['obs', 0, 'var', 1]] (default: Non",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.aggregate.html:9054,Release,Release,9054,en/stable/generated/scanpy.get.aggregate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.aggregate.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.get.obs_df. Contents . obs_df(). scanpy.get.obs_df#. scanpy.get.obs_df(adata, keys=(), obsm_keys=(), *, layer=None, gene_symbols=None, use_raw=False)[source]#; Return values for observations in adata. Parameters:. adata AnnDataAnnData object to get values from. keys Iterable[str] (default: ())Keys from either .var_names, .var[gene_symbols], or .obs.columns. obsm_keys Iterable[tuple[str, int]] (default: ())Tuple of (key from obsm, column index of obsm[key]). layer str | None (default: None)Layer of adata to use as expression values. gene_symbols str | None (default: None)Column of adata.var to search for keys in. use_raw bool (default: False)Whether to get expression values from adata.raw. Return type:; DataFrame. Returns:; A dataframe with adata.obs_names as index, and values specified by keys; and obsm_keys. Examples; Getting value for plotting:; >>> import scanpy as",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.obs_df.html:9051,Release,Release,9051,en/stable/generated/scanpy.get.obs_df.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.obs_df.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.get.rank_genes_groups_df. Contents . rank_genes_groups_df(). scanpy.get.rank_genes_groups_df#. scanpy.get.rank_genes_groups_df(adata, group, *, key='rank_genes_groups', pval_cutoff=None, log2fc_min=None, log2fc_max=None, gene_symbols=None)[source]#; scanpy.tl.rank_genes_groups() results in the form of a; DataFrame. Parameters:. adata AnnDataObject to get results from. group str | Iterable[str] | NoneWhich group (as in scanpy.tl.rank_genes_groups()’s groupby; argument) to return results from. Can be a list. All groups are; returned if groups is None. key str (default: 'rank_genes_groups')Key differential expression groups were stored under. pval_cutoff float | None (default: None)Return only adjusted p-values below the cutoff. log2fc_min float | None (default: None)Minimum logfc to return. log2fc_max float | None (default: None)Maximum logfc to return. gene_symbols str",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.rank_genes_groups_df.html:9065,Release,Release,9065,en/stable/generated/scanpy.get.rank_genes_groups_df.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.get.rank_genes_groups_df.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.metrics.confusion_matrix. Contents . confusion_matrix(). scanpy.metrics.confusion_matrix#. scanpy.metrics.confusion_matrix(orig, new, data=None, *, normalize=True)[source]#; Given an original and new set of labels, create a labelled confusion matrix.; Parameters orig and new can either be entries in data or categorical arrays; of the same size. Parameters:. orig Series | ndarray | SequenceOriginal labels. new Series | ndarray | SequenceNew labels. data DataFrame | None (default: None)Optional dataframe to fill entries from. normalize bool (default: True)Should the confusion matrix be normalized?. Return type:; DataFrame. Examples; import scanpy as sc; import seaborn as sns; pbmc = sc.datasets.pbmc68k_reduced(); cmtx = sc.metrics.confusion_matrix(""bulk_labels"", ""louvain"", pbmc.obs); sns.heatmap(cmtx). previous; Metrics. next; scanpy.metrics.gearys_c. Contents; . confus",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.confusion_matrix.html:9065,Release,Release,9065,en/stable/generated/scanpy.metrics.confusion_matrix.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.confusion_matrix.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.metrics.gearys_c. Contents . gearys_c(). scanpy.metrics.gearys_c#. scanpy.metrics.gearys_c(adata, *, vals=None, use_graph=None, layer=None, obsm=None, obsp=None, use_raw=False)[source]#; Calculate Geary’s C, as used; by VISION.; Geary’s C is a measure of autocorrelation for some measure on a graph. This; can be to whether measures are correlated between neighboring cells. Lower; values indicate greater correlation. \[C =; \frac{; (N - 1)\sum_{i,j} w_{i,j} (x_i - x_j)^2; }{; 2W \sum_i (x_i - \bar{x})^2; }\]. Parameters:. adata AnnData. vals ndarray | spmatrix | None (default: None)Values to calculate Geary’s C for. If this is two dimensional, should; be of shape (n_features, n_cells). Otherwise should be of shape; (n_cells,). This matrix can be selected from elements of the anndata; object by using key word arguments: layer, obsm, obsp, or; use_raw. use_graph str | Non",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.gearys_c.html:9057,Release,Release,9057,en/stable/generated/scanpy.metrics.gearys_c.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.gearys_c.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.metrics.morans_i. Contents . morans_i(). scanpy.metrics.morans_i#. scanpy.metrics.morans_i(adata, *, vals=None, use_graph=None, layer=None, obsm=None, obsp=None, use_raw=False)[source]#; Calculate Moran’s I Global Autocorrelation Statistic.; Moran’s I is a global autocorrelation statistic for some measure on a graph. It is commonly used in; spatial data analysis to assess autocorrelation on a 2D grid. It is closely related to Geary’s C,; but not identical. More info can be found here. \[I =; \frac{; N \sum_{i, j} w_{i, j} z_{i} z_{j}; }{; S_{0} \sum_{i} z_{i}^{2}; }\]. Parameters:. adata AnnData. vals ndarray | spmatrix | None (default: None)Values to calculate Moran’s I for. If this is two dimensional, should; be of shape (n_features, n_cells). Otherwise should be of shape; (n_cells,). This matrix can be selected from elements of the anndata; object by using key word",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.morans_i.html:9057,Release,Release,9057,en/stable/generated/scanpy.metrics.morans_i.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.metrics.morans_i.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot. Contents . DotPlot. scanpy.pl.DotPlot#. class scanpy.pl.DotPlot(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, expression_cutoff=0.0, mean_only_expressed=False, standard_scale=None, dot_color_df=None, dot_size_df=None, ax=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Allows the visualization of two values that are encoded as; dot size and color. The size usually represents the fraction; of cells (obs) that have a non-zero value for genes (var).; For each var_name and each groupby category a dot is plotted.; Each dot represents two values: mean expression within each category; (visualized by color) and fraction of cells expressing the var_name in the; cate",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.html:9051,Release,Release,9051,en/stable/api/generated/classes/scanpy.pl.DotPlot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.add_dendrogram. Contents . DotPlot.add_dendrogram(). scanpy.pl.DotPlot.add_dendrogram#. DotPlot.add_dendrogram(*, show=True, dendrogram_key=None, size=0.8)[source]#; Show dendrogram based on the hierarchical clustering between the groupby; categories. Categories are reordered to match the dendrogram order.; The dendrogram information is computed using scanpy.tl.dendrogram().; If sc.tl.dendrogram has not been called previously the function is called; with default parameters.; The dendrogram is by default shown on the right side of the plot or on top; if the axes are swapped. var_names are reordered to produce a more pleasing output if:; The data contains var_groups; the var_groups match the categories. The previous conditions happen by default when using Plot; to show the results from rank_genes_groups() (aka gene markers), by; calling scanpy.tl.rank_genes_g",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.add_dendrogram.html:9066,Release,Release,9066,en/stable/api/generated/classes/scanpy.pl.DotPlot.add_dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.add_dendrogram.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.add_totals. Contents . DotPlot.add_totals(). scanpy.pl.DotPlot.add_totals#. DotPlot.add_totals(*, show=True, sort=None, size=0.8, color=None)[source]#; Show barplot for the number of cells in in groupby category.; The barplot is by default shown on the right side of the plot or on top; if the axes are swapped. Parameters:. show bool | None (default: True)Boolean to turn on (True) or off (False) ‘add_totals’. sort Optional[Literal['ascending', 'descending']] (default: None)Set to either ‘ascending’ or ‘descending’ to reorder the categories; by cell number. size float | None (default: 0.8)size of the barplot. Corresponds to width when shown on; the right of the plot, or height when shown on top. The unit is the same; as in matplotlib (inches). color Union[str, tuple[float, ...], Sequence[Union[str, tuple[float, ...]]], None] (default: None)Color for the bar p",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.add_totals.html:9062,Release,Release,9062,en/stable/api/generated/classes/scanpy.pl.DotPlot.add_totals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.add_totals.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.legend. Contents . DotPlot.legend(). scanpy.pl.DotPlot.legend#. DotPlot.legend(*, show=True, show_size_legend=True, show_colorbar=True, size_title='Fraction of cells\\nin group (%)', colorbar_title='Mean expression\\nin group', width=1.5)[source]#; Configures dot size and the colorbar legends. Parameters:. show bool | None (default: True)Set to False to hide the default plot of the legends. This sets the; legend width to zero, which will result in a wider main plot. show_size_legend bool | None (default: True)Set to False to hide the dot size legend. show_colorbar bool | None (default: True)Set to False to hide the colorbar legend. size_title str | None (default: 'Fraction of cells\\nin group (%)')Title for the dot size legend. Use ‘n’ to add line breaks. Appears on top; of dot sizes. colorbar_title str | None (default: 'Mean expression\\nin group')Title fo",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.legend.html:9058,Release,Release,9058,en/stable/api/generated/classes/scanpy.pl.DotPlot.legend.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.legend.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.make_figure. Contents . DotPlot.make_figure(). scanpy.pl.DotPlot.make_figure#. DotPlot.make_figure()[source]#; Renders the image but does not call matplotlib.pyplot.show(). Useful; when several plots are put together into one figure. See also; show(): Renders and shows the plot.; savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> import matplotlib.pyplot as plt; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; >>> fig, (ax0, ax1) = plt.subplots(1, 2); >>> sc.pl.MatrixPlot(adata, markers, groupby='bulk_labels', ax=ax0) \; ... .style(cmap='Blues', edge_color='none').make_figure(); >>> sc.pl.DotPlot(adata, markers, groupby='bulk_labels', ax=ax1).make_figure(). previous; scanpy.pl.DotPlot.legend. next; scanpy.pl.DotPlot.savefig. Contents; . DotPlot.make_figure(). By Scanpy development tea",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.make_figure.html:9063,Release,Release,9063,en/stable/api/generated/classes/scanpy.pl.DotPlot.make_figure.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.make_figure.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.savefig. Contents . DotPlot.savefig(). scanpy.pl.DotPlot.savefig#. DotPlot.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current figure. Parameters:. filename strFigure filename. Figure format is taken from the file ending unless; the parameter format is given. bbox_inches str | None (default: 'tight')By default is set to ‘tight’ to avoid cropping of the legends. kwargsPassed to matplotlib.pyplot.savefig(). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); show(): Renders and shows the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(; ... adata, markers, groupby=""bulk_labels""; ... ).savefig(""plot.pdf""). previous; scanpy.pl.DotPlot.make_figure. next; scanpy.pl.DotPlot.show",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.savefig.html:9059,Release,Release,9059,en/stable/api/generated/classes/scanpy.pl.DotPlot.savefig.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.savefig.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.show. Contents . DotPlot.show(). scanpy.pl.DotPlot.show#. DotPlot.show(return_axes=None)[source]#; Show the figure. Parameters:. return_axes bool | None (default: None)If true return a dictionary with the figure axes. When return_axes is true; then matplotlib.pyplot.show() is not called. Return type:; dict[str, Axes] | None. Returns:; If return_axes=True: Dict of matplotlib.axes.Axes. The dict key; indicates the type of ax (eg. mainplot_ax). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(adata, markers, groupby=""bulk_labels"").show(). previous; scanpy.pl.DotPlot.savefig. next; scanpy.pl.DotPlot.style. Contents; . DotPlot.sh",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.show.html:9056,Release,Release,9056,en/stable/api/generated/classes/scanpy.pl.DotPlot.show.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.show.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.style. Contents . DotPlot.style(). scanpy.pl.DotPlot.style#. DotPlot.style(*, cmap='winter', color_on='dot', dot_max=None, dot_min=None, smallest_dot=0.0, largest_dot=200.0, dot_edge_color='black', dot_edge_lw=0.2, size_exponent=1.5, grid=False, x_padding=0.8, y_padding=1.0)[source]#; Modifies plot visual parameters. Parameters:. cmap str (default: 'winter')String denoting matplotlib color map. color_on Optional[Literal['dot', 'square']] (default: 'dot')Options are ‘dot’ or ‘square’. Be default the colomap is applied to; the color of the dot. Optionally, the colormap can be applied to an; square behind the dot, in which case the dot is transparent and only; the edge is shown. dot_max float | None (default: None)If none, the maximum dot size is set to the maximum fraction value found; (e.g. 0.6). If given, the value should be a number between 0 and 1.; All f",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html:9057,Release,Release,9057,en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot. Contents . MatrixPlot. scanpy.pl.MatrixPlot#. class scanpy.pl.MatrixPlot(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, values_df=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Allows the visualization of values using a color map. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values (see var_group_labels). The mapping values; should be sequences of valid adata.var_names. In this; case either coloring or ‘brackets’ are use",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html:9054,Release,Release,9054,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.add_dendrogram. Contents . MatrixPlot.add_dendrogram(). scanpy.pl.MatrixPlot.add_dendrogram#. MatrixPlot.add_dendrogram(*, show=True, dendrogram_key=None, size=0.8)[source]#; Show dendrogram based on the hierarchical clustering between the groupby; categories. Categories are reordered to match the dendrogram order.; The dendrogram information is computed using scanpy.tl.dendrogram().; If sc.tl.dendrogram has not been called previously the function is called; with default parameters.; The dendrogram is by default shown on the right side of the plot or on top; if the axes are swapped. var_names are reordered to produce a more pleasing output if:; The data contains var_groups; the var_groups match the categories. The previous conditions happen by default when using Plot; to show the results from rank_genes_groups() (aka gene markers), by; calling scanpy.tl.",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_dendrogram.html:9069,Release,Release,9069,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_dendrogram.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.add_totals. Contents . MatrixPlot.add_totals(). scanpy.pl.MatrixPlot.add_totals#. MatrixPlot.add_totals(*, show=True, sort=None, size=0.8, color=None)[source]#; Show barplot for the number of cells in in groupby category.; The barplot is by default shown on the right side of the plot or on top; if the axes are swapped. Parameters:. show bool | None (default: True)Boolean to turn on (True) or off (False) ‘add_totals’. sort Optional[Literal['ascending', 'descending']] (default: None)Set to either ‘ascending’ or ‘descending’ to reorder the categories; by cell number. size float | None (default: 0.8)size of the barplot. Corresponds to width when shown on; the right of the plot, or height when shown on top. The unit is the same; as in matplotlib (inches). color Union[str, tuple[float, ...], Sequence[Union[str, tuple[float, ...]]], None] (default: None)Color f",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_totals.html:9065,Release,Release,9065,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_totals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.add_totals.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.legend. Contents . MatrixPlot.legend(). scanpy.pl.MatrixPlot.legend#. MatrixPlot.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure legend parameters. Parameters:. show bool | None (default: True)Set to ‘False’ to hide the default plot of the legend. This sets the; legend width to zero which will result in a wider main plot. title str | None (default: 'Expression\\nlevel in group')Legend title. Appears on top of the color bar. Use ‘\n’ to add line breaks. width float | None (default: 1.5)Width of the legend. The unit is the same as in matplotlib (inches). Return type:; Self. Returns:; Returns self for method chaining. Examples; Set legend title:; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> dp = sc.pl._baseplot_class.Ba",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html:9061,Release,Release,9061,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.legend.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.make_figure. Contents . MatrixPlot.make_figure(). scanpy.pl.MatrixPlot.make_figure#. MatrixPlot.make_figure()[source]#; Renders the image but does not call matplotlib.pyplot.show(). Useful; when several plots are put together into one figure. See also; show(): Renders and shows the plot.; savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> import matplotlib.pyplot as plt; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; >>> fig, (ax0, ax1) = plt.subplots(1, 2); >>> sc.pl.MatrixPlot(adata, markers, groupby='bulk_labels', ax=ax0) \; ... .style(cmap='Blues', edge_color='none').make_figure(); >>> sc.pl.DotPlot(adata, markers, groupby='bulk_labels', ax=ax1).make_figure(). previous; scanpy.pl.MatrixPlot.legend. next; scanpy.pl.MatrixPlot.savefig. Contents; . MatrixPlot.make_figure(). By S",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html:9066,Release,Release,9066,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.make_figure.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.savefig. Contents . MatrixPlot.savefig(). scanpy.pl.MatrixPlot.savefig#. MatrixPlot.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current figure. Parameters:. filename strFigure filename. Figure format is taken from the file ending unless; the parameter format is given. bbox_inches str | None (default: 'tight')By default is set to ‘tight’ to avoid cropping of the legends. kwargsPassed to matplotlib.pyplot.savefig(). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); show(): Renders and shows the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(; ... adata, markers, groupby=""bulk_labels""; ... ).savefig(""plot.pdf""). previous; scanpy.pl.MatrixPlot.make_figure. next; scanpy.",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html:9062,Release,Release,9062,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.savefig.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.show. Contents . MatrixPlot.show(). scanpy.pl.MatrixPlot.show#. MatrixPlot.show(return_axes=None)[source]#; Show the figure. Parameters:. return_axes bool | None (default: None)If true return a dictionary with the figure axes. When return_axes is true; then matplotlib.pyplot.show() is not called. Return type:; dict[str, Axes] | None. Returns:; If return_axes=True: Dict of matplotlib.axes.Axes. The dict key; indicates the type of ax (eg. mainplot_ax). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(adata, markers, groupby=""bulk_labels"").show(). previous; scanpy.pl.MatrixPlot.savefig. next; scanpy.pl.MatrixPlot.style. Cont",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html:9059,Release,Release,9059,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.show.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.style. Contents . MatrixPlot.style(). scanpy.pl.MatrixPlot.style#. MatrixPlot.style(cmap='viridis', edge_color='gray', edge_lw=0.1)[source]#; Modifies plot visual parameters. Parameters:. cmap str (default: 'viridis')String denoting matplotlib color map. edge_color Union[str, tuple[float, ...], None] (default: 'gray')Edge color between the squares of matrix plot. Default is gray. edge_lw float | None (default: 0.1)Edge line width. Return type:; Self. Returns:; MatrixPlot. Examples; import scanpy as sc. adata = sc.datasets.pbmc68k_reduced(); markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']. Change color map and turn off edges:; (; sc.pl.MatrixPlot(adata, markers, groupby='bulk_labels'); .style(cmap='Blues', edge_color='none'); .show(); ). previous; scanpy.pl.MatrixPlot.show. next; scanpy.pl.MatrixPlot.swap_axes. Contents; . MatrixPlot.style(). ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html:9060,Release,Release,9060,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.style.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin. Contents . StackedViolin. scanpy.pl.StackedViolin#. class scanpy.pl.StackedViolin(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, categories_order=None, title=None, figsize=None, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, ax=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Stacked violin plots.; Makes a compact image composed of individual violin plots; (from violinplot()) stacked on top of each other.; Useful to visualize gene expression per cluster.; Wraps seaborn.violinplot() for AnnData. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as lab",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html:9057,Release,Release,9057,en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.add_dendrogram. Contents . StackedViolin.add_dendrogram(). scanpy.pl.StackedViolin.add_dendrogram#. StackedViolin.add_dendrogram(*, show=True, dendrogram_key=None, size=0.8)[source]#; Show dendrogram based on the hierarchical clustering between the groupby; categories. Categories are reordered to match the dendrogram order.; The dendrogram information is computed using scanpy.tl.dendrogram().; If sc.tl.dendrogram has not been called previously the function is called; with default parameters.; The dendrogram is by default shown on the right side of the plot or on top; if the axes are swapped. var_names are reordered to produce a more pleasing output if:; The data contains var_groups; the var_groups match the categories. The previous conditions happen by default when using Plot; to show the results from rank_genes_groups() (aka gene markers), by; callin",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html:9072,Release,Release,9072,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_dendrogram.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.add_totals. Contents . StackedViolin.add_totals(). scanpy.pl.StackedViolin.add_totals#. StackedViolin.add_totals(*, show=True, sort=None, size=0.8, color=None)[source]#; Show barplot for the number of cells in in groupby category.; The barplot is by default shown on the right side of the plot or on top; if the axes are swapped. Parameters:. show bool | None (default: True)Boolean to turn on (True) or off (False) ‘add_totals’. sort Optional[Literal['ascending', 'descending']] (default: None)Set to either ‘ascending’ or ‘descending’ to reorder the categories; by cell number. size float | None (default: 0.8)size of the barplot. Corresponds to width when shown on; the right of the plot, or height when shown on top. The unit is the same; as in matplotlib (inches). color Union[str, tuple[float, ...], Sequence[Union[str, tuple[float, ...]]], None] (default: ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html:9068,Release,Release,9068,en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.add_totals.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.legend. Contents . StackedViolin.legend(). scanpy.pl.StackedViolin.legend#. StackedViolin.legend(*, show=True, title='Expression\\nlevel in group', width=1.5)[source]#; Configure legend parameters. Parameters:. show bool | None (default: True)Set to ‘False’ to hide the default plot of the legend. This sets the; legend width to zero which will result in a wider main plot. title str | None (default: 'Expression\\nlevel in group')Legend title. Appears on top of the color bar. Use ‘\n’ to add line breaks. width float | None (default: 1.5)Width of the legend. The unit is the same as in matplotlib (inches). Return type:; Self. Returns:; Returns self for method chaining. Examples; Set legend title:; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = {'T-cell': 'CD3D', 'B-cell': 'CD79A', 'myeloid': 'CST3'}; >>> dp = sc.pl._basep",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html:9064,Release,Release,9064,en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.legend.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.make_figure. Contents . StackedViolin.make_figure(). scanpy.pl.StackedViolin.make_figure#. StackedViolin.make_figure()[source]#; Renders the image but does not call matplotlib.pyplot.show(). Useful; when several plots are put together into one figure. See also; show(): Renders and shows the plot.; savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> import matplotlib.pyplot as plt; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']; >>> fig, (ax0, ax1) = plt.subplots(1, 2); >>> sc.pl.MatrixPlot(adata, markers, groupby='bulk_labels', ax=ax0) \; ... .style(cmap='Blues', edge_color='none').make_figure(); >>> sc.pl.DotPlot(adata, markers, groupby='bulk_labels', ax=ax1).make_figure(). previous; scanpy.pl.StackedViolin.legend. next; scanpy.pl.StackedViolin.savefig. Contents; . StackedVioli",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html:9069,Release,Release,9069,en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.make_figure.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.savefig. Contents . StackedViolin.savefig(). scanpy.pl.StackedViolin.savefig#. StackedViolin.savefig(filename, bbox_inches='tight', **kwargs)[source]#; Save the current figure. Parameters:. filename strFigure filename. Figure format is taken from the file ending unless; the parameter format is given. bbox_inches str | None (default: 'tight')By default is set to ‘tight’ to avoid cropping of the legends. kwargsPassed to matplotlib.pyplot.savefig(). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); show(): Renders and shows the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(; ... adata, markers, groupby=""bulk_labels""; ... ).savefig(""plot.pdf""). previous; scanpy.pl.StackedViolin.make_figure",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html:9065,Release,Release,9065,en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.savefig.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.show. Contents . StackedViolin.show(). scanpy.pl.StackedViolin.show#. StackedViolin.show(return_axes=None)[source]#; Show the figure. Parameters:. return_axes bool | None (default: None)If true return a dictionary with the figure axes. When return_axes is true; then matplotlib.pyplot.show() is not called. Return type:; dict[str, Axes] | None. Returns:; If return_axes=True: Dict of matplotlib.axes.Axes. The dict key; indicates the type of ax (eg. mainplot_ax). See also; render(): Renders the plot but does not call matplotlib.pyplot.show(); savefig(): Saves the plot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = [""C1QA"", ""PSAP"", ""CD79A"", ""CD79B"", ""CST3"", ""LYZ""]; >>> sc.pl._baseplot_class.BasePlot(adata, markers, groupby=""bulk_labels"").show(). previous; scanpy.pl.StackedViolin.savefig. next; scanpy.pl.Stacked",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html:9062,Release,Release,9062,en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.show.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.style. Contents . StackedViolin.style(). scanpy.pl.StackedViolin.style#. StackedViolin.style(*, cmap='Blues', stripplot=False, jitter=False, jitter_size=1, linewidth=0.2, row_palette=None, density_norm='width', yticklabels=False, ylim=None, x_padding=0.5, y_padding=0.5, scale=None)[source]#; Modifies plot visual parameters. Parameters:. cmap str | None (default: 'Blues')String denoting matplotlib color map. stripplot bool | None (default: False)Add a stripplot on top of the violin plot.; See stripplot(). jitter float | bool | None (default: False)Add jitter to the stripplot (only when stripplot is True); See stripplot(). jitter_size int | None (default: 1)Size of the jitter points. linewidth float | None (default: 0.2)linewidth for the violin plots. row_palette str | None (default: None)The row palette determines the colors to use for the stacked viol",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html:9063,Release,Release,9063,en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.style.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.clustermap. Contents . clustermap(). scanpy.pl.clustermap#. scanpy.pl.clustermap(adata, obs_keys=None, *, use_raw=None, show=None, save=None, **kwds)[source]#; Hierarchically-clustered heatmap.; Wraps seaborn.clustermap() for AnnData. Parameters:. adata AnnDataAnnotated data matrix. obs_keys str | None (default: None)Categorical annotation to plot with a different color map.; Currently, only a single key is supported. use_raw bool | None (default: None)Whether to use raw attribute of adata. Defaults to True if .raw is present. show bool | None (default: None)Show the plot, do not return axis. save bool | str | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {'.pdf', '.png', '.svg'}. axA matplotlib axes object. Only works if plotting a single component. **kwdsKeyword arguments pas",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.clustermap.html:9054,Release,Release,9054,en/stable/generated/scanpy.pl.clustermap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.clustermap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.dendrogram. Contents . dendrogram(). scanpy.pl.dendrogram#. scanpy.pl.dendrogram(adata, groupby, *, dendrogram_key=None, orientation='top', remove_labels=False, show=None, save=None, ax=None)[source]#; Plots a dendrogram of the categories defined in groupby.; See dendrogram(). Parameters:. adata AnnDataAnnotated data matrix. groupby strCategorical data column used to create the dendrogram. dendrogram_key str | None (default: None)Key under with the dendrogram information was stored.; By default the dendrogram information is stored under; .uns[f'dendrogram_{groupby}']. orientation Literal['top', 'bottom', 'left', 'right'] (default: 'top')Origin of the tree. Will grow into the opposite direction. remove_labels bool (default: False)Don’t draw labels. Used e.g. by scanpy.pl.matrixplot(); to annotate matrix columns/rows. show bool | None (default: None)Show the plot, do",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dendrogram.html:9054,Release,Release,9054,en/stable/generated/scanpy.pl.dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dendrogram.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.diffmap. Contents . diffmap(). scanpy.pl.diffmap#. scanpy.pl.diffmap(adata, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color='lightgray', na_in_legend=True, size=None, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', **kwargs)[source]#; Scatter plot in Diffusion Map basis. Para",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.diffmap.html:9051,Release,Release,9051,en/stable/api/generated/scanpy.pl.diffmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.diffmap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.dotplot. Contents . dotplot(). scanpy.pl.dotplot#. scanpy.pl.dotplot(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, expression_cutoff=0.0, mean_only_expressed=False, cmap='Reds', dot_max=None, dot_min=None, standard_scale=None, smallest_dot=0.0, title=None, colorbar_title='Mean expression\\nin group', size_title='Fraction of cells\\nin group (%)', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, swap_axes=False, dot_color_df=None, show=None, save=None, ax=None, return_fig=False, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Makes a dot plot of the expression values of var_names.; For each var_name and each groupby category a dot is plotted.; Each dot represents two values: mean expression within each category; (visualized by color) an",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dotplot.html:9051,Release,Release,9051,en/stable/generated/scanpy.pl.dotplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.dotplot.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.dpt_groups_pseudotime. Contents . dpt_groups_pseudotime(). scanpy.pl.dpt_groups_pseudotime#. scanpy.pl.dpt_groups_pseudotime(adata, *, color_map=None, palette=None, show=None, save=None, marker='.')[source]#; Plot groups and pseudotime. Parameters:. adata AnnDataAnnotated data matrix. color_map str | Colormap | None (default: None)Color map to use for continous variables. Can be a name or a; Colormap instance (e.g. ""magma”, ""viridis""; or mpl.cm.cividis), see get_cmap().; If None, the value of mpl.rcParams[""image.cmap""] is used.; The default color_map can be set using set_figure_params(). palette Sequence[str] | Cycler | None (default: None)Colors to use for plotting categorical annotation groups.; The palette can be a valid ListedColormap name; ('Set2', 'tab20', …), a Cycler object, a dict mapping; categories to colors, or a sequence of colors. Colors must be valid",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.dpt_groups_pseudotime.html:9065,Release,Release,9065,en/stable/api/generated/scanpy.pl.dpt_groups_pseudotime.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.dpt_groups_pseudotime.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.draw_graph. Contents . draw_graph(). scanpy.pl.draw_graph#. scanpy.pl.draw_graph(adata, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color='lightgray', na_in_legend=True, size=None, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', layout=None, **kwargs)[source]#; Scatter plot in ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.draw_graph.html:9054,Release,Release,9054,en/stable/api/generated/scanpy.pl.draw_graph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.draw_graph.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.embedding. Contents . embedding(). scanpy.pl.embedding#. scanpy.pl.embedding(adata, basis, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color='lightgray', na_in_legend=True, size=None, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', **kwargs)[source]#; Scatter plot for user spec",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.embedding.html:9053,Release,Release,9053,en/stable/api/generated/scanpy.pl.embedding.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.embedding.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.embedding_density. Contents . embedding_density(). scanpy.pl.embedding_density#. scanpy.pl.embedding_density(adata, basis='umap', *, key=None, groupby=None, group='all', color_map='YlOrRd', bg_dotsize=80, fg_dotsize=180, vmax=1, vmin=0, vcenter=None, norm=None, ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, **kwargs)[source]#; Plot the density of cells in an embedding (per condition).; Plots the gaussian kernel density estimates (over condition) from the; sc.tl.embedding_density() output.; This function was written by Sophie Tritschler and implemented into; Scanpy by Malte Luecken. Parameters:. adata AnnDataThe annotated data matrix. basis str (default: 'umap')The embedding over which the density was calculated. This embedded; representation should be found in adata.obsm['X_[basis]']`. key str | None (default: None)Na",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.embedding_density.html:9061,Release,Release,9061,en/stable/api/generated/scanpy.pl.embedding_density.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.embedding_density.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.filter_genes_dispersion. Contents . filter_genes_dispersion(). scanpy.pl.filter_genes_dispersion#. scanpy.pl.filter_genes_dispersion(result, *, log=False, show=None, save=None)[source]#; Plot dispersions versus means for genes.; Produces Supp. Fig. 5c of Zheng et al. (2017) and MeanVarPlot() of Seurat. Parameters:. result recarrayResult of filter_genes_dispersion(). log bool (default: False)Plot on logarithmic axes. show bool | None (default: None)Show the plot, do not return axis. save bool | str | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {{'.pdf', '.png', '.svg'}}. Return type:; None. previous; scanpy.pl.highest_expr_genes. next; scanpy.pl.highly_variable_genes. Contents; . filter_genes_dispersion(). By Scanpy development team. ; © Copyright 2024, the Scanpy development ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.filter_genes_dispersion.html:9067,Release,Release,9067,en/stable/api/generated/scanpy.pl.filter_genes_dispersion.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.filter_genes_dispersion.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.heatmap. Contents . heatmap(). scanpy.pl.heatmap#. scanpy.pl.heatmap(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, swap_axes=False, show_gene_labels=None, show=None, save=None, figsize=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Heatmap of the expression values of genes.; If groupby is given, the heatmap is ordered by the respective group. For; example, a list of marker genes can be plotted, ordered by clustering. If; the groupby observation annotation is not categorical the observation; annotation is turned into a categorical by binning the data into the number; specified in num_categories. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[s",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.heatmap.html:9051,Release,Release,9051,en/stable/generated/scanpy.pl.heatmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.heatmap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.highest_expr_genes. Contents . highest_expr_genes(). scanpy.pl.highest_expr_genes#. scanpy.pl.highest_expr_genes(adata, n_top=30, *, show=None, save=None, ax=None, gene_symbols=None, log=False, **kwds)[source]#; Fraction of counts assigned to each gene over all cells.; Computes, for each gene, the fraction of counts assigned to that gene within; a cell. The n_top genes with the highest mean fraction over all cells are; plotted as boxplots.; This plot is similar to the scater package function plotHighestExprs(type; = ""highest-expression""), see here. Quoting; from there:. We expect to see the “usual suspects”, i.e., mitochondrial genes, actin,; ribosomal protein, MALAT1. A few spike-in transcripts may also be; present here, though if all of the spike-ins are in the top 50, it; suggests that too much spike-in RNA was added. A large number of; pseudo-genes or predicted",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.highest_expr_genes.html:9062,Release,Release,9062,en/stable/api/generated/scanpy.pl.highest_expr_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.highest_expr_genes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.highly_variable_genes. Contents . highly_variable_genes(). scanpy.pl.highly_variable_genes#. scanpy.pl.highly_variable_genes(adata_or_result, *, log=False, show=None, save=None, highly_variable_genes=True)[source]#; Plot dispersions or normalized variance versus means for genes.; Produces Supp. Fig. 5c of Zheng et al. (2017) and MeanVarPlot() and; VariableFeaturePlot() of Seurat. Parameters:. adataResult of highly_variable_genes(). log bool (default: False)Plot on logarithmic axes. show bool | None (default: None)Show the plot, do not return axis. save bool | str | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {{'.pdf', '.png', '.svg'}}. Return type:; None. previous; scanpy.pl.filter_genes_dispersion. next; scanpy.pl.scrublet_score_distribution. Contents; . highly_variable_gene",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.highly_variable_genes.html:9065,Release,Release,9065,en/stable/api/generated/scanpy.pl.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.highly_variable_genes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.matrixplot. Contents . matrixplot(). scanpy.pl.matrixplot#. scanpy.pl.matrixplot(adata, var_names, groupby, *, use_raw=None, log=False, num_categories=7, figsize=None, dendrogram=False, title=None, cmap='viridis', colorbar_title='Mean expression\\nin group', gene_symbols=None, var_group_positions=None, var_group_labels=None, var_group_rotation=None, layer=None, standard_scale=None, values_df=None, swap_axes=False, show=None, save=None, ax=None, return_fig=False, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Creates a heatmap of the mean expression values per group of each var_names.; This function provides a convenient interface to the MatrixPlot; class. If you need more flexibility, you should use MatrixPlot; directly. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.matrixplot.html:9054,Release,Release,9054,en/stable/generated/scanpy.pl.matrixplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.matrixplot.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.paga. Contents . paga(). scanpy.pl.paga#. scanpy.pl.paga(adata, *, threshold=None, color=None, layout=None, layout_kwds=mappingproxy({}), init_pos=None, root=0, labels=None, single_component=False, solid_edges='connectivities', dashed_edges=None, transitions=None, fontsize=None, fontweight='bold', fontoutline=None, text_kwds=mappingproxy({}), node_size_scale=1.0, node_size_power=0.5, edge_width_scale=1.0, min_edge_width=None, max_edge_width=None, arrowsize=30, title=None, left_margin=0.01, random_state=0, pos=None, normalize_to_color=False, cmap=None, cax=None, colorbar=None, cb_kwds=mappingproxy({}), frameon=None, add_pos=True, export_to_gexf=False, use_raw=True, colors=None, groups=None, plot=True, show=None, save=None, ax=None)[source]#; Plot the PAGA graph through thresholding low-connectivity edges.; Compute a coarse-grained layout of the data. Reuse this by p",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga.html:9048,Release,Release,9048,en/stable/api/generated/scanpy.pl.paga.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.paga_compare. Contents . paga_compare(). scanpy.pl.paga_compare#. scanpy.pl.paga_compare(adata, basis=None, *, edges=False, color=None, alpha=None, groups=None, components=None, projection='2d', legend_loc='on data', legend_fontsize=None, legend_fontweight='bold', legend_fontoutline=None, color_map=None, palette=None, frameon=False, size=None, title=None, right_margin=None, left_margin=0.05, show=None, save=None, title_graph=None, groups_graph=None, pos=None, **paga_graph_params)[source]#; Scatter and PAGA graph side-by-side.; Consists in a scatter plot and the abstracted graph. See; paga() for all related parameters.; See paga_path() for visualizing gene changes along paths; through the abstracted graph.; Additional parameters are as follows. Parameters:. adata AnnDataAnnotated data matrix. kwds_scatterKeywords for scatter(). kwds_pagaKeywords for paga(). Returns:",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga_compare.html:9056,Release,Release,9056,en/stable/api/generated/scanpy.pl.paga_compare.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga_compare.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.paga_path. Contents . paga_path(). scanpy.pl.paga_path#. scanpy.pl.paga_path(adata, nodes, keys, *, use_raw=True, annotations=('dpt_pseudotime',), color_map=None, color_maps_annotations=mappingproxy({'dpt_pseudotime': 'Greys'}), palette_groups=None, n_avg=1, groups_key=None, xlim=(None, None), title=None, left_margin=None, ytick_fontsize=None, title_fontsize=None, show_node_names=True, show_yticks=True, show_colorbar=True, legend_fontsize=None, legend_fontweight=None, normalize_to_zero_one=False, as_heatmap=True, return_data=False, show=None, save=None, ax=None)[source]#; Gene expression and annotation changes along paths in the abstracted graph. Parameters:. adata AnnDataAn annotated data matrix. nodes Sequence[str | int]A path through nodes of the abstracted graph, that is, names or indices; (within .categories) of groups that have been used to run PAGA. keys Seq",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga_path.html:9053,Release,Release,9053,en/stable/api/generated/scanpy.pl.paga_path.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.paga_path.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.pca. Contents . pca(). scanpy.pl.pca#. scanpy.pl.pca(adata, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color='lightgray', na_in_legend=True, size=None, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', annotate_var_explained=False, **kwargs)[source]#; Scatter plot in PCA coordin",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca.html:9047,Release,Release,9047,en/stable/api/generated/scanpy.pl.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.pca_loadings. Contents . pca_loadings(). scanpy.pl.pca_loadings#. scanpy.pl.pca_loadings(adata, components=None, *, include_lowest=True, n_points=None, show=None, save=None)[source]#; Rank genes according to contributions to PCs. Parameters:. adata AnnDataAnnotated data matrix. components str | Sequence[int] | None (default: None)For example, '1,2,3' means [1, 2, 3], first, second, third; principal component. include_lowest bool (default: True)Whether to show the variables with both highest and lowest loadings. show bool | None (default: None)Show the plot, do not return axis. n_points int | None (default: None)Number of variables to plot for each component. save str | bool | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {'.pdf', '.png', '.svg'}. Examples; import scanpy as sc; ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_loadings.html:9056,Release,Release,9056,en/stable/api/generated/scanpy.pl.pca_loadings.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_loadings.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.pca_overview. Contents . pca_overview(). scanpy.pl.pca_overview#. scanpy.pl.pca_overview(adata, **params)[source]#; Plot PCA results.; The parameters are the ones of the scatter plot. Call pca_ranking separately; if you want to change the default settings. Parameters:. adata AnnDataAnnotated data matrix. colorKeys for observation/cell annotation either as list [""ann1"", ""ann2""] or; string ""ann1,ann2,..."". use_rawUse raw attribute of adata if present. sort_orderFor continuous annotations used as color parameter, plot data points; with higher values on top of others. groupsRestrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html:9056,Release,Release,9056,en/stable/api/generated/scanpy.pl.pca_overview.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups. Contents . rank_genes_groups(). scanpy.pl.rank_genes_groups#. scanpy.pl.rank_genes_groups(adata, groups=None, *, n_genes=20, gene_symbols=None, key='rank_genes_groups', fontsize=8, ncols=4, sharey=True, show=None, save=None, ax=None, **kwds)[source]#; Plot ranking of genes. Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. gene_symbols str | None (default: None)Key for field in .var that stores gene symbols if you do not want to; use .var_names. n_genes int (default: 20)Number of genes to show. fontsize int (default: 8)Fontsize for gene names. ncols int (default: 4)Number of panels shown per row. sharey bool (default: True)Controls if the y-axis of each panels should be shared. But passing; sharey=False, each panel has its own y-axis range. show bool | ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups.html:9061,Release,Release,9061,en/stable/api/generated/scanpy.pl.rank_genes_groups.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_dotplot. Contents . rank_genes_groups_dotplot(). scanpy.pl.rank_genes_groups_dotplot#. scanpy.pl.rank_genes_groups_dotplot(adata, groups=None, *, n_genes=None, groupby=None, values_to_plot=None, var_names=None, gene_symbols=None, min_logfoldchange=None, key=None, show=None, save=None, return_fig=False, **kwds)[source]#; Plot ranking of genes using dotplot plot (see dotplot()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html:9069,Release,Release,9069,en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_dotplot.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_heatmap. Contents . rank_genes_groups_heatmap(). scanpy.pl.rank_genes_groups_heatmap#. scanpy.pl.rank_genes_groups_heatmap(adata, groups=None, *, n_genes=None, groupby=None, gene_symbols=None, var_names=None, min_logfoldchange=None, key=None, show=None, save=None, **kwds)[source]#; Plot ranking of genes using heatmap plot (see heatmap()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Setting this op",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html:9069,Release,Release,9069,en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_heatmap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_matrixplot. Contents . rank_genes_groups_matrixplot(). scanpy.pl.rank_genes_groups_matrixplot#. scanpy.pl.rank_genes_groups_matrixplot(adata, groups=None, *, n_genes=None, groupby=None, values_to_plot=None, var_names=None, gene_symbols=None, min_logfoldchange=None, key=None, show=None, save=None, return_fig=False, **kwds)[source]#; Plot ranking of genes using matrixplot plot (see matrixplot()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer t",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html:9072,Release,Release,9072,en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_matrixplot.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_stacked_violin. Contents . rank_genes_groups_stacked_violin(). scanpy.pl.rank_genes_groups_stacked_violin#. scanpy.pl.rank_genes_groups_stacked_violin(adata, groups=None, *, n_genes=None, groupby=None, gene_symbols=None, var_names=None, min_logfoldchange=None, key=None, show=None, save=None, return_fig=False, **kwds)[source]#; Plot ranking of genes using stacked_violin plot; (see stacked_violin()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; ref",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html:9076,Release,Release,9076,en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_stacked_violin.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_tracksplot. Contents . rank_genes_groups_tracksplot(). scanpy.pl.rank_genes_groups_tracksplot#. scanpy.pl.rank_genes_groups_tracksplot(adata, groups=None, *, n_genes=None, groupby=None, var_names=None, gene_symbols=None, min_logfoldchange=None, key=None, show=None, save=None, **kwds)[source]#; Plot ranking of genes using heatmap plot (see heatmap()). Parameters:. adata AnnDataAnnotated data matrix. groups str | Sequence[str] | None (default: None)The groups for which to show the gene ranking. n_genes int | None (default: None)Number of genes to show. This can be a negative number to show for; example the down regulated genes. eg: num_genes=-10. Is ignored if; gene_names is passed. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Set",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html:9072,Release,Release,9072,en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_tracksplot.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.rank_genes_groups_violin. Contents . rank_genes_groups_violin(). scanpy.pl.rank_genes_groups_violin#. scanpy.pl.rank_genes_groups_violin(adata, groups=None, *, n_genes=20, gene_names=None, gene_symbols=None, use_raw=None, key=None, split=True, density_norm='width', strip=True, jitter=True, size=1, ax=None, show=None, save=None, scale=None)[source]#; Plot ranking of genes for all tested comparisons. Parameters:. adata AnnDataAnnotated data matrix. groups Sequence[str] | None (default: None)List of group names. n_genes int (default: 20)Number of genes to show. Is ignored if gene_names is passed. gene_names Iterable[str] | None (default: None)List of genes to plot. Is only useful if interested in a custom gene list,; which is not the result of scanpy.tl.rank_genes_groups(). gene_symbols str | None (default: None)Key for field in .var that stores gene symbols if you do",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_violin.html:9068,Release,Release,9068,en/stable/api/generated/scanpy.pl.rank_genes_groups_violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.rank_genes_groups_violin.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.scatter. Contents . scatter(). scanpy.pl.scatter#. scanpy.pl.scatter(adata, x=None, y=None, *, color=None, use_raw=None, layers=None, sort_order=True, alpha=None, basis=None, groups=None, components=None, projection='2d', legend_loc='right margin', legend_fontsize=None, legend_fontweight=None, legend_fontoutline=None, color_map=None, palette=None, frameon=None, right_margin=None, left_margin=None, size=None, marker='.', title=None, show=None, save=None, ax=None)[source]#; Scatter plot along observations or variables axes.; Color the plot using annotations of observations (.obs), variables; (.var) or expression of genes (.var_names). Parameters:. adata AnnDataAnnotated data matrix. x str | None (default: None)x coordinate. y str | None (default: None)y coordinate. color str | Collection[str] | None (default: None)Keys for annotations of observations/cells or variabl",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html:9051,Release,Release,9051,en/stable/generated/scanpy.pl.scatter.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.scatter.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.scrublet_score_distribution. Contents . scrublet_score_distribution(). scanpy.pl.scrublet_score_distribution#. scanpy.pl.scrublet_score_distribution(adata, *, scale_hist_obs='log', scale_hist_sim='linear', figsize=(8, 3), return_fig=False, show=True, save=None)[source]#; Plot histogram of doublet scores for observed transcriptomes and simulated doublets.; The histogram for simulated doublets is useful for determining the correct doublet; score threshold.; Scrublet must have been run previously with the input object. Parameters:. adata AnnDataAn AnnData object resulting from scrublet(). scale_hist_obs Union[Literal['linear', 'log', 'symlog', 'logit'], str] (default: 'log')Set y axis scale transformation in matplotlib for the plot of observed transcriptomes. scale_hist_sim Union[Literal['linear', 'log', 'symlog', 'logit'], str] (default: 'linear')Set y axis scale tra",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.scrublet_score_distribution.html:9071,Release,Release,9071,en/stable/api/generated/scanpy.pl.scrublet_score_distribution.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.scrublet_score_distribution.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.sim. Contents . sim(). scanpy.pl.sim#. scanpy.pl.sim(adata, *, tmax_realization=None, as_heatmap=False, shuffle=False, show=None, save=None, marker='.')[source]#; Plot results of simulation. Parameters:. tmax_realization int | None (default: None)Number of observations in one realization of the time series. The data matrix; adata.X consists in concatenated realizations. as_heatmap bool (default: False)Plot the timeseries as heatmap. shuffle bool (default: False)Shuffle the data. show bool | None (default: None)Show the plot, do not return axis. save bool | str | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {{'.pdf', '.png', '.svg'}}. Return type:; None. previous; scanpy.pl.rank_genes_groups_tracksplot. next; Reading. Contents; . sim(). By Scanpy development team. ; © Copyright",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.sim.html:9047,Release,Release,9047,en/stable/api/generated/scanpy.pl.sim.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.sim.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.spatial. Contents . spatial(). scanpy.pl.spatial#. scanpy.pl.spatial(adata, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color=None, na_in_legend=True, size=1.0, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', basis='spatial', img=None, img_key=_empty, library_id=_empty, crop_co",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html:9051,Release,Release,9051,en/stable/api/generated/scanpy.pl.spatial.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.spatial.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.stacked_violin. Contents . stacked_violin(). scanpy.pl.stacked_violin#. scanpy.pl.stacked_violin(adata, var_names, groupby, *, log=False, use_raw=None, num_categories=7, title=None, colorbar_title='Median expression\\nin group', figsize=None, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, standard_scale=None, var_group_rotation=None, layer=None, stripplot=False, jitter=False, size=1, scale='width', yticklabels=False, order=None, swap_axes=False, show=None, save=None, return_fig=False, row_palette=None, cmap='Blues', ax=None, vmin=None, vmax=None, vcenter=None, norm=None, **kwds)[source]#; Stacked violin plots.; Makes a compact image composed of individual violin plots; (from violinplot()) stacked on top of each other.; Useful to visualize gene expression per cluster.; Wraps seaborn.violinplot() for AnnData.; This function prov",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.stacked_violin.html:9058,Release,Release,9058,en/stable/generated/scanpy.pl.stacked_violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.stacked_violin.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.tracksplot. Contents . tracksplot(). scanpy.pl.tracksplot#. scanpy.pl.tracksplot(adata, var_names, groupby, *, use_raw=None, log=False, dendrogram=False, gene_symbols=None, var_group_positions=None, var_group_labels=None, layer=None, show=None, save=None, figsize=None, **kwds)[source]#; In this type of plot each var_name is plotted as a filled line plot where the; y values correspond to the var_name values and x is each of the cells. Best results; are obtained when using raw counts that are not log.; groupby is required to sort and order the values using the respective group; and should be a categorical value. Parameters:. adata AnnDataAnnotated data matrix. var_names Union[str, Sequence[str], Mapping[str, Union[str, Sequence[str]]]]var_names should be a valid subset of adata.var_names.; If var_names is a mapping, then the key is used as label; to group the values ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.tracksplot.html:9054,Release,Release,9054,en/stable/generated/scanpy.pl.tracksplot.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.tracksplot.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.tsne. Contents . tsne(). scanpy.pl.tsne#. scanpy.pl.tsne(adata, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color='lightgray', na_in_legend=True, size=None, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', **kwargs)[source]#; Scatter plot in tSNE basis. Parameters:. adata AnnDat",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.tsne.html:9048,Release,Release,9048,en/stable/api/generated/scanpy.pl.tsne.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.tsne.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.umap. Contents . umap(). scanpy.pl.umap#. scanpy.pl.umap(adata, *, color=None, mask_obs=None, gene_symbols=None, use_raw=None, sort_order=True, edges=False, edges_width=0.1, edges_color='grey', neighbors_key=None, arrows=False, arrows_kwds=None, groups=None, components=None, dimensions=None, layer=None, projection='2d', scale_factor=None, color_map=None, cmap=None, palette=None, na_color='lightgray', na_in_legend=True, size=None, frameon=None, legend_fontsize=None, legend_fontweight='bold', legend_loc='right margin', legend_fontoutline=None, colorbar_loc='right', vmax=None, vmin=None, vcenter=None, norm=None, add_outline=False, outline_width=(0.3, 0.05), outline_color=('black', 'white'), ncols=4, hspace=0.25, wspace=None, title=None, show=None, save=None, ax=None, return_fig=None, marker='.', **kwargs)[source]#; Scatter plot in UMAP basis. Parameters:. adata AnnDat",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.umap.html:9048,Release,Release,9048,en/stable/api/generated/scanpy.pl.umap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.umap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.violin. Contents . violin(). scanpy.pl.violin#. scanpy.pl.violin(adata, keys, groupby=None, *, log=False, use_raw=None, stripplot=True, jitter=True, size=1, layer=None, scale='width', order=None, multi_panel=None, xlabel='', ylabel=None, rotation=None, show=None, save=None, ax=None, **kwds)[source]#; Violin plot.; Wraps seaborn.violinplot() for AnnData. Parameters:. adata AnnDataAnnotated data matrix. keys str | Sequence[str]Keys for accessing variables of .var_names or fields of .obs. groupby str | None (default: None)The key of the observation grouping to consider. log bool (default: False)Plot on logarithmic axis. use_raw bool | None (default: None)Whether to use raw attribute of adata. Defaults to True if .raw is present. stripplot bool (default: True)Add a stripplot on top of the violin plot.; See stripplot(). jitter float | bool (default: True)Add jitter to t",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.violin.html:9050,Release,Release,9050,en/stable/generated/scanpy.pl.violin.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pl.violin.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.calculate_qc_metrics. Contents . calculate_qc_metrics(). scanpy.pp.calculate_qc_metrics#. scanpy.pp.calculate_qc_metrics(adata, *, expr_type='counts', var_type='genes', qc_vars=(), percent_top=(50, 100, 200, 500), layer=None, use_raw=False, inplace=False, log1p=True, parallel=None)[source]#; Calculate quality control metrics.; Calculates a number of qc metrics for an AnnData object, see section; Returns for specifics. Largely based on calculateQCMetrics from scater; [McCarthy et al., 2017]. Currently is most efficient on a sparse CSR or dense matrix.; Note that this method can take a while to compile on the first call. That; result is then cached to disk to be used later. Parameters:. adata AnnDataAnnotated data matrix. expr_type str (default: 'counts')Name of kind of values in X. var_type str (default: 'genes')The kind of thing the variables are. qc_vars Collectio",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.calculate_qc_metrics.html:9064,Release,Release,9064,en/stable/generated/scanpy.pp.calculate_qc_metrics.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.calculate_qc_metrics.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.combat. Contents . combat(). scanpy.pp.combat#. scanpy.pp.combat(adata, key='batch', *, covariates=None, inplace=True)[source]#; ComBat function for batch effect correction [Johnson et al., 2006, Leek et al., 2017, Pedersen, 2012].; Corrects for batch effects by fitting linear models, gains statistical power; via an EB framework where information is borrowed across genes.; This uses the implementation combat.py [Pedersen, 2012]. Parameters:. adata AnnDataAnnotated data matrix. key str (default: 'batch')Key to a categorical annotation from obs; that will be used for batch effect removal. covariates Collection[str] | None (default: None)Additional covariates besides the batch variable such as adjustment; variables or biological condition. This parameter refers to the design; matrix X in Equation 2.1 in Johnson et al. [2006] and to the mod argument in; the original co",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.combat.html:9050,Release,Release,9050,en/stable/api/generated/scanpy.pp.combat.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.combat.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.downsample_counts. Contents . downsample_counts(). scanpy.pp.downsample_counts#. scanpy.pp.downsample_counts(adata, counts_per_cell=None, total_counts=None, *, random_state=0, replace=False, copy=False)[source]#; Downsample counts from count matrix.; If counts_per_cell is specified, each cell will downsampled.; If total_counts is specified, expression matrix will be downsampled to; contain at most total_counts. Parameters:. adata AnnDataAnnotated data matrix. counts_per_cell int | Collection[int] | None (default: None)Target total counts per cell. If a cell has more than ‘counts_per_cell’,; it will be downsampled to this number. Resulting counts can be specified; on a per cell basis by passing an array.Should be an integer or integer; ndarray with same length as number of obs. total_counts int | None (default: None)Target total counts. If the count matrix has more ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html:9061,Release,Release,9061,en/stable/generated/scanpy.pp.downsample_counts.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.downsample_counts.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.filter_cells. Contents . filter_cells(). scanpy.pp.filter_cells#. scanpy.pp.filter_cells(data, *, min_counts=None, min_genes=None, max_counts=None, max_genes=None, inplace=True, copy=False)[source]#; Filter cell outliers based on counts and numbers of genes expressed.; For instance, only keep cells with at least min_counts counts or; min_genes genes expressed. This is to filter measurement outliers,; i.e. “unreliable” observations.; Only provide one of the optional parameters min_counts, min_genes,; max_counts, max_genes per call. Parameters:. data AnnData | spmatrix | ndarray | ArrayThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. min_counts int | None (default: None)Minimum number of counts required for a cell to pass filtering. min_genes int | None (default: None)Minimum number of genes expressed required for a",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_cells.html:9056,Release,Release,9056,en/stable/generated/scanpy.pp.filter_cells.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_cells.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.filter_genes. Contents . filter_genes(). scanpy.pp.filter_genes#. scanpy.pp.filter_genes(data, *, min_counts=None, min_cells=None, max_counts=None, max_cells=None, inplace=True, copy=False)[source]#; Filter genes based on number of cells or counts.; Keep genes that have at least min_counts counts or are expressed in at; least min_cells cells or have at most max_counts counts or are expressed; in at most max_cells cells.; Only provide one of the optional parameters min_counts, min_cells,; max_counts, max_cells per call. Parameters:. data AnnData | spmatrix | ndarray | ArrayAn annotated data matrix of shape n_obs × n_vars. Rows correspond; to cells and columns to genes. min_counts int | None (default: None)Minimum number of counts required for a gene to pass filtering. min_cells int | None (default: None)Minimum number of cells expressed required for a gene to pass f",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes.html:9056,Release,Release,9056,en/stable/generated/scanpy.pp.filter_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.filter_genes_dispersion. Contents . filter_genes_dispersion(). scanpy.pp.filter_genes_dispersion#. scanpy.pp.filter_genes_dispersion(data, *, flavor='seurat', min_disp=None, max_disp=None, min_mean=None, max_mean=None, n_bins=20, n_top_genes=None, log=True, subset=True, copy=False)[source]#; Extract highly variable genes [Satija et al., 2015, Zheng et al., 2017]. Warning. Deprecated since version 1.3.6: Use highly_variable_genes(); instead. The new function is equivalent to the present; function, except that. the new function always expects logarithmized data; subset=False in the new function, it suffices to; merely annotate the genes, tools like pp.pca will; detect the annotation; you can now call: sc.pl.highly_variable_genes(adata); copy is replaced by inplace. If trying out parameters, pass the data matrix instead of AnnData.; Depending on flavor, this reproduce",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes_dispersion.html:9067,Release,Release,9067,en/stable/generated/scanpy.pp.filter_genes_dispersion.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes_dispersion.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.highly_variable_genes. Contents . highly_variable_genes(). scanpy.pp.highly_variable_genes#. scanpy.pp.highly_variable_genes(adata, *, layer=None, n_top_genes=None, min_disp=0.5, max_disp=inf, min_mean=0.0125, max_mean=3, span=0.3, n_bins=20, flavor='seurat', subset=False, inplace=True, batch_key=None, check_values=True)[source]#; Annotate highly variable genes [Satija et al., 2015, Stuart et al., 2019, Zheng et al., 2017].; Expects logarithmized data, except when flavor='seurat_v3'/'seurat_v3_paper', in which count; data is expected.; Depending on flavor, this reproduces the R-implementations of Seurat; [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019].; 'seurat_v3'/'seurat_v3_paper' requires scikit-misc package. If you plan to use this flavor, consider; installing scanpy with this optional dependency: scanpy[skmisc].; Fo",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.highly_variable_genes.html:9065,Release,Release,9065,en/stable/generated/scanpy.pp.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.highly_variable_genes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.log1p. Contents . log1p(). scanpy.pp.log1p#. scanpy.pp.log1p(data, *, base=None, copy=False, chunked=None, chunk_size=None, layer=None, obsm=None)[source]#; Logarithmize the data matrix.; Computes \(X = \log(X + 1)\),; where \(log\) denotes the natural logarithm unless a different base is given. Parameters:. data AnnData | ndarray | spmatrixThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. base Number | None (default: None)Base of the logarithm. Natural logarithm is used by default. copy bool (default: False)If an AnnData is passed, determines whether a copy; is returned. chunked bool | None (default: None)Process the data matrix in chunks, which will save memory.; Applies only to AnnData. chunk_size int | None (default: None)n_obs of the chunks to process the data in. layer str | None (default: None)Entry of layer",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.log1p.html:9049,Release,Release,9049,en/stable/generated/scanpy.pp.log1p.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.log1p.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.neighbors. Contents . neighbors(). scanpy.pp.neighbors#. scanpy.pp.neighbors(adata, n_neighbors=15, n_pcs=None, *, use_rep=None, knn=True, method='umap', transformer=None, metric='euclidean', metric_kwds=mappingproxy({}), random_state=0, key_added=None, copy=False)[source]#; Computes the nearest neighbors distance matrix and a neighborhood graph of observations [McInnes et al., 2018].; The neighbor search efficiency of this heavily relies on UMAP [McInnes et al., 2018],; which also provides a method for estimating connectivities of data points -; the connectivity of the manifold (method=='umap'). If method=='gauss',; connectivities are computed according to Coifman et al. [2005], in the adaption of; Haghverdi et al. [2016]. Parameters:. adata AnnDataAnnotated data matrix. n_neighbors int (default: 15)The size of local neighborhood (in terms of number of neighboring",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.neighbors.html:9053,Release,Release,9053,en/stable/api/generated/scanpy.pp.neighbors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.neighbors.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.normalize_per_cell. Contents . normalize_per_cell(). scanpy.pp.normalize_per_cell#. scanpy.pp.normalize_per_cell(data, *, counts_per_cell_after=None, counts_per_cell=None, key_n_counts='n_counts', copy=False, layers=(), use_rep=None, min_counts=1)[source]#; Normalize total counts per cell. Warning. Deprecated since version 1.3.7: Use normalize_total() instead.; The new function is equivalent to the present; function, except that. the new function doesn’t filter cells based on min_counts,; use filter_cells() if filtering is needed.; some arguments were renamed; copy is replaced by inplace. Normalize each cell by total counts over all genes, so that every cell has; the same total count after normalization.; Similar functions are used, for example, by Seurat [Satija et al., 2015], Cell Ranger; [Zheng et al., 2017] or SPRING [Weinreb et al., 2017]. Parameters:. data An",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_per_cell.html:9062,Release,Release,9062,en/stable/generated/scanpy.pp.normalize_per_cell.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_per_cell.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.normalize_total. Contents . normalize_total(). scanpy.pp.normalize_total#. scanpy.pp.normalize_total(adata, *, target_sum=None, exclude_highly_expressed=False, max_fraction=0.05, key_added=None, layer=None, layers=None, layer_norm=None, inplace=True, copy=False)[source]#; Normalize counts per cell.; Normalize each cell by total counts over all genes,; so that every cell has the same total count after normalization.; If choosing target_sum=1e6, this is CPM normalization.; If exclude_highly_expressed=True, very highly expressed genes are excluded; from the computation of the normalization factor (size factor) for each; cell. This is meaningful as these can strongly influence the resulting; normalized values for all other genes [Weinreb et al., 2017].; Similar functions are used, for example, by Seurat [Satija et al., 2015], Cell Ranger; [Zheng et al., 2017] or SPRING",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_total.html:9059,Release,Release,9059,en/stable/generated/scanpy.pp.normalize_total.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.normalize_total.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.pca. Contents . pca(). scanpy.pp.pca#. scanpy.pp.pca(data, n_comps=None, *, layer=None, zero_center=True, svd_solver=None, random_state=0, return_info=False, mask_var=_empty, use_highly_variable=None, dtype='float32', chunked=False, chunk_size=None, copy=False)[source]#; Principal component analysis [Pedregosa et al., 2011].; Computes PCA coordinates, loadings and variance decomposition.; Uses the implementation of scikit-learn [Pedregosa et al., 2011]. Changed in version 1.5.0: In previous versions, computing a PCA on a sparse matrix would make; a dense copy of the array for mean centering.; As of scanpy 1.5.0, mean centering is implicit.; While results are extremely similar, they are not exactly the same.; If you would like to reproduce the old results, pass a dense array. Parameters:. data AnnData | ndarray | spmatrixThe (annotated) data matrix of shape n_obs × ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html:9047,Release,Release,9047,en/stable/generated/scanpy.pp.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.pca.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.recipe_zheng17. Contents . recipe_zheng17(). scanpy.pp.recipe_zheng17#. scanpy.pp.recipe_zheng17(adata, *, n_top_genes=1000, log=True, plot=False, copy=False)[source]#; Normalization and filtering as of Zheng et al. [2017].; Reproduces the preprocessing of Zheng et al. [2017] – the Cell Ranger R Kit of 10x; Genomics.; Expects non-logarithmized data.; If using logarithmized data, pass log=False.; The recipe runs the following steps; sc.pp.filter_genes(adata, min_counts=1) # only consider genes with more than 1 count; sc.pp.normalize_per_cell( # normalize with total UMI count per cell; adata, key_n_counts='n_counts_all'; ); filter_result = sc.pp.filter_genes_dispersion( # select highly-variable genes; adata.X, flavor='cell_ranger', n_top_genes=n_top_genes, log=False; ); adata = adata[:, filter_result.gene_subset] # subset the genes; sc.pp.normalize_per_cell(adata) # ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_zheng17.html:9058,Release,Release,9058,en/stable/api/generated/scanpy.pp.recipe_zheng17.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_zheng17.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.regress_out. Contents . regress_out(). scanpy.pp.regress_out#. scanpy.pp.regress_out(adata, keys, *, layer=None, n_jobs=None, copy=False)[source]#; Regress out (mostly) unwanted sources of variation.; Uses simple linear regression. This is inspired by Seurat’s regressOut; function in R [Satija et al., 2015]. Note that this function tends to overcorrect; in certain circumstances as described in issue526. Parameters:. adata AnnDataThe annotated data matrix. keys str | Sequence[str]Keys for observation annotation on which to regress on. layer str | None (default: None)If provided, which element of layers to regress on. n_jobs int | None (default: None)Number of jobs for parallel computation.; None means using scanpy._settings.ScanpyConfig.n_jobs. copy bool (default: False)Determines whether a copy of adata is returned. Return type:; AnnData | None. Returns:; Returns N",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.regress_out.html:9055,Release,Release,9055,en/stable/generated/scanpy.pp.regress_out.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.regress_out.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.scale. Contents . scale(). scanpy.pp.scale#. scanpy.pp.scale(data, *, zero_center=True, max_value=None, copy=False, layer=None, obsm=None, mask_obs=None)[source]#; Scale data to unit variance and zero mean. Note; Variables (genes) that do not display any variation (are constant across; all observations) are retained and (for zero_center==True) set to 0; during this operation. In the future, they might be set to NaNs. Parameters:. data AnnData | spmatrix | ndarray | ArrayThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. zero_center bool (default: True)If False, omit zero-centering variables, which allows to handle sparse; input efficiently. max_value float | None (default: None)Clip (truncate) to this value after scaling. If None, do not clip. copy bool (default: False)Whether this function should be performed inpla",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.scale.html:9049,Release,Release,9049,en/stable/generated/scanpy.pp.scale.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.scale.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.scrublet. Contents . scrublet(). scanpy.pp.scrublet#. scanpy.pp.scrublet(adata, adata_sim=None, *, batch_key=None, sim_doublet_ratio=2.0, expected_doublet_rate=0.05, stdev_doublet_rate=0.02, synthetic_doublet_umi_subsampling=1.0, knn_dist_metric='euclidean', normalize_variance=True, log_transform=False, mean_center=True, n_prin_comps=30, use_approx_neighbors=None, get_doublet_neighbor_parents=False, n_neighbors=None, threshold=None, verbose=True, copy=False, random_state=0)[source]#; Predict doublets using Scrublet [Wolock et al., 2019].; Predict cell doublets using a nearest-neighbor classifier of observed; transcriptomes and simulated doublets. Works best if the input is a raw; (unnormalized) counts matrix from a single sample or a collection of; similar samples from the same experiment.; This function is a wrapper around functions that pre-process using Scanpy; ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet.html:9052,Release,Release,9052,en/stable/api/generated/scanpy.pp.scrublet.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.scrublet_simulate_doublets. Contents . scrublet_simulate_doublets(). scanpy.pp.scrublet_simulate_doublets#. scanpy.pp.scrublet_simulate_doublets(adata, *, layer=None, sim_doublet_ratio=2.0, synthetic_doublet_umi_subsampling=1.0, random_seed=0)[source]#; Simulate doublets by adding the counts of random observed transcriptome pairs. Parameters:. adata AnnDataThe annotated data matrix of shape n_obs × n_vars. Rows; correspond to cells and columns to genes. Genes should have been; filtered for expression and variability, and the object should contain; raw expression of the same dimensions. layer str | None (default: None)Layer of adata where raw values are stored, or ‘X’ if values are in .X. sim_doublet_ratio float (default: 2.0)Number of doublets to simulate relative to the number of observed; transcriptomes. If None, self.sim_doublet_ratio is used. synthetic_doublet_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet_simulate_doublets.html:9070,Release,Release,9070,en/stable/api/generated/scanpy.pp.scrublet_simulate_doublets.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.scrublet_simulate_doublets.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.subsample. Contents . subsample(). scanpy.pp.subsample#. scanpy.pp.subsample(data, fraction=None, *, n_obs=None, random_state=0, copy=False)[source]#; Subsample to a fraction of the number of observations. Parameters:. data AnnData | ndarray | spmatrixThe (annotated) data matrix of shape n_obs × n_vars.; Rows correspond to cells and columns to genes. fraction float | None (default: None)Subsample to this fraction of the number of observations. n_obs int | None (default: None)Subsample to this number of observations. random_state Union[int, RandomState, None] (default: 0)Random seed to change subsampling. copy bool (default: False)If an AnnData is passed,; determines whether a copy is returned. Return type:; AnnData | tuple[ndarray | spmatrix, ndarray[Any, dtype[int64]]] | None. Returns:; Returns X[obs_indices], obs_indices if data is array-like, otherwise; subsampl",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.subsample.html:9053,Release,Release,9053,en/stable/generated/scanpy.pp.subsample.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.subsample.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.queries.biomart_annotations. Contents . biomart_annotations(). scanpy.queries.biomart_annotations#. scanpy.queries.biomart_annotations(org, attrs, *, host='www.ensembl.org', use_cache=False)[source]#; Retrieve gene annotations from ensembl biomart. Parameters:. org strOrganism to query. Must be an organism in ensembl biomart. “hsapiens”,; “mmusculus”, “drerio”, etc. attrs Iterable[str]Attributes to query biomart for. host str (default: 'www.ensembl.org')A valid BioMart host URL. Alternative values include archive urls (like; “grch37.ensembl.org”) or regional mirrors (like “useast.ensembl.org”). use_cache bool (default: False)Whether pybiomart should use a cache for requests. Will create a; .pybiomart.sqlite file in current directory if used. Return type:; DataFrame. Returns:; Dataframe containing annotations. Examples; Retrieve genes coordinates and chromosomes; >>> i",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.biomart_annotations.html:9068,Release,Release,9068,en/stable/generated/scanpy.queries.biomart_annotations.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.biomart_annotations.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.queries.enrich. Contents . enrich(). scanpy.queries.enrich#. scanpy.queries.enrich(container, *, org='hsapiens', gprofiler_kwargs=mappingproxy({}))[source]#; Get enrichment for DE results.; This is a thin convenience wrapper around the very useful gprofiler.; This method dispatches on the first argument, leading to the following two; signatures:; enrich(container, ...); enrich(adata: AnnData, group, key: str, ...). Where:; enrich(adata, group, key, ...) = enrich(adata.uns[key][""names""][group], ...). Parameters:. container Iterable[str] | Mapping[str, Iterable[str]]Contains list of genes you’d like to search. If container is a dict all; enrichment queries are made at once. adataAnnData object whose group will be looked for. groupThe group whose genes should be used for enrichment. keyKey in uns to find group under. org str (default: 'hsapiens')Organism to query. Must b",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.enrich.html:9055,Release,Release,9055,en/stable/generated/scanpy.queries.enrich.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.enrich.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.queries.gene_coordinates. Contents . gene_coordinates(). scanpy.queries.gene_coordinates#. scanpy.queries.gene_coordinates(org, gene_name, *, gene_attr='external_gene_name', chr_exclude=(), host='www.ensembl.org', use_cache=False)[source]#; Retrieve gene coordinates for specific organism through BioMart. Parameters:. org strOrganism to query. Must be an organism in ensembl biomart. “hsapiens”,; “mmusculus”, “drerio”, etc. gene_name strThe gene symbol (e.g. “hgnc_symbol” for human) for which to retrieve; coordinates. gene_attr str (default: 'external_gene_name')The biomart attribute the gene symbol should show up for. chr_exclude Iterable[str] (default: ())A list of chromosomes to exclude from query. host str (default: 'www.ensembl.org')A valid BioMart host URL. Alternative values include archive urls (like; “grch37.ensembl.org”) or regional mirrors (like “useast.ensem",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.gene_coordinates.html:9065,Release,Release,9065,en/stable/generated/scanpy.queries.gene_coordinates.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.gene_coordinates.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.queries.mitochondrial_genes. Contents . mitochondrial_genes(). scanpy.queries.mitochondrial_genes#. scanpy.queries.mitochondrial_genes(org, *, attrname='external_gene_name', host='www.ensembl.org', use_cache=False, chromosome='MT')[source]#; Mitochondrial gene symbols for specific organism through BioMart. Parameters:. org strOrganism to query. Must be an organism in ensembl biomart. “hsapiens”,; “mmusculus”, “drerio”, etc. attrname str (default: 'external_gene_name')Biomart attribute field to return. Possible values include; “external_gene_name”, “ensembl_gene_id”, “hgnc_symbol”, “mgi_symbol”,; and “zfin_id_symbol”. host str (default: 'www.ensembl.org')A valid BioMart host URL. Alternative values include archive urls (like; “grch37.ensembl.org”) or regional mirrors (like “useast.ensembl.org”). use_cache bool (default: False)Whether pybiomart should use a cache for re",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.mitochondrial_genes.html:9068,Release,Release,9068,en/stable/generated/scanpy.queries.mitochondrial_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.queries.mitochondrial_genes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read. Contents . read(). scanpy.read#. scanpy.read(filename, backed=None, *, sheet=None, ext=None, delimiter=None, first_column_names=False, backup_url=None, cache=False, cache_compression=_empty, **kwargs)[source]#; Read file and return AnnData object.; To speed up reading, consider passing cache=True, which creates an hdf5; cache file. Parameters:. filename Path | strIf the filename has no file extension, it is interpreted as a key for; generating a filename via sc.settings.writedir / (filename +; sc.settings.file_format_data). This is the same behavior as in; sc.read(filename, ...). backed Optional[Literal['r', 'r+']] (default: None)If 'r', load AnnData in backed mode instead; of fully loading it into memory (memory mode). If you want to modify; backed attributes of the AnnData object, you need to choose 'r+'. sheet str | None (default: None)Name of sheet/table in ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read.html:9045,Release,Release,9045,en/stable/generated/scanpy.read.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_10x_h5. Contents . read_10x_h5(). scanpy.read_10x_h5#. scanpy.read_10x_h5(filename, *, genome=None, gex_only=True, backup_url=None)[source]#; Read 10x-Genomics-formatted hdf5 file. Parameters:. filename Path | strPath to a 10x hdf5 file. genome str | None (default: None)Filter expression to genes within this genome. For legacy 10x h5; files, this must be provided if the data contains more than one genome. gex_only bool (default: True)Only keep ‘Gene Expression’ data and ignore other feature types,; e.g. ‘Antibody Capture’, ‘CRISPR Guide Capture’, or ‘Custom’. backup_url str | None (default: None)Retrieve the file from an URL if not present on disk. Return type:; AnnData. Returns:; Annotated data matrix, where observations/cells are named by their; barcode and variables/genes by gene name. Stores the following information:. XThe data matrix is stored. obs_namesCel",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_h5.html:9052,Release,Release,9052,en/stable/generated/scanpy.read_10x_h5.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_h5.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_10x_mtx. Contents . read_10x_mtx(). scanpy.read_10x_mtx#. scanpy.read_10x_mtx(path, *, var_names='gene_symbols', make_unique=True, cache=False, cache_compression=_empty, gex_only=True, prefix=None)[source]#; Read 10x-Genomics-formatted mtx directory. Parameters:. path Path | strPath to directory for .mtx and .tsv files,; e.g. ‘./filtered_gene_bc_matrices/hg19/’. var_names Literal['gene_symbols', 'gene_ids'] (default: 'gene_symbols')The variables index. make_unique bool (default: True)Whether to make the variables index unique by appending ‘-1’,; ‘-2’ etc. or not. cache bool (default: False)If False, read from source, if True, read from fast ‘h5ad’ cache. cache_compression Union[Literal['gzip', 'lzf'], None, Empty] (default: _empty)See the h5py Filter pipeline.; (Default: settings.cache_compression). gex_only bool (default: True)Only keep ‘Gene Expression’ data an",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_mtx.html:9053,Release,Release,9053,en/stable/generated/scanpy.read_10x_mtx.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_10x_mtx.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_h5ad. Contents . read_h5ad(). scanpy.read_h5ad#. scanpy.read_h5ad(filename, backed=None, *, as_sparse=(), as_sparse_fmt=<class 'scipy.sparse._csr.csr_matrix'>, chunk_size=6000)[source]#; Read .h5ad-formatted hdf5 file. Parameters:. filename str | PathFile name of data file. backed Union[Literal['r', 'r+'], bool, None] (default: None)If 'r', load AnnData in backed mode; instead of fully loading it into memory (memory mode).; If you want to modify backed attributes of the AnnData object,; you need to choose 'r+'.; Currently, backed only support updates to X. That means any; changes to other slots like obs will not be written to disk in; backed mode. If you would like save changes made to these slots; of a backed AnnData, write them to a new file; (see write()). For an example, see; [here] (https://anndata-tutorials.readthedocs.io/en/latest/getting-started.html#Part",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_h5ad.html:9050,Release,Release,9050,en/stable/generated/scanpy.read_h5ad.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_h5ad.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_loom. Contents . read_loom(). scanpy.read_loom#. scanpy.read_loom(filename, *, sparse=True, cleanup=False, X_name='spliced', obs_names='CellID', obsm_names=None, var_names='Gene', varm_names=None, dtype='float32', obsm_mapping=mappingproxy({}), varm_mapping=mappingproxy({}), **kwargs)[source]#; Read .loom-formatted hdf5 file.; This reads the whole file into memory.; Beware that you have to explicitly state when you want to read the file as; sparse data. Parameters:. filename PathLikeThe filename. sparse bool (default: True)Whether to read the data matrix as sparse. cleanup bool (default: False)Whether to collapse all obs/var fields that only store; one unique value into .uns['loom-.']. X_name str (default: 'spliced')Loompy key with which the data matrix X is initialized. obs_names str (default: 'CellID')Loompy key where the observation/cell names are stored. obsm",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_loom.html:9050,Release,Release,9050,en/stable/generated/scanpy.read_loom.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_loom.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_visium. Contents . read_visium(). scanpy.read_visium#. scanpy.read_visium(path, genome=None, *, count_file='filtered_feature_bc_matrix.h5', library_id=None, load_images=True, source_image_path=None)[source]#; Read 10x-Genomics-formatted visum dataset.; In addition to reading regular 10x output,; this looks for the spatial folder and loads images,; coordinates and scale factors.; Based on the Space Ranger output docs.; See spatial() for a compatible plotting function. Parameters:. path Path | strPath to directory for visium datafiles. genome str | None (default: None)Filter expression to genes within this genome. count_file str (default: 'filtered_feature_bc_matrix.h5')Which file in the passed directory to use as the count file. Typically would be one of:; ‘filtered_feature_bc_matrix.h5’ or ‘raw_feature_bc_matrix.h5’. library_id str | None (default: None)Identifie",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_visium.html:9052,Release,Release,9052,en/stable/generated/scanpy.read_visium.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_visium.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.set_figure_params. Contents . set_figure_params(). scanpy.set_figure_params#. scanpy.set_figure_params(self, *, scanpy=True, dpi=80, dpi_save=150, frameon=True, vector_friendly=True, fontsize=14, figsize=None, color_map=None, format='pdf', facecolor=None, transparent=False, ipython_format='png2x')[source]#; Set resolution/size, styling and format of figures. Parameters:. scanpy bool (default: True)Init default values for matplotlib.rcParams suited for Scanpy. dpi int (default: 80)Resolution of rendered figures – this influences the size of figures in notebooks. dpi_save int (default: 150)Resolution of saved figures. This should typically be higher to achieve; publication quality. frameon bool (default: True)Add frames and axes labels to scatter plots. vector_friendly bool (default: True)Plot scatter plots using png backend even when exporting as pdf or svg. fontsize i",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.set_figure_params.html:9058,Release,Release,9058,en/stable/generated/scanpy.set_figure_params.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.set_figure_params.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.dendrogram. Contents . dendrogram(). scanpy.tl.dendrogram#. scanpy.tl.dendrogram(adata, groupby, *, n_pcs=None, use_rep=None, var_names=None, use_raw=None, cor_method='pearson', linkage_method='complete', optimal_ordering=False, key_added=None, inplace=True)[source]#; Computes a hierarchical clustering for the given groupby categories.; By default, the PCA representation is used unless .X; has less than 50 variables.; Alternatively, a list of var_names (e.g. genes) can be given.; Average values of either var_names or components are used; to compute a correlation matrix.; The hierarchical clustering can be visualized using; scanpy.pl.dendrogram() or multiple other visualizations that can; include a dendrogram: matrixplot(),; heatmap(), dotplot(),; and stacked_violin(). Note; The computation of the hierarchical clustering is based on predefined; groups and not per ce",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dendrogram.html:9054,Release,Release,9054,en/stable/generated/scanpy.tl.dendrogram.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dendrogram.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.diffmap. Contents . diffmap(). scanpy.tl.diffmap#. scanpy.tl.diffmap(adata, n_comps=15, *, neighbors_key=None, random_state=0, copy=False)[source]#; Diffusion Maps [Coifman et al., 2005, Haghverdi et al., 2015, Wolf et al., 2018].; Diffusion maps [Coifman et al., 2005] has been proposed for visualizing single-cell; data by Haghverdi et al. [2015]. The tool uses the adapted Gaussian kernel suggested; by Haghverdi et al. [2016] in the implementation of Wolf et al. [2018].; The width (“sigma”) of the connectivity kernel is implicitly determined by; the number of neighbors used to compute the single-cell graph in; neighbors(). To reproduce the original implementation; using a Gaussian kernel, use method=='gauss' in; neighbors(). To use an exponential kernel, use the default; method=='umap'. Differences between these options shouldn’t usually be; dramatic. Parameters:. ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.diffmap.html:9051,Release,Release,9051,en/stable/generated/scanpy.tl.diffmap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.diffmap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.dpt. Contents . dpt(). scanpy.tl.dpt#. scanpy.tl.dpt(adata, n_dcs=10, *, n_branchings=0, min_group_size=0.01, allow_kendall_tau_shift=True, neighbors_key=None, copy=False)[source]#; Infer progression of cells through geodesic distance along the graph; [Haghverdi et al., 2016, Wolf et al., 2019].; Reconstruct the progression of a biological process from snapshot; data. Diffusion Pseudotime has been introduced by Haghverdi et al. [2016] and; implemented within Scanpy [Wolf et al., 2018]. Here, we use a further developed; version, which is able to deal with disconnected graphs [Wolf et al., 2019] and can; be run in a hierarchical mode by setting the parameter; n_branchings>1. We recommend, however, to only use; dpt() for computing pseudotime (n_branchings=0) and; to detect branchings via paga(). For pseudotime, you need; to annotate your data with a root cell. For ins",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dpt.html:9047,Release,Release,9047,en/stable/generated/scanpy.tl.dpt.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.dpt.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.draw_graph. Contents . draw_graph(). scanpy.tl.draw_graph#. scanpy.tl.draw_graph(adata, layout='fa', *, init_pos=None, root=None, random_state=0, n_jobs=None, adjacency=None, key_added_ext=None, neighbors_key=None, obsp=None, copy=False, **kwds)[source]#; Force-directed graph drawing [Chippada, 2018, Islam et al., 2011, Jacomy et al., 2014].; An alternative to tSNE that often preserves the topology of the data; better. This requires to run neighbors(), first.; The default layout (‘fa’, ForceAtlas2, Jacomy et al. [2014]) uses the package fa2-modified; [Chippada, 2018], which can be installed via pip install fa2-modified.; Force-directed graph drawing describes a class of long-established; algorithms for visualizing graphs.; It has been suggested for visualizing single-cell data by Islam et al. [2011].; Many other layouts as implemented in igraph [Csárdi and Nepusz, ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.draw_graph.html:9054,Release,Release,9054,en/stable/generated/scanpy.tl.draw_graph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.draw_graph.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.embedding_density. Contents . embedding_density(). scanpy.tl.embedding_density#. scanpy.tl.embedding_density(adata, basis='umap', *, groupby=None, key_added=None, components=None)[source]#; Calculate the density of cells in an embedding (per condition).; Gaussian kernel density estimation is used to calculate the density of; cells in an embedded space. This can be performed per category over a; categorical cell annotation. The cell density can be plotted using the; pl.embedding_density function.; Note that density values are scaled to be between 0 and 1. Thus, the; density value at each cell is only comparable to densities in; the same category.; Beware that the KDE estimate used (scipy.stats.gaussian_kde) becomes; unreliable if you don’t have enough cells in a category.; This function was written by Sophie Tritschler and implemented into; Scanpy by Malte Luecken. ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.embedding_density.html:9061,Release,Release,9061,en/stable/generated/scanpy.tl.embedding_density.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.embedding_density.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.filter_rank_genes_groups. Contents . filter_rank_genes_groups(). scanpy.tl.filter_rank_genes_groups#. scanpy.tl.filter_rank_genes_groups(adata, *, key=None, groupby=None, use_raw=None, key_added='rank_genes_groups_filtered', min_in_group_fraction=0.25, min_fold_change=1, max_out_group_fraction=0.5, compare_abs=False)[source]#; Filters out genes based on log fold change and fraction of genes expressing the; gene within and outside the groupby categories.; See rank_genes_groups().; Results are stored in adata.uns[key_added]; (default: ‘rank_genes_groups_filtered’).; To preserve the original structure of adata.uns[‘rank_genes_groups’],; filtered genes are set to NaN. Parameters:. adata AnnData. key str | None (default: None). groupby str | None (default: None). use_raw bool | None (default: None). key_added str (default: 'rank_genes_groups_filtered'). min_in_group_fra",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.filter_rank_genes_groups.html:9068,Release,Release,9068,en/stable/generated/scanpy.tl.filter_rank_genes_groups.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.filter_rank_genes_groups.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.ingest. Contents . ingest(). scanpy.tl.ingest#. scanpy.tl.ingest(adata, adata_ref, *, obs=None, embedding_method=('umap', 'pca'), labeling_method='knn', neighbors_key=None, inplace=True, **kwargs)[source]#; Map labels and embeddings from reference data to new data.; Integrating data using ingest and BBKNN; Integrates embeddings and annotations of an adata with a reference dataset; adata_ref through projecting on a PCA (or alternate; model) that has been fitted on the reference data. The function uses a knn; classifier for mapping labels and the UMAP package [McInnes et al., 2018] for mapping; the embeddings. Note; We refer to this asymmetric dataset integration as ingesting; annotations from reference data to new data. This is different from; learning a joint representation that integrates both datasets in an; unbiased way, as CCA (e.g. in Seurat) or a conditional ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html:9050,Release,Release,9050,en/stable/generated/scanpy.tl.ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.ingest.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.leiden. Contents . leiden(). scanpy.tl.leiden#. scanpy.tl.leiden(adata, resolution=1, *, restrict_to=None, random_state=0, key_added='leiden', adjacency=None, directed=None, use_weights=True, n_iterations=-1, partition_type=None, neighbors_key=None, obsp=None, copy=False, flavor='leidenalg', **clustering_args)[source]#; Cluster cells into subgroups [Traag et al., 2019].; Cluster cells using the Leiden algorithm [Traag et al., 2019],; an improved version of the Louvain algorithm [Blondel et al., 2008].; It has been proposed for single-cell analysis by Levine et al. [2015].; This requires having ran neighbors() or; bbknn() first. Parameters:. adata AnnDataThe annotated data matrix. resolution float (default: 1)A parameter value controlling the coarseness of the clustering.; Higher values lead to more clusters.; Set to None if overriding partition_type; to one that do",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.leiden.html:9050,Release,Release,9050,en/stable/generated/scanpy.tl.leiden.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.leiden.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.louvain. Contents . louvain(). scanpy.tl.louvain#. scanpy.tl.louvain(adata, resolution=None, *, random_state=0, restrict_to=None, key_added='louvain', adjacency=None, flavor='vtraag', directed=True, use_weights=False, partition_type=None, partition_kwargs=mappingproxy({}), neighbors_key=None, obsp=None, copy=False)[source]#; Cluster cells into subgroups [Blondel et al., 2008, Levine et al., 2015, Traag, 2015].; Cluster cells using the Louvain algorithm [Blondel et al., 2008] in the implementation; of Traag [2015]. The Louvain algorithm has been proposed for single-cell; analysis by Levine et al. [2015].; This requires having ran neighbors() or; bbknn() first,; or explicitly passing a adjacency matrix. Parameters:. adata AnnDataThe annotated data matrix. resolution float | None (default: None)For the default flavor ('vtraag') or for `RAPIDS`, you can provide a; reso",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.louvain.html:9051,Release,Release,9051,en/stable/generated/scanpy.tl.louvain.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.louvain.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.marker_gene_overlap. Contents . marker_gene_overlap(). scanpy.tl.marker_gene_overlap#. scanpy.tl.marker_gene_overlap(adata, reference_markers, *, key='rank_genes_groups', method='overlap_count', normalize=None, top_n_markers=None, adj_pval_threshold=None, key_added='marker_gene_overlap', inplace=False)[source]#; Calculate an overlap score between data-deriven marker genes and; provided markers; Marker gene overlap scores can be quoted as overlap counts, overlap; coefficients, or jaccard indices. The method returns a pandas dataframe; which can be used to annotate clusters based on marker gene overlaps.; This function was written by Malte Luecken. Parameters:. adata AnnDataThe annotated data matrix. reference_markers dict[str, set] | dict[str, list]A marker gene dictionary object. Keys should be strings with the; cell identity name and values are sets or lists of st",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.marker_gene_overlap.html:9063,Release,Release,9063,en/stable/generated/scanpy.tl.marker_gene_overlap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.marker_gene_overlap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.paga. Contents . paga(). scanpy.tl.paga#. scanpy.tl.paga(adata, groups=None, *, use_rna_velocity=False, model='v1.2', neighbors_key=None, copy=False)[source]#; Mapping out the coarse-grained connectivity structures of complex manifolds [Wolf et al., 2019].; By quantifying the connectivity of partitions (groups, clusters) of the; single-cell graph, partition-based graph abstraction (PAGA) generates a much; simpler abstracted graph (PAGA graph) of partitions, in which edge weights; represent confidence in the presence of connections. By thresholding this; confidence in paga(), a much simpler representation of the; manifold data is obtained, which is nonetheless faithful to the topology of; the manifold.; The confidence should be interpreted as the ratio of the actual versus the; expected value of connections under the null model of randomly connecting; partitions. We",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.paga.html:9048,Release,Release,9048,en/stable/generated/scanpy.tl.paga.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.paga.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.rank_genes_groups. Contents . rank_genes_groups(). scanpy.tl.rank_genes_groups#. scanpy.tl.rank_genes_groups(adata, groupby, *, mask_var=None, use_raw=None, groups='all', reference='rest', n_genes=None, rankby_abs=False, pts=False, key_added=None, copy=False, method=None, corr_method='benjamini-hochberg', tie_correct=False, layer=None, **kwds)[source]#; Rank genes for characterizing groups.; Expects logarithmized data. Parameters:. adata AnnDataAnnotated data matrix. groupby strThe key of the observations grouping to consider. mask_var ndarray[Any, dtype[bool]] | str | None (default: None)Select subset of genes to use in statistical tests. use_raw bool | None (default: None)Use raw attribute of adata if present. layer str | None (default: None)Key from adata.layers whose value will be used to perform tests on. groups Union[Literal['all'], Iterable[str]] (default: '",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.rank_genes_groups.html:9061,Release,Release,9061,en/stable/generated/scanpy.tl.rank_genes_groups.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.rank_genes_groups.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.score_genes. Contents . score_genes(). scanpy.tl.score_genes#. scanpy.tl.score_genes(adata, gene_list, *, ctrl_as_ref=True, ctrl_size=50, gene_pool=None, n_bins=25, score_name='score', random_state=0, copy=False, use_raw=None)[source]#; Score a set of genes [Satija et al., 2015].; The score is the average expression of a set of genes subtracted with the; average expression of a reference set of genes. The reference set is; randomly sampled from the gene_pool for each binned expression value.; This reproduces the approach in Seurat [Satija et al., 2015] and has been implemented; for Scanpy by Davide Cittaro. Parameters:. adataThe annotated data matrix. gene_listThe list of gene names used for score calculation. ctrl_as_ref default: TrueAllow the algorithm to use the control genes as reference.; Will be changed to False in scanpy 2.0. ctrl_size default: 50Number of r",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.score_genes.html:9055,Release,Release,9055,en/stable/generated/scanpy.tl.score_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.score_genes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.score_genes_cell_cycle. Contents . score_genes_cell_cycle(). scanpy.tl.score_genes_cell_cycle#. scanpy.tl.score_genes_cell_cycle(adata, *, s_genes, g2m_genes, copy=False, **kwargs)[source]#; Score cell cycle genes [Satija et al., 2015].; Given two lists of genes associated to S phase and G2M phase, calculates; scores and assigns a cell cycle phase (G1, S or G2M). See; score_genes() for more explanation. Parameters:. adata AnnDataThe annotated data matrix. s_genes Sequence[str]List of genes associated with S phase. g2m_genes Sequence[str]List of genes associated with G2M phase. copy bool (default: False)Copy adata or modify it inplace. **kwargsAre passed to score_genes(). ctrl_size is not; possible, as it’s set as min(len(s_genes), len(g2m_genes)). Return type:; AnnData | None. Returns:; Returns None if copy=False, else returns an AnnData object. Sets the following ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.score_genes_cell_cycle.html:9066,Release,Release,9066,en/stable/generated/scanpy.tl.score_genes_cell_cycle.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.score_genes_cell_cycle.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.sim. Contents . sim(). scanpy.tl.sim#. scanpy.tl.sim(model, *, params_file=True, tmax=None, branching=None, nrRealizations=None, noiseObs=None, noiseDyn=None, step=None, seed=None, writedir=None)[source]#; Simulate dynamic gene expression data [Wittmann et al., 2009] [Wolf et al., 2018].; Sample from a stochastic differential equation model built from; literature-curated boolean gene regulatory networks, as suggested by; Wittmann et al. [2009]. The Scanpy implementation is due to Wolf et al. [2018]. Parameters:. model Literal['krumsiek11', 'toggleswitch']Model file in ‘sim_models’ directory. params_file bool (default: True)Read default params from file. tmax int | None (default: None)Number of time steps per realization of time series. branching bool | None (default: None)Only write realizations that contain new branches. nrRealizations int | None (default: None)Nu",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.sim.html:9047,Release,Release,9047,en/stable/generated/scanpy.tl.sim.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.sim.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.tsne. Contents . tsne(). scanpy.tl.tsne#. scanpy.tl.tsne(adata, n_pcs=None, *, use_rep=None, perplexity=30, metric='euclidean', early_exaggeration=12, learning_rate=1000, random_state=0, use_fast_tsne=False, n_jobs=None, copy=False)[source]#; t-SNE [Amir et al., 2013, Pedregosa et al., 2011, van der Maaten and Hinton, 2008].; t-distributed stochastic neighborhood embedding (tSNE, van der Maaten and Hinton [2008]) has been; proposed for visualizating single-cell data by Amir et al. [2013]. Here, by default,; we use the implementation of scikit-learn [Pedregosa et al., 2011]. You can achieve; a huge speedup and better convergence if you install Multicore-tSNE; by Ulyanov [2016], which will be automatically detected by Scanpy. Parameters:. adata AnnDataAnnotated data matrix. n_pcs int | None (default: None)Use this many PCs. If n_pcs==0 use .X if use_rep is None. use_",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.tsne.html:9048,Release,Release,9048,en/stable/generated/scanpy.tl.tsne.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.tsne.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.tl.umap. Contents . umap(). scanpy.tl.umap#. scanpy.tl.umap(adata, *, min_dist=0.5, spread=1.0, n_components=2, maxiter=None, alpha=1.0, gamma=1.0, negative_sample_rate=5, init_pos='spectral', random_state=0, a=None, b=None, method='umap', neighbors_key='neighbors', copy=False)[source]#; Embed the neighborhood graph using UMAP [McInnes et al., 2018].; UMAP (Uniform Manifold Approximation and Projection) is a manifold learning; technique suitable for visualizing high-dimensional data. Besides tending to; be faster than tSNE, it optimizes the embedding such that it best reflects; the topology of the data, which we represent throughout Scanpy using a; neighborhood graph. tSNE, by contrast, optimizes the distribution of; nearest-neighbor distances in the embedding such that these best match the; distribution of distances in the high-dimensional space.; We use the implemen",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.umap.html:9048,Release,Release,9048,en/stable/generated/scanpy.tl.umap.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.tl.umap.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,py.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. Index. A; | B; | C; | D; | E; | F; | G; | H; | I; | K; | L; | M; | N; | O; | P; | R; | S; | T; | U; | V; | W. A. add_dendrogram() (scanpy.pl.DotPlot method). (scanpy.pl.MatrixPlot method). (scanpy.pl.StackedViolin method). add_totals() (scanpy.pl.DotPlot method). (scanpy.pl.MatrixPlot method). (scanpy.pl.StackedViolin method). aggregate() (in module scanpy.get). autosave (scanpy._settings.ScanpyConfig property). autoshow (scanpy._settings.ScanpyConfig property). B. bbknn() (in module scanpy.external.pp). biomart_annotations() (in module scanpy.queries). blobs() (in module scanpy.datasets). C. cache_compression (scanpy._settings.ScanpyConfig property). cachedir (scanpy._settings.ScanpyConfig property). calculate_qc_metrics() (in module scanpy.pp). categories_to_ignore (scanpy._settings.ScanpyConfig property). cellbrowser() (in module scanpy.external.exporting). clustermap() (in module sc,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/genindex.html:9039,Release,Release,9039,en/stable/genindex.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/genindex.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"py.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fbpca NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; intervaltree ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9963,install,install,9963,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,2,['install'],['install']
Deployability,"py.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAP’s implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an annotated reference adata_ref into an adata that still lacks this annotation. It is different from learning a joint representation that in",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9811,integrat,integrates,9811,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integrates']
Deployability,"py.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Versioning. Contents . Semantic versioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. 1.7.x for the 1.7 release series).; For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs are assigned a patch version milestone such as 1.7.4.; Once the PR is approved and merged, the bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures. Technical details#; The [meeseeks bot][] reacts to commands like this,; given as a comment on the PR, or a label or milestone descript",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:9859,release,releasesshould,9859,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,1,['release'],['releasesshould']
Deployability,"py.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Installation. Contents . Development Version; Docker; Troubleshooting. Installation#; To use scanpy from another project, install it using your favourite environment manager:. Hatch (recommended)Pip/PyPICondaAdding scanpy[leiden] to your dependencies is enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; $ gh repo clone scverse/scanpy; $ cd scanpy. Hatch (recommended)Pip/PyPICondaTo use one of the predefined Hatch environments in hatch.toml,; run either hatch test [args] or hatch run [env:]command [...args], e.g.:; $ hatch test -p # run tests in parallel; $ hatch run docs:build # build docs; $ hatch run towncrier:create # create changelog entry. If you are using pip>=21.3, an editable install can be made:; $ python -m venv .venv; $ source .venv/bin/activate",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:9673,install,install,9673,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,1,['install'],['install']
Deployability,"py.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9544,release,release,9544,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"py.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.n_jobs. Contents . ScanpyConfig.n_jobs. scanpy._settings.ScanpyConfig.n_jobs#. property ScanpyConfig.n_jobs: int[source]#; Default number of jobs/ CPUs to use for parallel computing.; Set to -1 in order to use all available cores.; Not all algorithms support special behavior for numbers < -1,; so make sure to leave this setting as >= -1. previous; scanpy._settings.ScanpyConfig.max_memory. next; scanpy._settings.ScanpyConfig.plot_suffix. Contents; . ScanpyConfig.n_jobs. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html:9070,Release,Release,9070,en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.n_jobs.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"pyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.rp_forest. Contents . Neighbors.rp_forest. scanpy.Neighbors.rp_forest#. property Neighbors.rp_forest: Mapping[str, Mapping[str, ndarray]] | None[source]#. previous; scanpy.Neighbors.eigen_values. next; scanpy.Neighbors.transitions. Contents; . Neighbors.rp_forest. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.rp_forest.html:9060,Release,Release,9060,en/stable/generated/scanpy.Neighbors.rp_forest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.rp_forest.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"pyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT. Contents . DotPlot.MIN_FIGURE_HEIGHT. scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT#. DotPlot.MIN_FIGURE_HEIGHT = 2.5[source]#. previous; scanpy.pl.DotPlot.MAX_NUM_CATEGORIES. next; scanpy.pl.DotPlot.add_dendrogram. Contents; . DotPlot.MIN_FIGURE_HEIGHT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT.html:9069,Release,Release,9069,en/stable/api/generated/classes/scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.MIN_FIGURE_HEIGHT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"pyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH. Contents . MatrixPlot.DEFAULT_LEGENDS_WIDTH. scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH#. MatrixPlot.DEFAULT_LEGENDS_WIDTH = 1.5[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_EDGE_LW. next; scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX. Contents; . MatrixPlot.DEFAULT_LEGENDS_WIDTH. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html:9076,Release,Release,9076,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"r to only normalize using a fraction of expressed genes S Rybakov; downsample_counts() has been sped up, changed default value of replace parameter to False pr474 I Virshup; embedding_density() computes densities on embeddings pr543 M Luecken; palantir() interfaces Palantir [Setty et al., 2019] pr493 A Mousa. Code design#. .layers support of scatter plots F Ramirez; fix double-logarithmization in compute of log fold change in rank_genes_groups() A Muñoz-Rojas; fix return sections of docs P Angerer. Version 1.3#. 1.3.8 2019-02-05#. various documentation and dev process improvements; Added combat() function for batch effect correction [Johnson et al., 2006, Leek et al., 2017, Pedersen, 2012] pr398 M Lange. 1.3.7 2019-01-02#. API changed from import scanpy as sc to import scanpy.api as sc.; phenograph() wraps the graph clustering package Phenograph [Levine et al., 2015] thanks to A Mousa. 1.3.6 2018-12-11#. Major updates#. a new plotting gallery for visualizing-marker-genes F Ramirez; tutorials are integrated on ReadTheDocs, pbmc3k and paga-paul15 A Wolf. Interactive exploration of analysis results through manifold viewers#. CZI’s cellxgene directly reads .h5ad files the cellxgene developers; the UCSC Single Cell Browser requires exporting via cellbrowser() M Haeussler. Code design#. highly_variable_genes() supersedes filter_genes_dispersion(), it gives the same results but, by default, expects logarithmized data and doesn’t subset A Wolf. 1.3.5 2018-12-09#. uncountable figure improvements pr369 F Ramirez. 1.3.4 2018-11-24#. leiden() wraps the recent graph clustering package by Traag et al. [2019] K Polanski; bbknn() wraps the recent batch correction package [Polański et al., 2019] K Polanski; calculate_qc_metrics() caculates a number of quality control metrics, similar to calculateQCMetrics from Scater [McCarthy et al., 2017] I Virshup. 1.3.3 2018-11-05#. Major updates#. a fully distributed preprocessing backend T White and the Laserson Lab. Code design#. read_10x_h5()",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:44595,integrat,integrated,44595,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['integrat'],['integrated']
Deployability,"r; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Metrics. Metrics#; Collections of useful measurements for evaluating results. metrics.confusion_matrix; Given an original and new set of labels, create a labelled confusion matrix. metrics.gearys_c; Calculate Geary's C, as used by VISION. metrics.morans_i; Calculate Moran’s I Global Autocorrelation Statistic. previous; scanpy.queries.enrich. next; scanpy.metrics.confusion_matrix. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/metrics.html:9041,Release,Release,9041,en/stable/api/metrics.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/metrics.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,rank_genes_groups_heatmap — scanpy; scanpy.pl.rank_genes_groups_matrixplot — scanpy; scanpy.pl.rank_genes_groups_stacked_violin — scanpy; scanpy.pl.rank_genes_groups_tracksplot — scanpy; scanpy.pl.rank_genes_groups_violin — scanpy; scanpy.pl.scrublet_score_distribution — scanpy; scanpy.pl.sim — scanpy; scanpy.pl.spatial — scanpy; scanpy.pl.tsne — scanpy; scanpy.pl.umap — scanpy; scanpy.pp.combat — scanpy; scanpy.pp.neighbors — scanpy; scanpy.pp.recipe_seurat — scanpy; scanpy.pp.recipe_weinreb17 — scanpy; scanpy.pp.recipe_zheng17 — scanpy; scanpy.pp.scrublet — scanpy; scanpy.pp.scrublet_simulate_doublets — scanpy. Classes — scanpy; Datasets — scanpy; Deprecated functions — scanpy; Experimental — scanpy; Get object from AnnData: get — scanpy; API — scanpy; Metrics — scanpy; Plotting: pl — scanpy; Preprocessing: pp — scanpy; Queries — scanpy; Reading — scanpy; Settings — scanpy; Tools: tl — scanpy. /dev; ; CI — scanpy; Contributing code — scanpy; Documentation — scanpy; Getting set up — scanpy; Contributing — scanpy; Making a release — scanpy; Tests — scanpy; Versioning — scanpy. /external; . /generated; ; scanpy.external.tl.cyclone — scanpy; scanpy.external.tl.harmony_timeseries — scanpy; scanpy.external.tl.palantir — scanpy; scanpy.external.tl.palantir_results — scanpy; scanpy.external.tl.phate — scanpy; scanpy.external.tl.phenograph — scanpy; scanpy.external.tl.sam — scanpy; scanpy.external.tl.sandbag — scanpy; scanpy.external.tl.trimap — scanpy; scanpy.external.tl.wishbone — scanpy. Exporting — scanpy; External API — scanpy; Plotting: PL — scanpy; Preprocessing: PP — scanpy; Tools: TL — scanpy. /generated; ; scanpy._settings.ScanpyConfig.autosave — scanpy; scanpy._settings.ScanpyConfig.autoshow — scanpy; scanpy._settings.ScanpyConfig.cache_compression — scanpy; scanpy._settings.ScanpyConfig.cachedir — scanpy; scanpy._settings.ScanpyConfig.categories_to_ignore — scanpy; scanpy._settings.ScanpyConfig.datasetdir — scanpy; scanpy._settings.ScanpyConfig.figdir — scanpy; ,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:16670,release,release,16670,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,1,['release'],['release']
Deployability,"rbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH. Contents . MatrixPlot.DEFAULT_CATEGORY_WIDTH. scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH#. MatrixPlot.DEFAULT_CATEGORY_WIDTH = 0.37[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_HEIGHT. next; scanpy.pl.MatrixPlot.DEFAULT_COLORMAP. Contents; . MatrixPlot.DEFAULT_CATEGORY_WIDTH. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html:9077,Release,Release,9077,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_CATEGORY_WIDTH.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"rce]#; Processed Visium Spatial Gene Expression data from 10x Genomics’ database.; The database can be browsed online to find the sample_id you want. Parameters:. sample_id Literal['V1_Breast_Cancer_Block_A_Section_1', 'V1_Breast_Cancer_Block_A_Section_2', 'V1_Human_Heart', 'V1_Human_Lymph_Node', 'V1_Mouse_Kidney', 'V1_Adult_Mouse_Brain', 'V1_Mouse_Brain_Sagittal_Posterior', 'V1_Mouse_Brain_Sagittal_Posterior_Section_2', 'V1_Mouse_Brain_Sagittal_Anterior', 'V1_Mouse_Brain_Sagittal_Anterior_Section_2', 'V1_Human_Brain_Section_1', 'V1_Human_Brain_Section_2', 'V1_Adult_Mouse_Brain_Coronal_Section_1', 'V1_Adult_Mouse_Brain_Coronal_Section_2', 'Targeted_Visium_Human_Cerebellum_Neuroscience', 'Parent_Visium_Human_Cerebellum', 'Targeted_Visium_Human_SpinalCord_Neuroscience', 'Parent_Visium_Human_SpinalCord', 'Targeted_Visium_Human_Glioblastoma_Pan_Cancer', 'Parent_Visium_Human_Glioblastoma', 'Targeted_Visium_Human_BreastCancer_Immunology', 'Parent_Visium_Human_BreastCancer', 'Targeted_Visium_Human_OvarianCancer_Pan_Cancer', 'Targeted_Visium_Human_OvarianCancer_Immunology', 'Parent_Visium_Human_OvarianCancer', 'Targeted_Visium_Human_ColorectalCancer_GeneSignature', 'Parent_Visium_Human_ColorectalCancer'] (default: 'V1_Breast_Cancer_Block_A_Section_1')The ID of the data sample in 10x’s spatial database. include_hires_tiff bool (default: False)Download and include the high-resolution tissue image (tiff) in; adata.uns[""spatial""][sample_id][""metadata""][""source_image_path""]. Return type:; AnnData. Returns:; Annotated data matrix. Examples; >>> import scanpy as sc; >>> sc.datasets.visium_sge(sample_id='V1_Breast_Cancer_Block_A_Section_1'); AnnData object with n_obs × n_vars = 3798 × 36601; obs: 'in_tissue', 'array_row', 'array_col'; var: 'gene_ids', 'feature_types', 'genome'; uns: 'spatial'; obsm: 'spatial'. previous; scanpy.datasets.toggleswitch. next; Deprecated functions. Contents; . visium_sge(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.visium_sge.html:11276,toggle,toggleswitch,11276,en/stable/generated/scanpy.datasets.visium_sge.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.datasets.visium_sge.html,1,['toggle'],['toggleswitch']
Deployability,re.rst; scanpy.pl.paga_path.rst; scanpy.pl.pca.rst; scanpy.pl.pca_loadings.rst; scanpy.pl.pca_overview.rst; scanpy.pl.pca_variance_ratio.rst; scanpy.pl.rank_genes_groups.rst; scanpy.pl.rank_genes_groups_dotplot.rst; scanpy.pl.rank_genes_groups_heatmap.rst; scanpy.pl.rank_genes_groups_matrixplot.rst; scanpy.pl.rank_genes_groups_stacked_violin.rst; scanpy.pl.rank_genes_groups_tracksplot.rst; scanpy.pl.rank_genes_groups_violin.rst; scanpy.pl.scrublet_score_distribution.rst; scanpy.pl.sim.rst; scanpy.pl.spatial.rst; scanpy.pl.tsne.rst; scanpy.pl.umap.rst; scanpy.pp.combat.rst; scanpy.pp.neighbors.rst; scanpy.pp.recipe_seurat.rst; scanpy.pp.recipe_weinreb17.rst; scanpy.pp.recipe_zheng17.rst; scanpy.pp.scrublet.rst; scanpy.pp.scrublet_simulate_doublets.rst. classes.md; datasets.md; deprecated.md; experimental.md; get.md; index.md; metrics.md; plotting.md; preprocessing.md; queries.md; reading.md; settings.md; tools.md. /dev; ; ci.md; code.md; documentation.md; getting-set-up.md; index.md; release.md; testing.md; versioning.md. /external; . /generated; ; scanpy.external.tl.cyclone.rst; scanpy.external.tl.harmony_timeseries.rst; scanpy.external.tl.palantir.rst; scanpy.external.tl.palantir_results.rst; scanpy.external.tl.phate.rst; scanpy.external.tl.phenograph.rst; scanpy.external.tl.sam.rst; scanpy.external.tl.sandbag.rst; scanpy.external.tl.trimap.rst; scanpy.external.tl.wishbone.rst. exporting.md; index.md; plotting.md; preprocessing.md; tools.md. /generated; ; scanpy._settings.ScanpyConfig.autosave.rst; scanpy._settings.ScanpyConfig.autoshow.rst; scanpy._settings.ScanpyConfig.cache_compression.rst; scanpy._settings.ScanpyConfig.cachedir.rst; scanpy._settings.ScanpyConfig.categories_to_ignore.rst; scanpy._settings.ScanpyConfig.datasetdir.rst; scanpy._settings.ScanpyConfig.figdir.rst; scanpy._settings.ScanpyConfig.file_format_data.rst; scanpy._settings.ScanpyConfig.file_format_figs.rst; scanpy._settings.ScanpyConfig.logfile.rst; scanpy._settings.ScanpyConfig.logpath.rst; ,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:4910,release,release,4910,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,1,['release'],['release']
Deployability,"re_eval 0.2.2; pydev_ipython NA; pydevconsole NA; pydevd 2.9.5; pydevd_file_utils NA; pydevd_plugins NA; pydevd_tracing NA; pygments 2.17.2; pyparsing 3.1.1; pythonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 17:28. Reading the data#; We will use a Visium spatial transcriptomics dataset of the human lymphnode, which is publicly available from the 10x genomics website: link.; The function datasets.visium_sge() downloads the dataset from 10x Genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and percentage of mitochondrial read counts per sample.; When using your own Visium data, use sc.read_visium() function to import it. adata = sc.datasets.visium_sge(sample_id=""V1_Human_Lymph_Node""); adata.var_names_make_unique(); adata.var[""mt""] = adata.var_names.str.startswith(""MT-""); sc.pp.calculate_qc_metrics(adata, qc_vars=[""mt""], inplace=True). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Human_Lymph_Node/filtered_feature_bc_matrix.h5; (0:00:01). This is how the adata structure looks like for Visium data. adata. AnnData object with n_o",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:12232,update,updated,12232,en/stable/tutorials/spatial/basic-analysis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html,1,['update'],['updated']
Deployability,"rect; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Installation. Contents . Development Version; Docker; Troubleshooting. Installation#; To use scanpy from another project, install it using your favourite environment manager:. Hatch (recommended)Pip/PyPICondaAdding scanpy[leiden] to your dependencies is enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; $ gh repo clone scverse/scanpy; $ cd scanpy. Hatch (recommended)Pip/PyPICondaTo use one of the predefined Hatch envir",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:9291,Install,Installation,9291,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,2,"['Install', 'install']","['Installation', 'install']"
Deployability,"reprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. CI. Contents . Plotting tests; Viewing plots from failed tests on Azure pipelines; Misc. CI#. Plotting tests#; A frequent frustration in testing is the reproducibility of the plots and matplotlib’s behaviour in different environments.; We have some tooling to help with this. Viewing plots from failed tests on Azure pipelines#; The fixtures check_same_image and image_comparer upload plots from failing tests so you can view them from the azure pipelines test viewer.; To find these, navigate to the tests tab for your build. Select your failing test. And open the attachments tab. From here you can view and download the images which were compared, as well as a diff between them. Misc#; matplotlib.testing.setup() tries to establish a consistent environment for creating plots. Make sure it’s active!. previous; Documentation. next; Versioning. Contents; . Plotting tests; Viewing plots from failed tests on Azure pipelines; Misc. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/ci.html:9282,pipeline,pipelines,9282,en/stable/dev/ci.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/ci.html,4,['pipeline'],['pipelines']
Deployability,"ression plotting. pr1529 F Ramirez. See rank_genes_groups_dotplot() or rank_genes_groups_matrixplot() for examples. Bug fixes#. Fix scanpy.pl.paga_path() TypeError with recent versions of anndata pr1047 P Angerer; Fix detection of whether IPython is running pr1844 I Virshup; Fixed reproducibility of scanpy.tl.diffmap() (added random_state) pr1858 I Kucinski; Fixed errors and warnings from embedding plots with small numbers of categories after sns.set_palette was called pr1886 I Virshup; Fixed handling of gene_symbols argument in a number of sc.pl.rank_genes_groups* functions pr1529 F Ramirez I Virshup; Fixed handling of use_raw for sc.tl.rank_genes_groups when no .raw is present pr1895 I Virshup; scanpy.pl.rank_genes_groups_violin() now works for raw=False pr1669 M van den Beek; scanpy.pl.dotplot() now uses smallest_dot argument correctly pr1771 S Flemming. Development Process#. Switched to flit for building and deploying the package, a simple tool with an easy to understand command line interface and metadata pr1527 P Angerer; Use pre-commit for style checks pr1684 pr1848 L Heumos I Virshup. Deprecations#. Dropped support for Python 3.6. More details here. pr1897 I Virshup; Deprecated layers and layers_norm kwargs to normalize_total() pr1667 I Virshup; Deprecated MulticoreTSNE backend for scanpy.tl.tsne() pr1854 I Virshup. Version 1.7#. 1.7.2 2021-04-07#. Bug fixes#. scanpy.logging.print_versions() now works when python<3.8 pr1691 I Virshup; scanpy.pp.regress_out() now uses joblib as the parallel backend, and should stop oversubscribing threads pr1694 I Virshup; scanpy.pp.highly_variable_genes() with flavor=""seurat_v3"" now returns correct gene means and -variances when used with batch_key pr1732 J Lause; scanpy.pp.highly_variable_genes() now throws a warning instead of an error when non-integer values are passed for method ""seurat_v3"". The check can be skipped by passing check_values=False. pr1679 G Palla. Ecosystem#. Added triku a feature selection method to the e",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:28666,deploy,deploying,28666,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['deploy'],['deploying']
Deployability,"rimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9840,patch,patch,9840,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,2,"['patch', 'release']","['patch', 'release']"
Deployability,"rint_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.file_format_data. Contents . ScanpyConfig.file_format_data. scanpy._settings.ScanpyConfig.file_format_data#. property ScanpyConfig.file_format_data: str[source]#; File format for saving AnnData objects.; Allowed are ‘txt’, ‘csv’ (comma separated value file) for exporting and ‘h5ad’; (hdf5) for lossless saving. previous; scanpy._settings.ScanpyConfig.figdir. next; scanpy._settings.ScanpyConfig.file_format_figs. Contents; . ScanpyConfig.file_format_data. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.file_format_data.html:9080,Release,Release,9080,en/stable/generated/scanpy._settings.ScanpyConfig.file_format_data.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.file_format_data.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ritedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.max_memory. Contents . ScanpyConfig.max_memory. scanpy._settings.ScanpyConfig.max_memory#. property ScanpyConfig.max_memory: int | float[source]#; Maximum memory usage in Gigabyte.; Is currently not well respected…. previous; scanpy._settings.ScanpyConfig.logpath. next; scanpy._settings.ScanpyConfig.n_jobs. Contents; . ScanpyConfig.max_memory. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.max_memory.html:9074,Release,Release,9074,en/stable/generated/scanpy._settings.ScanpyConfig.max_memory.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.max_memory.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"roject; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9997,release,release,9997,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"rsion requirement of scipy to scipy>1.4 to support rmatmat argument of LinearOperator issue1246 I Virshup; Fix asymmetry of scores for the 'wilcoxon' method in rank_genes_groups() issue754 S Rybakov; Avoid trimming of gene names in rank_genes_groups() issue753 S Rybakov. Version 1.5#. 1.5.1 2020-05-21#. Bug fixes#. Fixed a bug in pca(), where random_state did not have an effect for sparse input pr1240 I Virshup; Fixed docstring in pca() which included an unused argument pr1240 I Virshup. 1.5.0 2020-05-15#; The 1.5.0 release adds a lot of new functionality, much of which takes advantage of anndata updates 0.7.0 - 0.7.2. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. Spatial data support#. Basic analysis Analysis and visualization of spatial transcriptomics data and integration with single cell data Integrating spatial data with scRNA-seq using scanorama G Palla; read_visium() read 10x Visium data pr1034 G Palla, P Angerer, I Virshup; visium_sge() load Visium data directly from 10x Genomics pr1013 M Mirkazemi, G Palla, P Angerer; spatial() plot spatial data pr1012 G Palla, P Angerer. New functionality#. Many functions, like neighbors() and umap(), now store cell-by-cell graphs in obsp pr1118 S Rybakov; scale() and log1p() can be used on any element in layers or obsm pr1173 I Virshup. External tools#. scanpy.external.pp.scvi for preprocessing with scVI pr1085 G Xing; Guide for using Scanpy in R pr1186 L Zappia. Performance#. pca() now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets pr1066 A Tarashansky; score_genes() now has an efficient implementation for sparse matrices with missing values pr1196 redst4r. Warning; The new pca() implementation can result in slightly different results for sparse matrices. See the pr (pr1066) and documentation for more info. Code design#. stacked_violin() can",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:37861,integrat,integration,37861,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,2,"['Integrat', 'integrat']","['Integrating', 'integration']"
Deployability,"rsioning; Version numbers. Tooling; Technical details. Versioning#. Note; We are currently experimenting with our development practices.; These are currently documented on a best effort basis, but may not be completely accurate. Semantic versioning#; We try to follow semantic versioning with our versioning scheme.; This scheme breaks down a version number into {major.minor.point} sections.; At a point release, there should be no changes beyond bug fixes.; minor releases can include new features.; major releases can break old APIs. Version numbers#; Valid version numbers are described in PEP 440. Pre-releasesshould have versions like 1.7.0rc1 or 1.7.0rc2. Development versionsshould look like 1.8.0.dev0, with a commit hash optionally appended as a local version identifier (e.g. 1.8.0.dev2+g00ad77b). Tooling#; To be sure we can follow this scheme and maintain some agility in development, we use some tooling and development practices.; When a minor release is made, a release branch should be cut and pushed to the main repo (e.g. 1.7.x for the 1.7 release series).; For PRs which fix an bug in the most recent minor release, the changes will need to added to both the development and release branches.; To accomplish this, PRs which fix bugs are assigned a patch version milestone such as 1.7.4.; Once the PR is approved and merged, the bot will attempt to make a backport and open a PR.; This will sometimes require manual intervention due to merge conflicts or test failures. Technical details#; The [meeseeks bot][] reacts to commands like this,; given as a comment on the PR, or a label or milestone description:. @Meeseeksdev backport <branch>. In our case, these commands are part of the milestone description,; which causes the merge of a PR assigned to a milestone to trigger the bot. previous; CI. next; Making a release. Contents; . Semantic versioning; Version numbers. Tooling; Technical details. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/versioning.html:10311,release,release,10311,en/stable/dev/versioning.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/versioning.html,5,"['patch', 'release']","['patch', 'release']"
Deployability,"s enough.; See below for how to use Scanpy’s Development Version.; If you prefer to exclusively use PyPI run:; $ pip install 'scanpy[leiden]'. After installing installing e.g. Miniconda, run:; $ conda install -c conda-forge scanpy python-igraph leidenalg. Pull Scanpy from PyPI (consider using pip3 to access Python 3):; $ pip install scanpy. If you use Hatch or pip, the extra [leiden] installs two packages that are needed for popular; parts of scanpy but aren’t requirements: igraph [Csárdi and Nepusz, 2006] and leiden [Traag et al., 2019].; If you use conda, you should to add these dependencies to your environment individually. Development Version#; To work with the latest version on GitHub: clone the repository and cd into its root directory.; $ gh repo clone scverse/scanpy; $ cd scanpy. Hatch (recommended)Pip/PyPICondaTo use one of the predefined Hatch environments in hatch.toml,; run either hatch test [args] or hatch run [env:]command [...args], e.g.:; $ hatch test -p # run tests in parallel; $ hatch run docs:build # build docs; $ hatch run towncrier:create # create changelog entry. If you are using pip>=21.3, an editable install can be made:; $ python -m venv .venv; $ source .venv/bin/activate; $ pip install -e '.[dev,test]'. If you want to let conda handle the installations of dependencies, do:; $ pipx install beni; $ beni pyproject.toml > environment.yml; $ conda env create -f environment.yml; $ conda activate scanpy; $ pip install -e '.[dev,doc,test]'. For instructions on how to work with the code, see the contribution guide. Docker#; If you’re using Docker, you can use e.g. the image gcfntnu/scanpy from Docker Hub. Troubleshooting#; If you get a Permission denied error, never use sudo pip. Instead, use virtual environments or:; $ pip install --user scanpy. previous; Scanpy – Single-Cell Analysis in Python. next; Tutorials. Contents; . Development Version; Docker; Troubleshooting. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/installation.html:10614,install,install,10614,en/stable/installation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/installation.html,6,['install'],"['install', 'installations']"
Deployability,"s neighborhoods to be calculated in; log(n_samples) time. knn_dist str (default: 'euclidean')recommended values: ‘euclidean’ and ‘cosine’; Any metric from scipy.spatial.distance can be used; distance metric for building kNN graph. mds_dist str (default: 'euclidean')recommended values: ‘euclidean’ and ‘cosine’; Any metric from scipy.spatial.distance can be used; distance metric for MDS. mds Literal['classic', 'metric', 'nonmetric'] (default: 'metric')Selects which MDS algorithm is used for dimensionality reduction. n_jobs int | None (default: None)The number of jobs to use for the computation.; If None, sc.settings.n_jobs is used.; If -1 all CPUs are used. If 1 is given, no parallel computing code is; used at all, which is useful for debugging.; For n_jobs below -1, (n_cpus + 1 + n_jobs) are used. Thus for; n_jobs = -2, all CPUs but one are used. random_state Union[int, RandomState, None] (default: None)Random seed. Defaults to the global numpy random number generator. verbose bool | int | None (default: None)If True or an int/Verbosity ≥ 2/hint, print status messages.; If None, sc.settings.verbosity is used. copy bool (default: False)Return a copy instead of writing to adata. kwargsAdditional arguments to phate.PHATE. Return type:; AnnData | None. Returns:; Depending on copy, returns or updates adata with the following fields. X_phatenp.ndarray, (adata.obs, shape=[n_samples, n_components], dtype float)PHATE coordinates of data. Examples; >>> from anndata import AnnData; >>> import scanpy.external as sce; >>> import phate; >>> tree_data, tree_clusters = phate.tree.gen_dla(; ... n_dim=100,; ... n_branch=20,; ... branch_length=100,; ... ); >>> tree_data.shape; (2000, 100); >>> adata = AnnData(tree_data); >>> sce.tl.phate(adata, k=5, a=20, t=150); >>> adata.obsm['X_phate'].shape; (2000, 2); >>> sce.pl.phate(adata). previous; Tools: TL. next; scanpy.external.tl.palantir. Contents; . phate(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html:12198,update,updates,12198,en/stable/external/generated/scanpy.external.tl.phate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/external/generated/scanpy.external.tl.phate.html,1,['update'],['updates']
Deployability,"s unchanged A Wolf. Version 0.4#. 0.4.4 2018-02-26#. embed cells using umap() [McInnes et al., 2018] pr92 G Eraslan; score sets of genes, e.g. for cell cycle, using score_genes() [Satija et al., 2015]:; notebook. 0.4.3 2018-02-09#. clustermap(): heatmap from hierarchical clustering,; based on seaborn.clustermap() [Waskom et al., 2016] A Wolf; only return matplotlib.axes.Axes in plotting functions of sc.pl; when show=False, otherwise None A Wolf. 0.4.2 2018-01-07#. amendments in PAGA and its plotting functions A Wolf. 0.4.0 2017-12-23#. export to SPRING [Weinreb et al., 2017] for interactive visualization of data:; spring tutorial S Wollock. Version 0.3#. 0.3.2 2017-11-29#. finding marker genes via rank_genes_groups_violin() improved,; see issue51 F Ramirez. 0.3.0 2017-11-16#. AnnData gains method concatenate() A Wolf; AnnData is available as the separate anndata package P Angerer, A Wolf; results of PAGA simplified A Wolf. Version 0.2#. 0.2.9 2017-10-25#. Initial release of the new trajectory inference method PAGA#. paga() computes an abstracted, coarse-grained (PAGA) graph of the neighborhood graph A Wolf; paga_compare() plot this graph next an embedding A Wolf; paga_path() plots a heatmap through a node sequence in the PAGA graph A Wolf. 0.2.1 2017-07-24#; Scanpy includes preprocessing, visualization, clustering, pseudotime and; trajectory inference, differential expression testing and simulation of gene; regulatory networks. The implementation efficiently deals with datasets of more; than one million cells. A Wolf, P Angerer. Version 0.1#. 0.1.0 2017-05-17#; Scanpy computationally outperforms and allows reproducing both the Cell Ranger; R kit’s; and most of Seurat’s; clustering workflows. A Wolf, P Angerer. previous; Ecosystem. next; Community. Contents; . Version 1.10; 1.10.3 2024-09-17; Bug fixes. 1.10.2 2024-06-25; Development Process; Documentation; Bug fixes; Performance. 1.10.1 2024-04-09; Documentation; Bug fixes; Performance. 1.10.0 2024-03-26; Features; ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:51779,release,release,51779,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['release'],['release']
Deployability,"s.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.getdoc. Contents . Neighbors.getdoc(). scanpy.Neighbors.getdoc#. Neighbors.getdoc() → str | None[source]#. previous; scanpy.Neighbors.compute_transitions. next; scanpy.Neighbors.to_igraph. Contents; . Neighbors.getdoc(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.getdoc.html:9057,Release,Release,9057,en/stable/generated/scanpy.Neighbors.getdoc.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.getdoc.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"s.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING. Contents . StackedViolin.DEFAULT_PLOT_Y_PADDING. scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING#. StackedViolin.DEFAULT_PLOT_Y_PADDING = 0.5[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_PLOT_YTICKLABELS. next; scanpy.pl.StackedViolin.DEFAULT_ROW_PALETTE. Contents; . StackedViolin.DEFAULT_PLOT_Y_PADDING. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html:9080,Release,Release,9080,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_PLOT_Y_PADDING.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"s; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file fo",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10092,release,release,10092,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"s; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a b",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9773,release,release,9773,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"s_df() can now return fraction of cells in a group expressing a gene, and allows retrieving values for multiple groups at once pr1388 G Eraslan; Color annotations for gene sets in heatmap() are now matched to color for cluster pr1511 L Sikkema; PCA plots can now annotate axes with variance explained pr1470 bfurtwa; Plots with groupby arguments can now group by values in the index by passing the index’s name (like pd.DataFrame.groupby). pr1583 F Ramirez; Added na_color and na_in_legend keyword arguments to embedding() plots. Allows specifying color for missing or filtered values in plots like umap() or spatial() pr1356 I Virshup; embedding() plots now support passing dict of {cluster_name: cluster_color, ...} for palette argument pr1392 I Virshup. External tools (new)#. Add Scanorama integration to scanpy external API (scanorama_integrate(), Hie et al. [2019]) pr1332 B Hie; Scrublet [Wolock et al., 2019] integration: scrublet(), scrublet_simulate_doublets(), and plotting method scrublet_score_distribution() pr1476 J Manning; hashsolo() for HTO demultiplexing [Bernstein et al., 2020] pr1432 NJ Bernstein; Added scirpy (sc-AIRR analysis) to ecosystem page pr1453 G Sturm; Added scvi-tools to ecosystem page pr1421 A Gayoso. External tools (changes)#. Updates for palantir() and palantir_results() pr1245 A Mousa; Fixes to harmony_timeseries() docs pr1248 A Mousa; Support for leiden clustering by scanpy.external.tl.phenograph() pr1080 A Mousa; Deprecate scanpy.external.pp.scvi pr1554 G Xing; Updated default params of sam() to work with larger data pr1540 A Tarashansky. Documentation#. New contribution guide pr1544 I Virshup; zsh installation instructions pr1444 P Angerer. Performance#. Speed up read_10x_h5() pr1402 P Weiler; Speed ups for obs_df() pr1499 F Ramirez. Bugfixes#. Consistent fold-change, fractions calculation for filter_rank_genes_groups pr1391 S Rybakov; Fixed bug where score_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:31660,integrat,integration,31660,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['integrat'],['integration']
Deployability,"scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT. Contents . DotPlot.DEFAULT_SMALLEST_DOT. scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT#. DotPlot.DEFAULT_SMALLEST_DOT = 0.0[source]#. previous; scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE. next; scanpy.pl.DotPlot.DEFAULT_WSPACE. Contents; . DotPlot.DEFAULT_SMALLEST_DOT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT.html:9072,Release,Release,9072,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_WSPACE. Contents . StackedViolin.DEFAULT_WSPACE. scanpy.pl.StackedViolin.DEFAULT_WSPACE#. StackedViolin.DEFAULT_WSPACE = 0[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_STRIPPLOT. next; scanpy.pl.StackedViolin.DEFAULT_YLIM. Contents; . StackedViolin.DEFAULT_WSPACE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html:9072,Release,Release,9072,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_WSPACE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.recipe_seurat. Contents . recipe_seurat(). scanpy.pp.recipe_seurat#. scanpy.pp.recipe_seurat(adata, *, log=True, plot=False, copy=False)[source]#; Normalization and filtering as of Seurat [Satija et al., 2015].; This uses a particular preprocessing.; Expects non-logarithmized data.; If using logarithmized data, pass log=False. Parameters:. adata AnnDataAnnotated data matrix. log bool (default: True)Logarithmize data?. plot bool (default: False)Show a plot of the gene dispersion vs. mean relation. copy bool (default: False)Return a copy if true. Return type:; AnnData | None. previous; scanpy.pp.recipe_weinreb17. next; scanpy.pp.combat. Contents; . recipe_seurat(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_seurat.html:9057,Release,Release,9057,en/stable/api/generated/scanpy.pp.recipe_seurat.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.recipe_seurat.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; d",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9872,integrat,integration,9872,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integration']
Deployability,"scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pp.regress_out. Contents . regress_out(). scanpy.pp.regress_out#. scanpy.pp.regress_out(adata, keys, *, layer=None, n_jobs=None, copy=False)[source]#; Regress out (mostly) unwanted sources of variation.; Uses simple linear regression. This is inspired by Seurat’s regressOut; function in R [Satija et al., 2015]. Note that this function tends to overcorrect; in certain circumstances as described in issue526. Parameters:. adata AnnDataThe annotated data matrix. keys str | Sequence[str]Keys for observation annotation on which to regress on. layer str | None (default: None)If provided, which element of layers to regress on. n_jobs int | None (default: None)Number of jobs for parallel computation.; None means using scanpy._settings.ScanpyConfig.n_jobs. copy bool (default: False)Determines whether a copy of adata is returned. Return type:; AnnData | None. Returns:; Returns None if copy=False, else returns an updated AnnData object. Sets the following fields:. adata.X | adata.layers[layer]numpy.ndarray | scipy.sparse._csr.csr_matrix (dtype float)Corrected count data matrix. previous; scanpy.pp.normalize_total. next; scanpy.pp.scale. Contents; . regress_out(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.regress_out.html:10152,update,updated,10152,en/stable/generated/scanpy.pp.regress_out.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.regress_out.html,1,['update'],['updated']
Deployability,"scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.scanorama_integrate. Contents . scanorama_integrate(). scanpy.external.pp.scanorama_integrate#. scanpy.external.pp.scanorama_integrate(adata, key, *, basis='X_pca', adjusted_basis='X_scanorama', knn=20, sigma=15, approx=True, alpha=0.1, batch_size=5000, **kwargs)[source]#; Use Scanorama [Hie et al., 2019] to integrate different experiments.; Scanorama [Hie et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments stored in an AnnData object. This; function should be run after performing PCA but before computing; the neighbor graph, as illustrated in the example below.; This uses the implementation of scanorama [Hie et al., 2019]. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. Cells from the same batch must be; contiguously stored in adata. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_scanorama')The name of the field in adata.obsm where the integrated; embeddings will be stored after running this function. Defaults; to X_scanorama. knn int (default: 20)Number of nearest neighbors to use for matching. sigma float (default: 15)Correctio",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html:9576,integrat,integrate,9576,en/stable/generated/scanpy.external.pp.scanorama_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.scanorama_integrate.html,1,['integrat'],['integrate']
Deployability,"scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.exporting.spring_project. Contents . spring_project(). scanpy.external.exporting.spring_project#. scanpy.external.exporting.spring_project(adata, project_dir, embedding_method, *, subplot_name=None, cell_groupings=None, custom_color_tracks=None, total_counts_key='n_counts', neighbors_key=None, overwrite=False)[source]#; Exports to a SPRING project directory [Weinreb et al., 2017].; Visualize annotation present in adata. By default, export all gene expression data; from adata.raw and categorical and continuous annotations present in adata.obs.; See SPRING or Weinreb et al. [2017] for details. Parameters:. adata AnnDataAnnotated data matrix: adata.uns['neighbors'] needs to; be present. project_dir Path | strPath to directory for exported SPRING files. embedding_method strName of a 2-D embedding in adata.obsm. subplot_name str | None (default: None)Name of subplot folder to be created at project_dir+""/""+subplot_name. cell_groupings str | Iterable[str] | None (default: None)Instead of importing all categorical annotations when None,; pass a list of keys for adata.obs. custom_color_tracks str | Iterable[str] | None (default: None)Specify specific adata.obs keys for continuous coloring. total_counts_key str (default: 'n_counts')Name of key for total transcript counts in adata.obs. overwrite bool (default: False)When True, existing counts matrices in project_dir are overwritten. Return type:; None. Examples; See this tutorial. previous; Exporting. next; scanpy.external.exporting.cellbrowser. Co",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.spring_project.html:9769,continuous,continuous,9769,en/stable/generated/scanpy.external.exporting.spring_project.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.exporting.spring_project.html,1,['continuous'],['continuous']
Deployability,scanpy.pp.subsample.rst; scanpy.queries.biomart_annotations.rst; scanpy.queries.enrich.rst; scanpy.queries.gene_coordinates.rst; scanpy.queries.mitochondrial_genes.rst; scanpy.read.rst; scanpy.read_10x_h5.rst; scanpy.read_10x_mtx.rst; scanpy.read_csv.rst; scanpy.read_excel.rst; scanpy.read_h5ad.rst; scanpy.read_hdf.rst; scanpy.read_loom.rst; scanpy.read_mtx.rst; scanpy.read_text.rst; scanpy.read_umi_tools.rst; scanpy.read_visium.rst; scanpy.set_figure_params.rst; scanpy.tl.dendrogram.rst; scanpy.tl.diffmap.rst; scanpy.tl.dpt.rst; scanpy.tl.draw_graph.rst; scanpy.tl.embedding_density.rst; scanpy.tl.filter_rank_genes_groups.rst; scanpy.tl.ingest.rst; scanpy.tl.leiden.rst; scanpy.tl.louvain.rst; scanpy.tl.marker_gene_overlap.rst; scanpy.tl.paga.rst; scanpy.tl.rank_genes_groups.rst; scanpy.tl.score_genes.rst; scanpy.tl.score_genes_cell_cycle.rst; scanpy.tl.sim.rst; scanpy.tl.tsne.rst; scanpy.tl.umap.rst. /how-to; ; index.md; knn-transformers.ipynb; plotting-with-marsilea.ipynb. /release-notes; ; index.md. /tutorials; . /basics; ; clustering.ipynb; clustering-2017.ipynb; index.md; integrating-data-using-ingest.ipynb. /experimental; ; dask.ipynb; index.md; pearson_residuals.ipynb. /plotting; ; advanced.ipynb; core.ipynb; index.md. /spatial; ; index.md; integration-scanorama.ipynb. /trajectories; ; index.md; paga-paul15.ipynb. index.md. community.md; contributors.md; ecosystem.md; index.md; installation.md; news.md; references.rst; usage-principles.md. /_static; . /css; ; rtd_sphinx_search.min.css. /js; ; rtd_search_config.js; rtd_sphinx_search.min.js. /scripts; ; bootstrap.js; pydata-sphinx-theme.js; rtd-sphinx-search.js; sphinx-book-theme.js. /styles; ; bootstrap.css; pydata-sphinx-theme.css; scanpy.css; sphinx-book-theme.css; theme.css. /vendor; . /fontawesome; . /6.5.2; . /css; ; all.min.css. /js; ; all.min.js. /webfonts; ; fa-brands-400.ttf; fa-brands-400.woff2; fa-regular-400.ttf; fa-regular-400.woff2; fa-solid-900.ttf; fa-solid-900.woff2; fa-v4compatibility.ttf; fa-v,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:9629,release,release-notes,9629,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,1,['release'],['release-notes']
Deployability,scanpy.read_10x_h5 — scanpy; scanpy.read_10x_mtx — scanpy; scanpy.read_csv — scanpy; scanpy.read_excel — scanpy; scanpy.read_h5ad — scanpy; scanpy.read_hdf — scanpy; scanpy.read_loom — scanpy; scanpy.read_mtx — scanpy; scanpy.read_text — scanpy; scanpy.read_umi_tools — scanpy; scanpy.read_visium — scanpy; scanpy.set_figure_params — scanpy; scanpy.tl.dendrogram — scanpy; scanpy.tl.diffmap — scanpy; scanpy.tl.dpt — scanpy; scanpy.tl.draw_graph — scanpy; scanpy.tl.embedding_density — scanpy; scanpy.tl.filter_rank_genes_groups — scanpy; scanpy.tl.ingest — scanpy; scanpy.tl.leiden — scanpy; scanpy.tl.louvain — scanpy; scanpy.tl.marker_gene_overlap — scanpy; scanpy.tl.paga — scanpy; scanpy.tl.rank_genes_groups — scanpy; scanpy.tl.score_genes — scanpy; scanpy.tl.score_genes_cell_cycle — scanpy; scanpy.tl.sim — scanpy; scanpy.tl.tsne — scanpy; scanpy.tl.umap — scanpy. /how-to; ; How to — scanpy; Using other kNN libraries in Scanpy — scanpy; Plotting with Marsilea — scanpy. /release-notes; ; Release notes — scanpy. /tutorials; . /basics; ; Preprocessing and clustering — scanpy; Preprocessing and clustering 3k PBMCs (legacy workflow) — scanpy; Basics — scanpy; Integrating data using ingest and BBKNN — scanpy. /experimental; ; Using dask with Scanpy — scanpy; Experimental — scanpy; How to preprocess UMI count data with analytic Pearson residuals — scanpy. /plotting; ; Customizing Scanpy plots — scanpy; Core plotting functions — scanpy; Plotting — scanpy. /spatial; ; Analysis and visualization of spatial transcriptomics data — scanpy; Spatial — scanpy; Integrating spatial data with scRNA-seq using scanorama — scanpy. /trajectories; ; Trajectories — scanpy; Trajectory inference for hematopoiesis in mouse — scanpy. Tutorials — scanpy. Community — scanpy; Contributors — scanpy; Ecosystem — scanpy; Index — scanpy; Scanpy – Single-Cell Analysis in Python — scanpy; Installation — scanpy; News — scanpy; References — scanpy; Search - scanpy; searchindex.js; Scanpy – Single-Cell Analysi,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:22166,release,release-notes,22166,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,2,"['Release', 'release']","['Release', 'release-notes']"
Deployability,"se you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuratio",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10436,release,release,10436,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['release']
Deployability,"seq. Genome Research, 21(7):1160–1167, may 2011. URL: https://doi.org/10.1101/gr.110882.110, doi:10.1101/gr.110882.110. [JVHB14]; Mathieu Jacomy, Tommaso Venturini, Sebastien Heymann, and Mathieu Bastian. Forceatlas2, a continuous graph layout algorithm for handy network visualization designed for the gephi software. PLoS ONE, 9(6):e98679, jun 2014. URL: https://doi.org/10.1371/journal.pone.0098679, doi:10.1371/journal.pone.0098679. [JLR06]; W. Evan Johnson, Cheng Li, and Ariel Rabinovic. Adjusting batch effects in microarray expression data using empirical bayes methods. Biostatistics, 8(1):118–127, apr 2006. URL: https://doi.org/10.1093/biostatistics/kxj037, doi:10.1093/biostatistics/kxj037. [Kan18]; Chris Kang. Mnnpy - mnn-correct in python. chriscainx/mnnpy, 2018. URL: chriscainx/mnnpy. [KMF+19]; Ilya Korsunsky, Nghia Millard, Jean Fan, Kamil Slowikowski, Fan Zhang, Kevin Wei, Yuriy Baglaenko, Michael Brenner, Po-ru Loh, and Soumya Raychaudhuri. Fast, sensitive and accurate integration of single-cell data with harmony. Nature Methods, 16(12):1289–1296, nov 2019. URL: https://doi.org/10.1038/s41592-019-0619-0, doi:10.1038/s41592-019-0619-0. [KMST11]; Jan Krumsiek, Carsten Marr, Timm Schroeder, and Fabian J. Theis. Hierarchical differentiation of myeloid progenitors is encoded in the transcription factor network. PLoS ONE, 6(8):e22649, aug 2011. URL: https://doi.org/10.1371/journal.pone.0022649, doi:10.1371/journal.pone.0022649. [LMSZ+18]; Gioele La Manno, Ruslan Soldatov, Amit Zeisel, Emelie Braun, Hannah Hochgerner, Viktor Petukhov, Katja Lidschreiber, Maria E. Kastriti, Peter Lönnerberg, Alessandro Furlan, Jean Fan, Lars E. Borm, Zehua Liu, David van Bruggen, Jimin Guo, Xiaoling He, Roger Barker, Erik Sundström, Gonçalo Castelo-Branco, Patrick Cramer, Igor Adameyko, Sten Linnarsson, and Peter V. Kharchenko. Rna velocity of single cells. Nature, 560(7719):494–498, aug 2018. URL: https://doi.org/10.1038/s41586-018-0414-6, doi:10.1038/s41586-018-0414-6. [LDB14]; Re",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/references.html:15693,integrat,integration,15693,en/stable/references.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/references.html,1,['integrat'],['integration']
Deployability,"set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.distances_dpt. Contents . Neighbors.distances_dpt. scanpy.Neighbors.distances_dpt#. property Neighbors.distances_dpt: OnFlySymMatrix[source]#; DPT distances.; This is yields [Haghverdi et al., 2016], Eq. 15 from the supplement with the; extensions of [Wolf et al., 2019], supplement on random-walk based distance; measures. previous; scanpy.Neighbors.distances. next; scanpy.Neighbors.eigen_basis. Contents; . Neighbors.distances_dpt. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.distances_dpt.html:9064,Release,Release,9064,en/stable/generated/scanpy.Neighbors.distances_dpt.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.distances_dpt.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"sets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.verbosity. Contents . ScanpyConfig.verbosity. scanpy._settings.ScanpyConfig.verbosity#. property ScanpyConfig.verbosity: Verbosity[source]#; Verbosity level (default warning); Level 0: only show ‘error’ messages.; Level 1: also show ‘warning’ messages.; Level 2: also show ‘info’ messages.; Level 3: also show ‘hint’ messages.; Level 4: also show very detailed progress for ‘debug’ging. previous; scanpy._settings.ScanpyConfig.plot_suffix. next; scanpy._settings.ScanpyConfig.writedir. Contents; . ScanpyConfig.verbosity. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html:9073,Release,Release,9073,en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.verbosity.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"shup; Clean up _ranks and fix dendrogram for scipy 1.5 pr1290 S Rybakov; Use .raw to translate gene symbols if applicable pr1278 E Rice; Fix diffmap (issue1262) G Eraslan; Fix neighbors in spring_project issue1260 S Rybakov; Fix default size of dot in spatial plots pr1255 issue1253 giovp; Bumped version requirement of scipy to scipy>1.4 to support rmatmat argument of LinearOperator issue1246 I Virshup; Fix asymmetry of scores for the 'wilcoxon' method in rank_genes_groups() issue754 S Rybakov; Avoid trimming of gene names in rank_genes_groups() issue753 S Rybakov. Version 1.5#. 1.5.1 2020-05-21#. Bug fixes#. Fixed a bug in pca(), where random_state did not have an effect for sparse input pr1240 I Virshup; Fixed docstring in pca() which included an unused argument pr1240 I Virshup. 1.5.0 2020-05-15#; The 1.5.0 release adds a lot of new functionality, much of which takes advantage of anndata updates 0.7.0 - 0.7.2. Highlights of this release include support for spatial data, dedicated handling of graphs in AnnData, sparse PCA, an interface with scvi, and others. Spatial data support#. Basic analysis Analysis and visualization of spatial transcriptomics data and integration with single cell data Integrating spatial data with scRNA-seq using scanorama G Palla; read_visium() read 10x Visium data pr1034 G Palla, P Angerer, I Virshup; visium_sge() load Visium data directly from 10x Genomics pr1013 M Mirkazemi, G Palla, P Angerer; spatial() plot spatial data pr1012 G Palla, P Angerer. New functionality#. Many functions, like neighbors() and umap(), now store cell-by-cell graphs in obsp pr1118 S Rybakov; scale() and log1p() can be used on any element in layers or obsm pr1173 I Virshup. External tools#. scanpy.external.pp.scvi for preprocessing with scVI pr1085 G Xing; Guide for using Scanpy in R pr1186 L Zappia. Performance#. pca() now uses efficient implicit centering for sparse matrices. This can lead to signifigantly improved performance for large datasets pr1066 A Tarasha",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:37629,release,release,37629,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['release'],['release']
Deployability,"sing a smaller value will reduce; the required memory. n_comps int | None (default: 50)Number of principal components to compute in the PCA step. random_state float | None (default: 0)Random seed for setting the initial states for the optimization in the PCA step. kwargs_pca dict (default: {})Dictionary of further keyword arguments passed on to scanpy.pp.pca(). check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. Return type:; tuple[AnnData, DataFrame] | None. Returns:; If inplace=False, separately returns the gene selection results (as; DataFrame) and Pearson residual-based PCA results (as; AnnData). If inplace=True, updates adata with the; following fields for gene selection results:. .var['highly_variable']boolboolean indicator of highly-variable genes. .var['means']floatmeans per gene. .var['variances']floatvariances per gene. .var['residual_variances']floatPearson residual variance per gene. Averaged in the case of multiple; batches. .var['highly_variable_rank']floatRank of the gene according to residual variance, median rank in the; case of multiple batches. .var['highly_variable_nbatches']intIf batch_key is given, this denotes in how many batches genes are; detected as HVG. .var['highly_variable_intersection']boolIf batch_key is given, this denotes the genes that are highly variable; in all batches. The following fields contain Pearson residual-based PCA results and; normalization settings:. .uns['pearson_residuals_normalization']['pearson_residuals_df']The subset of highly variable genes, normalized by Pearson residuals. .uns['pearson_residuals_normalization']['theta']The used value of the overdisperion parameter the",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html:12246,update,updates,12246,en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.recipe_pearson_residuals.html,1,['update'],['updates']
Deployability,"sing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAP’s implementation [McInnes18]. Similar PCA-based integrations have ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9250,Integrat,Integrating,9250,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['Integrat'],['Integrating']
Deployability,"sity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_COLORMAP. Contents . StackedViolin.DEFAULT_COLORMAP. scanpy.pl.StackedViolin.DEFAULT_COLORMAP#. StackedViolin.DEFAULT_COLORMAP = 'Blues'[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_CATEGORY_WIDTH. next; scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. Contents; . StackedViolin.DEFAULT_COLORMAP. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html:9074,Release,Release,9074,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLORMAP.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"sole NA; pydevd 2.9.5; pydevd_file_utils NA; pydevd_plugins NA; pydevd_tracing NA; pygments 2.17.2; pyparsing 3.1.1; pythonjsonlogger NA; pytz 2023.3.post1; referencing NA; requests 2.31.0; rfc3339_validator 0.1.4; rfc3986_validator 0.1.1; rpds NA; scanorama 1.7.4; scipy 1.11.4; seaborn 0.13.1; send2trash NA; session_info 1.0.0; setuptools 68.2.2; setuptools_scm NA; sitecustomize NA; six 1.16.0; sklearn 1.3.2; sniffio 1.3.0; sortedcontainers 2.4.0; sparse 0.15.1; stack_data 0.6.3; statsmodels 0.14.1; tblib 3.0.0; texttable 1.7.0; threadpoolctl 3.2.0; tlz 0.12.0; toolz 0.12.0; tornado 6.4; traitlets 5.14.1; typing_extensions NA; uri_template NA; urllib3 2.1.0; wcwidth 0.2.13; webcolors 1.13; websocket 1.7.0; yaml 6.0.1; zarr 2.16.1; zipp NA; zmq 25.1.2; -----; IPython 8.20.0; jupyter_client 8.6.0; jupyter_core 5.7.1; jupyterlab 4.0.10; notebook 7.0.6; -----; Python 3.11.6 (main, Nov 2 2023, 04:39:43) [Clang 14.0.3 (clang-1403.0.22.14.1)]; macOS-13.6.1-arm64-arm-64bit; -----; Session information updated at 2024-02-26 13:25. Reading the data#; We will use two Visium spatial transcriptomics dataset of the mouse brain (Sagittal), which are publicly available from the 10x genomics website.; The function datasets.visium_sge() downloads the dataset from 10x genomics and returns an AnnData object that contains counts, images and spatial coordinates. We will calculate standards QC metrics with pp.calculate_qc_metrics and visualize them.; When using your own Visium data, use Scanpy’s read_visium() function to import it. adata_spatial_anterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Anterior""; ); adata_spatial_posterior = sc.datasets.visium_sge(; sample_id=""V1_Mouse_Brain_Sagittal_Posterior""; ). reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Anterior/filtered_feature_bc_matrix.h5; (0:00:01); reading /Users/ilangold/Projects/Theis/scanpy-tutorials/spatial/data/V1_Mouse_Brain_Sagittal_Posterior/filtered_feature_b",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:12699,update,updated,12699,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['update'],['updated']
Deployability,"sparse_mean_variance_axis now uses all cores for the calculations pr3015 S Dicks; pp.highly_variable_genes with flavor=seurat_v3 now uses a numba kernel pr3017 S Dicks; Speed up scrublet() pr3044 S Dicks and pr3056 P Angerer; Speed up clipping of array in scale() pr3100 P Ashish & S Dicks. 1.10.1 2024-04-09#. Documentation#. Added how-to example on plotting with Marsilea pr2974 Y Zheng. Bug fixes#. Fix aggregate when aggregating by more than two groups pr2965 I Virshup. Performance#. scale() now uses numba kernels for sparse.csr_matrix and sparse.csc_matrix when zero_center==False and mask_obs is provided. This greatly speed up execution pr2942 S Dicks. 1.10.0 2024-03-26#; scanpy 1.10 brings a large amount of new features, performance improvements, and improved documentation.; Some highlights:. Improved support for out-of-core workflows via dask. See new tutorial: Using dask with Scanpy demonstrating counts-to-clusters for 1.4 million cells in <10 min.; A new basic clustering tutorial demonstrating an updated workflow.; Opt-in increased performance for neighbor search and clustering (how to guide).; Ability to mask observations or variables from a number of methods (see Customizing Scanpy plots for an example with plotting embeddings); A new function aggregate() for computing aggregations of your data, very useful for pseudo bulking!. Features#. scrublet() and scrublet_simulate_doublets() were moved from scanpy.external.pp to scanpy.pp. The scrublet implementation is now maintained as part of scanpy pr2703 P Angerer; scanpy.pp.pca(), scanpy.pp.scale(), scanpy.pl.embedding(), and scanpy.experimental.pp.normalize_pearson_residuals_pca() now support a mask parameter pr2272 C Bright, T Marcella, & P Angerer; Enhanced dask support for some internal utilities, paving the way for more extensive dask support pr2696 P Angerer; scanpy.pp.highly_variable_genes() supports dask for the default seurat and cell_ranger flavors pr2809 P Angerer; New function scanpy.get.aggregate() w",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:14406,update,updated,14406,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['update'],['updated']
Deployability,"spatial[adata_spatial.obs.library_id == library, :].copy(); sc.pl.spatial(; ad,; img_key=""hires"",; library_id=library,; color=""clusters"",; size=1.5,; palette=[; v; for k, v in clusters_colors.items(); if k in ad.obs.clusters.unique().tolist(); ],; legend_loc=None,; show=False,; ax=axs[i],; ). plt.tight_layout(). WARNING: Length of palette colors is smaller than the number of categories (palette length: 16, categories length: 18. Some categories will have the same color.; WARNING: Length of palette colors is smaller than the number of categories (palette length: 14, categories length: 18. Some categories will have the same color. From the clusters, we can clearly see the stratification of the cortical layer in both of the tissues (see the Allen brain atlas for reference). Furthermore, it seems that the dataset integration worked well, since there is a clear continuity between clusters in the two tissues. Data integration and label transfer from scRNA-seq dataset#; We can also perform data integration between one scRNA-seq dataset and one spatial transcriptomics dataset. Such task is particularly useful because it allows us to transfer cell type labels to the Visium dataset, which were dentified from the scRNA-seq dataset.; For this task, we will be using a dataset from Tasic et al., where the mouse cortex was profiled with smart-seq technology.; The dataset can be downloaded from GEO count - metadata.; Conveniently, you can also download the pre-processed dataset in h5ad format from here.; Since the dataset was generated from the mouse cortex, we will subset the visium dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cel",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:19342,integrat,integration,19342,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,2,['integrat'],['integration']
Deployability,"specifying color for missing or filtered values in plots like umap() or spatial() pr1356 I Virshup; embedding() plots now support passing dict of {cluster_name: cluster_color, ...} for palette argument pr1392 I Virshup. External tools (new)#. Add Scanorama integration to scanpy external API (scanorama_integrate(), Hie et al. [2019]) pr1332 B Hie; Scrublet [Wolock et al., 2019] integration: scrublet(), scrublet_simulate_doublets(), and plotting method scrublet_score_distribution() pr1476 J Manning; hashsolo() for HTO demultiplexing [Bernstein et al., 2020] pr1432 NJ Bernstein; Added scirpy (sc-AIRR analysis) to ecosystem page pr1453 G Sturm; Added scvi-tools to ecosystem page pr1421 A Gayoso. External tools (changes)#. Updates for palantir() and palantir_results() pr1245 A Mousa; Fixes to harmony_timeseries() docs pr1248 A Mousa; Support for leiden clustering by scanpy.external.tl.phenograph() pr1080 A Mousa; Deprecate scanpy.external.pp.scvi pr1554 G Xing; Updated default params of sam() to work with larger data pr1540 A Tarashansky. Documentation#. New contribution guide pr1544 I Virshup; zsh installation instructions pr1444 P Angerer. Performance#. Speed up read_10x_h5() pr1402 P Weiler; Speed ups for obs_df() pr1499 F Ramirez. Bugfixes#. Consistent fold-change, fractions calculation for filter_rank_genes_groups pr1391 S Rybakov; Fixed bug where score_genes would error if one gene was passed pr1398 I Virshup; Fixed log1p inplace on integer dense arrays pr1400 I Virshup; Fix docstring formatting for rank_genes_groups() pr1417 P Weiler; Removed PendingDeprecationWarning`s from use of `np.matrix pr1424 P Weiler; Fixed indexing byg in ~scanpy.pp.highly_variable_genes pr1456 V Bergen; Fix default number of genes for marker_genes_overlap pr1464 MD Luecken; Fixed passing groupby and dendrogram_key to dendrogram() pr1465 M Varma; Fixed download path of pbmc3k_processed pr1472 D Strobl; Better error message when computing DE with a group of size 1 pr1490 J Manning; Update ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:32251,Update,Updated,32251,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['Update'],['Updated']
Deployability,"ssion fractions with dot_min are plotted with this size. largest_dot float | None (default: 200.0)If none, the largest dot has size 200.; All expression fractions with dot_max are plotted with this size. dot_edge_color Union[str, tuple[float, ...], None] (default: 'black')Dot edge color. When color_on='dot' the default is no edge. When; color_on='square', edge color is white for darker colors and black; for lighter background square colors. dot_edge_lw float | None (default: 0.2)Dot edge line width. When color_on='dot' the default is no edge. When; color_on='square', line width = 1.5. size_exponent float | None (default: 1.5)Dot size is computed as:; fraction ** size exponent and afterwards scaled to match the; smallest_dot and largest_dot size parameters.; Using a different size exponent changes the relative sizes of the dots; to each other. grid float | None (default: False)Set to true to show grid lines. By default grid lines are not shown.; Further configuration of the grid lines can be achieved directly on the; returned ax. x_padding float | None (default: 0.8)Space between the plot left/right borders and the dots center. A unit; is the distance between the x ticks. Only applied when color_on = dot. y_padding float | None (default: 1.0)Space between the plot top/bottom borders and the dots center. A unit is; the distance between the y ticks. Only applied when color_on = dot. Return type:; Self. Returns:; DotPlot. Examples; >>> import scanpy as sc; >>> adata = sc.datasets.pbmc68k_reduced(); >>> markers = ['C1QA', 'PSAP', 'CD79A', 'CD79B', 'CST3', 'LYZ']. Change color map and apply it to the square behind the dot; >>> sc.pl.DotPlot(adata, markers, groupby='bulk_labels') \; ... .style(cmap='RdBu_r', color_on='square').show(). Add edge to dots and plot a grid; >>> sc.pl.DotPlot(adata, markers, groupby='bulk_labels') \; ... .style(dot_edge_color='black', dot_edge_lw=1, grid=True) \; ... .show(). previous; scanpy.pl.DotPlot.show. next; scanpy.pl.DotPlot.swap_axes. Con",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html:11429,configurat,configuration,11429,en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.style.html,1,['configurat'],['configuration']
Deployability,"sts; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pl.wishbone_marker_trajectory. Contents . wishbone_marker_trajectory(). scanpy.external.pl.wishbone_marker_trajectory#. scanpy.external.pl.wishbone_marker_trajectory(adata, markers, *, no_bins=150, smoothing_factor=1, min_delta=0.1, show_variance=False, figsize=None, return_fig=False, show=True, save=None, ax=None)[source]#; Plot marker trends along trajectory, and return trajectory branches for further; analysis and visualization (heatmap, etc..). Parameters:. adata AnnDataAnnotated data matrix. markers Collection[str]Iterable of markers/genes to be plotted. show_variance bool (default: False)Logical indicating if the trends should be accompanied with variance. no_bins int (default: 150)Number of bins for calculating marker density. smoothing_factor int (default: 1)Parameter controlling the degree of smoothing. min_delta float (default: 0.1)Minimum difference in marker expression after normalization to show; separate trends for the two branches. figsize tuple[float, float] | None (default: None)width, height. return_fig bool (default: False)Return the matplotlib figure. show bool (default: True)Show the plot, do not return axis. save str | bool | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {'.pdf', '.png', '.svg'}. ax Axes | None (default: None)A matplotlib axes object. Only works if plotting a single component. Returns:; Updates adata with the following fields:. trunk_wishbonepandas.DataFrame (adata.uns)Computed values before branching. branch1_wishbonepandas.DataFrame (adata.uns)Computed values for the first branch. branch2_wishbonepandas.DataFrame (adata.uns)Computed values for the second branch. previous; scanpy.external.pl.sam. next; Exporting. Contents; . wishbone_marker_trajectory(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html:10706,Update,Updates,10706,en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pl.wishbone_marker_trajectory.html,1,['Update'],['Updates']
Deployability,"subset.copy(); adata_posterior_subset_transfer.obs = pd.concat(; [adata_posterior_subset.obs, cp_posterior_df], axis=1; ). We are then able to explore how cell types are propagated from the scRNA-seq dataset to the visium dataset. Let’s first visualize the neurons cortical layers. sc.pl.spatial(; adata_anterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ); sc.pl.spatial(; adata_posterior_subset_transfer,; img_key=""hires"",; color=[""L2/3 IT"", ""L4"", ""L5 PT"", ""L6 CT""],; size=1.5,; ). Interestingly, it seems that this approach worked, since sequential layers of cortical neurons could be correctly identified, both in the anterior and posterior sagittal slide.; We can go ahead an visualize astrocytes and oligodendrocytes as well. sc.pl.spatial(; adata_anterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ); sc.pl.spatial(; adata_posterior_subset_transfer, img_key=""hires"", color=[""Oligo"", ""Astro""], size=1.5; ). In this tutorial, we showed how to work with multiple slices in Scanpy, and perform label transfers between an annotated scRNA-seq dataset and an unannotated Visium dataset. We showed that such approach, that leverages the data integration performances of Scanorama, is useful and provide a straightforward tool for exploratory analysis.; However, for the label transfer task, we advise analysts to explore more principled approaches, based on cell-type deconvolution, that are likely to provide more accurate and interpretable results. See recent approaches such as:. Stereoscope paper - code; AutogeneS paper - code; MuSiC paper - code; CIBERSORT-X paper - webtool; Deconv-seq code; cell2location paper - code. previous; Analysis and visualization of spatial transcriptomics data. next; Experimental. Contents; . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:27206,integrat,integration,27206,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,3,['integrat'],['integration']
Deployability,"sults; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.pca_overview. Contents . pca_overview(). scanpy.pl.pca_overview#. scanpy.pl.pca_overview(adata, **params)[source]#; Plot PCA results.; The parameters are the ones of the scatter plot. Call pca_ranking separately; if you want to change the default settings. Parameters:. adata AnnDataAnnotated data matrix. colorKeys for observation/cell annotation either as list [""ann1"", ""ann2""] or; string ""ann1,ann2,..."". use_rawUse raw attribute of adata if present. sort_orderFor continuous annotations used as color parameter, plot data points; with higher values on top of others. groupsRestrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. componentsFor instance, ['1,2', '2,3']. To plot all available components use; components='all'. projectionProjection of plot (default: '2d'). legend_locLocation of legend, either 'on data', 'right margin', None,; or a valid keyword for the loc parameter of Legend. legend_fontsizeNumeric size in pt or string describing the size.; See set_fontsize(). legend_fontweightLegend font weight. A numeric value in range 0-1000 or a string.; Defaults to 'bold' if legend_loc == 'on data', otherwise to 'normal'.; See set_fontweight(). legend_fontoutlineLine width of ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html:9709,continuous,continuous,9709,en/stable/api/generated/scanpy.pl.pca_overview.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_overview.html,1,['continuous'],['continuous']
Deployability,"t all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as ‘celltype’) and embeddings (such as ‘X_pca’ and ‘X_umap’) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query batches. adata_query = adata_concat[adata_concat.obs.batch.isi",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17550,integrat,integrating,17550,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integrating']
Deployability,t; scanpy.read_h5ad.rst; scanpy.read_hdf.rst; scanpy.read_loom.rst; scanpy.read_mtx.rst; scanpy.read_text.rst; scanpy.read_umi_tools.rst; scanpy.read_visium.rst; scanpy.set_figure_params.rst; scanpy.tl.dendrogram.rst; scanpy.tl.diffmap.rst; scanpy.tl.dpt.rst; scanpy.tl.draw_graph.rst; scanpy.tl.embedding_density.rst; scanpy.tl.filter_rank_genes_groups.rst; scanpy.tl.ingest.rst; scanpy.tl.leiden.rst; scanpy.tl.louvain.rst; scanpy.tl.marker_gene_overlap.rst; scanpy.tl.paga.rst; scanpy.tl.rank_genes_groups.rst; scanpy.tl.score_genes.rst; scanpy.tl.score_genes_cell_cycle.rst; scanpy.tl.sim.rst; scanpy.tl.tsne.rst; scanpy.tl.umap.rst. /how-to; ; index.md; knn-transformers.ipynb; plotting-with-marsilea.ipynb. /release-notes; ; index.md. /tutorials; . /basics; ; clustering.ipynb; clustering-2017.ipynb; index.md; integrating-data-using-ingest.ipynb. /experimental; ; dask.ipynb; index.md; pearson_residuals.ipynb. /plotting; ; advanced.ipynb; core.ipynb; index.md. /spatial; ; index.md; integration-scanorama.ipynb. /trajectories; ; index.md; paga-paul15.ipynb. index.md. community.md; contributors.md; ecosystem.md; index.md; installation.md; news.md; references.rst; usage-principles.md. /_static; . /css; ; rtd_sphinx_search.min.css. /js; ; rtd_search_config.js; rtd_sphinx_search.min.js. /scripts; ; bootstrap.js; pydata-sphinx-theme.js; rtd-sphinx-search.js; sphinx-book-theme.js. /styles; ; bootstrap.css; pydata-sphinx-theme.css; scanpy.css; sphinx-book-theme.css; theme.css. /vendor; . /fontawesome; . /6.5.2; . /css; ; all.min.css. /js; ; all.min.js. /webfonts; ; fa-brands-400.ttf; fa-brands-400.woff2; fa-regular-400.ttf; fa-regular-400.woff2; fa-solid-900.ttf; fa-solid-900.woff2; fa-v4compatibility.ttf; fa-v4compatibility.woff2. basic.css; clipboard.min.js; copybutton.css; copybutton.js; design-tabs.js; doctools.js; documentation_options.js; language_data.js; mystnb.4510f1fc1dee50b3e5859aac5469c37c29e427902b24a333a5f9fcb2f0b3ac41.css; plot_directive.css; pygments.css; Scanpy_Lo,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:9906,integrat,integration-scanorama,9906,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,1,['integrat'],['integration-scanorama']
Deployability,t; scanpy.read_visium.rst; scanpy.set_figure_params.rst; scanpy.tl.dendrogram.rst; scanpy.tl.diffmap.rst; scanpy.tl.dpt.rst; scanpy.tl.draw_graph.rst; scanpy.tl.embedding_density.rst; scanpy.tl.filter_rank_genes_groups.rst; scanpy.tl.ingest.rst; scanpy.tl.leiden.rst; scanpy.tl.louvain.rst; scanpy.tl.marker_gene_overlap.rst; scanpy.tl.paga.rst; scanpy.tl.rank_genes_groups.rst; scanpy.tl.score_genes.rst; scanpy.tl.score_genes_cell_cycle.rst; scanpy.tl.sim.rst; scanpy.tl.tsne.rst; scanpy.tl.umap.rst. /how-to; ; index.md; knn-transformers.ipynb; plotting-with-marsilea.ipynb. /release-notes; ; index.md. /tutorials; . /basics; ; clustering.ipynb; clustering-2017.ipynb; index.md; integrating-data-using-ingest.ipynb. /experimental; ; dask.ipynb; index.md; pearson_residuals.ipynb. /plotting; ; advanced.ipynb; core.ipynb; index.md. /spatial; ; index.md; integration-scanorama.ipynb. /trajectories; ; index.md; paga-paul15.ipynb. index.md. community.md; contributors.md; ecosystem.md; index.md; installation.md; news.md; references.rst; usage-principles.md. /_static; . /css; ; rtd_sphinx_search.min.css. /js; ; rtd_search_config.js; rtd_sphinx_search.min.js. /scripts; ; bootstrap.js; pydata-sphinx-theme.js; rtd-sphinx-search.js; sphinx-book-theme.js. /styles; ; bootstrap.css; pydata-sphinx-theme.css; scanpy.css; sphinx-book-theme.css; theme.css. /vendor; . /fontawesome; . /6.5.2; . /css; ; all.min.css. /js; ; all.min.js. /webfonts; ; fa-brands-400.ttf; fa-brands-400.woff2; fa-regular-400.ttf; fa-regular-400.woff2; fa-solid-900.ttf; fa-solid-900.woff2; fa-v4compatibility.ttf; fa-v4compatibility.woff2. basic.css; clipboard.min.js; copybutton.css; copybutton.js; design-tabs.js; doctools.js; documentation_options.js; language_data.js; mystnb.4510f1fc1dee50b3e5859aac5469c37c29e427902b24a333a5f9fcb2f0b3ac41.css; plot_directive.css; pygments.css; Scanpy_Logo_BrightFG.svg; searchtools.js; sphinx_highlight.js; sphinx-design.min.css; tabs.css; tabs.js. /api; . /generated; . /classes; ; scanpy,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:10046,install,installation,10046,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,1,['install'],['installation']
Deployability,"t_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.eigen_values. Contents . Neighbors.eigen_values. scanpy.Neighbors.eigen_values#. property Neighbors.eigen_values: ndarray[source]#; Eigen values of transition matrix. previous; scanpy.Neighbors.eigen_basis. next; scanpy.Neighbors.rp_forest. Contents; . Neighbors.eigen_values. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.eigen_values.html:9063,Release,Release,9063,en/stable/generated/scanpy.Neighbors.eigen_values.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.eigen_values.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"t_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_COLOR_ON. Contents . DotPlot.DEFAULT_COLOR_ON. scanpy.pl.DotPlot.DEFAULT_COLOR_ON#. DotPlot.DEFAULT_COLOR_ON = 'dot'[source]#. previous; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE. next; scanpy.pl.DotPlot.DEFAULT_DOT_EDGECOLOR. Contents; . DotPlot.DEFAULT_COLOR_ON. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_ON.html:9068,Release,Release,9068,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_ON.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_COLOR_ON.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"t_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.get_axes. Contents . StackedViolin.get_axes(). scanpy.pl.StackedViolin.get_axes#. StackedViolin.get_axes()[source]#. Return type:; dict[str, Axes]. previous; scanpy.pl.StackedViolin.add_totals. next; scanpy.pl.StackedViolin.getdoc. Contents; . StackedViolin.get_axes(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html:9066,Release,Release,9066,en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.get_axes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"tasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Datasets. Datasets#. datasets.blobs; Gaussian Blobs. datasets.ebi_expression_atlas; Load a dataset from the EBI Single Cell Expression Atlas. datasets.krumsiek11; Simulated myeloid progenitors [Krumsiek et al., 2011]. datasets.moignard15; Hematopoiesis in early mouse embryos [Moignard et al., 2015]. datasets.pbmc3k; 3k PBMCs from 10x Genomics. datasets.pbmc3k_processed; Processed 3k PBMCs from 10x Genomics. datasets.pbmc68k_reduced; Subsampled and processed 68k PBMCs. datasets.paul15; Development of Myeloid Progenitors [Paul et al., 2015]. datasets.toggleswitch; Simulated toggleswitch. datasets.visium_sge; Processed Visium Spatial Gene Expression data from 10x Genomics’ database. previous; scanpy.logging.print_versions. next; scanpy.datasets.blobs. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/datasets.html:9042,Release,Release,9042,en/stable/api/datasets.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/datasets.html,4,"['Release', 'release', 'toggle']","['Release', 'release', 'toggleswitch']"
Deployability,"tasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.pca_variance_ratio. Contents . pca_variance_ratio(). scanpy.pl.pca_variance_ratio#. scanpy.pl.pca_variance_ratio(adata, n_pcs=30, *, log=False, show=None, save=None)[source]#; Plot the variance ratio. Parameters:. n_pcs int (default: 30)Number of PCs to show. log bool (default: False)Plot on logarithmic scale.. show bool | None (default: None)Show the plot, do not return axis. save bool | str | None (default: None)If True or a str, save the figure.; A string is appended to the default filename.; Infer the filetype if ending on {'.pdf', '.png', '.svg'}. previous; scanpy.pl.pca_loadings. next; scanpy.pl.pca_overview. Contents; . pca_variance_ratio(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_variance_ratio.html:9062,Release,Release,9062,en/stable/api/generated/scanpy.pl.pca_variance_ratio.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca_variance_ratio.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"tasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Community. Contents . Discourse; Github Issue Tracker; Developer Chat. Community#; Scanpy is a community driven project. There are multiple channels for users and developers to communicate and connect. Discourse#; The scverse Discourse forum is place to go to ask usage questions and for longer form discussions around the project. Github Issue Tracker#; The Scanpy and anndata issue trackers are for reports and discussion of:. Bug reports; Documentation issues; Feature requests. Developer Chat#; Zulip chat instance for synchronous discussion of scanpy, anndata, and other scverse packages. previous; Release notes. next; News. Contents; . Discourse; Github Issue Tracker; Developer Chat. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/community.html:9043,Release,Release,9043,en/stable/community.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/community.html,3,"['Release', 'release']","['Release', 'release']"
Deployability,"tasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_csv. Contents . read_csv(). scanpy.read_csv#. scanpy.read_csv(filename, delimiter=',', first_column_names=None, dtype='float32')[source]#; Read .csv file.; Same as read_text() but with default delimiter ','. Parameters:. filename PathLike | Iterator[str]Data file. delimiter str | None (default: ',')Delimiter that separates data within text file.; If None, will split at arbitrary number of white spaces,; which is different from enforcing splitting at single white space ' '. first_column_names bool | None (default: None)Assume the first column stores row names. dtype str (default: 'float32')Numpy data type. Return type:; AnnData. previous; scanpy.read_h5ad. next; scanpy.read_excel. Contents; . read_csv(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_csv.html:9049,Release,Release,9049,en/stable/generated/scanpy.read_csv.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_csv.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,tdir — scanpy; scanpy._settings.ScanpyConfig.figdir — scanpy; scanpy._settings.ScanpyConfig.file_format_data — scanpy; scanpy._settings.ScanpyConfig.file_format_figs — scanpy; scanpy._settings.ScanpyConfig — scanpy; scanpy._settings.ScanpyConfig.logfile — scanpy; scanpy._settings.ScanpyConfig.logpath — scanpy; scanpy._settings.ScanpyConfig.max_memory — scanpy; scanpy._settings.ScanpyConfig.n_jobs — scanpy; scanpy._settings.ScanpyConfig.N_PCS — scanpy; scanpy._settings.ScanpyConfig.plot_suffix — scanpy; scanpy._settings.ScanpyConfig.set_figure_params — scanpy; scanpy._settings.ScanpyConfig.verbosity — scanpy; scanpy._settings.ScanpyConfig.writedir — scanpy; scanpy.datasets.blobs — scanpy; scanpy.datasets.ebi_expression_atlas — scanpy; scanpy.datasets.krumsiek11 — scanpy; scanpy.datasets.moignard15 — scanpy; scanpy.datasets.paul15 — scanpy; scanpy.datasets.pbmc3k — scanpy; scanpy.datasets.pbmc3k_processed — scanpy; scanpy.datasets.pbmc68k_reduced — scanpy; scanpy.datasets.toggleswitch — scanpy; scanpy.datasets.visium_sge — scanpy; scanpy.experimental.pp.highly_variable_genes — scanpy; scanpy.experimental.pp.normalize_pearson_residuals — scanpy; scanpy.experimental.pp.normalize_pearson_residuals_pca — scanpy; scanpy.experimental.pp.recipe_pearson_residuals — scanpy; scanpy.external.exporting.cellbrowser — scanpy; scanpy.external.exporting.spring_project — scanpy; scanpy.external.pl.phate — scanpy; scanpy.external.pl.sam — scanpy; scanpy.external.pl.trimap — scanpy; scanpy.external.pl.wishbone_marker_trajectory — scanpy; scanpy.external.pp.bbknn — scanpy; scanpy.external.pp.dca — scanpy; scanpy.external.pp.harmony_integrate — scanpy; scanpy.external.pp.hashsolo — scanpy; scanpy.external.pp.magic — scanpy; scanpy.external.pp.mnn_correct — scanpy; scanpy.external.pp.scanorama_integrate — scanpy; scanpy.get.aggregate — scanpy; scanpy.get.obs_df — scanpy; scanpy.get.rank_genes_groups_df — scanpy; scanpy.get.var_df — scanpy; scanpy.logging.print_header — scanpy; scanpy.loggi,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:18555,toggle,toggleswitch,18555,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,1,['toggle'],['toggleswitch']
Deployability,"tem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel 2.14.0; certifi 2023.11.17; cffi 1.16.0; charset_normalizer 3.3.2; cloudpickle 3.0.0; comm 0.2.1; cycler 0.12.1; cython_runtime NA; dask 2024.1.0; dateutil 2.8.2; debugpy 1.8.0; decorator 5.1.1; defusedxml 0.7.1; executing 2.0.1; fasteners 0.19; fastjsonschema NA; fbpca NA; fqdn NA; h5py 3.10.0; idna 3.6; igraph 0.10.8; intervaltree NA; ipykernel 6.28.0; ipywidgets 8.1.1; isoduration NA; jedi 0.19.1; jinja2 3.1.3;",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:10076,install,install,10076,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['install'],['install']
Deployability,"ternal.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0.dev78+g64ab900; scanpy 1.10.0rc2.dev6+g14555ba4; -----; PIL 10.2.0; annoy NA; anyio NA; appnope 0.1.3; arrow 1.3.0; asciitree NA; asttokens NA; attr 23.2.0; attrs 23.2.0; babel ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9683,integrat,integration,9683,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integration']
Deployability,"th of pbmc3k_processed pr1472 D Strobl; Better error message when computing DE with a group of size 1 pr1490 J Manning; Update cugraph API usage for v0.16 pr1494 R Ilango; Fixed marker_gene_overlap default value for top_n_markers pr1464 MD Luecken; Pass random_state to RAPIDs UMAP pr1474 C Nolet; Fixed anndata version requirement for concat() (re-exported from scanpy as sc.concat) pr1491 I Virshup; Fixed the width of the progress bar when downloading data pr1507 M Klein; Updated link for moignard15 dataset pr1542 I Virshup; Fixed bug where calling set_figure_params could block if IPython was installed, but not used. pr1547 I Virshup; violin() no longer fails if .raw not present pr1548 I Virshup; spatial() refactoring and better handling of spatial data pr1512 G Palla; pca() works with chunked=True again pr1592 I Virshup; ingest() now works with umap-learn 0.5.0 pr1601 S Rybakov. Version 1.6#. 1.6.0 2020-08-15#; This release includes an overhaul of dotplot(), matrixplot(), and stacked_violin() (pr1210 F Ramirez), and of the internals of rank_genes_groups() (pr1156 S Rybakov). Overhaul of dotplot(), matrixplot(), and stacked_violin() pr1210 F Ramirez#. An overhauled tutorial Core plotting functions.; New plotting classes can be accessed directly (e.g., DotPlot) or using the return_fig param.; It is possible to plot log fold change and p-values in the rank_genes_groups_dotplot() family of functions.; Added ax parameter which allows embedding the plot in other images.; Added option to include a bar plot instead of the dendrogram containing the cell/observation totals per category.; Return a dictionary of axes for further manipulation. This includes the main plot, legend and dendrogram to totals; Legends can be removed.; The groupby param can take a list of categories, e.g., groupby=[‘tissue’, ‘cell type’].; Added padding parameter to dotplot and stacked_violin. pr1270; Added title for colorbar and positioned as in dotplot for matrixplot().; dotplot() changes:. Improved t",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:34083,release,release,34083,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['release'],['release']
Deployability,"the GPU! 2024-03-18; Scanpy hits 100 contributors! 2022-03-31; New community channels 2022-03-31; Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01. Scanpy – Single-Cell Analysis in Python#; Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with anndata. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells.; Discuss usage on the scverse Discourse. Read the documentation.; If you’d like to contribute by opening an issue or creating a pull request, please take a look at our contribution guide.; scanpy is part of the scverse project (website, governance) and is fiscally sponsored by NumFOCUS.; If you like scverse and want to support our mission, please consider making a donation to support our efforts. Installation ; New to scanpy? Check out the installation guide. Installation. Tutorials ; The tutorials walk you through real-world applications of scanpy. Tutorials. API reference ; The API reference contains a detailed description of; the scanpy API. API. Discussion ; Need help? Reach out on our forum to get your questions answered!. https://discourse.scverse.org. GitHub ; Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments. https://github.com/scverse/scanpy. Other resources. Follow changes in the release notes.; Find tools that harmonize well with anndata & Scanpy at scverse.org/packages/; Check out our contribution guide for development practices.; Consider citing Genome Biology (2018) along with original references. News#. rapids-singlecell brings scanpy to the GPU! 2024-03-18#; rapids-singlecell by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. Scanpy hits 100 contributors! 2022-03-31#; 100 people have contributed to Scanpy’s source code!; Of course, contributions to ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/index.html:10335,Install,Installation,10335,en/stable/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/index.html,1,['Install'],['Installation']
Deployability,"tings.ScanpyConfig.logpath; scanpy._settings.ScanpyConfig.max_memory; scanpy._settings.ScanpyConfig.n_jobs; scanpy._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Plotting. Plotting#. Core plotting functions; Customizing Scanpy plots. previous; Integrating data using ingest and BBKNN. next; Core plotting functions. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html:9042,Release,Release,9042,en/stable/tutorials/plotting/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/index.html,3,"['Integrat', 'Release', 'release']","['Integrating', 'Release', 'release']"
Deployability,"tings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH. Contents . DotPlot.DEFAULT_CATEGORY_WIDTH. scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH#. DotPlot.DEFAULT_CATEGORY_WIDTH = 0.37[source]#. previous; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT. next; scanpy.pl.DotPlot.DEFAULT_COLORMAP. Contents; . DotPlot.DEFAULT_CATEGORY_WIDTH. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH.html:9074,Release,Release,9074,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"tion; Bug fixes; Development Process; Deprecations. Version 1.7; 1.7.2 2021-04-07; Bug fixes; Ecosystem. 1.7.1 2021-02-24; Documentation; Bug fixes. 1.7.0 2021-02-03; Features; External tools (new); External tools (changes); Documentation; Performance; Bugfixes. Version 1.6; 1.6.0 2020-08-15; Overhaul of dotplot(), matrixplot(), and stacked_violin() pr1210 F Ramirez; Additions; Bug fixes. Version 1.5; 1.5.1 2020-05-21; Bug fixes. 1.5.0 2020-05-15; Spatial data support; New functionality; External tools; Performance; Code design; Bug fixes. Version 1.4; 1.4.6 2020-03-17; Functionality in external; Code design; Bug fixes. 1.4.5 2019-12-30; New functionality; Code design. 1.4.4 2019-07-20; New functionality; Bug fixes; Code design. 1.4.3 2019-05-14; Bug fixes; Code design. 1.4.2 2019-05-06; New functionality; Bug fixes; Code design. 1.4.1 2019-04-26; New functionality; Code design. Version 1.3; 1.3.8 2019-02-05; 1.3.7 2019-01-02; 1.3.6 2018-12-11; Major updates; Interactive exploration of analysis results through manifold viewers; Code design. 1.3.5 2018-12-09; 1.3.4 2018-11-24; 1.3.3 2018-11-05; Major updates; Code design. 1.3.1 2018-09-03; RNA velocity in single cells LaManno2018; Plotting (pl-generic); There now is a section on imputation in external:. Version 1.2; 1.2.1 2018-06-08; Plotting of pl-generic marker genes and quality control. 1.2.0 2018-06-08. Version 1.1; 1.1.0 2018-06-01. Version 1.0; 1.0.0 2018-03-30; Major updates; Further updates. Version 0.4; 0.4.4 2018-02-26; 0.4.3 2018-02-09; 0.4.2 2018-01-07; 0.4.0 2017-12-23. Version 0.3; 0.3.2 2017-11-29; 0.3.0 2017-11-16. Version 0.2; 0.2.9 2017-10-25; Initial release of the new trajectory inference method PAGA. 0.2.1 2017-07-24. Version 0.1; 0.1.0 2017-05-17. Release notes#. Version 1.10#. 1.10.3 2024-09-17#. Bug fixes#. Prevent empty control gene set in score_genes() M Müller (pr2875); Fix subset=True of highly_variable_genes() when flavor is seurat or cell_ranger, and batch_key!=None E Roellin (pr3042); Ad",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:10970,update,updates,10970,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['update'],['updates']
Deployability,"ts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:10470,release,release,10470,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,2,['release'],['release']
Deployability,"ts.; Harmony [Korsunsky et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments. This function uses the python; port of Harmony, harmonypy, to integrate single-cell data; stored in an AnnData object. As Harmony works by adjusting the; principal components, this function should be run after performing; PCA but before computing the neighbor graph, as illustrated in the; example below. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_pca_harmony')The name of the field in adata.obsm where the adjusted PCA; table will be stored after running this function. Defaults to; X_pca_harmony. kwargsAny additional arguments will be passed to; harmonypy.run_harmony(). Returns:; Updates adata with the field adata.obsm[obsm_out_field],; containing principal components adjusted by Harmony such that; different experiments are integrated. Example; First, load libraries and example dataset, and preprocess.; >>> import scanpy as sc; >>> import scanpy.external as sce; >>> adata = sc.datasets.pbmc3k(); >>> sc.pp.recipe_zheng17(adata); >>> sc.pp.pca(adata). We now arbitrarily assign a batch metadata variable to each cell; for the sake of example, but during real usage there would already; be a column in adata.obs giving the experiment each cell came; from.; >>> adata.obs['batch'] = 1350*['a'] + 1350*['b']. Finally, run harmony. Afterwards, there will be a new table in; adata.obsm containing the adjusted PC’s.; >>> sce.pp.harmony_integrate(adata, 'batch'); >>> 'X_pca_harmony' in adata.obsm; True. previous; scanpy.external.pp.bbknn. next; scanpy.external.pp.mnn_correct. Contents; . harmony_integrate(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html:10532,Update,Updates,10532,en/stable/generated/scanpy.external.pp.harmony_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html,1,['Update'],['Updates']
Deployability,"ts.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.swap_axes. Contents . DotPlot.swap_axes(). scanpy.pl.DotPlot.swap_axes#. DotPlot.swap_axes(*, swap_axes=True)[source]#; Plots a transposed image.; By default, the x axis contains var_names (e.g. genes) and the y; axis the groupby categories. By setting swap_axes then x are; the groupby categories and y the var_names. Parameters:. swap_axes bool | None (default: True)Boolean to turn on (True) or off (False) ‘swap_axes’. Default True. Return type:; Self. Returns:; Returns self for method chaining. previous; scanpy.pl.DotPlot.style. next; scanpy.pl.MatrixPlot. Contents; . DotPlot.swap_axes(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.swap_axes.html:9061,Release,Release,9061,en/stable/api/generated/classes/scanpy.pl.DotPlot.swap_axes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.swap_axes.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"tting up the neighborhood graph (here, a PCA) and separate out all other batches.; As before, the model trained on the reference batch will explain the biological variation observed within it. adata_ref = adata_all[adata_all.obs.batch == ""0""]. Compute the PCA, neighbors and UMAP on the reference data. sc.pp.pca(adata_ref); sc.pp.neighbors(adata_ref); sc.tl.umap(adata_ref). The reference batch contains 12 of the 19 cell types across all batches. sc.pl.umap(adata_ref, color=""celltype""). Iteratively map labels (such as ‘celltype’) and embeddings (such as ‘X_pca’ and ‘X_umap’) from the reference data onto the query batches. adatas = [adata_all[adata_all.obs.batch == i].copy() for i in [""1"", ""2"", ""3""]]. sc.settings.verbosity = 2 # a bit more logging; for iadata, adata in enumerate(adatas):; print(f""... integrating batch {iadata+1}""); adata.obs[""celltype_orig""] = adata.obs.celltype # save the original cell type; sc.tl.ingest(adata, adata_ref, obs=""celltype""). ... integrating batch 1; running ingest; finished (0:00:06); ... integrating batch 2; running ingest; finished (0:00:07); ... integrating batch 3; running ingest; finished (0:00:03). Each of the query batches now carries annotation that has been contextualized with adata_ref. By concatenating, we can view it together. adata_concat = adata_ref.concatenate(adatas). adata_concat.obs.celltype = adata_concat.obs.celltype.astype(""category""); # fix category ordering; adata_concat.obs.celltype.cat.reorder_categories(; adata_ref.obs.celltype.cat.categories, inplace=True; ); # fix category coloring; adata_concat.uns[""celltype_colors""] = adata_ref.uns[""celltype_colors""]. sc.pl.umap(adata_concat, color=[""batch"", ""celltype""]). Compared to the BBKNN result, this is maintained clusters in a much more pronounced fashion. If one already observed a desired continuous structure (as in the hematopoietic datasets, for instance), ingest allows to easily maintain this structure. Evaluating consistency#; Let us subset the data to the query b",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:17489,integrat,integrating,17489,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,1,['integrat'],['integrating']
Deployability,"ttings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.dpt_timeseries. Contents . dpt_timeseries(). scanpy.pl.dpt_timeseries#. scanpy.pl.dpt_timeseries(adata, *, color_map=None, show=None, save=None, as_heatmap=True, marker='.')[source]#; Heatmap of pseudotime series. Parameters:. as_heatmap bool (default: True)Plot the timeseries as heatmap. previous; scanpy.pl.dpt_groups_pseudotime. next; scanpy.pl.paga. Contents; . dpt_timeseries(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.dpt_timeseries.html:9058,Release,Release,9058,en/stable/api/generated/scanpy.pl.dpt_timeseries.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.dpt_timeseries.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ttings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_WSPACE. Contents . DotPlot.DEFAULT_WSPACE. scanpy.pl.DotPlot.DEFAULT_WSPACE#. DotPlot.DEFAULT_WSPACE = 0[source]#. previous; scanpy.pl.DotPlot.DEFAULT_SMALLEST_DOT. next; scanpy.pl.DotPlot.MAX_NUM_CATEGORIES. Contents; . DotPlot.DEFAULT_WSPACE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_WSPACE.html:9066,Release,Release,9066,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_WSPACE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_WSPACE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ttings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT. Contents . DotPlot.DEFAULT_SIZE_EXPONENT. scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT#. DotPlot.DEFAULT_SIZE_EXPONENT = 1.5[source]#. previous; scanpy.pl.DotPlot.DEFAULT_SAVE_PREFIX. next; scanpy.pl.DotPlot.DEFAULT_SIZE_LEGEND_TITLE. Contents; . DotPlot.DEFAULT_SIZE_EXPONENT. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT.html:9073,Release,Release,9073,en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.DotPlot.DEFAULT_SIZE_EXPONENT.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ttings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy._settings.ScanpyConfig.writedir. Contents . ScanpyConfig.writedir. scanpy._settings.ScanpyConfig.writedir#. property ScanpyConfig.writedir: Path[source]#; Directory where the function scanpy.write writes to by default. previous; scanpy._settings.ScanpyConfig.verbosity. next; scanpy._settings.ScanpyConfig.N_PCS. Contents; . ScanpyConfig.writedir. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.writedir.html:9072,Release,Release,9072,en/stable/generated/scanpy._settings.ScanpyConfig.writedir.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy._settings.ScanpyConfig.writedir.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ttings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.read_umi_tools. Contents . read_umi_tools(). scanpy.read_umi_tools#. scanpy.read_umi_tools(filename, dtype=None)[source]#; Read a gzipped condensed count matrix from umi_tools. Parameters:. filename PathLikeFile name to read from. Return type:; AnnData. previous; scanpy.read_text. next; Get object from AnnData: get. Contents; . read_umi_tools(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_umi_tools.html:9055,Release,Release,9055,en/stable/generated/scanpy.read_umi_tools.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.read_umi_tools.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"ty (default: _empty)To run only on a certain set of genes given by a boolean array; or a string referring to an array in var.; By default, uses .var['highly_variable'] if available, else everything. use_highly_variable bool | None (default: None)Whether to use highly variable genes only, stored in; .var['highly_variable'].; By default uses them if they have been determined beforehand. Deprecated since version 1.10.0: Use mask_var instead. check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. Return type:; AnnData | None. Returns:; If inplace=False, returns the Pearson residual-based PCA results (as AnnData; object). If inplace=True, updates adata with the following fields:. .uns['pearson_residuals_normalization']['pearson_residuals_df']The subset of highly variable genes, normalized by Pearson residuals. .uns['pearson_residuals_normalization']['theta']The used value of the overdisperion parameter theta. .uns['pearson_residuals_normalization']['clip']The used value of the clipping parameter. .obsm['X_pca']PCA representation of data after gene selection (if applicable) and Pearson; residual normalization. .varm['PCs']The principal components containing the loadings. When inplace=True and; use_highly_variable=True, this will contain empty rows for the genes not; selected. .uns['pca']['variance_ratio']Ratio of explained variance. .uns['pca']['variance']Explained variance, equivalent to the eigenvalues of the covariance matrix. previous; scanpy.experimental.pp.normalize_pearson_residuals. next; scanpy.experimental.pp.highly_variable_genes. Contents; . normalize_pearson_residuals_pca(). By Scanpy development team. ; © Copyright 202",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html:12117,update,updates,12117,en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.normalize_pearson_residuals_pca.html,1,['update'],['updates']
Deployability,"ty; Code design. 1.4.4 2019-07-20; New functionality; Bug fixes; Code design. 1.4.3 2019-05-14; Bug fixes; Code design. 1.4.2 2019-05-06; New functionality; Bug fixes; Code design. 1.4.1 2019-04-26; New functionality; Code design. Version 1.3; 1.3.8 2019-02-05; 1.3.7 2019-01-02; 1.3.6 2018-12-11; Major updates; Interactive exploration of analysis results through manifold viewers; Code design. 1.3.5 2018-12-09; 1.3.4 2018-11-24; 1.3.3 2018-11-05; Major updates; Code design. 1.3.1 2018-09-03; RNA velocity in single cells LaManno2018; Plotting (pl-generic); There now is a section on imputation in external:. Version 1.2; 1.2.1 2018-06-08; Plotting of pl-generic marker genes and quality control. 1.2.0 2018-06-08. Version 1.1; 1.1.0 2018-06-01. Version 1.0; 1.0.0 2018-03-30; Major updates; Further updates. Version 0.4; 0.4.4 2018-02-26; 0.4.3 2018-02-09; 0.4.2 2018-01-07; 0.4.0 2017-12-23. Version 0.3; 0.3.2 2017-11-29; 0.3.0 2017-11-16. Version 0.2; 0.2.9 2017-10-25; Initial release of the new trajectory inference method PAGA. 0.2.1 2017-07-24. Version 0.1; 0.1.0 2017-05-17. Release notes#. Version 1.10#. 1.10.3 2024-09-17#. Bug fixes#. Prevent empty control gene set in score_genes() M Müller (pr2875); Fix subset=True of highly_variable_genes() when flavor is seurat or cell_ranger, and batch_key!=None E Roellin (pr3042); Add compatibility with numpy 2.0 P Angerer pr3065 and (pr3115); Fix legend_loc argument in scanpy.pl.embedding() not accepting matplotlib parameters P Angerer (pr3163); Fix dispersion cutoff in highly_variable_genes() in presence of NaNs P Angerer (pr3176); Fix axis labeling for swapped axes in rank_genes_groups_stacked_violin() Ilan Gold (pr3196); Upper bound dask on account of issuescverse/anndata#1579 Ilan Gold (pr3217); The fa2-modified package replaces forceatlas2 for the latter’s lack of maintenance A Alam (pr3220). 1.10.2 2024-06-25#. Development Process#. Add performance benchmarking pr2977 R Shrestha, P Angerer. Documentation#. Document several ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/release-notes/index.html:11651,release,release,11651,en/stable/release-notes/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/release-notes/index.html,1,['release'],['release']
Deployability,"um dataset in order to select only the spots part of the cortex. Note that the integration can also be performed on the whole brain slice, but it would give rise to false positive cell type assignments and and therefore it should be interpreted with more care.; The integration task will be performed with Scanorama: each Visium dataset will be integrated with the smart-seq cortex dataset.; The following cell should be uncommented out and run if this is the first time running this notebook. if not Path(""./data/adata_processed.h5ad"").exists():; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_cells_exon_counts.csv.gz -O data/GSE115746_cells_exon_counts.csv.gz; !gunzip data/GSE115746_cells_exon_counts.csv.gz; !wget https://ftp.ncbi.nlm.nih.gov/geo/series/GSE115nnn/GSE115746/suppl/GSE115746_complete_metadata_28706-cells.csv.gz -O data/GSE115746_complete_metadata_28706-cells.csv.gz; !gunzip data/GSE115746_complete_metadata_28706-cells.csv.gz; %pip install pybiomart; counts = pd.read_csv(""data/GSE115746_cells_exon_counts.csv"", index_col=0).T; meta = pd.read_csv(; ""data/GSE115746_complete_metadata_28706-cells.csv"", index_col=""sample_name""; ); meta = meta.loc[counts.index]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_symbol""); annot = annot[annot.index.isin(counts.columns)]; counts = counts.rename(columns=dict(zip(annot.index, annot[""ensembl_gene_id""]))); adata_cortex = an.AnnData(counts, obs=meta); sc.pp.normalize_total(adata_cortex, inplace=True); sc.pp.log1p(adata_cortex); adata_cortex.write_h5ad(""data/adata_processed.h5ad""). adata_cortex = sc.read(""./data/adata_processed.h5ad""). adata_spatial_anterior.var.set_index(""gene_ids"", inplace=True); adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spati",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:21001,install,install,21001,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['install'],['install']
Deployability,"variance. Parameters:. adata AnnDataAnnotated data matrix. color str | Sequence[str] | None (default: None)Keys for annotations of observations/cells or variables/genes, e.g.,; 'ann1' or ['ann1', 'ann2']. gene_symbols str | None (default: None)Column name in .var DataFrame that stores gene symbols. By default var_names; refer to the index column of the .var DataFrame. Setting this option allows; alternative names to be used. use_raw bool | None (default: None)Use .raw attribute of adata for coloring with gene expression. If None,; defaults to True if layer isn’t provided and adata.raw is present. layer str | None (default: None)Name of the AnnData object layer that wants to be plotted. By default; adata.raw.X is plotted. If use_raw=False is set, then adata.X is plotted.; If layer is set to a valid layer name, then the layer is plotted. layer; takes precedence over use_raw. annotate_var_explained bool (default: False). sort_order bool (default: True)For continuous annotations used as color parameter, plot data points; with higher values on top of others. groups str | Sequence[str] | None (default: None)Restrict to a few categories in categorical observation annotation.; The default is not to restrict to any groups. dimensions tuple[int, int] | Sequence[tuple[int, int]] | None (default: None)0-indexed dimensions of the embedding to plot as integers. E.g. [(0, 1), (1, 2)].; Unlike components, this argument is used in the same way as colors, e.g. is; used to specify a single plot at a time. Will eventually replace the components; argument. components str | Sequence[str] | None (default: None)For instance, ['1,2', '2,3']. To plot all available components use; components='all'. projection Literal['2d', '3d'] (default: '2d')Projection of plot (default: '2d'). legend_loc Optional[Literal['none', 'right margin', 'on data', 'on data export', 'best', 'upper right', 'upper left', 'lower left', 'lower right', 'right', 'center left', 'center right', 'lower center', 'upper center'",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca.html:11150,continuous,continuous,11150,en/stable/api/generated/scanpy.pl.pca.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pl.pca.html,1,['continuous'],['continuous']
Deployability,"viously.; Sometimes these caches are not invalidated when you’ve updated the docs.; If docs are not updating the way you expect, first try “force reloading” your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache (hatch run docs:clean) and try building them again. Adding to the docs#; For any user-visible changes, please make sure a note has been added to the release notes using hatch run towncrier:create.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts.; Once you’ve added a new function to the documentation, you’ll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to docs/api.md under a relevant heading.; For tutorials and more in depth examples, consider adding a notebook to the scanpy-tutorials repository.; The tutorials are tied to this repository via a submodule.; To update the submodule, run git submodule update --remote from the root of the repository.; Subsequently, commit and push the changes in a PR.; This should be done before each release to ensure the tutorials are up to date. docstrings format#; We use the numpydoc style for writing docstrings.; We’d primarily suggest looking at existing docstrings for examples, but the napolean guide to numpy style docstrings is also a great source.; If you’re unfamiliar with the reStructuredText (rST) markup format, check out the Sphinx rST primer.; Some key points:. We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; We autopopulate type information in docstrings when possible, so just add the type information to signatures.; When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier git diffs).; Check that the docs look like what you expect them too! It’s easy to forget to add a reference to func",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:10552,update,update,10552,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,2,['update'],['update']
Deployability,"w release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any release has been made:. Create a milestone for the next release (in case you made a bugfix release) or releases (in case of a major/minor release).; For bugfix releases, this should have on-merge: backport to 0.<minor>.x,; so the meeseeksdev bot will create a backport PR. See Versioning for more info.; Clear out and close the milestone you just made a release for. After a major or minor release has been made:. Tweet about it! Announce it on Zulip! Announce it on Discourse! Think about making a bot for this! Maybe actually do that?; Create a new release notes file for the next minor release. This should only be added to the dev branch.; Tag the development branch. If you just released 1.7.0, this would be 1.8.0.dev0.; Create a new branch for this release series, like 1.7.x. This should get a new release notes file. Debugging the build process#; If you changed something about the build process (e.g. Hatchling’s build configuration),; or something about the package’s structure,; you might want to manually check if the build and upload process behaves as expected:; $ # Clear out old distributions; $ rm -r dist; $ # Build source distribution and wheel both; $ python -m build; $ # Now check those build artifacts; $ twine check dist/*; $ # List the wheel archive’s contents; $ bsdtar -tf dist/*.whl. You can also upload the package to <test.pypi.org> (tutorial); $ twine upload --repository testpypi dist/*. The above approximates what the publish workflow does automatically for us.; If you ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:11041,release,release,11041,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,2,['release'],['release']
Deployability,"ws; rapids-singlecell brings scanpy to the GPU! 2024-03-18; Scanpy hits 100 contributors! 2022-03-31; New community channels 2022-03-31; Toolkit for spatial (squidpy) and multimodal (muon) published 2022-02-01. Scanpy – Single-Cell Analysis in Python#; Scanpy is a scalable toolkit for analyzing single-cell gene expression data; built jointly with anndata. It includes; preprocessing, visualization, clustering, trajectory inference and differential; expression testing. The Python-based implementation efficiently deals with; datasets of more than one million cells.; Discuss usage on the scverse Discourse. Read the documentation.; If you’d like to contribute by opening an issue or creating a pull request, please take a look at our contribution guide.; scanpy is part of the scverse project (website, governance) and is fiscally sponsored by NumFOCUS.; If you like scverse and want to support our mission, please consider making a donation to support our efforts. Installation ; New to scanpy? Check out the installation guide. Installation. Tutorials ; The tutorials walk you through real-world applications of scanpy. Tutorials. API reference ; The API reference contains a detailed description of; the scanpy API. API. Discussion ; Need help? Reach out on our forum to get your questions answered!. https://discourse.scverse.org. GitHub ; Find a bug? Interested in improving scanpy? Checkout our GitHub for the latest developments. https://github.com/scverse/scanpy. Other resources. Follow changes in the release notes.; Find tools that harmonize well with anndata & Scanpy at scverse.org/packages/; Check out our contribution guide for development practices.; Consider citing Genome Biology (2018) along with original references. News#. rapids-singlecell brings scanpy to the GPU! 2024-03-18#; rapids-singlecell by Severin Dicks provides a scanpy-like API with accelerated operations implemented on GPU. Scanpy hits 100 contributors! 2022-03-31#; 100 people have contributed to Scanpy’s sou",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/index.html:10271,Install,Installation,10271,en/stable/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/index.html,2,"['Install', 'install']","['Installation', 'installation']"
Deployability,"x]; annot = sc.queries.biomart_annotations(; ""mmusculus"",; [""mgi_symbol"", ""ensembl_gene_id""],; ).set_index(""mgi_symbol""); annot = annot[annot.index.isin(counts.columns)]; counts = counts.rename(columns=dict(zip(annot.index, annot[""ensembl_gene_id""]))); adata_cortex = an.AnnData(counts, obs=meta); sc.pp.normalize_total(adata_cortex, inplace=True); sc.pp.log1p(adata_cortex); adata_cortex.write_h5ad(""data/adata_processed.h5ad""). adata_cortex = sc.read(""./data/adata_processed.h5ad""). adata_spatial_anterior.var.set_index(""gene_ids"", inplace=True); adata_spatial_posterior.var.set_index(""gene_ids"", inplace=True). Subset the spatial anndata to (approximately) selects only spots belonging to the cortex. adata_anterior_subset = adata_spatial_anterior[; adata_spatial_anterior.obsm[""spatial""][:, 1] < 6000, :; ]; adata_posterior_subset = adata_spatial_posterior[; (adata_spatial_posterior.obsm[""spatial""][:, 1] < 4000); & (adata_spatial_posterior.obsm[""spatial""][:, 0] < 6000),; :,; ]. Run integration with Scanorama. adatas_anterior = [adata_cortex, adata_anterior_subset]; adatas_posterior = [adata_cortex, adata_posterior_subset]. # Integration.; adatas_cor_anterior = scanorama.correct_scanpy(adatas_anterior, return_dimred=True); adatas_cor_posterior = scanorama.correct_scanpy(adatas_posterior, return_dimred=True). Found 22689 genes among all datasets; [[0. 0.22877847]; [0. 0. ]]; Processing datasets (0, 1); Found 22689 genes among all datasets; [[0. 0.35810811]; [0. 0. ]]; Processing datasets (0, 1). Concatenate datasets and assign integrated embeddings to anndata objects.; Notice that we are concatenating datasets with the join=""outer"" and uns_merge=""first"" strategies. This is because we want to keep the obsm['coords'] as well as the images of the visium datasets. adata_cortex_anterior = sc.concat(; adatas_cor_anterior,; label=""dataset"",; keys=[""smart-seq"", ""visium""],; join=""outer"",; uns_merge=""first"",; ); adata_cortex_posterior = sc.concat(; adatas_cor_posterior,; label=""dataset",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:22214,integrat,integration,22214,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['integrat'],['integration']
Deployability,"xternal.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .md. .pdf. Making a release. Contents . Preparing the release; Actually making the release; After making a release; Debugging the build process. Making a release#; First, check out Versioning to see which kind of release you want to make.; That page also explains concepts like pre-releases and applications thereof. Preparing the release#. Switch to the main branch for a major/minor release and the respective release series branch for a patch release (e.g. 1.8.x when releasing version 1.8.4).; Run hatch towncrier:build to generate a PR that creates a new release notes file. Wait for the PR to be auto-merged.; If it is a patch release, merge the backport PR (see Tooling) into the main branch. Actually making the release#. Go to GitHub’s releases page.; Click the “Draft a new release” button.; Open the “Choose a tag” dropdown and type the version of the tag you want to release, such as 1.9.6.; Select the dropdown entry “+ Create new tag: 1.<minor>.<patch> on publish”.; In the second dropdown “Target:”, select the base branch i.e. main for a minor/major release,; and e.g. 1.9.x for our example patch release 1.9.6.; If the version is a pre-release version, such as 1.7.0rc1 or 1.10.0a1, tick the “Set as a pre-release” checkbox. After making a release#; After any ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/release.html:9495,release,releases,9495,en/stable/dev/release.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/release.html,1,['release'],['releases']
Deployability,"xternal.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.external.pp.harmony_integrate. Contents . harmony_integrate(). scanpy.external.pp.harmony_integrate#. scanpy.external.pp.harmony_integrate(adata, key, *, basis='X_pca', adjusted_basis='X_pca_harmony', **kwargs)[source]#; Use harmonypy [Korsunsky et al., 2019] to integrate different experiments.; Harmony [Korsunsky et al., 2019] is an algorithm for integrating single-cell; data from multiple experiments. This function uses the python; port of Harmony, harmonypy, to integrate single-cell data; stored in an AnnData object. As Harmony works by adjusting the; principal components, this function should be run after performing; PCA but before computing the neighbor graph, as illustrated in the; example below. Parameters:. adata AnnDataThe annotated data matrix. key strThe name of the column in adata.obs that differentiates; among experiments/batches. basis str (default: 'X_pca')The name of the field in adata.obsm where the PCA table is; stored. Defaults to 'X_pca', which is the default for; sc.pp.pca(). adjusted_basis str (default: 'X_pca_harmony')The name of the field in adata.obsm where the adjusted PCA; table will be stored after running this function. Defaults to; X_pca_harmony. kwargsAny additional arguments will be passed to; harmonypy.run_harmony(). Returns:; Updates adata with the field adata.obsm[obsm_out_field],; containing principal compo",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html:9602,integrat,integrating,9602,en/stable/generated/scanpy.external.pp.harmony_integrate.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.harmony_integrate.html,1,['integrat'],['integrating']
Deployability,"y._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. Contents . StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE#. StackedViolin.DEFAULT_COLOR_LEGEND_TITLE = 'Median expression\nin group'[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_COLORMAP. next; scanpy.pl.StackedViolin.DEFAULT_CUT. Contents; . StackedViolin.DEFAULT_COLOR_LEGEND_TITLE. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html:9084,Release,Release,9084,en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.DEFAULT_COLOR_LEGEND_TITLE.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"y._settings.ScanpyConfig.plot_suffix; scanpy._settings.ScanpyConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.Neighbors.to_igraph. Contents . Neighbors.to_igraph(). scanpy.Neighbors.to_igraph#. Neighbors.to_igraph()[source]#; Generate igraph from connectiviies. Return type:; Graph. previous; scanpy.Neighbors.getdoc. next; Settings. Contents; . Neighbors.to_igraph(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.to_igraph.html:9060,Release,Release,9060,en/stable/generated/scanpy.Neighbors.to_igraph.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.Neighbors.to_igraph.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"y.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating spatial data with scRNA-seq using scanorama. Contents . Loading libraries; Reading the data; Data integration; Data integration and label transfer from scRNA-seq dataset. Integrating spatial data with scRNA-seq using scanorama#; Author: Giovanni Palla. Note; For up-to-date analysis tutorials, kindly check out SquidPy tutorials. This tutorial shows how to work with multiple Visium datasets and perform integration of scRNA-seq dataset with Scanpy. It follows the previous tutorial on analysis and visualization of spatial transcriptomics data.; We will use Scanorama paper - code to perform integration and label transfer. It has a convenient interface with scanpy and anndata.; To install the required libraries, type the following:; pip install git+https://github.com/theislab/scanpy.git; pip install git+https://github.com/theislab/anndata.git; pip install scanorama. Loading libraries#. import scanpy as sc; import anndata as an; import pandas as pd; import numpy as np; import matplotlib.pyplot as plt; import seaborn as sns; import scanorama. from pathlib import Path. sc.logging.print_versions(); sc.set_figure_params(facecolor=""white"", figsize=(8, 8)); sc.settings.verbosity = 3. -----; anndata 0.11.0",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:9450,Integrat,Integrating,9450,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,1,['Integrat'],['Integrating']
Deployability,"y.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .ipynb. .pdf. Integrating data using ingest and BBKNN. Contents . PBMCs; Mapping PBMCs using ingest; Using BBKNN. Pancreas; Seeing the batch effect; BBKNN; Mapping onto a reference batch using ingest; Evaluating consistency; Cell types conserved across batches; All cell types. Visualizing distributions across batches; Density plot; Partial visualizaton of a subset of groups in embedding. Integrating data using ingest and BBKNN#; The following tutorial describes a simple PCA-based method for integrating data we call ingest and compares it with BBKNN [Polanski19]. BBKNN integrates well with the Scanpy workflow and is accessible through the bbknn function.; The ingest function assumes an annotated reference dataset that captures the biological variability of interest. The rational is to fit a model on the reference data and use it to project new data. For the time being, this model is a PCA combined with a neighbor lookup search tree, for which we use UMAP’s implementation [McInnes18]. Similar PCA-based integrations have been used before, for instance, in [Weinreb18]. As ingest is simple and the procedure clear, the workflow is transparent and fast.; Like BBKNN, ingest leaves the data matrix itself invariant.; Unlike BBKNN, ingest solves the label mapping problem (like scmap) and maintains an embedding that might have desired properties like specific clusters or trajectories. We refer to this asymmetric dataset integration as ingesting annotations from an an",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html:9627,Integrat,Integrating,9627,en/stable/tutorials/basics/integrating-data-using-ingest.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/integrating-data-using-ingest.html,2,"['Integrat', 'integrat']","['Integrating', 'integrating']"
Deployability,"yConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX. Contents . MatrixPlot.DEFAULT_SAVE_PREFIX. scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX#. MatrixPlot.DEFAULT_SAVE_PREFIX = 'matrixplot_'[source]#. previous; scanpy.pl.MatrixPlot.DEFAULT_LEGENDS_WIDTH. next; scanpy.pl.MatrixPlot.DEFAULT_WSPACE. Contents; . MatrixPlot.DEFAULT_SAVE_PREFIX. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html:9074,Release,Release,9074,en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.MatrixPlot.DEFAULT_SAVE_PREFIX.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"yConfig.verbosity; scanpy._settings.ScanpyConfig.writedir; scanpy._settings.ScanpyConfig.N_PCS; scanpy._settings.ScanpyConfig.set_figure_params. scanpy.logging.print_header; scanpy.logging.print_versions. Datasets; scanpy.datasets.blobs; scanpy.datasets.ebi_expression_atlas; scanpy.datasets.krumsiek11; scanpy.datasets.moignard15; scanpy.datasets.pbmc3k; scanpy.datasets.pbmc3k_processed; scanpy.datasets.pbmc68k_reduced; scanpy.datasets.paul15; scanpy.datasets.toggleswitch; scanpy.datasets.visium_sge. Deprecated functions; scanpy.pp.filter_genes_dispersion; scanpy.pp.normalize_per_cell. External API; Preprocessing: PP; scanpy.external.pp.bbknn; scanpy.external.pp.harmony_integrate; scanpy.external.pp.mnn_correct; scanpy.external.pp.scanorama_integrate; scanpy.external.pp.hashsolo; scanpy.external.pp.dca; scanpy.external.pp.magic. Tools: TL; scanpy.external.tl.phate; scanpy.external.tl.palantir; scanpy.external.tl.trimap; scanpy.external.tl.sam; scanpy.external.tl.phenograph; scanpy.external.tl.harmony_timeseries; scanpy.external.tl.wishbone; scanpy.external.tl.palantir; scanpy.external.tl.palantir_results; scanpy.external.tl.sandbag; scanpy.external.tl.cyclone. Plotting: PL; scanpy.external.pl.phate; scanpy.external.pl.trimap; scanpy.external.pl.sam; scanpy.external.pl.wishbone_marker_trajectory. Exporting; scanpy.external.exporting.spring_project; scanpy.external.exporting.cellbrowser. Ecosystem; Release notes; Community; News; Contributing; Contributing code; Getting set up; Tests; Documentation; CI; Versioning; Making a release. Contributors; References. .rst. .pdf. scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES. Contents . StackedViolin.MAX_NUM_CATEGORIES. scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES#. StackedViolin.MAX_NUM_CATEGORIES = 500[source]#. previous; scanpy.pl.StackedViolin.DEFAULT_YLIM. next; scanpy.pl.StackedViolin.MIN_FIGURE_HEIGHT. Contents; . StackedViolin.MAX_NUM_CATEGORIES. By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html:9076,Release,Release,9076,en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/classes/scanpy.pl.StackedViolin.MAX_NUM_CATEGORIES.html,2,"['Release', 'release']","['Release', 'release']"
Deployability,"zed data – the logarithm of mean; and dispersion is taken internally when log is at its default value; True. For ‘cell_ranger’, this is usually called for logarithmized data; – in this case you should set log to False. In their default; workflows, Seurat passes the cutoffs whereas Cell Ranger passes; n_top_genes. min_mean float | None (default: None). max_mean float | None (default: None). min_disp float | None (default: None). max_disp float | None (default: None)If n_top_genes unequals None, these cutoffs for the means and the; normalized dispersions are ignored. n_bins int (default: 20)Number of bins for binning the mean gene expression. Normalization is; done with respect to each bin. If just a single gene falls into a bin,; the normalized dispersion is artificially set to 1. You’ll be informed; about this if you set settings.verbosity = 4. n_top_genes int | None (default: None)Number of highly-variable genes to keep. log bool (default: True)Use the logarithm of the mean to variance ratio. subset bool (default: True)Keep highly-variable genes only (if True) else write a bool array for h; ighly-variable genes while keeping all genes. copy bool (default: False)If an AnnData is passed, determines whether a copy; is returned. Return type:; AnnData | recarray | None. Returns:; If an AnnData adata is passed, returns or updates adata depending on; copy. It filters the adata and adds the annotations. meansadata.varMeans per gene. Logarithmized when log is True. dispersionsadata.varDispersions per gene. Logarithmized when log is True. dispersions_normadata.varNormalized dispersions per gene. Logarithmized when log is True. If a data matrix X is passed, the annotation is returned as np.recarray; with the same information stored in fields: gene_subset, means, dispersions, dispersion_norm. previous; Deprecated functions. next; scanpy.pp.normalize_per_cell. Contents; . filter_genes_dispersion(). By Scanpy development team. ; © Copyright 2024, the Scanpy development team.; . ",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes_dispersion.html:12214,update,updates,12214,en/stable/generated/scanpy.pp.filter_genes_dispersion.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.pp.filter_genes_dispersion.html,1,['update'],['updates']
Deployability,— scanpy; scanpy.read_csv — scanpy; scanpy.read_excel — scanpy; scanpy.read_h5ad — scanpy; scanpy.read_hdf — scanpy; scanpy.read_loom — scanpy; scanpy.read_mtx — scanpy; scanpy.read_text — scanpy; scanpy.read_umi_tools — scanpy; scanpy.read_visium — scanpy; scanpy.set_figure_params — scanpy; scanpy.tl.dendrogram — scanpy; scanpy.tl.diffmap — scanpy; scanpy.tl.dpt — scanpy; scanpy.tl.draw_graph — scanpy; scanpy.tl.embedding_density — scanpy; scanpy.tl.filter_rank_genes_groups — scanpy; scanpy.tl.ingest — scanpy; scanpy.tl.leiden — scanpy; scanpy.tl.louvain — scanpy; scanpy.tl.marker_gene_overlap — scanpy; scanpy.tl.paga — scanpy; scanpy.tl.rank_genes_groups — scanpy; scanpy.tl.score_genes — scanpy; scanpy.tl.score_genes_cell_cycle — scanpy; scanpy.tl.sim — scanpy; scanpy.tl.tsne — scanpy; scanpy.tl.umap — scanpy. /how-to; ; How to — scanpy; Using other kNN libraries in Scanpy — scanpy; Plotting with Marsilea — scanpy. /release-notes; ; Release notes — scanpy. /tutorials; . /basics; ; Preprocessing and clustering — scanpy; Preprocessing and clustering 3k PBMCs (legacy workflow) — scanpy; Basics — scanpy; Integrating data using ingest and BBKNN — scanpy. /experimental; ; Using dask with Scanpy — scanpy; Experimental — scanpy; How to preprocess UMI count data with analytic Pearson residuals — scanpy. /plotting; ; Customizing Scanpy plots — scanpy; Core plotting functions — scanpy; Plotting — scanpy. /spatial; ; Analysis and visualization of spatial transcriptomics data — scanpy; Spatial — scanpy; Integrating spatial data with scRNA-seq using scanorama — scanpy. /trajectories; ; Trajectories — scanpy; Trajectory inference for hematopoiesis in mouse — scanpy. Tutorials — scanpy. Community — scanpy; Contributors — scanpy; Ecosystem — scanpy; Index — scanpy; Scanpy – Single-Cell Analysis in Python — scanpy; Installation — scanpy; News — scanpy; References — scanpy; Search - scanpy; searchindex.js; Scanpy – Single-Cell Analysis in Python — scanpy; Usage Principles — scanpy. ,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/index-wcopy.html:22354,Integrat,Integrating,22354,index-wcopy.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/index-wcopy.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,"“force reloading” your browser page – e.g. reload the page without using the cache.; Next, if problems persist, clear the sphinx cache (hatch run docs:clean) and try building them again. Adding to the docs#; For any user-visible changes, please make sure a note has been added to the release notes using hatch run towncrier:create.; We recommend waiting on this until your PR is close to done since this can often causes merge conflicts.; Once you’ve added a new function to the documentation, you’ll need to make sure there is a link somewhere in the documentation site pointing to it.; This should be added to docs/api.md under a relevant heading.; For tutorials and more in depth examples, consider adding a notebook to the scanpy-tutorials repository.; The tutorials are tied to this repository via a submodule.; To update the submodule, run git submodule update --remote from the root of the repository.; Subsequently, commit and push the changes in a PR.; This should be done before each release to ensure the tutorials are up to date. docstrings format#; We use the numpydoc style for writing docstrings.; We’d primarily suggest looking at existing docstrings for examples, but the napolean guide to numpy style docstrings is also a great source.; If you’re unfamiliar with the reStructuredText (rST) markup format, check out the Sphinx rST primer.; Some key points:. We have some custom sphinx extensions activated. When in doubt, try to copy the style of existing docstrings.; We autopopulate type information in docstrings when possible, so just add the type information to signatures.; When docs exist in the same file as code, line length restrictions still apply. In files which are just docs, go with a sentence per line (for easier git diffs).; Check that the docs look like what you expect them too! It’s easy to forget to add a reference to function, be sure it got added and looks right. Look at sc.tl.louvain as an example for everything mentioned here. Plots in docstrings#; One of",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/documentation.html:10726,release,release,10726,en/stable/dev/documentation.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/documentation.html,1,['release'],['release']
Deployability,﻿. Analysis and visualization of spatial transcriptomics data — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html:115,Install,Installation,115,en/stable/tutorials/spatial/basic-analysis.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/basic-analysis.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,﻿. Customizing Scanpy plots — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.p,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html:81,Install,Installation,81,en/stable/tutorials/plotting/advanced.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/plotting/advanced.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,﻿. Getting set up — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scanpy.pl.DotPlot.,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html:71,Install,Installation,71,en/stable/dev/getting-set-up.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/dev/getting-set-up.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,﻿. How to preprocess UMI count data with analytic Pearson residuals — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:121,Install,Installation,121,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,﻿. Integrating spatial data with scRNA-seq using scanorama — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.Dot,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html:3,Integrat,Integrating,3,en/stable/tutorials/spatial/integration-scanorama.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/spatial/integration-scanorama.html,4,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,﻿. Preprocessing and clustering — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COLOR_ON; scan,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:85,Install,Installation,85,en/stable/tutorials/basics/clustering.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Deployability,﻿. Scanpy – Single-Cell Analysis in Python — scanpy. Skip to main content. Back to top. Ctrl+K. Installation; Tutorials; Basics; Preprocessing and clustering; Preprocessing and clustering 3k PBMCs (legacy workflow); Integrating data using ingest and BBKNN. Plotting; Core plotting functions; Customizing Scanpy plots. Trajectories; Trajectory inference for hematopoiesis in mouse. Spatial; Analysis and visualization of spatial transcriptomics data; Integrating spatial data with scRNA-seq using scanorama. Experimental; How to preprocess UMI count data with analytic Pearson residuals; Using dask with Scanpy. Usage Principles; How to; Using other kNN libraries in Scanpy; Plotting with Marsilea. API; Preprocessing: pp; scanpy.pp.calculate_qc_metrics; scanpy.pp.filter_cells; scanpy.pp.filter_genes; scanpy.pp.highly_variable_genes; scanpy.pp.log1p; scanpy.pp.pca; scanpy.pp.normalize_total; scanpy.pp.regress_out; scanpy.pp.scale; scanpy.pp.subsample; scanpy.pp.downsample_counts; scanpy.pp.recipe_zheng17; scanpy.pp.recipe_weinreb17; scanpy.pp.recipe_seurat; scanpy.pp.combat; scanpy.pp.scrublet; scanpy.pp.scrublet_simulate_doublets; scanpy.pp.neighbors. Tools: tl; scanpy.pp.pca; scanpy.tl.tsne; scanpy.tl.umap; scanpy.tl.draw_graph; scanpy.tl.diffmap; scanpy.tl.embedding_density; scanpy.tl.leiden; scanpy.tl.louvain; scanpy.tl.dendrogram; scanpy.tl.dpt; scanpy.tl.paga; scanpy.tl.ingest; scanpy.tl.rank_genes_groups; scanpy.tl.filter_rank_genes_groups; scanpy.tl.marker_gene_overlap; scanpy.tl.score_genes; scanpy.tl.score_genes_cell_cycle; scanpy.tl.sim. Plotting: pl; scanpy.pl.scatter; scanpy.pl.heatmap; scanpy.pl.dotplot; scanpy.pl.tracksplot; scanpy.pl.violin; scanpy.pl.stacked_violin; scanpy.pl.matrixplot; scanpy.pl.clustermap; scanpy.pl.ranking; scanpy.pl.dendrogram; scanpy.pl.DotPlot; scanpy.pl.DotPlot.DEFAULT_CATEGORY_HEIGHT; scanpy.pl.DotPlot.DEFAULT_CATEGORY_WIDTH; scanpy.pl.DotPlot.DEFAULT_COLORMAP; scanpy.pl.DotPlot.DEFAULT_COLOR_LEGEND_TITLE; scanpy.pl.DotPlot.DEFAULT_COL,MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/index.html:96,Install,Installation,96,en/stable/index.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/index.html,3,"['Install', 'Integrat']","['Installation', 'Integrating']"
Energy Efficiency," Firstly, we use; the adaptive kernel described in Moon et al. [2019] for; improved stability. Secondly, data diffusion is applied; in the PCA space, rather than the data space, for speed and; memory improvements.; More information and bug reports; here. For help, visit; <https://krishnaswamylab.org/get-help>. Parameters:. adata AnnDataAn anndata file with .raw attribute representing raw counts. name_list Union[Literal['all_genes', 'pca_only'], Sequence[str], None] (default: None)Denoised genes to return. The default 'all_genes'/None; may require a large amount of memory if the input data is sparse.; Another possibility is 'pca_only'. knn int (default: 5)number of nearest neighbors on which to build kernel. decay float | None (default: 1)sets decay rate of kernel tails.; If None, alpha decaying kernel is not used. knn_max int | None (default: None)maximum number of nearest neighbors with nonzero connection.; If None, will be set to 3 * knn. t Union[Literal['auto'], int] (default: 3)power to which the diffusion operator is powered.; This sets the level of diffusion. If ‘auto’, t is selected; according to the Procrustes disparity of the diffused data. n_pca int | None (default: 100)Number of principal components to use for calculating; neighborhoods. For extremely large datasets, using; n_pca < 20 allows neighborhoods to be calculated in; roughly log(n_samples) time. If None, no PCA is performed. solver Literal['exact', 'approximate'] (default: 'exact')Which solver to use. “exact” uses the implementation described; in van Dijk et al. [2018]. “approximate” uses a faster; implementation that performs imputation in the PCA space and then; projects back to the gene space. Note, the “approximate” solver may; return negative values. knn_dist str (default: 'euclidean')recommended values: ‘euclidean’, ‘cosine’, ‘precomputed’; Any metric from scipy.spatial.distance can be used; distance metric for building kNN graph. If ‘precomputed’,; data should be an n_samples x n_samples d",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html:10953,power,power,10953,en/stable/generated/scanpy.external.pp.magic.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.external.pp.magic.html,2,['power'],"['power', 'powered']"
Energy Efficiency," If None, residuals are clipped to the interval [-sqrt(n_obs), sqrt(n_obs)], where n_obs is the number of cells in the dataset (default behavior).; If any scalar c, residuals are clipped to the interval [-c, c]. Set clip=np.inf for no clipping. n_top_genes int | None (default: None)Number of highly-variable genes to keep. Mandatory if flavor='seurat_v3' or; flavor='pearson_residuals'. batch_key str | None (default: None)If specified, highly-variable genes are selected within each batch separately; and merged. This simple process avoids the selection of batch-specific genes; and acts as a lightweight batch correction method. Genes are first sorted by; how many batches they are a HVG. If flavor='pearson_residuals', ties are; broken by the median rank (across batches) based on within-batch residual; variance. chunksize int (default: 1000)If flavor='pearson_residuals', this dertermines how many genes are processed at; once while computing the residual variance. Choosing a smaller value will reduce; the required memory. flavor Literal['pearson_residuals'] (default: 'pearson_residuals')Choose the flavor for identifying highly variable genes. In this experimental; version, only ‘pearson_residuals’ is functional. check_values bool (default: True)If True, checks if counts in selected layer are integers as expected by this; function, and return a warning if non-integers are found. Otherwise, proceed; without checking. Setting this to False can speed up code for large datasets. layer str | None (default: None)Layer to use as input instead of X. If None, X is used. subset bool (default: False)If True, subset the data to highly-variable genes after finding them.; Otherwise merely indicate highly variable genes in adata.var (see below). inplace bool (default: True)If True, update adata with results. Otherwise, return results. See below for; details of what is returned. Return type:; DataFrame | None. Returns:; If inplace=True, adata.var is updated with the following fields. Otherw",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html:11429,reduce,reduce,11429,en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/generated/scanpy.experimental.pp.highly_variable_genes.html,1,['reduce'],['reduce']
Energy Efficiency," don’t need to sum all those extra zeros). You can convert from sparse to dense chunks via:; X = X.map_blocks(lambda x: x.toarray(), dtype=X.dtype, meta=np.array([])). And in reverse:; X = X.map_blocks(sparse.csr_matrix). Note that you will likely have to work with smaller chunks when doing this, via a rechunking operation. We suggest using a factor of the larger chunk size to achieve the most efficient rechunking. SPARSE_CHUNK_SIZE = 100_000; DENSE_CHUNK_SIZE = 10_000. Dask provides extensive tooling for monitoring your computation. You can access that via the dashboard started when using any of their distributed clusters. client. . Client; Client-d3384ee9-58e9-11ef-9bda-3868dd0e66a0. Connection method: Cluster object; Cluster type: distributed.LocalCluster. Dashboard: http://127.0.0.1:8787/status. Cluster Info. LocalCluster; 815df81e. Dashboard: http://127.0.0.1:8787/status. Workers: 3; . Total threads: 18; . Total memory: 128.00 GiB; . Status: running; Using processes: True. Scheduler Info. . Scheduler; Scheduler-d580fb0c-35e1-45f0-9394-837f45e7976c. Comm: tcp://127.0.0.1:37191; . Workers: 3; . Dashboard: http://127.0.0.1:8787/status. Total threads: 18; . Started: Just now; . Total memory: 128.00 GiB; . Workers. . Worker: 0. Comm: tcp://127.0.0.1:36805; . Total threads: 6; . Dashboard: http://127.0.0.1:45909/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:39225; . Local directory: /tmp/dask-scratch-space/worker-pz4wcxmk; . . Worker: 1. Comm: tcp://127.0.0.1:35183; . Total threads: 6; . Dashboard: http://127.0.0.1:43387/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:42555; . Local directory: /tmp/dask-scratch-space/worker-a11nkkx1; . . Worker: 2. Comm: tcp://127.0.0.1:36599; . Total threads: 6; . Dashboard: http://127.0.0.1:39033/status. Memory: 42.67 GiB; . Nanny: tcp://127.0.0.1:45463; . Local directory: /tmp/dask-scratch-space/worker-mcr71xvg; . We’ll convert the X representation to dask using anndata.experimental.read_elem_as_dask.; The file we’ve ret",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html:12655,Schedul,Scheduler,12655,en/stable/tutorials/experimental/dask.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/dask.html,1,['Schedul'],['Scheduler']
Energy Efficiency," normalized counts later. Further background on why to use the square-root transform here can be found in Wagner (2020). # keep raw and depth-normalized counts for later; adata_pbmc3k.layers[""raw""] = adata_pbmc3k.X.copy(); adata_pbmc3k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc3k, inplace=False)[""X""]; ). adata_pbmc10k.layers[""raw""] = adata_pbmc10k.X.copy(); adata_pbmc10k.layers[""sqrt_norm""] = np.sqrt(; sc.pp.normalize_total(adata_pbmc10k, inplace=False)[""X""]; ). normalizing counts per cell; finished (0:00:00); normalizing counts per cell; finished (0:00:00). Compute Pearson residuals#; This will transform the sparse raw counts in adata.X to a dense matrix of Pearson residuals. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.experimental.pp.normalize_pearson_residuals(adata). computing analytic Pearson residuals on adata.X; finished (0:00:00); computing analytic Pearson residuals on adata.X; finished (0:00:00). Compute PCA and t-SNE#; We now reduce the dimensionality of the data by running PCA on the Pearson residuals. On top, we run t-SNE for vizualisation. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.pp.pca(adata, n_comps=50); n_cells = len(adata); sc.tl.tsne(adata, use_rep=""X_pca""). computing PCA; with n_comps=50; finished (0:00:27); computing tSNE; using sklearn.manifold.TSNE; finished: added; 'X_tsne', tSNE coordinates (adata.obsm) (0:00:12); computing PCA; with n_comps=50; finished (0:00:15); computing tSNE; using sklearn.manifold.TSNE; finished: added; 'X_tsne', tSNE coordinates (adata.obsm) (0:00:27). Compute Neighborhood graph and Leiden clustering#; Based on the PCA of Pearson resisuals, we also run a clustering. for adata in [adata_pbmc3k, adata_pbmc10k]:; sc.pp.neighbors(adata, n_neighbors=10, n_pcs=50); sc.tl.leiden(adata, flavor=""igraph"", n_iterations=2, directed=False). computing neighbors; using 'X_pca' with n_pcs = 50; finished: added to `.uns['neighbors']`; `.obsp['distances']`, distances for each pair of neighbors; `.obsp['",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html:25178,reduce,reduce,25178,en/stable/tutorials/experimental/pearson_residuals.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/experimental/pearson_residuals.html,1,['reduce'],['reduce']
Energy Efficiency," of nearest neighbors to be searched. If knn; is False, a Gaussian kernel width is set to the distance of the; n_neighbors neighbor.; ignored if ``transformer`` is an instance. n_pcs int | None (default: None)Use this many PCs. If n_pcs==0 use .X if use_rep is None. use_rep str | None (default: None)Use the indicated representation. 'X' or any key for .obsm is valid.; If None, the representation is chosen automatically:; For .n_vars < N_PCS (default: 50), .X is used, otherwise ‘X_pca’ is used.; If ‘X_pca’ is not present, it’s computed with default parameters or n_pcs if present. knn bool (default: True)If True, use a hard threshold to restrict the number of neighbors to; n_neighbors, that is, consider a knn graph. Otherwise, use a Gaussian; Kernel to assign low weights to neighbors more distant than the; n_neighbors nearest neighbor. method Literal['umap', 'gauss'] (default: 'umap')Use ‘umap’ [McInnes et al., 2018] or ‘gauss’ (Gauss kernel following Coifman et al. [2005]; with adaptive width Haghverdi et al. [2016]) for computing connectivities. transformer Union[KnnTransformerLike, Literal['pynndescent', 'sklearn', 'rapids'], None] (default: None)Approximate kNN search implementation following the API of; KNeighborsTransformer.; See Using other kNN libraries in Scanpy for more details.; Also accepts the following known options:. None (the default)Behavior depends on data size.; For small data, we will calculate exact kNN, otherwise we use; PyNNDescentTransformer. 'pynndescent'PyNNDescentTransformer. 'rapids'A transformer based on cuml.neighbors.NearestNeighbors. Deprecated since version 1.10.0: Use rapids_singlecell.pp.neighbors() instead. metric Union[Literal['cityblock', 'cosine', 'euclidean', 'l1', 'l2', 'manhattan'], Literal['braycurtis', 'canberra', 'chebyshev', 'correlation', 'dice', 'hamming', 'jaccard', 'kulsinski', 'mahalanobis', 'minkowski', 'rogerstanimoto', 'russellrao', 'seuclidean', 'sokalmichener', 'sokalsneath', 'sqeuclidean', 'yule'], Callable[[ndar",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.neighbors.html:11354,adapt,adaptive,11354,en/stable/api/generated/scanpy.pp.neighbors.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/api/generated/scanpy.pp.neighbors.html,1,['adapt'],['adaptive']
Energy Efficiency," out any clusters with high doublet scores. See also; Alternative methods for doublet detection within the scverse ecosystem are DoubletDetection and SOLO. You can read more about these in the Doublet Detection chapter of Single Cell Best Practices. Normalization#; The next preprocessing step is normalization. A common approach is count depth scaling with subsequent log plus one (log1p) transformation. Count depth scaling normalizes the data to a “size factor” such as the median count depth in the dataset, ten thousand (CP10k) or one million (CPM, counts per million). The size factor for count depth scaling can be controlled via target_sum in pp.normalize_total. We are applying median count depth normalization with log1p transformation (AKA log1PF). # Saving count data; adata.layers[""counts""] = adata.X.copy(). # Normalizing to median total counts; sc.pp.normalize_total(adata); # Logarithmize the data; sc.pp.log1p(adata). Feature selection#; As a next step, we want to reduce the dimensionality of the dataset and only include the most informative genes. This step is commonly known as feature selection. The scanpy function pp.highly_variable_genes annotates highly variable genes by reproducing the implementations of Seurat [Satija et al., 2015], Cell Ranger [Zheng et al., 2017], and Seurat v3 [Stuart et al., 2019] depending on the chosen flavor. sc.pp.highly_variable_genes(adata, n_top_genes=2000, batch_key=""sample""). sc.pl.highly_variable_genes(adata). Dimensionality Reduction#; Reduce the dimensionality of the data by running principal component analysis (PCA), which reveals the main axes of variation and denoises the data. sc.tl.pca(adata). Let us inspect the contribution of single PCs to the total variance in the data. This gives us information about how many PCs we should consider in order to compute the neighborhood relations of cells, e.g. used in the clustering function leiden() or tsne(). In our experience, there does not seem to be signifigant downside to over",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html:14980,reduce,reduce,14980,en/stable/tutorials/basics/clustering.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/tutorials/basics/clustering.html,1,['reduce'],['reduce']
Energy Efficiency,"#. the Gene Expression Analysis Resource U Maryland; the Galaxy Project for the Human Cell Atlas [tweet] U Freiburg; the Expression Atlas EMBL-EBI. Modalities#. RNA velocity#. scVelo Helmholtz Munich. Spatial Transcriptomics Tools#. squidpy Helmholtz Munich. Squidpy is a comprehensive toolkit for working with spatial single cell omics data. PASTE Princeton. PASTE is a computational method to align and integrate spatial transcriptomics data across adjacent tissue slices by leveraging both gene expression similarity and spatial distances between spots. bento 🍱 UC San Diego. Bento is an accessible Python toolkit for performing subcellular analysis of spatial transcriptomics data. Multimodal integration#. MUON and MuData EMBL/ DKFZ. MUON, and it’s associated data structure MuData are designed to organise, analyse, visualise, and exchange multimodal data.; MUON enables a range of analyses for ATAC and CITE-seq, from data preprocessing to flexible multi-omics alignment. Adaptive immune receptor repertoire (AIRR)#. scirpy Medical University of Innsbruck. scirpy is a scanpy extension to expore single-cell T-cell receptor (TCR) and B-cell receptor (BCR) repertoires. dandelion University of Cambridge. dandelion is a single-cell BCR-seq network analysis package that integrates with transcriptomic data analyzed via scanpy. Long reads#. Swan UC Irvine. Swan is a Python library designed for the analysis and visualization of transcriptomes, especially with long-read transcriptomes in mind.; Users can add transcriptomes from different datasets and explore distinct splicing and expression patterns across datasets. Analysis methods#. scvi-tools#. scvi-tools Berkeley. scvi-tools hosts deep generative models (DGM) for end-to-end analysis of single-cell; omics data (e.g., scVI, scANVI, totalVI). It also contains several primitives to build novel DGMs. Fate mapping#. CellRank Helmholtz Munich. CellRank is a framework to uncover cellular dynamics based on single-cell data.; It incorporates",MatchSource.WIKI,scverse,scanpy,1.10.2,https://scanpy.readthedocs.io/en/stable/ecosystem.html:11028,Adapt,Adaptive,11028,en/stable/ecosystem.html,https://scanpy.readthedocs.io,https://scanpy.readthedocs.io/en/stable/ecosystem.html,1,['Adapt'],['Adaptive']
