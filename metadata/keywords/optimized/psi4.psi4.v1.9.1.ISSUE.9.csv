quality_attribute,sentence,source,author,repo,version,id,keyword,matched_word,match_idx,wiki,url,total_similar,target_keywords,target_matched_words
Modifiability,"## Description; Accumulated docs improvements. Update samples. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add download/install notes for Windows; - [x] Update header and doc citation to JCTC article. Add licensing blurb.; - [x] Fix and document building plugins from conda on Mac; - [x] Make X2C input and output consistent. @fevangelista, is this what you wanted?; - [x] Fix `basisset_ = basisset_;` typo noticed by CDS; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go **Everyone**, stop review when you hit ""samples/""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/703:326,plugin,plugins,326,https://psicode.org,https://github.com/psi4/psi4/pull/703,1,['plugin'],['plugins']
Modifiability,"## Description; Accumulating changes here. ## Todos; * **Developer Interest**; - [x] AddOns: make resp an endorsed plugin; - [x] CMake: fix OMP option name. add `otool -L` parsing; - [x] CMake: refactoring this to psi4-dev, which it approximately depends on. Current is one layer of templating too many. ## Questions; - [x] Name & home of RESP plugin - shall be GH:cdsgroup/resp and `import resp`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1039:115,plugin,plugin,115,https://psicode.org,https://github.com/psi4/psi4/pull/1039,3,"['plugin', 'refactor']","['plugin', 'refactoring']"
Modifiability,"## Description; Add HF- and PBEh-3c capabilities, now that the former have been verified from Orca and the latter through S. Grimme private communications. ## Todos; * **Developer Interest**; - [x] gcp smoke tests going to pytest PR; - [x] write a bit of docs; - [x] So this is where my compare_values improvements ran off to. Now have a toggle to fail or not and can check mismatch by val, not just by order of magnitude value.; - [x] Add `gcp` interface, but not as advanced as `dftd3` b/c not writing to a file, just takes one of the pre-def values. ; * **User-Facing for Release Notes**; - [x] Semi-semiempirical methods HF-3c and PBEh-3c of Grimme can now be accessed (with `dftd3` and `gcp` executables detectable in PATH). Access through `energy('hf3c')` and `energy('pbeh3c')`. Can run with or without preferred basis set specified (minix and def2-msvp, respectively). ## Questions; * @dgasmith, this'll need a little adaption for 1.2. ## Status; - [x] Ready to go. Not averse to a squash.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/630:926,adapt,adaption,926,https://psicode.org,https://github.com/psi4/psi4/pull/630,1,['adapt'],['adaption']
Modifiability,"## Description; Add PSI_API to libmints/multipolesymmetry.h, so that it can support a version of v2rdm_casscf plugin. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1131:110,plugin,plugin,110,https://psicode.org,https://github.com/psi4/psi4/pull/1131,1,['plugin'],['plugin']
Modifiability,"## Description; Add cct3 plugin. Patch liboptions. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] add build connection, proc.py connection, and token smoke test; - [x] fix embarrassing bug where enum-like string options weren't validating when set in local scope. that is, `set guess nonsense` would protest, but `set scf guess nonsense` would pass. this isn't perfect as validation occurs against a union of allowed values among different local scopes, but it's an improving patch.; - [x] @edeustua is going to rename the repo to plain `cct3`, so this'll need a name adjustment pass.; - this is connected with https://github.com/piecuch-group/psi4_cct3/pull/2; - note that cct3 builds slowly as it has some hefty fortran files. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1934:25,plugin,plugin,25,https://psicode.org,https://github.com/psi4/psi4/pull/1934,1,['plugin'],['plugin']
Modifiability,"## Description; Added PSI_API macro to libqt/reorder_qt.cc functions and corresponding libqt/qt.h. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - Exposes libqt/reorder_qt() and libqt/reorder_qt_uhf() to plugins. ## Checklist; - [X] All or relevant fraction of full tests run. ## Status; - [X] Ready for review; - [X] Ready for merge. ## Comment; This seems pretty trivial, but I haven't made a PR in a long, long time...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1212:250,plugin,plugins,250,https://psicode.org,https://github.com/psi4/psi4/pull/1212,1,['plugin'],['plugins']
Modifiability,"## Description; Addresses #885 by refactoring N-Body driver to three newly independent functions, driven by the existing `nbody_gufunc()`:; - `build_nbody_compute_list()`: Builds list of all N-body computations to be performed; - `compute_nbody_components()`: Performs given N-body computation(s), could be exploited as pleasantly parallel; - `assemble_nbody_components()`: Stitches components back together into _bona fide_ N-body energies (currently standard behavior of N-body driver). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - Opportunity for ""pleasantly parallel"" N-body computations; * **User-Facing for Release Notes**; - UI to N-Body driver unchanged; - Standard N-body calls, e.g., `energy(..., bsse_type='cp')` retain current functionality via `nbody_gufunc()`. ## Questions; - [x] Docstring styleguide: For the new functions, should the docstrings be in NumPy format or should they look more like the docstring in `nbody_gufunc()` so that sphinxman can scrape them for the manual?. ## Checklist; - [x] Tests added for any new features (existing tests sufficient); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975:34,refactor,refactoring,34,https://psicode.org,https://github.com/psi4/psi4/pull/975,1,['refactor'],['refactoring']
Modifiability,"## Description; Adds a few classes to the PSI_API list so one of my plugins will run. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] plugins can access DFJK, PKJK, VBase, and BasisFunctions classes. ## Checklist; - [x] passes smoke, quicktests subsets of tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/981:68,plugin,plugins,68,https://psicode.org,https://github.com/psi4/psi4/pull/981,2,['plugin'],['plugins']
Modifiability,"## Description; Adds minao Br. Update CheMPS2 upstream. Remove Fort checking. Whiteli……st Cfour parallelism variable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove copied-in CMake CheckFortranCompilerFlag module now that min cmake is 3.3 which always provides it. Also echo-target, which was more of a devel utility.; - [x] Fixed the suggest-near-option-match for py3.; - [x] Whitelist CFOUR_NUM_CORES envvar for Cfour, closing psi4/psi4#661, fix `psi4 -s` not handling relpaths property with Cfour.; * **User-Facing for Release Notes**; - [x] Pull CheMPS2 from upstream v1.8.3-12, now that the lapack & hdf5 cmake target have been included upstream.; - [x] From Rob, add Br to cc-pvtz-minao.gbs; - [x] Adjusted the molecule name parsing in inputparser. Now allow practically any name through the `molecule ... {...}`, then test if valid Py object name, printing error msg if not. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/672:108,variab,variable,108,https://psicode.org,https://github.com/psi4/psi4/pull/672,1,['variab'],['variable']
Modifiability,## Description; Adds more CC variables and fixes docstring. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/711:29,variab,variables,29,https://psicode.org,https://github.com/psi4/psi4/pull/711,1,['variab'],['variables']
Modifiability,"## Description; Adds the tensors generated from the CC response code to the reference wave function, eventually to be included in the JSON output for a [QCEng](https://github.com/molssi/qcengine) run. Also patched CC-level dipoles and (static) quadrupoles in `proc.py` to be consistent with other naming conventions, allowing them to pass through `schema_wrapper.py`. This means that all (ground state, static) CC one-electron properties should follow the naming convention used on wfn. Old excited state (EOM) and dynamic property variables remain unchanged. . Updates to the schema wrapper to allow the other tensors though are coming in a separate PR. . ## Todos; - [x] Electric dipole polarizability tensor; - [x] Optical rotation (electric-dipole/magnetic-dipole) tensor; - [x] Electric dipole-quadrupole polarizability tensor (stored as three 3x3 components) (calculated through `roa.cc`); - [x] Patch CC dipole and (static) quadrupole QCVars; - [x] New pytest for all new QCVars; - [x] Update `cc46` to adhere to new ground state `psi4.core.variables()` names. ## Questions; - [x] `tests/pytests/test_qcschema.py` doesn't include any properties (yet). Are the existing returns of dipoles / quadrupoles in `schema_wrapper` tested anywhere? @loriab . ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) `ctest -L cc` comes clean.; - [x] New pytest `test_ccresponse.py` comes clean. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022:532,variab,variables,532,https://psicode.org,https://github.com/psi4/psi4/pull/2022,2,['variab'],['variables']
Modifiability,"## Description; All the basis set stuff that simply had to be done for 1.1 to be at least as capable as 1.0. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixes psi4/psi4#617; - From psi4/psi4#43, fixes; - [x] 1. `decontract` now py-side and signaled by `-decon`. This was done some time ago.; - [x] 2. `basis_rel` also now `basis_relativistic`, etc. Also some time ago; - [x] 3. user-def basis sets have names/handles and are recallable as shown in mints9 and python/mints9. docs corrected and elaborated on this point; - [x] 7. got taken out last fall, and its replacement has not been added.; - [x] 12. fixed up the basisset.rst docs; - [x] 14. covered by comments at 6; - [x] fixed mints9 and enabled symmetry detection to show through to C-side mol; - [x] assigned a rough zeta to most built-in basis sets. * **User-Facing for Release Notes**; - [x] Extends `basis <opt_name> {...}` blocks to PsiAPI via `psi4.basis_helper(name='mybas', key='DF_BASIS_JKFIT', block=""""""; assign ...; """""")`; - From psi4/psi4#43, fixes; - [x] 4. didn't try it on a `db()`, but basis blocks aren't anonymous and can be reused at will. Even `basis mybas {....}; energy('hf/mybas')`; - [x] 6. vastly improved basis printing by always printing file and line origin on each basis set load (called in the driver so no longer mass rebuilding of basissets). separated name into a name field that is the handle by which it can be recalled (that is, the BASIS* keyword value) and a composition that'll look like `aug-cc-pvdz + cc-pvdz + 6-31g`; - [x] 8. fixed. now if first-preference fitting basis not avail and orbitals basis is _known_ to be >quad-zeta, _won't_ default to def2-qz* fitting sets. ## Questions; - [ ] @WDerricotte, there was that decon example in the manual that we agreed was wrong. Can you fix that?; - [ ] PsiAPI folks: getting a lot of these ""helper"" functionals for processing input blocks: pcm_helper, basis_helper. Shall we settle o",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/649:924,Extend,Extends,924,https://psicode.org,https://github.com/psi4/psi4/pull/649,1,['Extend'],['Extends']
Modifiability,"## Description; Allow symmetry to be used in SCF, but then convert the symmetrized wavefunction to a desymmetrized (C1) format for use by non-symmetry-aware modules. ## Todos; * **Developer Interest**; - [x] Correct bug in D_subset_helper() and F_subset_helper() for nonsymmetric matrices; - [x] Refactor D_subset_helper() and F_subset_helper() to a generic matrix_subset_helper(); - [x] Implement Wavefunction::c1_deep_copy() function; - [ ] Update bassisset_ to be C1 inside c1_deep_copy() function; - [ ] Call the new c1 deep copy from the driver in the appropriate places. * **User-Facing for Release Notes**; - [ ] Allow symmetry to be used in SCF even when post-SCF module is C1-only. ## Questions; - [x] The wavefunction object has a bassiset_ member that needs to be updated to C1. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/737:296,Refactor,Refactor,296,https://psicode.org,https://github.com/psi4/psi4/pull/737,1,['Refactor'],['Refactor']
Modifiability,"## Description; As discussed, full circle — plugins are back in `tests/`. Also, removed old plugins that hadn't been maintained compilable. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] There was some dpd code deleted that possibly shouldn't fade out of memory, in case we ever want a dpd plugin again.; - [x] `ctest -L plug` works same as before.; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/640:44,plugin,plugins,44,https://psicode.org,https://github.com/psi4/psi4/pull/640,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; As is says in the title.; I've added a quicktest for PE-ADC(1) such that we catch issues like this directly from now on... adcc 0.15.9 introduced a breaking change in the environment parameter handling, I've adapted the existing test accordingly. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2393:224,adapt,adapted,224,https://psicode.org,https://github.com/psi4/psi4/pull/2393,1,['adapt'],['adapted']
Modifiability,"## Description; As it turns out I need these for an upcoming project so I started looking into them. This was quite a hurdle with @andysim rederiving the equations and worked on this in parallel. In the end a simple line fix in `eribase.cc` would have fixed this. There are quite a few simplifications that were due to desperation of trying to find the error. These can be removed, but I think this enhances the clarity of the GradDFJK code. Happy to go either way. Fixes #867 . Psi4NumPy script can be found [here](https://gist.github.com/dgasmith/999f5a100e38968457898ecb1e2c22fe). ## Todos; - [x] UKS Gradients need re-fixing. Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Enables range-seperated gradients for density fitting JK objects. ## Questions; - [x] @andysim @jturney Are the `eribase.cc` tweaks fine?. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1043:399,enhance,enhances,399,https://psicode.org,https://github.com/psi4/psi4/pull/1043,1,['enhance'],['enhances']
Modifiability,"## Description; As the title says, plus some preparatory work for solvated response (but not yet implemented or tested). ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The interface towards the pyddx library for continuum solvation is extended by support for the linearized Poisson-Boltzmann model (LPB). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:361,extend,extended,361,https://psicode.org,https://github.com/psi4/psi4/pull/2918,1,['extend'],['extended']
Modifiability,## Description; As the title says: calls to `conda config` are not saved in the cache. It works!. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1423:51,config,config,51,https://psicode.org,https://github.com/psi4/psi4/pull/1423,1,['config'],['config']
Modifiability,"## Description; Assigning an int to an array variable accepts it as a one-item array, rather than throwing a fit. @robertodr, this should work for https://github.com/psi4/psi4/pull/1814#issuecomment-642655962. Feel free to just incorporate these lines into your TDDFT PR. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1927:45,variab,variable,45,https://psicode.org,https://github.com/psi4/psi4/pull/1927,1,['variab'],['variable']
Modifiability,## Description; Because @huangm29 needs the SVD function plugin-exposed for Forte purposes. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2585:57,plugin,plugin-exposed,57,https://psicode.org,https://github.com/psi4/psi4/pull/2585,1,['plugin'],['plugin-exposed']
Modifiability,## Description; Breaks off documentation and `.travis.yml` linting off of #809. I have added a `.pre-commit-config.yaml` that will check for:; - Filenames that would conflict on a case-insensitive filesystem; - Files that contain merge conflict strings.; - Python formatting with YAPF.; - C++ formatting with clang-format. Hooks are **opt-in** and require you to install [`pre-commit`](https://pre-commit.com/) (with pip or conda) and then run `pre-commit install` to integrate the actual hooks. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Document code style and how to enforce it.; - [x] Add `.pre-commit-config.yaml` and explain how to use it.; - [x] Use build stages on Travis and lint/clean up `.travis.yml` . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1594:108,config,config,108,https://psicode.org,https://github.com/psi4/psi4/pull/1594,2,['config'],['config']
Modifiability,## Description; Bug fix. Exports missing `MP3 TOTAL ENERGY` variable for `mp2.5` calculations. Expected by the `cbs` driver function. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1707:60,variab,variable,60,https://psicode.org,https://github.com/psi4/psi4/pull/1707,1,['variab'],['variable']
Modifiability,"## Description; Bump some dependencies. Update psi to pybind11 2.2.1. Deal accompanying visibility issues through Jet's `PSI_API` macro. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CheMPS2 to 1.8.4; - [x] ~Libint to latest v1 head~ (RDR already covered this); - [x] Pybind11 to 2.2.1; - [x] had to add some psio unsavoriness (recomputing integrals whether present or not) since pb11-221 won't seem to give me my `None` for `nullptr`. This only affects stability analyses, and I figure they're due for an overhaul anyways.; - [x] add enough `PSI_API` to get shipped plugins to work.; * **User-Facing for Release Notes**. ## Questions; - [ ] Big question here is do we want to make the pybind jump?. * Not immediately until https://github.com/pybind/pybind11/issues/1121 is cleared up; * Likely to cause some building headaches and entanglements of 200 and 221 versions at build-time, no matter how tightly I try to instruct CMake where to find it.; * Pybind folks are [pretty adamant about symbol visibility](http://pybind11.readthedocs.io/en/stable/upgrade.html#stricter-enforcement-of-hidden-symbol-visibility-for-pybind11-modules). We do something they truly disapprove of and use pb as a plain dependency rather than their (very nice) module maker, so I think our plugins (double use of `core.so` as python module and ordinary Linux lib) should be fine, but we'll want to test Forte, @fevangelista.; * Can take a look at the [Changelog](http://pybind11.readthedocs.io/en/stable/changelog.html) for new goodies. Note that Psi4 is currently pinned at v2.0.0 (1 Jan 2017).; * When @ryanmrichard was dealing with two pybind projects (Psi4, Pulsar), he came to the conclusion that it was very important to have all pybind projects on exactly the same version. Right now we control all ecosystem projects using pybind (Psi4, Forte, PylibEFP (which needs >=2.2.0, incidentally)) so can just made decisions in consensus. That may not a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814:636,plugin,plugins,636,https://psicode.org,https://github.com/psi4/psi4/pull/814,1,['plugin'],['plugins']
Modifiability,"## Description; Bump the QCA stack. qcng 0.6.3 is minted but doesn't exist on c-f yet, so this'll be a nice test of does it do internal build. Some tools (LGTM) won't `git clone`, so switching remaining upstreams to URL, which thanks to GH is as flexible as `GIT_TAG`. Also, fix some cfour interface issues, fix some deprecationwarnings, and add mp2d to smoke tests. ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1577:246,flexible,flexible,246,https://psicode.org,https://github.com/psi4/psi4/pull/1577,1,['flexible'],['flexible']
Modifiability,"## Description; Ca & Ga-Kr basis set fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extend non-additivity from cc-pwCVXZ to cc-pCVXZ; * **User-Facing for Release Notes**; - [x] Repair Ca cc-pCV5Z (and 5+d) from Peterson's website (wrong on EMSL); - [x] Add Ca cc-pwCV5Z (and 5+d) from Peterson's website; - [x] Extend Ga-Kr basis and polarization for 6-31G. <img width=""1096"" alt=""screen shot 2017-08-23 at 12 08 07 am"" src=""https://user-images.githubusercontent.com/2314730/29598495-38232b30-8797-11e7-8f76-a8d5349ecd4a.png"">. ## Questions; - [x] @CDSherrill may want to examine. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/788:159,Extend,Extend,159,https://psicode.org,https://github.com/psi4/psi4/pull/788,2,['Extend'],['Extend']
Modifiability,"## Description; Calculates exchange terms in a single tensor rather than contracting and adding. Reduces the cost of contractions against SCF coefficients in range separated DFT. Changes the working equation for calculating the coulomb matrix in range separated DFT calculations. This lowers the number of tensors that Psi4 needs to store, reducing memory costs and extending the number of cases operable by DFHelper. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Extend formulations to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1911:366,extend,extending,366,https://psicode.org,https://github.com/psi4/psi4/pull/1911,2,"['Extend', 'extend']","['Extend', 'extending']"
Modifiability,"## Description; Change of FINDIF to be metadata based per #1148, task one, and qcdb molecule compatibility per #1148, task two. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change finite difference code to use metadata.; - [x] Fixes bugs #1296 and #1306.; - [x] Reap/Sow code removed. ## Questions; - [x] How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere.; - [x] Are we all agreed on the metadata style? The things I've left undone are going to depend heavily on any additional metadata changes. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests); - [x] Implement the changes to all four finite difference functions: empirical dispersion, hessian by gradients, hessian by energies, gradient by energies.; - [x] Polish the resulting code. In particular, there are a few variables taken from the initialization `data` that should probably be taken from `metadict` instead. For the compute functions, it should only need the barest skeleton of the current initialization call. Depending on other revisions, I may want to create a separate initialization function for the compute functions.; - [x] Modify the reap/sow cookbooks to work.; - [x] Make this compatible with QCDB molecules. To do this _correctly_, we need CdSalc tech reproduced in QCDB. Better to just coerce the QCDB molecule for now.; - [x] Remove the optimization side reap/sow code. ## Status; - [x] Ready for review; - [x] Ready for merge.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289:1006,variab,variables,1006,https://psicode.org,https://github.com/psi4/psi4/pull/1289,1,['variab'],['variables']
Modifiability,"## Description; Change the Psi4 driver from being recursive to being based on compute classes that have planning, computing and querying functions. Then, integrate the new driver with the QCArchive project for parallelizing nbody, CBS and findif. Don't panic -- 55k of the lines added are an output.ref. See #1351 for history and bite-sized extractions. What's left here is the gory core. Because code is moving around, there's no good way to review it. The plain code file is often easier to read than the diff. Below are the 6 key files.; * `driver.py` — mostly deletions. notice that the main e/g/h functions instead of having several layers when you enter and ""bounce"" to other fns now have a single plan/compute/proceed-to-analytic decision step.; * `task_planner.py` — new file. all that complexity of figuring out which of cbs/findif/nbody are active (including simple things like `energy(""mp2/cc-pvdz"")` parsing) has landed here. at least it's no longer repeated in several functions. the main goal is to take user info from where user is accustomed to supplying it (options or kwargs) and use it to initialize a tree of ""computers"" whose leaves are all AtomicComputers (analytic single-points). you can see some examples of the planner's work in `tests/pytests/test_task_planner.py`; * `task_base.py` — new file. fairly simple. how to store the pieces of a single job in a qcschema AtomicInput and how to call qcengine to run psi4 (in api, not cli, mode) to turn that into an AtomicResult. all jobs that aren't analytic single-points pass through this file.; * `driver_findif.py` — moderately modified, mostly additions. this is the least-changed wrapper. a pydantic class has been added to link the planning and assembly steps instead of a function and code that used to live in driver.py. the main idea for wrappers is that everything should be generic python except for translation from qcschema to psi4.wfn at the end (finidf does poorly in this b/c salcs call libmints). at the top of th",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:638,layers,layers,638,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['layers'],['layers']
Modifiability,"## Description; Cleans up CMake so that external dependencies can be linked to libraries in `psi4/src/psi4` and then inherited by `core` without invoking `target_link_libraries`/`target_include_directories` again. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Bump CMake minimum requirement to 3.8; - [x] Rewrote `psi4_add_module` CMake macro. Now it takes `bin` or `lib` argument, name of module, and list of sources. Note that the macro:; - Now defines **two** global lists of libraries `core` will link to, one for `bin`s and one for `lib`s. This is needed because `lib`s need to appear last in the link line to avoid missing symbols.; - Sets source file properties to generate position-independent code with symbols hidden by default.; - [x] Rewrote downstream `CMakeLists.txt` so that: ; - Sources are in a list, with one source file per line, for easier diff inspection.; - External dependencies are linked where they are used first.; - [x] Reordered `include`s in _some_ files according to the hierarchy: ; - For class implementation sources: header corresponding to current source file first (_.i.e._ `#include ""myself.h""` in `myself.cc`); - C++ standard headers, including `<omp.h>`; - Psi4 higher-level headers, _i.e._ `psi4/psifiles.h` &co.; - Psi4 headers in subdirectories _i.e._ `psi4/libmints/matrix.h` &co.; - Headers in current directory _without full path_.; - [x] `psi4/src/psi4/liboptions/liboptions_python.h` moved to `psi4/src/python_data_type.h` and ; `psi4/src/psi4/liboptions/python.cc` moved to `psi4/src/python_data_type.cc`. These are now compiled and linked as part of `core`, rather than `liboptions`. ## Questions; I note that `mrcc.cc` and `civect.h` include `pybind11.h`. It might be a good idea to move those bindings one level up, directly into `core` without spreading the dependency too deep in the code. Opinions?. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full te",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1358:117,inherit,inherited,117,https://psicode.org,https://github.com/psi4/psi4/pull/1358,1,['inherit'],['inherited']
Modifiability,"## Description; Cleanup `ccenergy/rotate.cc`. There's more cleanup to do, but this is a sufficiently large algorithm change that I'm breaking up the PR here. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `ccenergy/rotate` return type changed to `bool`; - [x] Orbital rotation uses newer `libmints` tech for greatly reduced LoC; - [x] Gets rid of the last bit of code in `ccenergy` that needs to map between QT and Pitzer ordering. I'll leave it to a future PR to eject that from `ccenergy` permanently; - [x] Replaces yet more `MOInfo` variable access with wavefunction variable access. ## Checklist; - [x] `cc15` and `cc16` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2719:597,variab,variable,597,https://psicode.org,https://github.com/psi4/psi4/pull/2719,2,['variab'],['variable']
Modifiability,"## Description; Closes #1692 and adds some of those examples as test cases. The heart of the PR is that MOM no longer sets the iteration number to 0, which would triggered logic resetting some wavefunction variables. ## Todos; - [x] Fixes a bug where MOM could clear all electrons. ## Questions; - [x] The new tests take about 20 seconds. Do you want me to reduce the basis set size, to speed this up?. ## Checklist; - [x] Tests added for newly working features; - [x] `scf` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2270:206,variab,variables,206,https://psicode.org,https://github.com/psi4/psi4/pull/2270,1,['variab'],['variables']
Modifiability,"## Description; Closes #1872. . CEPA Conventions Now:; `dct`: Does not know about CEPA(0), per #1873 ; `occ`: Every use of CEPA or CEPA(0) is now converted to LCCD. The section header and the final results section include [CEPA(0)] in parentheses. The same applies to the orbital optimized methods. The string ""OCEPA"" is still used internally as a wavefunction type when referring to LCCD, but that part of `occ` could use refactoring anyways, so I'm not going to spend the time to change it for something that relatively minor.; `dfocc`: Unchanged, because it always said `lccd` anyways. Bozkaya changed his preferred name for the method from CEPA to LCCD between `occ` and `dfocc`; `fnocc`: For consistency with the other CEPA methods, this still uses CEPA(0) to refer to both LCCD and LCCSD for the final results, but the start of the computation writes out Linearized CCD or Linearized CCSD.; Driver: This is unchanged. `cepa(0)` means LCCSD. Obligatory ping to notify @edeprince3. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Standardizes CEPA terminology in Psi output. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1909:423,refactor,refactoring,423,https://psicode.org,https://github.com/psi4/psi4/pull/1909,1,['refactor'],['refactoring']
Modifiability,"## Description; Closes #2192 : a correctness error in threaded correlated DF gradients accidentally introduced during my refactoring. I recommend making a new release candidate sooner rather than later. Sorry, Lori. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Fix DF gradient paralellization error . ## Lessons Learned; - [ ] We could _really_ use a threaded pass of quicktests as part of the test suite; - [ ] The difficulty of compiling Psi4 can be a bottleneck in the dev process. In particular, the instructions to get Psi source-compiled on Linux don't work out of the box, and Mac clang compilers are still choking on programs that are five lines of code. ## Checklist; - [x] Threaded quicktests pass. @hokru found the only failure was the bug which this PR fixed, and the failing test cases pass now. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2193:121,refactor,refactoring,121,https://psicode.org,https://github.com/psi4/psi4/pull/2193,1,['refactor'],['refactoring']
Modifiability,"## Description; Compiler gave me warnings below, so I tried to patch 'em up.; ```; [ 8%] Building CXX object src/psi4/libmints/CMakeFiles/mints.dir/oeprop.cc.o; /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1047): warning #161: unrecognized #pragma; #pragma openmp parallel for; ^. /home/psilocaluser/gits/hrw-release/psi4/src/psi4/libmints/oeprop.cc(1063): warning #823: reference is to variable ""i"" (declared at line 1048) -- under old for-init scoping rules it would have been variable ""i"" (declared at line 1057); (*output)[i] = Vtot;; ^; ```. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1217:411,variab,variable,411,https://psicode.org,https://github.com/psi4/psi4/pull/1217,2,['variab'],['variable']
Modifiability,"## Description; Conda and management docs, various fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Much addition and modernizing of conda, management, versioning docs; - [x] Allows, I expect, building plugins from conda on Mac; * **User-Facing for Release Notes**; - [x] Fixes `set properties_origin [""COM""]` error noticed by @lazaroid [here](http://forum.psicode.org/t/set-properties-origin-currently-broken-for-com-or-variables-as-values/503). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/689:275,plugin,plugins,275,https://psicode.org,https://github.com/psi4/psi4/pull/689,2,"['plugin', 'variab']","['plugins', 'variables-as-values']"
Modifiability,"## Description; Continues from psi4/psi4#850 in getting sns-mp2 integrated into psi as an endorsed plugin. Also various infrastructure additions to accommodate downstream and python projects. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] First downstream project buildable during superbuild; - [x] First pure python project buildable during superbuild. That is, `setup.py`, not `addonConfig.cmake`, so opt-in/detect-from machinery a lot shakier. Have to use FindPythonModule adapted from internet, rather than sturdy `find_package()`. For where-module?, relying totally on :envvar:PYTHONPATH. Seems to be behaving sensibly, but report oddities.; - [x] Add some dev docs for how to do workflows with addons; - [x] Adapt some snsmp2 test to work with psi ctest and pytest; - [x] Fix up tests/pytest/test_numpy_views so that it runs with pytest and doesn't interfere when `memory_profiler` not installed; - [x] ~Until https://github.com/DEShawResearch/sns-mp2/pull/2 goes in, pulling from my fork~; - [x] Adds some (mildly tested) versioning capabilities to FindPythonModule; * **User-Facing for Release Notes**; - [x] Enable [sns-mp2](https://github.com/DEShawResearch/sns-mp2) to be built at build-time via `cmake -DENABLE_snsmp2=ON`. Can also detect it if you put an external snsmp2 in PYTHONPATH (but as it's an optional runtime dependency, latter's only really useful for testing); - [x] Fix nasty bug that made the number of points computed for cube file dependent on rounding error. Could show up as differences in cube files btwn compilers. Tightened down cubefile checking. ## Questions; - [x] @rmcgibbo, I'd still like to know about getting the version from the imported plugin. Also, it'd be nice to get pytest in the sns-mp2 repo working in its own right.; - [x] @shannonhouck, there'll probably be a few more docs to add, if you don't mind. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/865:99,plugin,plugin,99,https://psicode.org,https://github.com/psi4/psi4/pull/865,4,"['Adapt', 'adapt', 'plugin']","['Adapt', 'adapted', 'plugin']"
Modifiability,## Description; Discovered while poking around `wavefunction.h` for the ongoing `libtrans` refactor. 150 less lines of code with no effort sounds good to me. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removed dead code. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1766:91,refactor,refactor,91,https://psicode.org,https://github.com/psi4/psi4/pull/1766,1,['refactor'],['refactor']
Modifiability,## Description; Drop string expansion of variables which breaks down when they are empty strings.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/652:41,variab,variables,41,https://psicode.org,https://github.com/psi4/psi4/pull/652,1,['variab'],['variables']
Modifiability,"## Description; During the 'inversion' we accumulated some duplicate machinery for handling basis sets in the C++ and Python sections of the code; this PR aims to streamline the process. My goal is to keep the flexible Python parser, have it create a Python ShellInfo object, and use that to pass fixed-format information into the C++ basis set construction routines. The superfluous code in the Python and C++ layers should then be nuked. I also want to clean up the horrible mess I made when implementing ECPs. Very much a work in progress with feedback welcomed, especially from @loriab, @jturney and @rmcgibbo. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Pass pre-formatted data structure to C++ basis set constructor.; - [x] Get rid of unused `center` info from ShellInfo and GShell.; - [x] Remove unneeded code:-; - [x] C++ basis set parser.; - [x] Python GaussianShell.; - [x] C++ ShellInfo.; - [x] Tolerate integers where floats are expected in basis set input.; - [x] Fold ECPs into BasisSet objects.; * **User-Facing for Release Notes**; - [x] Fixed bug that prevented integers in basis set exponents/coefficients from being handled correctly, and another that truncated them to 8 digits after the decimal. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/734:210,flexible,flexible,210,https://psicode.org,https://github.com/psi4/psi4/pull/734,2,"['flexible', 'layers']","['flexible', 'layers']"
Modifiability,"## Description; ECP basissets, counter, AM lookup. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Fixed some `****` around ECP that weren't situated so as to satisfy our picky parser; - [x] Fixed unititialized ECP printing counter variable noticed by @fevangelista ; - [x] Extended dict looking up ECP AM noticed by @fevangelista ; * **User-Facing for Release Notes**; - [x] Add `ao_efp_multipole_potential` and `electric_field` integrals to mintshelper. ## Questions; - [ ] Should we suppress [this printing](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/ecpint.cc#L500)? or redirect to outfile?; - [ ] Should consider origin question with mintshelper. Some ints use the PROPERTIES option to set origin. Just added ints take origin as an arg. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/790:299,variab,variable,299,https://psicode.org,https://github.com/psi4/psi4/pull/790,2,"['Extend', 'variab']","['Extended', 'variable']"
Modifiability,"## Description; Enable v2rdm_casscf build from psi4. Add tests. This gets Eugene's renovated 0.5 plugin that now has gradients working again with psi4. Suppresses the plugin ""module loaded"" text since that command isn't called directly anymore and the text was interfering with CMake by corrupting the cache. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/866:97,plugin,plugin,97,https://psicode.org,https://github.com/psi4/psi4/pull/866,2,['plugin'],['plugin']
Modifiability,"## Description; Enables plugin gpu_dfcc as external plugin compiled with psi4. ## Todos; * **User-Facing for Release Notes**; - [x] enables GPU-accelerated DF-CCSD. ## Checklist; - [x] tests comparing energies from DF-CCSD and GPU DF-CCSD -- present in psithon and psiapi; - [x] check for NVIDIA compilers and skip compilation if they are missing -- no need since user's `ENABLE_gpu_dfcc=ON` means build-or-die-trying; - [x] For `ENABLE_gpu_dfcc=ON` and built, on a sys w/o GPUs, cmake tests will fail, pytest test will skip. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997:24,plugin,plugin,24,https://psicode.org,https://github.com/psi4/psi4/pull/997,2,['plugin'],['plugin']
Modifiability,## Description; Enhances user experience for DF-CCSD(T) gradients. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] timings for DF-(T) gradient (copied from fnocc module); - [x] corrects ijk count for gradient (full combination instead of unique pairs). ## Checklist; - [x] relevant tests run (dfccsd-t-grad1). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1241:16,Enhance,Enhances,16,https://psicode.org,https://github.com/psi4/psi4/pull/1241,1,['Enhance'],['Enhances']
Modifiability,"## Description; Exports Boys localization for plugins. ## Checklist; - [X] ""smoke"" tests pass. ## Status; - [X] Ready for review; - [X] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1026:46,plugin,plugins,46,https://psicode.org,https://github.com/psi4/psi4/pull/1026,1,['plugin'],['plugins']
Modifiability,"## Description; Exports intermediate energies computed within N-Body driver to psivars named `N-BODY {cluster-identity} TOTAL ENERGY` for workflow incorporation and sanity-checking. Convention for `cluster-identity`: `(monomer_tuple)@(basis_tuple)` enumerates the particular monomers involved in the cluster computation in `monomer_tuple`, and enumerates the basis set used within the cluster computation in `basis_tuple`. In this way, ghost monomers are easily identified as any fragment with basis functions (included in `basis_tuple` not present in `monomer_tuple`. For example,; ```; ""N-BODY (1, 2)@(1, 2, 3) TOTAL ENERGY"" => -529.655058639489; ```; indicates that the total energy for the fragment (1, 2) in basis set (1, 2, 3) is -529.66 [Eh]. . ## Todos; - [x] Variable documentation (pending notation consensus, see questions below). Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Psivar export of intermediate energies in N-Body for workflow integration. ## Questions; - [ ] Is the cluster identification syntax described above suitably intuitive? Should the `@` symbol be replaced with another, perhaps `:`, to remove potential confusion with ghost atoms notation in the molecule block?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952:768,Variab,Variable,768,https://psicode.org,https://github.com/psi4/psi4/pull/952,1,['Variab'],['Variable']
Modifiability,"## Description; Exports symbols for my tutorial plugins, some private plugins, and gpu_dfcc. * **User-Facing for Release Notes**; - [x] GPU-DFCC plugin (https://github.com/edeprince3/gpu_dfcc) will compile and run. ## Checklist; - [x] quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/992:48,plugin,plugins,48,https://psicode.org,https://github.com/psi4/psi4/pull/992,3,['plugin'],"['plugin', 'plugins']"
Modifiability,## Description; Expose P::e.options in Python and enable pure pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/720:71,plugin,plugins,71,https://psicode.org,https://github.com/psi4/psi4/pull/720,1,['plugin'],['plugins']
Modifiability,## Description; Exposes `FittingMetric` to plugins for one of @fevangelista's students. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2420:43,plugin,plugins,43,https://psicode.org,https://github.com/psi4/psi4/pull/2420,1,['plugin'],['plugins']
Modifiability,## Description; Exposes options class functions necessary for pybind11 plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/725:71,plugin,plugins,71,https://psicode.org,https://github.com/psi4/psi4/pull/725,1,['plugin'],['plugins']
Modifiability,"## Description; FINDIF's geometry generator is brought Py-Side, per [#884](https://github.com/psi4/psi4/issues/884). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Geometry generators are now unified, so we don't need to edit all three generators when one is bugged.; - [x] Various PyBinding has been done. Among other things, the new Py-side compute_atom_map function from pyvib2 now works with psi4 molecules.; - [x] Fixes a bug in the `CharacterTable` copy constructor member initialization list, which used to require a string to be an integer.; - [x] Fixes a bug in vibrational analysis where the zero K enthalpy variable was misspelled.; - [x] Getting geometries for finite difference calculations is now Py-side.; - [x] Computing gradients from energies is now Py-side.; - [x] Computing hessians from gradients is now Py-side.; - [x] Computing hessians from energies is now Py-side.; - [x] Finish renaming the finite difference functions.; - [x] Overly picky changes for consistent style and commenting.; - [x] Review the findif test suite and add any tests as needed.; - [x] Add the banner.; - [x] Remove old FINDIF code (after migrating to attic).; - [x] Removed the C-side gradient writer.; - [x] Added several new gradient writing formats.; * **User-Facing for Release Notes**; - [x] A warning now displays if you attempt to access-by-index or iterate over an irreped object, instead of using a NumPy accessor.; - [x] Gradients can now be written, even for analytic hessians.; - [x] The .grad file will now only write the latest hessian. ## Questions; - [x] I had to change the internals of SymmetryOperation to make PyBind happy. I trust there are no objections?; - [x] Since pyvib2 made hessian writing no longer FINDIF's responsibility, shall I make gradient writing no longer FINDIF's responsibility as well? Then `comp_grad_from_hess` could return a Numpy array, like the `comp_hess_from_X` functions. ## Checklist; -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024:686,variab,variable,686,https://psicode.org,https://github.com/psi4/psi4/pull/1024,1,['variab'],['variable']
Modifiability,"## Description; Fix a minor logic error in DLPNO-MP2 code, where Mulliken charges are used for determining local density fitting domains, also cleans up variable names (removes underscores from variables that are not instance variables). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2707:153,variab,variable,153,https://psicode.org,https://github.com/psi4/psi4/pull/2707,3,['variab'],"['variable', 'variables']"
Modifiability,## Description; Fix a stupid typo from DIIS refactor. Needed to prevent a crash in Forte. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2441:44,refactor,refactor,44,https://psicode.org,https://github.com/psi4/psi4/pull/2441,1,['refactor'],['refactor']
Modifiability,"## Description; Fixes #1290 by wrapping calls to deprecated (and removed in Netlib's LAPACK 3.8.0) with appropriate replacements. **UPDATE**; I have added a `PSI_DEPRECATED` macro in `pragma.h` to be used to deprecate functions, classes, variables. It will emit a warning at compile-time. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added a `PSI_DEPRECATED` macro; - [x] Wrap call to `DGEGS` with `DGGES`. Deprecate `C_DGEGS`.; - [x] Wrap call to `DTZRQF` with `DTZRZF`. Deprecate `C_DTZRQF`.; - [x] Wrap call to `DGEGV` with `DGGEV`. Deprecate `C_DGEGV`; - [x] Wrap call to `DGELSX` with `DGELSY`. Deprecate `C_DGELSX`; - [x] Wrap call to `DGEQPF` with `DGEQP3`. Deprecate `C_DGEQPF`; - [x] Check whether `DGGSVD3` and `DGGSVP3` are available in `tgt::lapack`. Fence off their use accordingly based on the `LAPACK_HAS_DGGSVD3` and `LAPACK_HAS_DGGSVP3` preprocessor variables, respectively. ; - [x] Wrap call to `DGGSVD` with `DGGSVD3`, if the latter is available. Deprecate `C_DGGSVD`.; - [x] Wrap call to `DGGSVP` with `DGGSVP3`, if the latter is available. Deprecate `C_DGGSVP`. ## Checklist; None of these subroutines were used in Psi4, so I only ran smoketests locally.; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge **SQUASH**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314:238,variab,variables,238,https://psicode.org,https://github.com/psi4/psi4/pull/1314,2,['variab'],['variables']
Modifiability,"## Description; Fixes #1370 and cleans up some code relating to orbital occupations. `scf_iterator.py` is yapf-ified, the occupation printing code is now Py-side, and two variables specifying the same thing (`nirreps` and `nirrep_`) in the HF initialization have been condensed into a single variable. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] An error message is now raised when the electron count from DOCC and SOCC is inconsistent with the molecule's electron count. ## Checklist; - [x] `scf` and `findif` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1637:171,variab,variables,171,https://psicode.org,https://github.com/psi4/psi4/pull/1637,2,['variab'],"['variable', 'variables']"
Modifiability,"## Description; Fixes #719 by changing the `name` that's passed to the C++ BasisSet constructor. It used to be like `file /path/to/basis/set.gbs`, but that it very tricky to read the basis set name from a dumped wavefunction and reinstantiate the basis set. For built-in basis sets, it's not too bad -- we can just [parse the string](https://github.com/psi4/psi4/blob/9d1564e67837bbf7f348c1600aa2c353457671ec/psi4/driver/procrouting/proc.py#L1295). For custom basis sets that assign different basis sets to different atoms, that string ends up as a `'+'`-delimited list of gbs files, which isn't information preserving. @andysim: if you're going to rewrite this stuff anyways, it might not be worth merging this. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721:649,rewrite,rewrite,649,https://psicode.org,https://github.com/psi4/psi4/pull/721,1,['rewrite'],['rewrite']
Modifiability,"## Description; Fixes a bug in the semicanonicalization procedure cause by an uninitialized matrix. This also exposes a `set_Lagrangian` in the `Wavefunction` class, which is needed to make gradients work for plugins not based on `Wavefunction`. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1847:209,plugin,plugins,209,https://psicode.org,https://github.com/psi4/psi4/pull/1847,1,['plugin'],['plugins']
Modifiability,"## Description; Fixes up the OpenMP problems. This still needs some tidying, but you can start to take a look. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Mostly this polishes the new OpenMP/Math interface/detection by expanding it to C/CXX/Fortran (thanks, v2rdm, for playing your persistent role of complicating things) and making sure vars are propagated among the externalprojects. Key cmake option is `OpenMP_LIBRARY_DIRS` which is a `;`-sep PATH-like var to search for omp libs if not naturally found. closes #1041 ; - [x] fix a few DISK_DF in driver and add some long-awaited (really, look at the milestone history for that ticket) freq docs in #350 ; - [x] fatal_error's ERD; - [x] bump various upstream/downstream; - [x] get ambit back (can't readily test it except by building plugin). ## Questions; - [x] Roberto and Radovan should look over the CMake. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1053:858,plugin,plugin,858,https://psicode.org,https://github.com/psi4/psi4/pull/1053,1,['plugin'],['plugin']
Modifiability,"## Description; Follow-up PR to #2359. This PR implements the direct-density fitted J algorithm (https://pubs.rsc.org/en/content/articlelanding/2002/cp/b204199p) to be used with LinK to allow for performance gains. A new code infrastructure is also introduced that allows for split J/K build algorithms, through the Composite JK class (not callable by user, but a reroute by the developer). Example of how to call my new code:; ```; scf_type direct_df_linK; ```. ### NOTES:; - Composite JK will be extended with other Split JK algorithms in the future (CFMM @andyj10224, and Chain-of-Spheres K @zachglick). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Introduction of Composite JK class; - [x] Implementation of Direct-DF-J algorithm; - [x] Refactor of LinK algorithm into Composite JK framework. ## Questions; - [x]. ## Checklist; - [x] Tests added for any new features; - [x] Docs added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. ## Table of Contents (Suggested Review Order); ### 1.) LinK Refactor; - [Removal of LinK from DirectJK](https://github.com/psi4/psi4/pull/2543#discussion_r848777136); - [LinK Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848776564); - [New Home of LinK Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848777810). ### 2.) DirectDFJ Algorithm; - [DirectDFJ Header File](https://github.com/psi4/psi4/pull/2543#discussion_r848778214); - [Home of DirectDFJ Algorithm](https://github.com/psi4/psi4/pull/2543#discussion_r848778585). ### 3.) CompositeJK Structure; - [CompositeJK Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779185); - [SplitJK Base Class Header Information](https://github.com/psi4/psi4/pull/2543#discussion_r848779584); - [Calling my code from jk",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:498,extend,extended,498,https://psicode.org,https://github.com/psi4/psi4/pull/2543,2,"['Refactor', 'extend']","['Refactor', 'extended']"
Modifiability,"## Description; Get Ambit back. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] This includes some changes I salvaged from the old clean-python branch.; - [x] Ambit builds with `ENABLE_ambit` as directed from the `external/upstream/ambit/CM`.; - [x] Ambit _does not_ link into Psi4, as Psi4 doesn't use it. So it's more like Psi4's build system carries it along.; - [x] The ambit plugin template _is_ in working build order (if you check out the plugin manually; the skeleton plugins are _not_ in working order). It detects the ambit package and links it in. It _doesn't_ however run. See error below that I bet @jturney can patch up in no time.; - [x] This is associated with branch `cmakelab2` in the main Jet ambit repo. If you haven't already hunted it down, below is the way to work on psi4 repo and ambit repo locally simultaneously. ```; #GIT_REPOSITORY https://github.com/jturney/ambit; #GIT_TAG cmakelab2; DOWNLOAD_COMMAND """"; SOURCE_DIR ""/path/to/ambit-directclone""; ```. * **User-Facing for Release Notes**. ## Questions; - [x] This is not ambit in full working order. This is ambit reintegrated to the point that ambit people can patch it up a bit and return it to full working order. ; - [x] @jturney, I didn't renovate the ambit CMake like on some other external projects. If you've a mind to do so, CheMPS2 is quite similar to Ambit in build artifacts and [my CheMPS2 branch config6](https://github.com/loriab/CheMPS2/tree/config6) is current state of the art. ```; Attention! This SCF may be density-fitted.; Traceback (most recent call last):; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/bin/psi4"", line 223, in <module>; exec(content); File ""<string>"", line 76, in <module>; File ""/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/objdir27py35/stage/theoryfs2/ds/cdsgroup/psi4-compile/hrw-temp/install-psi4/lib//psi4/driver/driver.py"", li",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593:447,plugin,plugin,447,https://psicode.org,https://github.com/psi4/psi4/pull/593,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; Get Psi4 to a tagged version on pybind11 that's likely to be deployed. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Seeks only >=2.0.0 pybind11. This has the cmake export stuff we need. Note that the current release 2.0.1 has material changes only for Windows.; - [x] @dgasmith note that I had to add the buffer_protocol flag to your CIVector for runtime functioning. This was part of py11's pypy push. [Details here](https://github.com/pybind/pybind11/commit/1d1f81b278d956445287b3c491125caa11b925bd) if you want to review. I'm a little surprised that neither more nor less was required in the way of changes.; - [x] `cbs-xtpl-func` broken, but not by this PR.; * **User-Facing for Release Notes**; - [x] Uses stable 2.0 pybind11 release. ## FYI; - @ryanmrichard and @bennybp, shall we agree upon 2.0.0 as our next set point? Not much code adaptation required. Note `pybind11::pybind11` --> `pybind11::module`. There's a one-word patch I'll forward to the pb11 people, but I don't think it'll interfere with you (leftover `::pybind11` in pybind11Config.cmake). ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/557:927,adapt,adaptation,927,https://psicode.org,https://github.com/psi4/psi4/pull/557,1,['adapt'],['adaptation']
Modifiability,"## Description; Goodbye, unused variable that leaks memory. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2466:32,variab,variable,32,https://psicode.org,https://github.com/psi4/psi4/pull/2466,1,['variab'],['variable']
Modifiability,"## Description; Honestly, this started as just updating pybind11 to detect via config. It got out of hand, but to good results. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `exception.message` --> `str(exception)` since former sometimes raises an error in the course of handling another.; - [x] fix python/json testing when PYMOD_INSTALL_LIBDIR is non-default.; - [x] export psi4::core target. use it in plugin. much simplify the psi4Config. tidy up the share installs.; - [x] flatten install dir structure. no more `external/`; - [x] shift importing of official plugins. rename psi4 --plugin* options. add cmake -C line. update CM templates.; - [x] switch over Py detection to PythonLibsNew. Beautify components printing. ; - [x] Move threads detection to target.; - [x] start testing the plugin templates again; - [x] standardize `Psi4Macros` --> `psi4OptionsTools`.; - [x] Correct CXX comp names in autocmake_static_lib (@robertodr, I copied this from you, so you may have it wrong, too). Check enabled langs properly rather than compilers defined so OptionsTools usable to other projects with diff enabled langs.; - [x] switch pybind11 to upstream source. better handle c++ std wrt pybind. `PSI4_CXX_STANDARD` --> `psi4_CXX_STANDARD`.; - [x] compile test of gcc version able to account for -gcc-name/-gxx-name (@bennybp, here's the code for what we talked about once in `custom_cxxstandard.cmake`); - [x] convert restrict test to write its own file.; - [x] kill off LAB and @jturney config files. replace with `cmake -C psi4PluginCache.cmake` suited config file.; - [x] `psi4pasture` --> `pasture`.; - [x] always whole-archive dpd and qt; - [x] `external` --> `external/upstream`, `internals` --> ``external/downstream`; - [x] remove old Find*cmake files. * **User-Facing for Release Notes**; - [x] We changed our python detection module to the one used by NumPy. Also changed so that not actually using libpython anywhere.; - ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/554:79,config,config,79,https://psicode.org,https://github.com/psi4/psi4/pull/554,5,"['config', 'plugin']","['config', 'plugin', 'plugins']"
Modifiability,"## Description; I have added a Python function `fcidump` that lets the user save the one- and two-electron integrals to a plain-text file in [FCIDUMP format](http://www.sciencedirect.com/science/article/pii/0010465589900337); This is largely modeled on the [fcidump plugin](https://github.com/hande-qmc/fcidump) by @jsspencer It lets the user decide whether to save additional, non-standard information to the file like orbital energies ~and other one-electron integrals: dipole, quadrupole, etc. (not yet implemented!)~; **I'll implement printing out of the property integrals in a follow-up PR**. ### Some details; The integral transformation is done C-side. Once the OEI and TEI have been transformed, the print to file is done part C-side (TEIs) and part Py-side (OEIs). Not really elegant, I think, but gets the job done. @ashutoshvt might be interesting to get the T-amplitudes in the CC codes printed to file. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposed Python bindings for `MOSpace` and `IntegralTransform` classes in `export_trans.cc`; - [x] Exposed Python bindings for `Slice` class in `export_mints.cc`; - [x] Exposed Python bindings for some additional member functions in the `Matrix` class; * **User-Facing for Release Notes**; - [x] Added a `fcidump` Python function.; ~- [ ] Make it possible to print property integrals to file.~. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872:266,plugin,plugin,266,https://psicode.org,https://github.com/psi4/psi4/pull/872,1,['plugin'],['plugin']
Modifiability,"## Description; I hit a system that was raising [putenv and setenv not avail](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libpsi4util/process.cc#L136). Rather than solve it, decided (with support) to clean environment variables out of `P::e`. Only active uses were PSI_SCRATCH and PSIDATADIR. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Replaced all the PSI_SCRATCH with calls directly to psio.get_default_path(). Also cleared that fn out so it truly defaults to `/tmp/`, not TMP, TEMP, TMPDIR, then /tmp/.; - [x] Once all the parsing's py-side might be able to drop PSIDATADIR entirely. But for now, moved it to its own slot as `P::e.[gs]et_datadir()`; - [x] Can't tell if you're dealing with Clang or AppleClang by `#defines`, so lowered cxxstandard cutoff to permit Intel + !AppleClang to pass.; - [x] `FindOpenMP.cmake` attaches a lib to try_run that isn't needed just to extract versions. Shift OMP detection so cxxstandard doesn't complain about unfindable lib; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/826:229,variab,variables,229,https://psicode.org,https://github.com/psi4/psi4/pull/826,1,['variab'],['variables']
Modifiability,"## Description; I need to give `psimrcc` a wavefunction for the upcoming `libtrans` refactor. Step one is to take the existing `compute_energy`-like functions and make them conform to the normal `Wavefunction::compute_energy` API. No arguments. Returns a double. A follow-up PR will be needed to actually give `psimrcc` a wavefunction. I'm hopeful this will not be another long series like the `occ` one. I don't care whether this is in 1.4 or not. Pinging @fevangelista and @andysim, the two people who have some chance of remembering how this code works. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Conform `psimrcc`'s myriad `Wavefunction::compute_energy`-like functions to the `Wavefunction` interface, as prep for the next PR.; - [x] Removed unpublished ""perturbative CBS"" capabilities from `psimrcc` and adds appropriate warnings. ## Questions; - [x] @fevangelista, can you explain what the ""perturbative CBS"" is? Those should be added to the current energy somehow, but I can't tell which of the three flavors to add, or even what this is. ## Checklist; - [x] `ctest -R psimrcc` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:84,refactor,refactor,84,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['refactor'],['refactor']
Modifiability,"## Description; I originally had grand plans for a few of the base classes, but this turned out to be harder then expected so this PR kind of took a turn. Best description of this is perhaps ""general cleanup"". ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Might compile faster. As a note two libraries have moved:; ```; ""psi4/libparallelPsiOutStream.h"" -> ""psi4/libpsi4util/PsiOutStream.h""; ""psi4/libparallel/process.h"" -> ""psi4/libpsi4util/process.h""; ```; There is no longer a `""psi4/libparallel/libparallel.h""`, you may need to include one of the two above libraries. - [x] Removed several IWL functions; - [x] Removed some `libciomr` functions; - [x] Cleaned up `libparallel`; - [x] Fixed a few bugs and syntax issues in Wavefunction; - [x] Removed some headers from `Process` and `psi4-dec` which required a larger header shake up. I hope we are finally starting to peel away the points where we accidentally include too many headers and those headers go viral.; - [x] Still working to pull pybind11 out of a few layers; - [x] A GEMM routine with the tag line ""a reasonably fast matrix multiply (at least on the DEC3100)"" was removed.; - [x] `extern1` was temporarily removed from quickest. Still need to decided on what to do here. ## Questions; - [x] Anything else we can do?. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736:1087,layers,layers,1087,https://psicode.org,https://github.com/psi4/psi4/pull/736,1,['layers'],['layers']
Modifiability,"## Description; I recently discovered a bug where CBS finite-difference Hessians will crash on systems with zero dipole moment. This is due to `CompositeComputer` not loading a dipole with entries all exactly zero into qcvars. This fix checks that CBS results are not None rather than have any non-zero entries before loading into qcvars. I have verified that this fixes the crash and that e.g. non-existing Hessians are stiil not loaded into result qcvars. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Fixed a bug causing CBS extrapolated finite-difference Hessians to crash on systems with zero dipole moment. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] `CompositeComputer` loads variables with zero'd entries in qcvars.; - [x] `FiniteDifferenceComputer` checks for dipoles when doing finite-difference by gradients. ## Checklist; - [x] cbs tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2759:1006,variab,variables,1006,https://psicode.org,https://github.com/psi4/psi4/pull/2759,1,['variab'],['variables']
Modifiability,"## Description; I was investigating the ""memory not being released"" problem that @fevangelista brought up at the developer meeting. For the case of a simple HF energy, the wavefunction object indeed persisted after the energy call. Investigation showed its lifetime was controlled by the fact that we had the legacy wavefunction stored, and garbage collection didn't occur until the legacy wavefunction changed. Seeing as we don't actually use the legacy wavefunction machinery for anything in Psi, except part of a plugin interface where we tell people to prefer explicit wavefunction passing, this PR deprecates the commands for removal in 1.5, so we can collect garbage faster. This PR doesn't explain Francesco's reports of _increasing_ memory consumption for FINDIF, but it at least is a start. ## Todos; - [x] Deprecates `legacy_wavefunction` and `set_legacy_wavefunction`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2106:516,plugin,plugin,516,https://psicode.org,https://github.com/psi4/psi4/pull/2106,1,['plugin'],['plugin']
Modifiability,"## Description; I would like access to the CCSD pair energies from the FNOCC code in Psi4. I made a small modification to the FNOCC code so the pair energies are calculated (using an existing for loop) and I've added the new variable ""CCSD PAIR ENERGIES"" to store the quantity. . This is my first PR with Psi4 so I apologize in advance if I've missed any coding guidelines. . ## Questions; - [ ] Should I add a test for this new variable?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1950:225,variab,variable,225,https://psicode.org,https://github.com/psi4/psi4/pull/1950,2,['variab'],['variable']
Modifiability,"## Description; In master Psi, both the `Wavefunction` class and the `MintsHelper` class have their own copy of `basissets_`, a map from basis name to the actual `BasisSet`. There are `get_basisset`, `set_basisset`, and `basisset_exists` methods to manipulate `basissets_`, which are identical between the two classes. So `basissets_` and associated methods are functionally identical on the two classes. The problem is that every `Wavefunction` object is already guaranteed to have a `MintsHelper` object, there is no reason for the `Wavefunction` object to ever have a different `basissets_` from its `MintsHelper` (because `Wavefunction`’s only use for `basissets_` is aforementioned methods), but there is no mechanism to synchronize the `basissets_` variables of a `Wavefunction` and its `MintsHelper`. So we can have two sources disagreeing about the same information. This PR solves the problem by moving the responsibility for managing `basissets_` onto `MintsHelper`. The `Wavefunction` methods now just call the relevant `MintsHelper` methods. ~~I’m in favor of deprecating the offending `Wavefunction` methods, but I’ll open this to core developer discussion before adding that to the PR because I expect changing `Wavefunction` API will be controversial.~~. I’ve also marked some functions as override to silence annoying compiler warnings. Obligatory Pings: @jturney for `libmints` changes, @loriab for API changes. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Silences compiler warnings; - [x] Eliminates `wavefunction.basissets_` so that `wavefunction.mintshelper().basissets_` is the source of truth. ## Questions; ~~Do we want to deprecate `wavefunction.basissets()`, `wavefunction.get_basisset()`, `wavefunction.set_basisset()`, and `wavefunction.basisset_exists()` in favor of `wavefunction.mintshelper().method_name_here()`?~~. ## Checklist; - [x] Quick tests, dkh tests, and x2c tests all pass. ## Status; - [x] Ready for revie",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1970:755,variab,variables,755,https://psicode.org,https://github.com/psi4/psi4/pull/1970,1,['variab'],['variables']
Modifiability,"## Description; In preparation of the DLPNO-CCSD(T) code, I have changed the class heirarchy of the DLPNO module. Currently, there is only a `DLPNOMP2` class. However, I have split that class into a `DLPNO -> DLPNOMP2` inheritance heirarchy, to allow for ; `DLPNO -> DLPNOCCSD -> DLPNOCCSD_T` in the future, and potentially `DLPNO -> DLPNOMP2 -> DLPNOMP2_F12`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Changes class heirarchy of DLPNO module; - [x] Changes the way the DOI grids are handled in DLPNO-MP2, adds separate user options for the DOI grid specifically. ## Questions; - [ ] . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3192:219,inherit,inheritance,219,https://psicode.org,https://github.com/psi4/psi4/pull/3192,1,['inherit'],['inheritance']
Modifiability,## Description; Includes the small missing term in SAPT E(30)ind (issue #1677) with one extra DDOT of size o*v. The additional term is passed around using the variable `e_ind30_vsasb_term_` defined in `sapt2p3.h` - please change if that's not the preferred way. The results on the A24 database agree with the Psi4NumPy code of Jonathan Waldrop. ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1803:159,variab,variable,159,https://psicode.org,https://github.com/psi4/psi4/pull/1803,1,['variab'],['variable']
Modifiability,"## Description; Initial draft. Next step is going to be ensure more backwards compatibility... This will involve more complicated manipulations of the current module, probably. Mark III of this refactor is going to use this code in Psi4. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] RN 1; - [ ] RN 2. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3220:194,refactor,refactor,194,https://psicode.org,https://github.com/psi4/psi4/pull/3220,1,['refactor'],['refactor']
Modifiability,"## Description; Longawaited maintenance on physconst and duplicate naming. ## Todos; * **Developer Interest**; - [x] There was dir driver/procedures and dict procedures['energy']... Renamed the former to procrouting to avoid future trouble. Note that all plugins will need [this line](https://github.com/edeprince3/v2rdm_casscf/blob/master/pymodule.py#L28) fixed by `procedures` --> `procrouting`.; - [x] Move i/fsapt test cases higher in list, so they can backfill.; * **User-Facing for Release Notes**; - [x] Physical constants in PsiAPI are now `psi4.constants.amu2kg` instead of `psi4.p4const.psi_amu2kg`. In Psithon, still `psi_amu2kg`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/632:255,plugin,plugins,255,https://psicode.org,https://github.com/psi4/psi4/pull/632,1,['plugin'],['plugins']
Modifiability,"## Description; Makes SAPT(DFT) quite a bit more flexible by allowing a potential user to build SCF wavefunctions (any will work, HF or DFT). An example can be found in `tests/sapt-dft-api`. I have also added LRC references with SAPT(DFT). @ajmisquitta please checkout `tests/sapt-dft-lrc` and verify these are working as expected. Closes #939 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Users can now call SAPT(DFT) directly with reference wave functions. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/942:49,flexible,flexible,49,https://psicode.org,https://github.com/psi4/psi4/pull/942,1,['flexible'],['flexible']
Modifiability,## Description; Makes changes suggested by lgtm; ATTENTION: Changes local variable names that overlapped with parameter names in ; libfock/hamiltonian.cc. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1635:74,variab,variable,74,https://psicode.org,https://github.com/psi4/psi4/pull/1635,1,['variab'],['variable']
Modifiability,"## Description; Makes restarting an SCF and saving orbitals more accessible and updates documentation. Saving MOs for every SCF step to `my_mos.npy` and keeping it after psi4 finishes:; ```; energy('hf/minix',write_orbitals='my_mos'); # or; set orbitals_write my_mos; energy('hf/minix'); ```. Reading `my_mos.npy`:; ```; set guess read; energy('hf/minix',restart_file='my_mos'); ```. Using a serialized `wfn` works as well (`my_mos.npy` is just that); ```; e, scf_wfn = psi4.energy('scf', return_wfn=True); scf_wfn.to_file('saved_wfn'); set guess read; energy('scf', restart_file='saved_wfn'); ```. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `write_orbitals' extended to also take a string to save user-named `180.npy` file; - [x] fixed and updated `restart_file` for `npy` files; - [x] added `ORBITALS_WRITE` option; - [x] if `write_orbitals=file` then MOs will be saved every iteration.; - [x] doc re-work (minimal entry on serializing a wfn and simplifying `restart_file`); - [x] adds `sphinx-autodoc-typehints` module to sphinx build hinting in cmake ; - [x] `serial-wfn` ctest to new pytest about restarts. ## Remarks; - `write_orbitals=boolean` is not documented but still an internal functionality. ; - `restart_file` doc is ambiguous on purpose. No idea which modules support restarting. If this is something a user; should be able to do, the respective module needs to add a documentation. ## Checklist; - [x] Tests; - [x] Docs; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2190:723,extend,extended,723,https://psicode.org,https://github.com/psi4/psi4/pull/2190,1,['extend'],['extended']
Modifiability,"## Description; Minor ECP fixes, so that more ECP's from EMSL Basis set exchange work out of the box. See issue #926 . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Extended naming tables to include H-shell (Stuttgart-Cologne ECP's eg. for Hg need it); - [x] Trapping ""0.0"" in contraction coefficients. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937:234,Extend,Extended,234,https://psicode.org,https://github.com/psi4/psi4/pull/937,1,['Extend'],['Extended']
Modifiability,"## Description; Misc. cleanup related to SCF densities. Marking function returns const, removing redundant class members, and condensing variable declarations and variable definitions. ## Checklist; - [x] Quicktests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2425:137,variab,variable,137,https://psicode.org,https://github.com/psi4/psi4/pull/2425,2,['variab'],['variable']
Modifiability,"## Description; Miscellaneous substantive changes short of moving vars from globals to wfn. ## Todos; - [x] for FINDIF, renamed some functions for easier comprehension (e.g., `compute_gradient_from_energy` --> `compute_gradient_from_energies`). speak up, @JonathonMisiewicz if I've misinterpreted anything (it won't count in GH's reckoning, but you're always welcome to review).; - [x] `core.get_gradient`/`core.set_gradient` aren't regularly set, even in v1.2, being used only in internal communication for OPTKING. I consider this effectively a silent deprecation in 1.2, so made that official (in case downstream using it), and renamed to `legacy_gradient` internally, until the demise of C-optking.; - [x] de-py2-adapted `psi4.driver.p4util`; - [x] fixed bug where in `driver_fn(..., kwargvar=None)`, `kwargvar` turned into `False`; - [x] deprecated many old fns in p4util -- see if you agree. Most for v1.4 but a few for v1.3.; - [x] added tolerance field to `compare_wavefunctions`; - [x] renamed and `_`-prefixed many functions in python_helpers.py so connection to demangled fn name easier to track and the `import *` doesn't contaminate namespace; - [x] for dfmp2, energy was starting the timer _after_ `scf_helper`, gradient was starting timer _before_ SCF, and properties wasn't timing at all. changed the latter two to match the first.; - [x] added `set_energy` to Wfn; - [x] `psi4 --fulltest -n NTHREAD` available to run full pytest test suite. Parallel only available if `pytest-xdist` installed (`conda install pytest-xdist`). ## Checklist; - [ ] ~Tests added for any new features~; - [x] quick tests is fine at this PR. full tests of this + other commits is fine. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1394:717,adapt,adapted,717,https://psicode.org,https://github.com/psi4/psi4/pull/1394,1,['adapt'],['adapted']
Modifiability,"## Description; Modelled (esp. the bash) on pybind11, this imposes a script checking for tabs and trailing whitespace on the C++ and flake8 on the python. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] a dozen or so python files converted, incl. driver/driver and driver/procedures/proc. Many more skipped for now.; - [x] flake governed by /.flake8 file; - [x] C++ goverened by /cmake/check-style.sh file . Right now, just has a couple checks, and it's not even run in the travis b/c so many tabs in C++ code. . ## Questions; - [ ] Do we want to do something like this? [Here's](https://travis-ci.org/loriab/psi4/builds/179363444) what it looks like. Compared to compiling, it's a very short build. Seems an easy way to get style checking that's non-binding (can still merge if fails) and doesn't involve everyone configuring their git hooks.; - [ ] I set max line width at 120, as I can live with that. It's open for discussion. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/530:882,config,configuring,882,https://psicode.org,https://github.com/psi4/psi4/pull/530,1,['config'],['configuring']
Modifiability,"## Description; More `cc` tests ported over. There's one `autotest` test left. ## Todos; - [x] Documented several CC psivars; - [x] Updated dipole size managing functions to work with new ""DIPOLE -"" syntax; - [x] cc density variables renamed to new syntax; - [x] cc dipole/quadrupole variables renamed to new syntax . ## Checklist; - [x] ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541:224,variab,variables,224,https://psicode.org,https://github.com/psi4/psi4/pull/2541,2,['variab'],['variables']
Modifiability,"## Description; More build changes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] enable py3 testing; - [x] fix versioning at releases, allow conda build to get version before build; - [x] fix case where Fortran compilers required, but not detectable, have to be passed in; - [x] dashboard back. ## Questions; - [x] After these two PRs, just waiting on plugins from @jturney . ## Status; - [x] Ready to go **after oct_cmake**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/488:396,plugin,plugins,396,https://psicode.org,https://github.com/psi4/psi4/pull/488,1,['plugin'],['plugins']
Modifiability,## Description; Move components of the mp2 energy into the `variables_` map so that they're accessible from Python (cc #642). ## Questions; Are the any backwards compatibility or other reasons to leave the `energies_` member variable around?. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643:225,variab,variable,225,https://psicode.org,https://github.com/psi4/psi4/pull/643,1,['variab'],['variable']
Modifiability,"## Description; Much misc. ## Todos; - [x] Better error msg for MathOpenMP, mostly when GCC+MKL and can't find iomp5; - [x] Fix items in p4c4 interface; - [x] ccsd(t) grad in cfour v1 (came down to an unneeded `\s*`). test-suite-wise, approx works equally well with v1 or v2; - [x] DROPMO handling; - [x] backport a lot of the parsing changes from github.com/qcdb/qcdb to here; - [x] modernize Molecult.init_with_xyz(); - [ ] @JonathonMisiewicz, if you hit can't-align errors, let me know, and I'll switch it out to new mech; - [x] I forgot to obfuscate the global variable names used in pylibefp in #953, so do that here; - [x] fix [forum 1009](http://forum.psicode.org/t/nameerror-name-wfn-is-not-defined/1009/2?u=loriab); - [x] update a bunch of docs items that had accumulated; - [x] officially make python 2.7 unacceptable to the build system. ## Checklist; - [ ] ~[All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests)~. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1122:565,variab,variable,565,https://psicode.org,https://github.com/psi4/psi4/pull/1122,1,['variab'],['variable']
Modifiability,"## Description; OpenMP detection is very finely balanced to compensate for LAPACK demands, `libgomp` self aggrandizement, and psi4's need to sanely and transparently impose the psi4-compile-omp status on any derived plugins. Unfortunately, #1348 disturbed some of that for the particular case of plugins with fewer active languages than their parent psi4. A plugin (dfmp2) wasn't inheriting openmp from psi4 and thus was giving unknown openmp pragma warnings upon compile. This wasn't getting caught on linux because I was only checking that iomp5/gomp/omp weren't mixing, not that at least one was present. By happenstance, this did trigger an error on Mac in the course of building `psi4-dev`. This seems to patch things up on Linux. Will use this branch to try out Mac again. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520:216,plugin,plugins,216,https://psicode.org,https://github.com/psi4/psi4/pull/1520,4,"['inherit', 'plugin']","['inheriting', 'plugin', 'plugins']"
Modifiability,"## Description; Originally, only the last rotation or polarizability values computed were actually dumped to the dictionary accessed by `core.get_variables`. This fix pushes each one into the dictionary with its corresponding wavelength (in NM). I've added a few lines to `tests/cc39/input.dat` and `tests/cc29/input.dat` to test the polarization and rotation variables, respectively. I've run the tests separately since the quick tests on Travis may not cover them, the results can be found [here](https://gist.github.com/bgpeyton/6a7842adb77a03a10bf696c8364a9c54) and [here](https://gist.github.com/bgpeyton/a6654acd0f7fcaa89b5023bebd40b025). . ## Todos; - [x] Make polarizabilities push each calculated value to the dictionary just like I did with rotation; - [x] Add to polarizability / rotation test cases to ensure new variables don't get overwritten by ""accident"". ## Questions; None. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857:360,variab,variables,360,https://psicode.org,https://github.com/psi4/psi4/pull/857,2,['variab'],['variables']
Modifiability,"## Description; PR 1 / ? of global diagonalizer cleanup (#2642); This is a subset of #2642, and the rest of #2642 will be broken up into new PRs after this is merged. `sq_rsp.cc` contained an entire commented out diagonalizer function, and some comments related to that, from 2010. (?); Deleted. rsp.cc still used its own implementation of a diagonalizer, now it has been rewritten to use the LAPACK routine instead.; This has allowed the deletion of tred2.cc and tqli.cc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Remove unused code from sq_rsp.cc; - [x] Rewrite rsp.cc. ## Questions; - [ ] The **only** user of rsp(...) is fine with ascending order results: https://github.com/psi4/psi4/blob/ad2063594a88fd9f60d5a122398bf2f6ae2102a9/psi4/src/psi4/detci/diag_h.cc#L245; Based on this, I have not reimplemented the old function's support for reordering the results (`matz > 1`), so this will be a change in behaviour and rsp(...) is marked as `PSI_API`. Is this objectionable? It now fails with an error message if someone tries to ask for the eigenvalues in descending order.; - [x] It is not documented if the packed lower-triangular matrix on the input is supposed to be row-major-packed or column-major-packed. Based on the call site above, I guessed it is row-major packed. Is this correct? LAPACK expects column-major-packed, so I am transforming the array to be just so.; - [ ] I _think_ I got everything right, but I am not entirely sure if the DETCI test suite is thorough enough to find out if I did not. Codecov suggests the call site is not covered (https://app.codecov.io/gh/psi4/psi4/blob/master/psi4/src/psi4/detci/diag_h.cc), but the last coverage measurement seems to have been a year ago. ## Checklist; - [x] No new features; - [x] All or relevant fraction of full tests run, see [test.log](https://github.com/psi4/psi4/files/9162565/test.log). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2637:621,Rewrite,Rewrite,621,https://psicode.org,https://github.com/psi4/psi4/pull/2637,1,['Rewrite'],['Rewrite']
Modifiability,"## Description; PSIMRCC has a wavefunction now. This is **not** the last PR in the PSIMRCC series. Another brief PR will be needed for clang format and to finish moving the responsibility of keeping track of ""free memory"" to the wavefunction. You'll notice that at present, the `free_memory_` variable isn't modified. That used to be ""done"" by myriad allocate/release statements, which were removed in #1901. This is a very long PR as it is, so I'm moving that task to a separate PR. Obligatory pings: @loriab, @fevangelista, @andysim. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] PSIMRCC has a wavefunction!. ## Checklist; - [x] Quick tests and psimrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949:293,variab,variable,293,https://psicode.org,https://github.com/psi4/psi4/pull/1949,1,['variab'],['variable']
Modifiability,## Description; PSI_API for eigsort function in libciomr. ## Todos; Nothing notable... just fixes missing symbol in one of my plugins. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049:126,plugin,plugins,126,https://psicode.org,https://github.com/psi4/psi4/pull/1049,1,['plugin'],['plugins']
Modifiability,"## Description; Part of #1144. DFOCC was already formatted in #797, so there's very few changes. DMRG we want to avoid formatting so can easily diff with the plugin in the CheMPS2 repo. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1392:158,plugin,plugin,158,https://psicode.org,https://github.com/psi4/psi4/pull/1392,1,['plugin'],['plugin']
Modifiability,"## Description; Part of the DF Gradient refactor. It's become clear that Rob's implementation of the DF-MP2 gradients can't be generalized without incurring a performance hit, so the scope of the project now is to generalize what `dfocc` does out of `dfocc` so other modules (like `dct`) can use it. The current step of that is to make the procedure independent of `dfocc` globals. While I was at it, I got rid of unneeded headers and did some other minor code cleanup. ## Todos; - [x] Some `dfocc` cleanup. ## Checklist; - [x] `ctest -L df$` and `test_standard_suite.py` pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2049:40,refactor,refactor,40,https://psicode.org,https://github.com/psi4/psi4/pull/2049,1,['refactor'],['refactor']
Modifiability,## Description; Patch to the plugin code to work with ```PYMOD_INSTALL_LIBDIR``` paths. Tested with and without ```PYMOD_INSTALL_LIBDIR``` set to ```/python2.7/site-packages```. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/490:29,plugin,plugin,29,https://psicode.org,https://github.com/psi4/psi4/pull/490,1,['plugin'],['plugin']
Modifiability,## Description; Preparing for future code by improving docstrings and removing unused member variables. ## Checklist; - [x] Quick tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2610:93,variab,variables,93,https://psicode.org,https://github.com/psi4/psi4/pull/2610,1,['variab'],['variables']
Modifiability,## Description; Prevents the user from using a C++ keyword as a name for a new plugin. It came up on [this](http://forum.psicode.org/t/trouble-in-build-plugin-for-psi4/349) forum post. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Prevents the user from using a C++ reserved keyword as a name for a new plugin. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532:79,plugin,plugin,79,https://psicode.org,https://github.com/psi4/psi4/pull/532,3,['plugin'],"['plugin', 'plugin-for-']"
Modifiability,"## Description; Previously, the `dertype` specified in a frequency or optimization-with-hessian computaiton wouldn't get passed on to the pre-hessian gradient. This is now fixed. For optimizations, we can do one better and pass in the last gradient, so we don't need to recompute it. While solving this, I uncovered that supplying a dertype that was ""too high"" for the derivative level would lead to the default case of energy-only computations. That is also fixed. **Although this is an enhancement, this is also a bug fix.** Without this PR, I have no way to get a frozen core MP2 optimization with a `full_hess_every` hessian. The user is responsible for supplying the `dertype`, and they currently have no way to get the `dertype` argument to the pre-hessian gradient. ## Checklist; - [x] Tested this solved my fc-MP2 use case; - [x] Tested this solved the case of a dertype=2 RHF hessian. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1551:488,enhance,enhancement,488,https://psicode.org,https://github.com/psi4/psi4/pull/1551,1,['enhance'],['enhancement']
Modifiability,"## Description; Prints out the MBIS valence charges. These were already being computed, just not exposed to the user. Tests were added for the new output, and all tests pass. There is no impact on runtime because it is just exposing values already being computed. Addresses https://github.com/psi4/psi4/issues/3140. ## User API & Changelog headlines; - [x] MBIS valence charges are now exposed and printed in MBIS output; - [x] The wfn array_variable `MBIS VALENCE CHARGES` is now available to be retrieved. ## Dev notes & details; - [x] Saves the MBIS valence charges to it's own little matrix; - [x] And exposes those charges on the python side as the wfn variable `MBIS VALENCE CHARGES`; - [x] Updates the relevant tests. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226:658,variab,variable,658,https://psicode.org,https://github.com/psi4/psi4/pull/3226,1,['variab'],['variable']
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; - [x] deprecate DIPOLE X and QUADRUPOLE XX qcvars that were anomolously in Debye-Ang units; - [x] add DIPOLE and QUADRUPOLE array qcvars in atomic units; - [x] edit all the tests so that they check both for the interim; - [x] the `P::e.globals` and `Wfn.variables_` maps work in `core.Matrix`. Want to keep this storage for continuity and the preservation of symmetry, but 2D is not what one expects for dipole or charges (much less what one expects for octupole). So selected properties vars are returned as ndarray from the `variable()` query fns. This means you can't assume the return is a Matrix.; - [x] schema handling addressed accordingly and tested for run_json and run_qcschema setups. Note that return units now au; - [x] handling >quadrupole. **EDIT** change of plans from first post. in order not to have to go from unique multipole elements (10 for octupole) to complete array (27) c-side and flat since P::e.globals restricted to Matrix, now only the compressed array is stored in globals/variables_ and that gets turned into (and back) the complete multidimensional ndarray when queried py-side. quadrupole has been turned back c-side to `(6)`, rather than `(3,3)` for consistency with the other poles. ## Checklist; - [x] Tests added for any new features ; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1800:607,variab,variable,607,https://psicode.org,https://github.com/psi4/psi4/pull/1800,1,['variab'],['variable']
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; * Misc; - [x] Add PR help, as found by DGAS http://makeapullrequest.com; - [x] Add statement of support for https://python3statement.org/; - [x] Rename some DFHelper timers for the sake of alignment in timer.dat; - [x] More work on test_threading python script that will check the mkl/omp linking of psi4.so and the dfmp2 plugin template (or any other .so). Also will run psithon and psiapi tests on psi4 and dfmp2 plugin to make sure multithreads at least 1.3x speedup over single-thread; - [x] Update docs on BLAS recommendations, conda compilers. cautions on OpenBLAS sufficient to close psi4/psi4#1009; * Real part; - BLAS/LAPACK, compiler, and OpenMP are handled independently but are actually intertwined. Greatest complication comes about psi compiled by Intel with MKL (req. iomp5), then plugin built off that psi by GCC with OpenMP=ON and end up with both gomp and iomp5 linked, which is a subtle disaster.; - What we have been doing: cmake/math finds mkl_rt and outright adds iomp5, pthreads, etc. external/common/lapack packages those all into a target to pass along to blas-using dependencies. Meanwhile cmake/autocmake_omp detects just OpenMP flags (e.g., `-fopenmp` and `-qopenmp`) for the various compilers add adds them directly to `CMAKE_CXX_FLAGS` (for propagation to to psi4 (and consequently plugins) but **not** to deps (which might have OpenMP=OFF)). Actual OpenMP _libraries_ are not handled (except the aforementioned iomp5 hard-code) so (1) gomp can intrude with GCC and (2) the nice `-fopenmp=iomp5` capabilities of Clang aren't used.; - Trouble with sending me on long car trips (i.e., LSU) is that I begin plotting how things _should_ be. This PR is my take on answering this. It's insane to spring it at this point in the release cycle, but the first time after Setca that I tried building an ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1031:501,plugin,plugin,501,https://psicode.org,https://github.com/psi4/psi4/pull/1031,2,['plugin'],['plugin']
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Bump CheMPS2 to v1.8.4; - [x] Bump Libint to Ninja-able version, v1.2.1+2; - [x] Bump Pybind11 to v2.2.2. Note that this invokes symbol hiding, so ...; - [x] Include Jet's `PSI_API` macro to re-expose classes for plugins.; * **User-Facing for Release Notes**; - [x] Note that anyone wanting to re-use an `objdir` will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; - `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; - `<objdir> rm -rf external/upstream/pybind11`. ## Status; - [x] Ready for review; - [x] Ready for merge. @psi4/editors, these should be quick and uncontroversial. Getting this in would help the PR assembly line.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950:398,plugin,plugins,398,https://psicode.org,https://github.com/psi4/psi4/pull/950,1,['plugin'],['plugins']
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Makes `psiapi.ipynb` build friendlier by not executing notebook (safe on Mac, highly uncertain on Linux) and by bypassing the nbsphinx altogether if not installed. Pre-executed notebook.; - [x] Starts a `conda/` dir and tidies the conda versioning file into it.; - [x] Suppress output from `_psi4_which` upon loading external exe, hopefully fixing psi4/psi4#656 ; * **User-Facing for Release Notes**; - [x] Set up Linux plugins through conda by preempting PluginCache. Plus docs.; - [x] skipping extern1/2 for py3.6 since fail. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/659:605,plugin,plugins,605,https://psicode.org,https://github.com/psi4/psi4/pull/659,2,"['Plugin', 'plugin']","['PluginCache', 'plugins']"
Modifiability,"## Description; Provide a brief description of the PR's purpose here. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] renamed gtfock and erd. enable erd allowed w/o being default; - [x] add astropy docs dependence. all psi4.core and psi4.driver autodoc-ed w/o helper scripts; - [x] do absolute, not relative, imports in psi4.driver; - [x] replace cdict with variables and arrays in core.Wfn; - [x] reimplement versioning, at least internally. publish `v1.0` tag on top of `1.0`; - [x] 	Switched sto-3g and 3-21G DF fitting basis sets to def2-SVP; - [x]	Reword castup basis logic; - [x] **python 3 compatible**, now with testing!; - [x] numpy interface updates; - [x] effectively re-enable threaded MKL (build issue); - [x] reenable mostly static linked build; - [x] externals installed to `external/` not `external/{pkgname}`. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/486:399,variab,variables,399,https://psicode.org,https://github.com/psi4/psi4/pull/486,1,['variab'],['variables']
Modifiability,## Description; Provides serialized input and output capabilities through a JSON interface. This is an experimental feature and the JSON interface itself will likely evolve significantly over various iterations. ## Features; - `psi4 --json data.json` is now a valid Psi input.; - All python based exceptions (not just Psi exceptions) in Psithon should now be printed to the Psi output as well as stdout.; - Dimension objects now have an `__iter__` attribute. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/509:166,evolve,evolve,166,https://psicode.org,https://github.com/psi4/psi4/pull/509,1,['evolve'],['evolve']
Modifiability,"## Description; Provides users the ability to form a basisset composed of two combined basissets, the two can be combined simply or through use of the complementary auxiliary basis set (CABS) approach of Valeev et al. ## Dev notes & details; - [X ] Uncomments `pyconstruct_combined` in qcdb with minor changes to fit updated python; - [X ] Changes input to `build_ri_space` in OrbitalSpace to require a prebuilt combined `BasisSet` object; - [X ] Changes `build_cabs_space` in OrbitalSpace to use a full SVD; - [X ] Adds pytest `test_orbitalspace.py` to check orthonormality between orbital basis set and CABS; - [X ] Adds updated F12 basissets from the Basis Set Exchange; - [X ] Use of the CABS created works with my F12 plugin giving correct energies. ## Questions; - [ ] Shoud I generalize `_pybuild_basis` aka `BasisSet.build` to work with a list of keys, targets, roles, and other? Or create a new function to more easily access the building of a combined basisset?. ## Checklist; - [X ] `test_orbitalspace.py`; - [X ] Passes quick tests [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2982:723,plugin,plugin,723,https://psicode.org,https://github.com/psi4/psi4/pull/2982,1,['plugin'],['plugin']
Modifiability,"## Description; Pulls in the C, CXX, and Fortran compiler flags from Psi4, this includes additional compiler flags the user provided in their initial cmake call, and passes them to the new plugin's CMakeLists.txt file. Need people to test to ensure all the needed flags are being obtained. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [ ] User provided Psi4 compiler flags are passed to new plugins. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/543:189,plugin,plugin,189,https://psicode.org,https://github.com/psi4/psi4/pull/543,2,['plugin'],"['plugin', 'plugins']"
Modifiability,## Description; Recent changes to the cmake build systems introduced an issue when compiling psi4 plugins and Forte on a Mac. Compilation fails at the linking stage with the error; ```; ld: can't link with bundle (MH_BUNDLE) only dylibs (MH_DYLIB); ```. This PR reverts two changes. ## Questions; - [ ] Is there a better solution that still uses `pybind11_add_module(core MODULE NO_EXTRAS core.cc)`?. ## Checklist; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640:98,plugin,plugins,98,https://psicode.org,https://github.com/psi4/psi4/pull/1640,1,['plugin'],['plugins']
Modifiability,## Description; Redirects the PSIO errors from `stderr` to exception message (stderr and normal output).; Essentially addressing #2019 and #1965. Example print:. ```; !----------------------------------------------------------------------------------!; ! !; ! Fatal Error: PSIO_ERROR: 5 (open call failed) !; ! Check the location of your scratch directory which can be !; ! specified via the $PSI_SCRATCH environment variable or in !; ! the $HOME/.psi4rc file. !; ! Please note that the scratch directory must exist and be !; ! writable by Psi4 !; ! Error occurred in file: /Users/kruse/qc/psi4/psi4/src/psi4/libpsio/error.cc on !; ! line: 133 !; ! The most recent 2 function calls were: !; ! !; !----------------------------------------------------------------------------------!; ```. ## Feature; - [x] PSIO errors to stderr and normal output. ## Checklist; - [x] limited manual testing by deleting files; - tests not applicable . ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2030:417,variab,variable,417,https://psicode.org,https://github.com/psi4/psi4/pull/2030,1,['variab'],['variable']
Modifiability,"## Description; Refactor `assemble_Q` [like `JK_deriv2`](https://github.com/psi4/psi4/pull/2994). The code had the same problem, so I use the same solution. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Refactored `assemble_Q` to compute both spin cases in a single function call.; - [x] Makes UKS LDA hessians much less ugly.; - [x] Makes `assemble_Q` comply with `compute_Vx`'s expected function signature . ## Checklist; - [x] `ctest -R scf_hess` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2996:16,Refactor,Refactor,16,https://psicode.org,https://github.com/psi4/psi4/pull/2996,2,['Refactor'],"['Refactor', 'Refactored']"
Modifiability,"## Description; Requiring libefp was rather a holdover from the early days of code-in-repo add-ons. This PR makes it slightly easier on packagers and enables us to have only three required compile-in dependencies in the figure in the paper (libint, blas/lapack, pybind11). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] `#ifdef`-ing the EFP code probably could have been done to varying degrees of thoroughness. But since EFP is tied into `P::e` _and_ Molecule _and_ it's own interface, none of which I wanted to rexamine, this is the one that requires a minimum of recompilation if you change `ENABLE_libefp` ON/OFF. When OFF, the EFP object still exists, but only the constructor, destructor, and nfragments method (that returns 0 fragments). This way the driver needs no mods (which is a good thing, since we can't `#ifdef` python).; - If you build w/o libefp and try an efp-containing molecule, throws a runtime error with text `EFP fragments detected but are not available`.; - [x] slight fix of passing `pybind11_DIR` to plugin cache. helps with mixed install/staged psi4/pybind11. we'll see how this goes, as I'm not sure it's the best fix.; - [x] more thoroughly test cmake variable for PCMSolver path (`if ""@ENABLE_PCMSolver@"".upper() in [""1"", ""ON"", ""YES"", ""TRUE"", ""Y""]`); - Hope this helps a bit on packaging, @susilehtola ; * **User-Facing for Release Notes**; - [x] Psi4 can be build without libefp add-on. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/623:1095,plugin,plugin,1095,https://psicode.org,https://github.com/psi4/psi4/pull/623,2,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,## Description; Restore a `const` lost during the Vector refactor. Quick merge appreciated - needed to fix Forte. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2705:57,refactor,refactor,57,https://psicode.org,https://github.com/psi4/psi4/pull/2705,1,['refactor'],['refactor']
Modifiability,"## Description; Rewrite of CCHBAR's Wabei algorithm for UHF reference. The old algorithm did quite a bit of unnecessary I/O. The replacement has been designed to compute as many sub-intermedates in the target order to avoid storage of additional intermediate terms, and to avoid expensive sorting of ov^3 buffers. . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] TDC has requested I take any integral sorts that were required within the Wabei_XXXX functions and move them to some setup function so that they are all preformed before any of the functions run. ; - [x] I also need to remove the first commit that I added from #513 that let me build + run on our cluster. ; * **User-Facing for Release Notes**; This change results in a performance boost, but no end-user changes should be noticed. . ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/540:16,Rewrite,Rewrite,16,https://psicode.org,https://github.com/psi4/psi4/pull/540,1,['Rewrite'],['Rewrite']
Modifiability,## Description; Rewrite of the CC wavefunction as per #1247 . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [ ] Feature1; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1273:16,Rewrite,Rewrite,16,https://psicode.org,https://github.com/psi4/psi4/pull/1273,1,['Rewrite'],['Rewrite']
Modifiability,## Description; Several bug fixes and enhancements promised for 1.3. Primary goal for these changes is to localize the estimation of DF memory in a single location to prevent some odd errors. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove class method attribute for `Wavefunction.to_file`.; - [x] Reworks SCF `save_orbitals` to use canonical Wavefunction serialization.; - [x] `JK.name()` returns the name of the JK object.; - [x] `JK.memory_estimate()` attempts to estimate the amount of in-core memory required.; - [x] Reworks DFT cache size logic to account for Schwarz screening.; - [x] Removes SCF initialize JK from C++ for better initialization control; - [x] Attempts to close #1218. ## Questions; - [ ] Can we get better estimates on PK memory usage @jgonthier.; - [ ] Does IWL use virtually zero memory? @andysim . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446:38,enhance,enhancements,38,https://psicode.org,https://github.com/psi4/psi4/pull/1446,1,['enhance'],['enhancements']
Modifiability,"## Description; Simple fix for the SCF plugin template, to work with the new `set_variable` syntax. ## Questions; - [x] What about [these](https://github.com/psi4/psi4/blob/master/psi4/driver/driver_nbody.py#L295-L298)? I only discovered them by grepping the codebase so I have no evidence to suggest they should be changed - it's probably the difference between the `wfn` or `core` namespaces, vs. the `psi4` namespace being used in the plugin snippet. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1680:39,plugin,plugin,39,https://psicode.org,https://github.com/psi4/psi4/pull/1680,2,['plugin'],['plugin']
Modifiability,"## Description; Since #582, presumably, all the skeleton plugins that we check out and build from template have actually been using the same, `basic`, template. The adding to ctest bit wasn't working either. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Now we have the compacted code of #582 _and_ the testing functionality of pre- #582 .; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/624:57,plugin,plugins,57,https://psicode.org,https://github.com/psi4/psi4/pull/624,1,['plugin'],['plugins']
Modifiability,"## Description; Since we [say we're returning the dimer wfn](https://github.com/psi4/psi4/blob/master/psi4/driver/driver.py#L505-L507), let's return the dimer wfn for fisapt. currently returning a `psi4.core.FISAPT` object that does not inherit from Wfn. Hence no way to drive OEPROP on a sapt calc. ## Checklist; - [x] I checked that the dipole/quadrupole from running oeprop on this returned wfn matches a forced quadrupole in the early scf_helper; - [x] ran all the sapt tests. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1201:237,inherit,inherit,237,https://psicode.org,https://github.com/psi4/psi4/pull/1201,1,['inherit'],['inherit']
Modifiability,"## Description; So I wrote `run_dftd3` back in the day. Then @dgasmith unified dftd3 and libdisp handling through the `EmpiricalDispersion` class. Then @PeterKraus added the DFT dict_builder that allowed dispersion parts of a functional. Then @hokru added NL dispersion into the mix. And we were all very courteous and worked around each other's code, yet all used selected pieces from dashparam.py. The result was a tangle. This is a redesign and a backport of dftd3-running tech from qcdb. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] libdisp's -D2 made more flexible so it can use same s6/alpha6/sr6 params as Grimme's -D2. existing D2 dict defs needed filling in further; - [x] no more d2p4/d2gr. that choice now made through `energy(..., engine='dftd3|libdisp')`; - [x] _all_ dispersions served out of dashparam for dftd3/libdisp/nl. accordingly much of the metadata from EmpiricalDispersion moved to dashcoeff.; - [x] EmpiricalDispersion much reduced, sorry. On the other hand, I suspect it's now the slim unification class DGAS actually wanted, if it hadn't needed to contort around run_dftd3.; - [x] All the different combos of fctl/dash/fctl-dash/params/default-params/partial-user-params sorted out in `dashparam.from_arrays()`. This is used as the backend to everything. `qcdb.Molecule.run_dftd3()`, `psi4.core.Molecule.run_dftd3()`, `qcdb.energy('b3lyp-d3')`, `psi4.energy('b3lyp-d3')`, `EmpiricalDispersion.compute_energy()`; - [x] Use QCJson_Schema model to drive and harvest from dftd3 rather than one big function.; - [x] This passes all existing tests. However, I've devised one it doesn't pass (user-def fctl incl. disp). Working on that.; - [x] Not yet begun to trace how citations are passed around.; - [x] Yes, I need to rebase to get Jonathan's findif changes incorporated.; - [x] Bump pylibefp to 0.4 and finish its c->py transition in build paraphernalia.; - [x] current commits are rich in docstrings but actual docs need a",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1151:614,flexible,flexible,614,https://psicode.org,https://github.com/psi4/psi4/pull/1151,1,['flexible'],['flexible']
Modifiability,"## Description; So `psi4.clean_options()` is a mainstay of psiapi mode because it allows you to do two calculations after another both starting from a clean slate of options. Likewise, it is important for testing b/c we do one behind the scenes (in pytest) between each test so that your MP2 doesn't get PCM solvation, etc. For plugins, this has been broken since the `clean_options()` command was invented, in that as soon as you tried to set an option unique to the plugin (as opposed to one that another module in read_options.cc defined) _after_ a options cleanse, it would complain about an invalid option. This PR reloads the plugin options after a cleanse. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1032:328,plugin,plugins,328,https://psicode.org,https://github.com/psi4/psi4/pull/1032,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; So once upon a time, Psi4 ran ConfigMath to get its lapack/blas, then [tested for mkl](https://github.com/psi4/psi4private/blob/71ea2ea8ee142ee42541c589c42977fff2d3c381/CMakeLists.txt#L173-L174) to set `HAVE_MKL`. Then in the code proper, `#include mkl.h` (that defines `__INTEL_MKL__`) and the [very important `mkl_set_num_threads()`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libparallel/process.cc#L91-L93) were guarded by `HAVE_MKL` ifdefs. Then, on the fateful 23 Jun 2016 (https://github.com/psi4/psi4/commit/e07d645ea7acc85ae90d8c60a30f3426c977fc26) in the course of CMR, ConfigMath was blown away and all the `HAVE_MKL`s were replaced by `__INTEL_MKL__`. But that's circular because the mkl.h inclusions, which define `__INTEL_MKL__` were guarded by `__INTEL_MKL__` ifdefs. So Psi4 hasn't been threading MKL (though OMP threading has still been present). Story continues in bullet below. Identification and debugging of this issue by @dgasmith and Matt Schieber. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] ~~This PR identifies which of MKL, OPENBLAS, etc. has been detected by ConfigMath.~~ Identify MKL-or-not by searching for ""mkl"" in the full lapack library list, whether detected math or passed-in math. Colors ""MKL LAPACK"" to screen if ""on"". If MKL, attaches the `USING_LAPACK_MKL` compiler definition to the `tgt::lapack` target that every module of Psi4 is linked with. Thus we're getting MKL threading again.; - [x] Adds min version tags for dkh, gdma, erd; - [x] Adjusts where the required check comes in for hdf5 so we don't get an warning; - [x] Add docs with examples of math detection; - [x] Remove unused routes in math detection: explicit, external, mkl_flag; - [x] ConfigMath now FATAL_ERRORs if math libs _not_ found; - [x] Newly pays attention to headers for math. Only required for MKL.; - [x] Add a threading testing script for general maintenance, see comment below. In g",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615:46,Config,ConfigMath,46,https://psicode.org,https://github.com/psi4/psi4/pull/615,2,['Config'],['ConfigMath']
Modifiability,"## Description; Some C++ style fixes for files in the `ccenergy` folder. . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Remove `return;` where useless; - [x] Remove unused `ioff_` array; - [x] Localize loop variables, use `auto`; - [x] Switch to `std::` data structures. ## Checklist; - [ ] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1269:260,variab,variables,260,https://psicode.org,https://github.com/psi4/psi4/pull/1269,1,['variab'],['variables']
Modifiability,"## Description; Some Psi4-side fixes to getting @bennybp's simint AddOn added. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Includes all commits of #533 ; - [x] Temporarily based off private repo https://github.com/loriab/simint branch config6 until the integration settles down, and we can return to tarballs. Note that if you want to test this branch, you may need to supply your GH credentials during the build to clone simint.; - [x] Adds all the pre-built detection, target referencing, docs, standardized variable names, tests that we expect from an addon to simint; - [x] Continued general documentation on addons.; - [x] Modestly tested- static and dynamic on Linux, dynamic on Mac; * **User-Facing for Release Notes**; - [x] New integral library available with `-DENABLE_simint`. ## Questions for @bennybp ; - [ ] There's some questions in external/upstream/simint/CMakeLists.txt; - [ ] I've made the simint on my acct private and just added you and some core developers who may want to test it. If you don't mind it being public, as a temp repo, that'd be a little easier.; - [ ] There are spots where I supply at most separate home, docs, and source links for addons. I've got your website, http://www.bennyp.org/research/simint/, for all three at the moment, so let me know if there are more specifics.; - [ ] I filled in the installing and configuring sections of simint.rst according to the template. Other addons (http://psicode.org/psi4manual/master/interfacing.html) often have middle sections about interacting with the code. Fill in anything you like.; - [ ] Got the following unexpected failing test cases on Linux and partially confirmed on Mac, all segfaulted. Could you take a look? None are in quicktests.; ```; The following tests FAILED:; 	 16 - cbs-xtpl-wrapper (Failed); 	144 - dft-b2plyp (Failed); 	269 - pywrap-checkrun-rhf (Failed); 	270 - pywrap-checkrun-rohf (Failed); 	271 - pywrap-checkrun-uhf (F",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625:581,variab,variable,581,https://psicode.org,https://github.com/psi4/psi4/pull/625,1,['variab'],['variable']
Modifiability,"## Description; Some miscellaneous code cleanup from my first attempt at fixing #2560. There will be a follow-up PR that renames many variables in this code before I can resume the attempt. Note that although I create Same-Spin and Opposite-Spin matrices, those are currently unused, but will be needed for the #2560 fix. Quick review appreciated, so I can continue the `fnocc` push. Obligatory @edeprince3 ping. ## Todos; - [x] Code cleanup; - [x] Introduced framework for modernizing pair energies in `fnocc`. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2561:134,variab,variables,134,https://psicode.org,https://github.com/psi4/psi4/pull/2561,1,['variab'],['variables']
Modifiability,"## Description; Substitute some int by size_t, and introduces (size_t) casts wherever multiplication of integers seemed problematic. ## Todos; * **Developer Interest**; - [x] Integer declarations in all .h files in libsapt_solver have been examined and the ones that could potentially generate overflows were converted to size_t. Probably some overkill there.; - [x] Searched the whole source in libsapt_solver for a regex representing 4 variables being multiplied, to find all the occ*vir*occ*vir that are bound to overflow. Added (size_t) cast for those that were missing it. ## Questions; - [ ] This originated in a problem reported by a user on the forum. I can't run Psi4 on good enough hardware to actually test the patch on a large system. Anyone want to give it a try ? Or do we let the user test it ?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/619:438,variab,variables,438,https://psicode.org,https://github.com/psi4/psi4/pull/619,1,['variab'],['variables']
Modifiability,"## Description; Suceeds #1381 as a step toward #883 by improving qcvar capabilities on Wfn and localizing some modules. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] improves the wfn localization of qcvars for DFT, scf_helper, DFMP2, OEPROP. trying to set on wfn c-side, then just copy into P::e.globals in proc.py.; - [x] moves DETCI, DFMP2 entirely to qcvar passing on Wfn. OCC, DFOCC, FNOCC do so for mp2-like only.; - [x] adds some functional-including qcvars for DFT; - [x] BREAKS; - remove `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` from dfmp2 `Wavefunction.variables`; - remove MP2 psivars from double-hybrid DFT final return; - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY`. ## Notes; - reference E for detci https://github.com/psi4/psi4/pull/1381#discussion_r237680985. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1445:659,variab,variables,659,https://psicode.org,https://github.com/psi4/psi4/pull/1445,1,['variab'],['variables']
Modifiability,## Description; T1 and D1 diagnostics computed by ccsd/df-ccsd routed through fnocc are added to psi4 global variables. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/712:109,variab,variables,109,https://psicode.org,https://github.com/psi4/psi4/pull/712,1,['variab'],['variables']
Modifiability,"## Description; TDSCF/ADC and EOM can't agree on how to name variables for excitation energies. Per discussion between Lori and I, this moves the TDSCF variable names to the new standard, as I see it. This PR is not complete and is submitted for feedback from the excited-state gurus, who are likely to have strong opinions: @loriab @robertodr @lothian @maxscheurer . To demonstrate the changes, consider the example file I added. Old code would write the second transition as ""TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - B2 SYMMETRY"". The new code replaces that with three new psivars:. - TD-HF ROOT 0 (B1) -> ROOT 0 (B2) EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY; - TD-HF ROOT 0 -> ROOT 2 EXCITATION ENERGY - A2 SYMMETRY. We have one access call that requires the symmetries of initial and target states and the indices of both _within their irreps_. We have one access call that requires no symmetry information and just requires the index of the states _among all irreps_. The last access call is like the second, but adds on the symmetry of the _transition_. **This is a breaking change** because old code instead used the symmetry of the final state. After coding this all up, I'm inclined to remove the last access call. The original reason for keeping it up was consistency with the current way TDSCF operates, but it's still inconsistent, per the last paragraph. I'll add docs once we're settled about the new naming conventions. Once this PR is in, the other modules will need to update to the new style. ## Questions; - [x] Opinions on the new variable names?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:61,variab,variables,61,https://psicode.org,https://github.com/psi4/psi4/pull/2462,3,['variab'],"['variable', 'variables']"
Modifiability,"## Description; Thanks to @JonathonMisiewicz for catching this one!. This PR fixes a typo in `SplitJK::set_lr_symmetric`, wherein the `lr_symmetric_` variable is assigned to itself rather than the intended behavior of being assigned to the function input. This also opens up the question of why this wasn't caught in testing, which I plan on exploring further and addressing in a second PR. Currently, composite methods where `LinK` is used, throw exceptions for cases where `lr_symmetric_` is set to false; but composite methods using `COSX` does not. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] `SplitJK::set_lr_symmetric` now behaves as intended. ## Questions; N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3055:150,variab,variable,150,https://psicode.org,https://github.com/psi4/psi4/pull/3055,1,['variab'],['variable']
Modifiability,"## Description; The UHF version of #2171. The open-shell DCT code now adds two terms before contracting them against the two-electron integrals, rather than after. Unfortunately, this change was tightly coupled to surrounding code, making it unnecessarily complicated. This PR also removes that complexity. Again, I'd expect this code to be faster due to reduced random access in `process_so_integrals`, but I haven't run timings. ## Todos; - [x] More transparent code; - [x] 100 less lines code; - [x] Four fewer global variables . ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2185:521,variab,variables,521,https://psicode.org,https://github.com/psi4/psi4/pull/2185,1,['variab'],['variables']
Modifiability,"## Description; The `JK_deriv2` function exists to compute the overlap-derivative-times-TEI part of the right side of the CPHF equation. It's a J-term and a K-like term. with overlap derivative integrals instead of a density.[1] The previous algorithm to do this first computed the alpha spin part in one function call, and then the beta spin part in another function call. This approach was redundant. The first function call had all the intermediates _necessary_ to compute the beta part, but didn't use them. As a result, the function re-computed JK. This PR refactors `JK_deriv2` so it computes both spin cases in a single function call. [1] = There's also a Vx term, but its implementation was both unused and buggy. Now it's just unused. Trying to use it in the _old_ way would be even more redundant. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] The UHF hessian algorithm has been slightly adjusted, which should lead to slightly faster computations. Please report any errors. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Refactored `JK_deriv2` to compute both spin cases in a single function call.; - [x] Makes UKS LDA hessians much less ugly.; - [x] Makes `JK_deriv2` comply with `compute_Vx`'s expected function signature . ## Checklist; - [x] `ctest -R scf-hess` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2994:562,refactor,refactors,562,https://psicode.org,https://github.com/psi4/psi4/pull/2994,2,"['Refactor', 'refactor']","['Refactored', 'refactors']"
Modifiability,## Description; The default `MAX_AM_ERI` isn't high enough to perform this test. Add it only when it is configured high enough. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409:104,config,configured,104,https://psicode.org,https://github.com/psi4/psi4/pull/1409,1,['config'],['configured']
Modifiability,"## Description; The general idea is to allow more flexible definition of CBS functions, and clean up the `cbs()` function a little. The goal is to allow further corrections to the energy into CBS, eg differences of basis sets (eg. `\Delta E_{diff} = E(aug-cc-pvtz) - E(cc-pvtz)`) or frozen core corrections (`\Delta E_{ae} = E(freeze_core True) - E(freeze_core False)` or DKH ... Added `frequency` to cbs-compatible calls. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Simple, dict-based interface to CBS.; - [x] Handling of an arbitrary number of correction functions.; - [x] Support for passing of arbitrary options (such as `freeze_core`). ; - [x] Fix `pywrap-cbs1` which fails on `cbs_number` checks.; - [x] Documentation.; - [x] Frequency calculations via cbs are now possible. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1235:50,flexible,flexible,50,https://psicode.org,https://github.com/psi4/psi4/pull/1235,1,['flexible'],['flexible']
Modifiability,"## Description; The idea is to try to extend Psi4 to the calculation of repulsive potentials. Unfortunately, some of Psi4's machinery is preventing such calculations to be run due to chemists' short-sightedness ;). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Change cutoffs so that close-lying atoms are accepted by the program (the cutoffs / disabling them should be an input parameter); - [ ] Fix problem with the code putting atoms on top of each other. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1843:38,extend,extend,38,https://psicode.org,https://github.com/psi4/psi4/pull/1843,1,['extend'],['extend']
Modifiability,"## Description; The next batch of readability fixes to `dfhelper.cc`. The potentially contentious issue here is that I remove the `AO_files_` variable, which was just an identity mapping. Plenty more cleanup to go!. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2654:142,variab,variable,142,https://psicode.org,https://github.com/psi4/psi4/pull/2654,1,['variab'],['variable']
Modifiability,"## Description; The next bite-sized DCT cleanup PR. To construct an intermediate `Fa_` and `Fb_`, previously, we'd divide the term in three parts, compute the three contributions separately, and then add them together. Making things more complicated, we add the pieces in different functions. In the RHF case, this PR combines two of those terms from the outset, so there are only two contributions to add. As a result, we now construct fewer `double*`, use fewer class variables, and have less cause to worry about whether the intermediates `Fa_` and `Fb_` are completely or incompletely constructed. While I haven't run timings, this code should also be faster due to reduced random-access of arrays. The UHF code is more complicated, so that's best saved for another PR. At that point, I hope to eliminate a few more class variables. ## Todos; - [x] More code cleanup. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2171:470,variab,variables,470,https://psicode.org,https://github.com/psi4/psi4/pull/2171,2,['variab'],['variables']
Modifiability,"## Description; The primary purpose of this PR is to correct some errors in density-fitted DCT. In brief, none of the nuclear gradient, orbital residual, or amplitude residual could be derived by differentiating the density-fitted DCT energy functional. All deviations were in different ways. This PR changes the energy functional to have a simpler density-fitted energy functional and correct all of its derivatives (orbital, amplitude, and nuclear geometry). _Unfortunately_, this is a gargantuan PR, and I owe all reviewers some beer. Simplifying some code requires adding new code that best belonged in other modules, there was a lot of new technology needed to get DCT in working order, DCT needed to be hooked up to properties in order to get tests properly working, and I did a lot of code reorganizing to make finding bugs a touch easier for me. ## Todos; - [x] DF-DCT energies, properties, density matrices, and gradients are all now correct; - [x] DCT supports one-electron properties for methods that support gradients; - [x] Adds a new libmints SaveType: ThreeIndexLowerTriangle.; - [x] Adds utility functions to `libdpd` and `libmints` with slightly different arguments/return types.; - [x] Eliminates many unneeded pointers from `dct`.; - [x] clang format DCT; - [x] DCT variables are now written to the wavefunction rather than globals; - [x] Eliminated the special procedure to get a DCT Molden file.; - [ ] There's still some cleanup to do, but it can be a new PR. This one is already very big. (I'm looking at you, incomplete use of the new SaveType, and explicit construction of the VVVV block of the TPDM.). ## Questions; - [ ] Any deprecation warnings necessary? This is an unusual case, to put it lightly. ## Checklist; - [x] Dipole and gradient finite difference tests created and _passing_.; - [x] `dct` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2100:1285,variab,variables,1285,https://psicode.org,https://github.com/psi4/psi4/pull/2100,1,['variab'],['variables']
Modifiability,"## Description; The purpose of this PR is to expose the wavefunction as well as access to all amplitudes from CC to the python side. This has the advantage to sort out the relationship of Wavefunction, CCEnergyWavefunction and CCLambdaWavefunction in a more natural C++ way through inheritance. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] CCLambdaWavefunction inherits from CCEnergyWavefunction to facilitate better runtime access from the python side.; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057.; * **User-Facing for Release Notes**; - [x] Setter and getter for all T & L amplitudes are included in the python interface to enable more sophisticated methods in the future, e.g. in the broker from #1057. ## Questions; - [ ] Does the more technical details from above (inheritance change and exposing of the amplitudes to python) require more text for the release notes?; - [ ] The python documentation should be automatically built, is there more documentation for this part required?. ## Checklist; - [x] Tests added for any new features (not required as no new functionality added); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061:282,inherit,inheritance,282,https://psicode.org,https://github.com/psi4/psi4/pull/1061,3,['inherit'],"['inheritance', 'inherits']"
Modifiability,"## Description; The resurrection of #2543. This PR refactors my LinK code (#2359) and Zach's semi-numerical K (#2567) code into the CompositeJK framework (to allow mixing and matching of J and K types). The DirectDFJ implementation here is derived from Zach's semi-numerical K PR. This framework is robust and allows for the rapid development of new J/K methods and combinations in the future, and avoids code duplication. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Creates composite JK framework to allow for mixing and matching of different J/K types; - [x] Makes LinK usable with the DirectDFJ algorithm. ## Questions; - [x] To call my LinK code, `SCF_TYPE` is set to `LINK`, should it be `DFJ_LINK` instead?. ## Checklist; - [x] Tests added for any new features; - [x] Passing pytests for COSK (from Zach) and LinK; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:51,refactor,refactors,51,https://psicode.org,https://github.com/psi4/psi4/pull/2588,1,['refactor'],['refactors']
Modifiability,"## Description; The support for matrices with `symmetry() != 0` is flawed in several places in the matrix class. While *some* operations are only valid if the matrix is totally symmetric, most do not have this requirement. . These issues have long gone unnoticed because the majority of places where the object is used the quantity will be totally symmetric. I started noticing these flaws while working on TDDFT which will require most of the changes made here in order to work properly. ## FYI; - Comments/error messages/variables names have been updated to make meaning more precise.; - In general the non-zero block of the matrix found at `matrix_[h]` has shape `{rowspi_[h], colspi_[h^symmetry_]}` **not** `{rowspi_[h], colspi_[h]}`. The two are coincidentally the same when `symmetry_ == 0` (This was the cause of many segfaults/incorrectly raised errors).; - I have aggressively applied DRY to avoid issues. Example (`add`, `subtract`, and `axpy`) all lead to different calls to `C_DAXPY`, however `axpy` computed the size incorrectly and led to a segfault. ; - I have added unit tests for the matrix class to avoid reintroducing any of the bugs I root out. ## Todos; - [x] python bindings for non-totally symmetric constructor; - [x] consolidate `axpy` type operations, fix size issue; - [x] consolidate `gemm` type operations, fix A/B/C block logic. ## Questions; - [ ] If anyone has noticed problems, missing/bugged functionality that I have missed now is a good time to point them out. . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1383:523,variab,variables,523,https://psicode.org,https://github.com/psi4/psi4/pull/1383,1,['variab'],['variables']
Modifiability,## Description; The user needs not set `dertype='energy'` explicitly anymore when calling `optimize`. The test case has been extended accordingly. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] FInite difference gradient is always forced when using PCM . ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1001:125,extend,extended,125,https://psicode.org,https://github.com/psi4/psi4/pull/1001,1,['extend'],['extended']
Modifiability,"## Description; This PR ; (a) adds checks that alloc's have been succesful in optking; (b) rewrites detci's print_config routine to use dynamic memory allocation instead of static arrays, which I believe caused issue #606. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/607:91,rewrite,rewrites,91,https://psicode.org,https://github.com/psi4/psi4/pull/607,1,['rewrite'],['rewrites']
Modifiability,"## Description; This PR added missing class variables in the assignment operator to reflect the current status of Options, which ensures a correct copy behavior. ## Todos; - [x] Add missing class variables in Options::operator=. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1437:44,variab,variables,44,https://psicode.org,https://github.com/psi4/psi4/pull/1437,2,['variab'],['variables']
Modifiability,"## Description; This PR adds a new psivariable, the overlap between the left and right CC eigenvectors. This was previously tested by `psitest.pl`, but promoting it to a psivar allows the standard `compare_values` machinery to test it. This PR integrates the new psivar into tests of `cc18`. This PR also removes the file `overlap_LAMPS.cc`, which was unused and differs from `overlap.cc` just by a search-replace on the name of the file to which quantities were being written. This is PR 4 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. **Do not merge until** we have approval from @loriab and @lothian, as we are adding a new psivar to the `cc` mega-module. The next stage will be to ensure all variables are set _on the wavefunction_, for testing purposes. This will proceed module-by-module, to minimize the chances of anything getting overlooked. ## Questions; - [x] Are there any Crawford group projects that need `overlap_LAMPS.cc`?; - [x] Please double-check that my assignments of method to ground state name are correct. ## Checklist; - [x] Tests added for any newly testable features; - [x] `cc` tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2443:781,variab,variables,781,https://psicode.org,https://github.com/psi4/psi4/pull/2443,1,['variab'],['variables']
Modifiability,## Description; This PR adds code to the findif codes that allows to save the current geometry and normal modes to a Molden file. Normal mode info is only written if explicitly requested by the user (via the boolean keyword NORMAL_MODES_WRITE). The normal modes are saved in [Molden format](http://www.cmbi.ru.nl/molden/molden_format.html). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Exposes (read only-mode) some variables in the VIBRATIONS class.; - [x] Adds a function to save normal modes info in Molden format.; - [x] Adds an option to write normal modes (false by default).; * **User-Facing for Release Notes**; - [x] Documentation. ## Questions; - [x] Where should the documentation go?; - [x] Suggestions to improve output format?. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644:486,variab,variables,486,https://psicode.org,https://github.com/psi4/psi4/pull/644,1,['variab'],['variables']
Modifiability,"## Description; This PR adds support for the remaining access patterns for EOM oscillator strengths and einstein coefficients. The pieces are now in place to adapt densities and multipoles as well. I'm hopeful that will be the next PR, which should be enough to get 3 of the 4 remaining cc tests ported over. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Infrastructure Change: `ccdensity` and `cceom` now require an incoming `CCEnergyWavefunction`; - [x] Infrastructure Change: `CCEnergyWavefunction` now has a field to store excited state symmetry labels; - [x] Infrastructure Change: Some SharedWavefunction arguments became refernces to CCEnergyWavefunction; - [x] Fully moved `cceom` internal vars to new standard. ## Checklist; - [x] `eom` ctests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2538:158,adapt,adapt,158,https://psicode.org,https://github.com/psi4/psi4/pull/2538,1,['adapt'],['adapt']
Modifiability,"## Description; This PR adds the [SNS-MP2 plugin](https://github.com/DEShawResearch/sns-mp2) to the list of endorsed Psi4 plugins such that the SNS-MP2 method can be called by energy() without the use of any import statements. ## Todos; - [x] Added SNS-MP2 (via endorsed_plugins.py); - [x] Added documentation for SNS-MP2; - [ ] Make sure a full Psi4 install includes SNS-MP2; - [ ] Add tests. ## Questions; - [x] Is there anything I should add to or change about the documentation? (Tagging @rmcgibbo because he wrote the code, as well as @dgasmith and @loriab because of their general Psi4 and documentation knowledge.); - [x] The plugin itself comes with several tests already. Should I incorporate those tests into the standard Psi4 test suite?; - [x] I've borrowed several lines of code for the installation and example [from the plugin's README](https://github.com/DEShawResearch/sns-mp2/blob/master/README.md). Is this ok, or should I change it?. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850:42,plugin,plugin,42,https://psicode.org,https://github.com/psi4/psi4/pull/850,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; This PR adds the [psi4fockci plugin](https://github.com/shannonhouck/psi4fockci) as an endorsed plugin, allowing people to perform generalized spin-flip and IP/EA calculations. ([Related to Issue #1838 here](https://github.com/psi4/psi4/issues/1838).). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Added psi4fockci to endorsed_plugins.py; - [x] Added documentation; - [x] Added tests. ## Questions; - [x] The addition of the psi4fockci tests seem to be breaking test_psi4_cas; it fails with a ""Fatal Error: CIWavefunction: Iterations did not converge!"" error. I presume this is because I'm somehow not cleaning variables correctly; I'm calling core.clean(), core.clean_options(), and core.clean_variables(). Is there one I'm missing?. ## Checklist; - [x] Tests added for psi4fockci; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:45,plugin,plugin,45,https://psicode.org,https://github.com/psi4/psi4/pull/1855,3,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"## Description; This PR changes how `OEProp` saves variables and fixes a bug where ""CC ROOT 0"" variables were not being set. Previously, OEProp overloaded `title_` to refer to both the name used for the density matrix (for print purposes) and for the name used for properties (as a prefix for variable saving purposes). Only one such name can be used.; Now, OEProp uses the density matrix's name as the density matrix's name (for print purposes) and for the names used for properties (for variable saving purposes, and with the generality of format strings). Multiples names can be used. With this, I can now save the CC dipoles as both ""CC DIPOLE"" and ""CC2 DIPOLE"", so ""CC DIPOLE"" can be found. The Psi code that tried to access this was never entered previously because it checked for a 'dipole' variable rather than a 'DIPOLE' variable. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] More flexibility in OEProp names; - [x] Previously missing CC property variables are set. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534:51,variab,variables,51,https://psicode.org,https://github.com/psi4/psi4/pull/2534,7,['variab'],"['variable', 'variables']"
Modifiability,"## Description; This PR changes the code to fix the majority of combinations of `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` keywords which were previously broken. It was discovered that there were a lot of combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` keywords (e.g., `SCF_TYPE = {CompositeJK}` with `SCREENING = NONE`) that would break upon use, either with an exception or with a hard error such as a segfault. PR https://github.com/psi4/psi4/pull/2978 added testing to detect these broken combinations. This PR actually fixes the broken combinations detected through the added test. The most notable change as a result of fixing these issues is the handling of how certain variables within the `TwoBodyAOInt` class are initialized. To enable universal support of JK builds with `SCREENING = NONE`, an option has been added to manually call the `TwoBodyAOInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:682,variab,variables,682,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['variab'],['variables']
Modifiability,"## Description; This PR contains a refactored version of the Dimension class in which data is no longer stored in a `int*` array but on `std::vector<int>`. This eliminates a potential bug of the old code (memory was potentially freed even for a zero-length vector). After working on this PR I realized that the dependency on `int*` runs pretty deep in Psi4. It affects major libraries (dpd, libtrans, libfock,...). So I still had to leave a way to get a `int*` to the data stored in the class member `std::vector<int>` object. Things are slightly complicated also by the fact that Wavefunction exposes Dimension objects via functions that return constant references. Some work was done to reduce the number of Dimension->int* casts. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [X] Modernize the Dimension class.; - [X] Fixes a potential problem with memory.; - [X] Adds exceptions to operations that could potentially involve Dimension objects of different dimensions.; - [X] Avoids exposing non-const Dimension objects.; - [X] Refactors MatrixFactory to use Dimension objects. ## Status; - [X] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:35,refactor,refactored,35,https://psicode.org,https://github.com/psi4/psi4/pull/571,2,"['Refactor', 'refactor']","['Refactors', 'refactored']"
Modifiability,"## Description; This PR covers some miscellanea needed to fully finish the `psimrcc` series, which will close #1877. Ready for review, but not yet merge. I need @fevangelista to answer the questions, and then to run clang format. And then I can assess where I'm at for the libtrans refactor preliminary to the gradient refactor. It'll end one of these days... ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Removes some dead code; - [x] `free_memory_` is now actually used; - [x] Clang formatting. ## Questions; - [x] special_matrices.cc::MatrixBase and derived subclasses currently do not update the free memory. While I can make it update memory, that would require giving each Matrix a wavefunction. Should I add memory costs for this?; - [x] I assumed that the memory cost of the index.cc classes was negligible, as these are three-index or smaller. Should I add memory costs for this?1. ## Checklist; - [x] psirmrcc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1956:282,refactor,refactor,282,https://psicode.org,https://github.com/psi4/psi4/pull/1956,2,['refactor'],['refactor']
Modifiability,"## Description; This PR does cleanup in `dmrgscf` to mark variables const, remove non-RAII dynamic memory, and switch from pointers to references where possible. This PR is in preparation for updating the deprecated molden call. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] DMRG memory and `const` cleanup. ## Checklist; - [x] DMRG tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge **squash**",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2383:58,variab,variables,58,https://psicode.org,https://github.com/psi4/psi4/pull/2383,1,['variab'],['variables']
Modifiability,"## Description; This PR eliminates the old debugging and timer system from `psimrcc`. All debugger code is gone for good, since we have `lldb` and such nowadays. All timer code now uses the more standard `libqt` timer system. This eliminates two globals from psimrcc and several hundreds of lines of code. This also eliminates some functions that were never completely coded. They had no reason to be in the code. This is part of the yak shaving needed for the gradient refactor. Yes, seriously. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Eliminated `psimrcc` globals and standardized timer behavior. ## Checklist; - [x] `ctest -R psimrcc -j4` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1879:470,refactor,refactor,470,https://psicode.org,https://github.com/psi4/psi4/pull/1879,1,['refactor'],['refactor']
Modifiability,## Description; This PR exposes all of libmints and libciomr to plugins via the PSI_API macro. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Expose libmints; - [x] Expose libciomr; - [x] Expose JK and Denominator classes; - [x] Expose Options print functions. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:64,plugin,plugins,64,https://psicode.org,https://github.com/psi4/psi4/pull/1400,1,['plugin'],['plugins']
Modifiability,"## Description; This PR exposes the two functions `compute_orbitals` and `compute_density` from `CubeProperties` to the Python layer. This allows for more flexible dumping of cube files. Example Code:; ```Python; import psi4; import numpy as np. def test_cube_files(expected, computed):; expected = np.genfromtxt(expected, skip_header=9, skip_footer=1); computed = np.genfromtxt(computed, skip_header=9, skip_footer=1); np.testing.assert_allclose(expected, computed, atol=1e-14). mol = psi4.geometry(""""""; O 0 0 0; H 0 0 1.795239827225189; H 1.693194615993441 0 -0.599043184453037; symmetry c1; units au; """"""). psi4.core.be_quiet(); psi4.set_options({'basis': ""sto-3g"",; 'scf_type': 'pk',; 'cubeprop_tasks': ['density', 'orbitals']}); scf_e, wfn = psi4.energy('SCF', return_wfn=True); psi4.cubeprop(wfn). cubegen = psi4.core.CubeProperties(wfn). dt = wfn.Da(); dt.add(wfn.Db()); cubegen.compute_density(dt, ""hf_density""). # obtain alpha coefficients; orbs = wfn.Ca_subset(""AO"", ""OCC"").np; # select the two highest occupied orbitals; occs = orbs[:, -2:]; occs_pm = psi4.core.Matrix.from_array(occs); cubegen.compute_orbitals(occs_pm, [0, 1], [""homo-1"", ""homo""], ""orbital""). test_cube_files(""Dt.cube"", ""hf_density.cube""); test_cube_files(""Psi_a_5_5-A.cube"", ""orbital_2_homo.cube""); test_cube_files(""Psi_a_4_4-A.cube"", ""orbital_1_homo-1.cube""); ```. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] export functions . ## Questions; - [x] ~~Should some tests be added for this? Like in the example code above to be 100% safe?~~ I added a simple test like in the example script to be safe. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:155,flexible,flexible,155,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['flexible'],['flexible']
Modifiability,"## Description; This PR fixes Example 1 of #2231, some GEMM errors in the DCT module in the presence of linear dependencies. There's more debugging to do, but this is a perfectly good standalone bugfix. I also refactored the offending function. Less code duplication, less gratuitous pointers, and eliminated an offset. This PR is anodyne, so getting this in for 1.4 would be appreciated. ## Checklist; - [x] No tests to add? The old code completed successfully because there was a back-up algorithm when the one that was acting up errored out.; - [x] `ctest -R dct` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2232:210,refactor,refactored,210,https://psicode.org,https://github.com/psi4/psi4/pull/2232,1,['refactor'],['refactored']
Modifiability,"## Description; This PR fixes a bug causing TD-DFT and stability analysis to give incorrect results (or diverge) when used with density-fitting and symmetry : more generally, the bug occurs any time JK objects used back-transformed C matrices that weren't totally symmetric. This is ultimately an issue of orbital indexing. When the left index of the generalized C matrix is back-transformed from SO to AO, the blocks need to be flattened together. The code previously combined the blocks from smallest h to lowest h. So columns of irrep `h ^ symmetry_` appear _in order of h ascending_, with the left C assumed totally symmetric. The matrices have different orbital indexing if your right C `symmetry_` is not totally symmetric! This produced inconsistencies when contracting quantities against each other that inherited this indexing. The fix is simple: change the order we back-transform irreps of the right matrix, so the order of orbitals is consistent and `symmetry_`-independent. Closes #2122. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Bugfix: Can now converge TD-SCF with DF and symmetry; - [x] Bugfix: Can now get correct stability analysis with DF and symmetry. ## Checklist; - [x] Tests added for newly working TD-SCF - they pass; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2124:812,inherit,inherited,812,https://psicode.org,https://github.com/psi4/psi4/pull/2124,1,['inherit'],['inherited']
Modifiability,"## Description; This PR fixes a docs fail caused by the previous PR in the series and also adapts a few more tests. Test `cc29` needs another adaptation, but as that will require a new psivar, I'm saving that for the next PR. This is PR 5 in an ongoing series to make `ccdensity` compatible with the standard `Matrix` and `Wavefunction` machinery used elsewhere in Psi. Obligatory @lothian ping for `cc` and obligatory @loriab ping for fixing the docs. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2447:91,adapt,adapts,91,https://psicode.org,https://github.com/psi4/psi4/pull/2447,2,['adapt'],"['adaptation', 'adapts']"
Modifiability,"## Description; This PR fixes a memory leak that was occurring in the Python-side `qcdb` code. The code meant to modify a _class variable_ but was actually creating and modifying an _instance variable_. Initialization happened many more times than needed, and some memory was not being cleared upon object deletion. The only explanation I have for how this produced a memory leak is that having a class variable and an instance variable with the same name confused the Python garbage collector. I was able to confirm object creation and deletion was occurring roughly as expected. ## Checklist; - [x] Confirmed this change reduces the memory footprint for repeated SCF calls. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2349:403,variab,variable,403,https://psicode.org,https://github.com/psi4/psi4/pull/2349,2,['variab'],['variable']
Modifiability,"## Description; This PR fixes a memory leak which I inadvertently introduced myself when refactoring `libdiis`. What I was _trying_ to do was take heap memory and move it into the stack. You can't actually do that. So when I released my `std::vector` from the smart pointer and saved it to a class variable, the memory was _not_ cleared on object delete because it was still heap memory and not stack memory. _Mea culpa_. ## Checklist; - [x] Quick tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2350:89,refactor,refactoring,89,https://psicode.org,https://github.com/psi4/psi4/pull/2350,2,"['refactor', 'variab']","['refactoring', 'variable']"
Modifiability,"## Description; This PR gets rid of the `TaskListComputer` base class, condensing it into `OEProp`, the only class that inherited from it. We gained nothing from having that class around. ## Checklist; - [x] Properties tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2531:120,inherit,inherited,120,https://psicode.org,https://github.com/psi4/psi4/pull/2531,1,['inherit'],['inherited']
Modifiability,"## Description; This PR implements a Huckel guess, based on the routine I recently implemented in ERKALE and described in https://pubs.acs.org/doi/10.1021/acs.jctc.8b01089. The guess reproduces an idempotent density matrix, yielding a variational guess energy. It also appears to be an universal improvement over SAD: because the Huckel guess has energetics, it is able to e.g. adapt to different charge and spin states. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Guess works without symmetry; - [x] Guess works in all symmetries. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1498:378,adapt,adapt,378,https://psicode.org,https://github.com/psi4/psi4/pull/1498,1,['adapt'],['adapt']
Modifiability,"## Description; This PR implements standard grid pruning techniques, where one assumes that the electron density is largely isotropic close to the atomic centre and thus coarse grids are sufficient. Typically the atomic integration sphere is divided into several (3-4) regions where the outer region gets the most accurate grid and the grid get step-wise more coarse towards the inner region(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-ps",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:871,extend,extended,871,https://psicode.org,https://github.com/psi4/psi4/pull/1591,1,['extend'],['extended']
Modifiability,"## Description; This PR introduces an option in the call to `Deriv::compute()` so that the user can specify the type of gradient computation. Currently, this class determines which procedure to follow using an internal logic that is not sufficiently flexible to accommodate plugins. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add deric_calc_type option to `Deriv::compute()`; - [x] Define enum and python interface. ## Checklist; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756:250,flexible,flexible,250,https://psicode.org,https://github.com/psi4/psi4/pull/1756,2,"['flexible', 'plugin']","['flexible', 'plugins']"
Modifiability,"## Description; This PR is a companion to https://github.com/psi4/psi4/pull/2933. The goal of https://github.com/psi4/psi4/pull/2933 is to completely eliminate the `ERISieve` class, for reasons explained there. However, it turns out that eliminating `ERISieve` requires fiddling with the v2rdm_casscf plugin, as well, since it also uses `ERISieve`. This PR is meant to be a deprecation of the `ERISieve` class that will show up in v1.8 in the meantime, in case `ERISieve` isn't fully removed by then. ## User API & Changelog headlines; - [X] Deprecates the `ERISieve` class. ## Dev notes & details; - [X] Fully deprecates the `ERISieve` class C++-side by tagging it with the deprecated attribute.; - [X] Deprecates the `ERISieve` class Python-side by creating helper functions for the Python-facing `ERISieve` functions that warn about deprecation. ## Questions; - [x] Is `PSI_DEPRECATED` the preferred mechanism by which to perform this deprecation?; - [X] Assuming the answer to the first question is ""yes"", are there any other functions in `ERISieve` that should be tagged? I chose specifically the user-facing functions.; - [x] I _loathe_ having to use a global variable for the Python-side helper functions. But, unbelievably, it is what I considered the best one I could think of. I would be very happy to hear out alternative suggestions.; - [ ] Using the `PSI_API` and `PSI_DEPRECATED` macros together to tag the `ERISieve` class cause the compiler to complain. On further exploration, replacing `PSI_DEPRECATED` with its textual definition seems to work fine. Is this an acceptable solution?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935:301,plugin,plugin,301,https://psicode.org,https://github.com/psi4/psi4/pull/2935,2,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"## Description; This PR is a follow-up to https://github.com/psi4/psi4/pull/2906, and what can be considered an official solution to the issue discussed in https://github.com/psi4/psi4/issues/2890. The current issue is that COSX does not work with certain grid configurations - specifically, it does not work with grids that have negative grid weights, due to the use of an intermediate matrix in COSX that uses the square root of negative grid weights. https://github.com/psi4/psi4/pull/2906 ""fixed"" this issue by having COSX throw an exception when grids with negative weights were encountered. This PR provides a COSX reformulation that allows COSX to work with negative grid weights. The reformulation does two primary things:; - The $X$ matrix (Eq. 4 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is redefined as $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$. In words, $X_{\kappa g}$ now uses the square root of the _magnitude_ of the weights, instead of the square root of the raw weights.; - To correct for the above, the computation of the $G$ matrix (Eq. 7 in [Neese 2009](https://doi.org/10.1016/j.chemphys.2008.10.036)) is performed as $G_{\nu g} = \sum_{\tau} \text{sign}(w_{g}) A_{\nu \tau} (r_{g}) F_{\tau g}$ . In words, the sign of the corresponding grid weights are included in the formation of $G_{\nu g}$, when $A_{\nu \tau}$ and $F_{\tau g}$ are contracted. One other thing comes out as a consequence of this:; - For overlap fitting, the numerical overlap matrix $S_{N}$ (Eq. 13 in [Izsák 2011](https://doi.org/10.1063/1.3646921)) is computed as $S_{N} = X * X_{\text{alt}}^{T}$, where $X_{\kappa g} = \sqrt{|w_{g}|} \kappa(r_{g})$ (the same as the first bullet point in the reformulation above), and $X_{\text{alt},\kappa g} = \text{sign}(w_{g}) \sqrt{|w_{g}|} \kappa(r_{g})$. Essentially, $S_{N}$ now uses two variants of the $X$ matrix in its formulation, one of which folds the grid weight sign into itself. ## User API & Changelog headlines; - [X] COSX can",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2931:261,config,configurations,261,https://psicode.org,https://github.com/psi4/psi4/pull/2931,1,['config'],['configurations']
Modifiability,"## Description; This PR is a reimplementation of https://github.com/psi4/psi4/pull/2933; but instead of entirely deleting the `ERISieve` class, it makes `ERISieve` inaccessible for use through the following:. - Using `core.ERISieve.build` now throws an `UpgradeHelper` exception when called, as compared to the previous behavior of giving a warning.; - Calling the `ERISieve` constructor C++-side now throws an exception, with the same message as the UpgradeHelper would give. Aside from that, this PR does the same things as https://github.com/psi4/psi4/pull/2933. `ERISieve` is replaced with `TwoBodyAOInt` in all use cases, with adjustments as necessary. Additionally, the new version of v2rdm_casscf is used, which also uses `TwoBodyAOInt` instead of `ERISieve`. ## User API & Changelog headlines; - [X] Calling `core.ERISieve.build` Py-side, or constructing an `ERISieve` object C++-side, now throws an exception. The removed functionalities, specifically `shell_significant`, can be accessed via the construction of a TwoBodyAOInt object. ## Dev notes & details; - [X] The `ERISieve` class in libmints has been made inaccessible, now throwing exceptions when constructed (with an UpgradeHelper Py-side, and a PSIEXCEPTION C++-side).; - [X] Functionalities in `ERISieve` that were not in `TwoBodyAOInt` and were required in the code, were added to `TwoBodyAOInt`.; - [X] The PKJK files have been adjusted as necessary to support the use of `TwoBodyAOInt`. ## TODO; - [X] Remove ERISieve from all other external plugins (currently focusing on v2rdm_casscf). ## Questions; - N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2974:1516,plugin,plugins,1516,https://psicode.org,https://github.com/psi4/psi4/pull/2974,1,['plugin'],['plugins']
Modifiability,## Description; This PR is meant to replace (now closed) PR #513. The overall goal is to build and install Psi4 in a manner that allows it to be included as a dependency in other packages. ## Todos; - [x] Get tests to pass. Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Supports externally built Pybind11; - [x] Required pulling in PR #557 (*i.e.* this PR includes that one); - [x] No more `LD_PRELOAD` required for MKL; - [x] Factored plugin copy/pasted code so that the next item need only be changed in one place; - [x] Plugins now respect `CMAKE_PREFIX_PATH` and do not clobber it; * **User-Facing for Release Notes**; - [x] `find_package(psi4 CONFIG REQUIRED)` works and respects externally built Pybind11. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563:495,plugin,plugin,495,https://psicode.org,https://github.com/psi4/psi4/pull/563,3,"['CONFIG', 'Plugin', 'plugin']","['CONFIG', 'Plugins', 'plugin']"
Modifiability,"## Description; This PR is the _first part_ of migrating EOM variables to the new standard for variable names, introduced in #2462. Among other things, the new standard gets rid of a longstanding grievance of TDC's: you no longer need to mix up all the irreps. This PR is content to migrate energy variable names. Other EOM variables go through `oeprop`, which will be a follow-up PR. A comprehensive test of EOM naming conventions is deferred to Pt. 2. This PR also contains misc. minor EOM cleanup I did while trying to understand the big picture of the code. More cleanup is possible, but you need to give EOM a wavefunction first, which is far outside the scope of this PR. Obligatory pings to @loriab and @lothian. ## Todos; - [x] Improve cc docs; - [x] Rename EOMCC energy variables to new standard ; - [x] Creates new EOM tag for tests . ## Checklist; - [x] All cc tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2475:61,variab,variables,61,https://psicode.org,https://github.com/psi4/psi4/pull/2475,5,['variab'],"['variable', 'variables']"
Modifiability,"## Description; This PR is the first in a series of planned PRs designed to remove density screening from the TwoBodyAOInt object and into the JK object. Having density screening available in TwoBodyAOInt runs the risk of applying density screening to algorithms where density screening doesn't make sense. Thus, it would be a good idea to move the logic of density screening to where it is more correctly applied, i.e., the JK object. This PR solves two issues simultaneously:. 1. The primary purpose of this PR is to change the test_erisieve.py tests to work with the planned future density screening refactor. One issue that moving density screening from TwoBodyAOInt to JK currently brings up, is that it causes the tests on density screening within the pytest test_erisieve.py to fail. These failures occur because test_erisieve.py performs its screening tests directly using an ERI object generated by IntegralFactory. With density screening being removed from the TwoBodyAOInt object, this method of density screening testing can no longer be done. The current PR is designed to address this issue for when the density screening refactor happens. The aforementioned issue is addressed by implementing a new variable to the HF wavefunction, computed_shells_per_iter_, which keeps track of the number of shell quartets computed per SCF iteration. The computed_shells_per_iter_ variable is accessible to the user via Python, and thus can be used to conduct screening tests. In this way, density screening tests can be performed without the need for an ERI object. 2. As a bonus from the changes introduced by this PR, the DirectJK algorithm no longer has a need to print computed shell quartet counts to bench.dat. Bench.dat is used exclusively by the DirectJK object to dump the number of shell quartets computed per SCF iteration somewhere. That data is now accessible to the user in a cleaner fashion - it can be accessed through Python, in a manipulatable format. ## Notes; 1. Note that the ch",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:603,refactor,refactor,603,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['refactor'],['refactor']
Modifiability,"## Description; This PR makes changes so that `Psi` can do DIIS on an `ambit.BlockedTensor`, as required by the `forte` plugin. This PR will not work until [this ambit PR](https://github.com/jturney/ambit/pull/53) is merged, but passes locally. The test suite tells us little about this one, sadly. @loriab, I leave it up to you whether this warrants an update to the version of ambit that Psi takes. @fevangelista @lcyyork. ## Status; - [x] Ready for review; - [ ] Leave merging to me",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2505:120,plugin,plugin,120,https://psicode.org,https://github.com/psi4/psi4/pull/2505,1,['plugin'],['plugin']
Modifiability,"## Description; This PR makes small changes to the `PsiException` class, specifically regarding the printout of the function call stack upon throwing. Now, the number of functions included in the printed call stack during exception printout is tied to a singular variable, instead of being scattered about in multiple places. The goal is to allow easier control of the function call stack size during printout for debugging purposes, if desired. . There are a couple small cleanups here and there as well. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] N/A. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [X] All separate instances of function call stack printout sizes have been replaced with a single variable definition.; - [X] The `Stack` variable now uses a `std::array` instead of a `std::vector`.; - [X] Uses of `&Stack[0]` have been replaced with `Stack.data()`. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3179:263,variab,variable,263,https://psicode.org,https://github.com/psi4/psi4/pull/3179,3,['variab'],['variable']
Modifiability,"## Description; This PR makes two small improvements to the `JK` class and SCF code. These improvements simplify the addition of new JK algorithms to Psi4, particularly an upcoming semi-numerical exchange. The first change is transferring the responsibility of zeroing out the `J`, `K`, and `wK` matrices from the parent `JK` class to each derived `JK` class. This makes it easier to implement JK algorithms which build the fock matrix incrementally. (i.e. use the difference in density between SCF iterations to compute differences in J/K). With this change, much of the incremental fock code in the `DirectJK` class can be simplified. The second change is the addition of an `early_screening_` member variable to the `JK`. The idea is that some future JK algorithms will increase performance by using looser screening procedures/thresholds in early SCF iterations. Screening is then tightened as the SCF approaches convergence. This logic was added to the SCF driver. The `early_screening_` variable defaults to false for all existing JK classes, so there is currently. no change in behavior. ## Todos; - [x] Derived `JK` classes are responsible for zeroing their matrices; - [x] JK screening is SCF iteration dependent. ## Questions. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2529:703,variab,variable,703,https://psicode.org,https://github.com/psi4/psi4/pull/2529,2,['variab'],['variable']
Modifiability,"## Description; This PR moves `fnocc`'s pair energies to the same standard used by `cc`: report MP2 and CC, separate by spin, and construct spin-adapted pair energies as well. The diff is mostly changes in the reference file, so the LoC count is inflated. ## Todos; - [x] Standardize `cc` pair energies. ## Checklist; - [x] `fnocc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2568:145,adapt,adapted,145,https://psicode.org,https://github.com/psi4/psi4/pull/2568,1,['adapt'],['adapted']
Modifiability,"## Description; This PR moves the Polarizable Embedding (PE) tests using CPPE py-side in `test_cppe.py`.; The tests can now be run independently of the configure step (`ENABLE_cppe`) due to runtime detection of CPPE.; As such, the CI pipeline will run the PE tests from now on 😄 . ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move tests; - [x] Nuke old (cmake) tests. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2140:152,config,configure,152,https://psicode.org,https://github.com/psi4/psi4/pull/2140,1,['config'],['configure']
Modifiability,"## Description; This PR moves the printing of the SCF pre-iteration header from `scf_iterate` (where we had to check the number of iterations to know if we needed to print) to the SCF initializer (where no checks are needed). This can and should wait until 1.5. This is part of a larger project to remove overloading of the `iterations_` variable in HF, needed to get MOM properly working. ## Questions; - [ ] Do we need to regenerate samples for this? The printing should be exactly the same except in pathological corner cases involving SOSCF instabilities at less than two iterations. ## Checklist; - [x] quick tests pass. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2247:338,variab,variable,338,https://psicode.org,https://github.com/psi4/psi4/pull/2247,1,['variab'],['variable']
Modifiability,"## Description; This PR perfects the `fcidump` interface by adding a field that stores the point group symmetry (`PNTGRP`, just to keep it in the FORTRAN spirit of ""Thou shall use no unnecessary vowels in variable names""). For example:; ```; ORBSYM=1,1,1,1,4,4,4,3,3,3,2,2,2,; ISYM=1,; PNTGRP=D2H,; ```; Why is this change necessary? In essence because with the current information it is impossible to restart a computation that uses symmetry. Without the point group information, one cannot determine the psi4 irrep labels of orbitals from the standard information contained in the FCIDUMP file (see issue #1431) because when the file is written the irreps are resorted in a way that depends on the point group. One potential issue: codes that consume FCIDUMP files produced by psi4 could encounter problems parsing the line that starts with `PNTGRP`. So I made this extra line optional via an argument passed to the `fcidump()` python function. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add point group information to fcidump files (enabled via bool argument); - [x] Fix a bug in the function that reads fcidump files when no orbital energies are present. ## Checklist; - [x] Updated `fcidump` test. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1942:205,variab,variable,205,https://psicode.org,https://github.com/psi4/psi4/pull/1942,2,['variab'],['variable']
Modifiability,"## Description; This PR provides a more useful error message when the issue described in https://github.com/psi4/psi4/issues/2890 is encountered. In short, the COSX K build method breaks with certain grid configurations - specifically, grid configurations which result in negative grid weights. How to best handle that issue - removing such grid configurations from Psi4 entirely, handling negative grid weights differently within COSX itself - is still under discussion, and this PR is _not_ meant to be a final fix to the aforementioned issue. Rather, this PR is meant to provide a more informative error message in the case that an end user _does_ encounter this error. Currently, when this error is encountered, it shows up as either a DGESV error (if the initial COSX grid has negative weights) or an ADIIS minimization error (if the final COSX grid has negative weights). These error outputs don't help the end user figure out what is wrong at all. So, what this PR does, is add sanity checks to ensure that the COSX grids don't have negative weights, and throw an exception if they do. The sanity check exceptions explain to the user what the error is and how they can fix it (i.e., changing the grid pruning scheme and/or number of spherical points). Again, I want to emphasize that this is _not_ intended to be a full fix to https://github.com/psi4/psi4/issues/2890. Rather, it is an intermediate step that is designed to better help end users avoid the problem if they run into it themselves. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Add sanity checks to COSX to ensure that neither of the COSX grids have negative grid weights. An exception is thrown if either of the grids do. ## Questions; - [x] Probably better discussed on https://github.com/psi4/psi4/issues/2890, but how do we want to officially solve this problem? There has been some discussion on simply removing grid configurations which lead to negative weights, as well as discussions on reformulati",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2906:205,config,configurations,205,https://psicode.org,https://github.com/psi4/psi4/pull/2906,3,['config'],['configurations']
Modifiability,## Description; This PR refactors EFP routines such that they use the mints functions I implemented for PE a while ago.; Less code and a significant speed-up for the electric field integral evaluations. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Move `efp.py` to `solvent` folder; - [x] Refactor functions. ## Questions; - [x] Question1. ## Checklist; - [x] Tests added for any new features (already present); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111:24,refactor,refactors,24,https://psicode.org,https://github.com/psi4/psi4/pull/2111,2,"['Refactor', 'refactor']","['Refactor', 'refactors']"
Modifiability,"## Description; This PR refactors `ThreeCenterOverlapInt` using Libint2. Even though one cannot compute these integrals directly, it's possible to obtain them through the delta function: `<phi(r_1) phi(r_1)| delta(r_1 - r_2) | phi(r_2) 1>`. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] 3-center overlap integrals with L2. ## Checklist; - [x] Tests added for any new features (SAPT-DFT still working, Python API via `MintsHelper` tested locally 👍); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2489:24,refactor,refactors,24,https://psicode.org,https://github.com/psi4/psi4/pull/2489,1,['refactor'],['refactors']
Modifiability,"## Description; This PR refactors angular momentum integrals (`AngularMomentumInt`) using the McMurchie-Davidson scheme. It is the first PR of a series to replace most of the existing OS86 code with M-D (#2414). I've chosen the angular momentum integrals because they are really simple and only require the E matrix (Hermite-to-Cartesian conversion factors). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] `AngularMomentumInt` w/ M-D scheme. ## Questions; - [x] Is it worth to pre-allocate the E-matrix? This would require some boilerplate code, which could be worth packing into a small class that all future M-D integrals will inherit from?. ## Checklist; - [x] Tests added for any new features (consistency check against Psi4 v1.5); - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2483:24,refactor,refactors,24,https://psicode.org,https://github.com/psi4/psi4/pull/2483,2,"['inherit', 'refactor']","['inherit', 'refactors']"
Modifiability,"## Description; This PR refactors the existing `PseudospectralInts` (untested, unused, but maybe needed at some point, see #2414); with some refactoring: The ""old"" `PseudospectralInts` did compute `<p| 1/R |q>` *or* `<p| erf(omega*R)/R |q>` with `R = |r -r_c|` for some given point/origin `r_c`. . - The class `PseudospectralInts` is removed. To compute the ""normal"" Coulomb potential at a given origin, one can use either `MultipolePotentialInt` (with `max_k=0`) *OR* `ElectrostaticInt`.; - To compute the erf-attenuated Coulomb potential, I created a new class named `PotentialErfInt` to better reflect the actual ""property integral"" being computed. For testing purposes, I also added the erfc-attenuated Coulomb potential (`PotentialErfComplementInt`), maybe they're also useful at some point. Both use L2 under the hood.; - The point `r_c` is canonically set with `set_origin`.; - I've added the new integrals to `MintsHelper` and the Python API.; - Tests are added. (`erf(infinity*R)/R = 1/R`, `erfc(0*R)/R = 1/R`, and `1/R - erf(R)/R - erfc(R)/R = 0`). This is a preparation to get rid of most of the remaining OS86 code as discussed in #2414.; Ping @loriab @zachglick @andysim . ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473:24,refactor,refactors,24,https://psicode.org,https://github.com/psi4/psi4/pull/2473,2,['refactor'],"['refactoring', 'refactors']"
Modifiability,"## Description; This PR removes several `new`, `delete`, `block_matrix`, and `free_block` calls in `cubeprop`. I was hoping to eliminate all such calls in order to use `cubeprop` as a test case to study memory management in Psi, but I can't finish the job without refactoring `BlockOPoints`, which is far outside the scope of the PR. ## Checklist; - [x] `cubeprop` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2345:264,refactor,refactoring,264,https://psicode.org,https://github.com/psi4/psi4/pull/2345,1,['refactor'],['refactoring']
Modifiability,"## Description; This PR removes some convergence checks in the `dct` module that are redundant (when formulated correctly) and currently not implemented correctly. In the current `dct` code, my threaded computations with near linear dependencies were taking a variable number of iterations to converge, due to the condition `update_scf_density_RHF() < orbitals_threshold_` being false. That check is _intended_ to enforce convergence of the orbitals, which change iteration-to-iteration. `update_SCF_density_RHF` returns a measure of how much the reference density changed but does not treat it with an orthogonalizer, so in the near linearly-dependent case, numerical noise leads to the computation proceeding even after all other convergence metrics are flat. Given the choice between fixing the check or removing it, this PR removes it.; * In the case where orbitals are optimized to _satisfy a commutator equation_, all of our orbital convergence metrics are motivated by SCF. We already have the SCF check for small orbital residual elsewhere in the code. We don't check that the absolute change in the density is small in the SCF case, so we shouldn't check it here, either.; * In the case where orbitals are optimized to _minimize the energy_, there is no theoretical justification for this check. We have existing checks that the residual of the orbital gradient is small. ## Todos; - [x] Removes an unnecessary, buggy `dct` convergence metric. ## Checklist; - [x] `dct` tests still pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2381:260,variab,variable,260,https://psicode.org,https://github.com/psi4/psi4/pull/2381,1,['variab'],['variable']
Modifiability,"## Description; This PR removes ~300 lines worth of duplicate code in `dct`'s density-fitting, as well as some class variables that had no business being class variables. This is in preparation for an upcoming PR to fix a longstanding bug in the density-fitted code. ## Todos; - [x] Code cleaned. ## Checklist; - [x] DCT tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2078:117,variab,variables,117,https://psicode.org,https://github.com/psi4/psi4/pull/2078,2,['variab'],['variables']
Modifiability,"## Description; This _will eventually_ conclude the standardizing of excited state variable names across all of Psi and the docs. Right now, this just standardizes TD-DFT psivars for final comments. This is a short-and-sweet spec of the new standard that I'm putting up for comments. (Largely from @loriab). ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Excited state psivar final cleanup. ## Checklist; - [x] TDDFT tests pass; - [x] ADC tests pass; - [x] EOM tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569:83,variab,variable,83,https://psicode.org,https://github.com/psi4/psi4/pull/2569,1,['variab'],['variable']
Modifiability,## Description; This branch is just a sandbox for me to query / update the Windows Azure config. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2018:38,sandbox,sandbox,38,https://psicode.org,https://github.com/psi4/psi4/pull/2018,2,"['config', 'sandbox']","['config', 'sandbox']"
Modifiability,"## Description; This change allows F_DGEMV to be called (when using plugins, for example) without modifying the source code in fnocc/blas.cc and recompiling Psi4. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1046:68,plugin,plugins,68,https://psicode.org,https://github.com/psi4/psi4/pull/1046,1,['plugin'],['plugins']
Modifiability,"## Description; This code removes `oeprop`'s specialized dipole/quadrupole functions in favor of the general multipole function. The output for dipoles _does_ change. I can change the printout if there's demand for it, but I don't care either way. I just want to have less code to mess with for the next stage of excited state variable cleanup. ### Old Function; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]. Properties computed using the SCF density matrix. Nuclear Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.9783. Electronic Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: -0.1680. Dipole Moment: [e a0]; X: 0.0000 Y: 0.0000 Z: 0.8103 Total: 0.8103. Dipole Moment: [D]; X: 0.0000 Y: 0.0000 Z: 2.0595 Total: 2.0595; ```. ### New Function; See [here](https://github.com/psi4/psi4/pull/2485#issuecomment-1077774801). ## Checklist; - [x] Quick tests pass; - [x] Properties pass . ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2485:327,variab,variable,327,https://psicode.org,https://github.com/psi4/psi4/pull/2485,1,['variab'],['variable']
Modifiability,## Description; This factors the code in the `CMakeLists.txt` of the various plugin templates into one function to avoid; copy/paste. Within this function it then ensures that `CMAKE_PREFIX_PATH` is properly passed to each build in turn allowing the user to build plugins and use externally built Psi4 dependencies. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Adding additional plugin templates to the build system is dramatically simplified; * **User-Facing for Release Notes**; - [x] You can now use external versions of libraries that Psi4 normally compiles with plugins. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:77,plugin,plugin,77,https://psicode.org,https://github.com/psi4/psi4/pull/582,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; This gets the scfitertopy (scf iterations py-side, pb221, pcm py-side) fully operational again with efp py-side. Also extends pyvib2's Molecule dict (often labeled ""molrec"") init and validation to input parsing. This requires two extensions to molrec – one for efp and one for zmat/variables in geometry. Replaces all the c-side constructors (i.e., create_molecule_from_string, init_with_xyz), replacing them with a unified dict, str, arrays constructor. This branch is presently master (reviewed) + pyvib2 (unreviewed) + scfitertopy (semi-reviewed) + newstuff, all rebased so it doesn't align with anything. After pyvib2 makes it into master, I'll rebase and separate into scfitertopy and newstuff, so it can be readily reviewed. This is just getting the commits posted so I can break psi locally yet again. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [ ] Feature1; * **User-Facing for Release Notes**; - [ ] Feature2. ## Questions; - [ ] Question1. ## Status; - [ ] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/919:134,extend,extends,134,https://psicode.org,https://github.com/psi4/psi4/pull/919,2,"['extend', 'variab']","['extends', 'variables']"
Modifiability,"## Description; This is No. 10 of the DDD series, #1351. ## Todos; - mostly a few little differences with ddd that will reduce the changed line overhead; - [x] add logging printing, minimize imports; - [x] `mol = core.Molecule.from_schema(molschemus, nonphysical=True)` allows freq-masses test to run in ddd. nonphysical flag allows user-set atomic masses outside the known isotope range. the schema runner shouldn't be the block to this.; - [x] in tests add some alternate ref values. sometimes these are conventional, which can be handy reusing a test in a non-df program; - [x] adding deprecation warnings is good, but we don't often actually delete the fn promptly at the version we say it will stop working at. this is harmless, in my opinion, as it gives people longer to adapt, and developers can clear away the old fns when they actually become inconvenient. to better reflect this state of affairs, the standard message ""Using blah is deprecated, and in version it will stop working"" has been changed to ""Using blah is deprecated, and as soon as version it will stop working"". this also removes the temptation to keep incrementing <version>, which gives a misleading impression about how long ago users were warned. have backtracked on run_json accordingly from 1.7 to 1.5. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2557:778,adapt,adapt,778,https://psicode.org,https://github.com/psi4/psi4/pull/2557,1,['adapt'],['adapt']
Modifiability,"## Description; This is a more elegant solution to the test failures fixed in #2445. When doing ADIIS/EDIIS, you need to solve a constrained quadratic programming problem. Hu and Yang's ADIIS paper solved the equations by doing a change of variables and throwing the problem at BFGS. Instead, I threw the constrained problem at SLSQP, which is naturally able to incorporate these constraints. All tests pass with no modifications now, and not including the variable transformation simplifies the equations. _What About Other Packages?_; PySCF follows Hu and Yang, and it isn't consistently able to solve the equations. Our friends at HORTON have [a custom solver for such problems](https://github.com/theochem/horton/blob/master/horton/meanfield/scf_ediis.py#L137-L150), but as this problem isn't positive or negative semi-definite, their solver is on the expensive side. ## Checklist; - [x] Passes `ctest` locally. Test suite will cover `pytest. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2449:240,variab,variables,240,https://psicode.org,https://github.com/psi4/psi4/pull/2449,2,['variab'],"['variable', 'variables']"
Modifiability,## Description; This is a non-optimal way out of https://github.com/psi4/psi4/pull/2048#issuecomment-771213188 . Non-optimal b/c libpython will be linked in to enable plugins. All indications are it'll work for v2rdm. Should but so far doesn't work for Forte on Azure. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [ ] Feature1; - [ ] Feature2. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2103:167,plugin,plugins,167,https://psicode.org,https://github.com/psi4/psi4/pull/2103,1,['plugin'],['plugins']
Modifiability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to build a optimized *Psi4* with custom *Python* version. ~~**Depends on #1527**~~. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger optimized builds; - [x] Add an option to choose *Python* version; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `cmake.build_type` with default `Debug` (settable at queuing time); - `python.version` with default `3.6` (settable at queuing time). ## Questions; - [x] For the optimized builds, `MAX_AM_ERI` is set 8. -- 8 is enough.; - [x] Python 3.5 isn't supported. Some dependencies are broken. -- Python 3.5 is dropped. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539:431,config,configured,431,https://psicode.org,https://github.com/psi4/psi4/pull/1539,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,"## Description; This is a part of *Psi4* porting to Windows (#933). Add options to *Azure* pipeline to run all the tests. This can be used after significant changes and before release. This can be used only by users, who have permissions to queue jobs manually on https://dev.azure.com/psi4/psi4 or have their own *Azure* pipelines (e.g. https://dev.azure.com/raimisg/psi4). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add an option to trigger all ctests; - [x] Add an option to trigger all pytests; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `ctest.type` with default `quick` (settable at queuing time); - `pytest.type` with default `quick` (settable at queuing time). ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527:612,config,configured,612,https://psicode.org,https://github.com/psi4/psi4/pull/1527,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,"## Description; This is a stab at fixing #537. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Kills off `BLAS_LIBRARIES`, `LAPACK_LIBRARIES`, `LAPACKBLAS_LIBRARIES` in favor of finding math libs, making a target for them and installing it into the stage tree. By using a target instead of a var:; * Any linker `-Wl,` directives (start/end-group, as-needed) should be invulnerable to CMake link line optimization that rearranges them beyond usefulness.; * targets can be passed into externals so that psi4 and externals use exactly same math libs.; - [x] Same thing with HDF5. Both now in `external/common`; - [x] Added `-liomp5` into MKL detection.; - [ ] Haven't dealt with GCC+MKL OMP; - [ ] Haven't looked at how this may change exporting Psi4 as target; * **User-Facing for Release Notes**; - [x] OpenBLAS now found by the math detection system thanks to a patch from a friendly sysadmin; - [x] Unless `ENABLE_GENERIC` is on, math detection for MKL searches for `mkl_rt.so` before any layered multi-lib scheme. Adapted from @ryanmrichard PRs. Also tacks on `-ldl` to the end of BLAS patterns, since the link-line advisor says so. ## Questions; - @robertodr, @bast, anyone who knows CMake, comments welcome. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591:1083,Adapt,Adapted,1083,https://psicode.org,https://github.com/psi4/psi4/pull/591,1,['Adapt'],['Adapted']
Modifiability,"## Description; This is an enhancement to Psi4 cubeprop library. Cube files are usually plotted using isocontour surfaces with a common iso value. This PR implements the computation of adaptive isocontour values that capture a certain fraction of a MO density (orbital squared) using the least amount of points. This is similar to the approach of Lehtola and Jónsson [J. Chem. Theory Comput. 10, 642–649 (2014)], but appears to be different in the fact that the implementation in this PR uses two isocontour values. The added code just sorts a cube file's grid points and finds a pair of positive and negative isocontour values the satisfy the above definition. The default is to capture 85% of the density, but the user can specify a different value with the new option `CUBEPROP_ISOCONTOUR_THRESHOLD`. The adaptive isocontour range is included in the second comment line of the MO cube files and looks like this; ```; Psi4 Gaussian Cube File.; Property: Psi_a_1_1-Ag. Isocontour range for 85% of the density: ( 0.053504, 0.000000); ```; The user can then inspect the cube file to find the value of the range. However, the recommended way to use this feature is to use an updated version of `vmd_cube` that will be posted shortly and that will automatically plot all cube files using the adaptive ranges saved in the cube files. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Add ability to compute range for densities; - [x] Add documentation of feature; - [x] Add documentation of new options. ## Questions; - [x] Merge the changes done in #822 with this PR?; ## Status; - [x] Ready to go; - [x] Closes #822",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/864:27,enhance,enhancement,27,https://psicode.org,https://github.com/psi4/psi4/pull/864,4,"['adapt', 'enhance']","['adaptive', 'enhancement']"
Modifiability,"## Description; This is an intermediary PR to https://github.com/psi4/psi4/pull/3060. Reviews on that PR have made me reconsider some design decisions as implemented in that PR. At the same time, I want to ensure that no end user runs into any hard failures due to broken `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` combinations in v1.9. So this PR goes and simply throws exceptions for every hard failure case as logged in `test_comprehensive_jk_screening.py`. Tests are updated to match, and there's some small refactoring of how JK type + screening exceptions are handled in `jk.cc.` . ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [x] Broken combinations of `SCF_TYPE` + `SCF_SUBTYPE` + `SCREENING` now throw an exception, instead of running to failure. ## Questions; - [X] N/A. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3081:510,refactor,refactoring,510,https://psicode.org,https://github.com/psi4/psi4/pull/3081,1,['refactor'],['refactoring']
Modifiability,"## Description; This is another minor cleanup PR that I saw was possible while working on a larger project. Three `temp` variables were previously saved to the wavefunction but only needed to be called by one or two functions. Those are better suited to be function variables than class variables, and this PR makes them so. ## Questions; - [x] Fewer class variables means less memory, but re-allocating these matrices every iteration could cause a timing hit. Is this a problem? ~~I expect the time cost to be negligible in comparison with the cost of the BLAS operations, but if anybody believes otherwise, better to say so now.~~ **Negligible in comparison to diagonalization time.**. ## Checklist; - [x] `ctest -L ^scf` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2319:121,variab,variables,121,https://psicode.org,https://github.com/psi4/psi4/pull/2319,4,['variab'],['variables']
Modifiability,## Description; This is part of *Psi4* porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix undefine variable in `psi::CIvect::dcalc2`; - [x] Update passing Windows tests. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219:177,variab,variable,177,https://psicode.org,https://github.com/psi4/psi4/pull/1219,1,['variab'],['variable']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). *FindOpenMP* doesn't yet support *clang-cl*, so the config has to be done manually. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fix OpenMP config for clang-cl on Windonws; - [x] Check if OpenMP config hadn't failed silently. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348:118,config,config,118,https://psicode.org,https://github.com/psi4/psi4/pull/1348,3,['config'],['config']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1225. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1384:187,adapt,adaptation,187,https://psicode.org,https://github.com/psi4/psi4/pull/1384,1,['adapt'],['adaptation']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1226. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1385:187,adapt,adaptation,187,https://psicode.org,https://github.com/psi4/psi4/pull/1385,1,['adapt'],['adaptation']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Revert #1231. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1386:187,adapt,adaptation,187,https://psicode.org,https://github.com/psi4/psi4/pull/1386,1,['adapt'],['adaptation']
Modifiability,"## Description; This is part of *Psi4* porting to Windows (#933). Enable *conda* package building for *Windows* with *Azure*. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Enable package building; - [x] Add conda recipe; - [x] Add an option to trigger package building; - [x] https://dev.azure.com/psi4/psi4 pipeline have to be configured to provide the following variables:; - `conda.build` with default `false` (settable at queuing time). ## Questions; - [x] Currently, the conda recipe is in `conda/win`. Maybe it should be somewhere in https://github.com/psi4/psi4meta/? --> Recipe will stay in `conda/win`, for now. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560:380,config,configured,380,https://psicode.org,https://github.com/psi4/psi4/pull/1560,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Add Appveyor configuration to compile and tests on Windows. Appveyor has to be activated on the repository to work (https://www.appveyor.com/docs/).; - [x] #1181 has to merged before; - [x] #1182 has to merged before; - [x] #1183 has to merged before. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1185:175,config,configuration,175,https://psicode.org,https://github.com/psi4/psi4/pull/1185,1,['config'],['configuration']
Modifiability,## Description; This is part of Psi4 porting to Windows (#933). ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Remove unnecessary headers; - [x] Match function signatures; - [x] Add and remove `return`; - [x] Fix uninitialized local variables. ## Checklist; - [x] ~~Tests added for any new features~~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067:301,variab,variables,301,https://psicode.org,https://github.com/psi4/psi4/pull/1067,1,['variab'],['variables']
Modifiability,"## Description; This is take one at adding the kinetic energy, potential energy, and virial ratio as psivars, for the purposes of `cc` testing. I'm not confident on how this handles PCM, EFP, PE, and point charges, so putting it up very early for feedback. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Kinetic energy, potential energy, and virial energy are added as Psi variables for fully QM HF and CC computations. The variable names are subject to change. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Standardize `E_h` in docs. ## Checklist; - [ ] Do we want tests for the new psivars now, or in the next PR?. ## Status; - [x] Ready for review; - [x] Ready for merge - need Lori re-review.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2769:499,variab,variables,499,https://psicode.org,https://github.com/psi4/psi4/pull/2769,2,['variab'],"['variable', 'variables']"
Modifiability,"## Description; This is the thinmints project that GaTech & CCQC cooked up around May. It's a smaller psi4 with libmints and libraries, no full QC capabilites. It may be useful for deriving plugins (though maybe that needs SCF?), as a basis for psi4numpy, or as a smaller codebase for new programmers. ## Todos; - [x] Unlike in May, this can build both psi4 and thinmints simultaneously. Main copied file is `core.cc` --> `thinmints.cc`.; - [x] I ended up needing to copy a truncated driver. There might be a better way around that.; - [x] Unlike in May, thinmints is now a separate module, in the `import thinmints` sense.; - [x] The test below runs (`python mints2.py`). ```; import thinmints as psi4; psi4.set_output_file(""output.dat"", True). refnuc = 204.01995737868003 #TEST; refscf = -228.95763005849557 #TEST. bz = psi4.geometry(""""""; X; X 1 RXX; X 2 RXX 1 90.0; C 3 RCC 2 90.0 1 0.0; C 3 RCC 2 90.0 1 60.0; C1@13.0 3 RCC 2 90.0 1 120.0; C 3 RCC 2 90.0 1 180.0; C1@13.0 3 RCC 2 90.0 1 240.0; C 3 RCC 2 90.0 1 300.0 # unnecessary comment; H1@2.014101779 3 RCH 2 90.0 1 0.0; H 3 RCH 2 90.0 1 60.0; H 3 RCH 2 90.0 1 120.0; H1@2.014101779 3 RCH 2 90.0 1 180.0; H 3 RCH 2 90.0 1 240.0; H 3 RCH 2 90.0 1 300.0. RCC = 1.3915; RCH = 2.4715; RXX = 1.00; """"""). # Here we specify some of the basis sets manually. They could be written to one or more external; # files and included by adding the directory to environment variable PSIPATH; #; # The format of these external files follows the same format as those below, where there's a [name]; # tag before the standard G94 basis set specification:. # [DZ]; # spherical; # ****; # H 0 ; # S 3 1.00; # 19.2406000 0.0328280 ; # 2.8992000 0.2312080 ; # 0.6534000 0.8172380 ; # S 1 1.00; # 0.1776000 1.0000000 ; # ****; # C 0; # definition of carbon atom DZ basis...; # ****; # Any more atoms needed...; # ****. # The keywords cartesian or spherical are optional and provide default behavior if the; # puream keyword is not set. In basis strings, like below, mul",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1178:190,plugin,plugins,190,https://psicode.org,https://github.com/psi4/psi4/pull/1178,1,['plugin'],['plugins']
Modifiability,"## Description; This is the third PR of the McMurchie-Davidson series, now tackling `MultipolePotentialInt` (used for PE/EFP). ~I'm not happy with the performance yet, so I'll do some profiling to see what could be improved.~. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] arbitrary-order multipole potential integrals; - [x] tests (generalized existing tests); - [x] more equation numbers; - [x] addresses #2499, as discussed in #2496 ; - [x] adapt for Intel compilers (remove structured bindings, etc.). ## Blurb for the Release Notes; - [x] Added the ability to compute integral representations of the derivative of the Coulomb operator (potential, field, field gradient, _etc._), with arbitrary derivative order; the previous Obara-Saika based code was limited to third order derivatives. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for **SQUASH**-merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2504:505,adapt,adapt,505,https://psicode.org,https://github.com/psi4/psi4/pull/2504,1,['adapt'],['adapt']
Modifiability,"## Description; This patch adds an option to FREEZE_CORE called ""policy"", which enables frozen core settings to be looked up from a list specified in the global variable FREEZE_CORE_POLICY. This is more flexible than NUM_FROZEN_DOCC for situations like SAPT where multiple molecules are run in the same command and may require different individual numbers of frozen cores, with settings more customizable than TRUE/FALSE/1/0/-1/-2. This patch addresses some (but not all) issues raised in #2631 by allowing for more flexible policies to be set appropriate to multi-part calculations. . ## Todos; - [x] Add POLICY as option to FREEZE_CORE; - [x] Add global variable FREEZE_CORE_POLICY to hold custom frozen-core policy. ## Checklist; - [x] A functionality test for this flag has been added to `tests/dfmp2-ecp/input.dat`; - [x] `ctest -L quick` runs successfully, which includes the above listed test; - [ ] `ctest ` still in-flight but given the scope of this patch I don't expect any issues. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2667:161,variab,variable,161,https://psicode.org,https://github.com/psi4/psi4/pull/2667,4,"['flexible', 'variab']","['flexible', 'variable']"
Modifiability,"## Description; This pull request adresses https://github.com/psi4/psi4/issues/1116 :. 1.) Split Prop into ; - - Prop: All One Electron convenience accessors and setters and getters, but no access to globals at all. Prop is now only a convenience class, which sets up a few nice accessors.; - - TaskListComputer: This class handles all the compute baseclass elements of Prop, adding, removing tasks from a task queue and computing them. It's very low complexity.; This was done to allow Prop to be easily inheritable without having to implement all the Taskqueue things, which honestly did not have a lot do with Prop itself. This commit makes using Prop inside the code a ton easier.; This was done in commit ; 528c0d7 : https://github.com/psi4/psi4/commit/528c0d719e8bb49b12652417b00db506241a4bee. 2.) Split OEProp in three distinct classes:; - - MultipolePropCalc: This class calculates all multipole properties and mo extents in commit: ; 59005ee https://github.com/psi4/psi4/commit/59005eed1c0bc8b893927284c31386eb4b715f1e; - - PopulationAnalysisCalc: This class calculates Mulliken / Loewdin charges and Bond Orders in commit: a6caee7 https://github.com/psi4/psi4/commit/a6caee7091afc6b0e8071ef0d077f93fcb6c9370; - - ESPPropCalc: This class allows calculation of fields on Grids in commit: ; 325149b https://github.com/psi4/psi4/commit/325149b31751b629486f0478cc5cfe1ee1ec9fb1. The rest of the commits are mostly fixups and linking up the three new classes to the old completely unchanged OEProp class, which now does not calculation itself. Also I implemented an in-memory routine calculating grid properties based on a grid, which was passed on.; The three new classes do not touch any global and no environment. They mostly exist without data storage for the grids, all functions have explicit (and mostly shared pointer return values).; Their complete setup is explicit. All environment variables are only set by OEProp. The reason is again: This allows to the new helpers to be used directl",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1133:505,inherit,inheritable,505,https://psicode.org,https://github.com/psi4/psi4/pull/1133,1,['inherit'],['inheritable']
Modifiability,"## Description; This simplifies some CAS machinery and fixes UKS GGA XC derivatives. ## Todos; * **Developer Interest**; - [x] UKS XC derivates are now (likely) correct through GGA's.; - [x] Fixes silly bug where SCF-level linear response would fail if no OEProp quantities were specified. @ashutoshvt brought this issue up.; - [x] Freezes molecular geometry when setting a variable for cartesian coordinates. @loriab please check this out. Closes #759 and closes #59. If we like this we need fix the odd zmat/cart combined cases.; - [x] Adds SAPT midbond functions for @konpat @loriab ; - [x] Fixes HF3C gradients.; - [x] Makes building molecules slightly safer, closes #765. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/760:374,variab,variable,374,https://psicode.org,https://github.com/psi4/psi4/pull/760,1,['variab'],['variable']
Modifiability,"## Description; Through tests of the `COSX` code, we have discovered numerical instabilities in larger systems, leading to slow convergence for later iterations. We discovered that the version of incremental Fock currently in `COSX` performs `incfock` every iteration, and does not include stability features included in the Incremental Fock PR from #2155 (i.e. Shutting it off every few iterations (resets) as well as shutting it off completely past a certain convergence of the density matrix. This PR refactors the inc. Fock framework in the `DFJCOSK` class with the inc. Fock framework from #2155. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Replace old inc. fock. code from `DFJCOSK` PR with the one from #2155; - [x] Move incfock logic from DirectJK to JK; - [x] Cleans up incfock logic by removing extraneous variables like `initial_iteration_`. ## Questions; - [x] What is the best way to handle JK classes that should never use `incfock` (i.e. `MemDFJK`, `CDJK`, etc.) What I currently do is to just set incfock to false in those cases no matter what. Is there a better way?; - [x] Should DirectJK use `incfock` by default or not?. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [ ] Ready for merge. Example of incfock use in with refactor (Hexane/jun-cc-pVDZ):; Iterations in which inc. Fock is performed has `INCFOCK` appended to the end.; ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @RHF iter SAD: -234.79902648013046 -2.34799e+02 0.00000e+00; @RHF iter 1: -235.11334205670366 -3.14316e-01 3.59965e-03 DIIS/ADIIS; @RHF iter 2: -235.33614986245553 -2.22808e-01 1.58174e-03 DIIS/ADIIS/INCFOCK; @RHF iter 3: -235.38008939725930 -4.39395e-02 2.83807e-04 DIIS/ADIIS/INCFOCK; @RHF iter 4: -235.38291465805983 -2.82526e-03 4.64337e-05 ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:504,refactor,refactors,504,https://psicode.org,https://github.com/psi4/psi4/pull/2682,2,"['refactor', 'variab']","['refactors', 'variables']"
Modifiability,## Description; Turn off plugin testing by default. Turn on for Travis. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] enable plugin testing to be turned off (needed for conda packages); - [x] explicitly turn on plugin testing for Travis CI to keep plugins in working order. ## Status; - [x] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/569:25,plugin,plugin,25,https://psicode.org,https://github.com/psi4/psi4/pull/569,4,['plugin'],"['plugin', 'plugins']"
Modifiability,## Description; Updates plugins to work with the new Python module based Psi4. This required changes to ```__init__.py``` and ```pymodule.py```. It also moves to a CMake build system. ## Todos; Notable points that this PR has either accomplished or will accomplish.; - [x] New CMake based plugins. If you install Psi4 to non-standard location you may need to set ```CMAKE_PREFIX_PATH``` to your Psi4's ```CMAKE_INSTALL_PREFIX``` before configuring your new plugin. Failure to set may result in the plugin not finding Psi4.; - [x] Updates provided plugin templates to use the new architecture. The method of specifying the template has changed to the ```--new-plugin-template templatename``` command line option.; - [x] Adds DF-MP2 plugin template for best practices. ## Status; - [ ] Ready to go,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/489:24,plugin,plugins,24,https://psicode.org,https://github.com/psi4/psi4/pull/489,8,"['config', 'plugin']","['configuring', 'plugin', 'plugin-template', 'plugins']"
Modifiability,"## Description; Updates the SCF one-electron properties computation to allow users to specify which properties should be computed. This applies to all computations besides property computations. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Allows arbitrary one-electron properties to be computed upon SCF energy calls.; - [x] Moves QCSchema to a more flexible metadata approach, this section of code will certainly evolve over time.; - [x] Removes Psi4 v1.1 JSON specification for 1.3 as per the deprecation warning. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1421:404,flexible,flexible,404,https://psicode.org,https://github.com/psi4/psi4/pull/1421,2,"['evolve', 'flexible']","['evolve', 'flexible']"
Modifiability,"## Description; Updates the docs with any undocumented new features in 1.4. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] #1491 (ATM); - [x] #842 (UHF Hess); - [x] #1803 (E(30)ind bug fix); - [x] #2056 (MBIS volumes); - [x] #2081 (SAPT-D); - [x] #2127 (MBIS volume ratios). - [x] #1934 (cct3 plugin); - [x] #1661 (mp2-d gradients). I still have #1721 (Libint2 and shell screening), #1723 (QCSchema Interface), and #1728 (QCSchema Wavefunction Quantities) as being undocumented or incompletely documented. Let me know if I'm wrong here, and any suggestions (or volunteers) on how to complete them are welcome. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2205:353,plugin,plugin,353,https://psicode.org,https://github.com/psi4/psi4/pull/2205,1,['plugin'],['plugin']
Modifiability,"## Description; We often have PRs held up because CI needs fixing. Then all the ""broken"" PRs have to rebase or hit the update button (which means their remotes are out-of-sync with the local branches). The beta GH merge queue might help this, since PRs are built on top of their predecessor, so a CI fix PR can be inserted at the head of the queue. This PR does hopefully the prep work needed and described in:; Following directions at https://docs.github.com/en/repositories/configuring-branches-and-merges-in-your-repository/configuring-pull-request-merges/managing-a-merge-queue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2922:476,config,configuring-branches-and-merges-in-your-repository,476,https://psicode.org,https://github.com/psi4/psi4/pull/2922,2,['config'],"['configuring-branches-and-merges-in-your-repository', 'configuring-pull-request-merges']"
Modifiability,"## Description; When computing a gradient through the `cc` mega-module, the reference wavefunction's density would be overwritten with the correlated wavefunction's density. This was because the CCEnergyWavefunction's `Da_` and `Db_` were exactly the same objects as the reference wavefunction's. Of course changing the object associated with one variable name would change the object associated with the other variable name. They're the same object. This PR makes them different objects, to stop this aberrant behavior. Obligatory @lothian ping to confirm this shouldn't create other problems in the `cc` mega-module.; Obligatory @hokru ping because this should allow eliminating `recompute_scf_density` from #1884. Fixing up the DCT density is next. Developers, please tag as bugfix and 1.4. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Fixed a bug where the `cc` mega-module would set the reference wavefunction's density. ## Checklist; - [x] `ctest -L ^cc -j4` and `ctest -L quick -j4` pass on my Mac. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1962:347,variab,variable,347,https://psicode.org,https://github.com/psi4/psi4/pull/1962,2,['variab'],['variable']
Modifiability,"## Description; When requesting uncoupled induction in RHF-based SAPT0, the final summary still printed Ind20,r instead of Ind20,u as the line title, and no warning was issued about the uncoupled induction stored in the Psi4 variable for coupled induction, contrary to what is happening for open-shell SAPT0.; Solves #907. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **User-Facing for Release Notes**; - [x] Correct printing of titles and warning for uncoupled induction in RHF-based SAPT0. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908:225,variab,variable,225,https://psicode.org,https://github.com/psi4/psi4/pull/908,1,['variab'],['variable']
Modifiability,"## Description; `LEOM_CCSD` is included in the list of EOM methods, but I can find no evidence that this method exists in Psi, other than as an option. This PR removes the option entirely. This brings the EOM methods to create variables for down to EOMCCSD, EOMCC2, and EOMCC3. Per Lori observation, the `LOCAL_GHOST` option is removed as unused. ## Status; - [x] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2467:227,variab,variables,227,https://psicode.org,https://github.com/psi4/psi4/pull/2467,1,['variab'],['variables']
Modifiability,"## Description; `Slice` class is used in Forte. However, recent modifications blinds `Slice` from plugins.; This PR expose `Slice` class as `PSI_API` to be called in plugins. ## Modification; - [x] Added `PSI_API` flag for class `Slice`. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1028:98,plugin,plugins,98,https://psicode.org,https://github.com/psi4/psi4/pull/1028,2,['plugin'],['plugins']
Modifiability,"## Description; `adcc` version of #2462, according to standard #2486. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Consolidate excitation energy/property variable names; - [x] Update tests:; - [x] port to pytest; - [x] test all access patterns; - [x] port PE-ADC tests; - [x] Update docs. ## Questions; - [x] Do I need to add the same kind of ""commented out"" lines as in #2462, @JonathonMisiewicz?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513:216,variab,variable,216,https://psicode.org,https://github.com/psi4/psi4/pull/2513,1,['variab'],['variable']
Modifiability,"## Description; address build issues for FreeBSD packaging @yurivict . ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Killed off the Apple `environ` setting that wasn't being used anymore; * **User-Facing for Release Notes**; - [x] AddOns now have a `CMAKE_INSIST_FIND_PACKAGE_${AddON}` variable whereby you can fail configuration when the right package not detected. That is, no falling back to internal build. ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856:355,variab,variable,355,https://psicode.org,https://github.com/psi4/psi4/pull/856,2,"['config', 'variab']","['configuration', 'variable']"
Modifiability,"## Description; at least let v2rdm configure, compile, and load. the openmp find_components was broken for plugins by #1348. ## Checklist; - [x] tests1--4 work. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1449:35,config,configure,35,https://psicode.org,https://github.com/psi4/psi4/pull/1449,2,"['config', 'plugin']","['configure', 'plugins']"
Modifiability,"## Description; collection of small changes (see below). You can calculate the contribution of any delta correction using the db function:; ```; dcbs=[{""wfn"": ""hf"", ""basis"": ""cc-pvdz""}, {""wfn"": ""mp2"", ""basis"": ""cc-pVDZ""}, {""wfn"": ""ccsd(t)"",""wfn_lo"":""ccsd"", ""basis"": ""minix""}]; db(cbs,'hbc6',cp='on',cbs_metadata=dcbs,subset='small',tabulate=['CBS DELTA1 TOTAL ENERGY']); ```. ## Features; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Delta correction `CBS {stage name} TOTAL ENERGY` variable from `cbs` function. E.g. `CBS DELTA1 TOTAL ENERGY`; - [x] removes a random `~`. Interferes with geometry optimizer print. ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2034:535,variab,variable,535,https://psicode.org,https://github.com/psi4/psi4/pull/2034,1,['variab'],['variable']
Modifiability,"## Description; finish off low-cepa testing and API standardization. ## Todos; - [x] df-lccd from dfocc (tested against @JonathonMisiewicz's p4n impl); - [x] cd-lccd from dfocc (tested against itself); - [x] added ability to do freq with nonphysical masses #1903 (needs qcel 0.15.1); - [x] bumped qcel to v0.15.1; - changes to test_qcel_molparse_to_string are formatting, and updating against expanded test file in qcel. no need for review.; - [x] bumped qcng to v0.15.0; - [x] activated stdsuite. only a couple min extra tests are run in quick. ## Questions; - [x] @bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound? (I'll repeat this Q in a separate comment b/c I'm not sure of GH notifications upon edit.). ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1937:656,variab,variables,656,https://psicode.org,https://github.com/psi4/psi4/pull/1937,2,['variab'],['variables']
Modifiability,"## Description; misc. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] let plugins work with pybind11 v2.6.0; - [x] there was extra testing in the == of cbs() tasks when options was involved (e.g., delta(ae - fc)). but I don't understand it, and it was preventing deduplication. so fixed it; - [x] Susi noticed trouble with ENABLE_XHOST in that the two options directed at Intel and GCC are valid cross-options. this is a workaround. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2028:133,plugin,plugins,133,https://psicode.org,https://github.com/psi4/psi4/pull/2028,1,['plugin'],['plugins']
Modifiability,## Description; move dft-bench and vibanalysis tests to pytest. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] move the 4 dft-bench tests to pytest with parameterization; - [x] move the vibanalysis test to pytest; - [x] add IR intensity benchmarks from Cfour so #1382 has something to test against; - [x] delete the ctest versions; - [x] add in `pytest.mark.long` to avoid running some bench routinely. ## Questions; - [ ] Question1. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1414:204,parameteriz,parameterization,204,https://psicode.org,https://github.com/psi4/psi4/pull/1414,1,['parameteriz'],['parameterization']
Modifiability,"## Description; part III of let there be conda after the recent merge flurry. ## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] As it is, downstream plugins won't find Python.h . This passes the right include dir so they can and prompts updating cmake so new detection can be used. naturally, v2rdm showed this up.; - [x] bump minimum gcc to 6. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2096:206,plugin,plugins,206,https://psicode.org,https://github.com/psi4/psi4/pull/2096,1,['plugin'],['plugins']
Modifiability,## Description; test module plugin on windows. ## Status; - [ ] Ready for review; - [ ] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2099:28,plugin,plugin,28,https://psicode.org,https://github.com/psi4/psi4/pull/2099,1,['plugin'],['plugin']
Modifiability,"## Description; testing, minao, build fixes. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] Update Psi4 CMake version to 1.1 and tell plugins to seek it. Feel free to toggle if it gives problems in transition.; - [x] Fix build bug where working default compilers were required for pybind11, even if `CMAKE_CXX_COMPILER` (and `C`) passed in; - [x] Semi-brings Forte into endorsed plugin and tested status. Need to resolve Options & plugin loading or employ hack to make pytest Forte work, and that's a moving target, so disabled for now.; - [x] Reenable scf hessian testing, incl. one in quicktests; - [x] Get rid of threading test that was xfailing and unnerving everyone. Document pytest output.; * **User-Facing for Release Notes**; - [x] Add Sc–Kr (Br already there) cc-pvtz MINAO basis sets from CiCi. ## Questions; - [ ] Need to resolve MINAO definition for Groups I & II at some point. ## Status; - [x] Ready to go – Should merge this near #725, as both touch fundamental headers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/726:202,plugin,plugins,202,https://psicode.org,https://github.com/psi4/psi4/pull/726,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"## Description; very much misc. ## Todos; - [x] update CheMPS2 target to v1.8.9. update min to 1.8.7. I've no evidence that the old min doesn't work, but there have been some build commits since then.; - [x] fill in missing tests comment lines; - [x] since the same feature has broken v2rdm _twice_ in the past month, let's back up the target commit and avoid it.; - [x] update some plugin template syntax, add missing v2rdm7 syntax. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1515:383,plugin,plugin,383,https://psicode.org,https://github.com/psi4/psi4/pull/1515,1,['plugin'],['plugin']
Modifiability,"## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Modernize the `cc` virial theorem tech to use `Matrix` rather than `block_matrix`. This takes us one step closer to having `Matrix`-based densities. ## Questions; - [x] New code uses stored HF kinetic energy, rather than re-computing it. TDC, is this okay?; - [x] The variables are saved to the wavefunction, but not to globals. Lori, is that okay?. ## Checklist; - [x] `cc1` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2782:508,variab,variables,508,https://psicode.org,https://github.com/psi4/psi4/pull/2782,1,['variab'],['variables']
Modifiability,"## Information:. I have two versions of boost installed on my system. ; - I installed boost 1.59 in a conda env using the ([recipe](https://github.com/conda/conda-recipes/tree/b9570c14d5a25ac88b98c6c597365bfcba4174ce/boost)) from the condo/conda-recipies repo ( before the boost recipe was upgraded to 1.60.0). Installed in `$HOME/anaconda/envs/psi4-py2.7` ; - Hombrew boost 1.60.0 installed in `/usr/local/Cellar` and linked by hombrew to `/usr/local`; - I am using CMake 3.2.2; ## Problem:; 1. If I pass the setup args `--boost-libdir/incdir` or the CMake flags `DBOOST_INCLUDEDIR/LIBRARYDIR` ; CMake will report boost version 1.59.0, but actually only set the `INCLUDE` paths correctly, and the `LIBRARY` paths all point to the binaries for 1.60.0 leading to errors in the linking step. ; 2. If I `brew unlink boost` then FindBoost.cmake seems to find boost 1.59.0 as I intended, but then the `Boost_FOUND` variable is ignored and the pre-packaged boost 1.55 is configured to build anyway. ; ## Details/Examples. If I run this setup command:. ```; ./setup --prefix=$HOME/psi4-install \; -DBOOST_INCLUDEDIR=$HOME/anaconda/envs/psi4-py2.7/include \ ; -DBOOST_LIBRARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //B",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:910,variab,variable,910,https://psicode.org,https://github.com/psi4/psi4/issues/313,2,"['config', 'variab']","['configured', 'variable']"
Modifiability,"## Todos. Notable points that this PR has either accomplished or will accomplish.; - [x] there were some Boost.Python class inheritance issues when Boost linked dynamically, so rolling that back; - [x] install boost lib.a and headers when build custom Boost (needed by plugins); - [x] notes on building `psi4.so` with Intel+static; ## Status; - [x] Ready to go",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/425:124,inherit,inheritance,124,https://psicode.org,https://github.com/psi4/psi4/pull/425,2,"['inherit', 'plugin']","['inheritance', 'plugins']"
Modifiability,"## Todos; <!-- Notable points (developer or user-interest) that this PR has or will accomplish. -->; - [x] Add a GHA to build the docs for every PR; * gives us advance warning if the docs break, rather than having to watch master; * advance warning is particularly necessary since the warnings-to-errors and nitpicky flags are on. these make sure links (functions, options, etc) aren't dead and that lists don't end up as mushed text.; * unlike #2364, this isn't ambitious by building a website preview and writing a comment to the PR. but it does provide a tarball of the docs as a GHA artifact, so you can download, unpack, and view it locally in a browser. this happens whether the build succeeds or fails.; * the new docs-pr.yml file looks so close to docs.yml, that you could argue for merging them. However, I think they could develop differently, with the master one also doing samples commits and auto-formatting, while the PR one does linting like add-a-comment-to-that-test or reformat warnings.; - [x] a filesystem.py file could be easily replaced by pathlib. ## Checklist; - ~Tests added for any new features~; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) Plugin tests generate and run. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2607:1261,Plugin,Plugin,1261,https://psicode.org,https://github.com/psi4/psi4/pull/2607,1,['Plugin'],['Plugin']
Modifiability,"## User API & Changelog headlines; - [x] A segfault in `Matrix::transpose` for matrices that are not totally symmetric now performs the transpose.; - [x] A segfault in `Matrix::transpose_this` for matrices that are not totally symmetric now raises an error message. . ## Dev notes & details; - [x] All the above, plus...; - [x] Tests that the above works!; - [x] Removing variable declarations before initialization.; - [x] Reorganized logic in symmetric case for clarity. . ## Checklist; - [x] Tests added for any new features. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2740:372,variab,variable,372,https://psicode.org,https://github.com/psi4/psi4/pull/2740,1,['variab'],['variable']
Modifiability,"## XYZ Files. Just as an aside, here's two easier ways to deal with molecules when you have the coordinates. chg/mult from the xyz are possible https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_string.py#L117-L136. tu1.py; ```; import psi4. psi4.set_memory(""600 mb""). ### <<< Either ; #with open(""h2o.xyz"") as fp:; # fh2o = fp.read(); #; #psi4.geometry(fh2o). ### --- Or. h2o = psi4.core.Molecule.from_arrays(elem=[""O"", ""H"", ""H""], units=""Angstrom"", geom=[; 0.000000000000, 0.000000000000, -0.065775570538, ; 0.000000000000, -0.759061990794, 0.521953018295, ; 0.000000000000, 0.759061990794, 0.521953018295]) ; psi4.activate(h2o). ### >>> End. psi4.set_options({; ""basis"": ""cc-pVDZ"",; }); psi4.energy('scf'). psi4.compare_values(-76.0266327341067125, psi4.variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```. h2o.xyz; ```; 3; sdlkfs; O 0.000000000000 0.000000000000 -0.065775570538 ; H 0.000000000000 -0.759061990794 0.521953018295 ; H 0.000000000000 0.759061990794 0.521953018295 . ```; ## Single Core. To actually address your problem, can you try the following edits? If you edit the installed copy, no recompile needed. Hopefully this solves it -- thanks for the report!; ```; diff --git a/psi4/driver/procrouting/empirical_dispersion.py b/psi4/driver/procrouting/empirical_dispersion.py; index d23f016..ea4f79d 100644; --- a/psi4/driver/procrouting/empirical_dispersion.py; +++ b/psi4/driver/procrouting/empirical_dispersion.py; @@ -213,7 +213,7 @@ class EmpiricalDispersion(object):; resi,; self.engine,; raise_error=True,; - local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}); + local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path(), ""ncores"": core.get_num_threads()}); ; dashd_part = float(jobrec.extras['qcvars']['DISPERSION CORRECTION ENERGY']); if wfn is not None:; @@ -231,7 +231,7 @@ class EmpiricalDispersion(object):; resi,; ""gcp"",; raise_error=True,; - local_options={""scratch_director",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:781,variab,variable,781,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['variab'],['variable']
Modifiability,"### Storing data on `Wavefunction` instances. #### Choices (dipole gradient used as example). - (a) store in dedicated slot, `wfn.dipole_gradient_`. access through `wfn.dipole_gradient()`; - (b) store in `wfn.arrays_`. access through `wfn.variable('CURRENT DIPOLE GRADIENT')` or `wfn.variable('MTD DIPOLE GRADIENT')`; - (c) do (b) but also accessible through `wfn.dipole_gradient()` which just performs `wfn.arrays_` lookup; - (d) store in both `wfn.dipole_gradient_` and `wfn.arrays_` (memory-independent copies). access through `wfn.dipole_gradient()` (former) or `wfn.variable('CURRENT DIPOLE GRADIENT')` (latter) or `wfn.variable('MTD DIPOLE GRADIENT')` (latter). #### Present; - E/G/H are (d) and both, either, or neither may be set or consistent. even for energies, these haven’t been thoroughly rolled out past SCF.; - non-E/G/H are (b). #### Future; - E/G/H; - first (v1.4) work on getting data set in both places (reserved slot (e.g., `energy_`) and map (i.e., `variables_`)); - next cycle (v.1.5) do (c); - next next cycle (v1.6) do (b); - non-E/G/H, do (c)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883#issuecomment-449694968:239,variab,variable,239,https://psicode.org,https://github.com/psi4/psi4/issues/883#issuecomment-449694968,4,['variab'],['variable']
Modifiability,"### Upgrade Guide. * `property(...)` --> `properties(...)`; * If you have a (non-py-only) plugin, ; * Add `PSI_API` to your plugin code in [this pattern](https://github.com/edeprince3/v2rdm_casscf/commit/7d4507d8979b61b3333fc6ceab450a61392836ff); * If, upon rebuilding against psi4, you get symbol not found errors, run `c++filt` on the mangled symbol name, then add `PSI_API` to the psi4 repo to make sure the `core.so` you're linking against is exporting the symbol you need. See example [here](https://github.com/psi4/psi4/pull/955). Or just file an issue with your lost symbol.; * Note that anyone wanting to re-use an objdir will need to **thoroughly** remove the old pybind11 v2.0.0 from detectability. This means:; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/includes/pybind11`; * `<objdir> rm -rf stage/<TAB-TAB-...-TAB>/share/cmake/pybind11`; * `<objdir> rm -rf external/upstream/pybind11`; * Intel 2016 is no longer a valid compiler (doesn't work with py11 >=2.2.1)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959#issuecomment-381256278:90,plugin,plugin,90,https://psicode.org,https://github.com/psi4/psi4/issues/959#issuecomment-381256278,2,['plugin'],['plugin']
Modifiability,"### conda stage (cont.). * build the stack in the usual `***` configuration on L & M. should be (`psi4`, `psi4-rt`, `psi4-dev`) * python_versions for L & M. Also single `psi4-docs` from L.; * Poodle emits with `--label dev` so upload there to the subchannel directly. may need to clear out space.; * Go through each active conda package off https://anaconda.org/psi4/repo, find the most recent build set (L/M, active py versions) that psi/psi-rt/psi-dev is using and _add_ (not replace) the `main` label. this makes a `conda install psi4 -c psi4` get everything psi4 needs. for the moment `conda install psi4 -c psi4/label/dev` will get the same set, until package psi4-1.4a1.dev1 gets uploaded. may help to check versions and build versions against ltrtver in conda_build_config.yaml. this step takes a while. ### constructor stage. * move into constructor_cutter_unified. there's a rEADME there. ; * edit pythons if necessary; * edit release/hash/ltrtver of cookiecutter.json .; * for non-rc's channel_tag should be empty string; * leave git set to a `rc` since that has more details; * copy cookiecutter.json to cookiecutter.json-vXXX; * cookiecutter/{{.../construct.yaml rarely needs editing; * do clear out .constructor so that everyting downloaded afresh; * clean out build/; * python run.py check for an py_ bad noarch pkgs; * if fetching times out, may have to run run.py several times. clear out build/ in between. it's the fetching that takes a long time, not constucting; * in the end, should have several constructors; ```; >>> lh build/psi4conda-1.3-py3.*/*64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 516M Feb 28 20:30 build/psi4conda-1.3-py3.6-linux-64/psi4conda-1.3-py36-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 299M Feb 28 20:31 build/psi4conda-1.3-py3.6-osx-64/psi4conda-1.3-py36-MacOSX-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluser 518M Feb 28 20:30 build/psi4conda-1.3-py3.7-linux-64/psi4conda-1.3-py37-Linux-x86_64.sh; -rwxr-xr-x. 1 psilocaluser psilocaluse",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372:62,config,configuration,62,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-468535372,1,['config'],['configuration']
Modifiability,"#### filesystem. By my survey, libfilesystem occurs at:; - [ ] plugins. due for an overhaul. Skipping plugin use on Windows until overhaul seems reasonable to me.; - [x] fisapt. dependency removed in #1098 ; - [x] libcubeprop/cubeprop. dependency removed in #1098 ; - [x] libefp. libefp itself removed from c-side in #953 ; - [ ] libcubeprop/csg. libfilesystem dependency remains. The libcubeprop/csg filesys calls are harder to migrate because they're at the bottom of the call stack. But I also recall that you had cubeprop test cases working already on Windows. Is it worth finishing off libcubeprop/csg? Or is the situation as outlined stable?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-406507542:63,plugin,plugins,63,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-406507542,2,['plugin'],"['plugin', 'plugins']"
Modifiability,#1585 is also half-bugfix half-enhancement; but I understand if you'd rather not pull it in due to incoming DDD in the near future.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-480821372:31,enhance,enhancement,31,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-480821372,1,['enhance'],['enhancement']
Modifiability,"#2158 failed all azure - Win with a mdi failure at test time and Lin with Py detection failures at Psi configure time. So far this one is ok. It's beyond the configure, but this one is using cmake 3.19. 2158 was using cmake 3.20 which has changes to Py detection. I'm keeping an eye on both PRs, but it's hardly caused by the PR changes themselves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626:103,config,configure,103,https://psicode.org,https://github.com/psi4/psi4/pull/2159#issuecomment-822611626,2,['config'],['configure']
Modifiability,"'; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start_time; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad.np.tolist(); }; print(f""{psi4.core.get_num_threads()=}""). with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```. ## Psithon vs. QCSchema. Another aside -- your input is written as a python script containing a single job and dropping the key results to json. This could also run through QCSchema with json input and json output, either API like https://github.com/psi4/psi4/blob/master/tests/pytests/test_addons.py#L792-L819 or command-line. Let me know if you'd want more details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938:4363,variab,variable,4363,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100294938,1,['variab'],['variable']
Modifiability,(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2588,Config,ConfigMath,2588,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,"(and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:1926,variab,variable,1926,https://psicode.org,https://github.com/psi4/psi4/pull/1393,3,['variab'],"['variable', 'variables']"
Modifiability,"(fisapt + external potentials). There might be something wrong when the molecule is specified in bohr. I'm not sure, so I thought I'd query @alenaizan and @CDSherrill about how suspicious the below makes you, and how likely you would have been to catch this in the testing process. First things, the `ExternalPotential.charges_` (holding charge and position) stores positions in the units of the molecule. For consistency for functions on the class, it translates the internal data to bohr before computing. This printing label https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L70 is wrong (for positions; ok for charges). These comments suggest this might not have been clear in the earlier PR https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/extern.cc#L414-L416 and might have ramifications here https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fisapt/fisapt.cc#L730-L735 . When I rewrite the fsapt-ext-abc test case so that the molecule and charges are again consistent in Bohr (below), the overall passes but the fragments don't. Also below is the fsapt.dat differences. Again, I can well believe that I'm doing something wrong or that the `fsapt.py` machinery has some built-in unit assumptions, but I'm glad of any input or we-checked-that information. The reason it's coming up now is that DDD ""fixes"" this peculiarity of `ExternalPotential` and _only_ stores the charge positions in Bohr. ```; memory 1 GB. # water prism: https://science.sciencemag.org/content/sci/suppl/2012/05/16/336.6083.897.DC1/Perez_SM.pdf; # Table S43. #mol = psi4.core.Molecule.from_arrays(; # elez=[1, 8, 1, 1, 8, 1, 1, 8, 1],; # fragment_separators=[3, 6],; # fix_com=True,; # fix_orientation=True,; # fix_symmetry='c1',; # geom=np.array([; # 0.0290, -1.1199, -1.5243,; # 0.9481, -1.3990, -1.3587,; # 1.4371, -0.5588, -1.3099,; # 1.0088, -1.5240, 0.5086,; # 1.0209, -1.1732, 1.4270,; # 1.5864, -0.3901, 1.3101,; # -1.0231, 1.6243, -0.8743,; # -0.5806, 2.0297, -0.1111,; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2330:958,rewrite,rewrite,958,https://psicode.org,https://github.com/psi4/psi4/issues/2330,1,['rewrite'],['rewrite']
Modifiability,"(s). Additionally this PR changes the Bragg-Slater (BS) radii and completes the Treutler-Ahlrichs integration code with the recommended mapping values. Old radii were of unknown origin. _Because of the updated BS radii, this PR will impact the total energies of any DFT calculation and can change how many grid points are generated **even without pruning**._ . ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] updated BS radii and extended to 104 elements; - [x] implementation of missing Treutler-Eta mapping parameter; - [x] `DFT_NUCLEAR_SCHEME=SBECKE` ('smooth Becke' after: 10.1063/1.5049435. Better for weak interactions, but no time savings/no screening); - [x] extends `DFT_PRUNING_SCHEME` keyword with:; - [x] Treutler grid pruning ``TREUTLER``; - [x] a more robust grid pruning variant of it ``ROBUST``; - [x] new variables: ``XC GRID TOTAL POINTS``, ``XC GRID SPHERICAL POINTS``, ``XC GRID RADIAL POINTS``; - [x] `print > 2` adds (existing but unused) debug grid print out; - [x] tight DFT tests are updated with new values due to the new Bragg-Slater radii used; - [x] testing and error overview; - [x] option to properly disable all pruning (currently only indirect way); - [x] tests below indicate a reduction of the grid size by 30 and 45% using `ROBUST` and `TREUTLER` pruning, respectively. This leads to a 15-20% speed up for small molecules.; - [x] the following tests have been updated because of the new BS radii: `dft-b3lyp`; `dft-custom-mgga`, `dft-grad-lr1`, `dft-grad-lr3`, `dft-grad-meta`, `dft-grad1`, `dft-grad2`, `dft-omega`, `dft-psivar`, `dft-vv10`, `dft1`, `dftd3-grad`, `dftd3-version`, `frac-traverse`, `opt13`, `pcmsolver-dft`, `pcmsolver-dipole`; - [x] new test: `dft-pruning`. ## Questions; - Pruning enabled by default? -> not this PR, but after further testing yes. ## Checklist; - [x] Documentation; - [x] Pruning Tests added; - [x] All relevant `ctests` pass; (http://psicode.org/psi4manual/master/build_plannin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1591:1108,extend,extends,1108,https://psicode.org,https://github.com/psi4/psi4/pull/1591,2,"['extend', 'variab']","['extends', 'variables']"
Modifiability,* CMake; * license (convenient `sed` commands at psi4/psi4#690); * test case and/or plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/692:84,plugin,plugin,84,https://psicode.org,https://github.com/psi4/psi4/issues/692,1,['plugin'],['plugin']
Modifiability,"* Fixed mp2-module failure. Changed the symmetry reset to only occur if the user provided a default symmetry. My changes overrode Bozkaya's DF code running computations in C1, and the computational symmetry change resulted in BH3 landing on different UHF solutions.; * Fixed pywrap-all failure. Per discussion in Slack, findif now saves and resets the core variables from the reference, after all displacements are finished.; * Addressed concerns of @andysim. I now set DOCC explicitly for my test case, to show compatibility with my symmetry-breaking findif solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964:357,variab,variables,357,https://psicode.org,https://github.com/psi4/psi4/pull/1424#issuecomment-447413964,1,['variab'],['variables']
Modifiability,"* Psi4 `v1.2rc3.dev1` compile pure GCC 7.2.0 w/`libgomp` for threading.; * OpenBLAS `v0.2.20-453-gf5959f2` compile pure GCC 5.2 w/`libgomp` for threading (except for line 5, which is conda 0.2.20, 9ac9557`).; * No Intel compilers or `libiomp5` available or in `ldd -v`. NumPy is still the conda nomkl NumPy, but its links to openblas are unresolved, so tests are either not hitting that submodule or it's using the below-described libopenblas loaded by psi. | openblas compilation | psiapi speedup `-n4` | psithon speedup `-n4` | ion pass `-n1` | ion pass `-n4` |; | :--- | ---: | ---: | :---: | :---: |; | `USE_THREAD=0 USE_OPENMP=0` | 1.00 | 1.54 | yes | yes |; | `USE_THREAD=1 USE_OPENMP=0` | 0.90 | warn + 0.85 | no | no |; | `USE_THREAD=1 USE_OPENMP=0 USE_SIMPLE_THREADED_LEVEL3=1` | 1.20 | warn + 1.40 | no | no |; | `USE_THREAD=1 USE_OPENMP=1` | 1.04 | 2.27 | yes | no |; | CONDA `USE_THREAD=1 USE_OPENMP=0` | ? | warn + ?| no | no |; | EDIT: `USE_THREAD=1 USE_OPENMP=1 NUM_PARALLEL=4` | 1.00 | 1.77 | yes | no |. * ""warn"": oodles of ""OpenBLAS Warning : Detect OpenMP Loop and this application may hang. Please rebuild the library with USE_OPENMP=1 option."". * full OpenBLAS compile command for row 4; ```; make CC=gcc FC=gfortran DYNAMIC_ARCH=1 BINARY=64 NO_LAPACK=0 NO_AFFINITY=1 USE_THREAD=1 USE_OPENMP=1 NUM_THREADS=128 CFLAGS=""-march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe"" FFLAGS=""-fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -O2 -pipe""; ```. Unless someone sees a problem with my build configs, it's not looking too encouraging, except for wholly unthreaded. Troubling also that this contradicts @hokru's findings of good behavior for `USE_OPENMP=1` from source build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229:1582,config,configs,1582,https://psicode.org,https://github.com/psi4/psi4/issues/1009#issuecomment-390869229,1,['config'],['configs']
Modifiability,"* Yes, this sounds like a pybind11 update issue. Any pybind11 update requires a _full_ recompile. But it sounds like you've got that taken care of with the fresh objdir. Fortunately, now that pybind has hit 2.0, we plan to stick with that version, so these problems will be fewer.; * Very observant on the compilers detected for pybind. But it really doesn't matter because ""compilation"" and installation of pybind is just copying a dozen files into place.; * On the python detection, there's two places this could be happening, and one, like the above is irrelevant. It's the second one (in the psi4-core target) that really matters. Could you send me your analogs of the CMake output snippets below? Or send me the whole thing, but it'll have to be both the initial CMake configuration and the psi4-core configuration that runs during the course of the compilation. Psi4 and pybind11 use exactly the same Python detection scheme, so I'm surprised and would like to understand what's happening in your setup.; * As far as actually telling psi4 and cmake what Python to use w/o editing CMakeCache's, I'd recc setting one (EXE) or all of https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41 . But my impression is that you shouldn't have to. Main CMake configuration; ```; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5 (found version ""3.5.2"") ; -- Found PythonLibs: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libpython3.5m.so; -- Found Python 3.5: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/bin/python3.5; -- Suitable CheMPS2 could not be located, Building CheMPS2 instead.; -- Suitable dkh could not be located, Building dkh instead.; -- Found libefp: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/libefp.so (found version 1.3.0); -- Found gdma: /theoryfs2/ds/cdsgroup/miniconda/envs/texternals35/lib/li",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273512333:774,config,configuration,774,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273512333,2,['config'],['configuration']
Modifiability,* [ ] Adapt CC* modules to take in Wfn so that truncated virtual space proceeds transparently. Feature request (http://forum.psicode.org/t/rvs-approximations-for-cc2-or-adc-2/504),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-298973221:6,Adapt,Adapt,6,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-298973221,1,['Adapt'],['Adapt']
Modifiability,"* [ ] Remove the unused `PseudospectralGrid` class from `cubature.cc` and references to it throughout the code (particularly `read_options.cc`).; * [ ] Refactor the `DFTGrid` class so that the constructor accepts a single `std::map<std::string, std::any>` map instead of individual maps of different data types as noted [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L4314).; * [ ] Remove the dependence of the `DFTGrid` on global options.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135:152,Refactor,Refactor,152,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1123943135,1,['Refactor'],['Refactor']
Modifiability,"* run `make sphinxman` at least once by hand and check in resulting psifiles.py and all the updated and new `samples/` files and dirs. * figure out any new `Additional Contributors` since last release and edit header.py accordingly. Get their particulars for codemeta.json. invite any >=3 PRs to GH org. * follow the procedure outlined in [cbcy](https://github.com/psi4/psi4meta/blob/master/conda-recipes/conda_build_config.yaml) and [poodle](https://github.com/psi4/psi4meta/blob/master/psinet-nightly/kitandkapoodle.py) (I haven't pushed the versions with enhanced comments) to; * update upstream and downstream deps/addons that may have advanced since last release. edit recipes and psi4 `external/` code.; * rebuild the psi4, psi4-rt, psi4-dev, psi4-docs stack on Linux and Mac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604:558,enhance,enhanced,558,https://psicode.org,https://github.com/psi4/psi4/issues/1496#issuecomment-460674604,1,['enhance'],['enhanced']
Modifiability,"******. CC integral sort will use 116.60 mb. Number of (ab|cd) temporary files: 2; Number of (ab|ci) temporary files: 3; Starting temporary file number: 270. Initial sort........done. Sort (IJ|KL)........done.; Sort (IJ|KA) 1/2....done.; Sort (IJ|KA) 2/2....done.; Sort (IA|JB)........done.; Sort (IJ|AB)........done.; Sort (IA|BC) 1/3....done.; Sort (IA|BC) 2/3....done.; Sort (IA|BC) 3/3....done.; Sort (AB|CD) 1/2....done.; Sort (AB|CD) 2/2....done. *** tstop() called on dx7-lehtola.chem.helsinki.fi at Wed Oct 25 21:00:43 2017; Module time:; 	user time = 0.42 seconds = 0.01 minutes; 	system time = 0.37 seconds = 0.01 minutes; 	total time = 0 seconds = 0.00 minutes; Total time:; 	user time = 5.26 seconds = 0.09 minutes; 	system time = 0.90 seconds = 0.02 minutes; 	total time = 6 seconds = 0.10 minutes. *** tstart() called on dx7-lehtola.chem.helsinki.fi; *** at Wed Oct 25 21:00:43 2017. *******************************************************; * *; * CISD *; * Singles Doubles Configuration Interaction *; * *; * Eugene DePrince *; * *; *******************************************************. ==> Input parameters <==. Freeze core orbitals? no; Use frozen natural orbitals? yes; r_convergence: 1.000e-07; e_convergence: 1.000e-06; Number of DIIS vectors: 8; Number of frozen core orbitals: 0; Number of active occupied orbitals: 17; Number of active virtual orbitals: 56; Number of frozen virtual orbitals: 0. ==> Memory <==. available memory = 500.00 mb; minimum memory requirements for QCISD = 20.82 mb; memory requirements for QCISD(T) = 19.95 mb. ==> Define tiling <==. v(ab,cd) diagrams will be evaluated in 1 blocks.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov2.; v(ab,ci) diagrams will be evaluated in 1 blocks over ov. Allocate cpu memory ( 43.60 mb).....done.; Initialize cpu memory..................done. Begin CISD iterations. Iter DIIS Energy d(Energy) |d(T)| time; 0 0 1 -0.2857372527 -0.2857372527 0.4555767847 1; 1 1 1 -0.2414094495 0.0443278032 0.1511464352 0;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/828#issuecomment-339418202:11881,Config,Configuration,11881,https://psicode.org,https://github.com/psi4/psi4/issues/828#issuecomment-339418202,1,['Config'],['Configuration']
Modifiability,"**TL;DR** If conda psi4 is acting up, update libint, too: `conda update libint -c psi4/label/dev`. If locally compiled psi4 is acting up, trigger a partial recompile: `cd objdir && rm -rf external/upstream/libint/ && make`. We've been planning for a while to distribute conda psi4 with libint compiled at `MAX_AM_ERI` 8, not 6. I have rebuilt the `libint` package and now the `v1.3rc1` will be the first `psi4` package with extended AM. Unfortunately, both **libint of different AM are not hot-swappable** and **AM not detectable at runtime**. That is, a built psi4 is perfectly happy to link (in the `ldd` sense) to a `libint.so` that is inconsistent with fixed data dimensions in psi4 _libmints_, and libmints can't even throw an error for enlightenment. . I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. ### which `libint`s are out there?; `conda list`; ```; # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old; ```. ### what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install `conda update psi4 libint -c psi4/label/dev` will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the `_4` (see above) AM6 libint, which is trouble. Easy to solve by updating libint: `conda update libint -c psi4/label/dev`. After that, your `conda list` should say `_5`.; * If you have a conda env and you update libint but not psi4 (uncommon), that's also a problem. Update psi4. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533:424,extend,extended,424,https://psicode.org,https://github.com/psi4/psi4/issues/1533,1,['extend'],['extended']
Modifiability,"**user summary**:; This is not a bug that is affecting any DFT calculations currently run with PSI4.; The bug is found in unused code. ---. The radial grid is entirely build with https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/cubature.cc#L2433. The function supposed to call `build_becke` `build_treutler` is never called, instead a dummy function is called that only populates the `RadialGrid` class, which is never used in `cubature.cc` anyway (looks like it is nowhere used). . On the plus side, the bug fixed with this PR is never encountered. The downside is that the TREUTLER scheme is not entirely correct because at least the eta mapping parameters (`TreutlerEta`) are missing. If `build_treutler` is correct or not, I cannot 100% say. In a quick & dirty fashion I enforced it. _Without_ eta (set to 1.0) all DFT `ctests` pass. That's good!; I added the missing eta parameters with updated BS radii a while ago, but didn't notice that the etas changed nothing. I thought the effect was just too small. But there is a very minor one. Including the etas has 11 of 37 tests fail. (Did not run the pytests). I will refactor `cubature.cc` ..somehow.. in the near future. ---. I will approve & merge tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400:1135,refactor,refactor,1135,https://psicode.org,https://github.com/psi4/psi4/pull/2044#issuecomment-745602400,1,['refactor'],['refactor']
Modifiability,"*OpenMP* issue!. It seems will be no better support of *OpenMP* in *MSVC* soon. So I was looking for an alternative solution as it is increasing code complexity and will add too much burden to keep *Psi4* compatible with *OpenMP* 2.0. One options is `clang-cl`, *MSVC* compatibility layer of *LLVM* (http://clang.llvm.org/docs/MSVCCompatibility.html), which supports *OpenMP* 4.0. After some hacking of *CMake* and *Psi4*, I managed to compile and pass the tests (https://ci.appveyor.com/project/raimis/psi4/build/1.0.601). So I will make new PRs to adapt `clang-cl` and close #1200, #1224, #1225, #1226, #1228, #1229, and #1230. Also, #1231 could be reverted.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-423183802:550,adapt,adapt,550,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-423183802,1,['adapt'],['adapt']
Modifiability,"+]. . ## Why?; #### Prefer `std::make_shared` to direct use of `new`; Using `std::make_shared`:; 1. Reduces code verbosity, especially when coupled with `auto`:; ```; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); // Type information written down 3 TIMES!!!; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!!!!; ```; 2. Ensures exception safety and prevents resource leaks.; 3. Improves efficiency:; ```; // Performs TWO allocations; std::shared_ptr<Matrix> F = std::shared_ptr<Matrix>(new Matrix(""Fock matrix"", nso, nso)); ; // Performs ONE allocation; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); ; ```. _Reference_: Item 21 in [Effective Modern C++].; #### Prefer `auto` to explicit type declarations; Using `auto` reduces and/or avoids:; 1. Verbosity in variable declarations:; ```; std::shared_ptr<Matrix> F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // So much typing...; auto F = std::make_shared<Matrix>(""Fock matrix"", nso, nso); // Much better!; ```; 2. Problems with uninitialized variables. `auto` works like template type deduction, hence the right-hand side of the declaration **needs to have** an initializer:; ```; int x1; // fine, but initialized :(; auto x2; // WON'T COMPILE!!!; auto x3 = 1; // fine and initialized; ```; 3. Problems with unintended type casts and type mismatches that are hard to impossible to catch:; ```; std::vector<int> v;; // !!! The size of a vector is of type std::vector<int>::size_type and is compiler- AND architecture-DEPENDENT; unsigned sz = v.size(); // might not be correct on some compiler/machines; auto size = v.size(); // size is ALWAYS of the correct type; ```; _Reference_: Items 2 and 5 in [Effective Modern C++].; #### Prefer `nullptr` to `0` or `NULL`; `0` is an `int` not a pointer. Almost the same goes for `NULL` though implementations of the",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/836:1405,variab,variable,1405,https://psicode.org,https://github.com/psi4/psi4/pull/836,1,['variab'],['variable']
Modifiability,", but use the tagged version https://github.com/psi4/psi4/releases/tag/0.5, but from the git commit tag in your input above, I gather you use this version as well. @loriab : good thing psi4 prints the commit tag!; - The compiler with which I compiled psi4 and chemps2 is gcc/g++ 5.2.1 and I am on Ubuntu 15.10. I also tried the intel compiler 16.0.0 20150815 and mixtures of both, but only by compiling everything with the GNU compiler I was able to make things work thus far. This means that before releasing v1.7 I also need to check several compiler combinations and make things work, but because compilers get updated at regular times, I will wait with that.; - That all being said, I don't know what is going on. You clearly use the right git commit of psi4 (8e01b1f), but the plugin API is clearly wrong. The following is copied from a message above:. ```; An error has occurred Py-side; Traceback:; : Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File """", line 48, in . File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy']lowername. File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'); ```. For the record I copy my file 'pymodule.py' here:. ```; import psi4; import re; import os; import inputparser; import math; import warnings; from driver import *; from wrappers import *; from molutil import *; import p4util; from p4xcpt import *. def run_dmrg(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; dmrg can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('dmrg'). """"""; lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). # Your plugin's psi4 run sequence goes here; #psi4.set_global_option('BASIS', 'sto-3g'); psi4.set_local_option('MYPLUGIN', 'PRINT', 1). # Compute a SCF reference, a wavefunction is return which holds th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-186113504:1917,plugin,plugin,1917,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-186113504,2,['plugin'],['plugin']
Modifiability,", v4rhosigma2tau=0x0, v4rhosigmalapl2=0x0, v4rhosigmalapltau=0x0, ; v4rhosigmatau2=0x0, v4rholapl3=0x0, v4rholapl2tau=0x0, v4rholapltau2=0x0, v4rhotau3=0x0, v4sigma4=0x0, v4sigma3lapl=0x0, v4sigma3tau=0x0, v4sigma2lapl2=0x0, v4sigma2lapltau=0x0, v4sigma2tau2=0x0, v4sigmalapl3=0x0, v4sigmalapl2tau=0x0, v4sigmalapltau2=0x0, v4sigmatau3=0x0, v4lapl4=0x0, v4lapl3tau=0x0, v4lapl2tau2=0x0, v4lapltau3=0x0, ; v4tau4=0x0) at /psi/gits/libxc/src/mix_func.c:119; #5 0x00007fffecf71998 in xc_gga (func=0x555556ca7500, np=255, rho=0x555556e575c0, sigma=0x555556ccda80, zk=0x555556771300, vrho=0x55555e164460, vsigma=0x555556c12720, v2rho2=0x0, v2rhosigma=0x0, v2sigma2=0x0, v3rho3=0x0, v3rho2sigma=0x0, v3rhosigma2=0x0, v3sigma3=0x0, v4rho4=0x0, v4rho3sigma=0x0, v4rho2sigma2=0x0, v4rhosigma3=0x0, v4sigma4=0x0); at /psi/gits/libxc/src/gga.c:126; #6 0x00007fffecf71b16 in xc_gga_exc_vxc (p=<optimized out>, np=<optimized out>, rho=<optimized out>, sigma=<optimized out>, zk=<optimized out>, vrho=<optimized out>, vsigma=0x555556c12720) at /psi/gits/libxc/src/gga.c:160; #7 0x00007fffef1a9541 in psi::LibXCFunctional::compute_functional (this=0x896d, in=..., out=..., npoints=-1, deriv=1) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/LibXCfunctional.cc:549; #8 0x00007fffef1b899f in psi::SuperFunctional::compute_functional (this=0x896d, vals=..., npoints=6) at /psi/gits/hrw-demo/psi4/src/psi4/libfunctional/superfunctional.cc:633; #9 0x00007fffef1737ba in psi::RV::compute_V (this=0x896d, ret=<error reading variable: Cannot access memory at address 0x896d>) at /psi/gits/hrw-demo/psi4/src/psi4/libfock/v.cc:1350; #10 0x00007fffef7752c3 in psi::scf::RHF::form_V (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:180; #11 0x00007fffef77451b in psi::scf::RHF::form_G (this=0x896d) at /psi/gits/hrw-demo/psi4/src/psi4/libscf_solver/rhf.cc:185; ```. Please let me know when is a good point to try Psi4+Libxc 5.1 again and if your Libxc 6 PR needs adding atop this (surely not?), thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084:3233,variab,variable,3233,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-754391084,1,['variab'],['variable']
Modifiability,", with DFJLinK outperforming the other integral-direct JK options for most of the water clusters, and being the fastest JK option tested overall for large water clusters. For specific comparisons to Direct DF-J + COSX, the closest current analogue in Psi4, DFJCOSK performs better for larger basis sets or more complex systems, while DFJLinK performs better for smaller basis sets and less complex systems from my testing. It may be worth noting that the DFJLinK in the listed benchmarks used a different implementation of Direct DF-J compared to the one in this PR, but I don't expect the results would change much because of that. The full of CompositeJK is planned to be done in 3 PRs. This PR is the first one. The second PR in the CompositeJK process is the combining of the DFJLinK and DFJCOSK subclasses into the initial ""CompositeJK"" subclass and the implementation of the planned CompositeJK User API/user-facing end. The final CompositeJK PR will be the refactoring of the CompositeJK backend to truly support arbitrary mixing and matching of J/K build algorithms. ## User API & Changelog headlines; - [x] The DO_LINK option has been removed.; - [x] The SCF_TYPE option ""LINK"" has been added, enabling use of the integral-direct density-fitted J + Linear Exchange K algorithm combination for JK computations. ## Dev notes & details; - [x] The new JK subclass ""DFJLinK"" has been added to Psi4. DFJLinK combines the integral-direct density fitted formation of J with the linear-scaling formation of the exact K through the LinK algorithm. DFJLinK supports both density screening and incremental Fock construction, using machinery similar to the DirectJK class to do so.; - [x] The computation of LinK, and all references thereof, have been removed from DirectJK. This includes, e.g., removal of the build_linK() function from DirectJK entirely.; - [x] All relevant tests, samples, and documentation (particularly those pertaining to LinK) have been updated to reflect the two previous changes",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762:3621,refactor,refactoring,3621,https://psicode.org,https://github.com/psi4/psi4/pull/2762,1,['refactor'],['refactoring']
Modifiability,", xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults.; > ; > ```; > ==> E20 Dispersion (MP2) <==; > ; > ; > Disp20 (MP2) -0.37881730 [mEh]; > Exch-Disp20,u 0.02037338 [mEh]; > Scaling Scheme: Disp; > Scaling Factor: 0.707; > ; > SAPT(DFT) Results; > ---------------------------------------------------------------------------------------------------------; > Electrostatics -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > Elst1,r -0.10197192 [mEh] -0.06398835 [kcal/mol] -0.26772724 [kJ/mol]; > ```. Added the !dHF cases in `sapt-dft1` and `sapt-dft2`. For `sapt-dft-api`, the dHF feature is intrinsically unsupported, because the dHF calculation is not fully contained in the sapt_dft() call; a part of it is in the run_sapt_dft() call. . Added the scaling scheme/factor output lines in the output f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:3229,variab,variable,3229,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['variab'],['variable']
Modifiability,- 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cma,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4951,plugin,plugins,4951,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"- I never had the plugins working yet. I was going to do that after I had the external projects all working (still working on chemps2).; - I go back and forth on what to do with external dependencies. Fully installing them is certainly an option. On the other hand I like the idea of keeping it somewhat separate in case the user wants to later install a hand optimized version of that library,.; - We already should be able to detect them if they were compiled statically. For the libraries I wrapped we certainly can force static builds, but it may be hard for other libraries if they don't support that.; - I'll take a look at the new python based version and see if I can get it to work",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235604777:18,plugin,plugins,18,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235604777,1,['plugin'],['plugins']
Modifiability,"- If we don't want to install fsapt I can add an exclusion; - I'll add an exclusion for that too; - It's the Python interface. That's a super non normal install location for Linux, so I prefer that when you do the Conda-binary tweak the `CMAKE_INSTALL_LIBDIR` variable. Side note, we have to decide whether we are only distributing `psi4.so` or all libraries. In theory, it would be nice to move each libraries' Python interface into its library and treat each as an individual module. Alternatively, if we only want to distribute `psi4.so` then we may want to explore compiling all the source into a single library (i.e. don't have the intermediate libraries like mints,scf_solver, etc.). CMake tracks rebuilding on a file by file basis so this shouldn't add any time to recompilation (in fact it may shorten them as it may allow for better dependency tracking).; - Actually it should. When I do `find_package` Psi4, Psi4 needs those scripts to configure itself; - An oversight ; - What versioning is missing?; - Quite frankly I don't like having both samples and tests, it's a ton of code duplication. I hadn't been worrying about samples so they've been along for the ride (and got messed up with the folder shuffle somehow); - If you mean `setup.py`, feel free to write it, but in my opinion it is again code duplication, I had envisioned this as the final interface. On my laptop I install with:. ``` .sh; cmake -Bbuild -H.; make; make install ; ```. I feel like that's as nice as it gets.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-234531219:260,variab,variable,260,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-234531219,2,"['config', 'variab']","['configure', 'variable']"
Modifiability,"- Step 1. Modify the perl script to write the reference values out instead of checking them could even write them directly into input.dat with a variable name.; - Step 2. Hunt down the corresponding psivars and add the `compare_value` statements.; - Step 3. The ones that don't work in 2 point at missing psivars which need to be added. 1.) should be somewhat easy but some perl knowledge required. 2) not too difficult either. 3) will take the most time, finding the code in `psi4/src/psi4/cc*` that needs to be modified will take the most time. . I am not completely sure I get what you want to do with your point (3) do you want to just lump `compare_values` together in a function that takes a `wfn` and `ref_vals` dict and does all the `compare_values` needed rather than putting lots of them in the input files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/943#issuecomment-376638034:145,variab,variable,145,https://psicode.org,https://github.com/psi4/psi4/issues/943#issuecomment-376638034,1,['variab'],['variable']
Modifiability,"- Thanks for your headers input; - Great new CMake keyword [`CMAKE_INSTALL_MESSAGE`](https://cmake.org/cmake/help/v3.4/variable/CMAKE_INSTALL_MESSAGE.html#variable:CMAKE_INSTALL_MESSAGE) to suppress all those ""Up-to-date""s. Introduced in 3.1 and we're requiring 3.2, so we can use it. Methinks we want `LAZY` as default; - Nice discussion on what PRIVATE, PUBLIC, INTERFACE dependencies mean for static libraries: https://cmake.org/pipermail/cmake/2016-May/063400.html; - Slide deck on packaging and exporting targets that I'm broadly following for external projects: https://archive.fosdem.org/2013/schedule/event/moderncmake/attachments/slides/258/export/events/attachments/moderncmake/slides/258/cmake_fosdem_2013.pdf; - A nice GH repo on with targets: https://github.com/forexample/package-example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239526159:119,variab,variable,119,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239526159,2,['variab'],['variable']
Modifiability,"- Very cool. I'm not sure exactly if I'd be able to make that work for my plugin, because so many of the things are still either `icc/icpc` specific or tied to your build machine, but it will make getting the info out easier.; - Using conda's `info/has_prefix` / string replacement stuff for relocatable build, I assume some of strings will get modified on installation to point to the proper place.; - I'm not a collaborator on the psi4/psi4 issue tracker, so I can't see that issue. But if anyone on your team wants to take the RESP plugin and modify or improve it, that would be great.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172396551:74,plugin,plugin,74,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172396551,2,['plugin'],['plugin']
Modifiability,- [ ] Examine `properties` function in driver (that encodes the extended workflows beyond sp or time-trivial keyword needed to compute CC properties) and the `oeprop` syntax that most all other methods use. Devise and implement a unified interface that still works with the code.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-341899122:64,extend,extended,64,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341899122,1,['extend'],['extended']
Modifiability,"- [ ] Examine the autofunction signatures in energy, opt, freq, prop.rst in doc/sphinxman/source. These have arguments in the correct order. Rearrange the argument order in the docstrings of the respective functions in share/python/driver.py; - [ ] modify section ""PSI variables & return values"" in doc/sphinxman/source/psithoninput.rst; - separate out the last paragraph into a new section ""return values""; - include in it the gist of the signatures description at http://forum.psicode.org/t/detecting-optimization-failure/203/4?u=loriab .; - also mention getting G & H back as return values or extracting them from Wavefunction and a couple things you can do with them like print_out(), rms(), convert to np.array",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/352:269,variab,variables,269,https://psicode.org,https://github.com/psi4/psi4/issues/352,1,['variab'],['variables']
Modifiability,"- [ ] Implement potential-based small-basis guess as described in [Chem Phys Lett 531, 229 (2012)](http://dx.doi.org/10.1016/j.cplett.2012.02.012). The method avoids doing projections altogether, but the main problem is that one needs cross-basis Coulomb and exchange integrals (IJ|kl) and (Ik|Jl) where IJ are in the new, large basis and kl are in the small input basis. For DFT, the density variables would be evaluated in the small basis, and the quadrature would be done in the new basis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-508700421:393,variab,variables,393,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-508700421,1,['variab'],['variables']
Modifiability,"- [ ] `ccenergy/rotate.cc` is the only file in all of `ccenergy` that bothers with QT -> Pitzer conversions. Refactor that file using modern libmints tech (`Dimension`, `Slice`, `Matrix`) and then purge any mention of QT vs Pitzer from `ccenergy`; - [ ] `ccenergy` has a wavefunction, so we should be able to remove most of `MOInfo` from there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412#issuecomment-1099438825:109,Refactor,Refactor,109,https://psicode.org,https://github.com/psi4/psi4/issues/2412#issuecomment-1099438825,1,['Refactor'],['Refactor']
Modifiability,- [x] Add FCIDUMP capabilities within Psi4. There are currently many third-party plugins that do that and it seems needed enough to have it within the main code. Done in #872,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-341901567:81,plugin,plugins,81,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-341901567,1,['plugin'],['plugins']
Modifiability,"- [x] At the end of the detailed build directions in https://github.com/psi4/psi4/wiki/3_Building, add a step `7. Configure Runtime` directing user to set scratch and otherwise configure environment (e.g., add to path).; - [x] In docs/sphinxman/source/external.rst, break up ""scratch files and the ~/.psi4rc file"" into separate sections so that we're not suggesting psi4rc is the best way to set your scratch (pretty much, PSI_SCRATCH envvar is). Use `make sphinxmini` if you need to test the docs build.; - [x] In docs, show example csh/bash in the PSI_SCRATCH envvar section. Can probably steal some text/code from conda.rst.; - [x] In docs, show an example of a threaded pbs job file. Here's one to work from. See @loriab about any parts that are obscure. ```; #!/bin/tcsh; ## this file auto-generated by submit4 ...; #PBS -j oe ; #PBS -l walltime=80:00:00:00; #PBS -l pmem=2120mb; #PBS -N SSI-084TYR-095LEU-1-dimer; #PBS -V. setenv OMP_NUM_THREADS 4; setenv MKL_NUM_THREADS 4; cd $PBS_O_WORKDIR; setenv myscratch /scratch/loriab/psi4.$PBS_JOBID. cat $PBS_NODEFILE; foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Creating scratch directory "" $myscratch "" on "" $i; ssh $i rm -rf $myscratch; ssh $i mkdir -p $myscratch; end; unsetenv PSI4DATADIR; unsetenv PSIDATADIR; if ! ( $?PYTHONPATH ) setenv PYTHONPATH """"; setenv PYTHONPATH /theoryfs2/ds/cdsgroup/psi4aux:$PYTHONPATH; setenv PSI_SCRATCH $myscratch; setenv PATH /theoryfs2/ds/cdsgroup/miniconda/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/scripts/bin:${PATH}; setenv PATH /theoryfs2/ds/loriab/chem/psi4_trials/c4/c4v2/cfour_v2.00beta/bin:${PATH}; setenv PATH /theoryfs2/ds/cdsgroup/psi4-compile/mrcc:${PATH}; setenv PSIDATADIR /theoryfs2/ds/cdsgroup/psi4-install/psi3930/share/psi4; source /theoryfs2/common/software/intel2016/bin/compilervars.csh intel64; /theoryfs2/ds/cdsgroup/scripts/bin/runpsi.py -i SSI-084TYR-095LEU-1-dimer.in -o SSI-084TYR-095LEU-1-dimer.out. foreach i (`sort $PBS_NODEFILE | uniq`); echo ""Removing scratch directory",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/109:114,Config,Configure,114,https://psicode.org,https://github.com/psi4/psi4/issues/109,2,"['Config', 'config']","['Configure', 'configure']"
Modifiability,"- [x] If sticking with Ed's SAPT module, make a energies_ member in the class, and save all the little pieces to that map.; - [x] Assign all the little pieces to PSI variables with names in `https://github.com/cdsgroup/qcdb/qcdb/psivarrosetta.py`; - [x] Sum them up according to Fig 1 from aforementioned paper; - [x] Alter driver to do more sapt levels; - [x] Alter driver to incorporate the dMP2; - [x] Check. Parts of below may be handy. ```; # SAPT-DFT; qcdb.compare_values(-4.3034, h2kc * df['SAPTDFT-SA-adz' ]['S22-2'], digits, 'SAPTDFT-SA-adz'); qcdb.compare_values(-4.6994, h2kc * df['SAPTDFT-SA-atz' ]['S22-2'], digits, 'SAPTDFT-SA-atz'); qcdb.compare_values(-4.8234, h2kc * df['SAPTDFT-SA-aqz' ]['S22-2'], digits, 'SAPTDFT-SA-aqz'). # SAPT0; qcdb.compare_values(-5.3837, h2kc * df['SAPT0-SA-adz' ]['S22-2'], digits, 'SAPT0-SA-adz'); qcdb.compare_values(-5.6258, h2kc * df['SAPT0-SA-atz' ]['S22-2'], digits, 'SAPT0-SA-atz'); qcdb.compare_values(-5.7281, h2kc * df['SAPT0-SA-aqz' ]['S22-2'], digits, 'SAPT0-SA-aqz'); qcdb.compare_values(-5.7476, h2kc * df['SAPT0-SA-a5z' ]['S22-2'], digits, 'SAPT0-SA-a5z'). # sSAPT0; qcdb.compare_values(-5.3440, h2kc * df['SAPT0S-SA-adz' ]['S22-2'], digits, 'SAPT0S-SA-adz'); qcdb.compare_values(-5.5828, h2kc * df['SAPT0S-SA-atz' ]['S22-2'], digits, 'SAPT0S-SA-atz'); qcdb.compare_values(-5.6852, h2kc * df['SAPT0S-SA-aqz' ]['S22-2'], digits, 'SAPT0S-SA-aqz'); qcdb.compare_values(-5.7045, h2kc * df['SAPT0S-SA-a5z' ]['S22-2'], digits, 'SAPT0S-SA-a5z'). # SCS-SAPT0; qcdb.compare_values(-5.2855, h2kc * df['SAPTSCS-SA-adz' ]['S22-2'], digits, 'SAPTSCS-SA-adz'); qcdb.compare_values(-5.5244, h2kc * df['SAPTSCS-SA-atz' ]['S22-2'], digits, 'SAPTSCS-SA-atz'); qcdb.compare_values(-5.6297, h2kc * df['SAPTSCS-SA-aqz' ]['S22-2'], digits, 'SAPTSCS-SA-aqz'); qcdb.compare_values(-5.6508, h2kc * df['SAPTSCS-SA-a5z' ]['S22-2'], digits, 'SAPTSCS-SA-a5z'). # SAPT2; qcdb.compare_values(-4.2041, h2kc * df['SAPT2-SA-adz' ]['S22-2'], digits, 'SAPT2-SA-adz'); qcdb.compa",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37#issuecomment-121347393:166,variab,variables,166,https://psicode.org,https://github.com/psi4/psi4/issues/37#issuecomment-121347393,1,['variab'],['variables']
Modifiability,"- [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. ```. ## Breaking Changes; - Not many, as there's heavy use of deprecation; - Any access that expected `Wfn.variables` to return only scalars will now be surprised to get all types. Easy to replace with `Wfn.get_scalar_variables`.; - Any code that wrote to Wfn array directly in non-UC (e.g., `wfn.variables_[""lower or mixed-case var""] = val`) needs to be changed to `""UPPER-CASE VAR""` or to `wfn.set_scalar_variables`; - Any code that tries to access a non-existent global will now throw, hence the fixes to the driver and test cases you see here. ## Checklist; - [x] Tests added for any new features; - [x] quick tests pass and I've run a full tests with this+other commits. ## Status; - [x] Ready for review; - [x] R",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:1755,variab,variables,1755,https://psicode.org,https://github.com/psi4/psi4/pull/1393,1,['variab'],['variables']
Modifiability,"- [x] bump cmake to 3.15 from 3.8 (to get decent FindPython with NumPy); - [x] switch out Python detection to fix #2060. note that all the CM vars now start `Python_`, not `PYTHON_`; - [x] use prebuilt g2g for Windows Azure; - [x] bump g2g to 2.0.7; - [ ] ~added some fn redefs for Windows in psi4-dec.h . right place?~; - [x] get windows conda package building through azure. Ok, Windows conda package was the original aim of this PR, but that's also in the Libxc5 PR that uses prebuilt g2g & libxc & libint2. This PR switched to using the new Python detection advocated by pb11: https://pybind11.readthedocs.io/en/stable/compiling.html#findpython-mode . This means we're not using the FindPythonLibsNew that psi4 has a copy of from pb11 and which in turn we install for the benefit of plugins. Of course that means we need to use cmake 3.15+ (released July 2019). That's quite a leap from the 3.8+ we had before, and lgtm doesn't have it, hence that failure. We can drop a lot of explicit properties on `core` since pb11 is providing them (see https://github.com/pybind/pybind11/blob/master/tools/pybind11NewTools.cmake and https://github.com/pybind/pybind11/blob/master/tools/pybind11Common.cmake), but I'm not sure if this is the right time to make the leap. I'm also a bit surprised that `add_library(... MODULE)` seems to be working with the plugin tests where before we used `SHARED` to appear like a linux lib. Glad of opinions here.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048:787,plugin,plugins,787,https://psicode.org,https://github.com/psi4/psi4/pull/2048,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"- [x] chemps2; - [x] erd; - [x] dkh; - [x] gdma; - [x] ambit; - [x] pcmsolver; - [ ] Get binary working (need help from @loriab); - [x] Test (and then most likely fix) plugin system; - [x] Move GTFock to external; - [x] Libint is now external, closes #355 ; ## Speed. By means of comparison, on my box the old build system took 34 minutes and this build took 14 minutes. Both build times are for a debug build, ignore the time to build Boost, use the default angular momentum, and are run on 6 cores. Furthermore, this new build does a dramatically better job of tracking dependencies among files. For example libint/libderiv should only build once and editing a single file in mints no longer triggers a full recompilation (of course touching a file like Molecule.h basically will). This means subsequent builds should be dramatically faster, in my experience so far typically only the file that was changed needs recompiled.; ## Modularity. Under the old build the entire Psi4 build project had to track dependencies for all plugins and external interfaces. This was quickly becoming a nightmare as evidenced by the 3,000,000 emails we have been getting about chemps2 breaking. I have transitioned us to what is known in CMake land as a superbuild. In such a build all pieces of a package, including the dependencies, optional modules, and the main project itself are treated as external projects. Now each of these external projects simply worries about their dependencies and their building process. Finally, because each external project is a good CMake project it makes a `XXXConf.cmake` file or a `FindXXX.cmake` file is included in `psi4/cmake`, which set `XXX_LIBRARIES` and `XXX_INCLUDE_DIRS` appropriately. Hence all other external projects simply need to keep appending dependencies and everyone gets to play nicely together.; # Detailed Change Log; ## Build scripts. I metaphorically ripped all the old build scripts out and started fresh. In my opinion the scripts are far easier to read",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:1716,plugin,plugins,1716,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['plugin'],['plugins']
Modifiability,"-- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-openmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-xopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [+Oopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-qsmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Try OpenMP CXX flag = [-mp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Failed; -- Could NOT find OpenMP (missing: OpenMP_C_FLAGS OpenMP_CXX_FLAGS) ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- Found BLAS: SYSTEM_NATIVE (/usr/lib/libblas.dylib); -- Found LAPACK: SYSTEM_NATIVE (/usr/lib/liblapack.dylib); -- Found libdl: /usr/lib/libdl.dylib ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /Users/loriab/anaconda/bin/python (found version ""2.7.10"") ; -- Found Python: /Users/loriab/anaconda/lib/libpython2.7.dylib ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: clang; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Use the commands in setup_command to reproduce this build; -- dftd3 executable for interfaced DFTD3 found. Test cases added.; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/loriab/linux/psihub/master/psi4/objdir2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152863:5316,Config,Configuring,5316,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152863,1,['Config'],['Configuring']
Modifiability,"-- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP Fortran flag = [-fopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -fopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- No BLAS/LAPACK implementation found, but explicit libraries specified; -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /cluster/apps/python/2.7.6/x86_64/bin/python (found version ""2.7.6"") ; -- Found Python: /cluster/apps/python/2.7.6/x86_64/lib64/libpython2.7.so ; -- Boost version: 1.55.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- CheMPS2 not found. The pre-packaged version will be built.; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- DKH in LibMints ENABLED; -- GDMA is ENABLED; -- PCMSolver not found. The pre-packaged version will be built.; -- Use the commands in setup_command to reproduce this build; -- Configuring incomplete, errors occurred!; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeOutput.log"".; See also ""/scratch/appssf/psi4-1.0/objdir/CMakeFiles/CMakeError.log"".; ```. How can I disable the copying of the test files ? Any help is appreciated. Best regards. Sam",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:12968,Config,Configuring,12968,https://psicode.org,https://github.com/psi4/psi4/issues/581,1,['Config'],['Configuring']
Modifiability,-------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2555,Config,ConfigMath,2555,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,"---------------; Stage Method / Basis Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z -0.53215356 corl_xtpl_helgaker_2; delta1 ccsd(t) - mp2 / heavy-aug-cc-pv(d+d)z -0.00134025 xtpl_highest_1; total CBS -150.20062777; ---------------------------------------------------------------------------------------------------------; ```. For an energy/gradient cbs uses df-mp2 for the cc-pv[t,q]z portion and conventional mp2 which I believe is pulled out of the CCSD(T) calculation. no df-CCSD(T) available ☹️ ; When I compute the Hessian, instead of doing a conventional MP2/DZ singlepoint it looks like a separate, df-mp2 calculation is performed. . Here's the Hessian CBS summary:. ```; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z 0.00000000 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z 0.00000000 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01845040 MP2 TOTAL ENERGY; ----------------------------------------------------------------------------------------------------",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:3342,Variab,Variable,3342,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Variab'],['Variable']
Modifiability,-----------; [A] [B] [C] [D] [E]; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like; ------------- ------------- --------------- ----------- --------------; --> GLOBAL frozen_docc frozen_docc nocc frozen_docc; --> GLOBAL active active nact active; dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep/group/symmetry wfn_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states ArrayType; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence ArrayType; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps ArrayType; --> dmrg_noiseprefactors dmrg_noiseprefactors sweep_noise_prefac dmrg_noise_magnitude ArrayType; (none) dmrg_dvdson_rtol dmrg_dvdson_rtol sweep_dvdson_rtol dmrg_r_convergence ArrayType; --> dmrg_print_corr dmrg_print_corr print_corr dmrg_corr_print; --> dmrg_chkpt dmrg_chkpt dmrg_mps_write; --> dmrg_store_unit dmrg_store_unit dmrg_unitary_write; --> dmrg_do_diis dmrg_do_diis dmrg_diis; --> dmrg_diis_branch dmrg_diis_branch scf_diis_thr dmrg_diis_start_convergence; --> dmrg_store_diis dmrg_store_diis dmrg_diis_write; dmrg_maxiter dmrg_max_iter dmrg_max_iter scf_max_iter dmrg_maxiter; --> dmrg_which_root dmrg_which_root excitation (offset-1) dmrg_follow_root; dmrg_avg_states dmrg_state_avg dmrg_state_avg scf_state_avg dmrg_avg_states; --> dmrg_active_space dmrg_active_space scf_active_space dmrg_scf_orbs; --> dmrg_loc_random dmrg_loc_random dmrg_local_init; (none) dmrg_caspt2 dmrg_caspt2 caspt2_calc dmrg_caspt2; (none) dmrg_caspt2_orb dmrg_caspt2_orb caspt2_orbs dmrg_caspt2_orbs; (none) dmrg_ipea dmrg_ipea caspt2_ipea dmrg_caspt2_ipea; (none) dmrg_imag_shift dmrg_imag_shift caspt2_imag dmrg_imag_level_shift; (none) dmrg_molden dmrg_molden dmrg_molden_write; (none) dmrg_density_ao dmrg_density_ao dmrg_opdm_ao_print. dumpfilename (fcidump) fcidump; nelectrons; nvir; caspt2_ch,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-223864136:1368,plugin,plugins,1368,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223864136,1,['plugin'],['plugins']
Modifiability,--new-plugin-makefile does not work properly with conda,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214:6,plugin,plugin-makefile,6,https://psicode.org,https://github.com/psi4/psi4/issues/214,1,['plugin'],['plugin-makefile']
Modifiability,-wB97X-TDA-cc-pvdz] PASSED [ 93%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz] xfail [ 96%]; psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-TDA-cc-pvdz] xfail [100%]; =========================================================================== short test summary info ============================================================================; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-SVWN-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-HCTH93-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-HCTH93-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-PBE0-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-RPA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-PBE0-TDA-cc-pvdz]; reason: RKS Vx kernel only Spin Adapted for Singlet; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-RPA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[UHF-wB97X-TDA-cc-pvdz]; reason: UKS Vx kernel bug for non-lda; XFAIL psi4/tests/test_tdscf_excitations.py::test_tdscf[RHF-3-wB97X-RPA-cc-pvdz]; reason: RKS Vx kernel,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1349:6372,Adapt,Adapted,6372,https://psicode.org,https://github.com/psi4/psi4/pull/1349,1,['Adapt'],['Adapted']
Modifiability,". On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly speaking it's (for each excited state) the excitation energy, a few property vectors and AO density matrices. Theoretically one could also export the full excitation vector, but that involves copying a rank-4 tens",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:1188,plugin,plugin,1188,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,1,['plugin'],['plugin']
Modifiability,. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunction: missing ctest registration. `vi plugins/skeletonwavefunction/CMakeLists.txt`; - [ ] 57. props4: missing cmake directory registration. `vi CMakeLists.txt`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4727,plugin,plugins,4727,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-ener,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5605,plugin,plugins,5605,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"...And unfortunately, one more wrinkle. Upon deleting the remaining `P::e.globals`, we lose the`SCS-OMP3 TOTAL ENERGY` variable, causing a quick test failure. When you said ""kill off all the remaining P::e.globals"", did you mean _turn them into `variables_`, or did you mean _delete the lines, and remove any reference to them in tests_? There is nothing in`proc.py` to reconstruct the missing variables.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316:119,variab,variable,119,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581700316,2,['variab'],"['variable', 'variables']"
Modifiability,.000000 [a0]. Properties computed using the SCF density matrix. Multipole Moments:. ------------------------------------------------------------------------------------; Multipole Electronic (a.u.) Nuclear (a.u.) Total (a.u.); ------------------------------------------------------------------------------------. L = 1. Multiply by 2.5417464519 to convert [e a0] to [Debye]; Dipole X : 0.0000185 -0.0000189 -0.0000004; Dipole Y : -0.0000204 0.0000189 -0.0000015; Dipole Z : -0.0000155 0.0000189 0.0000034; Magnitude : 0.0000037. ------------------------------------------------------------------------------------. *** tstop() called on baldr at Tue Mar 28 17:20:52 2023; Module time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; Total time:; user time = 6.85 seconds = 0.11 minutes; system time = 0.17 seconds = 0.00 minutes; total time = 1 seconds = 0.02 minutes; ```. PySCF; ```; [ENV] PYSCF_MAX_MEMORY 120000; [CONFIG] conf_file None; [INPUT] verbose = 4; [INPUT] num. atoms = 8; [INPUT] num. electrons = 18; [INPUT] charge = 0; [INPUT] spin (= nelec alpha-beta = 2S) = 0; [INPUT] symmetry False subgroup None; [INPUT] Mole.unit = angstrom; [INPUT] Cartesian GTO integrals (6d 10f); [INPUT] Symbol X Y Z unit X Y Z unit Magmom; [INPUT] 1 C -0.759130000000 0.027045000000 0.000000000000 AA -1.434547792941 0.051107643039 0.000000000000 Bohr 0.0; [INPUT] 2 C 0.759130000000 -0.027045000000 0.000000000000 AA 1.434547792941 -0.051107643039 0.000000000000 Bohr 0.0; [INPUT] 3 H -1.125990000000 0.306235000000 1.010150000000 AA -2.127812718999 0.578700279756 1.908906844729 Bohr 0.0; [INPUT] 4 H -1.171340000000 -0.966695000000 -0.274750000000 AA -2.213511798748 -1.826788795986 -0.519202252724 Bohr 0.0; [INPUT] 5 H -1.109050000000 0.781825000000 -0.735390000000 AA -2.095800758449 1.477435127338 -1.389685694744 Bohr 0.0; [INPUT] 6 H 1.109040000000 -0.781815000000 0.735390000000 AA 2.095781861188 -1.477416230077 1.3896,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2911:9894,CONFIG,CONFIG,9894,https://psicode.org,https://github.com/psi4/psi4/issues/2911,1,['CONFIG'],['CONFIG']
Modifiability,".1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme astropy-helpers graphviz python-graphviz -c conda-forge -c astropy -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Adding test cases: Psi4 + CheMPS2; -- Adding test cases: Psi4 + dkh; -- Adding test cases: Psi4 + libefp; -- Adding test cases: Psi4 + gdma; -- Adding test cases: Psi4 + PCMSolver; -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:5797,Config,Configuring,5797,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['Config'],['Configuring']
Modifiability,".2.199/linux/mpi; _=/usr/bin/printenv; ```. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); ```; --> same error at same place as earlier... icpc -gnu-prefix=x86_64-conda_cos6-linux-gnu- hello.cc -o hello && ./hello; ```; In file included from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/os_defines.h(39),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/x86_64-conda_cos6-linux-gnu/bits/c++config.h(533),; from /home/termo/miniconda3/envs/p4dev35/bin/../x86_64-conda_cos6-linux-gnu/include/c++/7.2.0/iostream(38),; from hello.cc(1):; /usr/include/features.h(367): catastrophic error: cannot open source file ""sys/cdefs.h""; # include <sys/cdefs.h>; ^. compilation aborted for hello.cc (code 4). ```; now we are getting somewhere :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448:11461,config,config,11461,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386642448,1,['config'],['config']
Modifiability,.58.0. (Both 1.59.0 and 1.60.0 aren't included) I am not sure if that is related to this problem though. FindBoost.cmake debuting output : . ```; -- Found Python: /Users/admin/anaconda/lib/libpython2.7.dylib ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:515 ] _boost_TEST_VERSIONS = 1.58.0;1.58;1.57.0;1.57;1.56.0;1.56;1.55.0;1.55; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:517 ] Boost_USE_MULTITHREADED = ON; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:519 ] Boost_USE_STATIC_LIBS = ON; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:521 ] Boost_USE_STATIC_RUNTIME = OFF; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:523 ] Boost_ADDITIONAL_VERSIONS = ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:525 ] Boost_NO_SYSTEM_PATHS = ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:577 ] Declared as CMake or Environmental Variables:; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:579 ] BOOST_ROOT = ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:581 ] BOOST_INCLUDEDIR = /Users/admin/anaconda/envs/psi4-py2.7/include; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:583 ] BOOST_LIBRARYDIR = /Users/admin/anaconda/envs/psi4-py2.7/lib; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:585 ] _boost_TEST_VERSIONS = 1.58.0;1.58;1.57.0;1.57;1.56.0;1.56;1.55.0;1.55; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:654 ] Include debugging info:; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:656 ] _boost_INCLUDE_SEARCH_DIRS = /Users/admin/anaconda/envs/psi4-py2.7/include;PATHS;C:/boost/include;C:/boost;/sw/local/include; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cmake:658 ] _boost_PATH_SUFFIXES = boost-1_58_0;boost_1_58_0;boost/boost-1_58_0;boost/boost_1,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:3887,Variab,Variables,3887,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['Variab'],['Variables']
Modifiability,".8238651Z def reraise(tp, value, tb=None):; 2018-12-06T18:15:06.8238835Z try:; 2018-12-06T18:15:06.8239065Z if value is None:; 2018-12-06T18:15:06.8239312Z value = tp(); 2018-12-06T18:15:06.8239526Z if value.__traceback__ is not tb:; 2018-12-06T18:15:06.8239861Z raise value.with_traceback(tb); 2018-12-06T18:15:06.8240255Z > raise value; 2018-12-06T18:15:06.8240643Z ; 2018-12-06T18:15:06.8240921Z C:\tools\miniconda3\lib\site-packages\six.py:693: ; 2018-12-06T18:15:06.8241733Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8242195Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8242519Z raise value; 2018-12-06T18:15:06.8243257Z C:\tools\miniconda3\lib\site-packages\six.py:693: in reraise; 2018-12-06T18:15:06.8243569Z raise value; 2018-12-06T18:15:06.8244186Z _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; 2018-12-06T18:15:06.8244400Z ; 2018-12-06T18:15:06.8244638Z def tear_down():; 2018-12-06T18:15:06.8245076Z import os; 2018-12-06T18:15:06.8245339Z import glob; 2018-12-06T18:15:06.8245555Z import psi4; 2018-12-06T18:15:06.8245794Z psi4.core.close_outfile(); 2018-12-06T18:15:06.8246104Z patterns = ['cavity.*', 'grid*', 'pytest_output.*h5',; 2018-12-06T18:15:06.8246380Z 'pytest_output.dat',; 2018-12-06T18:15:06.8246851Z '*pcmsolver.inp', 'PEDRA.OUT*', 'timer.dat']; 2018-12-06T18:15:06.8247099Z pytest_scratches = []; 2018-12-06T18:15:06.8247318Z for pat in patterns:; 2018-12-06T18:15:06.8247695Z pytest_scratches.extend(glob.glob(pat)); 2018-12-06T18:15:06.8247928Z for fl in pytest_scratches:; 2018-12-06T18:15:06.8248147Z > os.unlink(fl); 2018-12-06T18:15:06.8249031Z E PermissionError: [WinError 32] The process cannot access the file because it is being used by another process: 'pytest_output.dat'; 2018-12-06T18:15:06.8249336Z ; 2018-12-06T18:15:06.8249582Z ..\lib\psi4\tests\conftest.py:28: PermissionError; ```; So for now, they will run on core only!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007:2131,extend,extend,2131,https://psicode.org,https://github.com/psi4/psi4/pull/1399#issuecomment-445000007,1,['extend'],['extend']
Modifiability,".cp37-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /debug /INCREMENTAL src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib ""C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib"" F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib && cd .""; LINK Pass 1: command ""C:\PROGRA~2\MICROS~3\2019\COMMUN~1\VC\Tools\MSVC\1421~1.277\bin\Hostx64\x64\link.exe /nologo src\CMakeFiles\core.dir\export_benchmarks.cc.obj src\CMakeFiles\core.dir\export_blas_lapack.cc.obj src\CMakeFiles\core.dir\export_cubeprop.cc.ob",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:3105,plugin,plugin,3105,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['plugin'],['plugin']
Modifiability,".cp37-win_amd64.pyd /implib:src\core.lib /pdb:src\core.pdb /dll /version:0.0 /machine:x64 /debug /INCREMENTAL src\psi4\adc\adc.lib src\psi4\cc\cc.lib src\psi4\cctransort\cctransort.lib src\psi4\dcft\dcft.lib src\psi4\detci\detci.lib src\psi4\dfep2\dfep2.lib src\psi4\dfmp2\dfmp2.lib src\psi4\dfocc\dfocc.lib src\psi4\dmrg\dmrg.lib src\psi4\fisapt\fisapt.lib src\psi4\fnocc\fnocc.lib src\psi4\gdma_interface\gdma_interface.lib src\psi4\mcscf\mcscf.lib src\psi4\mrcc\mrcc.lib src\psi4\occ\occ.lib src\psi4\optking\optking.lib src\psi4\psimrcc\psimrcc.lib src\psi4\sapt\sapt.lib src\psi4\scfgrad\scfgrad.lib src\psi4\lib3index\3index.lib src\psi4\libciomr\ciomr.lib src\psi4\libcubeprop\cubeprop.lib src\psi4\libdiis\diis.lib src\psi4\libdisp\disp.lib src\psi4\libdpd\dpd.lib src\psi4\libfilesystem\filesystem.lib src\psi4\libfock\fock.lib src\psi4\libfunctional\functional.lib src\psi4\libiwl\iwl.lib src\psi4\libmints\mints.lib src\psi4\libmoinfo\moinfo.lib src\psi4\liboptions\options.lib src\psi4\libplugin\plugin.lib src\psi4\libpsi4util\psi4util.lib src\psi4\libpsio\psio.lib src\psi4\libqt\qt.lib src\psi4\libsapt_solver\sapt_solver.lib src\psi4\libscf_solver\scf_solver.lib src\psi4\libtrans\trans.lib Ws2_32.lib C:\Program Files (x86)\Microsoft Visual Studio\2019\Community\Common7\IDE\Extensions\Microsoft\Python\Miniconda\Miniconda3-x64\libs\Python37.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\gg.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\xc.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\deriv.lib F:\psi4_v1.3.2\out\build\x64-Release\stage\lib\int.lib D:\OpenBLAS\lib\openblas.lib kernel32.lib user32.lib gdi32.lib winspool.lib shell32.lib ole32.lib oleaut32.lib uuid.lib comdlg32.lib advapi32.lib /MANIFEST /MANIFESTFILE:src\CMakeFiles\core.dir/intermediate.manifest src\CMakeFiles\core.dir/manifest.res"" failed (exit code 1120) with the following output:; 正在创建库 src\core.lib 和对象 src\core.exp; F:\fnocc.lib(diis.cc.obj) : error LNK2019: 无法解析的外部符号 dgesv_，该符号在函数 ""void _",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-504616648:5836,plugin,plugin,5836,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-504616648,1,['plugin'],['plugin']
Modifiability,".so); -- Found LAPACK: SYSTEM_NATIVE (/lib64/liblapack.so); -- No Sphinx, no docs. Pre-built documentation at http://sirius.chem.vt.edu/psi4manual/latest/index.html; -- Found libutil: /usr/lib64/libutil.so ; -- Found libm: /usr/lib64/libm.so ; -- Found librt: /usr/lib64/librt.so ; -- Found libdl: /usr/lib64/libdl.so ; -- Looking for pthread.h; -- Looking for pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python2 (found version ""2.7.11"") ; -- Found Python: /usr/lib64/libpython2.7.so ; -- Boost version: 1.60.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Use the commands in setup_command to reproduce this build; -- Configuring done; -- Generating done; -- Build files have been written to: /home/piton/gitdir/psi4/objdir. configure step is done; now you need to compile the sources:. > > > cd objdir; > > > make. Error message:. [100%] Linking CXX executable ../../../bin/psi4; CMakeFiles/psi4_objlib.dir/create_new_plugin.cc.o: In function `boost::re_detail_106000::perl_matcher<__gnu_cxx::__normal_iterator<char const*, std::string>, std::allocator<boost::sub_match<__gnu_cxx::__normal_iterator<char const*, std::string> > >, boost::regex_traits<char, boost::cpp_regex_traits<char> > >::match_imp()':; create_new_plugin.cc:(.text._ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv[_ZN5boost16re_detail_10600012perl_matcherIN9__gnu_cxx17__normal_iteratorIPKcSsEESaINS_9sub_matchIS6_EEENS_12regex_traitsIcNS_16cpp_regex_traitsIcEEEEE9match_impEv]+0x42d): undefined reference to`boost::match_results<__gnu_cxx::__normal",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/312:5224,Config,Configuring,5224,https://psicode.org,https://github.com/psi4/psi4/issues/312,1,['Config'],['Configuring']
Modifiability,".txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' fai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1088,config,configuration,1088,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['config'],['configuration']
Modifiability,/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4992,plugin,plugins,4992,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geom == []:; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if d,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4586,plugin,plugin,4586,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: mis,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5262,plugin,plugins,5262,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H'; info['--ldflags'] = ' -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel' # aka PLUGIN_LDFLAGS. skipping LIBC_INTERJECT; info['--flags'] = '-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -O3 -no-prec-div -DNDEBUG' # aka PLUGIN_FLAGS; info['--libs'] = sep_cmake_list('-Wl,--start-group;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_lp64.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_thread.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_core.a;/lib64/libpthread.so;/lib64/libm.a;-openmp;-Wl,--end-group;-Wl,--start-group;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_lapack95_lp64.a;/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/mkl/lib/intel64/libmkl_intel_lp64.a;-openmp;-Wl,--end-group'). if len(argv) == 1:; retstr = """"""Build conditions of Psi4. Usage:; >>> psi4-config --all; >>> psi4-config --flags --libs; """"""; elif argv[1] == '--all':; retstr = ''; for k, v in info.iteritems():; retstr += """"""%-20s --> %s\n"""""" % (k, v); else:; retstr = []; for arg in sys.argv[1:]:; retstr.append(info[arg]); retstr = ' '.join(retstr). return retstr. def sep_cmake_list(cmlist):; return ' '.join(cmlist.split(';')). if __name__ == '__main__':; pass; psiver = ""0.3.479""; githash = ""{master} 9a95002 ""; sys.exit(main(sys.argv)). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172395303:3433,config,config,3433,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303,2,['config'],['config']
Modifiability,/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > CMakeLists.txt; > - 65. snsmp2/cc-cc: mismatched marks ctest (,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5720,plugin,plugins,5720,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: missing docs comment. vi; > plugins/skeletonwavefunction/input.dat; > - 56. plugins/skeletonwavefunction: missing ctest registration. vi; > plugins/skeletonwavefunction/CMakeLists.txt; > - 57. props4: missing cmake directory registration. vi CMakeLists.txt; > - 58. python/cc-amps: mismatched directory (python-cc-amps) and ctest; > registration name (python-cc_amps). vi python/cc-amps/CMakeLists.txt; > - 59. python/mints13: missing pytest input generated. check it! vi; > python/mints13/test_input.py; > - 60. pywrap-db2: missing cmake directory registration. vi; > CMakeLists.txt; > - 61. pywrap-freq-e-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 62. pywrap-freq-g-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 63. pywrap-opt-sowreap: missing cmake directory registration. vi; > CMakeLists.txt; > - 64. scf11-freq-from-energies: missing cmake directory registration. vi; > CMakeLists.txt; > - 65. snsmp2/cc-cc: mismatched marks ctest (longtests;snsmp;cart) and; > pytest (long;cart),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:5778,plugin,plugins,5778,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,"0) ; - Improve QCEngine interface for empirical dispersion (#2180) ; - Remove CHKPT (#2186) ; - X2C gradient warning (#2200) ; - Update cmake files to enable Flexiblas support from Fedora (#2246) ; ; Bug Fixes ; --------- ; ; - Fix bug in DF-CC when reading wfn with scf_type CD (#1771) ; - Fix computation of properties in DFOCC (#1772) ; - Fix ROHF and CUHF for asymmetric orthogonalizing matrix X (#1781) ; - Fix to NBO, move to python (#1790) ; - Fix memory bug in DMRG (#1802) ; - Add missing E(30)ind term in SAPT (#1803) ; - Typo in error message (#1811) ; - Fix Azure clang omp (#1822) ; - Remove Psi3 from docs (#1815) ; - Fix to omp call (#1823) ; - Handle very bad linear dependencies (#1844) ; - Fixes to vibrational analysis (#1845) ; - Fix threading in SAPT CPHF (#1849) ; - Fix MP2 handling of 1-electron cases (#1857) ; - Replace seg fault with error in DETCI and DFOCC (#1858, #1861) ; - Fix printing of custom basis sets in banner (#1880) ; - Remove omp_set_nested (#1883) ; - Fix seg fault in CCEnergyWavefunction::rotation() (#1887) ; - Threading fix in ESP potential build (#1900) ; - Proper computation of TDMs from DETCI (#1910) ; - Close DETCI files (#1926) ; - Fix UHF after RHF CCSD gradient crash (#1928) ; - Fix ECPa f-electron combinations (#1930) ; - Keep default_psio_manager alive (#1933) ; - Fix printing of coordinates (#1938) ; - Fixes to Treutler gcc5 (#1945) ; - Fix string setting in options (#1955) ; - USAPT spin fix (#1948, #1969) ; - Distinguish SCF and CC densities (#1962) ; - Improvement to PCMsolver interface (#1977) ; - Fix to occ orbital gradient (#1988) ; - Fix to PK (#1990) ; - Fix bug in scf response (#1999) ; - Correct Bragg-Slater radius for Zn (#2000) ; - Skip Ghost atoms interacting with external charges (#1993) ; - Fix inconsistent basis set parsing (#2002) ; - Psi4dev package working on mac (#2005) ; - Patches to FNOCC and DFOCC (#2013) ; - Fix QCSchema interface (#2014) ; - Fix VV10 for clang (#2017) ; - Plugins work with pybind11 v2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:6497,Plugin,Plugins,6497,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['Plugin'],['Plugins']
Modifiability,"00 -1.9315. no_reorient; no_com; units angstrom; symmetry c1; }. set {; basis d-aug-cc-pvdz; reference uhf; basis_guess 3-21g; guess sad; scf_type direct; e_convergence 1e-12,; d_convergence 1e-12,; # CPROHF not yet implemented,; coupled_induction False. }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer). sapt0_elst = variable(""SAPT ELST ENERGY""); sapt0_exch = variable(""SAPT EXCH ENERGY""); sapt0_ind20 = variable(""SAPT IND20,u ENERGY""); sapt0_exch_ind20 = variable(""SAPT EXCH-IND20,u ENERGY""); sapt0_disp20 = variable(""SAPT DISP20 ENERGY""); sapt0_exch_disp20 = variable(""SAPT EXCH-DISP20 ENERGY""). # for this system ROHF is equivalent to UHF; set {; reference rohf; }. ene, wfn = psi4.energy(""sapt0"", return_wfn=True, molecule=dimer); compare_values(sapt0_elst, variable(""SAPT ELST ENERGY""), 6, ""SAPT0(ROHF) elst""); compare_values(sapt0_exch, variable(""SAPT EXCH ENERGY""), 6, ""SAPT0(ROHF) exch""); compare_values(sapt0_ind20, variable(""SAPT IND20,u ENERGY""), 6, ""SAPT0(ROHF) ind20,u""); compare_values(sapt0_exch_ind20, variable(""SAPT EXCH-IND20,u ENERGY""), 6, ""SAPT0(ROHF) exch-ind20,u""); compare_values(sapt0_disp20, variable(""SAPT DISP20 ENERGY""), 6, ""SAPT0(ROHF) disp20""); compare_values(sapt0_exch_disp20, variable(""SAPT EXCH-DISP20 ENERGY""), 6, ""SAPT0(ROHF) exch-disp20""). ```. **output UHF**; ```; ==> Post-Iterations <==. @Spin Contamination Metric: 0.000000000E+00; @S^2 Expected: 6.000000000E+00; @S^2 Observed: 6.000000000E+00; @S Expected: 2.000000000E+00; @S Observed: 2.000000000E+00. Orbital Energies [Eh]; ---------------------. Alpha Occupied:. 1A -1.727811 2A -1.727777 3A -0.218808; 4A -0.139301. Alpha Virtual:. 5A -0.006157 6A 0.010945 7A 0.010945; 8A 0.050982 9A 0.050982 10A 0.093523; 11A 0.094295 12A 0.125067 13A 0.385164; 14A 0.385164 15A 0.394654 16A 0.394654; 17A 0.397143 18A 0.422540 19A 1.240130; 20A 1.280208 21A 2.502263 22A 2.502263; 23A 2.507072 24A 2.507072 25A 2.512972; 26A 2.526614. Beta Occupied:. Beta Virtual:. 1A -0.543722 2A -0.542896 3A 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975:1438,variab,variable,1438,https://psicode.org,https://github.com/psi4/psi4/issues/1975,6,['variab'],['variable']
Modifiability,"000 -0.70111647; C -2.35903958 0.00000000 2.45806358; C -2.48623109 0.00000000 -2.40919453; C -1.07657777 0.00000000 -2.84029441; H 1.32705735 0.00000000 5.04949752; H -1.32705735 0.00000000 5.04949752; H 3.13133350 0.00000000 3.22359766; H 5.09358852 0.00000000 1.32905912; H 5.16675318 0.00000000 -1.31569036; H 3.24762417 0.00000000 -3.18492574; H -1.32960963 0.00000000 -5.03269392; H 1.32960963 0.00000000 -5.03269392; H -5.09358852 0.00000000 1.32905912; H -5.16675318 0.00000000 -1.31569036; H -3.13133350 0.00000000 3.22359766; H -3.24762417 0.00000000 -3.18492574; units angstrom; }. set {; reference rhf; scf_type DF; guess SAD; d_convergence 4; e_convergence 4; basis cc-pvqz; df_basis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfmp2 by Psi4 Developer, a plugin to:; *; * PSI4: an ab initio quantum chemistry software package; *; * This program is free software; you can redistribute it and/or modify; * it under the terms of the GNU General Public License as published by; * the Free Software Foundation; either version 2 of the License, or; * (at your option) any later version.; *; * This program is distributed in the hope that it will be useful,; * but WITHOUT ANY WARRANTY; without even the implied warranty of; * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the; * GNU General Public License for more details.; *; * You should have received a copy of the GNU General Public License along; * with this program; if not, write to the Free Software Foundation, Inc.,; * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.; *; *@END LICENSE; */. #include <libplugin/plugin.h>; #include <psi4-dec.h>; #include <libparallel/parallel.h>; #include <liboptions/liboptions.h>; #include <libmints/wavefunction.h>; #include <libmints/basisset.h>; #include <libmints/matrix.h>; #include <libmints/vector.h>; #include <libpsio/psio.hpp>; #include <libthce/lreri.h>; #include <",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:2025,plugin,plugin,2025,https://psicode.org,https://github.com/psi4/psi4/issues/157,1,['plugin'],['plugin']
Modifiability,"000.000000; 72 500000000.000000; 73 700000000.000000; 74 1000000000.000000; 75 2000000000.000000; 76 3000000000.000000; 77 4000000000.000000; 78 5000000000.000000; 79 6000000000.000000; 80 7000000000.000000; 81 10000000000.000000; 82 20000000000.000000; 83 30000000000.000000; 84 40000000000.000000; 85 50000000000.000000; 86 70000000000.000000; 87 100000000000.000000; 88 200000000000.000000; 89 300000000000.000000; 90 400000000000.000000; 91 500000000000.000000; 92 700000000000.000000; 93 1000000000000.000000; 94 2000000000000.000000; 95 3000000000000.000000; 96 4000000000000.000000; 97 5000000000000.000000; 98 7000000000000.000000; ```; [error file](https://github.com/psi4/psi4/blob/master/psi4/share/psi4/quadratures/1_x/error.bin), 5247 doubles read into a Matrix. many zeros; ```; 0 0 0.0212800000000000; 0 1 0.0435800000000000; 0 2 0.0596000000000000; 0 3 0.0707500000000000; 0 4 0.0782500000000000; 0 5 0.0828800000000000; 0 6 0.0851600000000000; 0 7 0.0855600000000000; 0 8 0.0855600000000000; 0 9 0.0000000000000000; 0 10 0.0000000000000000; 0 11 0.0000000000000000; 0 12 0.0000000000000000; ...; ```. [This block](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L566-L595) reads those bin files. It occurs three times in denominator.cc, once for each flavor of `*LaplaceDenominator.decompose()`, so refactoring into calling a free function is perhaps in order. After the arrays are filled, both are used to make sure the system can be fit w/i the availability and accuracy of the stored quadratures, https://github.com/psi4/psi4/blob/master/psi4/src/psi4/lib3index/denominator.cc#L196-L209. decompose happens once per SAPT calc, so perhaps ok to make text file? or alternate big-endian file? or better to detect host-endianness and read little-endian file accordingly? routine goes on to regex read a single quadrature file of <100 lines, so while this isn't time consuming compared to SAPT calc, the `.bin` files are larger than those in rest of dir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050:2907,refactor,refactoring,2907,https://psicode.org,https://github.com/psi4/psi4/issues/1462#issuecomment-451726050,1,['refactor'],['refactoring']
Modifiability,"0D-01 -4.353000D-03; 8.106100D-02 1.102000D-03; S 11 1.00; 5.546500D+03 -7.300000D-05; 8.382140D+02 -5.080000D-04; 1.821870D+02 -1.158000D-03; 3.121230D+01 1.219300D-02; 1.953140D+01 -8.785400D-02; 8.240990D+00 3.382000D-01; 2.194550D+00 -5.765500D-01; 1.109110D+00 -4.092980D-01; 3.746410D-01 5.674590D-01; 1.770800D-01 6.124890D-01; 8.106100D-02 1.432310D-01; S 1 1.00; 3.746410D-01 1.000000D+00; S 1 1.00; 1.770800D-01 1.000000D+00; S 1 1.00; 1.001000D-01 1.000000D+00; S 1 1.00; 4.120000D-02 1.0000000; P 9 1.00; 1.889880D+02 5.850000D-04; 2.128680D+01 3.692300D-02; 1.003960D+01 -2.353240D-01; 3.451800D+00 3.414830D-01; 1.974560D+00 5.347880D-01; 1.024200D+00 2.651410D-01; 4.494370D-01 2.578700D-02; 1.866480D-01 5.220000D-04; 7.348100D-02 6.060000D-04; P 9 1.00; 1.889880D+02 -2.560000D-04; 2.128680D+01 -1.168200D-02; 1.003960D+01 8.319200D-02; 3.451800D+00 -1.569700D-01; 1.974560D+00 -2.245180D-01; 1.024200D+00 -1.144510D-01; 4.494370D-01 3.753560D-01; 1.866480D-01 5.751360D-01; 7.348100D-02 2.459170D-01; P 1 1.00; 5.981000D-01 1.000000D+00; P 1 1.00; 9.618000D-02 1.000000D+00; P 1 1.00; 3.590000D-02 1.0000000; D 9 1.00; 1.326620D+02 5.720000D-04; 3.760540D+01 4.402000D-03; 1.038910D+01 -4.092200D-02; 6.490170D+00 9.966100D-02; 3.454510D+00 3.226630D-01; 1.844130D+00 4.003430D-01; 9.624780D-01 2.683060D-01; 4.728530D-01 8.484700D-02; 1.932000D-01 7.632000D-03; D 1 1.00; 4.728530D-01 1.000000D+00; D 1 1.00; 1.932000D-01 1.000000D+00; D 1 1.00; 7.820000D-02 1.0000000; F 1 1.00; 4.064000D-01 1.000000D+00; F 1 1.00; 1.848000D-01 1.0000000. ****. """""",; key=""basis"",; name=""only_valence"",; ). psi4.set_options(; {; ""e_convergence"": 1e-8,; ""d_convergence"": 1e-8,; }; ). psi4.core.set_output_file(""output_only_valence.dat"", False). psi4.energy(""scf""); e2 = psi4.variable(""HF TOTAL ENERGY""). ### Compare; diff = e2 - e1. print(""\nComparison""); print(""-"" * 40); print(f""ECP + valence {e1: 16.10f}""); print(f""Only valence {e2: 16.10f}""); print(); print(f""Difference {diff: 16.10f}""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2120930760:5251,variab,variable,5251,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2120930760,1,['variab'],['variable']
Modifiability,"1. Intel says so. No idea why, I am just following directions.; 2. I believe something was still using the variables. Either way this; mimics the behavior of the original script.; 3. That behavior makes no sense with modern Psi4, i.e. it won't work why; have it?; 4. Again bypass it and do what? Unless you plan on going back to an; executable this is how to link to MKL.; 5. There's lapack problems otherwise.; 6. Thanks, I usually don't put the end stuff, but I was following; established syntax in the file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563#issuecomment-272895474:107,variab,variables,107,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-272895474,1,['variab'],['variables']
Modifiability,1. optking/beran: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 32. optking/beran: missing docs comment. vi optking/beran/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > pl,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4552,plugin,plugins,4552,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,1867_1 conda-forge; chemps2 1.8.10 hbe8a562_0 psi4; conda 4.12.0 py37h89c1867_0 conda-forge; conda-package-handling 1.7.2 py37hb5d75c8_0 conda-forge; cryptography 3.4.5 py37h5d9358c_1 conda-forge; cudatoolkit 11.1.1 h6406543_8 conda-forge; cycler 0.11.0 pyhd3eb1b0_0 ; dbus 1.13.6 h5008d03_3 conda-forge; debtcollector 2.5.0 pyhd8ed1ab_0 conda-forge; debugpy 1.5.1 py37hcd2ae1e_0 conda-forge; decorator 5.1.1 pyhd3eb1b0_0 ; defusedxml 0.7.1 pyhd8ed1ab_0 conda-forge; dftd3 3.2.1 h84218bc_2 psi4; dkh 1.2 h173d85e_2 psi4; entrypoints 0.4 pyhd8ed1ab_0 conda-forge; expat 2.4.7 h27087fc_0 conda-forge; flit-core 3.7.1 pyhd8ed1ab_0 conda-forge; fontconfig 2.13.1 h6c09931_0 ; fonttools 4.25.0 pyhd3eb1b0_0 ; freetype 2.11.0 h70c0345_0 ; gau2grid 2.0.7 hd18ef5c_0 psi4; gcp 2.0.2 he991be0_2 psi4; gdma 2.2.6 h0e1e685_6 psi4; gettext 0.19.8.1 h73d1719_1008 conda-forge; giflib 5.2.1 h7b6447c_0 ; glib 2.70.2 h780b84a_4 conda-forge; glib-tools 2.70.2 h780b84a_4 conda-forge; greenlet 1.1.1 py37h295c915_0 ; gst-plugins-base 1.14.5 h0935bb2_2 conda-forge; gstreamer 1.18.5 h9f60fe5_3 conda-forge; hdf5 1.10.6 hb1b8bf9_0 ; icu 68.1 h58526e2_0 conda-forge; idna 2.10 pyh9f0ad1d_0 conda-forge; importlib-metadata 4.8.2 py37h06a4308_0 ; importlib_metadata 4.8.2 hd3eb1b0_0 ; importlib_resources 5.2.0 pyhd3eb1b0_1 ; iniconfig 1.1.1 pyhd3eb1b0_0 ; intel-openmp 2021.4.0 h06a4308_3561 ; ipykernel 6.10.0 py37h25bab4e_0 conda-forge; ipython 7.32.0 py37h89c1867_0 conda-forge; ipython_genutils 0.2.0 py_1 conda-forge; ipywidgets 7.7.0 pyhd8ed1ab_0 conda-forge; jbig 2.1 h7f98852_2003 conda-forge; jedi 0.18.1 py37h89c1867_0 conda-forge; jinja2 3.1.1 pyhd8ed1ab_0 conda-forge; jpeg 9d h7f8727e_0 ; jsonschema 4.4.0 pyhd8ed1ab_0 conda-forge; jupyter 1.0.0 py37h89c1867_7 conda-forge; jupyter_client 7.1.2 pyhd8ed1ab_0 conda-forge; jupyter_console 6.4.3 pyhd8ed1ab_0 conda-forge; jupyter_core 4.9.2 py37h89c1867_0 conda-forge; jupyterlab_pygments 0.1.2 pyh9f0ad1d_0 conda-forge; jupyterlab_widgets 1.1.0 pyhd8ed1ab_0 co,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693:2340,plugin,plugins-base,2340,https://psicode.org,https://github.com/psi4/psi4/issues/2510#issuecomment-1081031693,1,['plugin'],['plugins-base']
Modifiability,"193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to the printout like below. This should also satisfy Jonathon's request that the output file show the change in scaling defaults. ```; ==> E20 Dispersion (MP2) <==. Disp20 (MP2) -0.37881730 [mEh]; Exch-Disp20,u 0.02037338 [mEh]; Scaling Scheme: Disp; Sca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2454,variab,variable,2454,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['variab'],['variable']
Modifiability,"2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""true"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap; ""pywrap-opt-sowreap"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/pywrap-opt-sowreap/output.dat; Traceback (most recent call last):; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 127, in <module>; main(*sys.argv[1:]); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 106, in main; files_list,master_in,master_out= sowList(first_output); File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/reap.py"", line 31, in sowList; master_in=the_tag+""-master.in""; UnboundLocalError: local variable 'the_tag' referenced before assignment; Performing finite difference calculations; 5 displacements needed ...Exit Status: infile ( 0 ); autotest ( None ); sowreap ( 1 ); overall ( 1 ); <end of output>; Test time = 0.90 sec; ----------------------------------------------------------; Test Failed.; ""pywrap-opt-sowreap"" end time: Feb 15 13:13 CET; ""pywrap-opt-sowreap"" time elapsed: 00:00:00; ----------------------------------------------------------; ```. I've saved the output of `sapt4` and `opt10` to https://gist.github.com/wpoely86/60885c5adec8dcc8b63b. Furthermore, `opt2` is flaky. It doesn't always pass. Most of the time but not always.; These tests where run on a dual socket Xeon E5-2660v3 (20 cores in total without HT) with icc/icpc 2016.1.150 + MKL 11.3.1.150.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:4451,variab,variable,4451,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['variab'],['variable']
Modifiability,"205379481. > psi4.energy('v2rdm-casscf', molecule=n2). /home/je714/psi4conda/lib/python3.5/site-packages/psi4/tests/test_addons.py:741:; _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _; /home/je714/psi4conda/lib/python3.5/site-packages/psi4/driver/driver.py:454: in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _. name = 'v2rdm-casscf', kwargs = {'molecule': <psi4.core.Molecule object at 0x7f8d89888e30>}; lowername = 'v2rdm-casscf', optstash = <psi4.driver.p4util.optproc.OptionsState object at 0x7f8d89888470>; ref_wfn = <psi4.core.RHF object at 0x7f8d897e56d0>, filename = '', scf_type = 'CD'. def run_v2rdm_casscf(name, **kwargs):; r""""""Function encoding sequence of PSI module and plugin calls so that; v2rdm_casscf can be called via :py:func:`~driver.energy`. For post-scf plugins. >>> energy('v2rdm_casscf'). """""". lowername = name.lower(); kwargs = p4util.kwargs_lower(kwargs). optstash = p4util.OptionsState(; ['SCF', 'DF_INTS_IO']). core.set_local_option('SCF', 'DF_INTS_IO', 'SAVE'). # Your plugin's psi4 run sequence goes here; ref_wfn = kwargs.get('ref_wfn', None); if ref_wfn is None:; ref_wfn = psi4.driver.scf_helper(name, **kwargs). # if restarting from a checkpoint file, this file; # needs to be in scratch with the correct name; filename = core.get_option(""V2RDM_CASSCF"",""RESTART_FROM_CHECKPOINT_FILE""). # todo PSIF_V2RDM_CHECKPOINT should be definied in psifiles.h; if ( filename != """" ):; molname = ref_wfn.molecule().name(); p4util.copy_file_to_scratch(filename,'psi',molname,269,False). # Ensure IWL files have been written when not using DF/CD; scf_type = core.get_option('SCF', 'SCF_TYPE'); if ( scf_type == 'PK' or scf_type == 'DIRECT' ):; proc_util.check_iwl_file_from_scf_type(core.get_option('SCF', 'SCF_TYPE'), ref_wfn). > returnvalue = core.plug",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/710:4465,plugin,plugins,4465,https://psicode.org,https://github.com/psi4/psi4/issues/710,1,['plugin'],['plugins']
Modifiability,"2230226. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-06 at Fri Jan 8 13:56:55 2016; Module time:; user time = 1.16 seconds = 0.02 minutes; system time = 0.06 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 11.55 seconds = 0.19 minutes; system time = 0.35 seconds = 0.01 minutes; total time = 2 seconds = 0.03 minutes. **\* tstart() called on node5-027-06; **\* at Fri Jan 8 13:56:55 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 10 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 10 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI = yes; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1 1 1 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 5 NUM BET = 5; NUM ALP EXPL = 5 NUM BET EXPL = 5; ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204:11343,COUPLING,COUPLING,11343,https://psicode.org,https://github.com/psi4/psi4/issues/204,1,['COUPLING'],['COUPLING']
Modifiability,"24, @psi-rking, @SimonBoothroyd, @yxie326, @VHchavez, @nlk36701, @edeustua, @leeping, @mquevill, @lazaroid, @sgoodlett. ## Performance Optimizations; - omega exchange can now be computed with `MemJK` algorithm. By not having to shunt range-separated functionals to `DiskJK` even when they'd fit in memory, 30-40% performance improvements seen (#1749); - Big performance improvement to DF SCF Hessian (#1805) ; - Omega combine algorithm for computing exchange terms (#1911) ; - Optimize linalg::triplet (#2053) ; - Thread external charge potential (#1946) . ## Developer Interests; - Improves [QCSchema](https://github.com/MolSSI/QCSchema); - Handle module-level options: `scf__reference` equivalent to `set scf reference` (#1578); - `psi4 --qcschema` instead of `psi4 --json` (#1723); - arrays losslessly transmitted in binary if `msgpack` installed (#1723); - new CC properties collected (#1723), dipole returned in au (#1728) ; - basisset and wavefunction schema returned (#1728); - New DFT grid pruning schemes, Treutler and robust accessed through `set dft_pruning_scheme` (not yet engaged by default) (grid points reduced by 30–45%) (#1591); - `SCS-MP2 OPPOSITE-SPIN CORRELATION ENERGY` and `SCS-MP2 SAME-SPIN CORRELATION ENERGY` have been removed, as have ""MP2"" variables from double-hybrid DFT final return (#1445); - `SCS-MP2 * ENERGY` now are defined (6/5, 1/3) quantities. For the user-influenceable vars, it's `CUSTOM SCS-MP2 * ENERGY` (#1445); - Dunning basis updates for Li, Be, Na, Mg (#1559); - S^Inf 2nd-order Dispersion and Exchange-Dispersion for SAPT (#1490); - Enable LGTM static analysis; - Add qcvars to wavefunction (not just globals) for CI, CheMPS2, PsiMRCC, DFT, scf_helper, DFMP2, OEPROP, DETCI. Add functional-including qcvars for DFT (#1570, #1445); - Add option `PARENT_SYMMETRY` to replace a global. Don't use it directly (#1575); - Driver sow/reap for optimize, database which never worked for py3 removed (#1583); - Add 6-311G(2df, <any>) for 2nd row atoms (#1531); -",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:4178,variab,variables,4178,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['variab'],['variables']
Modifiability,"3, in <module>\n import psi4 # isort:skip\n File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>\n from . import core\nImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh\n'); Traceback (most recent call last):; File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 477, in trace_task; R = retval = fun(*args, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/celery/app/trace.py"", line 760, in __protected_call__; return self.run(*args, **kwargs); File ""/code/bigchem/tasks.py"", line 52, in compute; return qcop_compute(program, inp_obj, raise_exc=raise_exc, **kwargs); File ""/opt/conda/lib/python3.10/site-packages/qcop/main.py"", line 35, in compute; return adapter.compute(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/base.py"", line 143, in compute; results, stdout = self.compute_results(; File ""/opt/conda/lib/python3.10/site-packages/qcop/adapters/qcengine.py"", line 42, in compute_results; qcng_output = qcng_compute(; File ""/opt/conda/lib/python3.10/site-packages/qcengine/compute.py"", line 108, in compute; output_data = executor.compute(input_data, config); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 141, in compute; pversion = parse_version(self.get_version()); File ""/opt/conda/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/opt/conda/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/opt/conda/lib/python3.10/site-packages/psi4/__init__.py"", line 68, in <module>; from . import core; ImportError: /opt/conda/lib/python3.10/site-packages/psi4/core.cpython-310-x86_64-linux-gnu.so: undefined symbol: __dkh_main_MOD_dkh. ```. **EDIT:** The issue appears ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124:1283,adapt,adapters,1283,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1701672124,1,['adapt'],['adapters']
Modifiability,"3.6 -DPYTHON_INCLUDE_DIR=/usr/local/include/python3.6m -DPYTHON_LIBRARY=/usr/local/lib/libpython3.6m.so -DPSI4_ROOT=/usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9 -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF -DENABLE_dkh=OFF -DENABLE_libefp=OFF -DENABLE_erd=OFF -DENABLE_simint=OFF -DENABLE_gdma=OFF -DENABLE_PCMSolver=OFF -DENABLE_OPENMP=ON -DTargetLAPACK_DIR=/usr/ports/science/psi4/work/.build/stage/share/cmake/TargetLAPACK -DTargetHDF5_DIR= -Dambit_DIR= -DCheMPS2_DIR= -Ddkh_DIR= -Dlibefp_DIR= -Derd_DIR= -Dgau2grid_DIR=/usr/local/share/cmake/gau2grid -Dgdma_DIR= -DLibint_DIR= -DPCMSolver_DIR= -Dpybind11_DIR=/usr/local/share/cmake/pybind11 -Dpylibefp_DIR= -Dsimint_DIR= -DLibxc_DIR= -DFortran_ENABLED= -DLIBC_INTERJECT= -DRESTRICT_KEYWORD= -DFC_SYMBOL=2 -DOpenMP_LIBRARY_DIRS= -DCMAKE_EXPORT_COMPILE_COMMANDS=ON -C/usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake ""-GUnix Makefiles"" /usr/ports/science/psi4/work/psi4-1.3-60-ga5d3586e9/psi4; loading initial cache file /usr/ports/science/psi4/work/.build/psi4-core-prefix/tmp/psi4-core-cache-Release.cmake; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL=, LANG=CXX, C/CXX/Fortran=Clang/Clang/; -- Found OpenMP_CXX: -fopenmp=libomp ; -- Found OpenMP: TRUE found components: CXX ; -- Using LAPACK: /usr/local/lib/libopenblas.so;...; -- Disabled HDF5; -- Using pybind11: /usr/local/include (version 2.2.4 for Py3.6.8 and -std=c++14); -- Using Python 3.6: /usr/local/bin/python3.6; -- Disabled ambit; -- Disabled CheMPS2; -- Disabled dkh; -- Disabled libefp; -- Disabled erd; -- Using gau2grid: /usr/local/lib/libgg.so.1 (version 1.3.1); -- Disabled gdma; CMake Error at CMakeLists.txt:132 (find_package):; Could not find a package configuration file provided by ""Libint"" (requested; version 1.2.0) with any of the following names:. LibintConfig.cmake; libint-config.cmake; ```. I have both ```libint-1.2.1_1``` and ```libint2-2.5.0.b.2.20_3``` installed, but neither of them provide cmake files. OS: FreeBSD 11.2.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588:2712,config,configuration,2712,https://psicode.org,https://github.com/psi4/psi4/issues/1588,2,['config'],"['config', 'configuration']"
Modifiability,32. optking/beran: missing docs comment. vi optking/beran/input.dat; > - 33. optking/beran: missing CMakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest reg,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4640,plugin,plugins,4640,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavefunction: missing docs comment. `vi plugins/skeletonwavefunction/input.dat`; - [ ] 56. plugins/skeletonwavefunctio,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4579,plugin,plugins,4579,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,"3975_0 psi4/label/dev; mkl 2018.0.2 1; mkl-devel 2018.0.1 h470d631_5; mkl-include 2017.0.3 intel_8 psi4/label/dev; mkl_fft 1.0.1 py35h3010b51_0; mkl_random 1.0.1 py35h629b387_0; more-itertools 4.1.0 py35_0; ncurses 6.0 h9df7e31_2; networkx 2.1 py35_0; numpy 1.14.2 py35hdbf6ddf_1; openssl 1.0.2o h20670df_0; pcmsolver 1.2.1 py35hce75f6e_0 psi4/label/dev; pip 10.0.1 py35_0; pluggy 0.6.0 py35hb428803_0; psi4-dev 1.2a1.dev8 py35h45acd66_0 psi4/label/dev; py 1.5.3 py35_0; pybind11 2.2.3 py35_0 psi4/label/dev; pytest 3.5.1 py35_0; python 3.5.5 hc3d631a_3; readline 7.0 ha6073c6_4; rhash 1.3.5 hbf7ad62_1; setuptools 39.1.0 py35_0; six 1.11.0 py35h423b573_1; sqlite 3.23.1 he433501_0; tk 8.6.7 hc745277_3; wheel 0.31.0 py35_0; xz 5.2.3 h5e939de_4; zlib 1.2.11 ha838bed_2. ```; gcc --version; `gcc (Ubuntu 5.4.0-6ubuntu1~16.04.9) 5.4.0 20160609`. $CC --version; `x86_64-conda_cos6-linux-gnu-cc (crosstool-NG fa8859cb) 7.2.0`. cat /home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake; ```; # psi4DepsIntelCache.cmake; # ------------------------; #; # This module sets some likely variable values to initialize the CMake; # cache for dependencies to build your Psi4 source.; # Note that this uses user-provided (non-conda) tools.; #; # See ``psi4-path-advisor`` (or cmake command below) for use.; #; # >>> /home/termo/miniconda3/envs/p4dev35/bin/cmake \; # -H. \; # -C/home/termo/miniconda3/envs/p4dev35/share/cmake/psi4/psi4DepsIntelCache.cmake \; # -Bobjdir; #. set(CMAKE_C_COMPILER ""icc"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""icpc"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER ""ifort"" CACHE STRING """"). set(CMAKE_C_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_CXX_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"); set(CMAKE_Fortran_FLAGS ""-gnu-prefix=x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). #set(CMAKE_CXX_FLAGS ""-gnu-prefix=/home/termo/miniconda3/envs/p4dev35/bin/x86_64-conda_cos6-linux-gnu-"" CACHE STRING """"). ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008:2266,variab,variable,2266,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386561008,1,['variab'],['variable']
Modifiability,"4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-configure] Error 1; CMakeFiles/Makefile2:1533: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; I'll have a poke about to see if I can get it to build, either within the main psi4 build or stand alone ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:1540,Config,Configuring,1540,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['Config'],['Configuring']
Modifiability,"44, #1241; - @alenaizan #1365, #1042, #1294; - @tyzhang1993 #1437; - @tomspur #1257. # Performance Optimizations; - NYI. # Psi Developer Upgrade Guide; - Psi4 now requires C++14 (up from C++11); - The C++ code base was reformatted using clang-format and the provided format file (many PRs). # Developer Interests; - Cleans up the Matrix class for non-totally symmetric irrupts (#1383).; - Psi4 is now C++17 compatible (#1345).; - DFT grid generation is now threaded (#1291).; - `findif` is now ""metadata""-based to allow for greater serialization (#1289).; - Additional documentation and notes on alpha/beta for DFT functionals (#1260).; - `dpd.gbl` has been removed (#1254).; - The CC* modules are moving to a CCWavefunction based solution (#1253).; - CBS has been reworked to be dictionary based to allow for greater flexibility (#1235).; - Updated conversion factors to CODATA 2014 (#1213).; - `pthreads` has been removed from Psi4 (shall not return, #1199).; - Empirical Dispersion has been refactored to a new unified interface (#1151).; - OEProp has been split into many small modules allowing greater flexibility (#1133).; - SCF now throws a SCFConverenceError upon reaching maximum iterations (#1130).; - Standardizes memory printing to `[GiB]` (#1097, ...). # Documentation; - NYI. # Miscelaneous; - NYI. # Bug Fixes; - Fixes an error where the CBS extrapolation technology was not comparable with FNO-CC* methods (#1377); - Fixes an issue where relativistic basis sets were not compatible with SCF stability analysis (#1374).; - Fixes an issue where JSON called from the command line did not correctly write an output (#1369).; - Fixed an error where float options when set as integer were not correctly cast (#1352 ).; - Correctly throws when Yukawa functionals are called from LibXC (#1260).; - Prevents the code from incorrectly trying cast densities between symmetries in some circumstances (#1139).; - Ghost atoms where incorrectly attributing to `core` electron counts (#1139).; - Fixe",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406:3632,refactor,refactored,3632,https://psicode.org,https://github.com/psi4/psi4/issues/1406,1,['refactor'],['refactored']
Modifiability,"70008748. Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (pq,rs) nbuckets = 1; Frozen-core energy = 0.000000000000000; Starting first half-transformation.; Sorting half-transformed integrals.; Starting second half-transformation.; Two-electron integral transformation complete.; ```. **\* tstop() called on node5-027-10 at Sat Jan 9 01:41:54 2016; Module time:; user time = 1.33 seconds = 0.02 minutes; system time = 0.09 seconds = 0.00 minutes; total time = 0 seconds = 0.00 minutes; Total time:; user time = 15.73 seconds = 0.26 minutes; system time = 0.42 seconds = 0.01 minutes; total time = 3 seconds = 0.05 minutes. **\* tstart() called on node5-027-10; **\* at Sat Jan 9 01:41:54 2016. ---. ```; D E T C I. C. David Sherrill; Matt L. Leininger; 18 June 1999; ```. ---. Note: Calculation requested is a full CI.; Resetting EX_LEVEL to 4 and turning on all excitations. DETCI PARAMETERS:; EX LEVEL = 4 H0 BLOCKSIZE = 400; VAL EX LEVEL = 0 H0 GUESS SIZE= 400; H0COUPLINGSIZE= 0 H0 COUPLING = no; MAXITER = 12 NUM PRINT = 20; NUM ROOTS = 1 ICORE = 0; PRINT = 1 FCI = yes; R CONV = 1.00e-04 MIXED = yes; E CONV = 1.00e-06 MIXED4 = yes; OEI FILE = 35 R4S = no; REPL OTF = no; TEI FILE = 72 DIAG METHOD = SEM; PRECONDITIONER= DAVIDSON UPDATE = DAVIDSON; S = 0.0000 Ms0 = yes; MAX NUM VECS = 13; RESTART = no; GUESS VECTOR = H0BLOCK OPENTYPE = NONE; REF SYM = auto; COLLAPSE SIZE = 1 HD AVG = EVANGELISTI; LSE = no LSE ITER = 0; HD OTF = yes NO DFILE = no; MPN = no MPN SCHMIDT = no; ZAPTN = no MPN WIGNER = no; PERT Z = 1.0000 FOLLOW ROOT = 0; NUM THREADS = 12; VECS WRITE = no NUM VECS WRITE = 0; FILTER GUESS = no SF RESTRICT = no; OPDM = no TRANS DENSITY= no. FILES = 50 51 52 53. EX ALLOW = 1 1 1 1; STATE AVERAGE = 1(1.00); STATE AVERAGE = 1(1.00). ORBITALS:; NMO = 46; FROZEN CORE = 0 RESTR CORE = 0; FROZEN VIRT = 0 RESTR VIRT = 0; DROPPED CORE = 0 DROPPED VIRT = 0; EXPLICIT CORE= 0 ORBS IN CI = 46; NUM ALP = 2 NUM BET = 2; NUM ALP EXPL = 2 NUM BET EXPL = 2; IOPEN = no; ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170152270:10524,COUPLING,COUPLING,10524,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170152270,1,['COUPLING'],['COUPLING']
Modifiability,": CXX_ho;eri_c2_d0_l4;eri_c2_d1_l3;eri_c2_d2_l3;eri_c3_d0_l4;eri_c3_d1_l3;eri_c3_d2_l3;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d2_l2;impure_sh;onebody_d0_l4;onebody_d1_l3;onebody_d2_l3;sss; -- Libint2Config components found: CXX_ho;C;eri_c2_d0_l2;eri_c2_d0_l3;eri_c2_d0_l4;eri_c2_d0_l5;eri_c2_d0_l6;eri_c2_d1_l2;eri_c2_d1_l3;eri_c2_d1_l4;eri_c2_d1_l5;eri_c2_d2_l2;eri_c2_d2_l3;eri_c2_d2_l4;eri_c3_d0_l2;eri_c3_d0_l3;eri_c3_d0_l4;eri_c3_d0_l5;eri_c3_d0_l6;eri_c3_d1_l2;eri_c3_d1_l3;eri_c3_d1_l4;eri_c3_d1_l5;eri_c3_d2_l2;eri_c3_d2_l3;eri_c3_d2_l4;eri_c4_d0_l2;eri_c4_d0_l3;eri_c4_d0_l4;eri_c4_d0_l5;eri_c4_d1_l2;eri_c4_d1_l3;eri_c4_d1_l4;eri_c4_d2_l2;eri_c4_d2_l3;g12_d0_l2;g12_d0_l3;g12_d0_l4;g12_d1_l2;g12_d1_l3;g12_d1_l4;impure_sh;onebody_d0_l2;onebody_d0_l3;onebody_d0_l4;onebody_d0_l5;onebody_d0_l6;onebody_d1_l2;onebody_d1_l3;onebody_d1_l4;onebody_d1_l5;onebody_d2_l2;onebody_d2_l3;onebody_d2_l4;shared;sss; -- Found Libint2 5: /mnt/f/psi4/build_linux/stage/lib/libint2.so.2 (found version 2.7.2); -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable optking could not be located, Building optking instead.; -- Found Libxc: /mnt/f/psi4/build_linux/stage/lib/libxc.a (found version 6.1.0); -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No LaTeX (incl. pdflatex), no PDF docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi sphinx-autodoc-typehints graphviz python-graphviz autodoc-pydantic -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Configuring done (71.4s); -- Generating done (129.1s); -- Build files have been written to: /mnt/f/psi4/build_linux; ```. is there anything missing?. THANKS!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:4987,Config,Configuring,4987,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['Config'],['Configuring']
Modifiability,": The custom assignment operator for `Dimension` objects (`Dimension& operator=(const int*)`) is being deprecated. Unless someone speaks up, 1.10 may be the last release to have it.; - [x] API change: Cast-to-pointer operators for `Dimension` objects (`operator int*()` and `operator const int*() const`) are being deprecated. Unless someone speaks up, 1.10 may be the last release to have them.; - [x] Minor API change: Several constructors and member functions of `Dimension` are now using `size_t` instead of `int` for indexing:; −`Dimension::Dimension(int, const std::string&)` is now `Dimension::Dimension(size_t, const std::string&)`; −`void Dimension::init(int, const std::string&)` is now `void Dimension::init(size_t, const std::string&)`; −`int Dimension::n() const` is now `size_t Dimension::n() const`; −`int& Dimension::operator[](int)` is now `int& Dimension::operator[](size_t)`; −`const int& Dimension::operator[](int) const` is now `const int& Dimension::operator[](size_t) const`; −`const int& Dimension::get(int) const` is now `const int& Dimension::get(size_t) const`; −`void Dimension::set(int, int)` is now `void Dimension::set(size_t, int)`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Machine-readable docstrings have been added to `dimension.h` to improve suggestions offered by IDEs like VSCode; - [x] `size_t` is now used instead of `int` when dealing with array indexing. Python bindings have been updated to reflect the change in constructor arguments.; - [x] Local variables have been made `const` where possible; - [x] Deprecation notices have been added to `Dimension& operator=(int*)`, `operator int*()` and `operator const int*() const`. ## Checklist; - [x] No new features; - [x] Tests run by the CI are passing. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953:2673,variab,variables,2673,https://psicode.org,https://github.com/psi4/psi4/pull/2953,1,['variab'],['variables']
Modifiability,":gdma' prop='IMPORTED'; value='TRUE'; defined='0'; set='1'; gt='gdma::gdma' prop='INTERFACE_COMPILE_DEFINITIONS'; value='USING_gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='INTERFACE_INCLUDE_DIRECTORIES'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include/GDMA'; defined='0'; set='1'; tgt='gdma::gdma' prop='LOCATION'; value='/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so'; defined='0'; set='1'; tgt='gdma::gdma' prop='NAME'; value='gdma::gdma'; defined='0'; set='1'; tgt='gdma::gdma' prop='POSITION_INDEPENDENT_CODE'; value='True'; defined='0'; set='1'; tgt='gdma::gdma' prop='TYPE'; value='SHARED_LIBRARY'; defined='0'; set='1'; ```; - Yes, you could make a plausible case that we haven't gained an immense lot. But it is more CMake-ic and attaching properties to a target seems the OO thing to do compared to the ordered data structure of the usual suspect variables.; - Also switching from `ENABLE_<PKG>` as both the CMake user will variable and the compiler definition to `ENABLE_<Pkg>` as the CMake user will variable and `USING_<Pkg>` as the compiler def. so we're not tempted to conflate the roles. **What it doesn't do**; - linking not right for one of `psi4_main.a` or `psi4.so` (don't remember which) when libgdma is static. **Behavior I'm aiming for**. (a) `ENABLE_<Pkg>`: whether set to TRUE or FALSE; (b) `CMAKE_DISABLE_FIND_PACKAGE_<Pkg>`: whether set to TRUE or FALSE; (c) `<Pkg>_DIR`: whether `<pkg>Config.cmake` findable at this loc; (d) `CMAKE_PREFIX_PATH`. | (a) enabled | (b) disable find | (c) findable dir | (d) findable gen | outcome |; | --- | --- | --- | --- | --- |; | T | T | | | extproj_add, detect superbuild |; | T | F | T | | detect pre-built at <pkg>_dir |; | T | F | F | T | detect pre-built at cmake_prefix_path |; | T | F | F | F | extproj_add, detect supe",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:3232,variab,variables,3232,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,1,['variab'],['variables']
Modifiability,; + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/p,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2628,Config,ConfigMath,2628,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562:8347,variab,variables,8347,https://psicode.org,https://github.com/psi4/psi4/issues/1562,1,['variab'],['variables']
Modifiability,"; - Keep one-electron integrals in core (#1770) ; - Use def2 basis sets from BSE (#1804) ; - Improve memory estimates in fdisp (#1810) ; - Improve basis set choice in basis guess (#1484) ; - Print initial orbital occupations (#1713) ; - Improve handling/units of dipole and quadrupole arrays (#1800) ; - Electric dipole derivatives available py-side (#1799) ; - Add ST0-6G to list of basis sets (#1853) ; - PSIMRCC callable from comput_energy (#1854) ; - Improved general error reporting (#1862,#1868) ; - Removes CEPA0 from DCT module (#1873) ; - Remove debugging and timing code from psimrcc (#1879, #1901) ; - Add cython (#1889) ; - Update tolerances for mkl 2020.1 (#1896) ; - LGTM (#1905, #2038) ; - MP2/MP3 test suite (#1850, #1971) ; - Standardize CEPA and LCCD (#1909) ; - LCCD test suite (#1913, #1937) ; - Extensive improvements to DFGrad (#1915, #1923, #1953, #1974, #2049, #2079) ; - Expose cube-generating functions to python (#1917) ; - Fix cppe interface (#1922) ; - Move import of qcelemental (#1925) ; - Int to list for array variables (#1927) ; - Add module provenance to Wavefunction (#1935) ; - Add wfn to PSIMRCC (#1949, #1956) ; - Print CCSD pair energies (#1950) ; - Test label for c1-incompatible tests (#1958) ; - DCT and DFOCC densities to Wavefunction (#1963, #1964) ; - basis_sets handled by wavefunction.minsthelper (#1970) ; - Remove unused libtrans code (#1976) ; - Cleanup code for basis set handling (#1994) ; - MP 2.5/3.5 default to DF (#1980) ; - Print and save electron count from grid (#2001) ; - Clean libtrans (#1991) ; - Fix to high ang. mom. basis set (#2003) ; - Programmer docs (#2015) ; - Save cc response variables to wavefunction (#2022) ; - Compute electric field (#2032) ; - Better PSIO error reporting (#2030) ; - FCHK writer/testing improvement (#1884, #2047, #2058, #2063, #2091) ; - Set Lagrangian in Wavefunction (#2064, #2066, #2070) ; - Linux Azure fix (#2074) ; - Remove code in DF-DCT and DFOCC (#2067, #2078) ; - Python functions for DF deriv",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683:2740,variab,variables,2740,https://psicode.org,https://github.com/psi4/psi4/issues/1562#issuecomment-871887683,1,['variab'],['variables']
Modifiability,"; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Detecting C compile features; -- Detecting C compile features - done; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++; -- Check for working CXX compiler: /home/amjames2/.conda/envs/py3/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Found PythonInterp: /home/amjames2/.conda/envs/py3/bin/python (found version ""3.5.2"") ; -- Found PythonLibs: /home/amjames2/.conda/envs/py3/lib/libpython3.so; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found libdl: /usr/lib64/libdl.so ; CMake Error at CMakeLists.txt:35 (find_package):; Could not find a package configuration file provided by ""libefp"" with any; of the following names:. libefpConfig.cmake; libefp-config.cmake. Add the installation prefix of ""libefp"" to CMAKE_PREFIX_PATH or set; ""libefp_DIR"" to a directory containing one of the above files. If ""libefp""; provides a separate development package or SDK, be sure it has been; installed. -- Configuring incomplete, errors occurred!; ```. It seems that if I add two lines to the `CMAKE_ARGS` section of `ExternalProject_Add(psi4_core…` . ```; -Dlibint_DIR=${libint_DIR}; -Dlibefp_DIR=${libefp_DIR}; ```. Then the arguments that I pass on the command line are correctly fed into the psi4_core build. Currently they are not passed in but the step that would download/build them was skipped since they were detected in the initial CMake pass. The `CMAKE_PREFIX_PATH` option for detecting them works since that argument is currently passed through. The documentation should be edited to remove the suggestion that `-Dlibint_DIR` type options be used, or the source ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/516:2430,config,configuration,2430,https://psicode.org,https://github.com/psi4/psi4/issues/516,1,['config'],['configuration']
Modifiability,"; 2.194550D+00 8.829680D-01; 1.109110D+00 4.620610D-01; 3.746410D-01 2.228600D-02; 1.770800D-01 -4.353000D-03; 8.106100D-02 1.102000D-03; S 11 1.00; 5.546500D+03 -7.300000D-05; 8.382140D+02 -5.080000D-04; 1.821870D+02 -1.158000D-03; 3.121230D+01 1.219300D-02; 1.953140D+01 -8.785400D-02; 8.240990D+00 3.382000D-01; 2.194550D+00 -5.765500D-01; 1.109110D+00 -4.092980D-01; 3.746410D-01 5.674590D-01; 1.770800D-01 6.124890D-01; 8.106100D-02 1.432310D-01; S 1 1.00; 3.746410D-01 1.000000D+00; S 1 1.00; 1.770800D-01 1.000000D+00; S 1 1.00; 1.001000D-01 1.000000D+00; S 1 1.00; 4.120000D-02 1.0000000; P 9 1.00; 1.889880D+02 5.850000D-04; 2.128680D+01 3.692300D-02; 1.003960D+01 -2.353240D-01; 3.451800D+00 3.414830D-01; 1.974560D+00 5.347880D-01; 1.024200D+00 2.651410D-01; 4.494370D-01 2.578700D-02; 1.866480D-01 5.220000D-04; 7.348100D-02 6.060000D-04; P 9 1.00; 1.889880D+02 -2.560000D-04; 2.128680D+01 -1.168200D-02; 1.003960D+01 8.319200D-02; 3.451800D+00 -1.569700D-01; 1.974560D+00 -2.245180D-01; 1.024200D+00 -1.144510D-01; 4.494370D-01 3.753560D-01; 1.866480D-01 5.751360D-01; 7.348100D-02 2.459170D-01; P 1 1.00; 5.981000D-01 1.000000D+00; P 1 1.00; 9.618000D-02 1.000000D+00; P 1 1.00; 3.590000D-02 1.0000000; D 9 1.00; 1.326620D+02 5.720000D-04; 3.760540D+01 4.402000D-03; 1.038910D+01 -4.092200D-02; 6.490170D+00 9.966100D-02; 3.454510D+00 3.226630D-01; 1.844130D+00 4.003430D-01; 9.624780D-01 2.683060D-01; 4.728530D-01 8.484700D-02; 1.932000D-01 7.632000D-03; D 1 1.00; 4.728530D-01 1.000000D+00; D 1 1.00; 1.932000D-01 1.000000D+00; D 1 1.00; 7.820000D-02 1.0000000; F 1 1.00; 4.064000D-01 1.000000D+00; F 1 1.00; 1.848000D-01 1.0000000. ****. """""",; key=""basis"",; name=""only_valence"",; ). psi4.set_options(; {; ""e_convergence"": 1e-8,; ""d_convergence"": 1e-8,; }; ). psi4.core.set_output_file(""output_only_valence.dat"", False). psi4.energy(""scf""); e2 = psi4.variable(""HF TOTAL ENERGY""). ### Compare; diff = e2 - e1. assert compare_values(0.0, diff, 7, ""ECP + valence vs. only valence""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3167#issuecomment-2121013202:5381,variab,variable,5381,https://psicode.org,https://github.com/psi4/psi4/pull/3167#issuecomment-2121013202,1,['variab'],['variable']
Modifiability,=========================== short test summary info ===============================================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ===========================================================,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3837,plugin,plugin,3837,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,========================================; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:99: Psi4 not detecting MRCC. Add `dmrcc` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packag,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:3864,plugin,plugin,3864,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"> . > PSI4 has UBCC(T) `energy('bcc(t)')` on a ROHF reference, but only conventional integrals with the `ccenergy` module. Maybe you already found it. o_O No, in fact I would have completely missed that! I checked the method table [here](http://www.psicode.org/psi4manual/master/notes_c.html#alternate-implementations) and thought Psi4 cannot do BCCD(T) at all. Perhaps BCCD and BCCD(T) could be added as methods to that docpage?. > ; > You may want to have a look at Piecuch's methods (and his group's general work) for which now there is a plugin available https://github.com/piecuch-group/psi4_cct3 . Thanks, I will check it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316:542,plugin,plugin,542,https://psicode.org,https://github.com/psi4/psi4/issues/1863#issuecomment-611929316,1,['plugin'],['plugin']
Modifiability,"> ; > ; > FWIW, I cannot make the input fail with mkl2020.1 on my Ryzen (gen1) workstation.; > It has instructions till AVX2. MKL and any binaries generated by Intel compilers are almost always detecting CPU vendors based on vendor first and instruction support second. Something like this:; ```; if ( CPU_VENDOR == Intel){; if ( CPU_HAS_AVX_512 ) <call AVX-512 version of the function>; if ( CPU_HAS_AVX2 ) <call AVX2 version of the function>; ...; else <call SSE2 version of the function>; } else { //non-Intel CPU; <call SSE2 version of the function>; }; ```; So this means that unless one adds some some unofficial hacks before compiling the binaries, all AMD CPUs, regardless of their AVX support, will be running SSE2 (or similarly unoptimized) codepaths only.; This unfair CPU dispatch function can be overridden at runtime for the MKL using an unofficial debug environmental variable, but if the binary was compiled with an Intel compiler, then all parts touched by the auto-vectorizer are probably still going to execute the SSE2 (or a similarly unoptimized) path on AMD CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655:883,variab,variable,883,https://psicode.org,https://github.com/psi4/psi4/pull/1896#issuecomment-633666655,1,['variab'],['variable']
Modifiability,"> ; > ; > The PSIO error can occur for running out of RAM? Is it writing to a virtual file (for the lack of better term)?. On some systems, /tmp is a ramdisk by default, so if PSI4 is configured to use that as a scratch dir, the system can easily run out of memory.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1361#issuecomment-517414594:184,config,configured,184,https://psicode.org,https://github.com/psi4/psi4/issues/1361#issuecomment-517414594,1,['config'],['configured']
Modifiability,"> ; > I was wondering, since you are modifying the class, would you be able to implement these changes as well?. I could look into it, but I have other priorities for the next couple of months. I am also yet to receive any feedback/reviews on the changes pushed so far, so I would prefer to have the commits of this PR to be about refactoring only.; I think adding new features would be better done in a separate PR, after this is merged or rejected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560:331,refactor,refactoring,331,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1808472560,1,['refactor'],['refactoring']
Modifiability,"> > ## User API & Changelog headlines; > > ```; > > * [x] N/A; > > ```; > ; > The entire `psi::Matrix` class is marked as `PSI_API`, so I think adding any public member functions amounts to a change in API. The reason I didn't mark anything here as an API change is because neither of the new `eigen_map` functions are added to the list of exported `Psi4::Matrix` functions in `export_mints.cc`, which means that they cannot be utilized in the PsiAPI or Psithon input modes. Which is fine, because you'd probably prefer the `Psi4::Matrix` as a NumPy array in those contexts anyway. . The `PSI_API` flag makes the symbols for these functions visible in the Psi4 shared object library, but I'm not sure if that alone constitutes a User API change. I suppose it could count for plugin developers, as it is a new functionality within Psi4 that they can utilize in their plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3143#issuecomment-1995408756:775,plugin,plugin,775,https://psicode.org,https://github.com/psi4/psi4/pull/3143#issuecomment-1995408756,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"> > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed.; > ; > MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. This is completely correct. The lone OLCCD algorithm in `occ` does not compute LCCD with the input orbitals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739:628,variab,variables,628,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201136739,1,['variab'],['variables']
Modifiability,"> > > > lgtm, thanks! Is there any atomic unit for specific rotation?; > ; > > > since specific rotation is normalized for path length and concentration in experimental settings, I'd say the use of deg/[dm (g/cm^3)] for specific rotation is even more ubiquitous than the use of NM for wavelength for dynamic properties. @lothian may have more to say on this topic.; > ; > > Are we talking about storing the specific rotation or the G' tensor? I would think we'd want to store the latter in atomic units (along with the field energy, also in a.u.), and not store the specific rotation, which can quickly be computed from the tensor and the energy.; > ; > Both tensors and scalars are saved to psivars in the PR. I think that's usual procedure as we try to be explicit (mp2 tot, mp2 corl, hf tot) even if the arithmetic is easy. We are trying to map psivars more closely to qcschema properties though, which are rigidly atomic units. Over there, it's easy to request the ubiquitous user units of deg/[dm (g/cm^3)] be returned from au storage. We can add such capability to the `psi4.variable()` query in psi4. So my question was whether we could store the qcvars data in au. The qcvar name with nm I think is a reasonable exception since that won't translate directly to qcschema. in that case, we could in theory store the specific rotation in ""atomic units"" if such a thing even exists. it's computed in `ccresponse` from the trace of the G' tensor (in a.u.) which is then normalized for path length, concentration, and molecular weight to give the ""specific"" rotation, so I suppose we'd need atomic units for those quantities.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-716630918:1081,variab,variable,1081,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-716630918,1,['variab'],['variable']
Modifiability,"> > @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play.; > ; > Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache.; > ; > https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477; > ; > The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling. That is helpful. I got it in the end by taking the `psi4-path-advisor cmake` command without evaluation, modifying it, and running that. I still think that being explicit in the debug build tips is for the best, given the developer demographic for Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171:725,config,configure,725,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312914171,2,['config'],['configure']
Modifiability,"> > I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR.; > ; > Is this a future PR you'll commit to doing, or a future PR you'll leave to somebody else?. I will commit to doing it. I will likely open it up within the next few days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231718373:74,refactor,refactor,74,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231718373,1,['refactor'],['refactor']
Modifiability,"> > It appears that the current solidharmonics.cc is not used ANYWHERE in the Psi4 code.; > ; > Somehow solidharmonics.cc is getting used, because changing it changes the integral ordering (link is to the `gss` to `sss` PR: https://github.com/psi4/psi4/pull/2537/files#diff-76f4c1f378b6a48ede6c4f938378b54719f968680edca78453d9751e87cebbf9); > ; > EDIT: not necessarily a block on your plan, but that's not isolated code. Looks like I did a naive `grep -r ""solidharmonics.cc""` instead of its functions. My bad. In that case, refactoring solidharmonics.cc with my new code can serve as an effective test for my functions, but it does make it harder :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1209829926:524,refactor,refactoring,524,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1209829926,1,['refactor'],['refactoring']
Modifiability,"> > So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however.; > ; > > Thoughts?; > ; > Unless the DFJCOSK changes would undo much of this PR, I think a follow-up PR would be best. DFJCOSK won't explicitly undo most of this PR, nicely enough, though it will require some changes to how the computed_shells member functions/variables are handled. Regardless, it won't lead to significant changes in test_erisieve, so a separate PR should work fine. And ultimately, the big point of this PR is to allow testing of density screening in test_erisieve without needing to directly construct and use separate TwoBodyAOInt objects, since the plan is to remove density screening from TwoBodyAOInt entirely. . Thank you for your feedback!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152705815:216,extend,extend,216,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152705815,2,"['extend', 'variab']","['extend', 'variables']"
Modifiability,"> > Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.; > ; > Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?. Where are you trying to set this at? The first thing that comes to mind is the functional can be ""locked"" so that when a threaded V matrix is computed we can correctly replicate the `SuperFunctional` to compute on each thread. It may be worth double checking that you have the correct locking guards around this like other setters.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-612060219:58,variab,variable,58,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-612060219,1,['variab'],['variable']
Modifiability,"> > The atom vs shell loop structure is an open question of the PR:; > > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > > ; > > ; > > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large.; > ; > I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?. @susilehtola Based on your experience, what do you think should be done? Should we preserve the old loop structure of DirectJK (atom blocking) or try shell blocking (and refactor this code heavily)? I would think that performance gain is minimal because the shell screening is performed inside the atom blocking loop, but that is only my suspicion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129:761,refactor,refactoring,761,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992619129,2,['refactor'],"['refactor', 'refactoring']"
Modifiability,"> > The second reason is that we already have reviews on CompositeJK, and to break this into two PRs at this point would also involve extra work for the core developers too.; > ; > You have it backwards. Most of the work in PR reviewing is reading the code and figuring out what you're trying to do. Seeing ""oh, this is just moving code"" around is not work for me. Figuring out what parts of your PR are about Composite JK, what parts are about refactoring LinK, and what parts are about Direct-DF-J is a lot of work. Zach's plan does mean more work for you, but a smoother review process. I am still not willing to break this into two PRs (due to the fact that I am in finals season and do not have much time). However, what I can do, is point to which parts of the code involve refactoring the LinK, Direct-DF-J, and CompositeJK in the PR description.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1097103857:445,refactor,refactoring,445,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1097103857,2,['refactor'],['refactoring']
Modifiability,"> > Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > > ; > ; > > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > ; > > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > > ; > ; > > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object).; > ; > ; > ; > Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR. I could also do both 1 and 2 in this PR, if that makes things easier. Which do y'all prefer (2 then 1, or 1 and 2) @zachglick @JonathonMisiewicz ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035:218,maintainab,maintainable,218,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253891035,1,['maintainab'],['maintainable']
Modifiability,"> @davpoolechem, tests/python/3-index-transforms/input.py isn't running correctly. Do you happen to understand how to edit it while still preserving the intent of the test?; > ; > ```; > Fatal Error: SCF_SUBTYPE=INCORE was specified, but there is not enough memory to do in-core! Increase the amount of memory allocated to Psi4 or allow for out-of-core to be used.; > ```. After some quick tinkering, I was fix the issue by adding the line. `psi4.set_options({ ""scf_subtype"": ""auto"" })`. under the definition of `mol`. Setting `SCF_SUBTYPE` explicitly like this circumvents the switch to the `INCORE` MemDF algorithm in the DFHelper constructor that is causing the exception. . Cross-checking against the test output from another Psi4 build leads to basically no difference in the output files, specifically in MemDF header printout, so I believe the intent of the test is also preserved (i.e., there are no alterations into what configurations of MemDF are tested).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904:930,config,configurations,930,https://psicode.org,https://github.com/psi4/psi4/pull/3131#issuecomment-1936037904,1,['config'],['configurations']
Modifiability,"> @loriab After attempting to implement your suggestion, I find it looks uglier. Might I suggest that we wait until ADC and EOM are hooked up, and then discuss which way of formatting these variables is best? Once we have more options, my opinion may change. sure, sounds good.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1064148919:190,variab,variables,190,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1064148919,1,['variab'],['variables']
Modifiability,"> @loriab changed the build system, and it's no longer clear to me how you even build Psi4 with debug symbols. Can you explain how you do that now? I assume that something needs to change with eval $(conda/psi4-path-advisor.py cmake)... It's not at all clear to me where the line in Lori's last comment comes into play. Sorry, I didn't realize the path-advisor route looked so opaque. It didn't so much change the build system as automate generation of two files (conda env spec and cmake cache) that seed the build process. So to switch to debug, one wants to `-D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""`. This can be done (a) skipping the `psi4-path-advisor cmake` stage entirely and only running cmake to configure, (b) running `psi4-path-advisor cmake` then editing the cache file it produces before running the cmake configure, (c) running `psi4-path-advisor cmake` to produce the cache file, then running approximately `cmake -S. -Bobjdir -Cpath/to/cache -D CMAKE_BUILD_TYPE=Debug -D CMAKE_CXX_FLAGS=""-O0""` to overwrite what's in cache. . https://github.com/psi4/psi4/blob/master/conda/psi4-path-advisor.py#L477. The jotted directions I had in the post above were for when you already have a Release objdir and you want a Debug and don't mind it being irrecoverable to Release. Then one can hack up the objdir/CMakeCache.txt by changing CMAKE_BUILD_TYPE and adding O0, then recompiling.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095:716,config,configure,716,https://psicode.org,https://github.com/psi4/psi4/pull/3206#issuecomment-2312837095,2,['config'],['configure']
Modifiability,"> Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. > PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?. Psi likes to have a uniform interface when one can get the same value from different engines, but this has really only worked out for empirical dispersion. So the other principle is that it's fine for options to be a passthrough to the upstream project. Then PCM, PE, and DDX are effectually engine/upstream specifiers rather than the method flags that ""PCM"" suggests.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358:140,variab,variables,140,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1336353358,1,['variab'],['variables']
Modifiability,"> Also add it https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L77-L80 and https://github.com/psi4/psi4/blob/master/cmake/math/ConfigMath.cmake#L14-L20, please. then lgtm!. Done. I've made Flexiblas the first one to look for, since it's backend agnostic and can also be used to wrap MKL.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632:134,Config,ConfigMath,134,https://psicode.org,https://github.com/psi4/psi4/pull/2246#issuecomment-880185632,1,['Config'],['ConfigMath']
Modifiability,"> Are there any Python bindings that hit the deprecated fns?. I don't think so? They are not used in `py::class_<Dimension>` in `export_mints.cc`, if there are other places to look for Python bindings let me know and I will check. > This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. Perhaps, but I delayed it because. 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282:496,plugin,plugins,496,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810074282,1,['plugin'],['plugins']
Modifiability,"> As a point of organization, keep responses _on_ comments on specific lines of code limited to responses _about_ those comments. Your point about BSISA didn't belong below my point about how a comment needed to be corrected.; > ; > I still don't like the idea of adding member variables to `PopulationAnalysisCalc` that are not required for all or even most population analyses. This is how you get the explosion of member variables polluting a certain Psi module. I recommend either making a subclass or demoting those member variables to arguments of a function call inside the parent population analysis. The latter option requires that any further requests for a particular population analysis be done at the time the population analysis is done, rather than reading a new OEProp request. This makes more sense to me. Actually, I do like your idea for the latter option. Let me ask others what they think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-742616334:278,variab,variables,278,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-742616334,3,['variab'],['variables']
Modifiability,"> As a point of organization, keep responses _on_ comments on specific lines of code limited to responses _about_ those comments. Your point about BSISA didn't belong below my point about how a comment needed to be corrected.; > ; > I still don't like the idea of adding member variables to `PopulationAnalysisCalc` that are not required for all or even most population analyses. This is how you get the explosion of member variables polluting a certain Psi module. I recommend either making a subclass or demoting those member variables to arguments of a function call inside the parent population analysis. The latter option requires that any further requests for a particular population analysis be done at the time the population analysis is done, rather than reading a new OEProp request. This makes more sense to me. Okay, I refactored my code to match your suggested changes (passing the former member variables into a function)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-742726551:278,variab,variables,278,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-742726551,5,"['refactor', 'variab']","['refactored', 'variables']"
Modifiability,"> Bumping this - the [C7g](https://aws.amazon.com/ec2/instance-types/c7g/) ARM-based Amazon EC2 instances are probably the most cost-effective choice for high-performance CPU computing in the cloud right now. Not trying to derail this conversation, but I am not convinced that is true, at least if one plans to run close to 100% utilization for extended periods of time.; Something like a c7gd.12xlarge (48 vCPU, 96 GiB RAM, NVME SSD in the node) costs 590 USD per month, if the cheapest Amazon region (Mumbai, India) is used and 1 year is paid for in advance.; From a different provider one can rent a bare metal Ampere Altra Q80-30 server (80 cores, 128 GiB RAM, NVME SSD in the node), for 185 USD per month + $85 setup fee.; Even a 48 core latest-gen AMD EPYC, which will quite likely be faster than the Graviton 3 instance, costs only $218/month, and it comes with 256 GiB of RAM. Both of these options are cheaper per hour than Amazon's spot pricing (!!) for c7gd.12xlarge. So unless there are complications like funding agencies not allowing grant funds to be spent at arbitrary server providers, I think one can get more bulk compute for less money, compared to Amazon. Of course on-demand EC2 is very good for doing short bursts of compute, but for job marathons I don't think Amazon is all that competitive, not even with their own ARM CPUs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3198#issuecomment-2286089263:345,extend,extended,345,https://psicode.org,https://github.com/psi4/psi4/issues/3198#issuecomment-2286089263,1,['extend'],['extended']
Modifiability,"> Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it.; > ; > All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc.; > ; > This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in [#2261 (comment)](https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277); > ; > In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified. All fair criticisms, and that clears it up. The code was originally pure C and later modified to fit (nominally) within a C++ framework, hence the structure of the variable declarations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467:109,variab,variables,109,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1244241467,4,['variab'],"['variable', 'variables']"
Modifiability,"> DESTDIR is always set during build and install. It contains the real stage directory path that cmake uses to determine where files are installed. You mean _you_ are setting `DESTDIR` as an environment variable, right? Whereas old psi used to use it explicitly (https://github.com/psi4/psi4/blob/1.2.x/external/upstream/libxc/CMakeLists.txt#L33), that string doesn't appear in the source now, and in an objdir, it only activates if the envvar is set, and I've tested with GNU Make that it isn't set by default. >> That (and basically any envvar) is untested; in my opinion, CMake has too many input routes already :-). > What does this mean?; > Every port uses DESTDIR to supply stage directory. It is super well tested. I meant environment variables capable of influencing the psi4 build system have not been exercised -- I've stuck with CMake variables. I was not acquainted with user use of DESTDIR, as `CMAKE_INSTALL_PREFIX` has worked fine for users and other ports like Fedora (https://src.fedoraproject.org/rpms/psi4/blob/rawhide/f/psi4.spec#_134). > psi4 build adds DESTDIR to its inner stage directory which causes this problem. When I run an install and set envvar DESTDIR, I do see the two dirs under it that are your original issue. I'm glad to finally understand how this comes about, and I can look into this eventually. For now, I'd suggest either using `CMAKE_INSTALL_PREFIX` or the subdirectory (one of two) from env DESTDIR; either looks to contain the full installation directory you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040:203,variab,variable,203,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325736040,3,['variab'],"['variable', 'variables']"
Modifiability,"> Details about how the integrals were computed should be the province of the JK object, not the HF wavefunction, so I disagree with creating this new variable as described.; > ; > Can we instead have `computed_shells_per_iter_` on the JK object and query the JK object, after the HF, for test purposes?. That should definitely be doable! Give me a bit, and that change can be made.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1112211696:151,variab,variable,151,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1112211696,1,['variab'],['variable']
Modifiability,"> Good points. The code does run UHF/UKS as needed, and the MBIS routine can handle these cases as well. I have a few reference values for free atom volumes for elements H, Li, C, N, O, F, Ne, Si, S, and Cl, and we match these values. So I feel good about getting those ground states correct, but in general they many not be accurate, particularly for transition metals I'd imagine. I am inclined to trust the source of the ground state occupancy values from SAD, though. Note that SAD hasn't been using those values in a long time; instead it runs spin-restricted calculations. Also, SAD isn't symmetry aware at the moment, which is a problem especially for transition metals and lanthanides and actinides where e.g. the s and d orbitals are very close in energy and the energy differences between different configurations are just eV. The proper way to do it is to impose symmetry, so that the occupations can be controlled. This is the way it is in PySCF; the ground states are from fully numerical calculations I did in https://journals.aps.org/pra/abstract/10.1103/PhysRevA.101.012516",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679:809,config,configurations,809,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791695679,1,['config'],['configurations']
Modifiability,"> Good work Andy. I like the intent of this PR, which is to consolidate incremental Fock code between different derived `JK` classes. I think that if the incremental Fock feature is to be promoted to the parent `JK` class, it is important that the implementation be as efficient and maintainable as possible. In that respect, I think there are some general improvements to be made:; > ; > The way you've structured incremental Fock keeps eight lists of matrices attached to each `JK` object: copies of the previous `J`, `K`, `wK`, and `D` matrices, and differences between the last two iterations `J`, `K`, `wK`, `D`. In the interest of efficiency, I think it would be best to not store these matrices. Incremental Fock as implemented in the `DFJCOSK` class is a little better about this. That code adds the difference in `J`/`K`/`wK` to the appropriate buffer, which is not zeroed out between SCF iterations. This requires keeping only one list of matrices, the previous iteration `D`, which in my opinion is cleaner. (I have some thoughts on getting around storing the previous `D` matrix too.); > ; > Speaking more broadly about the design of the `JK` class, one valuable aspect of the `JK` class is that it is stateless and decoupled from the SCF procedure. `JK` classes have a well-defined [interface](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/jk.h#L175-L209). The variables like `incfock_count_` that you've proposed adding to the `JK` class break this statelessness, and my opinion that kind of logic should be in the SCF driver, not the `JK` object.; > ; > Let me know if any of these thoughts are unclear. I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. The scope of this PR is to f",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623:283,maintainab,maintainable,283,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1230790623,1,['maintainab'],['maintainable']
Modifiability,"> Have you tried with Python 3.11 yet?. update, I've built python 3.11 rc and numpy from source (first time ever). I did have to use the most recent v2.10.0 pb11. By turning off some diis (see below), I can get the variant on test tu1 to run through 6 SCF iterations (not to convergence) before segfaulting. major things still to investigate -- installing scipy, what lapack libraries for numpy is pip hiding from me, are the timer files closing cleanly when it throws the install-scipy-or-disable-accelerator message. and, of course, all this is on master, not the 1.3.2 of interest to you. . ```; memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; set scf scf_initial_accelerator none; set diis off; energy('scf'). compare_values(-76.0266327341067125, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357:788,variab,variable,788,https://psicode.org,https://github.com/psi4/psi4/issues/2656#issuecomment-1235824357,1,['variab'],['variable']
Modifiability,"> However, I don't understand the; point of your first plot. The HF energies of the structures are fine, but; the MM ones are way too high? Or are these plots of different structures?. No, these are plots of the same structure. That's why I'm not sure what is going on. ; > If you generate your own initial guesses to a constrained; optimization, you will get, in general, different results. Could it be that given these structures differ slightly from the ones that the forcefield was parameterized with that the MM energies are so much higher? In the second plot that I linked, I generated my own initial guesses and with those structures the MM energies are closer.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/647#issuecomment-289561812:486,parameteriz,parameterized,486,https://psicode.org,https://github.com/psi4/psi4/issues/647#issuecomment-289561812,1,['parameteriz'],['parameterized']
Modifiability,"> I agree with your points. However, making that change would require a refactor of `DirectJK` (which zero out the J/K matrices at the beginning of every iteration) as well, as well as an overhaul of the previous `INCFOCK` code that exists in the Psi4 code. For the sake of PR brevity, I suggest punting those changes down to a future PR. Is this a future PR you'll commit to doing, or a future PR you'll leave to somebody else?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1231694428:72,refactor,refactor,72,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1231694428,1,['refactor'],['refactor']
Modifiability,"> I am still not 100% sold on such an explicit long-handed way test_standard_suite is written. Yes, I am increasingly open to a refactoring and consolidation once the build-out is complete. The `test_<mtd>_<driver>_default`s are particularly good candidates. Plus, consolidation has a good chance of allowing autodoc-ing, so that the same path info isn't in test_standard_suite.py, select fns of proc.py, and http://psicode.org/psi4manual/master/notes_c.html#alternate-implementations . But the long-hand isn't the limiting factor in getting the ref data gathered and the psi module codes maximally compliant, so stable for now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1971#issuecomment-666493740:128,refactor,refactoring,128,https://psicode.org,https://github.com/psi4/psi4/pull/1971#issuecomment-666493740,1,['refactor'],['refactoring']
Modifiability,"> I am using the latest git snapshot of the master branch. gtk. [this](https://anaconda.org/psi4/psi4-dev/files) is what I was talking about. It hides dependency tracking from many psi builders and seeds cmake configuration. I was hoping that could carry most builds until FindMPFR called by Libint2Config and I come to terms. Are you building libint2 through psi or using the libint2 conda-package or detecting other pre-built (will need to silence find_apckage(... components) in that case)? For now, I'd add `find_package(eigen)` and hack cmake_module_path as needed. And this should stay open until I get it patched correctly upstream. ```; ambit >=0.5.1,<0.6.0a0, chemps2 >=1.8.9,<1.8.10.0a0, cmake >=3.8, dkh >=1.2,<1.3.0a0, eigen, gau2grid >=2.0.3,<3.0a0, gcc_linux-64 7.*, gdma >=2.2.6,<2.2.7.0a0, gfortran_linux-64 7.*, gxx_linux-64 7.*, hdf5 >=1.10.6,<1.10.7.0a0, libint2 2.6.0 hc9558a2_9, libxc >=4.3.4,<5.0a0, mkl-devel 2019.*, mpfr, msgpack-python, networkx >=2.4, numpy >=0.12.0, pcmsolver >=1.2.1,<1.2.2.0a0, pybind11-headers >=2.5.0,<2.6.0a0, pytest, pytest-xdist, python >=3.8,<3.9.0a0, qcelemental >=0.17.0,<1.0, qcengine >=0.17.0,<1.0, simint >=0.7,<0.8.0a0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507:210,config,configuration,210,https://psicode.org,https://github.com/psi4/psi4/issues/2046#issuecomment-737400507,1,['config'],['configuration']
Modifiability,"> I can put in an INSIST_FIND_PACKAGE signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. IMO, it's best to have a set of variables per-bundled dependency, because some packages might be either missing, or have some problems on some platforms, and it's better to be able to turn them on/off individually. Bundled ```pybind11``` also installs files; ```; include/pybind11/attr.h; include/pybind11/cast.h; ...; share/cmake/pybind11/pybind11Tools.cmake; ```; ```; that are in direct conflict with standalone package. These files just can't be installed by psi4. > I'm glad to look at your build directive if that'd help. Thank you for your offer! I am ok for now, but I will ask you if I run into problems.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343774871:129,variab,variables,129,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343774871,2,['variab'],['variables']
Modifiability,"> I don't see any issues cropping up. I should make some documentation updates though to inform users how optking inherits logging from psi4. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4. Great, thanks for checking, @AlexHeide !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935:114,inherit,inherits,114,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526615935,2,['inherit'],"['inherit', 'inherits']"
Modifiability,"> I made all of the requested changes, barring the `iteration_` variable, which I personally believe is necessary. If you have a workaround, please let me know :).This PR should be _really_ close to being finalized. At risk of being grumpy, please don't say you made all the requested changes unless you actually have. There were many of my comments that still haven't been addressed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937754577:64,variab,variable,64,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937754577,1,['variab'],['variable']
Modifiability,"> I really want to know how you stumbled onto this. :-) Yeah, so ""superbigam"" is now 7-7-4-12-7-5, and when I built that in Dec for 2.8.0 I only set the 12 for eri3, forgetting my own advice to make eri2 equal eri3. So rebuilding for 2.8.2, I knew I had to add symbols to the configuration.cc patch for eri2. Started searching patterns and realized I had P twice in the spdfg string. Then realized libmints (where I thought I had copied it from) had the same trouble. Then realized that libint had a mix of troubles.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3130#issuecomment-1932715288:276,config,configuration,276,https://psicode.org,https://github.com/psi4/psi4/pull/3130#issuecomment-1932715288,1,['config'],['configuration']
Modifiability,"> I think cmake will largely ignore those flags for psi4. Not true by default. Some Psi4 files and plugins like CCT3 are affected.; ```; make --trace; ...; cd /home/gytibor/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src/psi4/libdiis && /home/gytibor/.conda/envs/psi4gcc/bin/x86_64-conda-linux-gnu-c++ -DUSING_LAPACK_MKL -I/home/gytibor/psi4/psi4/include -I/home/gytibor/psi4/psi4/src -I/home/gytibor/.conda/envs/psi4gcc/include/python3.9 -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include -march=native -O3 -DNDEBUG -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -fopenmp -std=c++1z -MD -MT src/psi4/libdiis/CMakeFiles/diis.dir/diismanager.cc.o -MF CMakeFiles/diis.dir/diismanager.cc.o.d -o CMakeFiles/diis.dir/diismanager.cc.o -c /home/gytibor/psi4/psi4/src/psi4/libdiis/diismanager.cc; ```; Interestingly, `-DCMAKE_Fortran_FLAGS="""" -DCMAKE_CXX_FLAGS="""" -DCMAKE_C_FLAGS=""""` not only appends to, but removes the flags coming from conda:; ```; make --trace; ...; cd /home/gytibor/psi4/objdir/psi4-core-prefix/src/psi4-core-build/src/psi4/libdiis && /home/gytibor/.conda/envs/psi4gcc/bin/x86_64-conda-linux-gnu-c++ -DUSING_LAPACK_MKL -I/home/gytibor/psi4/psi4/include -I/home/gytibor/psi4/psi4/src -I/home/gytibor/.conda/envs/psi4gcc/include/python3.9 -isystem /home/gytibor/.conda/envs/psi4gcc/include -march=native -O3 -DNDEBUG -fPIC -fvisibility=hidden -fvisibility-inlines-hidden -fopenmp -std=c++1z -MD -MT src/psi4/libdiis/CMakeFiles/diis.dir/diismanager.cc.o -MF CMakeFiles/diis.dir/diismanager.cc.o.d -o CMakeFiles/diis.dir/diismanager.cc.o -c /home/gytibor/psi4/psi4/src/psi4/libdiis/diismanager.cc; ```; Probably the easiest way to keep the conda flags out of the build?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026051711:99,plugin,plugins,99,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026051711,1,['plugin'],['plugins']
Modifiability,"> I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. Yes, there's some graphs to prove it I should dig up. Thanks for reading the printouts -- I glanced at the logic but not the warnings. Now memory and algorithm are printed with ""high-memory""/""low-memory"" labels and without efficiency judgements.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537:44,adapt,adapted,44,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687637537,1,['adapt'],['adapted']
Modifiability,"> I was not acquainted with user use of DESTDIR, as CMAKE_INSTALL_PREFIX has worked fine for users and other ports like Fedora . ```DESTDIR``` is a GNU standard. It is totally separate from ```CMAKE_INSTALL_PREFIX```. ```${DESTDIR}``` is also implicitly prepended to ${CMAKE_INSTALL_PREFIX} by makefiles written by cmake.; You don't need to use it in your code, it always works. You need to build psi4 with the env variable ```DESTDIR=/tmp/path-to-onstall-psi4-to```.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. But psi4 writes the the whole build directory there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325740409:415,variab,variable,415,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325740409,1,['variab'],['variable']
Modifiability,"> I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... In another project, I have the glossary-like doc generated by python to cut down on that. Perhaps someday ...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129513001:55,variab,variable,55,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129513001,1,['variab'],['variable']
Modifiability,"> I would keep the ""COSX"" for recognition. That's a good point; ""COSX"" is a fairly well-known algorithm. For consistency throughout the psi4's `libfock` library, I think it would be good to call it ""COSK"" over ""COSX""; all reference to the exchange matrix use the variable ""K"". > This PR implements 2 grids instead of 3? That Turbomole team showed it worked well, just asking. Yes, the SCF is first converged on a small grid (specified by `COSK_RADIAL_POINTS` and `COSK_SPHERICAL_POINTS`). Afterwards, a single iteration is performed on a larger grid (specified by `COSK_RADIAL_POINTS_FINAL` and `COSK_SPHERICAL_POINTS_FINAL`). A good future mini-optimization would be to add a third medium grid, which would be used to converge the SCF after the small grid but before the final grid evaluation. > I am in general for a simple way of setting quadrature grids, psi4-specific named grids. That is a bigger project though. Here it would be enough to have an efficient default and in the manual a suggestion how to make a tight/accurate one. After we gain experience with the psi4 COSX we can make a couple useful defaults. I agree, it would be nice to have named quadrature grids. For now, I'll update the manual with some recommended spherical/radial point values.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160:263,variab,variable,263,https://psicode.org,https://github.com/psi4/psi4/pull/2567#issuecomment-1116516160,1,['variab'],['variable']
Modifiability,"> I'm in favor of deprecating Da and Db for anything other than internal SCF use and creating a new wavefunction member to store all the densities, with proper labeling. This will of course be a lot of code refactoring, but that is quite literally the entire point of me doing all this cc PRs. And of course, somebody will need to tell dfocc about this API change. 🙂. Thanks for the enumeration of the organizational state of all the densities. The new Wfn member for finalized, labeled densities sounds good to me. Are the ES CC densities ready for that state yet, or are they still in preparation? For any that are still in preparation but still in need of saving, I guess I propose a temporary member of Wfn that is marked as having a finite lifetime. Same as Wfn.arrays, just not Wfn.arrays :-) Ben's already nervous about storing the per-atom charges that end up in qcvars, so I'm just not in favor of densities there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2541#issuecomment-1094491672:207,refactor,refactoring,207,https://psicode.org,https://github.com/psi4/psi4/pull/2541#issuecomment-1094491672,1,['refactor'],['refactoring']
Modifiability,"> I've started the review, but I'm confused by the original Ochsenfeld paper.; > ; > At the start of the algorithm, why do they say ""Loop over all mu in significant bra-shell pairs"" rather than ""Loop over all shells mu""? Every shell is in at least one significant pair, right?; > ; > I imagine this has to do with their reference to Ahlrichs prescreening and ""the significant shell pairs have been preselected by overlap criteria,"" but I don't follow the details. The shell prescreening for kets can be done over all shells, or over shells blocked by task (atom-pair). See the ""Loop over types (angular momenta, contraction, ...) of shell pair blocks"" header. In my implementation, I did it over all shells prior to entering the task loop, but those two implementations are equivalent. I will refactor my code so that it conforms to the algorithm in the paper, for easier review and less confusion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618:793,refactor,refactor,793,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-1004198618,1,['refactor'],['refactor']
Modifiability,"> If you know of any conventions for handling plugins/libgcc dependencies within conda... The default anaconda channel includes a libgcc, so you can declare a depenency on it. I assume you've considered that and it's the wrong version or something? Generally, you don't need to have everything statically linked in conda, since you can either provide shared libraries in your package or depend on other packages that include shared libraries, and everything will be patched up with `RPATH`s.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172149716:46,plugin,plugins,46,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149716,1,['plugin'],['plugins']
Modifiability,"> Immediate questions: @davpoolechem - Is JK stable enough for this PR, or do you need a hold on this while refactoring? @jturney - Does this sound more like a new library of its own, or something that belongs in `libmints`? @andyj10224 - Can you comment on what the difference is between `libffm` and `fmm tree`?. CFMM requires two parts: Multipole operations, as well as an octree structure.; FMMTree implements the octree structure needed for CFMM, and there is a lot of code there, so I am splitting this into three parts to aid the review process and to avoid too large a PR. The `FMMTree` class will be in `libfmm` as well. For the record, this PR will not affect `libfock` or any `JK` classes. That will happen in Part 3 (when JK is more stable)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208368845:108,refactor,refactoring,108,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208368845,1,['refactor'],['refactoring']
Modifiability,"> Is SAPT(DFT)/SF-SAPT included with the sapt.cc changes? Since they are mainly python procedures. I just fixed plain SAPT in the latest commit, as it has to be py-side. I'm not sure what to do about sf-sapt and dft-sapt at this point. Leaving those for now unless other have ideas. > How are plugins handled? Especially endorsed ones like sns-mp2, v2rdm_cassscf etc. They'll have to set their own name like https://github.com/piecuch-group/cct3/pull/2/files#diff-dd599d9e2da08b736cbf0b96add9a840R414 or in the pymodule.py file. I've done it for cct3 and adcc (whose py is in psi4/driver) and caspt2 but will have to adjust the other ones you mentioned. And some like pcmsolver, pe, efp/scf won't get recorded. When plugins move to cookiecutter or similar, the module stamping should get baked into the template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1935#issuecomment-648244261:293,plugin,plugins,293,https://psicode.org,https://github.com/psi4/psi4/pull/1935#issuecomment-648244261,2,['plugin'],['plugins']
Modifiability,"> Is there any will to change DFT VV10 ENERGY to behave like empirical dispersion corrections in terms of variables?. Is there any potential harm to this when VV10 is done self consistently?; Only issue I see is breaking old user or p4numpy scripts that rely on the energy being summed up. Is this PR a 1.4 target? If not, could we put a warning or similar in place somewhere that it is subject to change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-802058786:106,variab,variables,106,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-802058786,1,['variab'],['variables']
Modifiability,"> It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?. I am using MKL and eigen build from source code.; here is the cmd line for cmake . `cmake .. -DCMAKE_INSTALL_PREFIX=./install -DEigen3_DIR=/home/yuyeqing/software/eigen3`. and I also export MKL and eigen in bashrc by . ```; export MATH_ROOT=""/home/yuyeqing/intel/oneapi/mkl/latest""; export LD_LIBRARY_PATH=""/home/yuyeqing/intel/oneapi/mkl/latest/lib/intel64:$LD_LIBRARY_PATH""; export EIGEN3_ROOT=""/home/yuyeqing/software/eigen3/include""; ```. cmake output the result log like this:. ```; -- Building using CMake 3.26.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: OFF; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option ENABLE_XHOST: ON; -- Performing Test CMAKE_C_FLAGS [-march=native] - Success, Appending; -- Performing Test CMAKE_CXX_FLAGS [-march=native] - Success, Appending; -- Setting option ENABLE_OPENMP: ON; -- Setting option ENABLE_AUTO_BLAS: ON; -- Setting option ENABLE_AUTO_LAPACK: ON; -- Setting option ENABLE_PLUGIN_TESTING: OFF; -- Setting option ENABLE_CYTHONIZE: OFF; -- Setting option ENABLE_CODE_COVERAGE: OFF; -- Setting option ENABLE_BOUNDS_CHECK: OFF; -- Setting option ENABLE_ASAN: OFF; -- Setting option ENABLE_TSAN: OFF; -- Setting option ENABLE_UBSAN: OFF; -- Setting option ENABLE_MSAN: OFF; -- Setting option MAX_AM_ERI: 5; -- Setting option FC_SYMBOL: 2; -- Setting option BUILD_FPIC: ON; -- Setting option CMAKE_INSTALL_LIBDIR: lib; -- Setting option PYMOD_INSTALL_LIBDIR: /; -- Setting option psi4_INSTALL_CMAKEDIR: share/cmake/psi4; -- Setting option TargetLAPACK_INSTALL_CMAKEDIR: share/cmake/TargetLAPACK; -- Setting option TargetHDF5_INSTALL_CMAKEDIR: share/cmake/TargetHDF5; -- Setting option ENABLE_GENERIC: OFF; -- Setting option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting option psi4_CXX_STANDARD: 17; -- Setting option psi4_CXX_STANDARD_Libint2: 17; -- Setting option SIMINT_VECTOR: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119:46,config,configuration,46,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1620485119,1,['config'],['configuration']
Modifiability,"> Nice work Andy! As I see it, this PR does three things:; > ; > 1. Adds a direct DFJ algorithm; > 2. Moves the LinK code out of the DirectJK class; > 3. Adds individual J/K classes in order to prevent future code duplication; > ; > Because these additions are fairly independent, I think it would be appropriate to break up this PR into two separate PRs. In the first PR, you do steps (1) and (2) by implementing a `DFJlinK` class which is derived from `JK`, just like all of the existing JK algorithms. In the second PR, you refactor the `DFJlinK` class so that it uses a `DFJ` and `LinK` class.; > ; > Also before any of this is done, I think it would be good to address the changes to density-screening we discussed last week. In the interest of minimizing the work of both me and the reviewers, I do _not_ think it would be a good idea to split this into two PRs, since it would involve adding a new JK class (`DFJLinK`), and then removing it, and then adding one again (`CompositeJK`). This would lead to a whole mess of merge conflicts, and involves me taking apart code that is 100% working, and then rewriting it. The second reason is that we already have reviews on CompositeJK, and to break this into two PRs at this point would also involve extra work for the core developers too. Comments on this are appreciated, but I feel __strongly__ about this opinion. On the other hand, I do agree that it would be good to discuss the density screening changes first before this PR is merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1097060877:527,refactor,refactor,527,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1097060877,1,['refactor'],['refactor']
Modifiability,"> Now that I have a copy of the paper, I've been able to review the density screening part of the PR. That half of the PR doesn't follow the standards of similar code, which is the big problem here, and fixing it requires a restructure. I request that you refactor the density screening part of this before I look at the incremental Fock build part. Trying to do both at once is too likely to cause confusion.; > ; > As for your handling of UHF and ROHF, I don't have expertise there. If you haven't already, do a quick search for density screening for open-shell references, and check the papers that cite Ahlrichs for any titles that specifically mention open-shells or new developments in Direct SCF. Hi Jonathon, I just implemented the refactoring. To request density screening, the user would just set `screening density` in the options. I believe the density screening part of the code is all refactored now, so feel free to look at the IFB part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-897257155:256,refactor,refactor,256,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-897257155,3,['refactor'],"['refactor', 'refactored', 'refactoring']"
Modifiability,> ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out. That site also states; > An automatic frozencore checker was also implemented that reorders orbitals for situations where the assigned molecular frozen core (based on counting core orbitals) is wrong because valence orbitals on light atoms happen to be lower in energy than the core orbitals of heavy atoms.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343#issuecomment-961190042:146,adapt,adapt,146,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961190042,1,['adapt'],['adapt']
Modifiability,"> Ok, two different levels here:. First off, thank you very much for sharing some details on all of this!; ; > * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance. That make sense. I recently blanket-deprecated the `ERISieve` class with (the equivalent of) `PSI_DEPRECATED`. The issue I saw, was that using both `PSI_API` and `PSI_DEPRECATED` for the same class caused the compiler to complain, although using their textual equivalents seem to work fine. Hopefully, that settles the deprecation C-side. > * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Also very good to know! This will be my next focus, then, since I don't have any wrapper functions for the ERISieve Python-side functions right now. I think I will switch this to a draft PR in the meantime, since it seems some more needs to be done on my end.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795:142,plugin,plugins,142,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527992795,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"> One thing I am confused about, why is the `screening` keyword only in the sapt module? I think we should refactor it as a global module. That's odd! ; Since we have `INTS_TOLERANCE` for every module maybe we should do the same with `screening`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-898699140:107,refactor,refactor,107,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-898699140,1,['refactor'],['refactor']
Modifiability,"> Perhaps a starting point can be porting a few packages in https://github.com/psi4/psi4meta/tree/master/conda-recipes? It'll need to happen for this to succeed, it doesn't require agreeing on a concrete strategy for the full path, and even if for some reason the larger effort fails, it's still a small value add. > I am happy to get the ball rolling, but I do need some direction on which package(s) would be good starting point(s) and maybe in which order. Thanks for the help, @mattwthompson. I think CheMPS2 might be a good one to start with.; * source is LTS; * it's been a psi4 add-on since pre-1.0, so expected to be around; * C++, so some challenge, but not Fortran; * requires LAPACK and probably needs different build config for MKL (all psi4 needs) and OpenBLAS; * does have a python interface, pychemps2, that psi4 packages for completeness but doesn't itself use. the psi4 recipe is set up to produce one C++ library package and n * Py python module packages pinned to the C++ pkg, but at least for gau2grid, I failed to get c-f's system to not produce n * Py C++ library packages, so the multiple-output form of the psi4 recipe may not be suitable for c-f. If after looking at the table, you see lower-hanging fruit that you'd like to try, feel free. I'll note that gcp/dftd3/dftd4 are all sort of the same case. Historically (and what you'll see in the psi4 recipes repo), I took the venerable Fortran tarballs, added CMake and built them with Intel. The Grimme group, notably @awvwgk has been rewriting some of the older code (with tests!) and setting up meson builds of the new packages on c-f. Lately, he's been adding CMake as an alternate buildsys, which is friendlier (in my view) to MKL and Mac/Win. I just tried a `conda create -n d3test python=3.9 simple-dftd3 dftd4-python gcp-correction blas=*=mkl -c conda-forge` on Mac and it solved correctly and didn't bring anything objectionable (openblas or gomp). If that's the case for Linux, too, (to which I don't have access toda",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791:729,config,config,729,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-946049791,1,['config'],['config']
Modifiability,"> So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however. > Thoughts?. Unless the DFJCOSK changes would undo much of this PR, I think a follow-up PR would be best.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152702693:214,extend,extend,214,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152702693,1,['extend'],['extend']
Modifiability,"> Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class. Is this necessary at all? I mean, do we want to set the density cutoff _also_ through the LibXCFunctional class? How much flexibility is wanted?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-611050691:56,variab,variable,56,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611050691,1,['variab'],['variable']
Modifiability,"> Stupid question: what is actually the difference to the earlier code? It appears you have rewritten some of the Obara-Saika recursion routines..? Where do the speedups come from?. I did not rewrite any recursion routines (just removed `ObaraSaikaTwoCenterEFPRecursion`, which became obsolete since my recent PR #1657). However, the overhead of having to call `mints.electric_field` several hundred times in a row for each site is eliminated by the new implementation, since the coordinates are directly ""injected"" into the collection of the integrals.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154:192,rewrite,rewrite,192,https://psicode.org,https://github.com/psi4/psi4/pull/1671#issuecomment-505110154,1,['rewrite'],['rewrite']
Modifiability,"> Tarballs downloaded from GitHub are not git repositories. We use them in FreeBSD ports.; Nothing important should be hard-wired to Git during build/tests. I agree broadly, though I'd sacrifice it to get fine-grain versioning for cross-project communication if needed :-). The way psi is set up now, if the buildsys detects that it's not a git repo, it substitutes some generic most-recent-tag info and proceeds, so that one gets a working build. When I try, it works as planned:. acquire tarball; ```; > curl -L https://github.com/psi4/psi4/tarball/master -o psi4_v17.tgz; ```; configure and build -- it detects ""no git""; ```; # configure (all req'd deps detected except optking to be build from src); > cmake --build . -j12; ...; [ 88%] Performing build step for 'psi4-core'; [ 1%] Generating version info; [ 1%] Building CXX object src/psi4/lib3index/CMakeFiles/3index.dir/dftensor.cc.o; ...; [ 2%] Building CXX object src/CMakeFiles/l2export.dir/export_mints.cc.o; Blindly (no git) accepting release version: 1.7+6ce35a5 (recorded); 1.7 {} 6ce35a5 1.7.0.0 release 1.7 <-- 1.7+6ce35a5; [ 2%] Built target update_version; [ 2%] Building CXX object src/psi4/libciomr/CMakeFiles/ciomr.dir/dsyev_ascending.cc.o; ...; ```; version computes and simple test, distributed driver tests, and dftd3 addon tests work ok; ```; > stage/bin/psi4 --psiapi # execute results; >>> stage/bin/psi4 --version; 1.7; >>> ctest -R tu1; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 426: tu1-h2o-energy; 1/1 Test #426: tu1-h2o-energy ................... Passed 1.65 sec. 100% tests passed, 0 tests failed out of 1; >>> ctest -R ddd; Test project /psi/gits/tarbuild/psi4-psi4-4d94910/objdir-py310; Start 479: ddd-deriv; 1/2 Test #479: ddd-deriv ........................ Passed 13.18 sec; Start 481: ddd-function-kwargs; 2/2 Test #481: ddd-function-kwargs .............. Passed 170.20 sec. 100% tests passed, 0 tests failed out of 2; >>> ctest -R dftd3; Test project /psi/gits/tarbuild/psi4-psi4-4d94",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826:580,config,configure,580,https://psicode.org,https://github.com/psi4/psi4/issues/2687#issuecomment-1358169826,2,['config'],['configure']
Modifiability,"> Thanks for looking at stability. Probably later we can add a test for each of the stabilities that parameterizes all the scf methods and incfock combinations. You're welcome! This would probably be a good idea, especially since, from my testing, some issues pop up with stability tests UHF references depending on the SCF_TYPE method used currently.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540:101,parameteriz,parameterizes,101,https://psicode.org,https://github.com/psi4/psi4/pull/2808#issuecomment-1332290540,1,['parameteriz'],['parameterizes']
Modifiability,"> Thanks for taking this on Andy! It will be very useful to have IBOs outside of the FSAPT code.; > ; > I imagine a lot of psi4 users will want to export and visualize local orbitals. For this reason, we definitely want the IBOLocalizer exposed py-side as well, same as the other two localizers. See `export_mints.cc`; > ; > Something else we should think about (other devs please chime in) is how the various derived `Localizer` classes can be modified to have as similar method signatures as possible. The `BoysLocalizer` and `PMLocalizer` have a `void`-type `localize()` function and accessors `L()` and `U()`. The `IBOLocalizer` class has no accessors and instead returns a map of info from the `localize` function. I'm not sure which of these designs I prefer, but I think the three derived classes should at least be consistent.; > ; > Lastly, I noticed that there aren't really any tests or docs on the various localizers (except for class autodocs). It would be super nice if we could get one or both of those. Hey Zach and all, I just updated the code to conform to the convention of the other localizers. I split the old multi-argument `localize` function in `IBOLocalizer` into the `localize` and `update_fock` methods inherited from the Localizer base class.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467:1230,inherit,inherited,1230,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-1013779467,1,['inherit'],['inherited']
Modifiability,"> Thanks, the basis set name makes sense. I will start naming my basis sets, but would it be possible to use a deterministic name for basis sets instead of a random one?. This feels like a @loriab question. > The `gradient` method does not use the `restart_file` keyword. I tried it, and it defaulted to the SAD guess. the SCF took 13 iterations to converge for the molecule in the original input file. As far as I can tell, only `energy` will utilize the guess from the restart file. I suppose I could call `energy(..., restart_file=X)`, then use `set guess read`, and then call `gradient`. That feels like more juggling than should be necessary. If `energy` takes this, then `gradient`, `frequencies`, and `properties`, etc. _should_ as well. We (meaning @loriab) are currently refactoring the above functions, to better support for embarrassingly parallel computations. I recommend that we wait until _after_ that refactoring to make the necessary changes here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1121447923:780,refactor,refactoring,780,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1121447923,2,['refactor'],['refactoring']
Modifiability,"> Thanks. In that case, can we change the comment at the start of the file to mention that? As written, I thought the two energies were supposed to be identical. Sounds good. This is why I like parameterized pytest for seeing the input differences. @bennybp, did I get the why-different reasons right above? And if you're changing that comment, maybe regenerate the ref file w/o test fail:. https://github.com/psi4/psi4/pull/2905/files#diff-667f7008a6b3ab105b3130447305716990d91451c161ed7eaf1f04886bd32a00R361",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207:194,parameteriz,parameterized,194,https://psicode.org,https://github.com/psi4/psi4/pull/2905#issuecomment-1479818207,1,['parameteriz'],['parameterized']
Modifiability,"> The atom vs shell loop structure is an open question of the PR:; > ; > > My algorithm is slightly modified from the Oschenfeld version since we perform our DirectJK algorithm in atom-task pairs instead of shell pairs, in order to preserve the old DirectJK loop. Is that a bad idea?; > ; > What is the effort of changing the loop structure and what would be the gain? A small-ish efficiency loss is IMO acceptable if the effort is large. I missed that, thanks. I don't have the experience to give efficiency estimates, and it also isn't clear to me what the reason for keeping the old loop structure is. Is the question ""is atom task vs shell pair"" more efficient, or ""is shell pair so much more efficient that it's worth doing some intensive refactoring to use shell pair""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381:744,refactor,refactoring,744,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-992575381,1,['refactor'],['refactoring']
Modifiability,"> The below line still does an assert within the threaded code. I don't think that hurts any, just pointing out it's still there in case you wanted to remove it. It's already constrained, so I think it's harmless and can remain as a hint for refactoring. My guess is that that file would be helped by separate validation and work steps as many of the functions have defensive checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017:242,refactor,refactoring,242,https://psicode.org,https://github.com/psi4/psi4/pull/2082#issuecomment-764697017,1,['refactor'],['refactoring']
Modifiability,"> The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand why the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism. * pre-MBIS-volume-capability behavior: requesting the mbis_charges property through `set scf_properties [""mbis_chargs""]; energy()` route _or_ `energy(); oeprop(..., ""mbis_charges"")` route called the ""mbis"" fns in oeprop.cc which were self-contained like all the other oeprop fns. This is the behavior that #2272 used (former route in particular) and want to use again.; * current / post-MBIS-volume-capability behavior: the ""mbis"" fns in oeprop.cc now compute two properties -- the original self-contained charges and the volume ratios that need atom volumes for each atom, info that's pre-computed (from energy() calcs) on orders from a line in oeprop() fn. So only the latter route works, and the former route fails for lack of atom volumes. All well and good if you want mbis volumes but a regression if you only care about mbis charges.; * this PR behavior: there are now two oeprop properties and ""mbis"" fns in oeprop.cc -- one for charges and one for volume ratios. so ""mbis_charges"" works with both routes (healing 2272), and ""mbis_volume_ratios"" still works only for the latter route (behavior unchanged, except you don't get volumes for free when request charges).; * future after #2299 addressed: mbis volumes will work with both routes. Is this any clearer? It isn't the QCEngine involvement that causes trouble -- it's the breakdown in consistency btwn the two calling routes. And if you try the straightforward way of making them consistent (compute free atom volumes in scf_helper fn like the oeprop fn does), you fall into recursion.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567:263,variab,variables,263,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926677567,1,['variab'],['variables']
Modifiability,"> The energy is not a smooth function of the distance, however all the calculations have converged SCF. Complete input script which takes a few minutes to run is attached as well as output. There are more examples. Am I missing something in checking for convergence? . Sort of. There is no guarantee that an SCF solution for a particular geometry is unique. The SCF iterations may converge to an ustable HF solution, you can check for this by running the stability analysis. But even if you find a stable HF solution, it is usually impossible to prove that you have found the global minimum. If you are using UHF, you may also want to look into the various forms of symmetry breaking, it is possible that you actually do not want the global minimum UHF solution if it is too spin-symmetry-broken. But if you _are_ looking to find the global minimum for every point of your scan, you are going to have to employ some sort of nonlinear global optimization strategy, the simplest of which is to try a bunch of guesses for every point and use the lowest solution found.; You may get some ideas you could adapt to Psi4 from [this paper of mine.](https://doi.org/10.1063/5.0080817)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718:1100,adapt,adapt,1100,https://psicode.org,https://github.com/psi4/psi4/issues/2901#issuecomment-1473846718,1,['adapt'],['adapt']
Modifiability,"> The other major issue is the docs. I'll need to update the section describing excite state psivars, but @loriab, how do you feel about grouping psivars together? See discussion https://github.com/psi4/psi4/pull/2462#discussion_r822344906. I'd still strongly favor something like the below. It lets the variables (n,m,h,i) be defined in the definition, and new methods can join existing psivar entries. Also just less visual clutter when all but the methods line up. What do you think?. ```; .. psivar:: ADC ROOT n TOTAL ENERGY; TDDFT ROOT n TOTAL ENERGY; TD-fctl ROOT n TOTAL ENERGY; CCSD ROOT n TOTAL ENERGY; ... def incl n. .. psivar:: TDDFT ROOT n (h) -> ROOT m (i) OSCILLATOR ENERGY; CCSD ROOT n (h) -> ROOT m (i) OSCILLATOR ENERGY. def incl n, m, h, i; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129510593:304,variab,variables,304,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129510593,1,['variab'],['variables']
Modifiability,"> The second reason is that we already have reviews on CompositeJK, and to break this into two PRs at this point would also involve extra work for the core developers too. You have it backwards. Most of the work in PR reviewing is reading the code and figuring out what you're trying to do. Seeing ""oh, this is just moving code"" around is not work for me. Figuring out what parts of your PR are about Composite JK, what parts are about refactoring LinK, and what parts are about Direct-DF-J is a lot of work. Zach's plan does mean more work for you, but a smoother review process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1097072812:436,refactor,refactoring,436,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1097072812,1,['refactor'],['refactoring']
Modifiability,"> There is no upstream deprecation for this one, so comments and discussion is welcome. gtk, thanks. > I was not aware that the intent was to expose the full set of functions to downstream. Some of the Level 1 and 2 BLAS functions that Psi4 has interfaces for are not exported to Python. So I assumed that Psi4 only provides interfaces for so many of them, because it was much easier to auto-generate all of them, than try to figure out what is needed. Quite right, I think it was for downstream C++ plugins that the full export set was intended. Python exports (relatively newfangled c. 2016) have been as-needed. > The bigger picture is that by providing the entire Fortran-->C++-->Python interface to downstream, Psi4 is taking on a maintenance burden, with the really problematic part being the Fortran-->C++ part. (eg. the Fortran character argument ABI violation horror story-we are relying on UB and the mercy of compiler developers); Currently, the sheer number of BLAS/LAPACK functions makes any overhaul of the interface a daunting prospect. Agree on the daunting. In the same category as the libqt exports are the CMake LAPACK detection and testing with other LAPACK distributions. Right now, I'm hardwiring the psi4 conda-forge recipe to MKL, but it'd be nice in future to relax that to normal usage (compile against a generic interface, then allow runtime selection of distribution) if we could do so with assurance (last time OpenBLAS was tried, we had threading oversubscription for SAPT iirc). > I would wager that if all BLAS/LAPACK functions which have no internal or external users were removed, then the task of transitioning to a less fragile solution for getting linear algebra into Psi4 (regardless of how that will be achieved), will be much easier done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672:500,plugin,plugins,500,https://psicode.org,https://github.com/psi4/psi4/pull/2909#issuecomment-1483234672,1,['plugin'],['plugins']
Modifiability,"> This PR LGTM. I'm a little iffy about naming a SCF_TYPE based only on its exchange algorithm, but (1) it's in line with COSX. Thanks! Yeah, this precedence is the big reason I named the SCF_TYPE for DFJLinK the way I did. > and (2) that's an issue that I think we're kicking ahead to the actual J & K separation. . This is correct. I plan on adding a new SCF_TYPE naming scheme for CompositeJK in the next CompositeJK PR. > There's big code changes, but from my gross comparisons, they're code moving around (collecting J from COSK and K from Direct) in new JK wrappings. This is also correct. It's basically a refactoring of the code to combine the DFCOSK DFJ with the old DirectJK LinK into a new, separate JK class. > No problem by me for temporary dual implementation. If there's any chance this could be forgotten, please file a issue just as a reminder. Awesome, thanks! This dual implementation is something I plan on removing in the next CompositeJK PR, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994:613,refactor,refactoring,613,https://psicode.org,https://github.com/psi4/psi4/pull/2762#issuecomment-1302167994,1,['refactor'],['refactoring']
Modifiability,"> This lgtm after some whitespace tidying for clarity. Would it be useful to add a check to existing tests of each of the JK classes that can use incfock along the lines of `compare(1, variable(""SCF ITERATIONS"") < 15.0, ""incfock efficient"")`?. Thanks; whitespace issues cleaned up!. Regarding the test you suggest, I do think that is a good idea. In principle, if we wanted to measure IncFock efficiency in a test, it might be better measured using a difference in SCF iteration counts between IncFock and corresponding non-IncFock runs, rather than using a raw SCF iteration count for the IncFock run. But none of the tests, as far as I am aware, have both IncFock and non-IncFock runs for the same SCF method executed simultaneously. Your suggested method works with the current tests, and it should still work quite well for testing IncFock efficiency since it will catch any cases where IncFock causes serious convergence issues. I will implement it!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404:185,variab,variable,185,https://psicode.org,https://github.com/psi4/psi4/pull/2792#issuecomment-1329336404,1,['variab'],['variable']
Modifiability,"> Three hours and nine minutes, according to the timestamps I have for relevant events. I believe the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Thanks for the info. It must be the Intel compiler and multiarch flags that lengthen my builds by an order of magnitude. > Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?. I expect the integral files in that tarball to be perfectly good. I've checked my local diff again, and nothing else should be harmful. One caveat is that the integrals author generally dissuades building AM>7, so I had to defeat those checks, but I know people who have built higher than that tarball (albeit different versions of the code) without known ill effects. If you've got an `.so`, and psi4 passes a few tests, I think you're good to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493:834,config,configuration,834,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133805493,1,['config'],['configuration']
Modifiability,"> What version of cmake do you use?. Personally, I use a near-latest. The Psi4 minimum is 3.15. We could go higher, but at least one of the dependencies doesn't want to go beyond 3.16 until Ubuntu does. If you happen to be thinking of FetchContent instead of ExternalProject, I'm not keen on a rewrite, and we do have a couple deps (python ones) that aren't under CMake control. In what way is the copy from `<builddir>/objdir/stage` to `CMAKE_INSTALL_PREFIX` going awry?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1214418655:294,rewrite,rewrite,294,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1214418655,1,['rewrite'],['rewrite']
Modifiability,"> Where is libplugin called for?. I'm not 100% sure if this is necessary or not -- I was trying to adapt my old plugin from a couple years ago (for RESP charge fitting) that no longer compiles, so that might be just accidental on my part.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172149347:99,adapt,adapt,99,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172149347,2,"['adapt', 'plugin']","['adapt', 'plugin']"
Modifiability,"> Wow, a lot of PYTHON->Python for you to track down there. Is that syntax change a recent thing? LGTM!. I guess long, long ago, cmake's native python's detection had no notion of finding matching interpreter/library pairs. That reported its results as `PYTHON_FOUND` and friends. Hence numpy/pb11/us used the `FindPythonLibsNew` module that had mixed c++/py in mind and also reported as `PYTHON_*`. But the cmake native detection has been much revamped, reformed, and componentized, enough to [inspire pybind11 to switch over](https://github.com/pybind/pybind11/pull/2370/files). The new setup reports as `Python_*`. The long time it's taken to get cmake's new detection modules hammered out leads to the big jump to 3.15. There may still be plugin and docs build follow-up items, but I think I've caught most of the `Python`s. Main thing ppl have to do is edit their setup scripts if they're hinting the `PYTHON_EXECUTABLE`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688:743,plugin,plugin,743,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-764963688,1,['plugin'],['plugin']
Modifiability,"> Yeah, it's perfectly fine to split things up into multiple PRs. One sensible order I can come up with is:; > ; > 1. Edit the incremental Fock in the derived `DirectJK` class so that it is efficient and maintainable (no SCF iteration counts associated with the object, minimal number of matrices cached on the object, etc.) [some other PR]; > 2. Move this improved incremental Fock to the parent `JK` class. [this PR]; > ; > In a previous comment, I suggested doing away with the cached `J`/`K`/`wK`/`dJ`/`dK`/`dwK` matrices by changing the behavior of the `JK` object so that the buffers aren't cleared between SCF iterations. If you find that difficult to do, I think an acceptable compromise would be to retain those cached matrices, but initialize them in the SCF driver (rather than make them a property of the JK object). Since this PR is already opened, I would actually prefer 2 before 1. I am slammed with my schedule right now, and I think 2 before 1 would be WAYYY easier for me. Is that okay with you @zachglick @JonathonMisiewicz? This PR also immediately fixes the `incfock` issues with `DFJCOSK`, as opposed to punting those fixes down to a future PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406:204,maintainab,maintainable,204,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1253878406,1,['maintainab'],['maintainable']
Modifiability,"> You also have find_package(Libint ...) that can't work because libint2 doesn't provide cmake files, and you don't provide them either. The https://github.com/loriab/libint/tree/l2cmake branch provides the config file https://github.com/loriab/libint/blob/l2cmake/cmake/Libint2Config.cmake.in via either the repo or the tarballs https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L57-L70 . If you're not familiar with l2, you'll want to familiarize with the build stages of a cmake+cmake build https://github.com/loriab/libint/blob/l2cmake/CMakeLists.txt#L26-L44 . One can use a libtool+cmake build but then you have to disable `find_package` according to my notes above, particularly https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L14-L15 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008110483:207,config,config,207,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008110483,1,['config'],['config']
Modifiability,"> You can pull geometric apart like so: https://github.com/leeping/geomeTRIC/blob/master/geometric/tests/test_batch_opt.py; > ; > This is a bit complex compared to what you wish to do, but it may give a better product.; > ; > Here is everything unwound:; > ; > ```python; > import qcengine as qcng; > import qcelemental as qcel; > import geometric; > import pkg_resources; > import logging.config; > import sys; > ; > mol_uc2 = qcel.models.Molecule.from_data(; > """"""; > O 0 0 0; > H 0 0 1; > H 0 1 0; > """"""; > ); > ; > input_data = {; > ""keywords"": {; > ""convergence_set"": ""GAU_LOOSE"",; > ""coordsys"": ""tric"",; > ""maxiter"": 25,; > ""enforce"": 0.1,; > ""constraints"": {; > ""set"": [; > {""type"": ""distance"", ""indices"": [0, 1], ""value"": 1},; > ]; > },; > # ""program"": ""psi4"",; > ""program"": ""mopac"",; > },; > ""input_specification"": {; > ""driver"": ""gradient"",; > ""model"": {""method"": ""pm6-d3""},; > # ""model"": {""method"": ""b3lyp-d3"", ""basis"": ""sto-3g""},; > },; > ""initial_molecule"": mol_uc2.dict(),; > }; > ; > ; > ; > # Set a temporary logger to capture output; > log_stream = geometric.nifty.RawStreamHandler(stream=sys.stdout); > #log_stream = geometric.nifty.RawStreamHandler(stream=StringIO()); > logger = geometric.nifty.logger; > logger.addHandler(log_stream); > ; > ; > # Parse JSON; > input_opts = geometric.run_json.parse_input_json_dict(input_data); > M, engine = geometric.optimize.get_molecule_engine(**input_opts); > ; > # Handle constraints; > constraints_dict = input_opts.get('constraints', {}); > constraints_string = geometric.run_json.make_constraints_string(constraints_dict); > Cons, CVals = None, None; > if constraints_string:; > if 'scan' in constraints_dict:; > raise ValueError(""No scan!""); > Cons, CVals = geometric.optimize.ParseConstraints(M, constraints_string); > ; > ; > # Set up the internal coordinate system; > coordsys = input_opts.get('coordsys', 'tric'); > CoordSysDict = {; > 'cart': (geometric.internal.CartesianCoordinates, False, False),; > 'prim': (geometric.internal.P",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275:390,config,config,390,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588023275,1,['config'],['config']
Modifiability,"> `${DESTDIR}` is also implicitly prepended to ${CMAKE_INSTALL_PREFIX} by makefiles written by cmake.; You don't need to use it in your code, it always works. > You need to build psi4 with the env variable DESTDIR=/tmp/path-to-onstall-psi4-to.; /tmp/path-to-onstall-psi4-to should end up with usr and under it there should be the usual bin, share, etc. Got it, `CMAKE_INSTALL_PREFIX` and envvar `DESTDIR` can work together to produce a working installation (and ugly extra files).; ```; > cmake -H. -Bobjdir -DCMAKE_INSTALL_PREFIX=/usr; > cd objdir && cmake --build .; > make DESTDIR=/psi/gits/testinstall4 install; -- Installing: /psi/gits/testinstall4/usr//bin/psi4; ...; > /psi/gits/testinstall4/usr/bin/psi4 ../tests/tu1-h2o-energy/input.dat ; SCF energy............................................................................PASSED; ```. > DESTDIR is a GNU standard. It is totally separate from CMAKE_INSTALL_PREFIX. Yes, I see [here](https://www.gnu.org/prep/standards/html_node/DESTDIR.html) how it's a GNU recommendation that we're only half complying with (full installation plus aforementioned ugly extra files). > Can you just remove the internal stage directory and make it install like all other cmake based projects?. Not really. The internal stage directory was a compromise so that developers could continue to never have to type `make install` and was a prerequisite to them approving the transition from GNUMake to CMake at all. Since then, the stage/ has proven convenient and robust to support fairly transparent mixing of externally detected and internally build dependencies that makes having lots of dependencies (as opposed to monolithic software) tolerable to the users and developers. I'd be glad to seek or try any tweaks to the build system that remedy this install issue, but on the whole, the internal stage solves a lot and breaks a little. What I'm not quite following is how this issue is blocking you. I'm glad to have finally understood and reproduced the issue,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604:197,variab,variable,197,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325775604,1,['variab'],['variable']
Modifiability,"> if the goal is to re-enable compilation on apple Silicon with Accelerate, then we also need to take care of DGGSVD3/DGGSVP3, which are not shipped with the library. These functions are not used or exported to the python side by psi4. Yes, that was the intent -- to reenable Accelerate. Thanks for posting to get this on record. As far as I recall and observe, the lapack plan for psi has been for libqt to provide a C interface for all lapack, whether used internally or not, so that plugins can depend on psi for all blas/lapack. Python exports are as-needed. The latter function generically (not Matrix) could be handled by numpy nowadays. Whether we want to continue to serve the role of clapack is probably a question for a psi conf call. I agree, checking for those fns and conditionally excluding them at build-time is what I should do with this PR. What I don't like about it is that it's not going to work with the c-f scheme (https://conda-forge.org/docs/maintainer/knowledge_base.html#how-it-works) where one builds against a standards-compliant generic lapack, then, perhaps, switchs to Accelerate at runtime. I haven't run across a substitution I can define for DGGSVD3/DGGSVP3 -- has anyone else? Apple's recalcitrant.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407:486,plugin,plugins,486,https://psicode.org,https://github.com/psi4/psi4/pull/2895#issuecomment-1501178407,1,['plugin'],['plugins']
Modifiability,> is there any reason not to grab this variable from the incoming wavefunction?. I think that's a safe solution nowadays.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194:39,variab,variable,39,https://psicode.org,https://github.com/psi4/psi4/issues/2305#issuecomment-929220194,1,['variab'],['variable']
Modifiability,"> starting with conda psi4 0.3.491, you should be getting all the headers (though not namespace protected) and the basic psi4-config script. There's one missing header, which is `psi4config.h`. conda psi4 0.3.491 includes `include/psiconfig.h.cmake.in`, but not the fully configured `include/psiconfig.h`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-174064319:126,config,config,126,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-174064319,2,['config'],"['config', 'configured']"
Modifiability,"> that's a common problem when adding new functionals. The list of available functionals is updated by the make system by running get_funcs.pl. The easiest way to force the list to be regenerated is to remove the build directory and rebuild. aha, thanks. you can also just add a blank line to top-level CMakeLists.txt to retrigger cmake config. LRC-BOP now working. >> I want to work on converting the c-f recipe to cmake and building out for Windows, so I may have some build MRs over at libxc. > What do you mean?. I mean I'm trying to build out the conda-forge arch matrix for libxc (https://github.com/conda-forge/libxc-feedstock/pull/8) so that psi4 windows can pull a pre-built libxc instead of doing an internal build. So I may have merge requests in your intervening week before v5.1 tagging.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197:337,config,config,337,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755827197,1,['config'],['config']
Modifiability,"> v2rdm strikes again! :-); > ; > fwiw, the original author (DePrince) isn't dedicated to preserving the plugin, but it's handy for catching things that may affect downstream users. Right now we're pulling from https://github.com/loriab/v2rdm_casscf/tree/v2rdm8, so if you want to PR a switchout of ERISeive to there for post-1.8, that'd be fine. In any case, it might be worth getting in a deprecation warning now for v1.8 on ERISeive. Thank you for the heads-up on this! I'll work on getting rid of ERISieve there, as well, and deprecate ERISieve here for 1.8. With this PR being connected to v2rdm_casscf, it'd probably be wise to make this PR post-1.8.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258:105,plugin,plugin,105,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527891258,1,['plugin'],['plugin']
Modifiability,">(2) The creation of a c_s_p_i() signature whose purpose is to perform various logic and then to call the existing c_s_p_i(bs) signature seems a little weird to me.` . `c_s_p_i()` encapsulates the logic that was previously performed in `setup_sieve`, after the initialization of the `sieve_impl_` variable, into its own function. This makes it easier to call the logic both from `initialize_sieve()` (when `ScreeningType::None` is used) and `setup_sieve()` (when `ScreeningType::None` is not used). Perhaps this could be refactored in a more elegant way, however. >Then there's initialize_sieve() whose whole purpose is to call c_s_p_i() but whose names aren't related? I've diagrammed the old (left) and new (right) setups below as I see them. Sorry for the scratch paper.`. No worries! Tehnically, `Libint2TwoElectronInt::initialize_sieve()` does things aside from calling `c_s_p_i()` (basically everything in `Libint2TwoElectronInt::common_init()` after `setup_sieve()` is called as well), but again, I'm open to better ways to implement this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826:297,variab,variable,297,https://psicode.org,https://github.com/psi4/psi4/pull/3060#issuecomment-2165597826,2,"['refactor', 'variab']","['refactored', 'variable']"
Modifiability,">> Are there any Python bindings that hit the deprecated fns?. > I don't think so? They are not used in py::class_<Dimension> in export_mints.cc, if there are other places to look for Python bindings let me know and I will check. Looks like export_mints.cc only, so you've got that covered, thanks. >> This would be a good time to get the deprecation warnings in, so the fns can be removed by 1.10. > Perhaps, but I delayed it because; > 1. I was not sure that this would get thorough reviews before 1.9 is released. This is something that could disrupt people's codes/plugins that rely on it. I do not know how widely they are used, thus I want to give people time to stumble into the deprecation warning and yell before it is too late.; > 2. These functions are not exactly unused, even in Psi4 itself. It will not be a trivial task to rip them out, and I doubt that I will have enough free time to complete it before May 2024. Sounds fair. Two cycles may be good for the deprecation warning, as plugin devs like clear warnings.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600:569,plugin,plugins,569,https://psicode.org,https://github.com/psi4/psi4/pull/2953#issuecomment-1810603600,2,['plugin'],"['plugin', 'plugins']"
Modifiability,">>> lgtm, thanks! Is there any atomic unit for specific rotation?. >> since specific rotation is normalized for path length and concentration in experimental settings, I'd say the use of deg/[dm (g/cm^3)] for specific rotation is even more ubiquitous than the use of NM for wavelength for dynamic properties. @lothian may have more to say on this topic. > Are we talking about storing the specific rotation or the G' tensor? I would think we'd want to store the latter in atomic units (along with the field energy, also in a.u.), and not store the specific rotation, which can quickly be computed from the tensor and the energy. Both tensors and scalars are saved to psivars in the PR. I think that's usual procedure as we try to be explicit (mp2 tot, mp2 corl, hf tot) even if the arithmetic is easy. We are trying to map psivars more closely to qcschema properties though, which are rigidly atomic units. Over there, it's easy to request the ubiquitous user units of deg/[dm (g/cm^3)] be returned from au storage. We can add such capability to the `psi4.variable()` query in psi4. So my question was whether we could store the qcvars data in au. The qcvar name with nm I think is a reasonable exception since that won't translate directly to qcschema.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-716616770:1056,variab,variable,1056,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-716616770,1,['variab'],['variable']
Modifiability,">>> sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. >> MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that occ does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed. No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch. > This is completely correct. The lone OLCCD algorithm in occ does not compute LCCD with the input orbitals. Great, thanks. `oremp2` is in good shape, then, and I'll add negative assertions for `olccd`. Here's the summary of what gets checked (details are at QCEngine): https://github.com/psi4/psi4/pull/2653/files#diff-e2cf14f98c8e885f5abc7385ca737bfeba9f2f62caead630129e6d7cd9678e71R193-R203",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770:620,variab,variables,620,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1201257770,1,['variab'],['variables']
Modifiability,"@JonathonMisiewicz . Let's subdivide further into 3 issues: the dfocc pcg, the occ lccd, and the occ olccd. * dfocc pcg: I think with the switch to coupling to `tol_t2` we're both satisfied. your approach fixes all the tests with far fewer iterations than my original sol'n; * occ lccd: you're right that the three errors were in spin components. I found that a `0.5 * tol_Eod` adds a single iteration about a quarter of the time, and fixes all the tests. Since triggering convergence on a small energy _rise_ is already a little unexpected, this prefactor doesn't bother me. I'm not adamant though -- adjusting e_conv for the stdsuite tests is a lot more palatable than adjusting pcg_conv.; * occ olccd: there's two errors -- one in spin components and another with the correlation energy itself (below). I tried to back off the prefactor, but nothing looser than a full order of magnitude fixed the tests. It's adding 2-4 iterations to every test (so 8-11 iterations becomes 10-14). That's severe, especially as it affects all the oo methods, not just olccd. So if you think it's better to skip this fix for a while, I'm ok with that. . `test_olccd_energy_module[olccd uhf conv ae: * occ -qz2p-ene0] OLCCD CORRELATION ENERGY: computed value (-0.21805777) does not match (-0.21805608) to atol=1e-06 by difference (-0.00000169).`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760:148,coupling,coupling,148,https://psicode.org,https://github.com/psi4/psi4/pull/1980#issuecomment-677068760,1,['coupling'],['coupling']
Modifiability,"@JonathonMisiewicz I refactored the variable names in the LinK code, but not the regular directJK code yet until I get your opinion on the new names",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-991449598:21,refactor,refactored,21,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-991449598,2,"['refactor', 'variab']","['refactored', 'variable']"
Modifiability,"@JonathonMisiewicz for completeness, here is my full code (the indentation doesn't come out right...). Note that in order to create smooth curves, in the loop over R, I switch from following root 0 to root 1 due to the crossing of the lowest quintet state with the lowest singlet state. import psi4; import numpy as np. psi4.set_options({; 'basis': 'cc-pVtz',; 'reference': 'rohf',; 'docc': [3, 0, 0, 0, 0, 1, 1, 0],; 'socc': [0, 0, 0, 0, 0, 1, 0, 1],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'MCSCF_MAXITER': 100; }). psi4.set_memory('8000 MB'). c2_geometry = """"""; 0 1; c ; c 1 {0}; symmetry d2h; """""". #singlet; a_end=1.325; b_start=1.355; b_num=20; aa=np.linspace(1,1.2,6); a=np.linspace(1.25,a_end,3) ; b=np.linspace(b_start,2.5,b_num); c=np.linspace(2.6,4,8); Rvals=np.concatenate((aa,a, b, c), axis=None). ecp = {}. for R in Rvals:; if R<=a_end:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 0,'NUM_DETS_PRINT': 40}); elif R>=b_start:; psi4.set_module_options('detci',{'num_roots': 3,'follow_root': 1,'NUM_DETS_PRINT': 40}); c2 = psi4.geometry(c2_geometry.format(R)); casscf_energy = psi4.energy('casscf'); ecp[R] = [casscf_energy,; psi4.core.variable('ci root %d TOTAL ENERGY' %0),; psi4.core.variable('ci root %d TOTAL ENERGY' %1),; psi4.core.variable('ci root %d TOTAL ENERGY' %2)]; psi4.core.clean()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432:1209,variab,variable,1209,https://psicode.org,https://github.com/psi4/psi4/issues/1907#issuecomment-641533432,3,['variab'],['variable']
Modifiability,"@JonathonMisiewicz please tag me next time ;). The check should be human readable. Please declare new variables for all of the results of the ternary operations. If I were to write a size check for a matrix multiply of `C(m,n) = A(m,k) B(k,n)`, I would write the check something along the lines of `if((m_in != m_out) || (n_in != n_out) || (k1 != k2))`. And yes, in case of an error, one should print out the dimensions of all three matrices.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2729#issuecomment-1262451178:102,variab,variables,102,https://psicode.org,https://github.com/psi4/psi4/pull/2729#issuecomment-1262451178,1,['variab'],['variables']
Modifiability,"@JonathonMisiewicz something to keep in mind, that may help while investigating the bug, The error you are seeing is raised by psio when it checks that a particular write won't extend into the next entry. So there may be differences in the size of other blocks, however if the overwrite is smaller than the old quantity you will never write into the next entry and an error wont occur.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1288#issuecomment-435203050:177,extend,extend,177,https://psicode.org,https://github.com/psi4/psi4/issues/1288#issuecomment-435203050,1,['extend'],['extend']
Modifiability,"@JonathonMisiewicz; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 238aecf08 has been issued to your PR branch; * the commit updates 96 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin jonathonmisiewicz-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin jonathonmisiewicz-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/5 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911:136,config,configuration,136,https://psicode.org,https://github.com/psi4/psi4/pull/2468#issuecomment-1064377911,1,['config'],['configuration']
Modifiability,"@MartinBeseda, there's a chance you don't have the same problem as the OP but just have the same error message. If you've got an existing gau2grid installation (which can only be built through cmake or setup.py (that runs cmake behind the scenes) and thus always installs `gau2gridConfig.cmake`), but psi4 or another downstream with `find_package(gau2grid CONFIG)` isn't detecting it and is printing the error in the issue, you can pass `-Dgau2grid_DIR=/path/to/dir/of/gau2gridConfig.cmake` to the downstream build to guide it. https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L62. If you're looking to compile but not package, also note that you can get all the deps pre-build from conda https://admiring-tesla-08529a.netlify.com/installs/v13/ (select ""source"").",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785:356,CONFIG,CONFIG,356,https://psicode.org,https://github.com/psi4/psi4/issues/1588#issuecomment-482921785,1,['CONFIG'],['CONFIG']
Modifiability,@amjames maybe this is helpful in moving forward with the reformatting in #1206 and coupled cluster rewrite #1247 as a basis before further working on #1061 ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1257#issuecomment-424029557:100,rewrite,rewrite,100,https://psicode.org,https://github.com/psi4/psi4/pull/1257#issuecomment-424029557,1,['rewrite'],['rewrite']
Modifiability,"@amjames, I get these errors when I am using my plugins. I usually don't get it when I am running psi4.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/307#issuecomment-194431083:48,plugin,plugins,48,https://psicode.org,https://github.com/psi4/psi4/issues/307#issuecomment-194431083,1,['plugin'],['plugins']
Modifiability,"@amjames, sure you pulled `loriab:pcm2`, not `loriab:pcm`? Check that [these lines](https://github.com/loriab/psi4/blob/pcm2/psi4/CMakeLists.txt#L104-L109) are matching. It looks like it's still using the cmake/FindPCMSolver `MODULE` mode, not the new `CONFIG` mode.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/599#issuecomment-279749140:253,CONFIG,CONFIG,253,https://psicode.org,https://github.com/psi4/psi4/pull/599#issuecomment-279749140,1,['CONFIG'],['CONFIG']
Modifiability,"@amjames, to my knowledge there is not yet a detailed plan about I/O ... your comments gave me an excuse to bring up the topic prior to our next developers' meeting. What you're saying about DPD makes sense to me... the users of DPD shouldn't have to worry about opening/closing files themselves, DPD should handle these details for them. I didn't realize or remember that it didn't already handle this. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 2:07:40 PM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: Re: [psi4/psi4] Coupled Cluster Rewrite (#1247). @CDSherrill<https://github.com/CDSherrill> I was under the impression that psio was going to be completely removed, but if the plan is to replace the internals and keep psio around as the abstraction layer then there is no need for DPD to implement one. However we do need DPD to insulate its user. Since the DPD instances rely on files being open/closed externally any other code using any DPD instance that does not properly ensure files are managed will leave all DPD instances in an invalid state. This is especially important for exposing amplitude access py side since in theory those accessor methods could be called at any point after a handle to the ccwfn is obtained. I guess what I really meant by that point wasn't that something needs to go in between DPD <-> PSIO, rather that DPD shouldn't be passing responsibility over management of an implementation detail on to it's users. —; You are receiving this because you were mentioned.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1247#issuecomment-423279853>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AC9QdoFCG1HVF9-VktlmDeetttgktmX6ks5uc9lsgaJpZM4WyQ3->.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423305918:618,Rewrite,Rewrite,618,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423305918,1,['Rewrite'],['Rewrite']
Modifiability,@andysim #442 has it finished for both libint and libderiv. Also included are `libintConfig.cmake` and `libderivConfig.cmake` files needed for `find_package`. That obviously won't help you until the rewrite is accepted though....,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232780003:199,rewrite,rewrite,199,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232780003,1,['rewrite'],['rewrite']
Modifiability,"@andysim Good point, bumped down AM requirements. The ""Distelli CI"" link should be dead as its an incorrect hook configuration, shouldn't show up in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235422113:113,config,configuration,113,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235422113,1,['config'],['configuration']
Modifiability,@andysim Try now. I can understand where they are coming from on the security side. There are not too many layers between log printing and security tokens. Very powerful tool however.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/449#issuecomment-235131408:107,layers,layers,107,https://psicode.org,https://github.com/psi4/psi4/pull/449#issuecomment-235131408,1,['layers'],['layers']
Modifiability,"@andysim Yea, everything else was ready to go and we agreed internally that with the CMake rewrite it would be best off if we rebased them ourselves. Getting _very_ hard to do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-233789450:91,rewrite,rewrite,91,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-233789450,1,['rewrite'],['rewrite']
Modifiability,"@andysim no tool, sadly. I think CLion can handle this kind of refactoring, I went with `grep`, `sed`, and squashing compiler warnings. Very tedious and slow going... @loriab I think it's a result of using `sed` and it should make no difference for the compiler. Do we have a style guide for when to use/not use `auto`? Otherwise I followed Meyers' guidelines in ""Effective Modern C++""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1269#issuecomment-429967769:63,refactor,refactoring,63,https://psicode.org,https://github.com/psi4/psi4/pull/1269#issuecomment-429967769,1,['refactor'],['refactoring']
Modifiability,"@bennybp, so constraints of Windows (mainly `DESTDIR=/path/to/somewhere make install` not available for on-the-fly relocation of install step) mean that our tidy scheme for cmake superbuild _staged_ install to `objdir/stage/$CMAKE_INSTALL_PREFIX/[bin|lib|share]` followed by cmake superbuild _final_ install to `$CMAKE_INSTALL_PREFIX/[bin|lib|share]` is about to crumble. The people making this change haven't seen ill effects, so I've been trying to remember why using the entire build prefix is important. I suspect it all has to do with `rpath`s (which were irrelevant to libint, as it has no managed dependencies). Psi4 _does_ manage rpaths carefully (bottom of next linked file), culminating in [`BUILD_WITH_INSTALL_RPATH`](https://github.com/psi4/psi4/blob/master/psi4/src/CMakeLists.txt#L126). IIRC, the full path scheme (`stage/$CMAKE_INSTALL_PREFIX`) allows both absolutely located and relatively located dependencies to be set for the staged installation, then those are still valid for the final superbuild installation. Note that conda rewrites `rpath`s, so the problem this scheme is solving wouldn't show up for conda-build. Nor would it show up for internal builds of dependencies (covered by relative paths). A conda-centric (psi4-path-advisor) build may also bypass the problem, since dependencies collocated. A spack-type build or one that uses local installations of dependencies found throughout the filesystem is more likely to hit the problem and need this treatment. As you designed the superbuild scheme, pinging you to see if my concerns are shared or overblown. Also @robertodr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980:1048,rewrite,rewrites,1048,https://psicode.org,https://github.com/psi4/psi4/pull/1115#issuecomment-411795980,1,['rewrite'],['rewrites']
Modifiability,"@bozkaya, you weren't printing spin components for CD-LCCD as you do for DF-LCCD, but the variables `ElccdAA`, etc. were present and contained plausible numbers for UHF. I went ahead and stored the variables so CD could be as capable as DF. Is this sound?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1937#issuecomment-650368198:90,variab,variables,90,https://psicode.org,https://github.com/psi4/psi4/pull/1937#issuecomment-650368198,2,['variab'],['variables']
Modifiability,"@cdsgroup; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/2; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009:115,config,configuration,115,https://psicode.org,https://github.com/psi4/psi4/pull/2148#issuecomment-814590009,1,['config'],['configuration']
Modifiability,"@dgasmith : Do you mean set up empty `Ind20,u` variable in case it's not computed ? As it is, the closed-shell SAPT0 code either computes coupled or uncoupled induction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364637354:47,variab,variable,47,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364637354,1,['variab'],['variable']
Modifiability,"@dgasmith @schiebermc. As discussed in https://github.com/psi4/psi4/issues/933#issuecomment-423183802, *clang-cl* supports *OpenMP* 4.0, so the adaptation to *OpenMP* 2.0 is not necessary. So this PR just fixes some missing `for` clauses and clean up *OpenMP* pragmas.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1200#issuecomment-443178956:144,adapt,adaptation,144,https://psicode.org,https://github.com/psi4/psi4/pull/1200#issuecomment-443178956,1,['adapt'],['adaptation']
Modifiability,@dgasmith Just that I understand correctly. You suggest to:; - Develop a standalone `psi42adcc` python plugin for Psi4 with `adcc` as a dependency in the `setup.py`. In this all the mapping psi4 <-> adcc happens.; - Inside its `__init__.py` inject a `run_adcc_adc` method under unique method keys such as `adcc-adc(2)` into the proc mapping.; - Expose calculation results via the `wfn` using dynamic attributes. That sounds very doable for the first pass :),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896:103,plugin,plugin,103,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547902896,1,['plugin'],['plugin']
Modifiability,"@dgasmith LibEFP is pure C, so there's no Boost in there (at least that I'm aware of). I think that means I'm off the hook! A lot of the work can be done using the refactoring tools in Qt Creator and/or a Python script, I hope.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235353805:164,refactor,refactoring,164,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235353805,1,['refactor'],['refactoring']
Modifiability,"@dgasmith Would you prefer I sub out all `core.set_variable(...)` with `wfn.set_variable(...)` or just ensure that all variables set are also bound to the wavefunction? I've was about to commit the latter as I've just got that working properly, but I'm not sure how important it is to keep access to the psivars w/ `P::e`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/952#issuecomment-380454214:119,variab,variables,119,https://psicode.org,https://github.com/psi4/psi4/pull/952#issuecomment-380454214,1,['variab'],['variables']
Modifiability,"@dgasmith, I didn't realize you were trying to deprecate the variables. I can just populate V, Ex, Ey and Ez std::vectors (in OEProp) with the data, in the order that the grid points are specified, and bind the getters to python. The problem is then making a clean interface. The user is hidden from the oeprop objects themselves through the `property` wrappers. Perhaps something analogous to the `return_wfn` keyword, to return the `oeprop` instance?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234664083:61,variab,variables,61,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234664083,1,['variab'],['variables']
Modifiability,"@dgasmith, I really prefer to upgrade to pb11 2.2. pylibefp is using a nice 2.2 feature (though I do know how to downgrade). But we do have to agree and solve symbols visibility or face breaking plugins (slide from wwdc attached). Since gau2grid doesn't need the python interface in psi (or do you have plans for it?), I think keep the 2.2 features. <img width=""1298"" alt=""screen shot 2017-11-26 at 10 20 24 am"" src=""https://user-images.githubusercontent.com/2314730/33241456-82bf7044-d293-11e7-8e8d-8f968bdcb16a.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-347016004:195,plugin,plugins,195,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-347016004,1,['plugin'],['plugins']
Modifiability,"@hokru is quite right. You can get a tarball of any commit, tag, or release of any repository through GitHub. I'd strongly recommend doing a clone, rather than a tarball, so that you can update easily and do partial rebuilds. Even more strongly, I'd recommend you do something in the 1.1 release series, like 1.1a1 (if you really want a tag) https://github.com/psi4/psi4/tags because Psi4 has had its build system rewritten, has dumped boost, has switch from an executable to a library, and has had its git history rewritten after the 1.0 release (for all that, running it is exactly the same). Because of the history rewrite, I'm not even sure a 1.0 can be extracted from this repo (we've a plan to put up a separate 1.0 repo; Yes, there probably should be a big warning sign against trying to build 1.0 from existing repo). So, please clone and build HEAD, or clone and build 1.1a1 (if you prefer tags), or tarball and build 1.1a1 (if you must). The wiki for building is out of date. New instructions have been moved into the main documentation. That should get posted today, it was only committed yesterday. Even if you did just have a random git tag like e0a3ab, that gets translated into a sortable version (you can see yourself after cloning by running `python psi4/versioner.py`). So you'd still have a version like `1.1a1.dev100` to label the installation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273803591:618,rewrite,rewrite,618,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273803591,1,['rewrite'],['rewrite']
Modifiability,"@hokru, @jturney, @AlexHeide, @susilehtola, @bennybp, and anyone else interested/knowledgeable about containers:. I've got a proof-of-principle building in GHA at https://github.com/psi4/docker-expt . It seems to be successful at building a linux docker container from a conda environment.yaml, uploading it to dockerhub (https://hub.docker.com/repository/docker/psi4/clockbox/general), running smoke tests on the image, building an apptainer from the docker, and doing nothing with the sif file. This is all based on a tutorial https://docs.docker.com/build/ci/github-actions/ (hence the `clockbox`es) and modeled on some files that Ben is using (operational docker file is the `Dockerfile-BPP` one). So far it's gone remarkably smoothly for me not knowing what I'm doing. At this point, other than cleaning up names, what else shall I do to improve it? If anyone wants edit access to the repo to fix it up, just let me know. A few points:; * I think we can stick with just Linux for the v1.8; * Where should the apptainer image be sent?; * Should there be a container for each py version or do ppl not care since layers are independent?. Thanks for any guidance and edits.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2951:1115,layers,layers,1115,https://psicode.org,https://github.com/psi4/psi4/issues/2951,1,['layers'],['layers']
Modifiability,"@j3mdamas, just an update, don't close this issue. The saga of input parsing for a 2-language program that works with several QC programs ranging from monolithic to flexible (users can actually access the stage between the language handover in psi) that pcmsolver contends with continues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356771661:165,flexible,flexible,165,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356771661,1,['flexible'],['flexible']
Modifiability,"@jgonthier Effectively yes, when we rewrite the history no merging can take place so its best to simply remove all old history. Git will throw some pretty strange errors at you if you try. You can use the git merging tool without history (will throw conflicts at every change however), or other merging tools to help out. Since its fairly difficult to rebase through the CMake changes it was thought that this would be a ideal time to do the history rewrite. Git should be setup correctly with the external projects so a similar history rewrite should not be needed again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-248348353:36,rewrite,rewrite,36,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-248348353,3,['rewrite'],['rewrite']
Modifiability,@jgonthier use another name instead of `linux` in `user-config.jam` Like this:. ```; using intel : linux-cray : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : mpich ;; ```. or whatever else. Be also sure that the MPI settings are passed correctly: http://www.boost.org/doc/libs/1_59_0/doc/html/mpi/getting_started.html#mpi.config; Let me know how it goes.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-162564022:56,config,config,56,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-162564022,2,['config'],['config']
Modifiability,"@jturney , @edeprince3 , @ryanmrichard, @dgasmith should look over a0a8c2b and see if it's ok. Basically, we were installing headers `src/lib/libmodule/*.h` to `includes/psi4/libmodule/*.h`, which is fine. But then we were installing headers `src/bin/module/*.h` to `includes/psi4/libmodule/*.h`, which meant that a header couldn't be referred to through the same path from both a source and installed file tree. Cue problems for compiling plugins against both. . This commit installs bin headers to `includes/psi4/module/*.h`. Then since the intermediate lib or bin dir is gone, can't do `#include <../bin/fnocc/blas.h>` anymore, so added the bin dirs to the CMake includes path. Then also installed `FCMangle.h` since Fortran plugins needed it. . The above gets Eugene's v2rdm built for me. Have I introduced any bad practices?. @dgasmith , contrary to what I wrote you, please hold off on merging this PR until this issue gets resolved",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218387805:440,plugin,plugins,440,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218387805,2,['plugin'],['plugins']
Modifiability,"@jturney @andysim @fevangelista @zachglick ; FYI, both libint1 and libint2 can now be built internally from this PR. * libint1 pulls a branch where the `Libint_t` has already become `Libint1_t`. Because the compiler looks everywhere in includes directories for headers, easiest to still build this branch in a conda env _without_ `libint` in `conda list`. (If you have `psi4-dev` installed, `conda remove libint --force` is what you need.); * libint2 pulls a tarball, then configures with spherical `gaussian` (looks like the quotes were the problem last week).; * if using `psi4-dev`, may want to dial down `-DMAX_AM_ERI` to 6 or so. If you've already built the specialized libint1 and/or libint2 externally, the below are what you want to tell psi4 to find them (it's the location of the Config.cmake file).; ```; -DLibint2_DIR=/programming/libint-2.6.0/installdir/lib/cmake/libint2 ; -DLibint_DIR=/programming/libint1/installdir/share/cmake/Libint; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474:473,config,configures,473,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-534313474,2,"['Config', 'config']","['Config', 'configures']"
Modifiability,"@jturney It is true if you have `timer` and `#pragma omp parallel` both in the plugin.; However, if I have; ```; void timer_on(const char *key, int thread_rank); {; ...; if (thread_rank != 0 and thread_rank != omp_get_thread_num()) {; printf(""\nTimer_on::Thread rank does not agree! arg=%d, %d=omp_get_thread_num()"",thread_rank, omp_get_thread_num());; }; ...; }; ```; in `/psi4/src/psi4/libqt/timer.cc`, and a plugin with; ```; double SCF::compute_energy(); {; timer_on(""energy"");. #pragma omp parallel; for (int a = 0; a < 100; a++); {; timer_on(""inner"",omp_get_thread_num());; printf(""Hello World from thread = %d\n"", omp_get_thread_num());; timer_off(""inner"",omp_get_thread_num());; } ; timer_off(""energy"");; return 0.0;; }; ```; It will print:; ```; Timer_on::Thread rank does not agree! arg=2, 0=omp_get_thread_num(); ```; That's what I don't understand here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-308820958:79,plugin,plugin,79,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308820958,2,['plugin'],['plugin']
Modifiability,"@jturney What are the plans for the integration of Einsums into Psi4? Given that the base of this PR is Einsums, it would be good to know where it is heading, especially since other groups may be using Psi4/Einsums for their plug-ins. Also @loriab the speed of this PR is hindered by the integrals, until we can figure out how Psi4 is going to accommodate Einsums, it seems a bit much to write a whole separate JK builder just for the F12 right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938:225,plug-in,plug-ins,225,https://psicode.org,https://github.com/psi4/psi4/pull/3110#issuecomment-2387454938,1,['plug-in'],['plug-ins']
Modifiability,"@kannon92 , just blow away your build dir and configure from scratch. That should fix it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/520#issuecomment-265224163:46,config,configure,46,https://psicode.org,https://github.com/psi4/psi4/pull/520#issuecomment-265224163,1,['config'],['configure']
Modifiability,"@loriab , you are the best. I changed the class into class PSI_API PKJK, and all is well. So, should I make a PR for every case I encounter where my plugins can't see the symbols?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384374821:149,plugin,plugins,149,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384374821,1,['plugin'],['plugins']
Modifiability,"@loriab - many, but I think I might be nearing the end of these updates. I apparently hadn't used this plugin since the days of boost ... it probably would have been easier to rewrite the stupid thing from scratch than to repair it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373:103,plugin,plugin,103,https://psicode.org,https://github.com/psi4/psi4/pull/1049#issuecomment-399415373,2,"['plugin', 'rewrite']","['plugin', 'rewrite']"
Modifiability,"@loriab . Sorry for slow response. Yes, the settings of the pipeline variables are well hidden... :D. 1. Go to the *Psi4* pipeline page and click ""Edit"" (top right); ![screenshot from 2019-02-15 16-45-48](https://user-images.githubusercontent.com/2469715/52868257-15cf7c80-3143-11e9-86b9-b9e8237a51f3.png); 2. Click ""..."" (top right) and click ""Pipeline settings""; ![screenshot from 2019-02-15 16-45-57](https://user-images.githubusercontent.com/2469715/52868262-1831d680-3143-11e9-8b9b-3df7d6045b69.png); 3. Click ""Variables"" tab (top left); ![screenshot from 2019-02-15 16-46-09](https://user-images.githubusercontent.com/2469715/52868269-19fb9a00-3143-11e9-9113-93a3b56a0562.png); 4. For the moment just add `ctest.type` and `pytest.type` with `quick` defaults and ""Settable at queue time"" on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214:69,variab,variables,69,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464104214,2,"['Variab', 'variab']","['Variables', 'variables']"
Modifiability,"@loriab @adamjstewart I think there is some mpi enabled code in gtfock, and I know that you can write plugins that use mpi, Ashutosh and I played around with that a little last year. In general though I don't think it really gets you that much.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/411#issuecomment-226007585:102,plugin,plugins,102,https://psicode.org,https://github.com/psi4/psi4/issues/411#issuecomment-226007585,1,['plugin'],['plugins']
Modifiability,"@loriab @jeffschriber Hi is there any update on this issue as it is breaking a workflow I have where I calculate MBIS charges using wavefunctions stored in QCArchive the attached script shows how this works and results in the following error when using psi4-1.4.1.; ```; Properties will be evaluated at 0.000000, 0.000000, 0.000000 [a0]; Computing free-atom volumes; Traceback (most recent call last):; File ""charges_from_wavefunction.py"", line 72, in <module>; psi4.oeprop(hf_wfn, ""MBIS_CHARGES""); File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/util.py"", line 72, in oeprop; free_atom_volumes(wfn); ; File ""/Users/joshua/mambaforge/envs/test_psi4/lib/python3.7/site-packages/psi4/driver/p4util/prop_util.py"", line 54, in free_atom_volumes; current_en = wfn.scalar_variable('CURRENT ENERGY'); RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable CURRENT ENERGY was not set!. Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1633712094436/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; The most recent 5 function calls were:; ```. [charges_from_wavefunction.txt](https://github.com/psi4/psi4/files/7624873/charges_from_wavefunction.txt)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534:909,variab,variable,909,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-982487534,1,['variab'],['variable']
Modifiability,"@loriab After attempting to implement your suggestion, I find it looks uglier. Might I suggest that we wait until ADC and EOM are hooked up, and _then_ discuss which way of formatting these variables is best? Once we have more options, my opinion may change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462#issuecomment-1064090557:190,variab,variables,190,https://psicode.org,https://github.com/psi4/psi4/pull/2462#issuecomment-1064090557,1,['variab'],['variables']
Modifiability,"@loriab As you suggest `-DOpenMP_CXX_LIBRARY_DIRS=/path/to/iomp5/dir` with cmake (v3.11.3), I try it and my cmake does not recognize the option:; ```; CMake Warning:; Manually-specified variables were not used by the project:. OpenMP_CXX_LIBRARY_DIRS. ```; The second way to edit link.txt gives error message from OMP:; ```; OMP: Error #15: Initializing libiomp5.so, but found libiomp5.so already initialized.; OMP: Hint: This means that multiple copies of the OpenMP runtime have been linked into the program. That is dangerous, since it can degrade performance or cause incorrect results. The best thing to do is to ensure that only a single OpenMP runtime is linked into the process, e.g. by avoiding static linking of the OpenMP runtime in any library. As an unsafe, unsupported, undocumented workaround you can set the environment variable KMP_DUPLICATE_LIB_OK=TRUE to allow the program to continue to execute, but that may cause crashes or silently produce incorrect results. For more information, please see http://www.intel.com/software/products/support/.; Aborted (core dumped); ```; To force running psi4, I follow OMP error message's suggestion (`export KMP_DUPLICATE_LIB_OK=TRUE`), but dft-custom-gga does not work (failed due to the same reason - not converged ). From my several trials, this problem seems not to be related to OMP libraries. Regardless of using either `gomp` or `iomp`, dft-custom-gga test fails under single thread. In other words, whenever multi-thread is used for calculations, it gives good SCF convergence within few iterations, which seems similar with the issue #994 @hokru reported. I thought it might be problem of incompatibilities between GCC compiler and Intel OMP libraries. Like @loriab setting, I changed to use icpc intel compiler (v 18.0.3), instead of gcc (v5.4.0). Re-built '<objdir>' by cmake. Then, opened '<objdir>/psi4-core-prefix/src/psi4-core-build/src/CMakeFiles/core.dir/link.txt' and added '/opt/intel/lib/intel64' (basically intel 64bit libr",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809:186,variab,variables,186,https://psicode.org,https://github.com/psi4/psi4/issues/1038#issuecomment-397364809,2,['variab'],"['variable', 'variables']"
Modifiability,@loriab I must have made a mistake while I was playing around with this. The error does not appear if I have `LD_LIBRARY_PATH` set correctly at run-time and if I don't have the correct compiler module loaded then cmake errors out in the configure step.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249690183:237,config,configure,237,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249690183,1,['config'],['configure']
Modifiability,"@loriab I now have the same problem than @amjames regarding libstdc++.so. Quick context:; I installed my own GCC 5.2 using my own conda, then gave cmake the necessary info (through `-DCMAKE_CXX_FLAGS`) and modified `LD_LIBRARY_PATH`. I also installed Python 3.5 in conda and gave the paths to CMake using the `PYTHON_LIBRARY` and `PYTHON_INCLUDE_DIR` variables. With that, I could build and link (after a few tries) but a bunch of tests failed, seemingly Python-related. I thus tried to re-build, but giving the system Python (2.7) and Python libraries. For that, I modified my PATH environment variable so that Python 2.7 would be default and not the conda Python 3.5. I also passed all three `PYTHON_XXX` variables to CMake. I could build and link successfully, but now for some reason psi4 is associated with the wrong gcc headers.; My CMakeCache.txt contains the appropriate `gcc-name` options described in the FAQ, the first line of `echo $LD_LIBRARY_PATH` reads; `/theoryfs2/ds/gonthier/software/miniconda3/envs/gcc52/lib:/theoryfs2/ds/gonthier/software/miniconda3/lib:/theoryfs2/common/software/intel2016/compilers_and_libraries_2016.3.210/linux/compiler/lib/intel64`; and `ldd psi4` gives:; `libstdc++.so.6 => /usr/lib64/libstdc++.so.6 (0x00007fe059a33000)`. I haven't tried using `CMAKE_PREFIX_PATH` yet. I'm going to do that now and report the results.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252797491:351,variab,variables,351,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252797491,3,['variab'],"['variable', 'variables']"
Modifiability,"@loriab I think everything is fine from the superbuild perspective and I like the proposed dump- everything-in-external-directory structure. I think you have to be careful about assuming these external projects will have too much CMake stuff set, which is part of the reason I defined the compile time macros Psi4 side. The config files for GDMA, libint, etc. are not part of the actual distributions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238380074:324,config,config,324,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238380074,1,['config'],['config']
Modifiability,"@loriab I think setting `CMAKE_PREFIX_PATH` can help with detecting anything usinga `find_package` call. ; Setting `CMAKE_PREFIX_PATH` has the search to prioritize the directories listed in that variable. I actually have no python detection problems if I set `-DCMAKE_PREFIX_PATH=${ANACONDA_LIB}:${ANACONDA_INC}`, but only setting one or the other means either the wrong headers or the wrong library is found instead. Just slightly less typing than setting two separate `PYTHON_…` variables. ---. Also worth mentioning: It looks like [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L110) we are only setting the major python version as a requirement, so I am not getting any cmake errors if I remove anaconda from my env, and let the system python be detected (in my case 2.6.9, which is okay I think). But in the cmake output I see a message like: . ```; — Found PythonInterp: /usr/bin/python (found version ""2.6.9); — Found PythonLibs: /usr/lib64/libpython2.6.so (found sutable version 2.6.9, minimum required is ""2""); ```. Is that going to go ahead and build if the python version is `2.(anything)`? Last I remember we needed python 2.6.9 or later.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249711681:195,variab,variable,195,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249711681,2,['variab'],"['variable', 'variables']"
Modifiability,@loriab Is this still an issue? I know you had done some work on the plugin build semantics recently,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/91#issuecomment-105535771:69,plugin,plugin,69,https://psicode.org,https://github.com/psi4/psi4/pull/91#issuecomment-105535771,1,['plugin'],['plugin']
Modifiability,"@loriab Just tried to link with conda chemps2 using the one from the test subchannel. CMake does not seem to realize CheMPS2 is there and keeps saying ""no suitable chemps2 found"" in spite of me passing; `-DENABLE_CheMPS2=ON -DCMAKE_PREFIX_PATH=/global/home/users/jgonthier/software/miniconda -DCheMPS2_DIR=/global/home/users/jgonthier/software/miniconda` to CMake. Am I forgetting an option/env variable ?. @susilehtola Thanks for the suggestion ! I guess we could also always re-built a local version of gcc... Hopefully if the binary works it won't come to that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288500982:395,variab,variable,395,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288500982,1,['variab'],['variable']
Modifiability,"@loriab No success, unfortunately. The option is recognized (initial cmake); ```; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Building using CMake 3.19.4 Generator Unix Makefiles; -- Setting option BUILD_SHARED_LIBS: ON <=================; -- Setting (unspecified) option ENABLE_OPENMP: ON; -- Setting (unspecified) option ENABLE_AUTO_BLAS: ON; -- Setting (unspecified) option ENABLE_AUTO_LAPACK: ON; ```; but somehow does not get passed to the libint2 build step (make):; ```; [ 73%] No update step for 'libint2_external'; [ 75%] No patch step for 'libint2_external'; [ 77%] Performing configure step for 'libint2_external'; loading initial cache file /scr/behnle/psi4_clean_cmake_3.19/psi4/objdir/external/upstream/libint2/libint2_external-prefix/tmp/libint2_external-cache-Release.cmake; -- Version: Full 2.7.1 Numeric 2.7.1; -- SO Version: Full 2:3:0 Major 2; -- The CXX compiler identification is GNU 11.2.1; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working CXX compiler: /usr/bin/g++-11 - skipped; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Setting option CMAKE_BUILD_TYPE: Release; -- Setting option REQUIRE_CXX_API: ON; -- Setting option REQUIRE_CXX_API_COMPILED: OFF; -- Setting option ENABLE_FORTRAN: OFF; -- Setting (unspecified) option ENABLE_MPFR: OFF; -- Setting option BUILD_SHARED_LIBS: OFF <==================; -- Setting (unspecified) option LIBINT2_BUILD_SHARED_AND_STATIC_LIBS: OFF; -- Setting (unspecified) option LIBINT_LOCAL_Eigen3_INSTALL: OFF; ```. The error message is exactly the same.; I wiped the build directory completely in between, so there were no leftovers that might have influenced the build process.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370:623,config,configure,623,https://psicode.org,https://github.com/psi4/psi4/issues/2572#issuecomment-1121326370,1,['config'],['configure']
Modifiability,"@loriab Thanks for these comments!. I now have some simple documentation [for running Psi4 with MDI](https://molssi.github.io/MDI_Library/html/mdi_ecosystem.html#ecosystem_psi4) as part of the MDI_Library documentation pages. Its still very basic, but thankfully there isn't much more to the process than what is described in the [general MDI launch documentation](https://molssi.github.io/MDI_Library/html/library_page.html#library_launching_sec). I've tried to work on adding some how-to-use documentation to Psi4 proper, but I can't seem to get my Sphinx environment set up correctly:. ```; Building html documentation ...; Running Sphinx v2.2.0; making output directory... done; /Users/tbarnes/anaconda3/envs/psi4/lib/python3.7/site-packages/sphinx/events.py:103: RemovedInSphinx30Warning: autodoc_default_flags is now deprecated. Please use autodoc_default_options instead.; results.append(callback(self.app, *args)). Theme error:; no theme named 'cloud' found, inherited by 'sphinx_psi_theme'; make[3]: *** [sphinxman] Error 2; make[2]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/all] Error 2; make[1]: *** [doc/sphinxman/CMakeFiles/sphinxman.dir/rule] Error 2; make: *** [sphinxman] Error 2; ```. This is despite having a conda installation of `cloud_sptheme`. Regarding the `mdi('hf/cc-pvdz')` command, I would be fine with something more like your suggestion of `energy('hf/cc-pvdz', mdi=True)`. One alternative possibility would be to say that if the `--mdi` runtime option is provided, the mdi code is just automatically called after everything in the input file has executed; this approach would still require some mechanism of setting the method used, of course, and I have no idea whether this would fit into the broader Psi4 design philosophy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015:967,inherit,inherited,967,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-533313015,1,['inherit'],['inherited']
Modifiability,"@loriab after some consideration with @lothian , I think the simplest course of action would be to simply not store the scalar variable. the unit question is somewhat nontrivial, plus there is the issue of scaling the rotation by the molecular weight of the system (which is handled very differently for solvated molecules, but is not accounted for in `ccresponse`). therefore the best way to make sure the user knows what they're getting is to let them compute it themselves from the mixed electric dipole-magnetic dipole response tensor. . following this logic, I also propose removing the scalar electric dipole polarizability, which is also easily computed using the trace of the stored tensor. I would update the new test to reflect this, just want to be sure this is an agreeable solution for everyone before I commit the changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962:127,variab,variable,127,https://psicode.org,https://github.com/psi4/psi4/pull/2022#issuecomment-717483962,1,['variab'],['variable']
Modifiability,@loriab ah! I didn't even check for `.a`s vs `.so`s. It looks like the conda recipe passes the shared flag to `b2` so I only had the `.dylib`s for almost all of the libraries. . I toggled the `Boost_USE_STATIC_LIBS` flag in `ConfigBoost.cmake` and the paths appear to be set correctly to find the `.dylib`s in `$HOME/anaconda/envs/psi4-py2.7`. I am checking to make sure that compiles fine now. ( I have to admit I don't really know what the difference between `.so` and `.dylib` is but CMake seems to think the `.dylib`s are okay. . I also modified the recipe so I can build the `.a`s as well. I report back later this evening after I check these options with hombrew boost linked/unlinked to see if having the .`a`s in the search path stops CMake from using the home-brew binaries. . Thanks for the help.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-196536537:225,Config,ConfigBoost,225,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196536537,1,['Config'],['ConfigBoost']
Modifiability,"@loriab could you add a pipeline variable, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249:33,variab,variable,33,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-467843249,1,['variab'],['variable']
Modifiability,"@loriab could you configure the pipeline variables, please.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339:18,config,configure,18,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467004339,2,"['config', 'variab']","['configure', 'variables']"
Modifiability,"@loriab could you define the variables in the pipeline settings, so the PR can pass. A demonstration on my *Azure* account:; - By default (`ctest.type=quick` and `pytest.type=quick`), the automatic and manual builds behave the same: https://dev.azure.com/raimisg/psi4/_build/results?buildId=478 Time ~1 h; - Setting `ctest.type=full` and manually triggering a build, it does all the ctests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=479 Time ~4 h; - Setting `pytest.type=full` and manually triggering a build, it does all the pytests: https://dev.azure.com/raimisg/psi4/_build/results?buildId=480 Time ~3 h; - `ctest.type=full` and `pytest.type=full` runs out of time. Max time is 6 h.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398:29,variab,variables,29,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-462760398,1,['variab'],['variables']
Modifiability,"@loriab this probably isn't the greatest place for this, but oh well. I'm trying to run a5Z using the setup we discussed earlier (your branches and repos). I'm getting a segfault in compute shell quartet. Is it possible the angular momentum variables are (still) not being passed correctly to mints? If I run with a smaller basis everything's fine so I suspect that this is caused by using more than the default angular momentum. I'll investigate further tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-240571773:241,variab,variables,241,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-240571773,1,['variab'],['variables']
Modifiability,"@loriab, I think we might be able to check the first box. I tested on my linux box and I can compile and run plugins with scf and mointegrals. Do you want a separate manual page or it is ok to post new info in the same page where we describe ""--new-plugin""?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-212549702:109,plugin,plugins,109,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-212549702,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"@loriab, my pull request https://github.com/psi4/psi4/pull/366 should address boxes 3-5. I am not sure about box 2. Do we want printing when calling `--new-plugin`? Perhaps the message with the manual link should appear for both conda/nonconda installations. Right now the relevant documentation is in http://www.psicode.org/psi4manual/master/plugins.html.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-213240900:156,plugin,plugin,156,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-213240900,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"@loriab, okay, I think I got my plugin compiling against the latest psi4 conda build. The code is [here](https://github.com/rmcgibbo/resp2) and the build log on Travis-CI [here](https://travis-ci.org/rmcgibbo/resp2), if you're curious, at least about the configure/make stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172287504:32,plugin,plugin,32,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172287504,2,"['config', 'plugin']","['configure', 'plugin']"
Modifiability,"@loriab, please re-review. The last commit changed variable definitions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2769#issuecomment-1320216508:51,variab,variable,51,https://psicode.org,https://github.com/psi4/psi4/pull/2769#issuecomment-1320216508,1,['variab'],['variable']
Modifiability,"@loriab: I think I agree with you but perhaps @psi-rking can help disentangle this. This is the code in `findidf/fd_freq_0.cc`:. ```; if (print_lvl >= 3) {; outfile->Printf(""\n\tForce Constants for irrep %s in mass-weighted, "", irrep_lbls[h]);; outfile->Printf(""symmetry-adapted cartesian coordinates.\n"");; mat_print(H_irr[h], salcs_pi[h].size(), salcs_pi[h].size(), ""outfile"");; }. // diagonalize force constant matrix; int dim = salcs_pi[h].size();; double *evals = init_array(dim);; double **evects = block_matrix(dim, dim);. sq_rsp(dim, dim, H_irr[h], evals, 3, evects, 1e-14);. // Build Bu^1/2 matrix for this irrep; SharedMatrix B_irr_shared = salc_list.matrix_irrep(h);; double **B_irr = B_irr_shared->pointer();. for (int i = 0; i < dim; ++i); for (int a = 0; a < Natom; ++a); for (int xyz = 0; xyz < 3; ++xyz); B_irr[i][3 * a + xyz] /= sqrt(mol->mass(a));. double **normal_irr = block_matrix(3 * Natom, dim);; C_DGEMM('t', 'n', 3 * Natom, dim, dim, 1.0, B_irr[0], 3 * Natom, evects[0],; dim, 0, normal_irr[0], dim);. if (print_lvl >= 3) {; outfile->Printf(""\n\tNormal coordinates (non-mass-weighted) for irrep %s:\n"", irrep_lbls[h]);; eivout(normal_irr, evals, 3 * Natom, dim, ""outfile"");; }; ```. It looks to me that contrary to what the print functions say, we first compute the Hessian (non-mass weighted), diagonalize it, and then mass-weight and symmetrize the eigenvectors?. @loriab, the normal coordinates that we print out now are not normalized. It's unclear what the Molden requirement are when it comes to mass-weighting or normalization.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286474443:271,adapt,adapted,271,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286474443,1,['adapt'],['adapted']
Modifiability,@loriab: can you try with https://github.com/psi4/psi4public/commit/0e7d3c9e2d11df2e54cd258a4453894efca059b7? it fixes the problem (which I can reproduce) on my machine. unfortunately you can't configure the cmake search order as much as I would like.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134772723:194,config,configure,194,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134772723,1,['config'],['configure']
Modifiability,"@loriab: the following patches to `psi4/share/psi4/plugin/ambit/CMakeLists.txt.template` should fix the above problem. Can you try it when you have a chance?. line 54; ```; extern ""C""; SharedWavefunction @plugin@(SharedWavefunction ref_wfn, Options &options); {; using namespace ambit;. ambit::initialize(); // <== add; ```. line 181:; ```; //B.print();. ambit::finalize(); // <== add. return ref_wfn;; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/593#issuecomment-293693404:51,plugin,plugin,51,https://psicode.org,https://github.com/psi4/psi4/pull/593#issuecomment-293693404,2,['plugin'],['plugin']
Modifiability,"@loriab: yes, I forgot that's how we solved psi4/psi4private#115. Let me point out that I observe the same behavior if turn df_scf_guess on or off. So my main concern was efficiency, because we seem to recompute the PK integrals twice for both df_scf_guess=off or on. I think that for consistency we should perhaps warn the user if he/she selects df_scf_guess=off and of course not recompute PK integrals again. I am not particularly concerned with being able to do DF followed by PK, I just had a test fail in our plugin and I traced it back to the fact that orbitals from DF/PK gave slightly different energies (<1e-10). Perhaps we could re-enable df_scf_guess=on, but with the new info passing that's not too difficult to reproduce with two scf calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/281#issuecomment-189096514:515,plugin,plugin,515,https://psicode.org,https://github.com/psi4/psi4/issues/281#issuecomment-189096514,1,['plugin'],['plugin']
Modifiability,"@loriab; Based upon a build of the documentation target (`make sphinxman` locally with Sphinx installed at CMake configuration time):; * an automated commit has been issued to your PR branch; * this updates `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin <prbranch>` to synchronize your local branch with GH; * an automated pull request has been issued to the docs website repo previewing `<objdir>/doc/sphinxman/html`; * preview docs changes at https://github.com/psi4/psi4docs/pull/1; * further action on auto pull request not required",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587:113,config,configuration,113,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-814506587,1,['config'],['configuration']
Modifiability,"@loriab; Based upon a build of the documentation target (local equivalent is `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit bc7a25bc0 has been issued to your PR branch; * the commit updates 80 files in `samples/` based on `tests/`; * if changes are ok, synchronize your local branch to your GH fork through (approximately) `git pull --rebase origin loriab-patch-1`; * if changes are objectionable, synchronize your GH fork to your local branch through (approximately) `git push origin loriab-patch-1 --force`. However, you can't avoid the update forever; * ask for help in the PR if you have git questions. * an automated pull request https://github.com/psi4/psi4docs/pull/4 has been issued to the docs website repo; * the pull request previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes there at the netlify/psi4manual/deploy-preview check. Edit your PR branch here as needed; no further action on auto PR required; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131:125,config,configuration,125,https://psicode.org,https://github.com/psi4/psi4/pull/2365#issuecomment-978693131,1,['config'],['configuration']
Modifiability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit 5aa048b39 has been issued to your PR branch; * this updates 4 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin ghadocs3` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319:114,config,configuration,114,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816883319,1,['config'],['configuration']
Modifiability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated commit b4247d841 has been issued to your PR branch; * this updates 80 files in `samples/` based on `tests/`; * if objectionable, make changes and force push your local branch, but you can't avoid the update forever; * usually, `git pull --rebase origin loriab-patch-1` to synchronize your local branch with GH. * an automated pull request https://github.com/psi4/psi4docs/pull/3 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574:114,config,configuration,114,https://psicode.org,https://github.com/psi4/psi4/pull/2363#issuecomment-977075574,1,['config'],['configuration']
Modifiability,"@loriab; Based upon a build of the documentation target (locally, `make sphinxman` with Sphinx installed at CMake configuration time):. * an automated pull request https://github.com/psi4/psi4docs/pull/1 has been issued to the docs website repo; * this previews docs changes from `<objdir>/doc/sphinxman/html`; * look over your docs changes at checks, deploy-preview. Edit your PR branch here as needed; no further action on auto PR required.; * alternately, look over your docs changes locally by downloading `sphinxman-html` zip file from Archive list in Action run",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920:114,config,configuration,114,https://psicode.org,https://github.com/psi4/psi4/pull/2146#issuecomment-816151920,2,['config'],['configuration']
Modifiability,"@lothian For EFP I would argue that we should figure out the corner case now while were thinking about it as they are likely to come up again in the future. If we simple pass through the SCF Wavefunction or a blank Wavefunction for these, thats fine. But we need to make it a rule. @fevangelista By the same token, psimrcc doesn't need a Wavefunction if you are ok with the default behavior for Wavefunction-less methods. I could see moving the C1 symmetry conversion to a later date (David has already strongly encouraged me to think about overhauling the Wavefunction class). Everything else I would want in a 1.0 release as they are enhancements that will prevent additional forum posts (documentation, softer fails, and plugins using modern Psi programming practice) or what I would call logical flow\* issues (passing orbitals to SCF, what wavefunction is returned). *Logical flow: If an advanced user is used to certain mechanics working it is quite jarring when a conventional call suddenly does not work for no apparent reason.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259#issuecomment-191759336:636,enhance,enhancements,636,https://psicode.org,https://github.com/psi4/psi4/issues/259#issuecomment-191759336,2,"['enhance', 'plugin']","['enhancements', 'plugins']"
Modifiability,"@maxscheurer Awesome! Thank you for working to get this PR in. It was a new type of plugin for us, so thank you for bearing with the comments and changes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-528740493:84,plugin,plugin,84,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-528740493,1,['plugin'],['plugin']
Modifiability,"@medvedev-m, /tmp is just fine when it's big enough. Often, default Linux/Unix installations have only a limited amount of space available in /tmp. The singlet B atom computation you had crash is actually very small and doesn't require much space, so I think your /tmp must have been filled by some of your earlier computations that crashed. Many quantum chemistry programs, including Psi4, leave some of their temporary files around if they crash, so you have to delete them up to avoid filling the directory. Anything in /tmp should be automatically removed by the operating system, eventually, but I don't know how often that happens --- they might not be cleaned up that quickly. NFS-attached disks are very slow and you should never use them as scratch disks in a quantum chemistry computation. Otherwise, you'll cripple the network with all the data you're sending over it, people will have trouble accessing their files, and your system administrator will be very unhappy with you. So if /tmp is a problem and if NFS-attached disks are a problem, what do you do? Anyone running serious quantum chemistry computations (beyond tiny molecules with cheap methods) normally takes special steps to set up their computer such that is has one or more large hard drives in it that can be used for the temporary files (""scratch space""). For very large computations, it is advisable to get 2-3 hard drives and stripe them together in a ""RAID0"" configuration for maximum speed. It's good to have several hundreds of gibabytes available, at least, and for really big computations it's good to have a terabyte or more. . You might be able to get by using /tmp if you keep it cleaned of any files from crashed calculations, and if you're lucky it might be big enough for some decent computations if they're not too large. Ramdisks are great if your computations are quite small so that they will fit. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/204#issuecomment-170252262:1440,config,configuration,1440,https://psicode.org,https://github.com/psi4/psi4/issues/204#issuecomment-170252262,1,['config'],['configuration']
Modifiability,"@psi4. Assuming the most recent check in passes this PR is imminently ready to merge (Lori is working on the Conda binary part). Short version: Checking code in for the next month will be difficult and not recommended. For an easier time, wait a month, re-clone and re-fork all of your Psi4 repos, move all your development to those repos, and go back to normal development cycles. Longer version:; 1. I wrote an extensive list of changes at the top of this PR. Read them– they affect you.; 2. To build Psi4 you now will need to do something along the lines of (in the top-level of the cloned source code):; ; ``` .sh; cmake -H. -Bbuild ; cd build && make; make install; ```; - In the configure step (the first line) there are a large number of CMake variables you can set to fine tune the build. See the top-level `CMakeLists.txt` for the more common ones. For example to change the C++ compiler add: `-DCMAKE_CXX_COMPILER=/path/to/compiler` after `-Bbuild`; - Anything not part of Psi4 proper is now in external and is expected to have its own build files. Paths where CMake should look for dependencies should now be passed to these external projects via `CMAKE_PREFIX_PATH`. ; - Installing is now a thing for Psi4. In theory you can run Psi4 from the build directory, but you'll quickly find it annoying (I'll leave it to you to learn why). Tests should still work from the build directory and can be performed from there before installing. They should be performed using `ctest` as normal. ; 3. Within the next week anyone who compiles Psi4 regularly (as opposed to just using the Conda package) should clone this branch and try it out. Please do it sooner rather than later because of the following points.; 4. Once this PR is merged, git operations on forks and clones of the current master repo will likely cease to work without a ton of effort. This is because of the size and amount of changes in this PR. Instead of fighting to rebase on top of it, there are two options:; 1. If you have so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236723542:685,config,configure,685,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236723542,2,"['config', 'variab']","['configure', 'variables']"
Modifiability,"@psi4/editors, if consensus builds on the ctest label refactoring, I'm willing to do it now and be done with it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/524#issuecomment-262031166:54,refactor,refactoring,54,https://psicode.org,https://github.com/psi4/psi4/pull/524#issuecomment-262031166,1,['refactor'],['refactoring']
Modifiability,"@raimis, I'm sorry I had to switch back some of your changes in #1348. This current PR looks to work for me. For Windows, I don't see any OpenMP configuration errors or notice OMP compiling problems in Azure. If Azure's working, are there additional things to check to make sure I didn't in turn break something you need?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048:145,config,configuration,145,https://psicode.org,https://github.com/psi4/psi4/pull/1520#issuecomment-460657048,1,['config'],['configuration']
Modifiability,"@raimis, thanks! I've been wishing for a cloud option to run a full test suite. In Azure, I've added the variables below. I'm not too familiar with the interface, so let me know if I adjusted the wrong thing. <img width=""779"" alt=""screen shot 2019-02-12 at 9 51 03 pm"" src=""https://user-images.githubusercontent.com/2314730/52683303-6612c880-2f10-11e9-9dbb-c5862970cc88.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957:105,variab,variables,105,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-463035957,1,['variab'],['variables']
Modifiability,"@rbast, the EXPLICIT_LIB and EXTERNAL_LIB removal is because nothing outside cmake/math knows about those variables, so they're orphaned. LAPACK_LIBRARIES and LAPACK_INCLUDE_DIRS are being used in (I think, never used them myself) the EXPLICIT_LIB role.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279508615:106,variab,variables,106,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279508615,1,['variab'],['variables']
Modifiability,"@rmcgibbo, I made a [PR](https://github.com/rmcgibbo/psi4public/pull/1) to your PR so that variable labels stay consistent. This/your PR also needs rebasing. So please either (a) pull in my PR and rebase this one or (b) let me know, and I'll rebase my branch and do a PR (with your commit) directly. Thanks for the contribution kick-starting our Wavefunction.variables_ work. Btw, the git history rewrite this fall reduced repo size by 90%. If you wanted much quicker clones, you could delete your fork and re-fork.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643#issuecomment-284940969:91,variab,variable,91,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284940969,2,"['rewrite', 'variab']","['rewrite', 'variable']"
Modifiability,"@robertodr I am using the default compiler that ships with OS X El Capitan (`llvm-gcc`, and `llvm-g++`) version:. ```; Configured with: --prefix=/Applications/Xcode.app/Contents/Developer/usr --with-gxx-include-dir=/usr/include/c++/4.2.1; Apple LLVM version 7.0.0 (clang-700.1.76); Target: x86_64-apple-darwin15.2.0; Thread model: posix; ```. For fortran I use `gfortran-4.9`:. ```; GNU Fortran (Homebrew gcc49 4.9.3 --with-fortran) 4.9.3; Copyright (C) 2015 Free Software Foundation, Inc.; ```. Here is the output of `cat interfaces/pcmsolver/cmake/custom/rpath.cmake`:. ```; if(APPLE); if(NOT DEFINED CMAKE_MACOSX_RPATH); set(CMAKE_MACOSX_RPATH ON); endif(); endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/207#issuecomment-171441011:119,Config,Configured,119,https://psicode.org,https://github.com/psi4/psi4/issues/207#issuecomment-171441011,1,['Config'],['Configured']
Modifiability,@robertodr I have moved the Windows configuration to FindTargetOpenMP.cmake and made some clean up while debugging.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348#issuecomment-441595235:36,config,configuration,36,https://psicode.org,https://github.com/psi4/psi4/pull/1348#issuecomment-441595235,1,['config'],['configuration']
Modifiability,"@robertodr and @andysim ; I could certainly make a PsiAPI test for energies, although I think the leading underscore of `_energies_from_fcidump` will have to be removed, since it denotes that the function is private. @CDSherrill ; I intended for this bit of code to do exactly what you describe:. ``` wfn_irrep = 0; for h, n_socc in enumerate(active_socc):; if n_socc % 2 == 1:; wfn_irrep ^= h; ```. The line `wfn_irrep ^= h` accumulates the XOR of all irreps `h` in `wfn_irrep`. I could rewrite it as `wfn_irrep = wfn_irrep^h` to make it more intelligible. I think that the format of `active_socc` is not a list of irreps, instead it's a list of orbital counts per irrep, which is why I XOR `h` and not `n_socc`. The `if n_socc % 2 == 1` check takes advantage of the fact that a number XORed with itself is 0, so only irreps with an odd number of orbitals matter.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1453#issuecomment-451459103:488,rewrite,rewrite,488,https://psicode.org,https://github.com/psi4/psi4/pull/1453#issuecomment-451459103,1,['rewrite'],['rewrite']
Modifiability,"@robertodr, when you added the PCM POLARIZATION ENERGY psivar to Wfn, I think you removed it from `P::e.globals` (which `psi4 --test` noticed and complained about). For a transition period, I think we want storage duplicated so that P::e.globals is a full list. Could you add the variable back wherever it gets set to the Wfn value and test that `psi4 --test` works again? Thanks!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/697:280,variab,variable,280,https://psicode.org,https://github.com/psi4/psi4/issues/697,1,['variab'],['variable']
Modifiability,"@ryanmrichard, where convenient, we may want to use cmake modules from https://github.com/coderefinery/autocmake/tree/master/modules. Though potentially nice, I don't think we want to wholesale adopt @robertodr and Co.'s autocmake project (http://autocmake.readthedocs.io/en/latest/index.html) just now because this cmake rewrite is focused on CMake linking of `ExternalProject_Add` / modularity / superbuild, which isn't autocmake's focus. In particular, I'm using their safeguards (https://github.com/coderefinery/autocmake/blob/master/modules/safeguards.cmake) since the Psi4Macros one didn't actually prevent in-source builds (`STREQUAL` vs. `==`) and even with that fixed , the extra feature of Psi4Macros creating a requested build dir (`cmake -DCMAKE_BINARY_DIR=objdir2`) ran into later cmake path errors. So, as it stands (in libint), this should guide toward `cmake -H. -Bobjdir` syntax. In general, I'll be testing thoroughly in libint, then just copying into main psi4 w/o testing, so let me know of any problems you find that travis and distelli don't. Huh, cmake automatically forces two spaces after a period in their message() printing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236387131:322,rewrite,rewrite,322,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236387131,1,['rewrite'],['rewrite']
Modifiability,"@susilehtola , AM is `MAX_AM_ERI` the CMake variable. Its translation to the quantities that appear in libint.h and libderiv.h is [here](https://github.com/evaleev/libint/blob/v1/README_CMake.md#building)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300614426:44,variab,variable,44,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300614426,1,['variab'],['variable']
Modifiability,"@susilehtola Applying random perturbations to the initial guess (without having a converged SCF solution) was just pure conjecture from my part.; Of course in general, applying the random rotation scheme may lead to a number of different outcomes, the SCF procedure may converge to the same solution, a solution with a different energy or not converge at all.; So ideally, one would first obtain a converged SCF solution, then use the random rotations to generate a few (say, 3-15, user configurable) perturbed initial guesses from it, run SCF on all of them, and see if any of them converges to a lower minima.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-352287278:487,config,configurable,487,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-352287278,1,['config'],['configurable']
Modifiability,@tallakahath Please pull the branch and then commit the addition of `MBIS VALENCE WIDTHS` to the [glossary](https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/glossary_psivariables.rst). Just follow the pattern of the other MBIS variables.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3226#issuecomment-2452051681:240,variab,variables,240,https://psicode.org,https://github.com/psi4/psi4/pull/3226#issuecomment-2452051681,1,['variab'],['variables']
Modifiability,"@taylor-a-barnes I suspect, you are missing some pipeline variables. Check if your pipeline is configured like this:; ![azure_config](https://user-images.githubusercontent.com/2469715/61285389-230b9880-a7c1-11e9-9035-669f83ec66ad.png)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304:58,variab,variables,58,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-511751304,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,@tomspur we're moving forward with the rewrite and we'd like your input. I sent you an invite to join the Slack channel on your institutional email. Let me know if you want to join using another email address and I'll re-send the invite.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1061#issuecomment-425112027:39,rewrite,rewrite,39,https://psicode.org,https://github.com/psi4/psi4/pull/1061#issuecomment-425112027,1,['rewrite'],['rewrite']
Modifiability,"@uwhbliu : you can run a FCI computation from a FCIDUMP file in [forte](https://github.com/evangelistalab/forte), a psi4 plugin. I would be happy to help with the setup/compilation. A test case that runs FCI with frozen core orbitals is available [here](https://github.com/evangelistalab/forte/tree/master/tests/methods/integrals-fcidump-1).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219:121,plugin,plugin,121,https://psicode.org,https://github.com/psi4/psi4/issues/1967#issuecomment-663099219,1,['plugin'],['plugin']
Modifiability,"@wpoely86 Yes one of the huge things I wanted to address with the new rewrite is the fact that things like CMAKE_C_FLAGS wasn't being respected. Admittedly we were ignorant of the CMake way to do things when we wrote the first pass. This second pass should be substantially more aligned with CMake philosophy, although by means of disclaimer I do not claim to be a CMake expert. . As for the plugin issue I suspect it will go away. I'm switching us to a superbuild strategy that relies on having things installed. Finally, the way we run tests has completely changed since the last time I tested them with MPI. Taking a quick glance at the scripts I think that the problem might be that the actual tests are run with a Python script and I suspect that the usual CTest options are not being passed to it. For what it's worth, MPI has been removed from Psi4 in my rewrite. The idea going forward is to make plugins responsible for it; we have a similar strategy in Pulsar that I think works nicely.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230783977:70,rewrite,rewrite,70,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230783977,4,"['plugin', 'rewrite']","['plugin', 'plugins', 'rewrite']"
Modifiability,"A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the `Makefile` spit out) has definitely been updated since then. Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon. Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the `--new-plugin-makefile` output won't be a problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172151258:83,plugin,plugin,83,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172151258,5,['plugin'],"['plugin', 'plugin-makefile', 'plugins']"
Modifiability,"A good test of when this is fixed: the `scf-property` test line `#compare_values(-39.14134740550916, variable('B3LYP TOTaL ENERGY'), 6, ""B3LYP energy"") #TEST # waiting for dft fctl psivars` should pass, uncommented.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956:101,variab,variable,101,https://psicode.org,https://github.com/psi4/psi4/issues/2477#issuecomment-1068078956,1,['variab'],['variable']
Modifiability,"A plugin is expected to link with OpenMP libs but not necessarily with BLAS, as it can get all its math functionality through psi4 core.so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400682940:2,plugin,plugin,2,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400682940,1,['plugin'],['plugin']
Modifiability,"A recent [forum issue](http://forum.psicode.org/t/fatal-error-wavefunction-unable-to-obtain-mo-coefficients/2204/14) about obtaining dipoles has been complicated by the question of what the name of the variable to call them is. For example:. ```; wfn = psi4.properties(""scf"", properties=['dipole'], return_wfn=True)[1]; prop_dipole = wfn.variable(""SCF DIPOLE""). wfn = energy(""scf"", return_wfn=True)[1]; psi4.oeprop(wfn, ""DIPOLE""); oeprop_dipole = wfn.variable(""DIPOLE""); ```. These two methods of obtaining the dipole save it to the wavefunction under different names. Is there some way to make this more standardized?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203:202,variab,variable,202,https://psicode.org,https://github.com/psi4/psi4/issues/2203,3,['variab'],['variable']
Modifiability,"AS;ESSL;ATLAS;ACML; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found BLAS: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- LAPACK will be searched for based on MKLROOT=/opt/intel/mkl/; -- Found LAPACK: MKL (/opt/intel/mkl/lib/libmkl_rt.dylib); -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX, C/CXX/Fortran=GNU/GNU/; -- Found OpenMP_CXX: -fopenmp (found version ""4.5"") ; -- Found OpenMP: TRUE (found version ""4.5"") found components: CXX ; -- Found TargetOpenMP: 1 found components: CXX ; -- Found MathOpenMP: 1 ; -- Found LAPACK MKL: /opt/intel/mkl/lib/libmkl_rt.dylib;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Suitable Libint could not be located, Building Libint instead.; -- Found qcelemental: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcelemental (found version v0.14.0); -- Found qcengine: /Users/bsenjean/Documents/intelpython3/lib/python3.7/site-packages/qcengine (found version 0.14.0); -- Suitable Libxc could not be located, Building Libxc instead.; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); Python3 incompatible test: pywrap-db2... skipping; Python3 incompatible test: pywrap-freq-e-sowreap... skipping; Python3 incompatible test: pywrap-freq-g-sowreap... skipping; Python3 incompatible test: pywrap-opt-sowreap... skipping; -- Adding test cases: Psi4; -- Found gCP: /usr/local/bin/gcp; -- Adding test cases: Psi4 + gCP; -- Configuring done; -- Generating done; -- Build files have been written to: /Users/bsenjean/Documents/Git_repositories/psi4/objdir; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308:7607,Config,Configuring,7607,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615163308,1,['Config'],['Configuring']
Modifiability,ATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:170: Psi4 not detecting DFTD3. Add `dftd3` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:329: Psi4 not compiled with libefp. Rebuild with -DENABLE_libefp; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:628: Psi4 not compiled with erd. Rebuild with -DENABLE_erd; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:677: Psi4 not detecting CFOUR. Add `xcfour` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:710: Psi4 not detecting plugin v2rdm_casscf. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:762: Psi4 not detecting plugin gpu_dfcc. Build plugin if necessary and add to envvar PYTHONPATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:798: Psi4 not detecting GCP. Add `gcp` to envvar PSIPATH or PATH; SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:909: Psi4 not detecting plugin snsmp2. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_snsmp2); SKIP [1] bin/anaconda3/envs/p4env/lib/python3.6/site-packages/psi4/tests/test_addons.py:925: Psi4 not detecting plugin resp. Build plugin if necessary and add to envvar PYTHONPATH (or rebuild Psi with -DENABLE_resp). ================================================================== warnings summary ==================================================================; /home/henrique/bin/anaconda3/envs/p4env/lib//python3.6/site-packages/psi4/driver/qcdb/molparse/from_arrays.py:304: DeprecationWarning: elementwise == comparison failed; this will raise an error in the future.; if domain == 'qm' and geom is None or geo,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892:4049,plugin,plugin,4049,https://psicode.org,https://github.com/psi4/psi4/issues/1265#issuecomment-424902892,1,['plugin'],['plugin']
Modifiability,"Aa a matter of fact, cmake finds packages through pkg-config perfectly fine. This is documented in cmake docs: https://cmake.org/cmake/help/v3.0/module/FindPkgConfig.html",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450763624:54,config,config,54,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450763624,1,['config'],['config']
Modifiability,"Aaah, great work! If it's fortran direct access, rather than DPD, that should hopefully be easy to cure with some `close` statements in the plugin 🤞",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009#issuecomment-696742600:140,plugin,plugin,140,https://psicode.org,https://github.com/psi4/psi4/issues/2009#issuecomment-696742600,1,['plugin'],['plugin']
Modifiability,"According to [the documentation](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#L329-L330) of `sotoao()`, the function is supposed to return the inverse of `PetiteList.aotoso()`. This matrix is not guaranteed to be invertible. If the matrix is _not_ invertible, multiplying `sotoao()` and `aotoso()` together does not yield the identity matrix. The problem is that `aotoso()` isn't even guaranteed to be square. The SO space will always be [the number of basis functions](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#622-L639). The AO space will be [the number of basis functions or the number of atomic orbitals ](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/petitelist.h#615-L620), depending on whether `include_pure_transform_` is set. In other words, you may be transforming from either Cartesian or pure angular momentum functions to symmetry-adapted pure angular momentum functions. If `d` or higher angular momentum functions are present, then choosing to transform from Cartesian functions means you have more atomic orbitals than basis functions, so the row and column dimensions don't match. The transformation isn't even square, let alone invertible, so of course `sotoao()` returns nonsense. The following input file almost demonstrates the problem. You'll need to PyBind the `PetiteList` initializer over as well for it to run. ```; molecule mol {; 0 3; symmetry c1; C 0.0000000000 0.0000000000 -0.5928430915; H -0.0000000000 0.9469373770 -1.1509808737; H 0.0000000000 -0.9469373770 -1.1509808737; }. basis = core.BasisSet.build(mol, ""ORBITAL"", ""cc-pvdz"", quiet=True); factory = core.IntegralFactory(basis). # np.dot(so2ao, ao2so) should always be the identity. The functions are inverses. # We have a problem!; petite = core.PetiteList(basis, factory, True); so2ao = petite.sotoao().nph[0]; print(so2ao); print(so2ao.shape) # (24, 25) ; ao2so = petite.aotoso().nph[0]; print(np.dot(so2ao, ao2so)). # Works ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1763:929,adapt,adapted,929,https://psicode.org,https://github.com/psi4/psi4/issues/1763,1,['adapt'],['adapted']
Modifiability,"Actually after double checking I was completely wrong on the symmetry; explanation. Sorry for any confusion I caused. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:26 AM, Justin Turney justin.turney@gmail.com; wrote:. > The numbers printed by the sointegral plugin are not the symmetry blocked; > indices but the absolute indices (non-symmetry blocked). The order of the; > absolute indices come directly from the basis set. For your input file the; > the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; > A1 (1s on carbon), so by symmetry this integral does not exist. The; > transformation matrix for obtaining symmetry blocked integrals is obtained; > with:; > ; > // prints the transformation matrix.; > soBasis->petite_list()->sotoao()->print();; > ; > What you probably want to look into is printing the {p,q,r,s}irrep and; > {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; > post-symmetry-blocking-transformation.; > ; > You're right, the difference between absolute and symmetry blocked indices; > could be better explained. With respect to two-electron integrals, Psi; > never reports integrals of value zero to prevent wasting CPU cycles, again; > this could be made clearer.; > ; > Justin Turney, Ph.D.; > Senior Research Scientist; > CCQC/UGA; > ; > On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com; > wrote:; > ; > > OK, found it. The overlap is zero for those orbitals.; > > ; > > But I was under the impression that sointegrals gave me all unique; > > integrals because of symmetry, including those that are zero due to the; > > overlap. This should be made clearer in the docs.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68#issuecomment-73901139:298,plugin,plugin,298,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73901139,2,['plugin'],['plugin']
Modifiability,"Actually, I think I have a better idea for testing this stuff. I can implement ""ESP"" and ""FIELD"" methods in OEProp that will compute the ESP and fields at the `PROPERTIES_ORIGIN` and set the results in Psi vars. I don't think the grid iterators should populate those variables, because the grids could be huge. By allowing `PROPERTIES_ORIGIN` to specify a single grid point, we can easily store the value for testing. This will also allow us to construct loops over grids in Python, without having to generate a grid.dat file. Thoughts, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234655165:267,variab,variables,267,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234655165,1,['variab'],['variables']
Modifiability,"Actually, it seems the ordering is *still* wrong. Comparing coefficients with and without symmetry, there are huge differences. I'm at my wit's end... So, for a simple test case; ```; molecule {; H 0.0 0.0 0.0; H 0.0 1.0 0.0; H 0.0 0.0 1000.0; H 0.0 1.0 1000.0; }. set basis 6-31G; scf_e, scf_wfn = energy('s_x', return_wfn=True). set reference rhf; set r_convergence 1e-10; set dump_vectors true; energy('fci', ref_wfn=scf_wfn); ```; when run without symmetry, the 00000202 configuration turns up with zero weight. When symmetry is used, however, the configuration gets an amplitude of 5.949876123577e-04...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301289886:475,config,configuration,475,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301289886,2,['config'],['configuration']
Modifiability,Adapt PSIMRCC to compute_energy standard,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1854:0,Adapt,Adapt,0,https://psicode.org,https://github.com/psi4/psi4/pull/1854,1,['Adapt'],['Adapt']
Modifiability,Add Appveyor configuration to compile and tests on Windows,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1185:13,config,configuration,13,https://psicode.org,https://github.com/psi4/psi4/pull/1185,1,['config'],['configuration']
Modifiability,"Add a little additional documentation about the SAPT related Psi variables. ## Description; Clarify a little about the construction of the SAPT Psi variables. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [ ] ; ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [ ] Clarification of SAPT Psi variables for developers (function documentation only, no code change); - [ ] Feature2. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3017:65,variab,variables,65,https://psicode.org,https://github.com/psi4/psi4/pull/3017,3,['variab'],['variables']
Modifiability,"Added a few lines to tests `cc39` and `cc29` for checking the variables for polarization and rotation. I tested them myself, in case Travis doesn't use those tests, and put the outputs in the PR description. I hope everything is in order!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857#issuecomment-344331581:62,variab,variables,62,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344331581,1,['variab'],['variables']
Modifiability,"Adding printouts; ```; foreach(_al ${_addons}); get_filename_component(_ald ${_al} DIRECTORY); message(""al is \""${_al}\""""); message(""ald is \""${_ald}\""""); ```; yields the following output; ```; al is ""-lopenblaso""; ald is """"; ```. so I guess you need to add a check if ald is an empty variable..",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/648#issuecomment-286957146:285,variab,variable,285,https://psicode.org,https://github.com/psi4/psi4/issues/648#issuecomment-286957146,1,['variab'],['variable']
Modifiability,Addition of psi4fockci plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1855:23,plugin,plugin,23,https://psicode.org,https://github.com/psi4/psi4/pull/1855,1,['plugin'],['plugin']
Modifiability,"Adds std::log10, SUPPORT file, tests more addons, -fno-openmp for int……el icpc, final psi4 1.1 citation, fix mints3 as mentioned in psi4/psi4#761. ## Todos; Notable points that this PR has either accomplished or will accomplish.; * **Developer Interest**; - [x] updates psi4 citation; - [x] adds `std::log10` as Andy advised; - [x] removed dead code as AJ advised; - [x] adds SUPPORT file as [github advised](https://github.com/blog/2400-support-file-support); - [x] revises Travis to test all add-ons (except CheMPS2) and from proper channels and to count the travis downloads; - [x] with MKL, gcc on Mac _must_ have iomp5, gcc on Linux can have either iomp5 or gomp, icpc must have iomp5 but moreover, we want to allow gcc plugins built from icpc psi4 to handle omp consistently, so adding `-fno-openmp` to catch downstream gcc plugins; - [x] the thing Adam mentioned in psi4/psi4#761 about create_matrix was making mints3 fail, so ameliorated (didn't totally fix) that; * **User-Facing for Release Notes**. ## Status; - [x] Ready to go (if passing, RTG. squash, I think)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/770:725,plugin,plugins,725,https://psicode.org,https://github.com/psi4/psi4/pull/770,2,['plugin'],['plugins']
Modifiability,"Adds the ability to compile and link [Ambit](https://github.com/jturney/ambit) v0.1-alpha into Psi4. The interface is disabled by default but can be enabled with either `setup --ambit=on` or `cmake -DENABLE_AMBIT=ON`. Even though the interface is disabled by default both states have been tested in Travis: [disabled](https://travis-ci.org/jturney/psi4/builds/109861480) and [enabled](https://travis-ci.org/jturney/psi4/builds/109700703). A new plugin template has also been added, `psi4 --new-plugin mycode +ambit`, which shows how to use Ambit with added Psi4 functionality. This PR also includes fixing a typo in Wavefunction and renaming the macro NotImplementedException to NOT_IMPLEMENTED_EXCEPTION to avoid conflicts with Ambit. This PR is ready to go.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/265:445,plugin,plugin,445,https://psicode.org,https://github.com/psi4/psi4/pull/265,2,['plugin'],['plugin']
Modifiability,"After discussion with Lori, work on getting this PR through will resume after MQM. We also have a plan to deal with plugin incompatibilities. Feel free to review earlier if you wish.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2619#issuecomment-1163433170:116,plugin,plugin,116,https://psicode.org,https://github.com/psi4/psi4/pull/2619#issuecomment-1163433170,1,['plugin'],['plugin']
Modifiability,"After some discussion with Lori and Zach as well as digging through the code and running tests, we saw that psi4 is running PK as asked. The issue of printing . ```; @DF-ROHF; ```. Is a result of psi4 getting a global variable for the printout whereas the user has chosen the PK option through a local variable. I am told by Lori that Psi4 is moving away from local options, but that a number of users wish to keep the ability to ""hack the SCF by setting local variables."" We could change the code by getting a local variable to print, but that would run against recent design changes. . To get the correct output, it's recommended that the options be set as . ```; set {; scf_type PK; other_key other_option; }; ```. Instead of. ```; set scf {; scf_type PK; other_key other_option; }; ```. I hope that helps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624:218,variab,variable,218,https://psicode.org,https://github.com/psi4/psi4/issues/1503#issuecomment-461156624,4,['variab'],"['variable', 'variables']"
Modifiability,"Ah, I think @SebWouters said CASPT2 is only in 1.7, and there's a CheMPS2 API change between 1.6 and 1.7. But according to https://github.com/SebWouters/CheMPS2/issues/20, a new plugin from today should be such that the CheMPS2/Psi4 interfacing code is 1.7/HEAD compliant. So I don't see that what you're doing _shouldn't_ work. Would have to try it out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185857811:178,plugin,plugin,178,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185857811,1,['plugin'],['plugin']
Modifiability,"Ah, got it. I don't have a good reference unfortunately, but a good rule of thumb is to assume that C++ is not initializing memory for you. Assigning to an entire array can be quite expensive, so it's left to the programmer. Moreover, you may be assigning values to it later, which would render any compiler-assigned initial value moot. The old `init_int_array` and friends were inherited from Psi3: they take care of allocating *and* zeroing the memory for you (using `malloc` and then `memset`) so they made things a little more convenient for the programmer. The modern C++ equivalent is to use `std::vector<int> myVec(nElements);` That simply makes a vector of length `nElements`, which can be passed to any function expecting an `int *` by passing `myVec.data()` or `&myVec[0]`. Note that even this way of constructing a vector doesn't initialize the data at all: to do that you need to either `std::fill(myVec.begin(), myVec.end(), 0);` or, better still, tell the compiler which value to use to construct the vector with `std::vector<int> myVec(nElements, 0);` . You can see in my commit that I only zeroed the first (index 0) element. The reason for that is because the loop over irreps starts from 1 in that code, so indices 1+ are correctly assigned. Index 0 was not being touched, so it retained whatever value resulted from the call to `new` that created the array. I hope this helps - please let me know if there's anything I can clarify at all.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1534#issuecomment-489816250:379,inherit,inherited,379,https://psicode.org,https://github.com/psi4/psi4/pull/1534#issuecomment-489816250,1,['inherit'],['inherited']
Modifiability,"Ah, so it seems I made a mistake in my assumptions. The failed CI tells me this:. `/home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/threeindexintegrals.cc:33:10: fatal error: psi4/libmints/sieve.h: No such file or directory; #include <psi4/libmints/sieve.h>`; ; It seems that PKJK is, in fact, _not_ the only place that uses ERISieve. This v2rdm_casscf plugin does, as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347:427,plugin,plugin,427,https://psicode.org,https://github.com/psi4/psi4/pull/2933#issuecomment-1527816347,1,['plugin'],['plugin']
Modifiability,"Ah, the conda recipe may not be catching the problem if involving caching since always invoked fresh. Yes, at least try a `setup` configure and look at https://github.com/psi4/psi4public/wiki/8_FAQ_Contents#how-to-see-what-setup-and-cmake-commands-are-active-for-the-object-directory to see if it can help debug your direct cmake build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130117260:130,config,configure,130,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130117260,1,['config'],['configure']
Modifiability,"Ah, we recently changed some Psi4 infrastructure and there is no longer a global wavefunction as the error mentions. This is either occurring because:; 1) Your PSIDATADIR path is pointing to an older library version; 2) You wrote a custom plugin that still uses this functionality. Please view the following topic: http://forum.psicode.org/t/wavefunction-passing-update/139. Cheers,; Daniel Smith. > On Mar 10, 2016, at 9:58 AM, hernan3009 notifications@github.com wrote:; > ; > It was possible to compile and install psi4 without problems, but the make command returned; > ; > hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; > /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=**restrict** -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; > pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; > pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; > boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; > ^; > make: **\* [pluginintegrales.o] Error 1; > ; > —; > Reply to this email dire",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194993406:239,plugin,plugin,239,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194993406,2,['plugin'],"['plugin', 'pluginintegrales']"
Modifiability,"Ah, yes you are right. I have a class wrapper around psi4 that sets the initial configurations and that has the default value 64. That must be why I have the spikes. Because psi4 knows that is available to it because I requested it in the initial configurations. . Okay so I set up tests where I am generating an interaction energy surface scan for a dimer. I am using `mp2/cc-pvqz-ri`. I didn't know if the resolution identity error was implied like gaussian or if I had to explicitly state it. It's about 72 point single point energy scans. . **Test 1**. I reduced down the `64` to `16`. ```bash; -pe smp 16; ```. Reset the default where this is happening to set the thread to one. with the OMP and MKL flags set in the job submission script. . ```bash; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```; ```python. psi4.set_num_threads(1). ```; **Test 2**. Only rely on the flags in the job submission script. ```; export MKL_NUM_THREADS=12; export OMP_NUM_THREADS=12; ```. ```python. # psi4.set_num_threads(1); ```. It seems like so far the loads seem to be continuously used. I will get some graphs in the morning for you to look at.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201:80,config,configurations,80,https://psicode.org,https://github.com/psi4/psi4/issues/2747#issuecomment-1278373201,2,['config'],['configurations']
Modifiability,"Ahhh. Commenting it out was a bad idea indeed. Thank you for pointing this out @susilehtola. It looks like the simplest way I can enable the functionality I need without breaking other things is to add a new protected variable `persistent_external_potentials_` and associated public methods `push_back_persistent_external_potential()` and `clear_persistent_external_potential()` to the `HF` class. Then the persistent potentials will not be cleared at each iteration. However, then we would have three mechanisms for doing nearly the same thing: `HF::external_potentials_` for dealing with PCM/DDX/PE, `HF::persistent_external_potentials_` for my user-supplied one-electron operators, and the `ExternalPotential` class for external point charges. Perhaps a better strategy would be to extend the `ExternalPotential` capabilities? It does seem to already allow for a diffuse charge density expanded in an auxiliary bases, but I couldn't find an example that uses this option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3228#issuecomment-2391707920:218,variab,variable,218,https://psicode.org,https://github.com/psi4/psi4/pull/3228#issuecomment-2391707920,2,"['extend', 'variab']","['extend', 'variable']"
Modifiability,"All DSD functionals, with the exception of the CORE-DSD-BLYP functional, were changed to the version from the 2013 paper. The versions without dispersion correction are now parameterized differently from the D2 and D3BJ versions. They will differ from previous version of Psi4, however our DSD-PBEPBE-D3BJ was checked against G16 and with frozen core on it passed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/945#issuecomment-378480164:173,parameteriz,parameterized,173,https://psicode.org,https://github.com/psi4/psi4/pull/945#issuecomment-378480164,1,['parameteriz'],['parameterized']
Modifiability,All but two of the files in `bin` are specific to the old configure.ac build system. The other two: `psi4-config.in` I do not think it is used and is a left over of the old plugin system and `git_list_authors.sh` was just a toy script that someone put in. The files in `bin` should be safe to remove.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/187#issuecomment-156849608:58,config,configure,58,https://psicode.org,https://github.com/psi4/psi4/issues/187#issuecomment-156849608,3,"['config', 'plugin']","['config', 'configure', 'plugin']"
Modifiability,"All requested changes made. I have also run the _entire_ test suite, modulo plugins and dft benchmarks. I stumbled across a rather critical bug that way: empirical_dispersion needed to be updated with the new FINDIF.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426:76,plugin,plugins,76,https://psicode.org,https://github.com/psi4/psi4/pull/1024#issuecomment-410711426,1,['plugin'],['plugins']
Modifiability,"All right, I believe all outstanding issues up to this point have been resolved! As of recent, all checks and queries based on GauXC's AM (e.g., L2 cross-validation) are now conducted at runtime instead of compile-time, GauXC GPU memory allocation is user-controllable, and the build system is set up to propogate `CMAKE_CUDA_ARCHITECTURES` to GauXC in a reasonable fashion. Current issues in CI seem to revolve around problems with finding a suitable `basis_set_exchange` package to use for configuration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429:492,config,configuration,492,https://psicode.org,https://github.com/psi4/psi4/pull/3150#issuecomment-2105124429,1,['config'],['configuration']
Modifiability,"All the plugin templates are working now (I tried them myself last week). I think those last issues you had were from lingering files or mixing plugins/mointegrals/ with share/plugins/mointegrals.cc_template . If you have more code concerns repost here or for general questions, please try the forum (http://forum.psicode.org/)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-196390208:8,plugin,plugin,8,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-196390208,3,['plugin'],"['plugin', 'plugins']"
Modifiability,All we need for plugins are the headers to create the .so file and the psi4 executable to run against.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-135774593:16,plugin,plugins,16,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-135774593,1,['plugin'],['plugins']
Modifiability,"Alright I have extended two tests none of the quicktests run through ccdensity but I ran both of these and the passed. The changes don't seem to mess up comparison to output.ref so I didn't change them. . Pending feedback about how to index the roots I have followed what is in place for eom-cc ES energies. . `CC DIPOLE X` is the ground state. `CC ROOT 1 DIPOLE X` is first ES, and so on.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-260009547:15,extend,extended,15,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-260009547,1,['extend'],['extended']
Modifiability,"Also I'm not sure how to deal with the ambivalence between DDX and PCM in terms of the user-facing flags to enable the models and the Psi variables to store results / energy terms. PCMsolver can do PCM and COSMO, but DDX can provide domain-decomposition variants of these plus in the future linearised Poisson-Boltzmann (LPB), which is in some sense an extension to PCM. So looking ahead it feels weird to have a flag PCM to decide whether LPB is run. Similar DDX and PCMsolver will not give the same values for the solvation energy, but are still sort of doing the same thing (continuum solvation models). Any thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824:138,variab,variables,138,https://psicode.org,https://github.com/psi4/psi4/pull/2767#issuecomment-1326705824,1,['variab'],['variables']
Modifiability,"Also, if you run `setup`, then `cd obj; make`, but realize something was set wrong (e.g. the path to libpython.so, the cmake variable `PYTHON_LIBRARY`), and then modify within cmake (`ccmake ..` and change a setting, hit `g` to regenerate), the build system doesn't seem to realize that nothing has changed and skip the appropriate stuff. I just did this, and we're rebuilding all the libint files :(",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130121250:125,variab,variable,125,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130121250,1,['variab'],['variable']
Modifiability,"Ambit's easy, `conda install pyambit -c conda-forge`. There's nothing in psi that actually links to it, so it's fine to simply install psi4 binary and ambit binary into the same env. For CheMPS2, are you wanting to run chemps2 through psi4? That's easy to enable if you're building psi4 from src. But there isn't a good sol'n for using psi4 binary. I'd suggest compiling chemps2 from src if you want chemps2 w/o psi4 linkage. Or wait until we finally re-plugin-ize it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854:454,plugin,plugin-ize,454,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1837092854,1,['plugin'],['plugin-ize']
Modifiability,"An implementation for #1375 PsiPEP 002. ## Todos; - [x] Standardizes function names surrounding scalar and array variables in globals & Wfn. Fills in missing methods.; - [x] C-side deprecates old names for Wfn variable access (compile-time for C-API downstream); - [x] Py-side deprecates old names for global and Wfn variable access (run-time for Py-API downstream, incl. Psithon inputs); - [x] New set of functions (reuse of many of the old fn names) for uniform access; - [x] Wfn variable access now case insensitive and storage always uppercase (as globals always has); - [x] array variable getters/setters now return _copies_ of the arrays; - [x] globals now throws instead of autovivifying to 0 when getter called for non-existant key (as Wfn always has); - [x] Py-side (and hence all globals access) resists giving the same key to a scalar and an array variable. This check is not in place for C-side Wfn, but shouldn't be a problem given our habit of labeling with E/G/H, etc.; - **ALERT** this generates oodles of `FutureWarning`s b/c to keep this PR focussed on the substantive changes, I haven't updated the fn names w/i the codebase. That will be a separate PR hard after this gains approval, and should probably be merged in sequence, lest users go batty. I've worked on other topics beyond this one, and I'm confident the deprecation warnings are allowing the unhindered use of old syntax.; - [x] Deprecation Warnings look like the below in PsiAPI and PSIthon modes, respectively. For the latter, I had to suppress printing of offending line b/c it was very wrong (usually part of the LGPL license).; ```; psiapi.py:8: FutureWarning: Using `psi4.core.get_variable` instead of `psi4.core.variable` (or ; `psi4.core.scalar_variable` for scalar variables only) is deprecated, and in 1.4 it will stop working. print(psi4.get_variable('current energy')); ```; ```; Using `psi4.core.get_variable` instead of `psi4.core.variable` (or `psi4.core.scalar_variable` for scalar variables only) is dep",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1393:113,variab,variables,113,https://psicode.org,https://github.com/psi4/psi4/pull/1393,6,['variab'],"['variable', 'variables']"
Modifiability,And regarding the build: I cloned Psi4 yesterday on a machine where I never had Psi4 installed. The configure is also telling me that pybind11 could not be located and that it will be built.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288530704:100,config,configure,100,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288530704,1,['config'],['configure']
Modifiability,And search your plugin for `@CXX@`. I don't know where that's coming from.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271947159:16,plugin,plugin,16,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271947159,1,['plugin'],['plugin']
Modifiability,And/or add to our cmake scripts a check for numpy. . It would also be useful to add cmake checks for the C++11 specific features we use and error out at configuration time. I think it tests for some but doesn't error out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/407#issuecomment-225233909:153,config,configuration,153,https://psicode.org,https://github.com/psi4/psi4/issues/407#issuecomment-225233909,1,['config'],['configuration']
Modifiability,"Any chance it could be a disk space issue? I created a minimal env with cmake, eigen, mpfr, python, GCC, and it unpacked fine. Gnu compilers, but surely that wouldn't matter at the unpacking stage. ```; -- Found LAPACK MKL: /theoryfs2/common/software/intel2019/compilers_and_libraries_2019.4.243/linux/mkl/lib/intel64/libmkl_rt.so;...; -- Suitable pybind11 could not be located, Building pybind11 instead.; -- Suitable gau2grid could not be located, Building gau2grid instead.; -- Could NOT find Libint2 (missing: Libint2_DIR); -- Suitable Libint2 could not be located, Building Libint2 5-4-3-6-5-4 instead.; -- Suitable qcelemental could not be located, Building qcelemental instead.; -- Suitable qcengine could not be located, Building qcengine instead.; -- Suitable Libxc could not be located, Building Libxc instead.; -- Suitable BrianQC could not be located, please contact info@brianqc.com to obtain BrianQC; -- Documentation targets available: doxyman (html); -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No theme, no docs (try: conda install sphinx-psi-theme cloud_sptheme sphinx-automodapi graphviz python-graphviz -c conda-forge -c psi4); -- Adding test cases: Psi4; -- Running some tests requires pytest. Please install it manually (try: /home/psilocaluser/toolchainconda/envs/minbld/bin/python3.6 -m pip install pytest); -- Configuring done; -- Generating done; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636:1393,Config,Configuring,1393,https://psicode.org,https://github.com/psi4/psi4/issues/2147#issuecomment-813663636,1,['Config'],['Configuring']
Modifiability,"Apologies if this is off the development timeline or out of left field. The psi4 plugin system is excellent, and it's one of the really cool unique features of the package. One way to make it even better would be if it didn't require having access to the source to compile a plugin. Currently, all the static archives stay inside the object directory and are not installed to `prefix`, which means that when the plugins need to link against psi4, they link against the archives in the object directory, and the psi4 binary embeds the location of the source and build directory to use when generating an example plugin makefile. It would be nice to copy the archives to `$PREFIX/lib` instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162:81,plugin,plugin,81,https://psicode.org,https://github.com/psi4/psi4/issues/162,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Apparently I'd failed to run a ""git merge upstream/master"" after ""git fetch upstream"" when I created my local fork last week, so my most recent commit on master was by @dgasmith 18 days ago. As a result, none of the work between the Big Inversion appeared in my new fork, including the new_plugin code section in run_psi4.py. @jturney's question revealed the discrepancy. Plugin templates work now. Thanks, all!. -TDC",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258732954:372,Plugin,Plugin,372,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258732954,1,['Plugin'],['Plugin']
Modifiability,"Are you building Psi4 for packaging or for single-deployment use?. Psi4 does check for external packages at CMake configure time and will find any you specify with the variables in ""CMake Variables"" section in http://psicode.org/psi4manual/master/libint.html#how-to-configure-libint-for-building-psi4 and similar variables for other packages. Note that the external packages must have been built to export a CMake target (that is, `LibintConfig.cmake`). The CMake config should be reporting a colored Found or Building for each package. When Psi4 itself is packaged, it always uses externally built packages of its dependencies so that none of other packages' files get installed (except pybind11 headers, just because it's safer to keep the right version internally). For single-deployment Psi4 builds, it'll just build and install whatever's needed, as you observed, for the user's convenience. Do you think the existing scheme can work for you? I'm glad to explain it further if you need.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343715845:114,config,configure,114,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343715845,6,"['Variab', 'config', 'variab']","['Variables', 'config', 'configure', 'configure-libint-for-building-', 'variables']"
Modifiability,"Are you building with pcmsolver on? I think @robertodr will have to answer the why in your link. I think most people configure through the setup script, not with cmake directly. With cmake directly and without pcmsolver, https://github.com/psi4/psi4meta/blob/master/conda-recipies/psi4/build.sh has been working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130114938:117,config,configure,117,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130114938,1,['config'],['configure']
Modifiability,"Are you describing that `c1_deep_copy` on R/U/ROHF wfns are fine b/c https://github.com/psi4/psi4/blob/1ecf33397370ebaa3b2ec14dd276c22519c66ed4/psi4/src/psi4/libscf_solver/rhf.cc#L999-L1002 etc. in the derived classes copy over the orbitals; whereas, `c1_deep_copy` on say, CC, is lacking because those derived wfn classes haven't extended the method?. This makes sense historically since `c1_deep_copy`'s purpose was simply transitioning a symmetry-using SCF wfn into a c1-only post-SCF module. But I can see its deficiencies beyond that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874:331,extend,extended,331,https://psicode.org,https://github.com/psi4/psi4/issues/2777#issuecomment-1317597874,1,['extend'],['extended']
Modifiability,Are you getting your plugin cmake line from `psi4 --plugin-compile`? It does return a `CMAKE_PREFIX_PATH` like the below:. ```; cmake -C /theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax/share/cmake/psi4/psi4PluginCache.cmake -DCMAKE_PREFIX_PATH=/theoryfs2/ds/cdsgroup/psi4-install/psi4jun-ax .; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775#issuecomment-320452824:21,plugin,plugin,21,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320452824,2,['plugin'],"['plugin', 'plugin-compile']"
Modifiability,"Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want to stick to DMRG-SCF?. If you would like to, I can release an intermediate version v1.7, and you can use the plugin (or copy parts of) https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc to run the CASPT2 calculations...",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384:184,plugin,plugin,184,https://psicode.org,https://github.com/psi4/psi4/issues/384,1,['plugin'],['plugin']
Modifiability,Are you on OS X? I think you have a version of boost that has a different ABI or is linked against a different libstdc++/libc++ than your (non-standard) compiler `/usr/local/bin/clang-omp` is configured to target.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199#issuecomment-169146307:192,config,configured,192,https://psicode.org,https://github.com/psi4/psi4/issues/199#issuecomment-169146307,1,['config'],['configured']
Modifiability,"Are you setting `PSIDATADIR`? To what? I don't agree with it searching in ""/home/kannon/src/psi4_cmake/Build_Debug/plugins/skeleton/plugin"". Often, just a new objdir suffices.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271974463:115,plugin,plugins,115,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271974463,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Are you trying to use a Libint2 release? Keep in mind that Psi4 needs changes to the upstream buildsystem (these can be worked around) and changes to the default upstream build configuration (such that a built library won't work with any other open-source QC package). I'll collect some links here since it's worth having an issue open on this for packagers to consult (hence pinging @mbanck, @susilehtola). * https://github.com/psi4/psi4/issues/2300 (search ""multidimensional"") for background and conda-forge; * https://github.com/evaleev/libint/issues/190 for the general open-source conundrum and current psi4 prospects toward the end; * https://github.com/psi4/psi4/blob/master/external/upstream/libint2/CMakeLists.txt#L1-L25 for libint2 build constraints for Psi4. Steps toward Psi4 using a upstream Libint2 release in common with other open-source QC programs:; - [x] transition psi4 TEI #1721; - [ ] reconcile LAB's l2 cmake (that psi uses at present) https://github.com/loriab/libint/tree/l2cmake with EFV's adaptations https://github.com/evaleev/libint/pull/205; - [ ] merge https://github.com/evaleev/libint/pull/205 and release; - [ ] expand current integrals config requirements beyond current set in notes (needed before #2388); - [ ] transition psi4 OEI #2388 ; - [ ] transition psi4 integral ordering from `gss` to `sss`; - [ ] coordinate with packagers and other QC programs for a AM and integrals types l2 config options set that is adequate for all. If I'm off base @yurivict and you're already using a psi-configured l2 and this is simply a detection issue, let me know.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498:177,config,configuration,177,https://psicode.org,https://github.com/psi4/psi4/issues/2398#issuecomment-1008078498,5,"['adapt', 'config']","['adaptations', 'config', 'configuration', 'configured']"
Modifiability,"Are you using a detected pre-build pybind11? Pybind11 changes so often just now (we usually update to their HEAD once a month and need to adapt the Psi4 code) that we can't guarantee that any but the [tag](https://github.com/psi4/psi4/blob/master/external/pybind11/CMakeLists.txt#L11) works. In case you're alarmed by the fork, the alterations are just changes to the build, not to pybind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261727164:138,adapt,adapt,138,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261727164,1,['adapt'],['adapt']
Modifiability,"As a note our general take it to shuffle more up to the Python layer as well, especially [solvers](https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/solvers.py). The plugin approach is defiantly the best solution I think. It has been a bit, but we should be able to register codes with Psi4 automatically to gain functionality through `psi4.energy/gradient/etc`. @loriab Can make the final call, but I suspect if adcc is on conda, we will just add it to our meta package of `psi4-rt` that will pull down all the run time dependancies (including this one) so there shouldn't be too much of a need for close coupling. . --. The Wavefunction object has the ability to store arrays, matrices, and values in a key:value fashion. Can you give a bit of a description of how complex your return objects are? You may want to consider adding to the MolSSI [QCSchema](https://github.com/MolSSI/QCSchema) project the properties that you are returning so that we can have a schema-based definition of these objects that other codes can use and conform to. --. This looks really amazing, it is awesome to see projects adopt this kind of project structure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509:176,plugin,plugin,176,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547410509,2,"['coupling', 'plugin']","['coupling', 'plugin']"
Modifiability,"As a point of organization, keep responses _on_ comments on specific lines of code limited to responses _about_ those comments. Your point about BSISA didn't belong below my point about how a comment needed to be corrected. I still don't like the idea of adding member variables to `PopulationAnalysisCalc` that are not required for all or even most population analyses. This is how you get the explosion of member variables polluting a certain Psi module. I recommend either making a subclass or demoting those member variables to arguments of a function call inside the parent population analysis. The latter option requires that any further requests for a particular population analysis be done at the time the population analysis is done, rather than reading a new OEProp request. This makes more sense to me.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2056#issuecomment-742615125:269,variab,variables,269,https://psicode.org,https://github.com/psi4/psi4/pull/2056#issuecomment-742615125,3,['variab'],['variables']
Modifiability,"As best as I can tell, it's not actually _used_ Python-side, except for `dfmp2`. My first choice would be to keep the function C-side, but not export it Py-side. If that would be a problem for plugins, sticking a warning in the `docstring` is the best solution. I can't imagine how we would have separate user API and programmer API. The only plugins I imagine using `compute_gradient` are V2RDM and Forte. V2RDM doesn't call it Py-side. Forte does, but I can personally take responsibility for moving that to C-side, if Francesco approves.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-869934318:193,plugin,plugins,193,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-869934318,2,['plugin'],['plugins']
Modifiability,"As noted by @loriab, the UHF FCIDUMP files seem erratic when it comes to the number of nonzero two-electron integrals printed out. I am tracking down the problem.; The current FCIDUMP functionality is a rewrite of the plugin @jsspencer wrote for Psi4 1.1 [available here](https://github.com/hande-qmc/fcidump) I have a reference UHF/cc-pVDZ output file and integral dump for Ne and I notice that the current incarnation of the functionality prints 300 MO TEIs _less_ than the original plugin. Looking at the output files I see the following output from `MintsHelper`:; - **Reference**; ```; Computing two-electron integrals...done; Computed 861 non-zero two-electron integrals.; Stored in file 33.; ```; [ne.in.log](https://github.com/psi4/psi4/files/1947119/ne.in.log); [NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log](https://github.com/psi4/psi4/files/1947108/NE.CC-PVDZ.UHF.PLUGINDUMP.ref.log); [ne.ref.log](https://github.com/psi4/psi4/files/1948145/ne.ref.log); - **Current implementation**; ```; Computing two-electron integrals...done; Computed 794 non-zero two-electron integrals.; Stored in file 33.; ``` ; [input.py.log](https://github.com/psi4/psi4/files/1947121/input.py.log); [Ne.cc-pVDZ.UHF.INTDUMP.log](https://github.com/psi4/psi4/files/1947113/Ne.cc-pVDZ.UHF.INTDUMP.log); [Ne.cc-pVDZ.UHF.dat.log](https://github.com/psi4/psi4/files/1947114/Ne.cc-pVDZ.UHF.dat.log). I cannot see how the two calculations differ. Does anybody have a clue @jturney @dgasmith?. **EDIT** I've cut the reference output to only include the problematic calculation: Ne, cc-pVDZ, UHF reference, with symmetry.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/980:203,rewrite,rewrite,203,https://psicode.org,https://github.com/psi4/psi4/issues/980,5,"['PLUGIN', 'plugin', 'rewrite']","['PLUGINDUMP', 'plugin', 'rewrite']"
Modifiability,"Aside from the warning, the install is working properly whether one builds psi4so or not. The incompatibility of exclude_from_all and install seems well known, and I've only seen a rather complicated procedure to handle this w/o the warning. Whether psi4so gets built is not known at configure time, and I haven't seen a cmake check dependent on whether a make target was executed. I agree the warning is annoying, but is it really a problem for anything?. > On Jun 19, 2016, at 10:59 PM, Susi Lehtola notifications@github.com wrote:; > ; > Configuring my psi4 I get the warning message; > ; > WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case.; > ; > Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415#issuecomment-227061602:284,config,configure,284,https://psicode.org,https://github.com/psi4/psi4/issues/415#issuecomment-227061602,2,"['Config', 'config']","['Configuring', 'configure']"
Modifiability,"At _every_ recompile, `$objdir/src/bin/psi4/gitversion.h` is generated with contents below that get used in defining the output file header. ```; #define GIT_VERSION ""{master} b04cdf9 ""; #define PSI_VERSION ""0.4.90""; ```. Then either `$objdir/bin/psi4-config --version` or `$objdir/bin/psi4 --version` will yield the version. So I don't use the `VERSION` file at all for versioning. But I haven't gotten rid of it either b/c of dashboard suspicions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/271#issuecomment-187431099:252,config,config,252,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187431099,1,['config'],['config']
Modifiability,"At long last, some gradient refactoring. Supersedes [my previous attempt](https://github.com/psi4/psi4/pull/1745). Only the OPDM and Lagrangian are a 1.7 target. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [x] Orbital-optimized `occ` densities now available on the wavefunction; - [x] DC-06 densities now symmetrized. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] Conventional gradients now check whether the density and Lagrangian are set on the wavefunction. If so, it uses those rather than reading MO-basis quantities from disk. `dct` and `occ` use this new system. `cc` will use it in the next PR. The old system will be removed for 1.8. Old system vs new system is toggled by the `reset_oneel` flag. ## Questions; - [x] How to create a warning that plugin developers should use new-style gradients?. ## Checklist; - [x] All `dct`, `omp`, `mp`, `olccd`, lccd`, `cepa`, and `cc` tests pass. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2788:28,refactor,refactoring,28,https://psicode.org,https://github.com/psi4/psi4/pull/2788,2,"['plugin', 'refactor']","['plugin', 'refactoring']"
Modifiability,"At risk of encouraging procrastination, the alignment of error codes in `config.h` has been lost.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364:73,config,config,73,https://psicode.org,https://github.com/psi4/psi4/pull/1170#issuecomment-415861364,1,['config'],['config']
Modifiability,Auto-generation of plugin template failing?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/issues/503,1,['plugin'],['plugin']
Modifiability,"Awesome. I'll merge this into my PR and rebase tomorrow morning. On Tue, Mar 7, 2017 at 11:05 PM, Lori A. Burns <notifications@github.com>; wrote:. > @rmcgibbo <https://github.com/rmcgibbo>, I made a PR; > <https://github.com/rmcgibbo/psi4public/pull/1> to your PR so that; > variable labels stay consistent. This/your PR also needs rebasing. So; > please either (a) pull in my PR and rebase this one or (b) let me know, and; > I'll rebase my branch and do a PR (with your commit) directly. Thanks for; > the contribution kick-starting our Wavefunction.variables_ work.; >; > Btw, the git history rewrite this fall reduced repo size by 90%. If you; > wanted much quicker clones, you could delete your fork and re-fork.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/643#issuecomment-284940969>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_gsl1aKAenbQoYI_7elUN9aYliQyks5rjikCgaJpZM4MWI2g>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/643#issuecomment-284949491:276,variab,variable,276,https://psicode.org,https://github.com/psi4/psi4/pull/643#issuecomment-284949491,2,"['rewrite', 'variab']","['rewrite', 'variable']"
Modifiability,"Azure CI is currently configured to run the ""gcc_7"" build using Ubuntu 18.04.; This is deprecated and Azure has already started to prune the VMs that are running Ubuntu 18.04.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2749:22,config,configured,22,https://psicode.org,https://github.com/psi4/psi4/issues/2749,1,['config'],['configured']
Modifiability,"BLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/psi4banner.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/AlphaMOs.png"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; Error copying file (if different) from ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/gdma-2.2.06.pdf"" to ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/build/doc/sphinxman/source"".; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:2003,config,configuring,2003,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['config'],['configuring']
Modifiability,"Biggest issue is moving the variables between the Functional/LibXCFunctional/Superfunctional; objects. Some of the C++ magic is completely lost to me. This line [here](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/src/psi4/libfunctional/superfunctional.cc#L98); is supposed to set the density cutoff to the superfunctional. But this [print out](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/src/psi4/libfunctional/superfunctional.cc#L287) shows me it does not work. I can set this value using python [superfunctional](https://github.com/hokru/psi4/blob/rho_cutoff/psi4/driver/procrouting/dft/superfunctionals.py#L80) but that doesn't seem consistent. I spend a lot of time trying to fix this, but for now I am too confused. Need to revisit later. I welcome any pointers to what could be wrong :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-610439837:28,variab,variables,28,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-610439837,1,['variab'],['variables']
Modifiability,Build plugins without psi installed,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/91:6,plugin,plugins,6,https://psicode.org,https://github.com/psi4/psi4/pull/91,1,['plugin'],['plugins']
Modifiability,Building plugins fails,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/90:9,plugin,plugins,9,https://psicode.org,https://github.com/psi4/psi4/issues/90,1,['plugin'],['plugins']
Modifiability,"By the way, @ajmisquitta, I noticed you have a fork of psi4 from last summer. In October we re-wrote our git history to reduce the repository size by 90%. This makes pre-history-rewrite and post-history-rewrite repositories unreconcilable. If this is the source you are compiling from and you want to continue with psi4 1.0 era code, stick with your repository. Likewise if you have local development associated with your psi4 fork. Otherwise, I strongly recommend deleting your repository and re-forking. This will give you access to 1.1 era code and can interact with the main psi4/psi4 repo. (It will cut off access to building 1.0.) There's some significant build changes with 1.1, but a lot of [good features](https://github.com/psi4/psi4/issues/485), too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/626#issuecomment-281235825:178,rewrite,rewrite,178,https://psicode.org,https://github.com/psi4/psi4/issues/626#issuecomment-281235825,2,['rewrite'],['rewrite']
Modifiability,"CMake already declares those variables and they are in the build ; documentation (which is inside the top. level CMakeLists.txt at the moment). The relevant variables are PYTHON_EXECUTABLE, PYTHON_LIBRARY, and ; PYTHON_INCLUDE_DIR. on 10/11/2016 10:10 AM, David Sherrill wrote:. > Do we need to break down and insist that people specify the python to use; > via some kind of flag? It seems that cmake picking up the wrong one is a; > problem that just won't go away. And/or perhaps a little test script that; > might check the settings and verify that they will work with the user's; > PATH?; > ; > At the very least, we do certainly need updated documentation on the ; > latest; > iteration of the build system, if we don't have it yet.; > ; > On Tue, Oct 11, 2016 at 8:56 AM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Glad rpath behavior is making more sense, @jgonthier; > > https://github.com/jgonthier . Unless all dependencies are isolated; > > behind one environment (conda strategy) or each dependency is ; > > isolated in; > > its own environment (a programming-using-conda strategy, but hard when; > > /usr/ involved), it can be impossible for cmake to predict a safe rpath; > > path. I regularly have to edit mine to get the right HDF5 linked. As I; > > don't know a winning strategy, I think we can't guarantee the built ; > > exe/lib; > > will run, only that the conda ones will. This does show we need better; > > notes on the matter so people can diagnose and correct.; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly, view it on GitHub; > > https://github.com/psi4/psi4/issues/468#issuecomment-252908695, or ; > > mute; > > the thread; > > ; > > https://github.com/notifications/unsubscribe-auth/AC9Qdpv1JDnAWuPCBuGqZCqO58yiQfFyks5qy4d7gaJpZM4KA_tt; > > .; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub ; > https://github.com/psi4/ps",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252929596:29,variab,variables,29,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252929596,2,['variab'],['variables']
Modifiability,"CMake has ```CHECK_FORTRAN_FUNCTION_EXISTS(FUNCTION VARIABLE)``` which menas that it shouldn't be too difficult: check if the new one exists, otherwise use the old one. Right?; https://cmake.org/cmake/help/v3.0/module/CheckFortranFunctionExists.html",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433513043:52,VARIAB,VARIABLE,52,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433513043,1,['VARIAB'],['VARIABLE']
Modifiability,CMake rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442:6,rewrite,rewrite,6,https://psicode.org,https://github.com/psi4/psi4/pull/442,1,['rewrite'],['rewrite']
Modifiability,CMake was set to look for 4.30 with this syntax: `find_package(Libxc 4.3.0 CONFIG QUIET)`. It *should* rebuild correctly now.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619567599:75,CONFIG,CONFIG,75,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619567599,1,['CONFIG'],['CONFIG']
Modifiability,CMakeLists.txt`; - [ ] 34. optking/dlpc: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 35. optking/dlpc: missing docs comment. `vi optking/dlpc/input.dat`; - [ ] 36. optking/dlpc: missing CMakeLists. `vi optking/dlpc/CMakeLists.txt`; - [ ] 37. optking/h2o: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 38. optking/h2o: missing docs comment. `vi optking/h2o/input.dat`; - [ ] 39. optking/h2o: missing CMakeLists. `vi optking/h2o/CMakeLists.txt`; - [ ] 40. optking/h2os: missing cmake directory registration. `vi optking/CMakeLists.txt`; - [ ] 41. optking/h2os: missing docs comment. `vi optking/h2os/input.dat`; - [ ] 42. optking/h2os: missing CMakeLists. `vi optking/h2os/CMakeLists.txt`; - [ ] 43. plugins/skeleton: missing docs comment. `vi plugins/skeleton/input.dat`; - [ ] 44. plugins/skeleton: missing ctest registration. `vi plugins/skeleton/CMakeLists.txt`; - [ ] 45. plugins/skeletonaointegrals: missing docs comment. `vi plugins/skeletonaointegrals/input.dat`; - [ ] 46. plugins/skeletonaointegrals: missing ctest registration. `vi plugins/skeletonaointegrals/CMakeLists.txt`; - [ ] 47. plugins/skeletondfmp2: missing docs comment. `vi plugins/skeletondfmp2/input.dat`; - [ ] 48. plugins/skeletondfmp2: missing ctest registration. `vi plugins/skeletondfmp2/CMakeLists.txt`; - [ ] 49. plugins/skeletonmointegrals: missing docs comment. `vi plugins/skeletonmointegrals/input.dat`; - [ ] 50. plugins/skeletonmointegrals: missing ctest registration. `vi plugins/skeletonmointegrals/CMakeLists.txt`; - [ ] 51. plugins/skeletonscf: missing docs comment. `vi plugins/skeletonscf/input.dat`; - [ ] 52. plugins/skeletonscf: missing ctest registration. `vi plugins/skeletonscf/CMakeLists.txt`; - [ ] 53. plugins/skeletonsointegrals: missing docs comment. `vi plugins/skeletonsointegrals/input.dat`; - [ ] 54. plugins/skeletonsointegrals: missing ctest registration. `vi plugins/skeletonsointegrals/CMakeLists.txt`; - [ ] 55. plugins/skeletonwavef,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555:4468,plugin,plugins,4468,https://psicode.org,https://github.com/psi4/psi4/issues/2555,1,['plugin'],['plugins']
Modifiability,CUBEPROP: Compute adaptive isocontour range for cube files,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/864:18,adapt,adaptive,18,https://psicode.org,https://github.com/psi4/psi4/pull/864,1,['adapt'],['adaptive']
Modifiability,"Can confirm `qcengine` uses the number of physical cores on a machine by default, as seen [here](https://github.com/MolSSI/QCEngine/blob/c171e80c51afc5bc08ac8a84971b526fd33671d3/qcengine/config.py#L43-L46). Running psi4 with `8` threads (I have 8 logical CPU cores) produces similar performance:. ```sh; time qcengine run psi4 caffeine.json > qcng_out.json ; qcengine run psi4 caffeine.json > qcng_out.json 45.94s user 1.78s system 578% cpu 8.249 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 67.32s user 1.73s system 680% cpu 10.142 total; time psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json ; psi4 -n 8 --qcschema -i caffeine.json -o psi4_out.json 53.52s user 1.06s system 701% cpu 7.781 total; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475:187,config,config,187,https://psicode.org,https://github.com/psi4/psi4/issues/2600#issuecomment-1152555475,1,['config'],['config']
Modifiability,"Can try some of [these solutions](https://stackoverflow.com/questions/19345930/cmake-lost-in-the-concept-of-global-variables-and-parent-scope-or-add-subdirec), but probably not worth it. I wonder if there's a psi4 call that can return Libint's AM (thinking ahead to pytest `@using_am_atleast_6`)? My checkmark still stands as-is.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409#issuecomment-445009245:115,variab,variables-and-parent-scope-or-add-subdirec,115,https://psicode.org,https://github.com/psi4/psi4/pull/1409#issuecomment-445009245,1,['variab'],['variables-and-parent-scope-or-add-subdirec']
Modifiability,Can we create a portable Mac binary for binary distribution?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/49:16,portab,portable,16,https://psicode.org,https://github.com/psi4/psi4/issues/49,1,['portab'],['portable']
Modifiability,"Can you elaborate on the first sentence? I understand that globals are bad for code writing (you have to worry about interference from parts of the code you don't even know about) and maintainability (it's much harder to find what changed a variable value in debugging). I do not understand what globals have to do with QCDB, QCSchema, or to quote #883, ""complex Psi4 runs involving multiple computations.""",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-441833991:184,maintainab,maintainability,184,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-441833991,2,"['maintainab', 'variab']","['maintainability', 'variable']"
Modifiability,Carried forward from [forum post](http://forum.psicode.org/t/calculating-transition-and-state-density-matrices-and-dipole-moment-matrices/1784). The API to get transition density matrix elements out of a `detci` computation currently fails unless the first state is zero. This is [not expected behavior](https://github.com/psi4/psi4/issues/1638#issuecomment-489080431). Doing `grep` for a minute leads me to think the culprit is [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/detci/opdm.cc#L113-L117). This looks like an extremely easy fix: just loop over another variable to change the first element in the tuple as well. Can a developer more experienced in the ways of `detci` (probably @dgasmith) confirm this?,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1890:586,variab,variable,586,https://psicode.org,https://github.com/psi4/psi4/issues/1890,1,['variab'],['variable']
Modifiability,"Certainly. Polluted might have been too harsh, cluttered may be a more appropriate word for it. All variables are currently declared at the beginning of the function. Depending on the type of sort requested, some of them may never be initialized/used, but because they are declared at the top they are always visible and mutable inside the switch cases, loops, etc. This makes debugging more challenging than it has to be, as it is not possible to tell at a glance which of the variables with suspicious (negative or power-of-two) values are just uninitialized, as seen in the stack trace in https://github.com/psi4/psi4/issues/2261#issuecomment-1227164277 . In general variables should enter scope when they are needed and go out of scope when they are no longer required, and be `const` if they are never modified.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370:100,variab,variables,100,https://psicode.org,https://github.com/psi4/psi4/pull/2717#issuecomment-1243470370,3,['variab'],['variables']
Modifiability,Change TDSCF Variable Names,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2462:13,Variab,Variable,13,https://psicode.org,https://github.com/psi4/psi4/pull/2462,1,['Variab'],['Variable']
Modifiability,"Classes are hidden by default because when we expose a class as `PSI_API`, changing that class affects plugin developers, so we need to add warnings before we actually make the changes. And that takes time. So we can expose a class if it's useful, but we're not going to expose a class by default. Could you elaborate on what your usecase is for this particular class? Before exposing the class, I'd like to make sure you really do need this class instead of something else in the `libmints` machinery. I believe that some pieces moved around during our recent upgrade to libint2.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214:103,plugin,plugin,103,https://psicode.org,https://github.com/psi4/psi4/issues/2239#issuecomment-876569214,1,['plugin'],['plugin']
Modifiability,Clean manager.cc Variables: OCC's Open-Heart Surgery II,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785:17,Variab,Variables,17,https://psicode.org,https://github.com/psi4/psi4/pull/1785,1,['Variab'],['Variables']
Modifiability,"Closed by 649401c066ca7a871ba623a9ee3b9909c85ee730 . This is an incomplete fix because it catches only psi4 headers. Properly, psi4 dependency and add-on headers (e.g., Boost and Ambit) when built internally through `ExternalProject_Add` should also be installed alongside to be accessed by plugins. But that problem will be resolved in @ryanmrichard's revamped build system, and since, in the meantime, (1) conda binary plugins _can_ access all needed headers (since I have more control there) and (2) now compile+install plugins can at least access basis headers, I'm closing this out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-227006245:291,plugin,plugins,291,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-227006245,3,['plugin'],['plugins']
Modifiability,"Closes #1482; DCT gradients are now compatible with ROHF starting orbitals. The problem was that UDCT wavefunctions inherited the `same_a_b_orbs_` of the reference wavefunction, which was wrong for ROHF references. This caused the derivative machinery to try to try an RDCT gradient, which failed for obvious reasons. While I was changing features inherited from the reference wavefunction, I gave DCT ""wavefunctions"" proper names. ## Checklist; - [x] [All DCT tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) and verified this fixes the original issue. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1487:116,inherit,inherited,116,https://psicode.org,https://github.com/psi4/psi4/pull/1487,2,['inherit'],['inherited']
Modifiability,Compile plugins without access to source directory,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/174:8,plugin,plugins,8,https://psicode.org,https://github.com/psi4/psi4/pull/174,1,['plugin'],['plugins']
Modifiability,Compiling Psi4 I got this error:; .; .; .; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/nao.cc.o; [ 60%] Building CXX object src/lib/libchkpt/CMakeFiles/chkpt.dir/am2canon_shell_order.cc.o; [ 60%] Linking CXX static library ../../../lib/libchkpt.a; [ 60%] Built target chkpt; Scanning dependencies of target cubeprop; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/csg.cc.o; [ 60%] Building CXX object src/lib/libcubeprop/CMakeFiles/cubeprop.dir/cubeprop.cc.o; [ 60%] Linking CXX static library ../../../lib/libcubeprop.a; [ 60%] Built target cubeprop; Scanning dependencies of target git_update; fatal: Not a git repository (or any of the parent directories): .git; make[2]: **\* [src/lib/libpsipcm/CMakeFiles/git_update] Error 128; make[1]: **\* [src/lib/libpsipcm/CMakeFiles/git_update.dir/all] Error 2; make: **\* [all] Error 2. ---. The git and cmake version from macports is 2.5.3 and 3.3.3 respectively. I used the setup command:; ./setup --plugins --fc gfortran-mp-4.8 --accelerate objdir. I was wondering if you can provide me some input to solve the problem. Thank you.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/183:992,plugin,plugins,992,https://psicode.org,https://github.com/psi4/psi4/issues/183,1,['plugin'],['plugins']
Modifiability,Compiling plugins without source,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162:10,plugin,plugins,10,https://psicode.org,https://github.com/psi4/psi4/issues/162,1,['plugin'],['plugins']
Modifiability,"Configuring my psi4 I get the warning message. WARNING: Target ""psi4so"" has EXCLUDE_FROM_ALL set and will not be built by default but an install rule has been provided for it. CMake does not define behavior for this case. Looks like the install command for the psi4so target should be within an if clause checking if it's built or not.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/415:0,Config,Configuring,0,https://psicode.org,https://github.com/psi4/psi4/issues/415,1,['Config'],['Configuring']
Modifiability,"Cool, glad to see these updates. Thanks for pinging me about the naming. I don't have a strong preference for POL vs IND. I suppose being; consistent with IND is a good thing. Does it make sense to alias these; variables so either version works? Might be less confusing for people; consulting the EFP docs. I don't really like EFP_AI_XXX. I do like pre-pending with EFP so that all; EFP keywords start with that. But AI connotes Artificial Intelligence more; easily than ab initio, which I assume it's supposed to mean. I think I; like QM better. (EFP_QM_XXX). This makes sense in a QM/MM context, which; this basically is (EFP being a very advanced MM method). Additionally, I'm not sure the docs are not totally clear... I'm not; totally sure what this means:. /*- Do include polarization energy term in EFP computation? (QMEFP_POL c.; v1.1) -*/. Is this the polarization of the EFP by the QM region, or the polarization; of the QM region by the EFP?. On Tue, May 1, 2018 at 10:38 AM, Lori A. Burns <notifications@github.com>; wrote:. > @CDSherrill <https://github.com/CDSherrill>, you might want the; > opportunity to weigh in on this commit; > <https://github.com/psi4/psi4/pull/993/commits/609a84f64a50e5dee8728fcaa9a19cfaebffb4c2>,; > as it involves keyword names for EFP and our compromise between SAPT-like; > and libefp-like. Please see top post of PR for discussion.; >; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/pull/993#issuecomment-385686547>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AC9QdlhxccTVCdSWeK_EOxZgrE6MEQvnks5tuHNogaJpZM4TsPv1>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/993#issuecomment-385707749:211,variab,variables,211,https://psicode.org,https://github.com/psi4/psi4/pull/993#issuecomment-385707749,1,['variab'],['variables']
Modifiability,Correlated Derivative Refactor: Planning,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1736:22,Refactor,Refactor,22,https://psicode.org,https://github.com/psi4/psi4/issues/1736,1,['Refactor'],['Refactor']
Modifiability,"Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. The other option might be to use `pkg-config` and check the `Libs.private` (I guess):. ```; grep ^Libs /usr/lib/x86_64-linux-gnu/pkgconfig/lapack-openblas.pc; Libs: -L${libdir} -llapack; Libs.private: -L${libdir} -llapack -lgfortran -lpthread -lm; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865:20,config,configure-time,20,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455864865,2,['config'],"['config', 'configure-time']"
Modifiability,Coupled Cluster Rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:16,Rewrite,Rewrite,16,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['Rewrite'],['Rewrite']
Modifiability,Created variable and method for storing and retrieving the gradients …,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3087:8,variab,variable,8,https://psicode.org,https://github.com/psi4/psi4/pull/3087,1,['variab'],['variable']
Modifiability,"Creating a conda environment with `psi4-dev` makes it really easy to get a source build going, which is great. But I have noticed that conda adds some questionable compiler flags to the following environmental variables:. ```; echo $CFLAGS; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CFLAGS_USED; -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CXXFLAGS_USED; -fvisibility-inlines-hidden -std=c++17 -fmessage-length=0 -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $CPPFLAGS_USED; -DNDEBUG -D_FORTIFY_SOURCE=2 -O2 -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FFLAGS_USED; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; echo $FORTRANFLAGS; -fopenmp -march=nocona -mtune=haswell -ftree-vectorize -fPIC -fstack-protector-strong -fno-plt -O2 -ffunction-sections -pipe -isystem /home/gytibor/.conda/envs/psi4gcc/include; ```; Of particular concern, are the `-fstack-protector-strong` and `-D_FORTIFY_SOURCE=2` flags. Do release builds need runtim",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416:210,variab,variables,210,https://psicode.org,https://github.com/psi4/psi4/issues/2416,1,['variab'],['variables']
Modifiability,"Currently only SAPT(DFT) goes through `sapt_jk_terms.py`. I kind of hope that we can move more of the SAPT0 code over to something similar with Disp staying fully C++. We are going to gain a lot of SAPT0 capabilities soon like spin-flip SAPT, Sinf Exch-Ind and Exch-Disp, regularized SAPT, ISA Exch etc and the Python level interface should make it easier to handle without performance degradation. I think the proposed would work fine. You can use either of the following:; ```python; >>> psi4.core.get_variables() # Returns a dict of all variables; >>> psi4.core.has_variable(""CURRENT DIPOLE X"") # Returns a bool checking if the variable is set; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364689483:540,variab,variables,540,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364689483,2,['variab'],"['variable', 'variables']"
Modifiability,"Currently works inside rhf only. ## Description; Improves wall clock time of range separated DFT calculations by storing range separated and regular HF integrals together. ## Todos; Notable points (developer or user-interest) that this PR has or will accomplish.; - [x] Improves integral calculation and storage strategies inside `DFHelper`; - [x] Makes changes to the `driver` , `libscf_solver`, and the `jk` base class to set the necessary parameters.; - [ ] Intelligent use of tensors to calculate J to save memory; - [ ] Create a class inside libmints to return the desired integrals; - [ ] Extend this functionality to DiskDFJK. ## Questions; - [ ] Question1. ## Checklist; - [ ] Tests added for any new features; - [ ] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [ ] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1832:595,Extend,Extend,595,https://psicode.org,https://github.com/psi4/psi4/pull/1832,1,['Extend'],['Extend']
Modifiability,"Currently, PCM settings can not be set via QCEngine using the schema interface, passing a task like this from QCEngine results in an error ; ```python; {'schema_name': 'qcschema_input',; 'schema_version': 1,; 'molecule': Molecule(name='H2O', formula='H2O', hash='941bd29'),; 'driver': 'energy',; 'model': {'method': 'SCF', 'basis': 'sto-3g'},; 'protocols': {'wavefunction': 'orbitals_and_eigenvalues'},; 'keywords': {'scf_type': 'df',; 'pcm_scf_type': 'total',; 'pcm': {'Units': 'Angstrom',; 'Medium': {'SolverType': 'IEFPCM', 'Solvent': 'Water'},; 'Cavity': {'RadiiSet': 'UFF',; 'Type': 'GePol',; 'Scaling': False,; 'Area': 0.3,; 'Mode': 'Implicit'}}}}; ```; as it tries to pass the dictionary of settings to the `core.set_global` function. . Extending the `set_options` function [here](https://github.com/psi4/psi4/blob/5de566ed7d4bf51816c673c4ea1def449e4e8618/psi4/driver/p4util/python_helpers.py#L423) to handle the `pcm` keyword should fix this issue. tagging @loriab following the slack discussion.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1986:744,Extend,Extending,744,https://psicode.org,https://github.com/psi4/psi4/issues/1986,1,['Extend'],['Extending']
Modifiability,"DFT overhaul, ECPs, SAPT(DFT), EP2, performance enhancements",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698:48,enhance,enhancements,48,https://psicode.org,https://github.com/psi4/psi4/pull/698,1,['enhance'],['enhancements']
Modifiability,"DISP ENERGY"": -0.26658499, #TEST; > ""CURRENT ENERGY"": -0.01126250} #TEST; > ; > Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; > ""SAPT EXCH ENERGY"": 0.36569812, #TEST; > ""SAPT IND ENERGY"": -0.00840370, #TEST; > ""SAPT DISP ENERGY"": -0.26605283, #TEST; > ""CURRENT ENERGY"": -0.01073034} #TEST; > ; > molecule dimer {; > Ne; > --; > Ar 1 6.5; > units bohr; > }; > ; > set {; > basis aug-cc-pvdz; > scf_type df; > sapt_dft_grac_shift_a 0.203293; > sapt_dft_grac_shift_b 0.138264; > }; > ; > # No hybrid kernel & no exch-disp scaling & no deltaHF; > set SAPT_DFT_DO_DHF False; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; > ref = (v - DHF) / 1000.0; > else:; > ref = v / 1000.0; > compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST; > ; > # No hybrid kernel & no exch-disp scaling; > set SAPT_DFT_DO_DHF True; > set SAPT_DFT_DO_HYBRID False; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_nh.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (DISP); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_disp.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST; > ; > # Hybrid kernel & exch-disp scaling (FIXED); > set SAPT_DFT_DO_HYBRID True; > set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; > set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; > energy('sapt(dft)', molecule=dimer); > for k, v in Eref_h_fixed.items(): #TEST; > compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST; > ```; > ; > * I think it should be clear from the output file what exch-disp scheme/scale is applied. So perhaps add a couple lines to t",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967:2284,variab,variable,2284,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1284653967,1,['variab'],['variable']
Modifiability,"DMRG is also going to be complicated, because it doesn't have a proper wavefunction. I needed to fix that for libtrans refactor anyways, so I'll add this to my list. My other Psi projects are on pause until 1.5 anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2256#issuecomment-884270779:119,refactor,refactor,119,https://psicode.org,https://github.com/psi4/psi4/issues/2256#issuecomment-884270779,1,['refactor'],['refactor']
Modifiability,"Dear David,. It's psi4 beta 5, and I don't have a .psi4rc file. I use Ubuntu 14.04.1 LTS, have compiled psi4 with the intel compiler, with MKL, with boost from the debian package repository, and with the plugin option on. For the rest I didn't set any options. Best regards,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/66#issuecomment-73074811:204,plugin,plugin,204,https://psicode.org,https://github.com/psi4/psi4/issues/66#issuecomment-73074811,1,['plugin'],['plugin']
Modifiability,"Dear PSI4 developers. I use psi4 MOLDEN output (along with ORCA, QCHEM, etc.) as input for CASINO QMC program https://vallico.net/casinoqmc/ . For very simple system as Be, B, C atoms well proven that if we add 2s->2p excitation to the ground state than we improve wfn quality. PSI4, ORCA and other code gives me MOLDEN orbitals and coefficients for most important determinants. I can take it and check with CASINO QMC if energy of this multi-determinant configuration is the same as in conventional QMC codes. For the B output from Psi4 it isn't so.; Psi4 determinant coeffs is; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX.; ```. but should be (as in the ORCA and other programs):; ```; The 20 most important determinants:. * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 -0.165709 ( 4, 3) 3AA 5AX.; * 3 -0.165709 ( 2, 2) 3AA 4AX.; ```; And if I change sign by hand in PSI4 output i get right energy in CASINO QMC for this multi-determinant configuration, same as PAS4 Total MCSCF energy. Can You check whether the signs of coefficients are correct. Best, Vladimir. PS Git: Rev {HEAD} add49b9. PPS; ```; memory 2 Gb. molecule b {; 0 2; symmetry c1; B 0.000000000000 0.000000000000 0.000000000000; }. set {; basis cc-pVQZ; reference rohf; restricted_docc [ 1 ]; active [ 4 ]; }. cas_e, cas_wfn = energy('casscf', return_wfn=True); molden(cas_wfn, 'molden.dat'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796:455,config,configuration,455,https://psicode.org,https://github.com/psi4/psi4/issues/796,2,['config'],['configuration']
Modifiability,"Dear Psi4 Developers,. Could you add an option for doing finite temperature DFT?. I find that there already exists an option for allowing fractional occupation number (FON) to accelerate SCF, so it should be handy to extend it to finite temperature DFT by allowing FON for the converged wavefunction. Specifically, the FONs with Fermi-Dirac distribution smearing Gaussian smearing are most commonly used. Reference: Springborg, Michael, R. C. Albers, and Karla Schmidt. “Fractional occupancies and temperature in electronic-structure calculations.” Physical Review B 57, no. 3 (1998): 1427.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646:217,extend,extend,217,https://psicode.org,https://github.com/psi4/psi4/issues/1646,1,['extend'],['extend']
Modifiability,"Dear Sebastian, . I really appreciate your hints and helps, but i have to say that after some days of intense testing and checking, it seems to me that unfortunately DMRG is difficult to apply on large molecules (400 atoms) unless full 2-electron integral calculation is avoided. Furthermore i observe that CHEMPS2 becomes very slow once you choose a better basis set (cc-pvtz vs cc-pvdz) . ""The cost reduction is achieved by not performing the total O(n^5) two-electron integral rotation."". How can i achieve this ? By following those hints in your previous answers ? ; I think, avoiding two-electron integral rotations is some thing which should be done in PSI4 rather than in the fcidump plugin modification. Best wishes; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105440640:691,plugin,plugin,691,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105440640,1,['plugin'],['plugin']
Modifiability,"Dear Sebastian, ; I think that the problem is rather related to PSI4 than dmrg. Just look at the example you provided for water molecule :. ```; Number of atoms: 3; Number of AO shells: 9; Number of SO shells: 7; Number of primitives: 22; Number of atomic orbitals: 13; Number of basis functions: 13. Number of irreps: 4; Integral cutoff 0.00e+00; Number of functions per irrep: [ 7 0 4 2 ]; ```. OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; stored in file 35. ```; Computing two-electron integrals...done; Computed 1270 non-zero two-electron integrals.; Stored in file 33.; ```. Calling plugin fcidump.so.; Presorting SO-basis two-electron integrals.; Sorting File: SO Ints (nn|nn) nbuckets = 1; Transforming the one-electron integrals and constructing Fock matrices; Starting first half-transformation.; Sorting half-transformed integrals.; First half integral transformation complete.; Starting second half-transformation.; Two-electron integral transformation complete. ## Created the file H2O.631G.FCIDUMP. As you see a full 2- electron integral calculation is performed for ALL basis functions (13) and stored, just BEFORE fcidump starts with dumping !!!; I would like to circumvent this heavy calculation for the case of larger molecules as i am only interested in HOMO-LUMO region. Any way i try your advice but may i know at which line of fcidump.cc i have to copy and paste ; 781-811 and 814-858 lines of dmrgscf.cc ?. Furthermore may i know what is the x matrix : ""Number of variables in the x-matrix = 1032""; and what is nbuckets in : "" SO Ints (nn|nn) nbuckets = 78"". ALL THE BEST; LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105341330:614,plugin,plugin,614,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105341330,2,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"Dear Sebastian, ; Thanks a lot for the detailed answer, but the problem with the FCIDUMP file is that i have no idea; how to tell PSI4 to give the final FCIDUMP after the HF calculation for a desired active space, as i see from the test examples provided in CHEMPS2 , it gives automatically a FCIDUMP for 28 orbitals and all 14 electrons of N2 molecule, but i would like to take into account only 8 electrons in 8 orbitals, for instance. . How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html ; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?. This is for example done in molpro by :; {fci,core, 18,occ, 24; dump; }; But unfortunately in molpro it performs a full 2 electron calculation for all basis functions before giving the fcidump, some thing that i would like very much to avoid. . Bests; Luca",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105182036:511,plugin,plugin,511,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105182036,1,['plugin'],['plugin']
Modifiability,"Dear all, . I added a new plugin into PSI4 (the newest psi-master code from github) (dmrgscf plugin), but ; when running psi4 on the input.dat file, i obtain the following error :; ## symbol lookup error: /home/luca/psi-master/psi4public/plugins/mypsi4plugins/dmrgscf/dmrgscf.so: undefined symbol: _ZN7CheMPS26Irreps12getGroupNameEi; ## my input file is :. molecule O2 {; O 0.0 0.0 0.0; O 0.0 0.0 3.0 ; units au; }. plugin_load(""/home/luca/psi-master/psi4public/plugins/mypsi4plugins/dmrgscf/dmrgscf.so""). set basis cc-pVDZ; set reference rhf. set dmrgscf wfn_irrep 0; set dmrgscf wfn_multp 1; set dmrgscf frozen_docc [ 1 , 0 , 0 , 0 , 0 , 1 , 0 , 0 ]; set dmrgscf active [ 2 , 0 , 2 , 2 , 0 , 2 , 2 , 2 ]. set dmrgscf dmrg_states [ 500, 1000, 1000 ]; set dmrgscf dmrg_econv [ 1e-10, 1e-10, 1e-10 ]; set dmrgscf dmrg_maxsweeps [ 5, 5, 10 ]; set dmrgscf dmrg_noiseprefactors [ 0.05, 0.05, 0.0 ]; set dmrgscf dmrg_print_corr false; set dmrgscf mps_chkpt false. set dmrgscf dmrgscf_convergence 1e-6; set dmrgscf dmrgscf_store_unit true; set dmrgscf dmrgscf_do_diis true; set dmrgscf dmrgscf_diis_branch 1e-2; set dmrgscf dmrgscf_store_diis true. set dmrgscf dmrgscf_max_iter 100; set dmrgscf dmrgscf_which_root 2 # First excited state; set dmrgscf dmrgscf_state_avg true; set dmrgscf dmrgscf_active_space NO # INPUT; NO; LOC; set dmrgscf dmrgscf_loc_random false. scf(). plugin(""dmrgscf.so""). ---. Best wishes; LUCA",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/96:26,plugin,plugin,26,https://psicode.org,https://github.com/psi4/psi4/issues/96,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"Dear all,. I have built the latest version of psi4 with plugins:. ```; BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; ```. and can create new plugins and compile them. However, the old examples, typically in the folder. ```; /path/to/source/psi4/objects/plugins/; ```. are not generated anymore. I don't know if this was intentional?. Best regards,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78:56,plugin,plugins,56,https://psicode.org,https://github.com/psi4/psi4/issues/78,3,['plugin'],['plugins']
Modifiability,"Dear all,. I just made a clone of the psi4public. However, I got the error message ""Cannot find source file sapt_dft.cc"" when trying to compile psi4 (in a directory ""psi4public/build"") by either ""../configure.cmake"" or ""cmake .."". Is it a bug in psi4? Thank you. Cheers; Gao",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55:199,config,configure,199,https://psicode.org,https://github.com/psi4/psi4/issues/55,1,['config'],['configure']
Modifiability,"Dear all,. Previously - when outfile was a ""FILE *"" - I redirected my output stream to psi4's stream as follows:. ```; ** stuff in plugin **. std::ofstream psi4outfile;; std::streambuf * cout_buffer;; if ( outfile_name != ""stdout"" ){; fclose(myoutfile);; myoutfile = NULL;; psi4outfile.open( outfile_name.c_str() , ios::app ); // append; cout_buffer = cout.rdbuf( psi4outfile.rdbuf() );; }. ** stuff in my code **. if ( outfile_name != ""stdout"" ){; cout.rdbuf(cout_buffer);; psi4outfile.close();; myoutfile = fopen(outfile_name.c_str(), ""a"");; if (myoutfile == NULL){; throw PSIEXCEPTION(""PSI4: Unable to reopen output file."");; }; }. ** stuff in plugin **; ```. The original plugins can be found here:; https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc; https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc. Which way would you prefer to redirect C++'s cout to the psi4 outfile now?. Thank you!; Best,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77:131,plugin,plugin,131,https://psicode.org,https://github.com/psi4/psi4/issues/77,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Dear all,. ```; I tried to install the latest PSI4 on my PC, whose operating system is Fedora 14. I have passed the steps ""./configure --with-opt=-O2"" and ""make"" successfully according to PSI4's manual. However, I met a trouble in ""make tests"". One of the error report is pasted below:; ```. ---. echo ""Testing omp2_5-grad1...""; Testing omp2_5-grad1...; make -C omp2_5-grad1; true; make[2]: Entering directory `/usr/local/src/psi4/objdir/tests/omp2_5-grad1'; PSIO_ERROR: unit = 32, errval = 5; PSIO_ERROR: 5 (file not open or open call failed); Traceback (most recent call last):; File ""<string>"", line 38, in <module>; File ""/usr/local/src/psi4/lib/python/driver.py"", line 671, in gradient; procedures['gradient'][lowername](lowername, **kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 459, in run_omp2_5_gradient; run_omp2_5(name, *_kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 440, in run_omp2_5; scf_helper(name, *_kwargs); File ""/usr/local/src/psi4/lib/python/proc.py"", line 757, in scf_helper; e_scf = psi4.scf(precallback, postcallback); RuntimeError: PSIO Error; file: /usr/local/src/psi4/src/lib/libpsio/error.cc; line: 116P; make[2]: **\* [omp2_5-grad1.passed] Error 1; ## make[2]: Leaving directory `/usr/local/src/psi4/objdir/tests/omp2_5-grad1'. There are also many other error report which are similar to this. I am wondering what cause these errors and how can I fix them. Can you help me to install PSI4 successfully? . Looking forward to any comments and suggestions! Many thanks!. Best Regards; Xin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56:125,config,configure,125,https://psicode.org,https://github.com/psi4/psi4/issues/56,1,['config'],['configure']
Modifiability,"Dear developers,. I am currently running SA-CASSCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.2911",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:420,variab,variables,420,https://psicode.org,https://github.com/psi4/psi4/issues/2008,2,['variab'],['variables']
Modifiability,Density Screening Refactor Part 1: test_erisieve.py Rework,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547:18,Refactor,Refactor,18,https://psicode.org,https://github.com/psi4/psi4/pull/2547,1,['Refactor'],['Refactor']
Modifiability,Density Screening Refactor Part 2: Implementation of shell_significant(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2695:18,Refactor,Refactor,18,https://psicode.org,https://github.com/psi4/psi4/pull/2695,1,['Refactor'],['Refactor']
Modifiability,"Details about how the integrals were computed should be the province of the JK object, not the HF wavefunction, so I disagree with creating this new variable as described. Can we instead have `computed_shells_per_iter_` on the JK object and query the JK object, after the HF, for test purposes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1112143902:149,variab,variable,149,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1112143902,1,['variab'],['variable']
Modifiability,"Diagnosis: simint is sly (or, you can't defeat the header search). Completely fresh build dir, configured from the start to build simint locally with sse (`-DCMAKE_DISABLE_FIND_PACKAGE_simint=ON -DSIMINT_VECTOR=sse`). Consequently every signal in sight (see below) is set to local build and sse. _But_, there's still a simint installed alongside libint, etc. and that simint is avxfma. And it is those simint headers that show up in `./psi4-core-prefix/src/psi4-core-build/src/psi4/libmints/CMakeFiles/mints.dir/CXX.includecache` and are presumably defining SIMINT_AVX and thus triggering the offending `intrinsics_avx.h` inclusion. In the end, the same trouble as with multiple pybind11's – CMake can't trump native C++ header-seeking, so one has to keep any interferences out of sight. Resolved, sorry for the wild goose chase. ```; #pragma once; #define SIMINT_SSE; ```. ```; >>> grep -ir simint_VECTOR .; ./CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/CMakeFiles/simint_external.dir/build.make:	cd /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build && /Users/loriab/linux/miniconda3/envs/p4dev36/bin/cmake -DCMAKE_INSTALL_PREFIX=/usr/local/psi4 -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=/usr/bin/clang -DCMAKE_CXX_COMPILER=/usr/bin/clang++ -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_INCLUDEDIR=include -DBUILD_SHARED_LIBS=OFF -DCMAKE_POSITION_INDEPENDENT_CODE=ON -DSIMINT_STANDALONE=OFF -DENABLE_TESTS=OFF -DSIMINT_VECTOR=sse -DSIMINT_MAXAM=6 -C/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/tmp/simint_external-cache-Release.cmake ""-GUnix Makefiles"" /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/CMakeCache.txt:SIMINT_VECTOR:STRING=sse; ./external/upstream/simint/simint_external-prefix/src/simint_external-build/simi",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356840364:95,config,configured,95,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356840364,1,['config'],['configured']
Modifiability,"Did plugin makefile writing ever work upon testing (https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/psi4/src/bin/psi4_main/create_new_plugin.cc#L137-L141)? I'm getting the below in the Makefile from a `psi4 --new-plugin`. I'll fix it, just trying to determine if it's a little fix or a ditch-templating-for-python-sooner-rather-than-later fix. ```; # Flags that were used to compile Psi4.; CXX = PLUGIN_CXX; CXXDEFS = PLUGIN_DEFINES; CXXFLAGS = PLUGIN_FLAGS; LDFLAGS = PLUGIN_LDFLAGS; INCLUDES = PLUGIN_INCLUDES; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235478566:4,plugin,plugin,4,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235478566,2,['plugin'],['plugin']
Modifiability,"Disclaimer that I have a PR that _also_ rewrites orbital reading/writing to use wavefunction serialization. My PR will be part of a larger change of the orbital reading tech to account for loss of symmetry (which also involves accounting for axis permutations), so I'm fine with putting the wavefunction serialization change in a non-feature PR. If it matters, my code is passing intense field tests, but I'd rather not make the PR until I have the bugs ironed out. I know for sure that one bug is due to a libmints bug that @jturney is investigating. My guess is that is the last bug, but famous last words.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1446#issuecomment-449607046:40,rewrite,rewrites,40,https://psicode.org,https://github.com/psi4/psi4/pull/1446#issuecomment-449607046,1,['rewrite'],['rewrites']
Modifiability,"Do you want me to fix it up, or do you want to give it a try? The below should do the trick. ```; # on master; git checkout -b moldennormco; # last commit should be ""Fix typo in doc and specify non-mass-weighted/normalized normal modes""; git pull --rebase upstream master; # last commit should be ""Fix typo ..."" and ; # first non-you commit should be ""Merge pull request #641 "" with hash 0c08 ; # (from https://github.com/psi4/psi4/commits/master); git push origin moldennormco:master; # fails because you're trying to rewrite published history; git push -f origin moldennormco:master; # success; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286614076:519,rewrite,rewrite,519,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286614076,1,['rewrite'],['rewrite']
Modifiability,Docs : class inheritance diagrams are broken,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/792:13,inherit,inheritance,13,https://psicode.org,https://github.com/psi4/psi4/issues/792,1,['inherit'],['inheritance']
Modifiability,Document Makefile for plugin from binary,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/366:22,plugin,plugin,22,https://psicode.org,https://github.com/psi4/psi4/pull/366,1,['plugin'],['plugin']
Modifiability,"Does `/home/jacobson/bin/psi4_wb97xd3_def2tzvp.py` contain a `qcng.compute()` call? May I see that file?. I don't run much through queues, so I don't have a feel for what qcng/config.py can/should pick up from the environment or host setup.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100248399:176,config,config,176,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100248399,1,['config'],['config']
Modifiability,Don't build ambit plugin if it's not found.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436:18,plugin,plugin,18,https://psicode.org,https://github.com/psi4/psi4/pull/436,1,['plugin'],['plugin']
Modifiability,"Drat, didn't think about `MAXNODE` differences btwn repos, and it only shows up `MAX_AM_ERI` >=7. Anyone ever need to reset it higher than the psi4 settings? If so, I can make it configurable. ```; # psi4/libint; /libint/src/libint_compiler/emit_order.c:#define MAXNODE 20000; /libint/src/libderiv_compiler/emit_deriv12_managers.c:#define MAXNODE 20000; /libint/src/libderiv_compiler/emit_deriv1_managers.c:#define MAXNODE 20000; ```. ```; # evaleev/libint; /libint/src/bin/libint/emit_order.c:#define MAXNODE 20000; /libint/src/bin/libderiv/emit_deriv12_managers.c:#define MAXNODE 10000; /libint/src/bin/libderiv/emit_deriv1_managers.c:#define MAXNODE 5000; /libint/src/bin/libr12/emit_gr_order.c:#define MAXNODE 3000; /libint/src/bin/libr12/emit_grt_order.c:#define MAXNODE 20000; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300271087:179,config,configurable,179,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300271087,1,['config'],['configurable']
Modifiability,"Due to a lull in impending c-side changes, we’d like to take the opportunity to auto-format the c-side codebase according to [the existing clang-format file](https://github.com/psi4/psi4/blob/master/.clang-format). You (and we, reviewing and merging) have until Friday, 24 Aug to get code submitted for review/merged. After that, we will be making per-module PRs of formatted changes. None of these will be merged until Wed, 29 Aug. You have until then to indicate (on the PR) that this will interrupt your development. If that happens, the PR can be closed and postponed to accommodate you. Unchallenged PRs will be merged over the week. Modules to be skipped include occ/dfocc/findif/optking/interface_dmrg because of outstanding PRs, imminent demise, or need to compare easily with upstream plugin. - [x] adc #1152; - [x] ambit_interface #1172 ; - [x] ccdensity -- delay to 29 Aug #1202; - [x] ccenergy -- delay to 29 Aug #1203; - [x] cceom #1204; - [x] cchbar #1205; - [x] cclambda -- delay to 29 Aug #1206; - [x] ccresponse #1207; - [x] cctransort #1208; - [x] cctriples -- ~delay to 29 Aug (wait for #1199) #1209~ #1252 ; - [x] dcft #1154; - [x] detci #1155; - [x] dfep2 #1157 ; - [x] dfmp2 #1159; - [x] dfocc -- mostly done in #797, touch-ups in #1392; - [x] dmrg -- turning off formatting so can diff with plugin in CheMPS2 repo #1392; - ~findif~; - [x] fisapt #1175; - [x] fnocc #1158; - [x] gdma_interface #1166; - [x] lib3index ~#1169 (wait for #1200)~ #1389; - [x] libciomr #1173; - [x] libcubeprop -- delay to 29 Aug (wait for #1138) #1210 ; - [x] libdiis #1167; - [x] libdisp #1168; - [x] libdpd -- ~delay to 29 Aug (wait for #1199) #1211~ #1251 ; - [x] libfilesystem #1174; - [x] libfock ~#1164 (wait for #1224 and for @dgasmith )~ #1397; - [x] libfunctional -- ~delay to 29 Aug #1195 (wait for @dgasmith)~ #1396; - [x] libiwl #1163 ; - [x] libmints -- delay to 29 Aug #1156; - [x] libmoinfo #1165; - [x] liboptions #1187; - [x] libplugin #1190; - [x] libpsi4util #1176; - [x] libpsio #",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1144:794,plugin,plugin,794,https://psicode.org,https://github.com/psi4/psi4/issues/1144,1,['plugin'],['plugin']
Modifiability,Duplicate of Refactoring of Dimension Class,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/574:13,Refactor,Refactoring,13,https://psicode.org,https://github.com/psi4/psi4/pull/574,1,['Refactor'],['Refactoring']
Modifiability,"During the course of working on this, I've decided a more extensive, very-API breaking refactor will be needed. The problem is that in the current iteration of the code, DIIS has the responsibility for doing the extrapolation, and that naturally fails if the user requests EDIIS but not DIIS. I'll need to refactor this to have classes just to compute EDIIS/ADIIS/DIIS coefficients, and another class to do the actual extrapolation step.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-1000543786:87,refactor,refactor,87,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-1000543786,2,['refactor'],['refactor']
Modifiability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version 7.2.0; -- Found OpenMP_C: -qopenmp ; -- Found OpenMP_CXX: -qopenmp ; -- Found OpenMP_Fortran: -qopenmp ; -- No Doxygen, no docs.; -- No Sphinx, no docs. Pre-built documentation at http://psicode.org/psi4manual/master/index.html; -- No ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524:4072,config,configuration,4072,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386785524,1,['config'],['configuration']
Modifiability,"ENERIC: OFF; -- Setting (unspecified) option CMAKE_INSTALL_MESSAGE: LAZY; -- Setting (unspecified) option psi4_CXX_STANDARD: 11; -- Setting (unspecified) option SIMINT_VECTOR: avx; -- Psi4 install: /usr/local/psi4; -- Found PythonInterp: /home/termo/miniconda3/envs/p4dev35/bin/python (found suitable version ""3.5.5"", minimum required is ""2.7"") ; -- Found PythonLibs: /home/termo/miniconda3/envs/p4dev35/lib/libpython3.5m.so; -- Found Python 3.5: /home/termo/miniconda3/envs/p4dev35/bin/python (found version 3.5.5); -- Found LAPACK MKL: /home/termo/miniconda3/envs/p4dev35/lib/libmkl_rt.so;...; -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found HDF5: /home/termo/miniconda3/envs/p4dev35/lib/libhdf5.so;... (found version 1.10.1); -- Performing Test HAS_CPP14_FLAG; -- Performing Test HAS_CPP14_FLAG - Success; -- Found pybind11: /home/termo/miniconda3/envs/p4dev35/include/python3.5m (found version 2.2.3); -- HDF5: Using hdf5 compiler wrapper to determine C configuration; -- Found CheMPS2: /home/termo/miniconda3/envs/p4dev35/lib/libchemps2.so.3 (found version 1.8.7); -- Found dkh: /home/termo/miniconda3/envs/p4dev35/lib/libdkh.so (found version 1.2); -- Found libefp: /home/termo/miniconda3/envs/p4dev35/lib/libefp.so.1.5 (found version 1.5.0); -- Found gau2grid: /home/termo/miniconda3/envs/p4dev35/lib/libgg.so (found version 1.0.1); -- Found gdma: /home/termo/miniconda3/envs/p4dev35/lib/libgdma.so (found version 2.2.6); -- Found Libint 6: /home/termo/miniconda3/envs/p4dev35/lib/libint.so (found version 1.2.0); -- Found PCMSolver: /home/termo/miniconda3/envs/p4dev35/lib/libpcm.so.1 (found version 1.2.1.0); -- Found Libxc: /home/termo/miniconda3/envs/p4dev35/lib/libxc.so (found version 4.0.2); -- Found base compiler version ; CMake Error at cmake/custom_cxxstandard.cmake:39 (if):; if given arguments:. ""VERSION_LESS"" ""4.9"". Unknown arguments specified; Call Stack (most recent call first):; CMakeLists.txt:168 (include). -- Configuring incomplete, errors occ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883:4371,config,configuration,4371,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386441883,1,['config'],['configuration']
Modifiability,ENH: CCLambdaWfn inherits from CCEnergyWfn,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1257:17,inherit,inherits,17,https://psicode.org,https://github.com/psi4/psi4/pull/1257,1,['inherit'],['inherits']
Modifiability,"Elsewhere, I've added builds of all the `--new-plugin plugname +template` templates, so we'll know if they ever break. . Here (https://github.com/psi4/psi4/pull/304/files#diff-960310e869df2437e6e4b4ad1fa11867R1799) is there any more specific error to catch, or is it one of those c-side psi-exceptions that can't be caught with specificity?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/304#issuecomment-192756982:47,plugin,plugin,47,https://psicode.org,https://github.com/psi4/psi4/pull/304#issuecomment-192756982,1,['plugin'],['plugin']
Modifiability,Error about pybind11 in cmake while creating a new psi4 plugin,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:56,plugin,plugin,56,https://psicode.org,https://github.com/psi4/psi4/issues/775,1,['plugin'],['plugin']
Modifiability,"Excellent, an error!. Ok, that header is provided by `gcc_impl_linux-64` pkg and shows up for me at `/path/to/env/x86_64-conda_cos6-linux-gnu/sysroot/usr/include/sys/cdefs.h`. Same?. Note that if you hate this and just want to get on with life, drop the `--intel` from `psi4-path-advisor`, use the resulting `cmake -C/various/psi4DepsCache.cmake ... -H. -Bobjdir` command and tack on your own `-DCMAKE_CXX_COMPILER=icpc` etc. to configure against your system gcc 5.4, which will do just fine.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386646370:429,config,configure,429,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386646370,1,['config'],['configure']
Modifiability,"Excellent, thanks for your tremendous effort.; Given that my test cases were not modified and still seem to work, i do not have any complaints. > * sometimes the non-OO value (e.g., MP2, LCCD) is available as an early byproduct of the OO calc (e.g., OMP2, OLCCD). this wasn't the case with REMP, and some QCVariables that stored a purported non-OO REMP had to be removed. MP2 should also be available from the guess. But it is of course better to not print/store something than to print something wrong. I might be mistaken, but given that `occ` does coupled DIIS for amplitudes and orbitals, the canonical LCCD enery should not be available from an OLCCD calculation (lccd is never iterated on canonical orbitals). The same holds for REMP2. So yes, if there are variables pretending to be canonical results from an orbital-optimized calculation, these should probably be removed.; No problem, it was mostly my fault to put way too many changes into a single pull request based on an ancient master branch.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089:763,variab,variables,763,https://psicode.org,https://github.com/psi4/psi4/pull/2653#issuecomment-1200911089,1,['variab'],['variables']
Modifiability,Excited State Variable Cleanup,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:14,Variab,Variable,14,https://psicode.org,https://github.com/psi4/psi4/issues/2486,1,['Variab'],['Variable']
Modifiability,Excited State Variable Cleanup for `adcc`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513:14,Variab,Variable,14,https://psicode.org,https://github.com/psi4/psi4/pull/2513,1,['Variab'],['Variable']
Modifiability,Expose flexible cube generation to Python,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1917:7,flexible,flexible,7,https://psicode.org,https://github.com/psi4/psi4/pull/1917,1,['flexible'],['flexible']
Modifiability,Expose good chunks of libmints and libciomr to plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400:47,plugin,plugins,47,https://psicode.org,https://github.com/psi4/psi4/pull/1400,1,['plugin'],['plugins']
Modifiability,Expose reset_subspace to C++ for plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2437:33,plugin,plugins,33,https://psicode.org,https://github.com/psi4/psi4/pull/2437,1,['plugin'],['plugins']
Modifiability,Extend Francesco's documentation on writing cube files to explain how to actually plot orbitals using VMD or similar software. Consider adding Evangelista group VMD script to Psi4 source. Assigned to Wallace.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/142:0,Extend,Extend,0,https://psicode.org,https://github.com/psi4/psi4/issues/142,1,['Extend'],['Extend']
Modifiability,Extend ddx interface by support for dd-LPB,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2918:0,Extend,Extend,0,https://psicode.org,https://github.com/psi4/psi4/pull/2918,1,['Extend'],['Extend']
Modifiability,Extra items in the NumPy can be done by either adding unused fields or putting the the `array` or `variable` attributes on the Wavefunction.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514#issuecomment-459550513:99,variab,variable,99,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459550513,1,['variab'],['variable']
Modifiability,"FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; CMake Warning at cmake/custom_cxxstandard.cmake:22 (message):; Intel ICPC makes use of GCC (detected: 4.7; required for C++11: 4.9) so; this build won't work without GCC intervention:; https://github.com/psi4/psi4/wiki/8_FAQ_Contents#modgcc; Call Stack (most recent call first):; CMakeLists.txt:119 (include). -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found BLAS: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_thread.so;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_core.so;/usr/lib64/libpthread.so;/usr/lib64/libm.so); -- LAPACK will be searched for based on MKLROOT=/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl; -- Found LAPACK: MKL (/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_lapack95_lp64.a;/software/intel/parallel_studio_xe_2017/compilers_and_libraries_2017.0.098/linux/mkl/lib/intel64/libmkl_intel_lp64.so); -- No Doxygen, no docs.; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Adding test cases: Psi4; -- Adding test cases: Psi4 + libefp; -- Configuring done; -- Generating done; -- Build files have been written to: /home/LUCA/psi-master_18_11_2016/psi4/bii",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261733153:4367,Config,Configuring,4367,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261733153,1,['Config'],['Configuring']
Modifiability,"FOUND>; lapk.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapk.INTERFACE_LINK_LIBRARIES = ""/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_rt.so""; Properties for TARGET lapack:; lapack.INTERFACE_COMPILE_DEFINITIONS = ""USING_LAPACK_MKL""; lapack.INTERFACE_COMPILE_OPTIONS = <NOTFOUND>; lapack.INTERFACE_INCLUDE_DIRS = <NOTFOUND>; lapack.INTERFACE_LINK_LIBRARIES = ""lapk;blas;tgt::MathOpenMP"". -- Found LAPACK MKL: /opt/intel/compilers_and_libraries_2018.3.222/linux/mkl/lib/intel64/libmkl_; ```; Maybe cmake is looking for libiomp5.so under $MKLROOT (/opt/intel/compilers_and_libraries_2018.3.222/linux/mkl for me), when it is actually is in $MKLROOT/../compiler/lib/intel64/ (or other relevant architecture)?. It looks a lot more promising. Building now... Edit: Build failed at the same point as before during ""Performing configure step for 'psi4-core':""; ```; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; -- LAZ Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, CXX=GNU; MathOpenMP iomp5 0 ; MathOpenMP iomp5 A _lib-NOTFOUND; MathOpenMP iomp5 B _lib-NOTFOUND; MathOpenMP_LIBRARIES MathOpenMP_LIBRARIES-NOTFOUND; -- Found TargetOpenMP: Found TargetOpenMP: /usr/lib/gcc/x86_64-linux-gnu/7/libgomp.so;/usr/lib/x86_64-linux-gnu/libpthread.so ; CMake Error at /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:137 (message):; Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE); Call Stack (most recent call first):; /usr/share/cmake-3.11/Modules/FindPackageHandleStandardArgs.cmake:378 (_FPHSA_FAILURE_MESSAGE); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:99 (find_package_handle_standard_args); /usr/share/cmake-3.11/Modules/CMakeFindDependencyMacro.cmake:48 (find_package); /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake:45 (find_dependency); CMakeLists.txt:25 (find_package); ```; It looks like OpenMP_CXX_LIBRARY_DIRS doesn't get passed",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980:4060,config,configure,4060,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-396748980,1,['config'],['configure']
Modifiability,"FYI, I think this has hampered python detection for the conda build. Doing sad things like:. ```; -- Found PythonInterp: /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib64/libpython2.7.so ; ```. at cmake configure time until I told the conda recipe explicitly where to get its library from:. ```; -DPYTHON_INTERPRETER=${PYTHON} \; + -DPYTHON_LIBRARY=/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/lib/libpython2.7.so \; ```. Ugly hack but stable for now. Just be aware the Python detection still not ideal.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-134687960:300,config,configure,300,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-134687960,1,['config'],['configure']
Modifiability,Failure on compiling plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565:21,plugin,plugins,21,https://psicode.org,https://github.com/psi4/psi4/issues/565,1,['plugin'],['plugins']
Modifiability,"Fantastic news! I think we can probably kill this branch and concentrate on getting the latest and greatest in instead. We're doing a massive rewrite of the integrals right now, so best to wait until that's merged before working on the ECPs I think - we don't want to have any merge problems. When we have the new integrals code in (very soon, hopefully), I'll ping you and try to coordinate the ECP rewrite. Thanks for the very positive update :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196:142,rewrite,rewrite,142,https://psicode.org,https://github.com/psi4/psi4/pull/1340#issuecomment-699121196,2,['rewrite'],['rewrite']
Modifiability,"Few more notes:; - external projects currently installed in `install/externals/proj_name`. How about installing them ""on top"" of psi4 so that the external project bins go in `install/bin`, headers go in `install/include/proj_name`, etc. ?; - external projects look to be built as static libs. will want to be able to build and detect as shared libs; - py-side replacement for `psi4_main/create_new_plugin.cc` is checked in. Right now, the cmake variable substitution works equally not at all for C++ and Python versions. Will need to consider how to call in pre-Inversion period.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235532620:445,variab,variable,445,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235532620,1,['variab'],['variable']
Modifiability,"Finally, I have built an experimental *Psi4* package for *Windows*: https://anaconda.org/raimis/psi4. Limitations/issues:; - Minimal functionality: no addons and plugins; - Slow: not optimized and with debugging instrumentation; - ~~Can be used as a *Python* package only (i.e. `psi4` command is not working)~~ -- #1420; - ~~`PSI_SCRATCH` has to be set, otherwise it will crash~~ -- #1413; - A few tests are failing:; - ~~`cbs-parser`~~ -- #1442; - ~~`ci-property`~~ -- #1440; - ~~`cc46`~~ -- #1422; - ~~`cc47`~~ -- #1422; - ~~`cc53`~~ -- #1438; - ~~`fci-tdm`~~ -- #1441; - ~~`fci-tdm-2`~~ -- #1441; - ~~`psimrcc-fd-freq2`~~ -- #1427; - ~~`psithon2`~~ -- #1410. If you are a *Windows* user, could you try and give feed back, please:; ```; > conda install -c raimis -c psi4 -c conda-forge psi4; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-445293936:162,plugin,plugins,162,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-445293936,1,['plugin'],['plugins']
Modifiability,"First batch of questions:. Can TREXIO be extended to support other C++ types, such as `complex` or `double`?; If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?; Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1387486579:41,extend,extended,41,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387486579,1,['extend'],['extended']
Modifiability,Fix OpenMP config for clang-cl on Windonws,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348:11,config,config,11,https://psicode.org,https://github.com/psi4/psi4/pull/1348,1,['config'],['config']
Modifiability,Fix Plugin Testing,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/624:4,Plugin,Plugin,4,https://psicode.org,https://github.com/psi4/psi4/pull/624,1,['Plugin'],['Plugin']
Modifiability,Fix SCF plugin python file,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1680:8,plugin,plugin,8,https://psicode.org,https://github.com/psi4/psi4/pull/1680,1,['plugin'],['plugin']
Modifiability,Fix cmake changes causing plugin link problems on Mac,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1642:26,plugin,plugin,26,https://psicode.org,https://github.com/psi4/psi4/pull/1642,1,['plugin'],['plugin']
Modifiability,Fix undefine variable in psi::CIvect::dcalc2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1219:13,variab,variable,13,https://psicode.org,https://github.com/psi4/psi4/pull/1219,1,['variab'],['variable']
Modifiability,Fix uninitialized variables in dfocc affecting UHF calcs are okay. Thank you very much Lori!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/270#issuecomment-186778555:18,variab,variables,18,https://psicode.org,https://github.com/psi4/psi4/pull/270#issuecomment-186778555,1,['variab'],['variables']
Modifiability,"Fixed a bug in the stability analysis: some rotation parameters for the orbitals were not correct, it should be easier to converge on a stable solution now. SAPT: changed the output according to Friday's meeting. Updated the tests for SAPT and the Sphinx manual as well.; @CDSherrill : you can have a look at the updated output.ref to make sure the output looks good to you.; @loriab : I did not modify the Psivars yet. Do you want to do it by passing a SCALE_FACTOR PsiVars to your code computing all the other variables, or do you prefer some other way?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/248:512,variab,variables,512,https://psicode.org,https://github.com/psi4/psi4/pull/248,1,['variab'],['variables']
Modifiability,"Fixes #2493 . ## Description; <!-- Provide a brief description of the PR's purpose here. -->. For memory safety, the integrals in libmints should be returned as unique_ptrs rather than raw pointers. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audience is code reviewers and other devs skimming PRs.; Should be more technical than user notes. Should never be empty. -->; - [x] All integrals in libmints now return a unique_ptr rather than a raw pointer; - [x] Call sites refactored to match; ## Questions; - [x] Are my refactors to the call sites correct? Many are just an immediate release of the unique_pointer, with the assumption that the memory management / pointer deletion occurs elsewhere; - [x] Should iterators eg `CartesianIter` also return unique_ptrs?. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2775:700,refactor,refactored,700,https://psicode.org,https://github.com/psi4/psi4/pull/2775,2,['refactor'],"['refactored', 'refactors']"
Modifiability,For Wavefunction objects we suggest moving over to the `variables` attribute. See the [Wavefunction](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L232) and [MP2](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L180) classes. Ultimately we want all variables to move here and remove the global object.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683#issuecomment-296413930:56,variab,variables,56,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296413930,2,['variab'],['variables']
Modifiability,"For consistency's sake regarding Psi4 AddOns, I'd really like to keep `ENABLE_simint` as a boolean and have something like `SIMINT_TARGET_ARCH` as an optional variable. Would something like [this](https://github.com/tunabrain/tungsten/blob/master/cmake/OptimizeForArchitecture.cmake) allow selecting a good default for `SIMINT_TARGET_ARCH`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/533#issuecomment-275186110:159,variab,variable,159,https://psicode.org,https://github.com/psi4/psi4/pull/533#issuecomment-275186110,1,['variab'],['variable']
Modifiability,"For history, back when Python detection in cmake was very broken (exe and lib weren't matching pair), numpy made their own alternate find python cmake file and pybind11 used numpy's and psi4 used pybind11's. I hear cmake has totally rewritten theirs, and pybind11 is now amenable to either (https://github.com/pybind/pybind11/pull/2370, I think). So, yes, upgrade now reasonable. Note that psi, in turn, installs the python finder module so that plugins can use it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163:446,plugin,plugins,446,https://psicode.org,https://github.com/psi4/psi4/issues/2060#issuecomment-743297163,1,['plugin'],['plugins']
Modifiability,"For my use case, I have actually not been using the `psi4`-generated Makefile directly. What I've been doing is generating the Makefile in a temporary directory and parsing it to extract the `CXXDEFS` / `CXXFLAGS`, linker options, include directories, and so forth, and using that information to configure my own build tool. So from this perspective, what would be really useful is something that lets me get that information out. For example, `libnetcdf` (https://packages.debian.org/sid/libnetcdf-dev) always ships with an executable called `nc-config` that you can query for this information. So if possible (feature request, I guess), something similar for the plugin mechanism would be ideal. The makefile is a good idea I think for many users, but sometimes is not flexible enough. ```; $ nc-config --cflags; -I/Users/rmcgibbo/miniconda/envs/3.5/include; rmcgibbo@MacBook-Pro ~ (3.5); $ nc-config --libs; -L/Users/rmcgibbo/miniconda/envs/3.5/lib -lnetcdf; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172263911:296,config,configure,296,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172263911,6,"['config', 'flexible', 'plugin']","['config', 'configure', 'flexible', 'plugin']"
Modifiability,"For organization purposes:. - [x] Remove debugging; - [x] Remove dead three-body coupling terms; - [x] Replace memory_manager with smart pointers (target of next PR); - [x] Add additional warning for PT (target of two PRs in, will also add the `wfn`); - [ ] Add back some rudimentary memory tracking. I'm going to shift my focus back to a paper I'm writing but should resume the smart pointer-ing when I feel I need a break (probably a week or so).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-625454905:81,coupling,coupling,81,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-625454905,1,['coupling'],['coupling']
Modifiability,"Forewarning that the [documentation in occ/dfocc](http://www.psicode.org/psi4manual/master/occ.html#) needed reworking even _before_ this commit, and it certainly will afterwards. I'll hold off on rewriting that (and updating the `driver.energy` docstring) until the rest of the PR looks good. How I decide to rewrite the manual will depend on if I need to make other changes, and the docstring updates will depend on the manual changes... Aren't dependencies fun?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742:310,rewrite,rewrite,310,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-578806742,1,['rewrite'],['rewrite']
Modifiability,"From a strategic point of view, the answer is yes, it would be a great; addition. However, it would depend on the technical details ... how much work it; would be to get this working, how soon we could do it, etc. I'll try to; discuss with Lori and Daniel S. We've already done a ""soft"" 1.0 release (not heavily advertized yet). On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you want; > to stick to DMRG-SCF?; > ; > If you would like to, I can release an intermediate version v1.7, and you; > can use the plugin (or copy parts of); > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > to run the CASPT2 calculations...; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220613816:619,plugin,plugin,619,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220613816,1,['plugin'],['plugin']
Modifiability,"From discussion today, the following tasks to wrap up https://github.com/psi4/psi4public/issues/103; - [x] In driver.py, delete reference-bearing methods from procedures table (multiple places). Delete table:energy_scf rst table and its analogies. Salvage 'hf' from them and move it into the main rst table.; - [x] In proc.py, remove much of parse_scf_cases, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [x] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [x] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/117:497,adapt,adapt,497,https://psicode.org,https://github.com/psi4/psi4/issues/117,2,['adapt'],['adapt']
Modifiability,"From discussion today, the following tasks:; - [ ] In `driver.py`, delete reference-bearing methods from procedures table (multiple places). Delete `table:energy_scf` rst table and its analogies. Salvage `'hf'` from them and move it into the main rst table.; - [ ] In `proc.py`, remove much of `parse_scf_cases`, maybe drop that fn and move it back into the run_scf\* as it was early this year.; - [ ] Inspect test cases for removed functionality and adapt them. Check that the uhf that originally prompted this post is still working. Check that every energy/gradient rhf/uhf/rohf/cuhf/etc scf/hf/b3lyp does something sensible or exits gracefully.; - [ ] Check the docs to see if they reference this functionality and adapt them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/103#issuecomment-121430626:451,adapt,adapt,451,https://psicode.org,https://github.com/psi4/psi4/issues/103#issuecomment-121430626,2,['adapt'],['adapt']
Modifiability,"Full rework of SAD guess (#1451, #1452, #1456, #1458, #1477, #1479, #1481), fixing issues with fractional occupations, ECPs, and ghost atoms. Sad with spin-averaged fractional occupations is now the default guess in Psi4, yielding huge performance improvements. This is especially significant for unrestricted and restricted open-shell methods, for which the default guess was GWH which is even worse than CORE. Implemented the on-the-fly extended Huckel guess (#1498, #1529), which is based on the SAD solver. DIIS maximum absolute error criterion for SCF, instead of the default RMS error (#1460). Removed inconsistencies and bugs in formatted checkpoint files (#1475). Code assumes that the post-HF wave function contains a correlated density. Fixed inconsistencies in the passing of DF_FITTING_CONDITION; the default value is now 1e-10 in line with what was actually used by the code before.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888:439,extend,extended,439,https://psicode.org,https://github.com/psi4/psi4/issues/1406#issuecomment-455544888,1,['extend'],['extended']
Modifiability,"Functionals now takes advantage of polarized vs unpolarized DFT kernels.; - Added generalized solvers in p4util/solvers.py. These include DIIS and conjugate gradient; - New density-fitted AO->MO transform object. More efficient than previous objects and has multiple modes depending on the type of computation (direct or AO storage).; - ECP SCF energies.; - ECP gradients by finite differences in Python.; - DFT is now has several hundred tests against Psi4 and other implementations; - Shared pointers were rewritten to use `std::make_shared`. (#836); - One-electron integrals from LibMints now properly apply external potentials so that external potentials are now applied evenly throughout the code base (#844).; - Psi4 is now buildable with Ninja (#794); - Begins to deprecate `char *` from Psi4 (#780); - Pragma header for diagnostics and API's (#774); - Improved C++/Python binding docstrings (#761); - Clang and YAPF configuration files (#753); - Improved parallel and routine timing information in Psi4 (#743); - SCF can now be run in symmetry for post-SCF modules that do not use symmetry (#737); - Psi4 now compiles much faster (~3 minutes with LLVM on 4 cores) (#736); - NumPy views of Psi4 objects are now correctly reference tracked in cases where C++ returns a new matrix. `arr = wfn.Ca_subset(""AO"", ""OCC"").nph` now no longer give noise. (#736); - Basis PyParsing is now simpler and code duplication has been removed (#734 ); - Update cc-pVXZ and add cc-pwCVXZ for Li, Be, Na, Mg (#728); - MCSCF orbital semicanonicalization (#722); - C++ Options are now exposed to Python (#720); - Intermediate sub-system and partial-basis energies from `nbody` wrapped exported as psivars (#952); - Better start/stop/elapsed time printing. # Documentation; - Additional Documentation Information (#787). # Miscelaneous; - Added N to ANO0 basis set (#825). # Bug Fixes; - Accidental signed integer overflow when using extremely low memory in DFJK; - wB97X had an incorrect range-seperation parameter. ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:5298,config,configuration,5298,https://psicode.org,https://github.com/psi4/psi4/issues/959,1,['config'],['configuration']
Modifiability,"Further to our discussion at Slack and e-mail, I made some tests on molecules with ECP's. Please see the attached G09 and psi4 input and log files. To obtain the psi4 results, the g- and h- shell coefficient of 0.000 in the Xe/Hg ECP has been replaced with 1D-10. A simple trapping of `tsum==0` in `erd_normalize_shell()` in `libmintsgshell.py` doesn't work properly - the term has to be sanity-checked in the loop before on lines 241-252. . For Hg, the `libmintsbasissetparser.py` had to be extended at line 202 to include the H-shell (thanks, Jesse). ![image](https://user-images.githubusercontent.com/5336995/36932575-1957f002-1ecb-11e8-84dc-b365f16b84b3.png). As can be seen from the table above, the absolute energies of the dimers are fine when compared to G09. The `nocp` interaction energy is also OK, however when CP-correction is involved, the results are not good - I imagine the ECP doesn't get properly ghosted. Finally, the psi4 calculations crash as `libmintsbasisset.py` is not able to find the basis sets for some reason - perhaps the basis set file is not passed into the routine properly? This also occurs when the basis set is defined in the job file using `basis { ... }`. [ECP-test.zip](https://github.com/psi4/psi4/files/1777311/ECP-test.zip)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/926:492,extend,extended,492,https://psicode.org,https://github.com/psi4/psi4/issues/926,1,['extend'],['extended']
Modifiability,"Glad to hear it's mostly working; * https://github.com/psi4/psi4/pull/2829 might help `matrix1`; * yes, the hungarian file had that change and now resides https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/scipy_hungarian.py#L103; * the datastructures is refactored into a different class https://github.com/MolSSI/QCElemental/blob/master/qcelemental/datum.py#L45 but your changes are good; * it looks like the uno_bipartite file has had some updates, incl. node -> nodes https://github.com/MolSSI/QCElemental/blob/master/qcelemental/util/gph_uno_bipartite.py#L108",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147:271,refactor,refactored,271,https://psicode.org,https://github.com/psi4/psi4/issues/2865#issuecomment-1409681147,1,['refactor'],['refactored']
Modifiability,"Glad to hear it’s fixed. Yes, 1.0.54 is a few hundred commits ago. Currently we’re building up to a 1.1 release, but unless you need pcmsolver, ambit, or advanced plugin technology, the current development head should be perfectly useable. There is a later conda binary, but we’re keeping development snapshots under a different label, so that only releases are pulled with “conda update psi4 -c psi4”. You can get the development snapshots via “conda update psi4 -c psi4 -c psi4/label/test”. That will pull packages additionally from the “test” (name may change) label. The 1.0.54 to pre-1.1 changes are sufficiently drastic that you should probably do a fresh conda install of psi4, rather than just a conda update. > On Nov 26, 2016, at 5:45 PM, Holger Kruse <notifications@github.com> wrote:; > ; > Thanks! That fixes it.; > I wasn't aware the conda binary is so far behind the git version.; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/issues/528#issuecomment-263090503>, or mute the thread <https://github.com/notifications/unsubscribe-auth/ACNR6kYmnjd_KUOlMjljX6_8G0XiaKIcks5rCLaRgaJpZM4K8kr4>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/528#issuecomment-263098427:163,plugin,plugin,163,https://psicode.org,https://github.com/psi4/psi4/issues/528#issuecomment-263098427,1,['plugin'],['plugin']
Modifiability,"Glad to hear you were able to converge the geometry. I'll leave the ECP logging question to Lori, but I can speak to the orbital reading issue. The issue here is one of the two improvements to the orbital read/guess system that I need for my own research, so the permanent fix is high priority for me. However, the relevant code is intimately tied up with a part of the code that is currently unergoing a large rewrite, so I won't be able to start on the fixes until that's done.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1704#issuecomment-524287571:411,rewrite,rewrite,411,https://psicode.org,https://github.com/psi4/psi4/issues/1704#issuecomment-524287571,1,['rewrite'],['rewrite']
Modifiability,"Glad to help, as you're actually using the feature. Note that we're doing some infrastructure reworking (on private repo for now, but private is what conda builds from, again for now) that affect plugins. Until that settles down and appears in public (which is to become our primary repo, for conda, too) with guidelines, you may want to stick with recommending the `0.3` series for your RESP plugin. (Helps that our nightly build box is down for now, so there's only one `0.4` series around https://anaconda.org/psi4/psi4/files.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-182553481:196,plugin,plugins,196,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-182553481,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Glad you're finding QCSchema input useful!. Peter's right that not all calculations are possible at the moment through the schema input, most notably optimizations and the ""wrappers"" like cbs and nbody. What the schema is targeted to express at the moment are single-points, and that's how QCEngine is using it in the various <program>Harnesses. A major update coming to psi4 is the ""distributed"" driver that reworks wrapper communication to be more dict-like. The schema input to wrappers isn't well-defined yet, but it will probably inherit from the single-point schema (`AtomicInput`). I think then that what you're asking for could be arranged within schema_wrapper.py, but I'm just not sure yet. Glad to know you're interested, and we'll keep this use case in mind.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349:535,inherit,inherit,535,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868938349,1,['inherit'],['inherit']
Modifiability,"Go ahead, I have not even started. On Sat, 17 Nov 2018, 02:29 Jonathon Misiewicz <notifications@github.com; wrote:. > Unfortunately, I was right. Commenting out this line I added in #1108; > <https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.h#L372>; > fixes the issue.; >; > That particular line ensures that when cloning a CoordEntry as part of; > cloning a molecule, the clone of a ZMAT coordinate inherits the computed; > Cartesians of the original atom, if any. That change was vital to prevent a; > bug where basis sets wouldn't be centered on atoms after cloning, and I; > believe that needs to be kept.; >; > I know Peter said he planned to hack on this, but I'm tempted to take this; > myself. This is holding me up from helping a user on the forum.; >; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/1325#issuecomment-439575958>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AFFvoxZ6s8Qaqkkz0plIu-exW2oXNtVgks5uv2aAgaJpZM4YErPm>; > .; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-439600435:426,inherit,inherits,426,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-439600435,1,['inherit'],['inherits']
Modifiability,"Good catch. Yes, the ambit plugin wasn't even doing anything with ambit until c274b18e825bff404cd828c39fa3f840be6d9579. Please switch the check from `AMBIT_FOUND` to `ENABLE_AMBIT`, as that will catch both detect-external and build-internal ambits.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230487517:27,plugin,plugin,27,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230487517,1,['plugin'],['plugin']
Modifiability,Good move fixing the `PYTHON_LIBRARY` CMake variable; mixed detection of Python interpreter/library/headers is definitely a scourge of Psi4 compilation. But I set that variable all the time and don't get an actual link to `libpython`. So I think it is just the version you're building is before we stopped linking explicitly.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275141079:44,variab,variable,44,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275141079,2,['variab'],['variable']
Modifiability,"Good to know on the `CMAKE_PREFIX_PATH` for python detection. That should probably become the preferred way to detect Anaconda python. To have multiple items in that var, use something like `-DCMAKE_PREFIX_PATH=""${PFXE}/install-libefp-so;${PFXE}/install-libint-6-so;${PFXE}/install-pcmsolver""`, in case you hadn't already worked that out. Quite right about 2.7. At some point I stopped adapting my dictionary comprehensions for the 2.6 folks. I'm guessing it will build/link, but you'd get driver errors at runtime. Should be detecting a 2.7 minimum in cmake. One thing we want to do really soon is allow/switch to 3.5, switch to pythonlibsnew cmake module, and probably to offload python library detection to pybind11, so don't spend too much time playing around with the current python cmake, except for your own edification. Do feel free to switch that line you linked to to 2.7 .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249720030:386,adapt,adapting,386,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249720030,1,['adapt'],['adapting']
Modifiability,"Good to know the cause. In the cmake rewrite, psi4 and all add-ons are getting safeguards that catch attempts to build in place.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/460#issuecomment-239645645:37,rewrite,rewrite,37,https://psicode.org,https://github.com/psi4/psi4/issues/460#issuecomment-239645645,1,['rewrite'],['rewrite']
Modifiability,"Got it. Expect a PR with the gory details and comments over the weekend. If anybody needs this _right away_, you need to change [these lines](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L2089-L2093) from; ```; PAbp[A][b] /= -(eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfocc; B++) {; ```; to; ```; PAbp[A][b] /= (eps_avirp[b] - eps_fvirp[A]);; }; }. for (int B = 0; B < nfvir; B++) {; ```. There's a sign error, and you're looping over the wrong variable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519:484,variab,variable,484,https://psicode.org,https://github.com/psi4/psi4/issues/1916#issuecomment-639869519,1,['variab'],['variable']
Modifiability,Gradient Refactor,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:9,Refactor,Refactor,9,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['Refactor'],['Refactor']
Modifiability,"Great thanks! I'll add the tests right away. . And for `energy()` vs `tdscf()`, I don't feel too strongly either way. I like the simplicity of `energy()`, particularly since tdscf is only returning energies for now. `tdscf()` may be the way to go eventually since it is more flexible. One option is to have both work, easy to do since `energy()` is just calling a `tdscf()` function in `run_scf`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803:275,flexible,flexible,275,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-626759803,1,['flexible'],['flexible']
Modifiability,"Greeting friends,; As you may have heard we are in the process of several fundamental Psi4 change. These include: rewriting the build system, removing Boost from Psi4, the ""inversion"", and a history rewrite. Read below for summaries of each step and where to find more detailed information. If you have any questions please ask them here or email us directly.; ## Steps. **Build system:**; The build system has moved to a ""super build"" strategy which reduces total compilation time and makes it much easier to add additional external libraries in the future. Developers will also see a reduction in the amount of time it takes to compile internal Psi4 changes and Psi4 can now link all external dependancies (libint for examples). Note that much of the github wiki on building psi4 is now plain wrong. Consult the top-level CMakeLists.txt to get building again. See [here](https://github.com/psi4/psi4/pull/442) for more information. . **Boost:**; Much of the Boost functionality that we have depended on in Psi4 has been implemented in C++11. In order to keep Psi4 up to date with best C++11 practices, reduce complexity, and generally remove several headaches, Boost has been removed from Psi4. The C++ Python bindings have been moved to PyBind11. See [here](https://github.com/psi4/psi4/issues/450) for more information. **Inversion:**; Currently the hybrid Python/C++ architecture of Psi4 is in an odd spot where Psi4 itself is a C++ program that calls an input file as a Python executable. This circular process will be removed and Psi4 itself will become a Python library capable of being imported just like any other module. This will allow Psi4 to be used in a normal python workflow with other scientific python programs like OpenMM, iPython, MolDesign, etc. In addition, python-based error messages will be more expressive and accurate. For users who enjoy the current Psithon interface the current Psi4 Psithon parsing equipment will be moved to a script named ""psi4"" in the binary location",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468:199,rewrite,rewrite,199,https://psicode.org,https://github.com/psi4/psi4/issues/468,1,['rewrite'],['rewrite']
Modifiability,Have you modeled on the examples [here](http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-blas-lapack-for-building-psi4)? . You can work from conda mkl nowadays with `conda install mkl-devel`. cmake commands are https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-dev-src/psi4DepsMKLCache.cmake#L15-L16,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-380309166:104,config,configure-blas-lapack-for-building-,104,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-380309166,1,['config'],['configure-blas-lapack-for-building-']
Modifiability,"Have you tried running it through Valgrind? If it's an uninitialized variable that GCC is magically zeroing out for you, Valgrind will tell you about it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-176579308:69,variab,variable,69,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176579308,1,['variab'],['variable']
Modifiability,"Hello David. Single determinant PSI4 output works pretty well and have been tested.; There is nothing special in the code for PSI4 converter https://github.com/Konjkov/molden2qmc/blob/master/molden2qmc.py#L962. CASINO multi-determinant extension composes from some single determinant (i.e. PSI4 CASSCF(3,4) MOLDEN output) and electron promotion data.; 1-st determinant:; ground state; 2-nd determinant:; up electron promote from 2 orbital to 4; down electron promote from 2 orbital to 4; 3-rd determinant:; up electron promote from 2 orbital to 5; down electron promote from 2 orbital to 5; The first determinant is taken into account with the weighting factor = 0.972153; 2-nd with = 0.165709; 3-rd with = 0.165709; as described in PSI4 output:. MCSCF Root 0 energy = -24.563671749133171. Active Space Natural occupation numbers:; ; A 1.890162 A 1.000000 A 0.054919; A 0.054919; ; The 20 most important determinants:; ; * 1 0.972153 ( 0, 0) 2AX 3AA.; * 2 0.165709 ( 4, 3) 3AA 5AX.; * 3 0.165709 ( 2, 2) 3AA 4AX. symmetry is turned out.; For this multi-determinant configuration CASINO outputs (roughly). E = -24.431(1) ; var = 5.3(1) ; Total CASINO CPU time ::: 181.2400 seconds. if I take 2-nd and 3-rd determinants with weighting factor = -0.165709; CASINO outputs (roughly). E = -24.565(1) ; var = 5.0(1) ; Total CASINO CPU time ::: 256.1500 seconds. which very well coincides with the PSI4 output energy. Best, Vladimir.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/796#issuecomment-331682241:1065,config,configuration,1065,https://psicode.org,https://github.com/psi4/psi4/issues/796#issuecomment-331682241,1,['config'],['configuration']
Modifiability,"Hello PSI4 Developers,. I am able to compile PSI4, but the compilation fails when it tries to build a plugin. . Here is the error output:. ==> Created plugin files (in skeleton as basic): ; CMakeLists.txt, input.dat, pymodule.py, __init__.py, plugin.cc, doc.rst; loading initial cache file /home/kannon/src/psi4_cmake/Build_Debug/stage/home/kannon/src/psi4_cmake/Install_Debug/shar e/cmake/psi4/psi4PluginCache.cmake; -- The CXX compiler identification is unknown; CMake Error at CMakeLists.txt:38 (project):; The CMAKE_CXX_COMPILER:. @CXX@. is not a full path and was not found in the PATH. Tell CMake where to find the compiler by setting either the environment; variable ""CXX"" or the CMake cache entry CMAKE_CXX_COMPILER to the full path; to the compiler, or to the compiler name if it is in the PATH. -- Configuring incomplete, errors occurred!. The compilers are correctly identified when cmake is first called. Do you all have any ideas how to fix this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565:102,plugin,plugin,102,https://psicode.org,https://github.com/psi4/psi4/issues/565,5,"['Config', 'plugin', 'variab']","['Configuring', 'plugin', 'variable']"
Modifiability,"Hello Psi4 community,; I was trying to simulate a simple reference model, pentacene on two layers of NaCl but cannot get it to converge. I am posting here instead of the Psi4 forum, since it does not support https, but I hope that someone can help me with this issue and see if I made any wrong assumptions. . In the input file I fixed the coordinated of the lower most NaCl monolayer and I use the OptKing solver (maybe geomeTRIC is more efficient here but did not know the input) with b3lyp-d3 (in hope to have a vdW-correction) and 6-31G as the basis set. I think that in itself b3lyp is not ideal for the surface, but I think that a plane-wave approach is better for the crystal itself. I'm interested in the electronic structure of the molecule in presence of the insulating layer, compared to gas-phase and in the atomic positions of the relaxed system. Any kind of help is much appreciated! Thank you in advance. My output file is the following:; ```; ==> Input File <==. --------------------------------------------------------------------------; memory 25 GB. set basis 6-31G. molecule {; 0 1; H 3.7651778770 9.5503410836 -1.8903043554 ; H 3.7651778770 7.0753410836 -1.8903043554 ; H 17.8091778770 7.0753410836 -1.8903043554 ; H 17.8091778770 9.5503410836 -1.8903043554 ; C 4.7039778770 9.0113410836 -1.8890043554 ; C 4.7039778770 7.6143410836 -1.8890043554 ; C 16.8703778770 7.6143410836 -1.8890043554 ; C 16.8703778770 9.0113410836 -1.8890043554 ; H 5.8910778770 10.7979410836 -1.8875043554 ; H 5.8910778770 5.8277410836 -1.8875043554 ; H 15.6832778770 5.8277410836 -1.8875043554 ; H 15.6832778770 10.7979410836 -1.8875043554 ; C 5.9119778770 9.7145410836 -1.8874043554 ; C 5.9119778770 6.9110410836 -1.8874043554 ; C 15.6623778770 6.9110410836 -1.8874043554 ; C 15.6623778770 9.7145410836 -1.8874043554 ; C 7.1332778770 9.0207410836 -1.8859043554 ; C 7.1332778770 7.6048410836 -1.8859043554 ; C 14.4410778770 9.0207410836 -1.8859043554 ; C 14.4410778770 7.6048410836 -1.8859043554 ; H 8.34",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2709:91,layers,layers,91,https://psicode.org,https://github.com/psi4/psi4/issues/2709,1,['layers'],['layers']
Modifiability,"Hello Psi4!; First of all, thank you for your hard work on improving the Psi.; This is not a bug report but rather a possible enhancement: we have recently developed a wave function format called [TREXIO](https://github.com/TREX-CoE/trexio) with the focus on self-consistence and I/O performance. The format comes with a C library and an API to interact with the data: it has a text (ASCII-based) and HDF5 (binary) back ends for I/O. Bindings in Python, Fortran and OCaml are available. Sparse data like 2e integrals or CI coefficients are stored in a sparse data representation (similar to FCIDUMP) which significarntly improved the performance of the I/O (especially in the HDF5 case). The source code can be found [here](https://github.com/TREX-CoE/trexio) and a detailed description of the format and an API can be found [here](https://trex-coe.github.io/trexio/trex.html). Would it be interesting to have TREXIO as an alternative I/O back end in Psi4? The library is packaged for both PyPI and conda (via conda-forge). I am one of the core developers and can help/contribute.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847:126,enhance,enhancement,126,https://psicode.org,https://github.com/psi4/psi4/issues/2847,1,['enhance'],['enhancement']
Modifiability,"Hello, . When building psi4 from source and python development packages are not installed compilation fails (Linux Fedora). Once I installed python-dev all complete successfully.; The complaint from source files was along the lines. #include<Pyhon.h> not found and then aborts during compilation,. Ideally (IMO) cmake should check during the configuration phase if all relevant and required package are installed and abort if not. Perhaps there are more dependencies, but I may already have had them already installed. . I no longer have the build machine to replicate all the steps, but I suspect amending the root cmake adding find_package with python-dev as REQUIRED (or perhaps via pkg_config) ; and abort immediately during the cmake configuration phase if not found, not halfway through the compilation when running make. Perhaps this will also help. https://cmake.org/cmake/help/latest/module/FindPython.html. Cheers.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2060:342,config,configuration,342,https://psicode.org,https://github.com/psi4/psi4/issues/2060,2,['config'],['configuration']
Modifiability,"Hello, I have been trying to geometry optimize >100 dimer pairs of organic molecules. I have a 60% success rate. I am struggling with the 40% that fail. I have tried using second order convergence and level shifting. Below is an example of a citric acid dimer that fails to converge in 100 scf iterations. The systems all seem to follow the same trend. The first couple of iterations converge the wavefunction, but eventually the scf fails to converge. The starting dimer configuration is generated using a steepest descent MM energy minimization. I can provide the entire log file, or other files as well. On other runs I have tried using LEVEL_SHIFT, but it did not help. ```; molecule dimer {; C 999.407602 1002.751600 1001.828601; C 1000.887601 1002.788600 1001.459601; O 1001.420601 1002.207601 1000.537601; O 1001.632601 1003.490600 1002.306601; C 998.553602 1001.680601 1001.080601; C 997.058603 1001.817601 1001.472601; C 996.802603 1001.523601 1002.938600; O 996.673603 1002.368601 1003.793600; O 996.522603 1000.257601 1003.219600; C 999.058602 1000.222601 1001.385601; O 999.978601 999.942601 1002.133601; O 998.491602 999.266602 1000.641601; O 998.619602 1001.964601 999.673602; H 999.003602 1003.752600 1001.641601; H 999.352602 1002.590600 1002.911600; H 1002.505600 1003.321600 1001.914601; H 996.453603 1001.125601 1000.874601; H 996.697603 1002.829600 1001.259601; H 996.300603 1000.363601 1004.159600; H 999.068602 998.498602 1000.848601; H 999.237602 1001.315601 999.248602; --; C 1000.474601 997.570602 997.565602; C 999.917601 998.148602 996.273603; O 1000.520601 998.883602 995.519603; O 998.741602 997.650602 995.912603; C 1001.785601 998.271602 998.044602; C 1002.427600 997.524602 999.252602; C 1001.663601 997.719602 1000.554601; O 1000.490601 997.439602 1000.697601; O 1002.249601 998.561602 1001.401601; C 1001.507601 999.774602 998.424602; O 1000.400601 1000.275601 998.494602; O 1002.573600 1000.457601 998.849602; O 1002.730600 998.191602 996.966603; H 1000.645601 996.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2338:472,config,configuration,472,https://psicode.org,https://github.com/psi4/psi4/issues/2338,1,['config'],['configuration']
Modifiability,"Hello, i recently installed the psi4 package using the conda prompt (Im using miniconda) with this code:; `conda create -n p4env psi4 python=3.8 -c psi4 -c conda-forge`; I configurated the paths, adding the ones given by `psi4 --psiapi`, but when importing the package in Jupyter Notebook I still have issues. It seems like the `import psi4` works, but when pressing tab after `psi4.` there are no suggestions, but with `psi4._` I get only seven suggestions (`__doc__`, `__file__`,`__loader__`, ...). So, when trying `psi4.set_memory(int(5e8))`, I get `AttributeError: module 'psi4' has no attribute 'set_memory'`. Thanks for any suggestions (Im new to psi4 and just recently started using Python, and GitHub).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2329:172,config,configurated,172,https://psicode.org,https://github.com/psi4/psi4/issues/2329,1,['config'],['configurated']
Modifiability,"Hello,. I am trying to compile a plug-in as described in http://www.psicode.org/psi4manual/master/plugins.html .; The plug-in is one of those used as example (https://github.com/psi4/psi4/tree/master/plugins/mointegrals). All I did is: ; 1. Create a directory. ; 2. Copy into it the files from the last link.; 3. Execute: `psi4 --new-plugin myplugin +mointegrals`; 3''. Alternatively I tried `psi4 --new-plugin myplugin mointegrals`; 4. Change dir to the new directory and execute `make`. It returns:; `Makefile:15: /build/buildd/psi4-4.0~beta5+dfsg/builddir/src/bin/MakeVars: No existe el archivo o el directorio; make: *** No hay ninguna regla para construir el objetivo «/build/buildd/psi4-4.0~beta5+dfsg/builddir/src/bin/MakeVars». Alto.`; (The file or directory doesn't exist. There is no rule to build the target. Stop.). What I'm doing wrong?. My work station is running linux Ubuntu LTS 14.04. The psi4 version is the last stable release. . I'm trying to compile the plug-in with the hope it helps me to build the full CI matrix. If Psi4 provides a simple way to generate the Hamiltonian matrix elements it would be even more useful to me. Thank you very much for your time and the opportunity of using your software.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308:33,plug-in,plug-in,33,https://psicode.org,https://github.com/psi4/psi4/issues/308,7,"['plug-in', 'plugin']","['plug-in', 'plugin', 'plugins']"
Modifiability,"Hello,. You should be able to bump up the version of chemps2 used in psi4 to 1.6 without any other modifications. It contains many performance improvements. In 1.7 (not released yet) there will be API changes. So the dmrgscf/dmrgci routine will need to be adapted simultaneously with the version tag. And it will also contain DMRG-CASPT2!. Best wishes,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/263:256,adapt,adapted,256,https://psicode.org,https://github.com/psi4/psi4/issues/263,1,['adapt'],['adapted']
Modifiability,"Hello. Thank you for explain me. I still have some problems with this plug-in, it seems like I am doing something wrong or the plugin does not work yet. I make a complete pastebin to make it simpler to analyze: http://pastebin.com/4EAjU7CC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195784330:70,plug-in,plug-in,70,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195784330,2,"['plug-in', 'plugin']","['plug-in', 'plugin']"
Modifiability,"Here is a script can orthogonalize orbitals between different geometries. However it does not consider frozen orbitals. They can be simply added following the comments inside the script. ```; #!/usr/bin/python; import psi4. # some global variables; nirrep = None; nrdoccpi = None; nruoccpi = None; nactvpi = None; nmopi = None. """"""; This function makes (C1)^T S2 C1 orthogonal; C1: converged CASSCF orbitals at geometry 1; S2: SO overlap matrix at geometry 2; return: orthogonal orbitals; """"""; def ortho_orbs(wfn1, wfn2, semi = True):; title = ""\n ==> Orthogonalize Orbitals Between Different Geometries <==\n""; psi4.core.print_out(title). # make sure there is no frozen orbitals; psi4.core.print_out(""\n Testing frozen orbitals ... ""); global nirrep; nirrep = wfn2.nirrep(); nfdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_DOCC"")); nfuoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""FROZEN_UOCC"")); nf = nfdoccpi.n() + nfuoccpi.n(); if nf != 0:; psi4.core.print_out(""False""); raise ValueError(""I am too lazy to consider frozen orbitals.""); else:; psi4.core.print_out(""Pass""). # get C1 and S2; C1 = wfn1.Ca(); S2 = wfn2.S(). # figure out irreps and orbital spaces; global nmopi; global nrdoccpi; global nactvpi; global nruoccpi; nmopi = wfn2.nmopi(); nrdoccpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""RESTRICTED_DOCC"")); nactvpi = psi4.core.Dimension.from_list(psi4.core.get_option(""DETCI"",""ACTIVE"")); nruoccpi = psi4.core.Dimension(nirrep); for i in range(nirrep):; nruoccpi[i] = nmopi[i] - nrdoccpi[i] - nactvpi[i]. # create subspace orbitals: core, active, virtual; psi4.core.print_out(""\n Preparing orbitals of subspaces ... ""); Ccore = psi4.core.Matrix(""C core"", nmopi, nrdoccpi); Cactv = psi4.core.Matrix(""C actv"", nmopi, nactvpi); Cvirt = psi4.core.Matrix(""C virt"", nmopi, nruoccpi). # fill in data to orbitals of subspaces; for h in range(nirrep):; offset1 = nrdoccpi[h]; offset2 = nactvpi[h] + offset1. for i in range(nmo",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/758#issuecomment-313731339:238,variab,variables,238,https://psicode.org,https://github.com/psi4/psi4/issues/758#issuecomment-313731339,1,['variab'],['variables']
Modifiability,"Hey PSI4 developers,. I am writing a plugin to test a JK algorithm. I want to run SCF in my plugin and test the new JK algorithm. . Even though I pass a converged scf wavefunction to the plugin, the SCF procedure doesn't converge. It seems that the wavefunction passing is messed up here. . Here is the basic structure of the plugin:. ```; SharedWavefunction kevin_plugin(SharedWavefunction ref_wfn, Options& options); {; boost::shared_ptr<Wavefunction> scf(new scf::RHF(ref_wfn, options, PSIO::shared_object()));; double scf_energy = scf->compute_energy();; } ; ```. I run the plugin as follows:. ```; import kevin_plugin. molecule H20 {; 0 1; H; O 1 1.08; H 2 1.08 1 107.5; units bohr; }. set globals {; basis sto-3g; df_basis_scf cc-pvdz-jkfit; df_basis_mp2 cc-pvdz-ri; scf_type df; reference RHF; }; refenergy, refwfn = energy('scf', return_wfn=True); energy('kevin_plugin', ref_wfn=refwfn); ```. Here is the first scf:. ```; ==> Iterations <==. Total Energy Delta E RMS |[F,P]|. @DF-RHF iter 0: -75.66716318225211 -7.56672e+01 7.87344e-01; @DF-RHF iter 1: -73.90687341477560 1.76029e+00 2.74191e-02; @DF-RHF iter 2: -73.91391789759025 -7.04448e-03 3.08278e-03 DIIS; @DF-RHF iter 3: -73.91403288011436 -1.14983e-04 4.69651e-04 DIIS; @DF-RHF iter 4: -73.91403606558048 -3.18547e-06 5.07365e-05 DIIS; @DF-RHF iter 5: -73.91403611477740 -4.91969e-08 6.26518e-06 DIIS; @DF-RHF iter 6: -73.91403611547619 -6.98790e-10 5.20238e-09 DIIS; ```. Here is the scf after my plugin is called:. ```; @DF-RHF iter 1: 15.38889387804263 1.53889e+01 0.00000e+00; @DF-RHF iter 2: -72.40376803946150 -8.77927e+01 3.34064e-01 DIIS; @DF-RHF iter 3: -72.40376803946153 -2.84217e-14 3.34064e-01 DIIS; @DF-RHF iter 4: -72.40376803946151 1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 5: -72.40376803946153 -1.42109e-14 3.34064e-01 DIIS; @DF-RHF iter 6: -72.40376803946153 0.00000e+00 3.34064e-01 DIIS; @DF-RHF iter 7: -72.40376803946148 4.26326e-14 3.34064e-01 DIIS; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419:37,plugin,plugin,37,https://psicode.org,https://github.com/psi4/psi4/issues/419,6,['plugin'],['plugin']
Modifiability,"Hey,. Q1: The current code can only perturb along the specified axis. We could adapt it to handle rotations we'd just have to be careful with symmetry; it shouldn't be difficult. Q2: Any code that uses the `MintsHelper::so_potential` (not `MintsHelper::ao_potential`) will have the perturbation applied. I had tested this a few years ago for MP2 and CCSD. Might be a good idea to make sure there's a test included for it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/302#issuecomment-192282809:79,adapt,adapt,79,https://psicode.org,https://github.com/psi4/psi4/issues/302#issuecomment-192282809,1,['adapt'],['adapt']
Modifiability,"Hi @JonathonMisiewicz . > Can TREXIO be extended to support other C++ types, such as complex or double?. `double` type is fully supported (it is the default for floats or can be explicitly accessed by using the `_64` suffix in the API). In fact, we fully support 32- and 64-bit integers and floats as well as strings and arrays of strings. The `complex` type is supported implicitly, namely the real and imaginary parts can be written in two independent calls to the TREXIO API. > If a section has no data, e.g., Psi doesn't use a cell or periodic boundary calculations, I assume that consumes no memory?. Exactly, it is up to the user to decide which data to store. > Is there a way for us to store an intermediate with an arbitrary name? For example, let's say that we have a coupled cluster code that needs to store on disk not only the T2 amplitudes but an amplitude called W. Can we do that?. I think you would need to modify a format for that, only items listed in the `trex.org` (`trex.json`) can be written since the source code of the library is auto-generated from the format specification. @scemama please correct me if I am wrong.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470:40,extend,extended,40,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1387505470,1,['extend'],['extended']
Modifiability,"Hi @JonathonMisiewicz,; Have you heard about the ESCDF library? It might be better adapted to what you want to do. It is also based on HDF5, but it is more low-level and flexible than TREXIO. See https://th.fhi-berlin.mpg.de/site/uploads/Publications/Oliveira_The_CECAM_electronic.pdf section G page 153.; I have never tried it, so I have no opinion on how easy it is to use.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466:83,adapt,adapted,83,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1429418466,2,"['adapt', 'flexible']","['adapted', 'flexible']"
Modifiability,"Hi @bozkaya, I agree that if/else blocks everywhere are not something anyone wants to see for your code. But I believe the trend with C++ code is toward greater abstraction so that the same code can cover more uses. Perhaps I didn't choose a fitting example above, but various people who have looked into DFOCC have been alarmed at the seemingly repeated code and numerous data structures. So maybe, as you say, when the individual methods are working as you want them, a consolidation and refactoring step could be useful. CCSD(T) gradients sound exciting!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/382#issuecomment-221353542:490,refactor,refactoring,490,https://psicode.org,https://github.com/psi4/psi4/pull/382#issuecomment-221353542,1,['refactor'],['refactoring']
Modifiability,"Hi @hokru, I uploaded `psi4/label/dev::dftd4-3.5.0` packages (py intf present, so these are equiv to `conda-forge::dftd4-python` and tried out this branch with a mix of packages so that I could add some more helpful error messages. So there's one commit here and two over at qcengine. Also I hopefully got around all the CI checks here, but we'll see. Locally, this passes with `c-f::gcp-correction` and `psi4::dftd4`. ```; # Any line starting with the # character is a comment line; #! Sample HF/cc-pVDZ H2O computation. memory 600 mb. molecule h2o {; O ; H 1 0.96; H 1 0.96 2 104.5; }. set basis cc-pVDZ; ene = energy('r2scan-d4'); compare_values(-76.38149185, ene, 6, 'asdf'). energy('r2scan-3c/') # slash unsets basis from above; compare_values(-76.41834614, variable('SCF TOTAL ENERGY'), 6, 'SCF energy') #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360:763,variab,variable,763,https://psicode.org,https://github.com/psi4/psi4/pull/2842#issuecomment-1444523360,1,['variab'],['variable']
Modifiability,"Hi @susilehtola, I was looking around the Fedora packaging site to see if there was a download counter. Didn't find one but did notice a few details from your build scripts that could be updated:. * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n45 actually need Py >= 2.7, as I'm not holding back from dictionary comprehensions; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n19 more simply, `psi4/psi4`, though github re-directs; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n107 It's on by default anyway, so no change, but wrong variable https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L99; * http://pkgs.fedoraproject.org/cgit/rpms/psi4.git/tree/psi4.spec#n109 not sure if this is still working. May need to be `-DLAPACK_LIBRARIES=...`. Is there actually a monitor that you know of for Fedora package downloads? We like to track them for grant reviews.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/631#issuecomment-284125806:592,variab,variable,592,https://psicode.org,https://github.com/psi4/psi4/issues/631#issuecomment-284125806,1,['variab'],['variable']
Modifiability,"Hi Daniele. This combination is not supported. I think this functionality request is perhaps better aimed at the QCSchema developers (https://github.com/MolSSI/QCSchema/issues). One main issue is the ambiguity of what an extrapolation (or a composite recipe) actually means. Running CBS jobs via QCSchema is not implemented in Psi4, and my personal opinion is that it likely won't be implemented in Psi4 itself anytime soon. What may happen is that someone will take the CBS functionality out of Psi4, adapt it to create ""schema"" jobs for each calculation required in a similar way we do internally in the CBS wrapper, and then combine the individual atomic results to arrive at the composite result.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792:502,adapt,adapt,502,https://psicode.org,https://github.com/psi4/psi4/issues/2198#issuecomment-868806792,1,['adapt'],['adapt']
Modifiability,"Hi David,. My CASPT2 plugin works on psi4-0.5, so I can do it on Monday in an hour, if; jet or lori are available on skype for questions. The actual core code; won't be that hard, it's mainly the changes in the periphery. Best wishes,; Sebastian; On 20 May 2016 16:02, ""David Sherrill"" notifications@github.com wrote:. > From a strategic point of view, the answer is yes, it would be a great; > addition.; > ; > However, it would depend on the technical details ... how much work it; > would be to get this working, how soon we could do it, etc. I'll try to; > discuss with Lori and Daniel S.; > ; > We've already done a ""soft"" 1.0 release (not heavily advertized yet).; > ; > On Fri, May 20, 2016 at 6:46 AM, Sebastian Wouters <; > notifications@github.com; > ; > > wrote:; > > ; > > Are you interested in having DMRG-CASPT2 in the 1.0 release or do you; > > want; > > to stick to DMRG-SCF?; > > ; > > If you would like to, I can release an intermediate version v1.7, and you; > > can use the plugin (or copy parts of); > > ; > > https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrg.cc; > > to run the CASPT2 calculations...; > > ; > > —; > > You are receiving this because you are subscribed to this thread.; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/384; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/384#issuecomment-220613816",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/384#issuecomment-220670249:21,plugin,plugin,21,https://psicode.org,https://github.com/psi4/psi4/issues/384#issuecomment-220670249,2,['plugin'],['plugin']
Modifiability,"Hi Dr. Lehtola,. Would you be able to post the output file as well? I was hoping to know exactly what code you're using because there have been a lot of revisions to JK algorithm selection based on memory lately. This would help me look at the code block that selected your algorithm and possibly help with your first bug. This bug usually shows up when the user selects an ""SCF_TYPE"" and then doesn't supply an amount of memory that warrants Disk/core. The second bug isn't so much a bug as a troublesome name. MemDFJK is a JK build package that is optimized to work in the case that there is enough core memory to hold the 3-index integral tensors, and DiskDFJK is a JK build package that we found performs better in the case where these tensors have to be read from disk. They were named after the cases in which they worked best for us not for their capabilities or limitations. . That being said, each of these packages has machinery to handle both in-core and disk-based integral handling. Psi4 chooses the package based on the value of the memory_ variable, and each package should then use the algorithm (""Disk"" or ""Core"") that best fits the case.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352:1055,variab,variable,1055,https://psicode.org,https://github.com/psi4/psi4/issues/1666#issuecomment-503206352,1,['variab'],['variable']
Modifiability,"Hi Jerome,; It was mostly a difficulty in getting the DFT orbital-Hessian vector code accessible in the right places. I had planned on improving that section so it could do mixed input Wavefunctions (RKS, UHF, ROHF, etc). Probably will not get around to it now. . It's also a neat experiment in mixing of high and low level languages in relation to the readability of code. . -Daniel Smith; Sent from my iPhone. . > On May 10, 2017, at 15:34, jgonthier <notifications@github.com> wrote:; > ; > Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least.; > ; > Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub, or mute the thread.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300648648:767,rewrite,rewrite,767,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300648648,1,['rewrite'],['rewrite']
Modifiability,"Hi Luca,. (1) You of course always need to calculate the O(n^4) two-electron; integrals in the AO basis. The cost reduction is achieved by not performing; the total O(n^5) two-electron integral rotation. (2) I think it is best if you figure out which lines to copy where. Else I; might as well have written the plugin. The reason why I answer all these; questions, instead of doing it myself in 10 min, is because I hope you; learn something from my hints. (3) The number of variables in the x-matrix is the number of independent; parameters which characterize an orthogonal orbital rotation. It are the; parameters x from the 1981 Siegbahn paper on CASSCF. They connect only; orbitals which belong to the same irreducible representation b.t.w. (4) I have no idea what the buckets are in the integral rotation. Best,; Sebastian. 2015-05-26 2:26 GMT+02:00 lucamontana notifications@github.com:. > Dear Sebastian,; > ; > I think that the problem is rather related to PSI4 than dmrg. Just look at; > the example you provided for water molecule :; > ; > Number of atoms: 3; > Number of AO shells: 9; > Number of SO shells: 7; > Number of primitives: 22; > Number of atomic orbitals: 13; > Number of basis functions: 13; > ; > Number of irreps: 4; > Integral cutoff 0.00e+00; > Number of functions per irrep: [ 7 0 4 2 ]; > ; > OEINTS: Overlap, kinetic, potential, dipole, and quadrupole integrals; > stored in file 35.; > ; > Computing two-electron integrals...done; > Computed 1270 non-zero two-electron integrals.; > Stored in file 33.; > ; > Calling plugin fcidump.so.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 1; > Transforming the one-electron integrals and constructing Fock matrices; > Starting first half-transformation.; > Sorting half-transformed integrals.; > First half integral transformation complete.; > Starting second half-transformation.; > Two-electron integral transformation complete.; > Created the file H2O.631G.FCIDUMP; > ; > As you",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105429617:311,plugin,plugin,311,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105429617,2,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,"Hi Luca,. It might not be the most readable code, but lines 635-660 of https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc define different orbital spaces to perform transformations in. Also: If you really want to keep orbitals doubly occupied, it is better to take Coulomb and exchange contributions into account in a different way. Typically:; 1. Calculate the 1-RDM of docc orbitals in MO space (diagonal matrix with 2's and 0's).; 2. Rotate the 1-RDM to AO space with the orbital coefficients; 3. Contract the 1-RDM in AO space with the 2-electron integrals in AO space to the JK contribution of the Fock operator in the AO space; 4. Rotate the JK contribution in AO space to MO space with the orbital coefficients. This is done to avoid rotation of the 2-electron integrals from the AO space to the docc MO space. What I described above is implemented in the routines; 1. buildQmatOCC - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L219; 2. buildJK - https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L153. If you want a FCIDUMP file for an active space, I think the easiest would be to strip off the DMRG calculation from the dmrgscf.cc plugin, and copy paste the FCIDUMP print statements from the fcidump.cc plugin. The active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 778: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L778. And the localized active space CASCI/DMRGCI Hamiltonian can be found in the HamDMRG object just AFTER line 811: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgscf.cc#L811, if you specified ""LOC"" as the active space type. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105167250:1245,plugin,plugin,1245,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105167250,2,['plugin'],['plugin']
Modifiability,"Hi Luca,. ```; How can i obtain a FCIDUMP for a desired active space using fcidump.cc plugin ???; You mention here : http://sebwouters.github.io/CheMPS2/inoutput.html; ```. As I have told you in a previous mail, my FCIDUMP plugin to psi4 only dumps out the entire Hamiltonian. If you want a plugin which writes out the Hamiltonian for a given active space, I encourage you to write it yourself. You can either modify the FCIDUMP plugin, with the help of the DMRG-SCF plugin, so that you can print out specific active space Hamiltonians. As an alternative (which is the way I advise you to take), you can strip the DMRG-SCF plugin and copy in the FCI print lines from the FCIDUMP plugin. ```; ""The σ-orbitals are kept frozen at the RHF/6-31G level of theory, and the active space consists of 28 RHF/6-31G π-orbitals"" but how did you keep the sigma orbitals frozen ?; ```. The specific example of the pi-space of a polyene, where the doubly occupied RHF/6-31G sigma-orbitals are kept doubly frozen, can be done by using the DMRG-SCF plugin to do DMRG-CI calculations. As we have discussed, this can be done setting the variable `dmrgscf_max_iter` to 1 in the psi4 input file. You should also set `dmrgscf_active_space` to LOC and `dmrgscf_loc_random` to true, as well as use the `Cs` point group for the planar polyene. Using this point group is imperative to obtain localized pi-orbitals along the one-dimensional polyene. The number of frozen doubly occupied and active orbitals per irrep can then be specified in resp. the arrays `frozen_docc` and `active`. Best wishes,; Sebastian",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105276187:86,plugin,plugin,86,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105276187,9,"['plugin', 'variab']","['plugin', 'variable']"
Modifiability,"Hi all! I did a little more exploration into this. It seems that, as I suspected, there are other grid configurations that can crash COSX. From the testing I did, here are some different combinations of pruning scheme and spherical points that crash the COSX code:. ROBUST: 74, 146, 230, 266; TREUTLER: 74, 230, 266; NONE: 74, 230, 266 . Given that I set these spherical points for the initial COSX grid and that the resulting exception was a DSYEV failure, as in the initial posting of this issue, my guess is that these grid configurations lead to negative weights, as well. It seems that, overall, the observed crashing is more dependent on the number of spherical points in the grid than the pruning scheme itself, although the latter has some impact.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214:103,config,configurations,103,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1468093214,2,['config'],['configurations']
Modifiability,"Hi all,. I am getting the following error while running a DMRG calculation. I am using version 1.1rc1. > `###########################################################; > ### ###; > ### DMRG-SCF ###; > ### ###; > ### CheMPS2 by Sebastian Wouters ###; > ### https://github.com/SebWouters/CheMPS2 ###; > ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; > ### ###; > ###########################################################; > ; > Number of variables in the x-matrix = 22549; > CheMPS2 output is temporarily written to the file singlet.dmrg.out.chemps2 and will be copied here.; > Presorting SO-basis two-electron integrals.; > Sorting File: SO Ints (nn|nn) nbuckets = 47; > ; > Traceback (most recent call last):; > File ""/home/AzureUser/psi4conda/bin/psi4"", line 247, in <module>; > exec(content); > File ""<string>"", line 100, in <module>; > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/driver.py"", line 454, in energy; > wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); > File ""/home/AzureUser/psi4conda/lib//python3.5/site-packages/psi4/driver/procrouting/proc.py"", line 3081, in run_dmrgci; > dmrg_wfn = core.dmrg(ref_wfn); > ; > RuntimeError:; > Fatal Error: PSIO Error; > Error occurred in file: /scratch/psilocaluser/conda-builds/psi4_1491459515796/work/psi4/src/psi4/libpsio/error.cc on line: 128; > The most recent 5 function calls were:; > ; > psi::PsiException::PsiException(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, char const*, int); > psi::psio_error(unsigned int, unsigned int); > psi::PSIO::rw(unsigned int, char*, psi::psio_address, unsigned long, int); > psi::IntegralTransform::presort_so_tei(); > psi::IntegralTransform::transform_tei_first_half(std::shared_ptr<psi::MOSpace>, std::shared_ptr<psi::MOSpace>); > ; > ; > *** Psi4 encountered an error. Buy a developer more coffee!; > *** Resources and help at github.com/psi4/psi4.`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2102:447,variab,variables,447,https://psicode.org,https://github.com/psi4/psi4/issues/2102,1,['variab'],['variables']
Modifiability,"Hi all,. I just built Psi4 on mac os x, and everything seem to build and test fine. However, in doing a calculation I received the following error: . ```; An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; OEProp.__init__(OEProp, str); did not match C++ signature:; __init__(_object*, boost::shared_ptr<psi::Wavefunction>): File ""<string>"", line 28, in <module>. File ""/usr/local/psi4/share/psi4/python/p4util/util.py"", line 41, in oeprop; oe = psi4.OEProp(wfn); ```. Input was:. ```; import psi4. molecule {; C 0.012220093121 -0.717626540721 0.000000000000; O -0.062545506204 0.679938040344 0.000000000000; H 0.518735639503 -1.098516178616 0.883563931671; H 0.518735639503 -1.098516178616 -0.883563931671; H -1.002097021106 -1.091505681690 0.000000000000; H 0.811765758420 1.042084199023 0.000000000000; }. set globals {; basis 6-31g*; }. energy('scf'); oeprop(""MULLIKEN_CHARGES""); ```. Commenting out the `oeprop` line not surprisingly gets rid of the error. . I doubt any of the rest of this matters, but... I did get two errors building, in case they're relevant, but I've seen them in other open issues:. ```; The following tests FAILED:; 254 - pywrap-opt-sowreap (Failed); 263 - sapt4 (Failed); Errors while running CTest; make: *** [test] Error 8; ```. Command used to configure: `./setup -DBUILD_CUSTOM_BOOST=TRUE --python /usr/bin/python objdir`; Compiler: gcc/g++/gfortran from hpc.sourceforge.net; OS: OS X 10.10.5",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/260:1332,config,configure,1332,https://psicode.org,https://github.com/psi4/psi4/issues/260,1,['config'],['configure']
Modifiability,"Hi all,. I've tried to build psi4-0.5 with the intel compiler but it fails. Config:. ```; CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_CHEMPS2=ON; -- The CXX compiler identification is Intel 16.0.0.20150815; -- The C compiler identification is Intel 16.0.0.20150815; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc; -- Check for working CXX compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icpc -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc; -- Check for working C compiler: /opt/intel/compilers_and_libraries_2016.0.109/linux/bin/intel64/icc -- works; -- Detecting C compiler ABI info; -- Detecting C compiler ABI info - done; -- Performing Test _HAS_CXX11_FLAG; -- Performing Test _HAS_CXX11_FLAG - Success; -- Found following supported C++11 features:; -- __func__; -- auto; -- auto_ret_type; -- constexpr; -- cstdint; -- decltype; -- initializer_list; -- lambda; -- long_long; -- nullptr; -- rvalue-references; -- sizeof_member; -- static_assert; -- variadic_templates; -- Checking for restrict keyword; -- keyword found : __restrict__; -- Performing Test has_xHost; -- Performing Test has_xHost - Success; -- Try OpenMP C flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Try OpenMP CXX flag = [-qopenmp]; -- Performing Test OpenMP_FLAG_DETECTED; -- Performing Test OpenMP_FLAG_DETECTED - Success; -- Found OpenMP: -qopenmp ; -- Math lib search order is MKL;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/opt/intel/compilers_and_libraries_2016.0.109/linux/mkl; -- Found BLAS: MKL (-Wl,--start-group;/opt/intel/compilers_an",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:76,Config,Config,76,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['Config'],['Config']
Modifiability,"Hi everyone,. I newly compiled Psi4 Rev {master} d7d117e pulled from the latest Master, with Intel MKL 2018.1.163 and GNU compilers version 5.4.0. I used the following cmake options to try to get most of the optional modules and get CheMPS2 interprocedural optimization to work:; cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_AR=/usr/bin/gcc-ar -DCMAKE_RANLIB=/usr/bin/gcc-ranlib. Everything configures and builds like a charm, then all tests run except those that seem to end with a segfault shortly before the 2-RDM computation starts:; 401 - v2rdm_casscf-v2rdm1 (Failed); 402 - v2rdm_casscf-v2rdm2 (Failed); 403 - v2rdm_casscf-v2rdm3 (Failed); 404 - v2rdm_casscf-v2rdm4 (Failed); 405 - v2rdm_casscf-v2rdm5 (Failed); 406 - v2rdm_casscf-v2rdm6 (Failed). make pytest shows all non-skipped tests passed. I also see ; 363 - dft-custom-hybrid (Failed); but this one is because the GCP software is not installed so I guess the test should have been skipped in this case. I don't actually need to run 2-RDM computations but I thought I should let you know.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/905:591,config,configures,591,https://psicode.org,https://github.com/psi4/psi4/issues/905,1,['config'],['configures']
Modifiability,"Hi everyone,. I'm on 1.4 and have cherry-picked in the changes from 9163cbd08865d26129cfbaf5c302fc14f870f30f. I'm building from source, as may be relevant to the MKL issues listed in #2283 I'm building with mkl/2019.0.117 (and stuck here for a bit because of my need for MKL_DEBUG_CPU_TYPE to continue to _work_). In addition, I have gcc/9.2.0 and icc/2020.2-108 going in my build env, with the C and CXX and Fortran compilers set to the intel compilers in my cmake config options. I'm running calculations with wB97M-V and was noticing the same issues @jminuse was. After cherry-picking and recompiling the issue persists. Adding `set wcombine false`, as suggested by @andysim makes the issue go away. . Without `set wcombine false`:; ```...; ==> Integral Setup <==; ; DFHelper Memory: AOs need 4.329 GiB; user supplied 4.329 GiB. Using in-core AOs.; ...; ==> Iterations <==; ; Total Energy Delta E RMS |[F,P]|; ; @DF-RKS iter SAD: -306.90903258181044 -3.06909e+02 0.00000e+00 ; @DF-RKS iter 1: -308.38044687527724 -1.47141e+00 1.27547e-03 DIIS; @DF-RKS iter 2: -308.40241691478502 -2.19700e-02 1.31335e-03 DIIS; @DF-RKS iter 3: -308.53663731037796 -1.34220e-01 4.92966e-04 DIIS; @DF-RKS iter 4: -308.55582354785412 -1.91862e-02 1.78690e-04 DIIS; @DF-RKS iter 5: -308.55841981379780 -2.59627e-03 4.24843e-05 DIIS; @DF-RKS iter 6: -308.55870799442886 -2.88181e-04 2.96248e-05 DIIS; @DF-RKS iter 7: -308.55881660865606 -1.08614e-04 1.50957e-05 DIIS; @DF-RKS iter 8: -308.55887443471090 -5.78261e-05 8.58740e-06 DIIS; @DF-RKS iter 9: -308.55891429039167 -3.98557e-05 5.23007e-06 DIIS ; @DF-RKS iter 10: -308.55893438187678 -2.00915e-05 3.97102e-06 DIIS ; @DF-RKS iter 11: -308.55897076821287 -3.63863e-05 3.09810e-06 DIIS ; @DF-RKS iter 12: -308.55899251437626 -2.17462e-05 1.29222e-06 DIIS ; @DF-RKS iter 13: -308.55899611302931 -3.59865e-06 5.63064e-07 DIIS ; @DF-RKS iter 14: -308.55899645885273 -3.45823e-07 2.29741e-07 DIIS ; Energy and wave function converged.; ```. And with `set wcombine false`:",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182:466,config,config,466,https://psicode.org,https://github.com/psi4/psi4/issues/2279#issuecomment-931478182,1,['config'],['config']
Modifiability,"Hi guys,. @raimis found this bug and we are adapting to it on our code, but I find it kind of an ugly workaround. Have you experienced it?. @raimis, can you provide some more details? Thanks!. João",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817:44,adapt,adapting,44,https://psicode.org,https://github.com/psi4/psi4/issues/817,1,['adapt'],['adapting']
Modifiability,"Hi!; thank you, this is an interesting point and I am sure other code developers will raise the same issue. One of the main goals of TREXIO is to make it easy for different codes to exchange data. However, I understand that Psi4 may have specific needs that may not be included in the current version of TREXIO. One solution could be to use HDF5 for temporary files and store the final results with TREXIO. . But:; a better option is to fork TREXIO and extend it to fit Psi4's specific needs.; You could add your personal temporary arrays in a specific group named `psi4` for example, and link your own library with psi4. Additionally, if any modifications prove to be useful to other codes, they can be submitted as pull requests to the official library. The good thing with this strategy is that as long as you don't remove anything from the `trex.org` file, the files that you will produce will be detected as valid TREXIO files. Of course, there will be no way to access your specific data with the official library, but the files will be compatible with both the official and the custom library. @q-posev : We could think of a mechanism to generalize the possibility to extend the library for private data. Instead of reading only `trex.json`, we could let the script handle multiple json files to allow users to extend the library with custom groups. It could probably be integrated at the level of the configure script. In this way, @JonathonMisiewicz would only need to keep a JSON file in the git repo of psi4 to extend TREXIO instead of maintaining a fork of TREXIO and keeping his fork in sync with the official one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906:453,extend,extend,453,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1396161906,5,"['config', 'extend']","['configure', 'extend']"
Modifiability,"Hi, . I was doing the Energy surface scan in PSI4. . The surface scan worked well when there is no dummy atom in the z-matrix.; However, when I added a dummy atom in the z-matrix, the geometries are updated correctly. ; I have attached the input and output files with a dummy atom. . Thank you. Yiling . Input ; ```; # water and na, R is the distance variable for Rvals; memory 1000 mb. molecule dimer {; 0 1; O1 4.70071 0.00000 0.00000; H1 4.11483 0.00000 0.75695; H2 4.11483 0.00000 -0.75695; --; 1 1; X O1 R H1 125.25 H2 180.0; NA X 0.1 O1 180.0 H2 180.0; }. # set the scan variable of R above, ex: distance, manually/automatically assign; # ----------------------------------------------------------------; def frange(start, stop, step): ## do not change the section of def frange; 	i = start; 	while i < stop:; 		yield i; 		i += step; # ----------------------------------------------------------------; # Rvals=[2.5, 3.0, 4.0] ## manually assign the variable, ex: distance at 2.5, 3.0 and 4.0 anstrom; Rvals=[]; for j in frange(1.4, 1.9, 0.1): ## automatically assign the variable; the endpoint will not be performed; 	Rvals.append(round(j,2)) ## decimal is 2. ; # basis set; # ----------------------------------------------------------------; ##set basis <basisset>; set basis 6-31G(d). set guess sad; set scf_type df; set freeze_core false ## false for ions; ####cp(""df-mp2"") ## moved to below. # get the energy at each variable; # ----------------------------------------------------------------------------; # Initialize a blank dictionary of counterpoise corrected energies; # (Need this for the syntax below to work). ecp = {}; for R in Rvals:; dimer.R = R; ecp[R] = energy(""mp2"", bsse_type = ""cp"") ## for new version; #ecp[R] = cp(""df-mp2"") ## for beta version; e= ecp[R] * psi_hartree2kcalmol; psi4.print_out(""R, E_int [kcal/mol]: %3.1f %10.6f\n"" % (R, e)). # print out all the energies; # ----------------------------------------------------------------------------; psi4.print_out(""\n"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2880:351,variab,variable,351,https://psicode.org,https://github.com/psi4/psi4/issues/2880,3,['variab'],['variable']
Modifiability,"Hi, @raimis. We did use Boost until a couple of years ago. Its primary role was to link the C++ layer to Python, but it became extremely annoying to support and we ripped it out, using the header-only Pybind11 instead. A *lot* of users ran into build problems with mismatches in the boost versions found at configure time and that linked at compile time. These kinds of problems are easy to encounter if multiple boost implementations are available on a system, and the errors that result are very cryptic. For this reason, we went to a lot of trouble to remove all traces of Boost and it would be best not to reintroduce if possible. Looking at the list of problematic features quickly, they seem like they could be handled in C++11 (chrono library) or in the python layer. Would it be easy in your estimation to just compile away the time reporting for MSVC builds, and we can make a different PR later on to reintroduce them by using C++11 instead? Same for the stack trace. I'm not sure how/where the filesystem is used, so that could be a trickier one to handle - I'll look at it when I get a chance. We were trying to migrate OS interactions like filesystem stuff from C++ to Python where possible, so this could be good motivation for us to start seriously looking at doing so. Thanks again for your hard work with the MSVC conversion - it looks like you've had a lot of work to do. I'm not trying to make life harder for you, but I think it's fair to say that our experience with Boost was quite negative in the later years, so it is worth debating alternatives.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-403834794:307,config,configure,307,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-403834794,1,['config'],['configure']
Modifiability,"Hi,. I am running Psi4 on Microsoft Azure. We have a 32 CPU and 128 GB of memory for running our workflow Ubuntu 20.04. When I run our code I get for optimizing `psi4.optimize` I get an initial segmentation fault. Python version 3.7, and psi4 version 1.7. It's odd because with . psi4.set_memory('128GB'); psi4.get_memory(). I can see psi4 has that allocated memory. When I run:. `psi4 --test`. ```; /_pytest/config/__init__.py"", line 620, in _importconftest; assert mod not in mods; AssertionError; ```. This gets returned. What is going on here, any hints?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3154:409,config,config,409,https://psicode.org,https://github.com/psi4/psi4/issues/3154,1,['config'],['config']
Modifiability,"Hi,. I encountered the following error message after I did the --test after installation. ""_ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_addons.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_dft_benchmarks.py _; 'scf' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_fcidump_energy.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_molecule_to_string.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_psi4.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_qcvars.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_solvers.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_excitations.py _; 'unrestricted' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_tdscf_products.py _; 'unittest' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vector.py _; 'quick' not found in `markers` configuration option; _ ERROR collecting envs/p4env/lib/python3.7/site-packages/psi4/tests/test_vibanalysis.py _; 'quick' not found in `markers` configuration option; "". I am wondering what the issues are, and if the issues are just with the test files. Thanks. JJ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1902:209,config,configuration,209,https://psicode.org,https://github.com/psi4/psi4/issues/1902,11,['config'],['configuration']
Modifiability,"Hi,. I have been using psi4 on its own for a while and now I am looking to extend its utility by adding more optional plugins as displayed in the https://psicode.org/installs/v182/# such as ambit, chemps2, etc. I am a bit confused about how these are implemented. Do I have to manually reinstall psi4 from source? I am asking since I could not find a straightforward way add those to my existing psi4.; ![conda_ovals installer](https://github.com/psi4/psi4/assets/137749626/6e189615-b2c2-4d67-8fcb-d4eeeb54ae06). Many thanks in advance!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094:75,extend,extend,75,https://psicode.org,https://github.com/psi4/psi4/issues/3094,2,"['extend', 'plugin']","['extend', 'plugins']"
Modifiability,"Hi,. I tried to install release 1.0 from source. The setup script that configures the installation stops with some errors (the entire log of the configuration attempt is at the bottom of this post). Errors:. ```. CMake Error at tests/cubeprop/CMakeLists.txt:2 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_1_1-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:3 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_2_2-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:4 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_3_1-B2.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:5 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_4_3-A1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:6 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Psi_a_5_1-B1.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:7 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Da.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:8 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Db.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:9 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Ds.cube.ref"". CMake Error at tests/cubeprop/CMakeLists.txt:10 (file):; file COPY cannot find; ""/scratch/appssf/psi4-1.0/tests/cubeprop/Dt.cube.ref"".; ```; The files that CMake tries to copy are not located in psi4-1.0/tests/cubeprop/. ```; [sfux@develop01 psi4-1.0]$ ls /scratch/appssf/psi4-1.0/tests/cubeprop/; CMakeLists.txt input.dat Psi_a_3_1-B2.cube.ref.REMOVED.git-id; Da.cube.ref.REMOVED.git-id output.dat.ref Psi_a_4_3-A1.cube.ref.REMOVED.git-id; Db.cube.ref.REMOVED.git-id output.ref Psi_a_5_1-B1.cube.ref.REMOVED.git-id; Ds.cube.ref.REMOVED.git-id Psi_a_1_1-A1.cube.ref.REMOVED.git-id; Dt.cube.ref.REMOVED.git-id Psi_a_2_2-A1.cube.ref.REMOVED.git-id; [sfux@develop01 psi",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/581:71,config,configures,71,https://psicode.org,https://github.com/psi4/psi4/issues/581,2,['config'],"['configuration', 'configures']"
Modifiability,"Hi,. I'm using DiskJK in a plugin: https://github.com/SebWouters/CheMPS2/blob/master/integrals/psi4plugins/dmrgci.cc#L292 . Does it reuse the existing disk AO integrals or does it recompute them? In case of the latter: How do I avoid this? Is there a way to fetch the JK from the wavefunction object or the environment?. Thank you for your time and answer!; Best,; Sebastian",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/65:27,plugin,plugin,27,https://psicode.org,https://github.com/psi4/psi4/issues/65,1,['plugin'],['plugin']
Modifiability,"Hi,. Since 0.3.530 or so, all of the difficulties that I've had about compiling plugins have been worked out. I'm sure there are other possible schemes, but the one I have now is a `configure` shell script that writes a `Makefile` using some information from the new `psi4-config` ([link](https://github.com/rmcgibbo/resp2/blob/master/configure)). The remaining plugin-related question I have now is about ""installation"". If I want to distribute this plugin to other users (it's really just the `<plugin_name>.so` file, I don't have any obligatory Python code), and make it easy for them to install, I'd like to make something like `conda install -c rmcgibbo <my_plugin>` work. If this were a standard Python module, I'd install the package with a Pyton wrapper to `lib/python2.7/site-packages/`, since that'll definitely be on `sys.path` -- is that what I should do here too? Or is there an alternative more psi4-specific location in `share/psi4/` where they would ideally go?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229:80,plugin,plugins,80,https://psicode.org,https://github.com/psi4/psi4/issues/229,6,"['config', 'plugin']","['config', 'configure', 'plugin', 'plugin-related', 'plugins']"
Modifiability,"Hi,. it seems I'm no longer able to compile the trunk. The error I get is; ```; CMake Error at src/CMakeLists.txt:90 (list):; list sub-command FIND requires three arguments. CMake Error at src/CMakeLists.txt:97 (if):; if given arguments:. ""STREQUAL"" ""/home/work/psi4/psi4/objdir/stage/home/work/psi4/install/lib"". Unknown arguments specified. -- Configuring incomplete, errors occurred!; ```. and I get it consistently even for a clean checkout and empty installation directory. The command I'm using is; ```; cmake -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DLAPACK_LIBRARIES=""-lopenblaso"" -DENABLE_AMBIT=OFF -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_PCMSolver=OFF -DCMAKE_INSTALL_PREFIX=/home/work/psi4/install -DCMAKE_AR=""/usr/bin/gcc-ar"" -DCMAKE_RANLIB=""/usr/bin/gcc-ranlib"" -DCMAKE_BUILD_TYPE=RelWithDebInfo ..; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/648:346,Config,Configuring,346,https://psicode.org,https://github.com/psi4/psi4/issues/648,1,['Config'],['Configuring']
Modifiability,"Hi,. we were recently reviving a PSI4 plugin that was used with an older version of PSI4. Now, we wanted to adapt it to the current development version and realized that the AOIntegralsIterator is hidden (?) in the library. Our fix was to add PSI_API to the class definition in `src/psi4/libmints/integral.h` . . However, for us, it would be easier if it would be accessible by default (mainly to use the conda install and avoid compilation every time). Is there a specific reason, why that class is excluded or hidden in the library? If no, we would be very grateful, if a developer would add it to the header file. . Thank you!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2239:38,plugin,plugin,38,https://psicode.org,https://github.com/psi4/psi4/issues/2239,2,"['adapt', 'plugin']","['adapt', 'plugin']"
Modifiability,"Hi,; I am just wondering if anyone could provide an example/instruction how to carry out (or if it is feasible to carry out) MRCI calculation using Psi4. In this paper (https://doi.org/10.1063/1.1867379), it sounded like that it was possible to carry out MRCI on Psi 3.2, but I couldn't find much information on the Psi4 manual (nor on the Psi3 manual) on how to do that calculation. I was able to obtain CASSCF energies and wavefunctions, and was going to just use the CASSCF wavefunction as the reference for MRCI calculation, but had little success in doing so. The followings are my code (python), trying to optimize the energy for the C state of the C2 molecule (which has two main configurations near its equilibrium bond length). The paper included above deals with the X, B, and B' state of C2, but those are not the states that I want. (I want the singlet C state). ## geometry; c2=psi4.geometry(""""""; 0 1; c ; c 1 1.25; symmetry d2h; """"""); ##. ## use the C-state main electron configuration as the reference for CASSCF; psi4.set_options({; 'basis': 'cc-pVdz',; 'reference': 'rohf',; 'docc': [2, 0, 0, 0, 0, 1, 0, 1],; 'socc': [0, 0, 0, 0, 0, 1, 1, 0],; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'mcscf_r_convergence': 5.e-6; }). psi4.set_module_options('detci',{; 'num_roots': 1,; 'calc_s_squared': True; }). casscf_energy, casscf_wfn = psi4.energy('casscf', return_wfn=True). #the code works up to this point. ## my way of feeding the casscf_wfn for another round of CI, but it did not work at all; psi4.set_options({; 'wfn': 'detci',; 'guess': 'gwh',; 'basis': 'cc-pVDZ',; 'restricted_docc': [1, 0, 0, 0, 0, 1, 0, 0],; 'active': [2, 0, 1, 1, 0, 2, 1, 1],; 'e_convergence': 10,; 'd_convergence': 10; }). thisenergy = psi4.energy('detci',ref_wfn=casscf_wfn). When I did the second round of CI, psi4 crashed. It got stuck at the ""Starting CI iterations"" part, with the error message ""Segmentation fault: 11"". I am quite new to Psi4, but hopefully I am ",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1907:687,config,configurations,687,https://psicode.org,https://github.com/psi4/psi4/issues/1907,2,['config'],"['configuration', 'configurations']"
Modifiability,"Hi,; I try to do a bunch of DFT single point energy calculations of small fragments on the university HPC cluster with a custom basis set.; After the first 20 or so calculations ran smoothly, every subsequent one failed with:; ```. PSIO_ERROR: unit = 35, errval = 5; PSIO_ERROR: 5 (file not open or open call failed); PSIO_ERROR:; PSIO_ERROR: Check the location of your scratch directory which can be; PSIO_ERROR: specified via the $PSI_SCRATCH environment variable or in; PSIO_ERROR: the $HOME/.psi4rc file.; PSIO_ERROR:; PSIO_ERROR: Please note that the scratch directory must exist and be; PSIO_ERROR: writable by Psi4; ```; Thats one example input:; ```; molecule {; 0 1; N -1.4457680611716 -1.1047188295845 0.49148092386593; C -0.19168175766337 -0.75584211512691 0.20898275954952; S 1.16737932640644 -1.82766284403922 0.14616844519932; C 2.16597045357598 -0.42448441793899 -0.26698146976982; N 1.54724741904672 0.67798068286713 -0.34204940942266; C 0.21550144939676 0.55519535899526 -0.0839857520715; C -0.70195776564886 1.65045791061703 -0.10441352532731; O -1.89802765802088 1.54782198311403 0.1259571991072; H -2.11563998092643 -0.33690782979021 0.4823163098176; H -1.71164622110861 -2.0497008550553 0.69762302601465; H 3.21537348272138 -0.55453850454389 -0.43220307841028; H -0.24675068660743 2.6223994604856 -0.34875937387462. no_reorient; no_com; }. # Set the basis set; set {; basis sdzhf; }. # Compute the energy and return the wavefunction; E, wfn = energy('WB97X-D', return_wfn=True). # Save the wavefunction to a file; wfn.to_file(""mol.wfn""); ```; and thats the last portion of the out:; ```; ==> Integral Setup <==. Traceback (most recent call last):; File ""/software/all/PSI4/1.3.2-foss-2020b/bin/psi4"", line 287, in <module>; exec(content); File ""<string>"", line 38, in <module>; File ""/software/all/PSI4/1.3.2-foss-2020b/lib//python3.8/site-packages/psi4/driver/driver.py"", line 556, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3069:457,variab,variable,457,https://psicode.org,https://github.com/psi4/psi4/issues/3069,1,['variab'],['variable']
Modifiability,"Hi; I created an environment, psi4, and run `conda activate psi4`; Here is what I got after I run `conda info`; ```. active environment : psi4; active env location : /home/tim/anaconda3/envs/psi4; shell level : 2; user config file : /home/tim/.condarc; populated config files : /home/tim/.condarc; conda version : 4.11.0; conda-build version : 3.21.4; python version : 3.8.8.final.0; virtual packages : __linux=5.10.0=0; __glibc=2.31=0; __unix=0=0; __archspec=1=x86_64; base environment : /home/tim/anaconda3 (writable); conda av data dir : /home/tim/anaconda3/etc/conda; conda av metadata url : None; channel URLs : https://conda.anaconda.org/ngsolve/linux-64; https://conda.anaconda.org/ngsolve/noarch; https://conda.anaconda.org/conda-forge/linux-64; https://conda.anaconda.org/conda-forge/noarch; https://repo.anaconda.com/pkgs/main/linux-64; https://repo.anaconda.com/pkgs/main/noarch; https://repo.anaconda.com/pkgs/r/linux-64; https://repo.anaconda.com/pkgs/r/noarch; package cache : /home/tim/anaconda3/pkgs; /home/tim/.conda/pkgs; envs directories : /home/tim/anaconda3/envs; /home/tim/.conda/envs; platform : linux-64; user-agent : conda/4.11.0 requests/2.26.0 CPython/3.8.8 Linux/5.10.0-1052-oem ubuntu/20.04.3 glibc/2.31; UID:GID : 1000:1000; netrc file : None; offline mode : False. ```. And this is after running `~/.condarc`:. `bash: /home/tim/.condarc: Permission denied`. I try with the command you proposed with a newly created environment, psi. `conda install psi4 python=3.9 psi4::libxc`. But it appears the same as I had shown you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761:219,config,config,219,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1005344761,2,['config'],['config']
Modifiability,"Hi~. Thanks for the responses. I create an environment and I run the command as you recommend ([link](https://psicode.org/installs/v15/)). `conda install psi4 python=3.9 -c psi4 `. But it still shows:. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: \ ; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed . UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions. Package python conflicts for:; psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.5,<3.6.0a0|>=3.6,<3.7.0a0|>=3.7,<3.8.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0']; python=3.9; psi4 -> libxc[version='>=5.1.5,<6.0a0'] -> python[version='3.4.*|>=3.10,<3.11.0a0|>=3.6|>=3.5|>=3.7|>=3.6.0|>=3.6,<3.7|>=3.4']The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.31=0; - feature:|@/linux-64::__glibc==2.31=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.31. Note that strict channel priority may have removed packages required for satisfiability.; ```. Is there anything wrong with my Ubuntu machine?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467:335,flexible,flexible,335,https://psicode.org,https://github.com/psi4/psi4/issues/2390#issuecomment-1004659467,2,['flexible'],['flexible']
Modifiability,"Hm, this is a bit odd. The failing function (`free_atom_volumes(wfn)`) really shouldn't be called since you're only requesting the charges. I've created a PR to fix this, in addition to fixing the larger issue with computing MBIS volume ratios via scf_properties. Interestingly, this code fails in your case since you pass a wavefunction to oeprop that doesn't have 'CURRENT ENERGY' as a set variable. My PR doesn't address that, though I could help out if you also want to compute the volume ratios.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833:392,variab,variable,392,https://psicode.org,https://github.com/psi4/psi4/issues/2299#issuecomment-984168833,1,['variab'],['variable']
Modifiability,"Hmm, I'm not seeing what you describe. At least the 2.2.3 version that psi builds by default installs correctly into `<objdir>/stage/`, not `/usr/local`. One thing that's concerning is your ""Built target pybind11_tests"". I don't know where that's coming from since https://github.com/psi4/psi4/blob/master/external/upstream/pybind11/CMakeLists.txt#L22 . ```; -- Suitable pybind11 could not be located, Building pybind11 instead.; ...; [ 50%] No patch step for 'pybind11_external'; [ 53%] No update step for 'pybind11_external'; [ 57%] Performing configure step for 'pybind11_external'; -- The CXX compiler identification is GNU 7.3.0; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++; -- Check for working CXX compiler: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/x86_64-conda_cos6-linux-gnu-g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Found PythonInterp: /home/psilocaluser/toolchainconda/envs/p4dev37/bin/python3.7 (found version ""3.7.1"") ; -- Found PythonLibs: /home/psilocaluser/toolchainconda/envs/p4dev37/lib/libpython3.7m.so; -- pybind11 v2.2.3; -- Configuring done; -- Generating done; -- Build files have been written to: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/external/upstream/pybind11/pybind11_external-prefix/src/pybind11_external-build; [ 61%] Performing build step for 'pybind11_external'; [ 65%] Performing install step for 'pybind11_external'; Install the project...; -- Install configuration: ""Release""; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/buffer_info.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/include/pybind11/chrono.h; -- Installing: /home/psilocaluser/gits/hrw-quaternary/objdir-gcc/stage/in",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966:546,config,configure,546,https://psicode.org,https://github.com/psi4/psi4/issues/1548#issuecomment-466729966,1,['config'],['configure']
Modifiability,"Hmm, okay. Not building with pcmsolver. I'll trying using the setup script, if that's the standard flow. I did look a lot at your conda recipe, and that's part of what got me confused. I think it has to do with caching of CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT when cmake is configured multiple times, but idk.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130116528:280,config,configured,280,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130116528,1,['config'],['configured']
Modifiability,"Hmm. I agree it is probably not worth spending a lot of time on, but for CMake noobs like me `-D SIMINT_VECTOR=...` not having any effect on its own is definitely surprising.; Looking at https://github.com/psi4/psi4/blob/ce8ce9a5e0fad4ebd2d5dee9b6d06b01047574b1/external/upstream/simint/CMakeLists.txt#L8; it appears as if there is a variable that already contains the string describing the vectorization type of the found simint binary. I have no idea how `simint_VECTOR` is (correctly) getting set to SSE, but _something_ must be somehow detecting that it is not the AVX default value set at ; https://github.com/psi4/psi4/blob/7afd2276795993fcfc7a769e5c2568d108678fc5/CMakeLists.txt#L167",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135:334,variab,variable,334,https://psicode.org,https://github.com/psi4/psi4/issues/2480#issuecomment-1069404135,1,['variab'],['variable']
Modifiability,"Hold off merging this, please. I'm going to rename the variables that @dgasmith mentioned today when I get a chance.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532#issuecomment-263862379:55,variab,variables,55,https://psicode.org,https://github.com/psi4/psi4/pull/532#issuecomment-263862379,1,['variab'],['variables']
Modifiability,"How about defining both, to catch typos/confusion, but only documenting those with syntax in line with existing variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/480#issuecomment-253959008:112,variab,variables,112,https://psicode.org,https://github.com/psi4/psi4/pull/480#issuecomment-253959008,1,['variab'],['variables']
Modifiability,"How did you get gau2grid (psi4 dependency) compiled without `mpmath`? There are ways around it, but simplest precaution is to make sure the python psi4 cmake is detecting (look in `<objdir>/CMakeCache.txt`; influence through `cmake -DPYTHON_EXECUTABLE=/full/path/to/bin/python`) and any conda-supplied psi dependencies are in the *same* conda environment and that that's active throughout cmake configure, `make`, `make install`, and runtime.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954#issuecomment-382181608:395,config,configure,395,https://psicode.org,https://github.com/psi4/psi4/issues/954#issuecomment-382181608,1,['config'],['configure']
Modifiability,How many of these plugins do you have? :-). Are we racing btwn you working through your plugin library and adding `PSI_API`s and me finishing off 1.2?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1049#issuecomment-399307593:18,plugin,plugins,18,https://psicode.org,https://github.com/psi4/psi4/pull/1049#issuecomment-399307593,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Huh, never mind the jobname bit then. I was changing various things so I must have been mistaken on that point. Ah, in tutorial.rst, there's a sentence below. That `sec:install_III_7` link is to a long-deceased file. Please replace that link with one to the ""7."" on the wiki page or anywhere else you think best covers the subject. ```; ""For your convenience, the above example can be found in :srcsample:`tu1-h2o-energy`. You can run it if you wish. Once |PSIfour| is in your path (see the :ref:`User Configuration <sec:install_III_7>` section""; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/361#issuecomment-212422557:502,Config,Configuration,502,https://psicode.org,https://github.com/psi4/psi4/pull/361#issuecomment-212422557,1,['Config'],['Configuration']
Modifiability,"I _was_ meaning SCS(N)-type variables, but after reading your comments, I've changed my mind again. While the number of spin-related variables on OCC's wavefunction object is _bad_, defining the same quantities multiple times throughout OCC is _worse_. That risks inconsistencies in the definitions and is another thing you need to check for when moving to qcdb. So the current plan (which is what I'll go with pending your objections) is to just use the variables already saved to OCC rather than re-computing them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480:28,variab,variables,28,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581686480,3,['variab'],['variables']
Modifiability,I agree that extending `_nbody_gufunc()` is probably the easier way to do this. I'll have a look at it next week.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/977#issuecomment-397192582:13,extend,extending,13,https://psicode.org,https://github.com/psi4/psi4/issues/977#issuecomment-397192582,1,['extend'],['extending']
Modifiability,"I agree with Holger about Psithon vs PsiAPI: work primarily in PsiAPI, but translate an input file to Psithon to show you _can_. Lori's topic list is a good one. Explicitly mention how to get orbitals and how to get variables (like the correlation energy) off the wavefunction.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2339#issuecomment-957650298:216,variab,variables,216,https://psicode.org,https://github.com/psi4/psi4/issues/2339#issuecomment-957650298,1,['variab'],['variables']
Modifiability,"I agree with nuking, none of these subroutines are used anywhere in Psi4. This PR will only be useful in the off chance that the bindings are being used by some plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1314#issuecomment-433448621:161,plugin,plugin,161,https://psicode.org,https://github.com/psi4/psi4/pull/1314#issuecomment-433448621,1,['plugin'],['plugin']
Modifiability,"I agree with you; there shouldn't be any normalisation applied to ECPs. When I put the ECP code in I wanted re-use as much of the existing basis set handling code as possible, in the spirit of the DRY principle. Unfortunately there are a few subtle differences between how Gaussian shells and ECPs should be handled; I thought I had caught them all, but I didn't get the normalisation right. Thank you very much for pointing it out and fixing it. The parsing machinery used to take several trips between Python and C++ layers, so I attempted to consolidate it all Py-side. In the process I may have left some stuff in there that's not needed, so cleanup like this is very welcome.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376511152:519,layers,layers,519,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376511152,1,['layers'],['layers']
Modifiability,"I also ran into lapack issues with libefp when trying to compile psi4 with the latest PGI compiler (16.10 community edition). I just checked your branch @loriab and libefp configures+builds normally, both with MKL and PGI blas (basically system_native). There are unrelated PGI issues that prevent a full psi4 build, but those are for another time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276692658:172,config,configures,172,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276692658,1,['config'],['configures']
Modifiability,"I am running some psi4 jobs which involve modifying the parameters DFT_VV10_B and DFT_VV10_C for various benzene dimer configurations. For several dimer configurations and several values of (b,c), I get an error telling me that ADIIS minimization failed, and asking me to file a bug report. I've prepared an example and put my input and output files below. Any help I could get would be wonderful—and please let me know if I can provide any more information that would be helpful! . Input file:; ```; set num_frozen_docc 12; set {; dft_vv10_b 0.06022547162926983; dft_vv10_c 0.7450476605857299; }; set {; basis def2-tzvppd; guess sad; dft_nuclear_scheme SBECKE; dft_radial_scheme EM; dft_radial_points 99; dft_spherical_points 590; dft_vv10_radial_points 50; dft_vv10_spherical_points 194; dft_pruning_scheme robust; }; set {; wcombine False; }; molecule mol {; 0 1; C -0.260781259973 -0.714012941782 1.022641061033; C 0.448798235138 -0.584866555587 1.116392879147; C 0.671191593804 0.158609920222 1.104026912627; C 0.177969561551 0.681404978559 1.093307893756; C -0.560580808895 0.542719215332 1.056079456761; C -0.776583606603 -0.133446136243 1.103859872549; H -0.442720873003 -1.244238976392 0.982141695030; H 0.874512929539 -0.960390442589 1.119149924166; H 1.217460053606 0.336381670040 1.046181387539; H 0.335297687566 1.281777775821 0.982193856028; H -0.948519039798 0.925731991759 1.117846063269; H -1.420111450991 -0.227880344246 1.099752848840; C -0.431336419082 -0.578608087844 -1.006105897774; C -0.616450380987 0.164556718463 -1.058443190817; C -0.158086394624 0.730699386222 -0.889727187104; C 0.484942144607 0.574229834356 -0.649010141458; C 0.688355917017 -0.142302467208 -0.581381981865; C 0.242793965654 -0.737031769438 -0.731596272801; H -0.732074019279 -1.008555512000 -1.147218404188; H -1.164258386631 0.206232540657 -1.161273694869; H -0.258581893650 1.331482152944 -0.817970826130; H 0.882404676284 0.994103603000 -0.554927857467; H 1.180331932734 -0.274347490367 -0.3724813932",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2641:119,config,configurations,119,https://psicode.org,https://github.com/psi4/psi4/issues/2641,2,['config'],['configurations']
Modifiability,"I am trying to build a psi4 plugin but I am getting pybind11 related error in cmake.; using`psi4 --plugin-name myplugin --plugin-template aointegrals`, followed by `cmake .`, I get the following error:; ```; -- The CXX compiler identification is GNU 5.2.0; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++; -- Check for working CXX compiler: /opt/apps/gcc/5.2.0/bin/g++ -- works; -- Detecting CXX compiler ABI info; -- Detecting CXX compiler ABI info - done; -- Detecting CXX compile features; -- Detecting CXX compile features - done; -- Psi4 script: /home/akumar1/newriver/installed/psi4/latest_psi4/bin/psi4; -- Psi4 headers: /home/akumar1/newriver/installed/psi4/latest_psi4/include; -- Psi4 library: /home/akumar1/newriver/installed/psi4/latest_psi4/lib//psi4/core.so; -- Psi4 components: ; -- Python executable: /home/akumar1/newriver/installed/python/bin/python3. CMake Error at ; /home/akumar1/newriver/installed/psi4/latest_psi4/share/cmake/psi4/psi4Config.cmake:142 ; (find_package):; Could not find a package configuration file provided by ""pybind11"" with any; of the following names:. pybind11Config.cmake; pybind11-config.cmake; ; Add the installation prefix of ""pybind11"" to CMAKE_PREFIX_PATH or set; ""pybind11_DIR"" to a directory containing one of the above files. If; ""pybind11"" provides a separate development package or SDK, be sure it has; been installed.; Call Stack (most recent call first):; CMakeLists.txt:35 (find_package); ```; I am up to date with the psi4's source code. Do I need to set a `CMAKE_PREFIX_PATH` specfically for locating pybind11 ? Please let me know if you need any more information.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775:28,plugin,plugin,28,https://psicode.org,https://github.com/psi4/psi4/issues/775,5,"['config', 'plugin']","['config', 'configuration', 'plugin', 'plugin-name', 'plugin-template']"
Modifiability,"I am trying to build psi4 using Intel 2017 compilers, gcc=5.4 on an Ubuntu system. - Tried with python version 2.7.2 as well as 3.5. (Following is with Python 3.5) **The error with Python 2.7 is same as following.** . - Also, tried gcc/g++ 4.9.3 version. Same problem persists. I have run this before starting to build;; ```; source /opt/intel/bin/compilervars.sh intel64; export MATH_ROOT=$MKLROOT; export LD_PRELOAD=/opt/intel/mkl/lib/intel64/libmkl_core.so:/opt/intel/lib/intel64/libiomp5.so. ```; The Error logs and output are attached (check bottom of the post). Any suggestions ? . ```; ./setup --prefix=""/home/vayu/ChemPackage/psi4/opt_ins"" --cc=icc --cxx=icpc --fc=ifort --mkl=parallel build; Configuring system: Ubuntu; cmake -DCMAKE_Fortran_COMPILER=ifort -DCMAKE_C_COMPILER=icc -DCMAKE_CXX_COMPILER=icpc -DENABLE_MPI=OFF -DENABLE_SGI_MPT=OFF -DENABLE_OMP=ON -DENABLE_VECTORIZATION=OFF -DENABLE_CSR=OFF -DENABLE_SCALAPACK=OFF -DENABLE_SCALASCA=OFF -DENABLE_UNIT_TESTS=OFF -DENABLE_STATIC_LINKING=OFF -DENABLE_PLUGINS=OFF -DENABLE_CXX11_SUPPORT=ON -DLIBINT_OPT_AM=5 -DEXECUTABLE_SUFFIX= -DENABLE_AUTO_BLAS=ON -DENABLE_AUTO_LAPACK=ON -DMKL_FLAG=""-mkl=parallel"" -DMKL_FLAG_SET=ON -DENABLE_AUTO_BLAS=OFF -DENABLE_AUTO_LAPACK=OFF -DCMAKE_INSTALL_PREFIX=/home/vayu/ChemPackage/psi4/opt_ins -DCMAKE_BUILD_TYPE=release /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0. -- User set explicit MKL flag which is passed to the compiler and linker: -mkl=parallel; -- This disables math detection and builtin math libraries; -- Setting -DHAVE_MKL_BLAS and -DHAVE_MKL_LAPACK; CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/scf.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Problem configuring file. CMake Error: File /home/vayu/ChemPackage/psi4/git_clone/psi4/psi4-1.0/doc/sphinxman/source/cfour.rst does not exist.; CMake Error at doc/sphinxman/CMakeLists.txt:22 (configure_file):; configure_file Proble",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/629:701,Config,Configuring,701,https://psicode.org,https://github.com/psi4/psi4/issues/629,1,['Config'],['Configuring']
Modifiability,"I am trying to install Psi4 with Conda on a Linux machine with Python 3.11. However, it does not seem like Python 3.11 is supported at this time despite the README badge showing 3.11. Are there plans to add a Python 3.11 Conda build in the near future?; ; ```; conda create --name psi4 python=3.11; conda activate psi4; conda install psi4 -c psi4; ```. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found; to be incompatible with the existing python installation in your environment:. Specifications:. - psi4 -> python[version='2.7.*|3.5.*|3.6.*|>=2.7,<2.8.0a0|>=3.10,<3.11.0a0|>=3.8,<3.9.0a0|>=3.9,<3.10.0a0|>=3.7,<3.8.0a0|>=3.6,<3.7.0a0|>=3.5,<3.6.0a0']. Your python: python=3.11. If python is on the left-most side of the chain, that's the version you've asked for.; When python appears to the right, that indicates that the thing on the left is somehow; not available for the python version you are constrained to. Note that conda will not; change your python version to a different minor version unless you explicitly specify; that. The following specifications were found to be incompatible with your system:. - feature:/linux-64::__glibc==2.35=0; - psi4 -> libgcc-ng[version='>=7.5.0'] -> __glibc[version='>=2.17']; - python=3.11 -> libgcc-ng[version='>=11.2.0'] -> __glibc[version='>=2.17']. Your installed version is: 2.35; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3031:486,flexible,flexible,486,https://psicode.org,https://github.com/psi4/psi4/issues/3031,2,['flexible'],['flexible']
Modifiability,"I am trying to run a porphyrin radical calculation with 1700 basis functions. I call dferi->compute() in my plugin and it seems that during the generation of the MO DF integrals, there is some sort of segmentation fault. I generate all of the MO integrals using density fitting. . I have a minimal plugin available to test this input. . The input is given below: . ```; memory 100 gb; molecule {; 0 1; C 0.68541667 0.00000000 4.17724008; C -0.68541667 0.00000000 4.17724008; C -1.07715949 0.00000000 2.85236290; C 1.07715949 0.00000000 2.85236290; N 0.00000000 0.00000000 2.03366350; C 2.35903958 0.00000000 2.45806358; C 2.81721573 0.00000000 1.05258796; N 2.05486054 0.00000000 0.01405448; C 2.88740001 0.00000000 -1.13057937; C 4.23537365 0.00000000 0.67022148; C 4.27600326 0.00000000 -0.70111647; C 2.48623109 0.00000000 -2.40919453; C 1.07657777 0.00000000 -2.84029441; N 0.00000000 0.00000000 -2.02366514; C -0.68542522 0.00000000 -4.16299454; C 0.68542522 0.00000000 -4.16299454; C -2.88740001 0.00000000 -1.13057937; N -2.05486054 0.00000000 0.01405448; C -2.81721573 0.00000000 1.05258796; C -4.23537365 0.00000000 0.67022148; C -4.27600326 0.00000000 -0.70111647; C -2.35903958 0.00000000 2.45806358; C -2.48623109 0.00000000 -2.40919453; C -1.07657777 0.00000000 -2.84029441; H 1.32705735 0.00000000 5.04949752; H -1.32705735 0.00000000 5.04949752; H 3.13133350 0.00000000 3.22359766; H 5.09358852 0.00000000 1.32905912; H 5.16675318 0.00000000 -1.31569036; H 3.24762417 0.00000000 -3.18492574; H -1.32960963 0.00000000 -5.03269392; H 1.32960963 0.00000000 -5.03269392; H -5.09358852 0.00000000 1.32905912; H -5.16675318 0.00000000 -1.31569036; H -3.13133350 0.00000000 3.22359766; H -3.24762417 0.00000000 -3.18492574; units angstrom; }. set {; reference rhf; scf_type DF; guess SAD; d_convergence 4; e_convergence 4; basis cc-pvqz; df_basis_mp2 cc-pvqz-ri; }. set dfmp2 {; print 1; }. energy('dfmp2'). dfmp2.exampleFN(); ```. My plugin is given below:. ```; /*; *@BEGIN LICENSE; *; * dfm",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/157:108,plugin,plugin,108,https://psicode.org,https://github.com/psi4/psi4/issues/157,2,['plugin'],['plugin']
Modifiability,"I am working with David Williams-Young to extend the features of his IntegratorXX and GauXC projects, which will enable access to modern quadrature grids in various programs. While going through the code in IntegratorXX, we noticed in https://github.com/wavefunction91/IntegratorXX/pull/27 that there is a potential discrepancy in the Chebychev roots in Psi4; ```; void RadialGridMgr::getChebychevRoots(int n, double r[], double w[]) {; double piOverNPlusOne = M_PI / (n + 1);; for (int i = 1; i <= n; i++) {; double x = cos(i * piOverNPlusOne);; r[i - 1] = x;; w[i - 1] =; piOverNPlusOne * sqrt(1.0 - x * x); // sqrt(1.0 - x*x) could've been replaced with sin(i*piOverNPlusOne).; }; }; ```. This should be compared to the Gauss-Chebychev rules on [Wikipedia](https://en.wikipedia.org/wiki/Chebyshev%E2%80%93Gauss_quadrature). The nodes clearly correspond to Chebychev quadrature of the second kind, but ; 1. the weights are from Gauss-Chebychev quadrature of the first kind and; 2. the factor to transform to unit weight is missing.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3004:42,extend,extend,42,https://psicode.org,https://github.com/psi4/psi4/issues/3004,1,['extend'],['extend']
Modifiability,"I and my colleagues are trying to transition into using JSON in- and output files for Psi4 to add another layer of structure to our database. We understand that this is a work in progress, but I can't find any examples of what would work for optimization and/or frequency calculations in the examples dir (https://github.com/psi4/psi4/tree/master/tests/json). I tried changing one of the example input files to adapt it to our own type of calculations, but I just get errors while running it using the --qcschema flag as I can't seem to get the structure of the JSON file right. Is there an unfinished guide on how to create these JSON files?. Let say I have a non-JSON file that looks like the following:; ```; molecule mol_water {; 0 1; O 0.000000000 0.000000000 0.117000000; H 0.000000000 0.763400000 -0.468100000; H 0.000000000 -0.763400000 -0.468100000. units angstrom; no_reorient; }. set globals {; basis aug-cc-pVTZ; dft_spherical_points 434; dft_radial_points 85; }. set_memory(25000000000). try:; optimize('pwpb95-d3bj'); except SCFConvergenceError as e:; unconverged_scf_wfn = e.wfn; unconverged_scf_wfn.to_file(unconverged_scf_wfn.get_scratch_filename(180)); set guess read; optimize('pwpb95-d3bj'). E, wfn = frequency('pwpb95-d3bj', return_wfn=True); print(wfn.frequencies().get(0, 0)); ```. How would it be expressed as a valid JSON file?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117:411,adapt,adapt,411,https://psicode.org,https://github.com/psi4/psi4/issues/2117,1,['adapt'],['adapt']
Modifiability,"I can fix v2rdm_casscf - I just pulled these new changes to psi. > On Jan 3, 2018, at 12:47 PM, Roberto Di Remigio <notifications@github.com> wrote:; > ; > I see it's the switch to a strong enum that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the v2rdm_casscf repository, wait for it to be applied and then update the plugin's version in this PR?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/872#issuecomment-355077662>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGh-i1i5u-bNJtPsuPz4wXRe-jUOGks5tG70_gaJpZM4QyuVF>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355082034:358,plugin,plugin,358,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355082034,1,['plugin'],['plugin']
Modifiability,"I can put in an `INSIST_FIND_PACKAGE` signal, but it'd probably be a universal one, as I'd rather not proliferate another set of variables. On the Libxc front, their development moved to GitLab (https://gitlab.com/libxc/libxc). I've added CMake to their build system, but their only official release since its been in (4.0, a few weeks ago) isn't compatible with Psi4 yet). So you're right that it's GH:loriab/libxc for now. But that repo should absolutely be installing `share/cmake/Libxc/LibxcConfig.cmake` and similar files. Note that [this line](https://github.com/psi4/psi4/blob/master/external/upstream/libxc/CMakeLists.txt#L21) has to be in place for Psi to work. I'm glad to look at your build directive if that'd help. There's also a conda package for Libxc, but that won't much interest you for packaging purposes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/854#issuecomment-343717373:129,variab,variables,129,https://psicode.org,https://github.com/psi4/psi4/issues/854#issuecomment-343717373,1,['variab'],['variables']
Modifiability,"I can work on this if you want. Also, Libplugin shouldn't be needed anymore. Justin. > On Jan 15, 2016, at 10:25 PM, Lori A. Burns notifications@github.com wrote:; > ; > A couple of years ago, psi4 was on GnuMake or 1st iteration CMake build system, so plugin building (at least the Makefile spit out) has definitely been updated since then.; > ; > Yes, I've been eyeing the libgcc conda package. Haven't tried it yet because I was so pleased to get the psi4-only binary down to only lc, ldl, lpthread, lrt, lutil system libraries. But it seems that some dynamic libgcc dependency may be necessary to assemble psi4 and add-ons and dependencies from other conda channels, so I'll likely give in soon.; > ; > Fortunately, that plugin Makefile is just a template (https://github.com/psi4/psi4public/blob/master/lib/plugin/Makefile.template), so if I can get plugins working development-environment-wise, adjusting the --new-plugin-makefile output won't be a problem.; > ; > —; > Reply to this email directly or view it on GitHub.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172192255:253,plugin,plugin,253,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172192255,5,['plugin'],"['plugin', 'plugin-makefile', 'plugins']"
Modifiability,I can't explain why the second instance is not reading the orbitals. A couple of quick tests that would be useful: a) does adding `set guess read` before the call to your plugin (and after the SCF call) change the behavior? and b) does the same thing happen if you call SCF instead of your plugin on the second function call?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/419#issuecomment-227780765:171,plugin,plugin,171,https://psicode.org,https://github.com/psi4/psi4/issues/419#issuecomment-227780765,2,['plugin'],['plugin']
Modifiability,"I can't quite figure out how to pass custom vectors via Psithon/PsiAPI using `psi4.properties`.; If I pass a list of vectors (e.g., dipole integrals), [this](https://github.com/maxscheurer/psi4/blob/1528bcfda6d55d32712f3e6be4b21a45abe90e55/psi4/driver/procrouting/proc.py#L2962) code block obviously fails... Directly passing vectors to `cpscf_linear_response` obviously works somehow, but I could not find anything in the test suite that explicitly covers the ""user-provided vector""-case at all... Are there any plugins/3rd party codes relying on calling `cpscf_linear_response` directly with custom vectors as arguments, @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2266#issuecomment-964890817:513,plugin,plugins,513,https://psicode.org,https://github.com/psi4/psi4/pull/2266#issuecomment-964890817,1,['plugin'],['plugins']
Modifiability,"I cannot use the default options provided by ../configure.cmake to finish compiling unless --with-ldflags='-lm' is added. With the default options, it complains; gcc: : No such file or directory; during compiling of libint_compiler. My platform is gcc-4.4, cmake-2.8.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/53:48,config,configure,48,https://psicode.org,https://github.com/psi4/psi4/issues/53,1,['config'],['configure']
Modifiability,"I compiled everything (including Chemps2) in the CMakeRewrite with gcc.; For the most gcc tends to be one of the more strict compilers so if you can; compile with it, you can compile with anything. Although this doesn't help; on the old build it does hopefully provide some solace.... Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 13, 2016 6:49 PM, ""Lori A. Burns"" notifications@github.com wrote:. > I'm not ignoring this issue so much as I hadn't gotten to CheMPS2 in the; > cmake rewrite until yesterday. I'll be sure to check it with g++. It's; > conceivable that it was only working with intel compilers.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/452#issuecomment-239645635, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi0ozNgFxkroLGTV-YLzxj6CxComLks5qfknrgaJpZM4JYrrg; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452#issuecomment-239647631:514,rewrite,rewrite,514,https://psicode.org,https://github.com/psi4/psi4/issues/452#issuecomment-239647631,1,['rewrite'],['rewrite']
Modifiability,"I completely agree. Right now CC properties go through OEProp, but from within the module. Moving that to python has been on my list for a while. . Setting the `ref_wfn` Da/Db in ccdensity is complicated because the `Psi::ccdensity::onepdm()` function is not a member of any class that inherits from `wavefunction`. . So, in order to do this there needs to be some hook opened up in the base class (ie `set_postscf_Da`). . A cleaner solution would be to re-organize the various cc\* modules into one module with the ccwavefunction playing the role the ""MOinfo"" and ""params"" structs. Though, that would be a much larger project.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/504#issuecomment-258885888:286,inherit,inherits,286,https://psicode.org,https://github.com/psi4/psi4/issues/504#issuecomment-258885888,1,['inherit'],['inherits']
Modifiability,"I confirmed that sapt8 got broken because we stopped storing `Ind20,u` in the `Ind20,r` variable in usapt0.cc. I am not sure where the `SAPT IND ENERGY` variable that is used for the test is defined. Does open-shell SAPT0 even go through `sapt_jk_terms.py` ? It seems like the code flow changed a bit since I implemented it.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364678447:88,variab,variable,88,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364678447,2,['variab'],['variable']
Modifiability,"I decided to take an intermediate step regarding this issue by making a PR wherein the error messages received upon breaking COSX with negative grid weights are more informative to the end user. Not a full fix, but at least with that, an end user that runs into this issue can know how to get around it. In the meantime, what do we all think the _best_ fix for this issue would be? Discussion in this chat has different reformulations of the X matrix to be able to handle grids with negative grid weights, while recent discussion in the Psi4 dev Slack has suggested the possibility of simply removing grid configurations that lead to negative weights. Which approach is the best, I do not immediately know. Also worth sharing in this chat, it seems that the negative grid weights that were observed as part of this issue, are _not_ an explicit bug, but rather a consequence of how the grids weights are determined.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013:606,config,configurations,606,https://psicode.org,https://github.com/psi4/psi4/issues/2890#issuecomment-1481617013,1,['config'],['configurations']
Modifiability,"I did a couple more things here:. 1) At the suggestion of the reviewers, I added individual reference energies for the current composite methods (which were acquired at tight tolerances - 1e-10 for D and E convergence, and 1e-14 for ERI screening). The COSX and LinK methods now test against these corresponding reference energies at the normal 1e-6 atol. . 2) With 1) in mind, I made more sweeping changes as well. First, the reference energies are now kept in a dictionary rather than spread out across different variables. This improves readability and should facilitate the addition of new methods, Composite or otherwise, to the scf5 testing suite. Additionally, composite methods are tested in a loop per test case. This will facilitate the testing of new Composite methods added to Psi4, as will happen in the future.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110:515,variab,variables,515,https://psicode.org,https://github.com/psi4/psi4/pull/2768#issuecomment-1310496110,1,['variab'],['variables']
Modifiability,"I didn't find the right fedora build log yesterday, so if it's online and you want a minimal patch, I'd appreciate a link. But, if you don't mind a heavy patch, the below for external/upstream/qcelemental/CMakeLists.txt worked fine locally for me just now. That is, psi4 (master) configured, _didn't_ build qcel, and detected it fine at runtime. ```; #if(NOT (${CMAKE_DISABLE_FIND_PACKAGE_qcelemental})); # include(FindPythonModule); # find_python_module(qcelemental ATLEAST 0.24.0 QUIET); #endif(); #; #if(${qcelemental_FOUND}); # message(STATUS ""${Cyan}Found qcelemental${ColourReset}: ${PY_qcelemental} (found version ${qcelemental_VERSION})""); add_library(qcelemental_external INTERFACE) # dummy; #; #else(); # if(${CMAKE_INSIST_FIND_PACKAGE_qcelemental}); # message(FATAL_ERROR ""Suitable qcelemental could not be externally located as user insists""); # endif(); #; # include(ExternalProject); # message(STATUS ""Suitable qcelemental could not be located, ${Magenta}Building qcelemental${ColourReset} instead.""); #; # file(TO_NATIVE_PATH ""${STAGED_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}${PYMOD_INSTALL_LIBDIR}"" _install_lib); #; # ExternalProject_Add(qcelemental_external; # BUILD_ALWAYS 1; # URL https://github.com/MolSSI/QCElemental/archive/v0.25.1.tar.gz; # CONFIGURE_COMMAND """"; # UPDATE_COMMAND """"; # BUILD_COMMAND ${Python_EXECUTABLE} setup.py build; # BUILD_IN_SOURCE 1; # INSTALL_COMMAND ${Python_EXECUTABLE} setup.py install; # --record=record.txt; # --single-version-externally-managed; # --install-lib=${_install_lib}); #endif(); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967:280,config,configured,280,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1670186967,1,['config'],['configured']
Modifiability,"I didn't try too hard to break it on public (which doesn't have wavefunction_pass) so it's possible this never appears before the infrastructure changes. But nevertheless, those changes on the whole are for the better, and it's disturbing that infrastructure changes + suitable tweaking to make the extensive occ/dfocc test suite pass can still hide a situation like this. `Ecorr`, `Emp2AA`, etc. are computed out of sight. ... Aha! Initializing variable (below) seems to help in https://github.com/psi4/psi4/blob/master/src/bin/dfocc/mp2_direct.cc#L90; Only affects UHF. Will continue explorations along these lines. ```; 121 if (mo_optimized == 0) Esosmp2AB = sos_scale * Emp2AB;; 122 else if (mo_optimized == 1) Esosmp2AB = sos_scale2 * Emp2AB;; 123 ; 124 Emp2_t1 = 0.0;; 125 if (reference == ""ROHF"" && orb_opt_ == ""FALSE"") {; 126 if (wfn_type_ == ""DF-OMP2"" || wfn_type_ == ""CD-OMP2"") {; 127 //Singles-contribution; 128 Emp2_t1 = 0.0;; 129 //Alpha; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/244#issuecomment-183550049:446,variab,variable,446,https://psicode.org,https://github.com/psi4/psi4/issues/244#issuecomment-183550049,1,['variab'],['variable']
Modifiability,"I don't have a solution, but thanks for the nice exposition of the problem. I'm a little troubled that your ""... after this point if hombrew boost is unlinked"" output doesn't have python. If any of `filesystem python regex serialization system timer chrono thread` are missing, it'll trigger building the prepackaged. Would you check again that _all_ those are present as `.a` in your anaconda package? I have gotten psi4 to link against pre-built boost conda packages before on Linux, so the problem is definitely not purely that (though it sounds like it could be an affinity to frameworks thing that crops up on Mac). If you don't have all those `.a`s but do have the `.so`s, you could try toggling https://github.com/psi4/psi4/blob/master/cmake/ConfigBoost.cmake#L14 . If the above comes up clean, would you want to try; `-DBoost_ADDITIONAL_VERSIONS=1.59 -DBOOST_ROOT=$HOME/anaconda/envs/psi4-py2.7` ? There's no particular reason it'd work, but it's covering a couple more bases.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313#issuecomment-196520712:749,Config,ConfigBoost,749,https://psicode.org,https://github.com/psi4/psi4/issues/313#issuecomment-196520712,1,['Config'],['ConfigBoost']
Modifiability,I don't see any issues cropping up. I should make some documentation updates though to inform users how `optking` inherits logging from `psi4`. Just that users should make sure to import psi4 before optking for optking to inherit logging from psi4.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923:114,inherit,inherits,114,https://psicode.org,https://github.com/psi4/psi4/pull/2932#issuecomment-1526303923,2,['inherit'],"['inherit', 'inherits']"
Modifiability,"I don't think the ROHF orbital energies are incorrect, but they're [ambiguously defined](https://aip.scitation.org/doi/10.1063/1.4849615) due to an arbitrary choice of coupling between same-symmetry closed and open shell blocks. We do have [CUHF](https://aip.scitation.org/doi/full/10.1063/1.3503173) available, which gives an S^2 eigenfunction (i.e. ROHF) with the orbital energies emerging the same as what would come from semicanonicalization; either that or the default ROHF (followed by semicanonicalization) should be equally good references for SAPT, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265:168,coupling,coupling,168,https://psicode.org,https://github.com/psi4/psi4/issues/1975#issuecomment-675473265,1,['coupling'],['coupling']
Modifiability,"I don't think you've pulled from github since the plugin fix was added. As long as your `printmo.cc` has `Process::environment.wavefunction();` in it, you'll keep getting this error. This (https://github.com/psi4/psi4/blob/master/share/plugin/mointegrals.cc.template) is the corrected template.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195795181:50,plugin,plugin,50,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195795181,2,['plugin'],['plugin']
Modifiability,"I dont have access to that paper at the moment, but a few notes for you:; - If you need to tweak functionals (@susilehtola this is a good example) please checkout [this](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/dft_funcs/hyb_superfuncs.py#L230) example. - For VV10 you can specify it via the python interface:; ```python; def build_myvv10_superfunctional(name, npoints, deriv, restricted):; sup = core.SuperFunctional.blank(); sup.set_name('HF+VV10'); sup.set_x_alpha(1.0). # Set VV10 parameters. If these are changed we assume you want VV10.; sup.vv10_b(...); sup.vv10_c(...). return sup. func_call = energy('SCF', dft_functional= build_myvv10_superfunctional); ```. The DFT code is likely the most class/inheritance/convoluted C++ code we have besides perhaps integrals. So probably not a great place to start in :). . - Post-SCF only VV10 is a good idea and just a matter of code logic. We need a flag somewhere that computes [this](https://github.com/psi4/psi4/blob/f03a896a2d70eac47137cf471dda4805e483586d/psi4/src/psi4/libfock/v.cc#L213) at the end of a SCF computation. The SCF iterations are in a bit of a state of flux due to the python porting; however, this should be pretty easy once merged as we have access to that Py-side.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/870#issuecomment-347998008:730,inherit,inheritance,730,https://psicode.org,https://github.com/psi4/psi4/issues/870#issuecomment-347998008,1,['inherit'],['inheritance']
Modifiability,"I dont seem to have made a PR with the fix. Anyway, now I can add it to the refactored code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1188#issuecomment-433605809:76,refactor,refactored,76,https://psicode.org,https://github.com/psi4/psi4/issues/1188#issuecomment-433605809,1,['refactor'],['refactored']
Modifiability,"I echo Daniel on using the Wavefunction.variables map for storage of the pcm energy. Eventually, Wfn.variables will be primary and P::e dropped, but for now, make them mirror. https://github.com/psi4/psi4/blob/master/doc/sphinxman/source/pcmsolver.rst seems a good place for all Psi4+PCMSolver documentation. And maybe mention on the CC page that CC+PCM is available if PCMSolver enabled.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/683#issuecomment-296845920:40,variab,variables,40,https://psicode.org,https://github.com/psi4/psi4/pull/683#issuecomment-296845920,2,['variab'],['variables']
Modifiability,"I forgot a rather important detail - when DFOCC says it is running all further computations in C1 symmetry, it does not just mean that spin-adapted orbitals won't be used. It even creates a C1 clone of the molecule. The `symmetrize_gradient` call symmetrizes to the C1 symmetry of the clone, not the symmetry of the molecule that went into the `gradient` call. As long as that symmetry-less molecule clone is used internally, I don't see how a fix for the issue would be possible.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1504#issuecomment-459012061:140,adapt,adapted,140,https://psicode.org,https://github.com/psi4/psi4/issues/1504#issuecomment-459012061,1,['adapt'],['adapted']
Modifiability,I found a copy of the function to computer the nuclear contribution to the dipole moment in the Molecule class. So I am going to leave that part of the refactoring for another PR. I think this is ready to go once all tests pass.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1400#issuecomment-444600475:152,refactor,refactoring,152,https://psicode.org,https://github.com/psi4/psi4/pull/1400#issuecomment-444600475,1,['refactor'],['refactoring']
Modifiability,"I get the following error when building psi4. ```; Scanning dependencies of target pcmsolver; [ 53%] Creating directories for 'pcmsolver'; [ 53%] Performing download step for 'pcmsolver'. [ 53%] No patch step for 'pcmsolver'; [ 53%] No update step for 'pcmsolver'; [ 53%] Performing configure step for 'pcmsolver'; CMake Error: The source directory ""/Users/sternc1/src/python-lib/psi4public/interfaces/pcmsolver"" does not appear to contain CMakeLists.txt.; Specify --help for usage, or press the help button on the CMake GUI.; make[2]: *** [interfaces/pcmsolver-stamp/pcmsolver-configure] Error 1; make[1]: *** [src/lib/libpsipcm/CMakeFiles/pcmsolver.dir/all] Error 2; make: *** [all] Error 2; ```. I used the following setup command:; `./setup --cc /usr/local/bin/clang-omp --cxx /usr/local/bin/clang-omp --fc /usr/local/bin/gfortran`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/199:283,config,configure,283,https://psicode.org,https://github.com/psi4/psi4/issues/199,2,['config'],['configure']
Modifiability,I guess we can be confident that no plugins use this since these classes were not tagged with PSI_API?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2348#issuecomment-964152653:36,plugin,plugins,36,https://psicode.org,https://github.com/psi4/psi4/pull/2348#issuecomment-964152653,1,['plugin'],['plugins']
Modifiability,"I had a bit of time to work on Windows build. Current status of dependencies:; - *libint*: with some hacking (https://github.com/raimis/libint/tree/win) I have manged to build it (https://ci.appveyor.com/project/raimis/libint). There are no tests, so high probability of not detected issues.; - *libxc*: with some more hacking (https://github.com/raimis/libxc/tree/win) I have to managed to build it too (https://ci.appveyor.com/project/raimis/libxc).; - *gau2grid*: it need just a few changes (https://github.com/raimis/gau2grid/tree/win) to compile (https://ci.appveyor.com/project/raimis/gau2grid). Though I have not managed to make the test to work. It seems, `ctypes` behave differently on Windows. Finally, I have reached a point to stat building *Psi4* (https://github.com/raimis/psi4/tree/win) and got stuck with MKL configuration and other `cmake` related problems (https://ci.appveyor.com/project/raimis/psi4). @loriab, for Linux builds, do you use MKL from `conda` or install it manually?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/933#issuecomment-390236786:825,config,configuration,825,https://psicode.org,https://github.com/psi4/psi4/issues/933#issuecomment-390236786,1,['config'],['configuration']
Modifiability,"I had no problems with compilation on my laptop (clang 4.0.0) and on our cluster (gcc-4.9, g++-4.9). However, I am not able to generate plugins. This command gives the following error:. ```; $PSI4HOME --new-plugin-makefile psi4_inversion; raise KeyError(""The file %s does not exist."" % args[""input""]); KeyError: 'The file input.dat does not exist.'; ```. If I create a blank input.dat file, it does not quit without an error, but it doesn't read the --new-plugin-makefile option.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254667012:136,plugin,plugins,136,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254667012,3,['plugin'],"['plugin-makefile', 'plugins']"
Modifiability,"I had put this together as I was building v1.4, so may as well share here. ### `psi4`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libint2 | yes | psi4 | psi4 | psi4 | | C++; libxc | yes | psi4 | psi4 | c-f | | C; gau2grid | yes | psi4 | psi4 | c-f | | C; qcelemental | yes | | | | psi4 copied from c-f | Py; qcengine | yes | | | | psi4 copied from c-f | Py; ambit | no | psi4 | psi4 | --- | | C++; chemps2 | no | psi4 | psi4 | --- | | C++; dftd3 | no | psi4 | psi4 | psi4 | | Fortran; dkh | no | psi4 | psi4 | --- | | Fortran; gcp | no | psi4 | psi4 | psi4 | | Fortran; gdma | no | psi4 | psi4 | --- | | Fortran; pcmsolver | no | psi4 | psi4 | --- | | C++, Fortran; simint | no | psi4 | psi4 | --- | | C++. * not req'd means present in Linux conda package but not required for a minimal conda package; * gcp should switch to mctc-gcp already on c-f for L but needs a MKL build; * gdma is a little behind in releases b/c psi actually uses a home-adapted library instead of the executable; * pcmsolver latest (v1.3, I think) can't work with psi4 after core-developer of both gave a medium-effort try. But there's a slight problem with previous release v1.2, too, so psi4 uses an unpublished v1.2.1.1 (or something like that). a patch in the conda-recipe from v1.2.1 upstream is probably the better sol'n; * simint is peculiar in that you need to choose a target instruction set at compile time. usual psi default may not be general enough for c-f. ### `psi4-rt`. project | req'd | linux | osx | win | noarch | lang; -----|-----|-----|-----|-----|-----|-----; libtensorlight | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; adcc | no | psi4 copied from adcc | psi4 copied from adcc | --- | | C++; fockci | no | | | | psi4 | Py; mp2d | no | psi4 | psi4 | --- | | C++; openfermion | no | | | | psi4 | Py; openfermionpsi4 | no | | | | psi4 | Py; pycppe | no | psi4 | psi4 | --- | | C++; pylibefp | no | psi4 | psi4 | --- | | C++; libef",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900:998,adapt,adapted,998,https://psicode.org,https://github.com/psi4/psi4/issues/2300#issuecomment-945995900,1,['adapt'],['adapted']
Modifiability,"I have a dimer complex in z-matrix form that I am calculating the interaction energy. I have two scripts, one is the an object that lives inside my software and the other is an external script that I use for testing the configurations for psi4. . When I run the python on the external script, the function returns the total energy:. ```python; dimer_energy = psi4.energy(; theory,; molecule=dimer2,; bsse='cp'; ); ```; However, if I run this programmatically, although the same result in terms of the output file but the dimer energy returned is the interaction energy. . I am running this on `hf/6-31g*' so not SAPT. Is there something that I am missing where psi4 decides to return the interaction energy over the dimer energy and why would I see this inconsistency in my code. Kind of lost on this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2730:220,config,configurations,220,https://psicode.org,https://github.com/psi4/psi4/issues/2730,1,['config'],['configurations']
Modifiability,"I have been meaning to mention this for a while actually. . If we require c++11, why is there an option in setup to disable c++11 support? Also, why can CMake revert to the older standard?. with intell 13.1, I will see this during the configure step: ; `-- Buggy compiler support for C++11. Using Older Standard.` . If I edit this line in CMakeCache.txt; `CMAKE_CXX_FLAGS:STRING=-DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=gnu++98`; to `-std=c++11` before I make I can build successfully, but if I don't I will get the same errors mentioned above. . CMake should produce an error if C++11 support is not detected, fail at the configuration step, and report why to the user. I think the current behavior is very confusing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/188#issuecomment-156910025:235,config,configure,235,https://psicode.org,https://github.com/psi4/psi4/issues/188#issuecomment-156910025,2,['config'],"['configuration', 'configure']"
Modifiability,"I have changed some CMake variable and now the compilation works fine (I think it was related to having CMAKE_OLDINCLUDEDIR set to /usr/include, causing a permission problem in the installation step). Linking with OpenBLAS also seems to have worked fine:. ```; [sfux@develop01 x86_64]$ ldd lib/psi4/core.so ; linux-vdso.so.1 => (0x00007ffc83bea000); libpython2.7.so.1.0 => /cluster/apps/python/2.7.12/x86_64/lib64/libpython2.7.so.1.0 (0x00007f1a75aa0000); libdl.so.2 => /lib64/libdl.so.2 (0x00007f1a7588b000); libopenblas.so.0 => /cluster/apps/openblas/0.2.13_seq/x86_64/gcc_5.2.0/lib/libopenblas.so.0 (0x00007f1a736f5000); libstdc++.so.6 => /cluster/apps/gcc/5.2.0/lib64/libstdc++.so.6 (0x00007f1a73366000); libm.so.6 => /lib64/libm.so.6 (0x00007f1a730e1000); libgomp.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgomp.so.1 (0x00007f1a72ec0000); libgcc_s.so.1 => /cluster/apps/gcc/5.2.0/lib64/libgcc_s.so.1 (0x00007f1a72caa000); libpthread.so.0 => /lib64/libpthread.so.0 (0x00007f1a72a8c000); libc.so.6 => /lib64/libc.so.6 (0x00007f1a726f8000); libutil.so.1 => /lib64/libutil.so.1 (0x00007f1a724f5000); /lib64/ld-linux-x86-64.so.2 (0x00007f1a78d6a000); libgfortran.so.3 => /cluster/apps/gcc/5.2.0/lib64/libgfortran.so.3 (0x00007f1a721d5000); librt.so.1 => /lib64/librt.so.1 (0x00007f1a71fcd000); libquadmath.so.0 => /cluster/apps/gcc/5.2.0/lib/../lib64/libquadmath.so.0 (0x00007f1a71d8d000); [sfux@develop01 x86_64]$ ; ```. I did a quick test with. ```; #! Sample UHF/6-31G** CH2 computation. memory 250 mb. molecule ch2 {; 0 3; C; H 1 R; H 1 R 2 A. R = 1.075; A = 133.93; }. set basis 6-31G**; set reference uhf; energy ('scf'); ```; to verify that the installation does not crash on startup. So far everything looks fine. I have a comment about the shebang line in the psi4 python script. After the installation it was set to an absolute path:. #!/cluster/apps/python/2.7.12/x86_64/bin/python. On larger clusters, there are usually multiple python versions installed in non-standard locations. Therefore",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275104849:26,variab,variable,26,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275104849,1,['variab'],['variable']
Modifiability,"I have fixed the code that connects the initial, separated fragments in; optking. The CH3F case now runs fine. The code was very much in error. I; will submit the correction whenever the main psi4 trunk runs again. At the; moment, the python there seems broken. On Sun, Mar 13, 2016 at 2:52 PM, Rollin King rking@bethel.edu wrote:. > The current code detected 4 different fragments for the extended CH3F.; > Then it tried to connect them. It really should have been able to do so.; > I don't see why it didn't work, and I'm looking for a bug.; > ; > On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; > wrote:; > ; > > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > > probably reasonable to assume a full optimization is desired. Maybe grep; > > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > > gradient.; > > ; > > —; > > Reply to this email directly or view it on GitHub; > > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196087369:390,extend,extended,390,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196087369,1,['extend'],['extended']
Modifiability,"I have generated a plain plugin template and read so basis overlap integrals as follows:; MintsHelper mints(MintsHelper(ref_wfn->basisset(), options, 0));; Sso_ = mints.ao_overlap();. I used the following geometry with cc-pvdz basis set and with the ""puream false"" option:; O 0.000000000000 0.000000000000 -0.065775570538; H 0.000000000000 -0.759061990794 0.521953018295; H 0.000000000000 0.759061990794 0.521953018295; symmetry c1; noreorient. and I get the following output:; ## SO-basis Overlap Ints ##. 1 2 3 4 5 6 7 8 9 10. 1 1.0000000 -0.2140627 0.1943842 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 -0.0000000 0.0705864; 2 -0.2140627 1.0000000 0.7086073 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.6299064; 3 0.1943842 0.7086073 1.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.6642838; 4 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 0.0000000; 5 0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000; 6 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.5012715 -0.0000000; 7 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000 0.0000000; 8 0.0000000 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000 0.0000000; 9 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.5012715 0.0000000 0.0000000 1.0000000 0.0000000; 10 0.0705864 0.6299064 0.6642838 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 1.0000000; 11 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 12 0.0000000 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 13 0.0705864 0.6299064 0.6642838 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.3333333; 14 0.0000000 0.0000000 0.0000000 0.0000000 -0.0000000 0.0000000 0.0000000 0.0000000 0.0000000 0.0000000; 15 0.0705864 0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874:25,plugin,plugin,25,https://psicode.org,https://github.com/psi4/psi4/issues/874,1,['plugin'],['plugin']
Modifiability,"I have situations where I want to manually specify the number of frozen core orbitals using `num_frozen_docc`, do some work, then calculate some MBIS properties including the volume ratios. The latter causes psi4 to automatically calculate the free-atom volumes in the same method as the last-run calculation (in my case, `wb97m-d3bj`) and inherits all the settings... including `num_frozen_docc`. I can insert a `set num_frozen_docc 0; set freeze_core true` right before the `oeprop(wfn, 'MULLIKEN_CHARGES')` call and make things go away, but what worries me is just _how_ things fail. Well, sometimes things are in fact _perfectly fine_. Other times, psi4 **segfaults**. The behavior depends on _just how large_ `num_frozen_docc` is -- I think if it ends up exceeding some other quality dependent on the calculation, things go belly-up. Here's the relevant line from a coredump. ```; #0 0x00002b4f362ef958 in psi::scf::HF::compute_fcpi (this=0x223c06c0) at [snip]/psi4/psi4/src/psi4/libscf_solver/hf.cc:830; 830 for (int i = 0; i < nfzc; ++i) frzcpi_[pairs[i].second]++;; ```. And here's a minimum working example of the issue that MBIS_VOLUME_RATIOS runs into, as a standalone calc:. ```; set num_frozen_docc 20; set basis def2-tzvppd; set reference uks; molecule mol {; 0 2; H 0 0 0; units angstrom; }; E, wf = energy('wb97m-d3bj',return_wfn=True,); ```. If you flip `num_frozen_docc` to 18, _it works_. (19 works for me on some machines, not on others -- eek!). In all cases I'm invoking psi4 the same way: `psi4 -n1 -i run.in --memory 500MB`. . I'm building off of 1.6.X, using icc/2020.2-108-02c7; I don't _think_ I have anything ""special"" set in my compile environment besides `buildtype=RelWithDebInfo`. I didn't mess with any optimization flags, for sure.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631:340,inherit,inherits,340,https://psicode.org,https://github.com/psi4/psi4/issues/2631,1,['inherit'],['inherits']
Modifiability,I have updated the docstrings and extended the error message just in case someone runs into a legitimate situation where it needs to be bypassed.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767:34,extend,extended,34,https://psicode.org,https://github.com/psi4/psi4/pull/2465#issuecomment-1068147767,1,['extend'],['extended']
Modifiability,"I just refactored my code to reduce code duplicity (Ran all C-Tests, still passed). I changed the build_JK function by adding two boolean switches that determine whether to build J and/or K. So the function header is now; `build_JK(ints, D, J, K, do_J, do_K)`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952:7,refactor,refactored,7,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-977378952,1,['refactor'],['refactored']
Modifiability,I just tested on my box and I think it is as simple as changing line 4 of `psi4/src/bin/psi4_main/CMakeLists.txt` from. ```; COMMAND ${CMAKE_COMMAND} -E copy ...; ```. to. ```; COMMAND ${CMAKE_COMMAND} -E copy_if_different ...; ```. The `version.h` file only changes the the git commit sha changes (only on commits and pulls). Another consequence of the cmake rewrite is that before you could've simply typed `make mints/fast` in your objdir and it would just compiled libmints. Now's there the required step of `cd objdir/psi4_core-prefix/src/psi4_core-build` before `make mints/fast`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-239052313:360,rewrite,rewrite,360,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-239052313,1,['rewrite'],['rewrite']
Modifiability,"I just updated the docs too. One thing I am confused about, why is the `screening` keyword only in the sapt module? I think we should refactor it as a global module.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-898695692:134,refactor,refactor,134,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-898695692,1,['refactor'],['refactor']
Modifiability,"I know that I do not need to use ""long int"" for ""naoccA"" and ""navirA"" variables. However, there are many variables (eg. V^3 type) that requires the usage of long int. Instead of changing specific variables one by one, I have just applied a ""find/replace"". You are right that size_t would be a better solution. But long int is also okay as it is used in the ccenergy and fnocc modules. Further, in the near future I will replace ccsd_triples.cc file with a newer version which includes (T) gradients. At that stage I will consider to use the ""size_t"" instead of ""long int"". Hence, I think that the present change is okay.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/706#issuecomment-301900431:70,variab,variables,70,https://psicode.org,https://github.com/psi4/psi4/pull/706#issuecomment-301900431,3,['variab'],['variables']
Modifiability,"I leave most of the environment variable stuff for PSI4 in the hands of conda. I have a modified/compiled version of PSI4 on just one of my machines, but PSI4 crashes on all of them for one electron properties. I saw the crash while I was running a testing script, so I know that it printed correct results for HF, PBE0, gradient, and PBE0+point-charges calculations. The only test of mine that failed involved recovering charges from a QM calculation. ```; [input file]. set_num_threads(8); memory 256 mb; set reference rhf; set basis 6-31G*; set guess sad; set scf_type df. psi4_io.set_specific_path(32,'./'); psi4_io.set_specific_retention(32,True); psi4_io.set_specific_path(180,'./'); psi4_io.set_specific_retention(180,True). molecule LICHM_0 {; 0 1; O 0.87273600000000 0.00000000000000 -1.2467539999999; H 0.28827300000000 0.00000000000000 -2.0108530000000; H 0.28827300000000 0.00000000000000 -0.4826550000000; symmetry c1; no_reorient; no_com; }. Chrgfield = QMMM(); Chrgfield.extern.addCharge(-1.3062266666666,-0.6489658001839,0.00000001660701,1.10730418839000); Chrgfield.extern.addCharge(0.35180666666666,-0.7534241883900,-0.0000000536004,1.26252019981607); Chrgfield.extern.addCharge(0.86636000000000,-0.7788030060160,0.13229430272998,1.13268305579077); Chrgfield.extern.addCharge(-1.3062266666666,-0.9086401998160,-0.0000000166070,1.15806181160999); Chrgfield.extern.addCharge(0.10176666666666,-0.8041818116099,0.00000005360047,1.00284580018392); Chrgfield.extern.addCharge(0.86636000000000,-0.7788029939839,-0.1322943027299,1.13268294420922); Chrgfield.extern.addCharge(0.51284666666666,-0.7965191998160,0.76409898339298,1.73166981160999); Chrgfield.extern.addCharge(-1.7440911751517,-0.6778443974775,0.64528811991560,1.64918444879139); Chrgfield.extern.addCharge(0.85696271562354,-0.6894742127334,0.82228626070531,1.58968679653742); Chrgfield.extern.addCharge(0.51284666666666,-0.5368448001839,0.76409901660701,1.68091218839000); Chrgfield.extern.addCharge(-0.5989622639259,-0.65551960",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/240#issuecomment-182660528:32,variab,variable,32,https://psicode.org,https://github.com/psi4/psi4/issues/240#issuecomment-182660528,1,['variab'],['variable']
Modifiability,"I like the options-processing macros, @ryanmrichard. Here you meant `AND`, yes? Or even better, `if(NOT DEFINED ${variable})`? https://github.com/ryanmrichard/psi4/blame/CMakeRewrite/cmake/Psi4Macros.cmake#L11. You may want to copy Psi4Macros from libint back over to psi4 (diff here: https://github.com/loriab/libint1/commit/e99270099119e51da745ae9ef34f20e6bd7b14ff) as I fixed that processing problem, expanded to bool options, elaborated printing, and tested a range of input values/specification routes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-236132448:114,variab,variable,114,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-236132448,1,['variab'],['variable']
Modifiability,"I looked into this recently. The issue is that O2 has two degenerate orbitals. The issue begins when psi4 guesses the correct occupation. To determine which orbital is occupied we sort the orbitals and then populate them with electrons. If the alpha and beta orbitals end up being sorted in the same way we get a closed-shell det, if their order is switched (as it sometimes happens) then we get an open shell determinant (say pi_a pi'_b). Here is some debug info that I printed about a week ago. It shows the iterations through the sorted eigenvalues. You can see that in the second set the orbitals are picked in a different order and we get an open shell configuration. *Correct*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 6 // <; nalphapi_ -> 0, 5, 7 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 2 // < corresponding beta is in the same irrep; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // <; nbetapi_ -> 0, 5, 7 // <; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 1, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 0, 0, 0, 0, 0, 0 ]; ```. *Fail*; ```; nalphapi_ -> 0, 0, 5; nalphapi_ -> 0, 1, 0; nalphapi_ -> 1, 2, 0; nalphapi_ -> 1, 3, 5; nalphapi_ -> 0, 4, 7 // <; nalphapi_ -> 0, 5, 6 // <; nalphapi_ -> 2, 6, 0; nalphapi_ -> 0, 7, 3 // < corresponding beta is from irrep #2; nbetapi_ -> 0, 0, 5; nbetapi_ -> 0, 1, 0; nbetapi_ -> 1, 2, 0; nbetapi_ -> 1, 3, 5; nbetapi_ -> 0, 4, 6 // < order is flipped here; nbetapi_ -> 0, 5, 7 // < order is flipped here; nbetapi_ -> 2, 6, 0; nbetapi_ -> 0, 7, 2 // <. Occupation by irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; SOCC [ 0, 0, 1, 1, 0, 0, 0, 0 ]; ```. I am not sure what's the origin of the different ordering. I would assume that the sorting algorithm is deterministic. Perhaps the diagonalization step is not in the case of degenerac",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/738#issuecomment-307585640:658,config,configuration,658,https://psicode.org,https://github.com/psi4/psi4/issues/738#issuecomment-307585640,1,['config'],['configuration']
Modifiability,"I made all of the requested changes, barring the `iteration_` variable, which I personally believe is necessary. If you have a workaround, please let me know :).This PR should be _really_ close to being finalized.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-937361392:62,variab,variable,62,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-937361392,1,['variab'],['variable']
Modifiability,"I mentioned this on Slack, but at present, only the Correlated procedure is used in Psi, and the others are legacy code. I have no idea what plugins are doing, but I assumed those all used Correlated as well. Let me know if you're going to change that. I imagine that you're using the SCF procedure for CASSCF purposes?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756#issuecomment-557577957:141,plugin,plugins,141,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557577957,1,['plugin'],['plugins']
Modifiability,"I noticed that the code for the nonapproximated E(20)exch-disp saves its final result in `variable('sapt exch-disp20(s^inf) energy')` as it should, but never actually prints the result to the output file. For example, when I run the test in `tests/sapt-exch-disp-inf`, the comparison of values with the reference passes, but I never learn from the output what the actual result is. The simple fix is to change the do_print option to True [when the nonapproximated E(20)exch-disp code is called.](https://github.com/psi4/psi4/blob/3d2403c43e2cf8df699ff6e382a4ae2e3a0a5faa/psi4/driver/procrouting/sapt/sapt_mp2_terms.py#L282). I can make this fix myself - look out for a simple PR.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2317:90,variab,variable,90,https://psicode.org,https://github.com/psi4/psi4/issues/2317,1,['variab'],['variable']
Modifiability,"I noticed that there is some kind of overflow happening in the printing of the memory (see below).; Looks like all variables are doubles so idk why. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2493. The other thing is that this (and similar lines); `cost_ampAA = nocc2AA * nvir2AA;` should maybe be `cost_ampAA = naocc2AA * nvir2AA;`; Otherwise frozen-core is ignored for the memory consideration. Or I misunderstand something. If you could have a look @bozkaya ?. ```; DF-MP2.5 ; Program Written by Ugur Bozkaya; Latest Revision September 9, 2017. ============================================================================== ; ============================================================================== ; ============================================================================== . MO spaces... . FC OCC VIR FV ; ----------------------; 19 49 827 0. Number of basis functions in the DF-CC basis: 2173. Available memory : 55313.11 MB ; Memory requirement for 3-index ints : 12050.26 MB ; Memory requirement for DF-CC int trans: 36889.52 MB ; Memory requirement for CC contractions: -34560.53 MB ; Total memory requirement for DF+CC int: -22510.28 MB ; Memory requirement for Wabef term : 39520.86 MB . ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/898:115,variab,variables,115,https://psicode.org,https://github.com/psi4/psi4/issues/898,1,['variab'],['variables']
Modifiability,"I recently updated my copy of psi4, and I'm now having plugin issues. I added ""PSI_API"" where appropriate, and my plugins compile, but I get missing symbol errors for the JK object constructor:. Attention! This SCF may be density-fitted.; dyld: lazy symbol binding failed: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. dyld: Symbol not found: __ZN3psi4PKJKC1ENSt3__110shared_ptrINS_8BasisSetEEERNS_7OptionsE; Referenced from: /Users/deprince/edeprince3/deprince-group/plugins/does_jk_work/does_jk_work.so; Expected in: flat namespace. Abort trap: 6. This error is for a clean plugin that only calls the constructor for PKJK:. extern ""C"" PSI_API; SharedWavefunction does_jk_work(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. /* Your code goes here */. std::shared_ptr<PKJK> jk (new PKJK(ref_wfn->basisset(),options));. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971:55,plugin,plugin,55,https://psicode.org,https://github.com/psi4/psi4/issues/971,5,['plugin'],"['plugin', 'plugins']"
Modifiability,"I refactored my code, per Susi's suggestions. The only things left are whether or not my way of handling the python exporting of `do_incfock_iter` is ideal, and my question on stability analysis.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-940155921:2,refactor,refactored,2,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-940155921,1,['refactor'],['refactored']
Modifiability,"I see it's the switch to a strong `enum` that causes trouble. That's quite easily fixed. How should I proceed? Submit a patch to the `v2rdm_casscf` repository, wait for it to be applied and then update the plugin's version in this PR?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355077662:206,plugin,plugin,206,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355077662,1,['plugin'],['plugin']
Modifiability,"I see we have a plugin error here https://dev.azure.com/psi4/psi4/_build/results?buildId=5535&view=logs&j=f237aa60-f90a-5f4e-46d5-6f838a77d991&t=e678ab3d-f7fc-50f0-56d8-3349f4950165&l=9304 . That's very possibly pre-existing -- I should have retained skeletons in ctest when I deduplicated the ctest and pytest calls. The ""missing packages"" link doesn't work for me. What is the text? Does running the `test_sapt_dft1` test in particular work for you locally?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943:16,plugin,plugin,16,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583061943,1,['plugin'],['plugin']
Modifiability,"I see. Yes, you can forget the conda binary question. Interesting that you're using psi4 from the Ubuntu repository. I think you're the first report we've had of someone actually doing that. Unfortunately, it means you're using the beta5 version that's two years old and pre GnuMake --> CMake transition. And the plugin system I wouldn't expect to work from the Ubuntu repo. You see, the plugin Makefile relies on info about the build conditions and unless whoever packaged psi up for Ubuntu/Debian (not us) knew about that aspect and planned for it, that build condition info is not going to be in the distribution you've got. Your error involving ""MakeVars"" reflects this. I'd strongly recommend cloning from GitHub (you'll get a far newer version of the code), building psi4, and _then_ creating a new plugin. https://github.com/psi4/psi4/wiki/1_Obtaining#clone-from-public-github-repository. If you're not comfortable with compiling, there's another way that I know to work, but its a bit experimental.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194615624:313,plugin,plugin,313,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194615624,3,['plugin'],['plugin']
Modifiability,"I started in on this last night. The scheme for generating a Makefile from from a locally compiled psi4 exe can stay as it is, I think. Though we should make it so that it can be generated from an installed copy alone. Key missing component of that is that the main `$psi4-clone-dir/includes/*h` header files don't get installed at the moment. The `$psi4-clone-dir/src/*/*/*.h` files do. Do you think the lot should go behind a namespace like `$psi4-install-dir/includes/psi4/psifiles.h` (or `psi`)? Boost headers may also need to be installed. The other part is to make it so that people can check out plugins from the conda exe. I suppose the proper way to do this would be to have plugins under CMake control so that it would go off and detect their compiler/math situation. But instead I was thinking of sticking with Makefile and forcing the build environment– just setting it up so that generated plugins are ready to be compiled with conda gcc and math libs. The below is a start. ```; # Flags that were used to compile Psi4.; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug # set by $PREFIX; CXX = ${MCONDA}/bin/g++; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. How does that seem for a plan? @jturney, if you'd like to work on this, that'd be great. Or if you want me to do the conda parts, I'd be glad to do so.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172235413:603,plugin,plugins,603,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172235413,3,['plugin'],['plugins']
Modifiability,"I strongly concur. If you do anything now, you'll have to deal with Boost::python, whereas the current development head (https://github.com/jturney/psi4/commits/CMakeRewrite-KillTheBoost) uses pybind11 for python binding. I think the new plan is to merge that branch (which is 250 commits ahead) back into master this week with main functionality intact but some lesser items subject to polish and change (e.g., docs, cmake, plugins, psimrcc-fd-freq2).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/466#issuecomment-246810068:425,plugin,plugins,425,https://psicode.org,https://github.com/psi4/psi4/issues/466#issuecomment-246810068,1,['plugin'],['plugins']
Modifiability,"I strongly recommend not doing that as you can get wrong answers and/or lose all threading capacity. . To get around the mkl-on-nodes problem, I advise installing the psi4-dev conda package that provides all of psi4's dependencies, incl. numpy and mkl, then building against that. ```; cd {top-level-psi4-dir}; conda create -n p4dev35 python=3.5 psi4-dev -c psi4/label/dev -c psi4; conda activate p4dev35; `psi4-path-advisor --intel`; # cmake configures; cd objdir && make -j`getconf _NPROCESSORS_ONLN`; make install; ```; Is there any reason the psi4 conda package itself isn't suitable? If size is an issue, then mkl is the problem, and it doesn't do to just fix mkl for psi4 b/c other pieces (numpy, chemps2) use it, too. I'm working on an openblas build. If you're resolved on statically linking mkl, short of probing the math detection, I'd consult the mkl-link-advisor and pass the resulting advice to psi4 cmake via example (G.) of http://psicode.org/psi4manual/master/build_planning.html#cmake-lapack . EDIT: `conda install` --> `conda create` on 2nd line of snippet",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281:443,config,configures,443,https://psicode.org,https://github.com/psi4/psi4/issues/1004#issuecomment-386422281,1,['config'],['configures']
Modifiability,"I suspect we just never got around to adapting the higher order codes. But; maybe @tparker36 has numerical evidence that it's not as big a deal as we; thought?. On Wednesday, March 16, 2016, Lori A. Burns notifications@github.com; wrote:. > Hmm, so either; > - the case of running higher-order SAPT on heavy atoms was never; > considered, in which case the DF_BASIS_ELST code needs copying over; > - the heavy atom failure mode doesn't appear in higher-order SAPT b/c; > higher-order terms compensate or because the larger basis-sets targeted do; > their job (RI > JK for higher-zeta basis sets). Actually, this may have; > been what @tparker36 https://github.com/tparker36 was recalling.; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/317#issuecomment-197550795",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-197551790:38,adapt,adapting,38,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-197551790,1,['adapt'],['adapting']
Modifiability,"I think Debian Jessie, which is still in Extended LTS period, ships with GCC 4.9. Stretch (which is in LTS) ships with 6.3. Similarly, it looks like everything older than (and including) RHEL7 came with GCC 4.8, but for RHEL6 and RHEL7 their respective DTS packages come with GCC 6.2 or newer. I vote to deprecate GCC 5 on principle...",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2092#issuecomment-768020329:41,Extend,Extended,41,https://psicode.org,https://github.com/psi4/psi4/pull/2092#issuecomment-768020329,1,['Extend'],['Extended']
Modifiability,"I think an auto-update is a good idea, but will need some sanity checks. Thinking back a decade, I think the original motivation for not auto updating was to accommodate the following:; ```; molecule h2 {; H; H 1 R; }. h2.R = 0.7; ```; There were some problems caused by attempting to update in the absence of all variables, but they should be easy to overcome with the appropriate checks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/765#issuecomment-316152578:314,variab,variables,314,https://psicode.org,https://github.com/psi4/psi4/issues/765#issuecomment-316152578,1,['variab'],['variables']
Modifiability,"I think for a locally compiled psi4 you also have to remove the install dir, if one exists. Susi Lehtola; Sent from my phone so excuse my brevity. On 14 Feb 2019, at 3.40, Lori A. Burns <notifications@github.com<mailto:notifications@github.com>> wrote:. TL;DR If conda psi4 is acting up, update libint, too: conda update libint -c psi4/label/dev. If locally compiled psi4 is acting up, trigger a partial recompile: cd objdir && rm -rf external/upstream/libint/ && make. We've been planning for a while to distribute conda psi4 with libint compiled at MAX_AM_ERI 8, not 6. I have rebuilt the libint package and now the v1.3rc1 will be the first psi4 package with extended AM. Unfortunately, both libint of different AM are not hot-swappable and AM not detectable at runtime. That is, a built psi4 is perfectly happy to link (in the ldd sense) to a libint.so that is inconsistent with fixed data dimensions in psi4 libmints, and libmints can't even throw an error for enlightenment. I could throw additional constraints on the psi4 pkg to make sure it picked the right libint build, but that would be misusing the tools a bit, would constrain things in future, and would only solve a third of the problem. I believe you can handle this transition manually with a couple commands. which libints are out there?. conda list. # v notice 5 vs 4 here; # v; libint: 1.2.1-hb4a4fd4_5 # AM ** 8 **, compatible with conda psi4 >= 1.3rc1, new!; libint: 1.2.1-h87b9b30_4 # AM ** 6 **, compatible with conda psi4 < 1.3rc1, 8 mo old; libint: 1.2.1-am8_1 # AM ** 8 **, compatible with compile-yourself psi4 only, deprecated, 19 mo old. what can go wrong with conda psi4?. * Both latest psi4 and latest libint conda packages are compatible, so a fresh install conda update psi4 libint -c psi4/label/dev will be fine.; * However, if you have a conda environment and you update psi4 but not libint, then you'll have a >=1.3rc1 psi4 and the _4 (see above) AM6 libint, which is trouble. Easy to solve by updating libint: co",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773:662,extend,extended,662,https://psicode.org,https://github.com/psi4/psi4/issues/1533#issuecomment-463524773,1,['extend'],['extended']
Modifiability,"I think that I know where the linking against the Python library comes from. Usually when using CMake to build software, I am using the ccmake GUI and use the toggle option to show all available variables (as I usually also add compiler flags etc.). I noticed that cmake detected the correct Python interpreter (2.7.12), but it also had a variable for the Python library, which was pointing to /usr/lib64/libpython2.6.so (system Python that was installed with the operating system). In order to avoid mixing between different Python versions, I have set the CMake variable to the 2.7.12 version of the library. Maybe CMake picked it up this way and added it to the libraries that are linked. Thank you for pointing me to the tests in the samples directory. Best regards",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-275138618:195,variab,variables,195,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-275138618,3,['variab'],"['variable', 'variables']"
Modifiability,"I think the best course of action is for me to take this as part of my foray into the `cc` mega-module, after I'm through with the test pass. Incidentally, the current plan for my `cc` module pass is: get `cc` tests off perl, this issue, move variables to `wfn`, move `ccdensity` to Matrix objects, then give `ccdensity` a Wavefunction. There's a lot more that could be done, but my primary interest is in syncing up densities across multiple modules.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149:243,variab,variables,243,https://psicode.org,https://github.com/psi4/psi4/issues/2308#issuecomment-1042970149,1,['variab'],['variables']
Modifiability,"I think the main issue is that `detci` is somehow relying on the data in `Wavefunction`, but it's not checking whether its configuration is valid. There is actually a preceding error message ; ```; (set_ras_parms): detecting 1 electrons in RAS III for irrep 0.; Some parts of DETCI assume all elec in I and II; ```; but this really should crash the code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143:123,config,configuration,123,https://psicode.org,https://github.com/psi4/psi4/issues/1693#issuecomment-520836143,1,['config'],['configuration']
Modifiability,"I thought about the explicit checking of psivars. In fact, I figured that if anything would fail the test suite, it would be if there were tests which checked these (evidently there was not). I could possibly add one at a later date- it would help keep plugins which parse a dictionary created by `core.get_variables()` from randomly breaking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/857#issuecomment-344102578:253,plugin,plugins,253,https://psicode.org,https://github.com/psi4/psi4/pull/857#issuecomment-344102578,1,['plugin'],['plugins']
Modifiability,"I thought it might be useful to share the failed tests of psi4 (using commit e4070d0024742579a445) on our systems. We have 4 failed tests:. ```; The following tests FAILED:; 223 - opt10 (Timeout); 240 - pubchem1 (Failed); 241 - pubchem2 (Failed); 255 - pywrap-opt-sowreap (Failed); 264 - sapt4 (Failed); ```. The `pubchem` is probably just the firewall blocking stuff. Several times I've seen things like:. ```; 253: Unable to read the PSI4 Python folder - check the PSIDATADIR environmental variable; 253: Current value of PSIDATADIR is /user/scratch/gent/vsc403/vsc40307/EB/swalot/software/PSI/4.0b6-20160201-intel-2016a-mt-Python-2.7.11/share/psi4; ```. Where the value of `PSIDATADIR` is the install path instead of the build path. I think `pywrap-opt-sowreap` fails because of this. For the `sapt4` test:. ```; 264/305 Testing: sapt4; 264/305 Test: sapt4; Command: ""/apps/gent/CO7/haswell-ib/software/Python/2.7.11-intel-2016a/bin/python"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/runtest.py"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/tests/sapt4/input.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/testresults.log"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d"" ""false"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4/output.dat"" ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/bin/psi4""; Directory: /dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/obj/tests/sapt4; ""sapt4"" start time: Feb 15 13:13 CET; Output:; ----------------------------------------------------------; Traceback (most recent call last):; File ""<string>"", line 65, in <module>; File ""/dev/shm/ward/PSI/4.0b6-20160201/intel-2016a-mt-Python-2.7.11/psi4public-e4070d0024742579a445e084da9dde078310094d/lib/pytho",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/253:492,variab,variable,492,https://psicode.org,https://github.com/psi4/psi4/issues/253,1,['variab'],['variable']
Modifiability,"I thought the octupoles were re-shaped Py-side to be arrays of the appropriate dimension? The following line passes tests and shows octupoles as a 3-by-3-by-3 matrix. ```; compare_values(np.array([0, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, 0, 0, 0, 0, -0.9526489, 0, -0.9526489, 0, -0.9526489, 0, 0, 0, -0.9526489, 0, 0, 0, -6.8644462]).reshape((3, 3, 3)),; variable(""MP2 OCTUPOLE""), 4, ""MP2 OCTUPOLE"") #TEST; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890:363,variab,variable,363,https://psicode.org,https://github.com/psi4/psi4/pull/2479#issuecomment-1069276890,1,['variab'],['variable']
Modifiability,"I tried my suggested fix using GCC and it didn't work. Neither did [this](https://gcc.gnu.org/onlinedocs/gcc-4.8.4/gcc/Function-Specific-Option-Pragmas.html) or [this](http://odellconnie.blogspot.com/2012/02/controlling-gcc-optimization-with.html) so I'd rather stick with zeroing out offending elements, as in this PR; portability is far more important than worrying about some arbitrary cutoff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/678#issuecomment-293473618:320,portab,portability,320,https://psicode.org,https://github.com/psi4/psi4/pull/678#issuecomment-293473618,1,['portab'],['portability']
Modifiability,"I tried this, but then it is back to complaining about intel-linux being redefined in project-config.jam. This is really weird since project-config.jam has a conditional that is apparently supposed to avoid this, but it does not work for some reason. So, I solved that by adding a command to boost/CMakeLists.txt that modifies project-config.jam with sed to eliminate the redefinition of intel-linux. So I am closing this issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196#issuecomment-170054358:94,config,config,94,https://psicode.org,https://github.com/psi4/psi4/issues/196#issuecomment-170054358,3,['config'],['config']
Modifiability,"I tried valgrind. I found a couple of functions with assumed return type; due to an incorrect syntax (probably the problem), one invalid read (going; 8 bytes too far), and a couple of uninitialized variables that probably; don't matter. Enough to give it another go. ## . Dr. Rollin A. King; Professor and Chair of Chemistry; Bethel University; rking@bethel.edu. On Thu, Jan 28, 2016 at 11:13 PM, Andy Simmonett notifications@github.com; wrote:. > Have you tried running it through Valgrind? If it's an uninitialized; > variable that GCC is magically zeroing out for you, Valgrind will tell you; > about it.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/228#issuecomment-176579308.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/228#issuecomment-176991048:198,variab,variables,198,https://psicode.org,https://github.com/psi4/psi4/pull/228#issuecomment-176991048,2,['variab'],"['variable', 'variables']"
Modifiability,"I understand the docs (https://www.openmp.org/spec-html/5.0/openmpse57.html) such that an integer of `1` is the same behaviour as `(omp_set_nested(0);` where 0 is a bool. > If the environment variable is set to false, the initial value of max-active-levels-var is set to 1. The `max-active-levels-var` corresponds to `omp_set/get_max_active_levels`. Below does seem to pass the sapt-tu5 test with jaQZ (and which I can make fail with `omp_set_max_active_levels(0);`). . ```; #ifdef _OPENMP; omp_set_max_active_levels(1);; #endif; ```. The threading test gives the same level of threading as compiling with `omp_set_nested(0)` (and conda psi4). . Though I am hesitant making a 'too quick' PR about it. Opinions?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041:192,variab,variable,192,https://psicode.org,https://github.com/psi4/psi4/issues/1820#issuecomment-625417041,1,['variab'],['variable']
Modifiability,"I was following the CMake manual: ""SHARED libraries are linked dynamically and loaded at runtime. MODULE libraries are plugins that are not linked into other targets but may be loaded dynamically at runtime using dlopen-like functionality."" Guess I was wrong? Maybe @fevangelista can test that out?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262:119,plugin,plugins,119,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-490072262,1,['plugin'],['plugins']
Modifiability,"I was running the following input as a test:. ```set memory 4GB. molecule {; 0 3; O -0.5974387171 -0.0000000000 0.0000000000; O 0.5974387171 0.0000000000 0.0000000000. }. set {; reference rohf; d_convergence 10; e_convergence 10; basis_guess True; max_force_g_convergence 1e-7; freeze_core True; }. E = energy('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z'); H = frequency('mp2/heavy-aug-cc-pv([tq]+d)z + D:ccsd(t)/heavy-aug-cc-pv(d+d)z', mode='continuous', dertype=0); ```. When computing the energy I get the following CBS summary. Everything looks good to me, matches what I get manually computing these (what I was testing). ``` ; ---------------------------------------------------------------------------------------------------------; Method / Basis Rqd Energy [Eh] Variable; ---------------------------------------------------------------------------------------------------------; hf / heavy-aug-cc-pv(t+d)z * -149.65690150 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(t+d)z * -150.13698909 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(q+d)z * -149.66713397 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(q+d)z * -150.17732219 MP2 TOTAL ENERGY; hf / heavy-aug-cc-pv(d+d)z -149.62212747 HF TOTAL ENERGY; mp2 / heavy-aug-cc-pv(d+d)z * -150.01871638 MP2 TOTAL ENERGY; ccsd / heavy-aug-cc-pv(d+d)z -150.00685110 CCSD TOTAL ENERGY; ccsd(t) / heavy-aug-cc-pv(d+d)z * -150.02005663 CCSD(T) TOTAL ENERGY; ---------------------------------------------------------------------------------------------------------. ==> Stages <==. ---------------------------------------------------------------------------------------------------------; Stage Method / Basis Wt Energy [Eh] Scheme; ---------------------------------------------------------------------------------------------------------; scf hf / heavy-aug-cc-pv(q+d)z 1 -149.66713397 xtpl_highest_1; corl mp2 / heavy-aug-cc-pv([tq]+d)z 1 -150.20675446 corl_xtpl_helgaker_2; corl hf / heavy-aug-cc-pv([tq]+d)z -1 -149.67460090 corl_xtpl_helgaker_2; delta",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1897:791,Variab,Variable,791,https://psicode.org,https://github.com/psi4/psi4/issues/1897,1,['Variab'],['Variable']
Modifiability,"I was trying the `sointegrals` plugin with 14c78eabdca but I got a exception:. ```; RuntimeError: CoordEntry::basisset: Basisset not set for H and type of BASIS; ```. GDB show this as the traceback:. ```; #0 __cxa_throw () at ../../../../libstdc++-v3/libsupc++/eh_throw.cc:62; #1 0x0000000001967124 in psi::CoordEntry::basisset (this=0x3fcde30, type=...) at src/lib/libmints/coordentry.cc:125; #2 0x0000000001883551 in psi::BasisSet::construct (parser=..., mol=..., type=...) at src/lib/libmints/basisset.cc:718; #3 0x00002aaab8f93f66 in sointegrals () from ./sointegrals.so; ```. Has something in the API changed that needs changing in the plugin?; Replacing the line. ``` c++; shared_ptr<BasisSet> aoBasis = BasisSet::construct(parser, molecule, ""BASIS"");; ```. with. ``` c++; shared_ptr<BasisSet> aoBasis= BasisSet::pyconstruct_orbital(molecule, ""BASIS"", options.get_str(""BASIS""));; ```. seems to help. Is this the correct way of handling this?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/74:31,plugin,plugin,31,https://psicode.org,https://github.com/psi4/psi4/issues/74,2,['plugin'],['plugin']
Modifiability,"I was trying to run a calculation using the following composite method:. energy('MP2/aug-cc-pV([T, Q]+d)Z + D:FNO-CCSD(T)/aug-cc-pV(T+d)Z', bsse_type = 'cp') . The calculation seems to run fine, but the final energy table looks wrong. ---. ```; Method / Basis Rqd Energy [Eh] Variable; ```. ---. ```; mp2 / aug-cc-pv(q+d)z * -709.56313021 MP2 TOTAL ENERGY; hf / aug-cc-pv(q+d)z * -707.60123747 HF TOTAL ENERGY; scf / aug-cc-pv(t+d)z -707.58023768 SCF TOTAL ENERGY; mp2 / aug-cc-pv(t+d)z * -709.35534062 MP2 TOTAL ENERGY; fno-ccsd(t) / aug-cc-pv(t+d)z * -709.50405507 CCSD(T) TOTAL ENERGY; ccsd / aug-cc-pv(t+d)z -709.42134394 CCSD TOTAL ENERGY; ```. ---. ==> Stages <==. ---. ```; Stage Method / Basis Wt Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z 1 -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 1 -709.71476045 corl_xtpl_helgaker_2; corl hf / aug-cc-pv([tq]+d)z -1 -1223.95889724 corl_xtpl_helgaker_2; delta fno-ccsd(t) / aug-cc-pv(t+d)z 1 -709.50405507 xtpl_highest_1; delta mp2 / aug-cc-pv(t+d)z -1 -709.35534062 xtpl_highest_1; ```. ---. ==> CBS <==. ---. ```; Stage Method / Basis Energy [Eh] Scheme; ```. ---. ```; scf hf / aug-cc-pv(q+d)z -707.60123747 xtpl_highest_1; corl mp2 / aug-cc-pv([tq]+d)z 514.24413679 corl_xtpl_helgaker_2; delta fno-ccsd(t) - mp2 / aug-cc-pv(t+d)z -0.14871446 xtpl_highest_1; total CBS -193.50581514; ```. ---. [363_2_in.txt](https://github.com/psi4/psi4/files/404462/363_2_in.txt); [363_2_out.txt](https://github.com/psi4/psi4/files/404463/363_2_out.txt)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/455:276,Variab,Variable,276,https://psicode.org,https://github.com/psi4/psi4/issues/455,1,['Variab'],['Variable']
Modifiability,I went ahead and rewrite the history. I think your instructions worked.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/644#issuecomment-286876414:17,rewrite,rewrite,17,https://psicode.org,https://github.com/psi4/psi4/pull/644#issuecomment-286876414,1,['rewrite'],['rewrite']
Modifiability,"I will leave the fix in PSI4 to someone else if you don't mind. I've added a workaround for this issue in our Molden parser. Feel free to take a look: https://github.com/theochem/iodata/blob/596cac8db3d3795eaed704b35c99b71b25447bc1/iodata/formats/molden.py#L506-L536 . If someone wants to code a Python version of the Molden writer, please do so with regression tests. I've gone through some trouble to fix small bugs in the C++ code in previous PRs and it would be a shame to reintroduce similar bugs in a Python rewrite. (It is easy to introduce small mistakes.) In general, to test the generated molden files, one can always load them into the Molden program and check if the total charge is correct, as well as the Mulliken charges, which can be compared to the output of `psi4.oeprop(wfn, ""MULLIKEN_CHARGES"")`. This can be verified with increasing angular momentum of the AO basis and pure versus Cartesian conventions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544:514,rewrite,rewrite,514,https://psicode.org,https://github.com/psi4/psi4/issues/1973#issuecomment-665087544,1,['rewrite'],['rewrite']
Modifiability,"I wish there was a way to cut down the repetition in variable description, but from the user standpoint, that probably is the way to go... I'll get docs up and un-draft this (hopefully tonight) and save test pass for tomorrow.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560:53,variab,variable,53,https://psicode.org,https://github.com/psi4/psi4/pull/2569#issuecomment-1129511560,1,['variab'],['variable']
Modifiability,"I would consider not making VV10 throw an error, since it has negligible effects on the electron density. Najibi and Goerigk write in [doi:10.1021/acs.jctc.8b00842](https://doi.org/10.1021/acs.jctc.8b00842). > While in a strictest sense, energy calculations with vdW-DFAs should be carried out fully self-consistently, we demonstrate conclusively for a total of 11 methods that such a strategy only increases the computational time eﬀort without having any signiﬁcant eﬀect on energetic properties, electron densities, or orbital-energy diﬀerences. The recent analytical frequencies study by Feng, Liang and Head-Gordon in [arXiv:2208.14639](https://arxiv.org/abs/2208.14639) states. > The contribution of VV10 to simulating harmonic frequencies is shown to be small for small molecules but important for systems where weak interactions are important, such as water clusters. That manuscript does have analytical second derivatives, so I guess one could extend it to TDDFT as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083:954,extend,extend,954,https://psicode.org,https://github.com/psi4/psi4/pull/2849#issuecomment-1380190083,1,['extend'],['extend']
Modifiability,I would hope that you wouldn't need to set a global variable to get the basis set passed to the wavefunction object. Agreed that this is a bug.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177#issuecomment-837233698:52,variab,variable,52,https://psicode.org,https://github.com/psi4/psi4/issues/2177#issuecomment-837233698,1,['variab'],['variable']
Modifiability,"I would like to use the program from source (rather than the conda distribution), but attempting to build CMake gives me the following error:; ```; CMake Error at cmake/math/MathLibsFunctions.cmake:216 (message):; -- No external LAPACK library found (have you set the MATH_ROOT environment variable?); ```. However, when performing `locate lapack`, I get this:; ```; /usr/include/clapack.h; /usr/lib64/liblapack.so.3; /usr/lib64/liblapack.so.3.4; /usr/lib64/liblapack.so.3.4.2; /usr/lib64/liblapacke.so.3; /usr/lib64/liblapacke.so.3.4; /usr/lib64/liblapacke.so.3.4.2; /usr/lib64/python2.7/site-packages/numpy/linalg/lapack_lite.so; /usr/share/doc/lapack-3.4.2; /usr/share/doc/atlas-devel-3.10.1/doc/lapackqref.pdf; /usr/share/doc/lapack-3.4.2/LICENSE; /usr/share/doc/lapack-3.4.2/README; /usr/share/doc/lapack-3.4.2/lapackqref.ps; ```; I am not sure if the required library is here. Doing `MATH_ROOT=\usr\ cmake3 -H. -Bobjdir` did not help either.; Is there any possible idea how the error could have occurred? I have also tried to instal MKL from conda.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/954:290,variab,variable,290,https://psicode.org,https://github.com/psi4/psi4/issues/954,1,['variab'],['variable']
Modifiability,"I wouldn't know about that, since this patch solved my convergence problems on ROHF calculations, e.g. the example in #423 . Sure, I can switch out the for loops to the versions you suggested; I just adapted the routines from rhf.cc.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-228449211:200,adapt,adapted,200,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-228449211,1,['adapt'],['adapted']
Modifiability,I'd rather just not set the coupled variables if we do not compute them. I guess the argument the other way is folks might have a script expecting these values either in the printing or psivars. I still think not setting the coupled variables is a bit cleaner overall.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-363350484:36,variab,variables,36,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-363350484,2,['variab'],['variables']
Modifiability,"I'll check the code usage in the plugin. Currently, plugins only link against the plugin library but it may not be necessary. Everything else is dynamically linked at runtime. If the plugin library isn't needed then none of the archives need to be installed. The headers certainly need to be installed and referenced.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-130124191:33,plugin,plugin,33,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130124191,4,['plugin'],"['plugin', 'plugins']"
Modifiability,I'll rebase my plugin work to this and open a new PR.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/488#issuecomment-258132017:15,plugin,plugin,15,https://psicode.org,https://github.com/psi4/psi4/pull/488#issuecomment-258132017,1,['plugin'],['plugin']
Modifiability,"I'm a bit confused about how to debug the test locally and also wanted to clarify my understanding of what is going on in the test. If I understand correctly, the test takes the `input.dat` file in`tests/sapt-dft1` and runs it through the built version of psi. Once this is done, it checks that there is nothing in `stdout` or `stderr` (as per line 230 of `tests/pytests/addons.py`) and that the test ran through successfully. I've been using ![this](https://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests) as a general guide for setting stuff up and running tests, but I'm not sure exactly how everything fits together. I could be totally off here, but I'm guessing that by removing the variable, there is some part of the test which expected a cached version of the `nmo_` variable, but now that it is being calculated every time, there is a mismatch between input and output. Any help or guidance with this would be much appreciated.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169:720,variab,variable,720,https://psicode.org,https://github.com/psi4/psi4/pull/2980#issuecomment-1583630169,2,['variab'],['variable']
Modifiability,"I'm adding the caution below to the SAPT docs. Together with the caution @robparrish included at the end of the FISAPT docs, it should clarify the situation, as well as summarize this thread. I'm going to close this ticket and add higher-order SAPT to a general Cholesky wishlist ticket. Speak up if there are any objections. ```; .. caution:: To density fit the dispersion terms in SAPT, the RI auxiliary basis ; controlled through |sapt__df_basis_sapt| set performs well. For Fock-type; terms (*i.e.*, electrostatics, exchange, induction, and core Fock matrix; elements in exchange-dispersion), the density-fitting auxiliary basis in; the :ref:`SAPT module<sec:sapt>` (both SAPT0 and higher-order) is RI (more; efficient for the small basis sets at which SAPT0 performs best) while the; :ref:`FISAPT module<sec:fisapt>` uses the more appropriate JKFIT. For; heavier elements (*i.e.*, second-row and beyond), the RI is unsound; (insufficiently flexible). For SAPT0 in the :ref:`SAPT module<sec:sapt>`,; a workaround is to set |sapt__df_basis_elst| (which controls Elst10 and; Exch10 terms) to a JKFIT basis. For higher-order methods in :ref:`SAPT; module<sec:sapt>`, there is no workaround; on-the-fly construction of an; auxiliary basis through Cholesky decomposition (not implemented) is the; long-term solution.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/317#issuecomment-250948669:945,flexible,flexible,945,https://psicode.org,https://github.com/psi4/psi4/issues/317#issuecomment-250948669,1,['flexible'],['flexible']
Modifiability,"I'm attempting to converge a very tricky molecule with ODC-12. _Something_ goes wrong in the computation, likely involving the fact that I added damping, and I get the following error message:; ```; There was a problem correcting the MO phases.; If this does not converge, try ALGORITHM=TWOSTEP; ```. However helpful a change of algorithm might be, the two step algorithm isn't implemented for the orbital optimized methods, so this advice is useless for me, and aggravating for any users encountering this problem. So the error message needs to be changed if the cumulant parameterization includes orbital rotations. But it would be nice if I could replace it with something else. Do any of the (very few) people familiar with wrangling with tricky molecules in DCT have any suggestions?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1354:573,parameteriz,parameterization,573,https://psicode.org,https://github.com/psi4/psi4/issues/1354,1,['parameteriz'],['parameterization']
Modifiability,"I'm building Psi4 updated with the most recent trunk from Github on a cluster with the following:; vim/7.4 ; python/2.7 ; mkl/2016.4.072 ; hdf5/1.8.20-gcc-s; emacs/25.1 ; gcc/6.3.0 ; cmake/3.7.2 ; perl/5.20.0. During the configure step, MathOpenMP is not found with the following message:; ```; -- Math lib search order is MKL;OPENBLAS;ESSL;ATLAS;ACML;SYSTEM_NATIVE; -- You can select a specific type by defining for instance -D BLAS_TYPE=ATLAS or -D LAPACK_TYPE=ACML; -- or by redefining MATH_LIB_SEARCH_ORDER; -- BLAS will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found BLAS: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- LAPACK will be searched for based on MKLROOT=/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl; -- Found LAPACK: MKL (/global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so); -- Could NOT find MathOpenMP (missing: MathOpenMP_MESSAGE) ; -- Found LAPACK MKL: /global/software/sl-7.x86_64/modules/langs/intel/2016.4.072/mkl/lib/intel64/libmkl_rt.so;...; ```. and then cmake ends without errors. Proceeding with building, it of course fails since it can't find MathOpenMP. I found the solution in issue #1041 : hint at the location of libiomp5 using `-DOpenMP_LIBRARY_DIRS`. However, the fact that cmake terminates without any error message seems suboptimal, since less experienced users might spend a long time recompiling to track down an error that could actually be diagnosed at configure time.; Also, I did not look into extreme detail but I could not find this CMake hint in the `installation from source` part of the manual.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1118:221,config,configure,221,https://psicode.org,https://github.com/psi4/psi4/issues/1118,2,['config'],['configure']
Modifiability,"I'm compiling everything by myself. I think the error might be because I got rid of the ```libstdc++``` flag, because I configured with:; ```-DCMAKE_CXX_FLAGS=""-march=native"" ```. This might be an issue related to:; https://stackoverflow.com/questions/35006614/what-does-symbol-not-found-expected-in-flat-namespace-actually-mean. But when I kept it I couldn't configure if I remember correctly. I will check this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248:120,config,configured,120,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-614779248,2,['config'],"['configure', 'configured']"
Modifiability,"I'm confused, too, as that doesn't seem congruent with your reported . ```; test_paths = [os.getcwd(), os.path.join(os.path.expanduser(""~""), "".qcarchive"")]; FileNotFoundError: [Errno 2] No such file or directory; ```. Unless you have a stray `/tmp/qcengine.yaml`, I'd expect https://github.com/MolSSI/QCEngine/blob/master/qcengine/config.py#L186 to be invoked. Here's a CI run on psi4 1.7 that shows up in qcengine info https://github.com/MolSSI/QCEngine/actions/runs/3654021638/jobs/6174071225#step:9:19 and there's no special configuration or `qcengine.yaml` files. So all I can think of to debug on your setup is to print stuff until the error becomes clear. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199:331,config,config,331,https://psicode.org,https://github.com/psi4/psi4/issues/2830#issuecomment-1343786199,2,['config'],"['config', 'configuration']"
Modifiability,"I'm going to adapt the sample file, too, afterwards this can be merged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830:13,adapt,adapt,13,https://psicode.org,https://github.com/psi4/psi4/pull/2393#issuecomment-1006506830,1,['adapt'],['adapt']
Modifiability,"I'm having trouble getting everything copied into the install location. I generally configure with `mkdir build; cd build; ccmake ..;`, and then customize the CMAKE_INSTALL_PREFIX and other options from the curses gui. I think maybe `CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT` doesn't get updated here: https://github.com/psi4/psi4public/blob/master/CMakeLists.txt#L103-L114. What's the purpose of that section explicitly changing the install prefix?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161:84,config,configure,84,https://psicode.org,https://github.com/psi4/psi4/issues/161,1,['config'],['configure']
Modifiability,"I'm not 100% certain my ""fix"" is not just a hack - my understanding of basis sets and contractions is rather limited. The way I understand it, we're not trusting user input and are normalising all of the normal shells, using both `self.normalise_shell()` and `self.erd_normalise_shell()`. For normal shells, the inputs are the exponent `eps` and the normalisation constant `N` in: ; `psi = N * exp (-r**2 * eps)`. For ECP's, the inputs on each line aren't the exponent + normalisation, but rather they should be the three variables (`n`, `z`, `d` columns in g09 input) in the `i`th component of the potential `v(r)`:; `v(r)_i = d_i * r**(n_i) * e**(-z_i * r**2)`; The third column (`d`, if I got the above right) is stored in `self.PYcoef` and `self.PYoriginal_coef`. If this coefficient is set to zero, the whole component of the potential should be 0 - it shouldn't be normalised. The first column `n` goes to `self.rpowers` for each shell. Finally, the `self.PYexp` contains the exponent `z`. My two questions therefore are:; - should we perform any normalisation at all (including `self.normalise_shell()`) on ECP shells? To me the answer seems no...; - I am assuming the only way to tell a shell is an ECP shell from within `ShellInfo` class is if `self.rpowers` is populated. Wouldn't it be better, if `ShellInfo` received `pt=""Normalized""` when processing an ECP shell?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/937#issuecomment-376423459:522,variab,variables,522,https://psicode.org,https://github.com/psi4/psi4/pull/937#issuecomment-376423459,1,['variab'],['variables']
Modifiability,"I'm not following, I'm afraid. On a build with only pb11 built internally and configured and launched from odd directories to try to provoke a `pwd` issue, these are the only Target files I get under `stage/`, and they seem to be in place and not duplicated. ```; objdir1: (insist) find stage/ -name ""*Target*""; stage/usr/local/psi4/share/cmake/TargetLAPACK; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKConfig.cmake; stage/usr/local/psi4/share/cmake/TargetLAPACK/TargetLAPACKTargets.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Config.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5ConfigVersion.cmake; stage/usr/local/psi4/share/cmake/TargetHDF5/TargetHDF5Targets.cmake; stage/usr/local/psi4/share/cmake/pybind11/pybind11Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets.cmake; stage/usr/local/psi4/share/cmake/psi4/psi4Targets-release.cmake; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/855#issuecomment-343783023:78,config,configured,78,https://psicode.org,https://github.com/psi4/psi4/issues/855#issuecomment-343783023,1,['config'],['configured']
Modifiability,I'm not ignoring this issue so much as I hadn't gotten to CheMPS2 in the cmake rewrite until yesterday. I'll be sure to check it with g++. It's conceivable that it was only working with intel compilers.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452#issuecomment-239645635:79,rewrite,rewrite,79,https://psicode.org,https://github.com/psi4/psi4/issues/452#issuecomment-239645635,1,['rewrite'],['rewrite']
Modifiability,"I'm sorry about the disruption. The executable or the config script or the output file will spit out the proper version, if that helps. ``` bash; >>> bin/psi4 --version; 0.4.14; >>> bin/psi4-config --version; 0.4.14; ```. ```; -----------------------------------------------------------------------; Psi4: An Open-Source Ab Initio Electronic Structure Package; Psi4 0.4.14 Driver. Git: Rev {master} 2485238 dirty; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-182961246:54,config,config,54,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-182961246,2,['config'],['config']
Modifiability,"I'm troubled by your steps 1 & 2. The command `psi4 --new-plugin myplugin +mointegrals` (which can be executed anywhere in your filesystem– in or out of the psi4 repo clone doesn't matter) _creates_ a new directory `myplugin` already populated by various files, which you should be able to cd into and execute `make` within. Steps 1 & 2 shouldn't be necessary. They might be interfering b/c the name of the directory is bound up in the name of the plugin, which requirement the `--new-plugin` automatically satisfies. That is, once you're done with the experimentation stage, choose your name `myplugin` carefully, because it's a bother to switch out later. Or are you generating a plugin from the conda binary? That requires a little different procedure.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194479817:58,plugin,plugin,58,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194479817,4,['plugin'],['plugin']
Modifiability,"I'm trying to build a rather complete version of Psi4 using the configure line:; ``cmake -H. -Bobj_rel -DMAX_AM_ERI=6 -DENABLE_ambit=ON -DENABLE_CheMPS2=ON -DENABLE_dkh=ON -DENABLE_libefp=ON -DENABLE_simint=ON -DENABLE_gdma=ON -DENABLE_PCMSolver=ON -DENABLE_snsmp2=ON -DENABLE_v2rdm_casscf=ON -DCMAKE_BUILD_TYPE=Release -DOpenMP_LIBRARY_DIRS=/opt/intel/lib/intel64_lin/``. Everything built (once the SNS-MP2 tag was corrected) except for v2rdm_casscf which complains about something I don't quite understand:; ```; [ 92%] Performing configure step for 'v2rdm_casscf_external'; loading initial cache file /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/tmp/v2rdm_casscf_external-cache-Release.cmake; -- Setting option ENABLE_OPENMP: ON; -- Psi4 script: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/bin/psi4; -- Psi4 headers: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/include; -- Psi4 library: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib//psi4/core.cpython-36m-x86_64-linux-gnu.so; -- Psi4 sys.path: /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/lib/; -- Psi4 components: ambit;chemps2;dkh;gdma;pcmsolver;simint; -- Python executable: /usr/bin/python3; -- Detecting MathOpenMP -- ?OpenMP=ON, ?MKL= MKL, LANG=CXX;Fortran, C/CXX/Fortran=/GNU/GNU; CMake Error at /usr/share/cmake-3.10/Modules/FindPackageHandleStandardArgs.cmake:211 (message):; No REQUIRED_VARS specified for FIND_PACKAGE_HANDLE_STANDARD_ARGS(); Call Stack (most recent call first):; /usr/share/cmake-3.10/Modules/FindOpenMP.cmake:487 (find_package_handle_standard_args); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindTargetOpenMP.cmake:64 (find_package); /home/jerome/Documents/Atlanta/PSIcode/psi4public_JFG/obj_rel/stage/share/cmake/TargetLAPACK/FindMathOpenMP.cmake:104 (find_package); /usr/share/cmake-3.10/M",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1426:64,config,configure,64,https://psicode.org,https://github.com/psi4/psi4/issues/1426,2,['config'],['configure']
Modifiability,"I'm trying to compile your branch, to test on my machine, but keep hitting an incompatibility related to a `toupper` macro. Have you ever seen this before?. ```; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/p_fprintf.cc:30:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/parallel.h:40:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libparallel/process.h:38:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/liboptions/liboptions.h:43:; In file included from /Users/andysim/rmrpsi4/psi4/src/lib/libpsi4util/exception.h:33:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/sstream:174:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ostream:138:; In file included from /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/ios:216:; /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/../include/c++/v1/__locale:466:15: error: C++ requires a type; specifier for all declarations; char_type toupper(char_type __c) const; ^; /Users/andysim/miniconda/include/python2.7/pyport.h:731:29: note: expanded from macro 'toupper'; #define toupper(c) towupper(btowc(c)); ```. Both the HomeBrew and Conda versions of Python seem to have this issue. I just did a simple `cmake -DCMAKE_BUILD_TYPE=Debug ..` to configure, and it found the appropriate Python libs (I also removed the HomeBrew Python completely, to force Conda to be used.). I can see what the problem is, but I have no idea why it's occuring now, _i.e._, which flags we used before to avoid the problem. Any ideas?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235109795:1511,config,configure,1511,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235109795,1,['config'],['configure']
Modifiability,"I'm trying to install Psi4 for a user, but noticed something a little odd. When I run:. ```; psi4 --new-plugin myplugin; ```. the Makefile it creates references the header files in the build directory, not the installation directory. Since I'm building on scratch space (temporary storage), it gets deleted automatically. I would think that it should default to pointing to the installation directory instead.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410:104,plugin,plugin,104,https://psicode.org,https://github.com/psi4/psi4/issues/410,1,['plugin'],['plugin']
Modifiability,"I'm trying to reproduce some dmrg calculations in the literature on polyenes in the STO-3G basis set. However, I get the following error. ```; ###########################################################; ### ###; ### DMRG-SCF ###; ### ###; ### CheMPS2 by Sebastian Wouters ###; ### https://github.com/SebWouters/CheMPS2 ###; ### Comput. Phys. Commun. 185 (6), 1501-1514 (2014) ###; ### ###; ###########################################################. Number of variables in the x-matrix = 342; CheMPS2 output is temporarily written to the file output.dat.chemps2 and will be copied here.; iwl_buf_init: Can't open file 33; An error has occurred python-side. Traceback (most recent call last):. File ""<string>"", line 80, in <module>. File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/driver.py"", line 444, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""/global/home/groups-sw/mhg/psi4/install/share/psi4/python/procedures/proc.py"", line 2686, in run_dmrgci; dmrg_wfn = psi4.dmrg(ref_wfn). RuntimeError: ; Fatal Error: PSIO Error; Error occurred in file: /global/home/groups-sw/mhg/psi4/psi4.git/src/lib/libpsio/error.cc on line: 128; The most recent 5 function calls were:. psi::PsiException::PsiException(std::string, char const*, int); psi::psio_error(unsigned int, unsigned int); psi::PSIO::read(unsigned int, char const*, char*, unsigned long, psi::psio_address, psi::psio_address*); psi::IWL::fetch(); psi::DiskJK::compute_JK(); ```. when I try to run a calculation with. ```; numOrbitals = [ 47 , 9 ]; R(O)HF DOCC = [ 28 , 4 ]; R(O)HF SOCC = [ 0 , 1 ]; frozen_docc = [ 9 , 0 ]; active = [ 38 , 9 ]; virtual = [ 0 , 0 ]; nElectrons = 65; nEl. active = 47; ```. I'm having trouble seeing why this would fail. First of all, the scratch partition on the node has over 2 TB of free space, and second, there are only 65 basis functions in the system, so even if one didn't use any kind of symmetries for the repulsion integrals, one would",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/464:462,variab,variables,462,https://psicode.org,https://github.com/psi4/psi4/issues/464,1,['variab'],['variables']
Modifiability,I'm using 16.0.2 with no problems on my workstation. Didn't know about the `ENABLE_XHOST` configure option but I routinely use `setup --vectorization` with no issues. I'll give xhost a try shortly. Though I'm having trouble getting cfour running on my new cluster using 16.0.2 with my flags from the old cluster (with older Intel compiler). I'm wondering now if this is related.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-198705736:90,config,configure,90,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-198705736,1,['config'],['configure']
Modifiability,"I'm using `mp.set_start_method('spawn', force=True)` which seemed long-term safe (cf [this Python discussion](https://discuss.python.org/t/switching-default-multiprocessing-context-to-spawn-on-posix-as-well/21868)), although perhaps `forkserver` would be just as safe. I had to do some refactoring elsewhere to get this to work but it ultimately worked out, so this isn't blocking me. Still, it would be nice not to have to worry about this behavior - not sure what in Psi4 breaks with `fork`, or if it's easily fixable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3189#issuecomment-2211335778:286,refactor,refactoring,286,https://psicode.org,https://github.com/psi4/psi4/issues/3189#issuecomment-2211335778,1,['refactor'],['refactoring']
Modifiability,"I've actually been thinking about Fermi smearing recently, as well, but didn't come to a conclusion which code to put it into; Psi4 was and is one of the options. Psi4 already appears to have support for fractional occupation numbers. The problem about Fermi smearing is that updating the occupation numbers breaks the Pulay DIIS convergence accelerator, which have to be reset at every iteration. Typical choices are to break the optimization into:; - orbital optimization for fixed occupation numbers and; - occupation number update for fixed orbitals.; The first part is already implemented, while the second part would need to be implemented. Again, the problem here is that a given input set of orbitals define a density via occupation numbers which are determined by the corresponding orbital energies, but the orbital energies depend on the density through the Fock matrix. I've seen two different schemes to do this. First, in which the occupation number update is based on a line search between the density matrices with the old and the new occupation numbers, `Dtilde = (1 - damp)*Dold + damp*Dnew`; this I read converges in something like 3-7 iterations, and then you repeat the SCF with the new fixed occupation numbers (I don't know how many cycles in total this will need). There's also a more evolved scheme by Marzari [PRL 79, 1337 (1997)] where one employs non-diagonal occupation numbers in again a two-loop SCF scheme.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797:1308,evolve,evolved,1308,https://psicode.org,https://github.com/psi4/psi4/issues/1646#issuecomment-492525797,1,['evolve'],['evolved']
Modifiability,"I've build the default `sointegrals` plugin and used it on the following input file:. ```; molecule CO; {; C; O 1 1.14; units au; }. set {; basis sto-3g; }. plugin_load(""./sointegrals.so""). set sointegrals {; print 10; }. plugin(""sointegrals.so""); ```. This is the output: https://gist.github.com/wpoely86/15abc32a634c0cc4a73f. I think something went wrong. `CO` has `c2v` symmetry here. If I look at the TEI, I'm missing `(2 0 | 0 0)`. Both orbital 0 and 2 are part of the `A1` irrep and so on basis of symmetry, I don't expect this integral to be zero. If I run exactly the same molecule with the `mointegrals` plugin (and symmetric orthogonalisation, so `nmo`==`nso`.), then it does give me the `(2 0 | 0 0)` integral.; The `(0 0 | 0 0)`, `(1 0 | 0 0)`, `(3 0 | 0 0)`, `(4 0 | 0 0)` and `(5 0 | 0 0)` integrals are all present.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68:37,plugin,plugin,37,https://psicode.org,https://github.com/psi4/psi4/issues/68,3,['plugin'],['plugin']
Modifiability,I've found that in ConfigPython.cmake PYTHON_LIBRARY is being used but in the link in src/bin/psi4 PYTHON_LIBRARIES is being used. Once I made the change in src/bin/psi4 I was able to link.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/164#issuecomment-131152671:19,Config,ConfigPython,19,https://psicode.org,https://github.com/psi4/psi4/pull/164#issuecomment-131152671,1,['Config'],['ConfigPython']
Modifiability,"I've got no `@CXX@` anywhere, so I'd check your versions again. Maybe a fresh clone-and-build in case something lingered. Actually, now I'm seeing your edited skeleton/CM* post and that's all wrong. Should look like https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/basic/CMakeLists.txt.template",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271964672:273,plugin,plugin,273,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271964672,1,['plugin'],['plugin']
Modifiability,"I've had similar problems (location of scratch files) on HPC systems, but; have found Psi4's current machinery adequate for working with them.; Ultimately I am going to suggest a veto of this pull. I'm particularly worried because I have never used an HPC that uses those; variables. I've used 5 or 6 different machines and the variable has always; been $SCRATCH (or some variation of it) so I don't think the proposed; default conventions are wide spread. Second based on community sentiment,; I think we should avoid C++11 for the time being as it seems at least some; of our users are not ready for the switch (for the record I am the current; primary user of C++11 in the Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:;",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:273,variab,variables,273,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,3,['variab'],"['variable', 'variables']"
Modifiability,"I've hit another issue. [sointegral.cc](https://github.com/psi4/psi4public/blob/master/src/lib/libmints/sointegral.cc#L409-L410) seems to assume that their are as many `TwoBodyAOInt` as threads. At least in the `sointegrals` plugin, this is not the case and you get a segfault. The easy fix is to limit to one thread but there should be a better solution.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/74#issuecomment-76747218:225,plugin,plugin,225,https://psicode.org,https://github.com/psi4/psi4/issues/74#issuecomment-76747218,1,['plugin'],['plugin']
Modifiability,"I've just tested the following:; * cloned to `/external_disk/gits/psi4`; * from there, configured to `/tmp` via `cmake -S. ... -DCMAKE_INSTALL_PREFIX=/home/auser/installs/psi4 -B/tmp/compile-psi4`; * build in `/tmp/compile-psi4` via `cmake --build .`; * test internal install via `/tmp/compile-psi4/stage/bin/psi4 --test`; * install via `cmake --build . --target install` to `/home/auser/installs/psi4`; * test external install via `/home/auser/installs/psi4/bin/psi4 --test`. That spans an external disk, an account home, and `/tmp/`, and I don't observe the mis-installed quadratures files you report. You are using CMake variables, not environment variables to configure this, right? Do you have a link to the recipe you're using? This is what I use for conda, if that's any help. https://github.com/psi4/psi4meta/blob/master/conda-recipes/psi4-multiout/build.sh#L120",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867:87,config,configured,87,https://psicode.org,https://github.com/psi4/psi4/issues/2683#issuecomment-1215839867,4,"['config', 'variab']","['configure', 'configured', 'variables']"
Modifiability,"I've rebased this so that dev psi4 is working with dev libxc (soon to be libxc v5). Haven't tried fixing up psi for xc changes in the last year+, so there are failing tests at present. * Libxc master is still labeled 4.3.4, which is the same as the very different release branch current psi is accustomed to. Probably the easiest way to work with clones of both projects and be sure of what you're getting is to build libxc master (`-DBUILD_SHARED_LIBS=ON`), install it, edit the `ConfigVersion.cmake` file to `4.4`, go to psi, force uninstall libxc conda package if libxc is in your active env, edit external/upstream/libxc/CM to 4.4, build psi passing `-DLibxc_DIR=/path/to/dir/of/ConfigVersion`, build psi, check you've got the right one with `ldd stage/lib/psi4/core`.; * Errors at present:; ```; 	158 - dft-grad-lr1 (Failed); 	159 - dft-grad-lr2 (Failed); 	160 - dft-grad-lr3 (Failed); 	175 - dft1 (Failed); 	177 - dft1-alt (Failed); 	179 - dft3 (Failed); 	180 - dft-omega (Failed); 	213 - frac-ip-fitting (Failed); 	338 - sapt-dft-lrc (Failed); 	364 - soscf-dft (Failed); 	397 - dft-custom-hybrid (Failed); 	399 - dft-custom-gga (Failed); 	443 - dftd3-energy (Failed); ```; ```; >>> pytest ../tests/pytests/test_dft_benchmarks.py -rws -v -n12; [gw8] [ 5%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[B5050LYP- - ]; [gw7] [ 18%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[MN12-SX- - ]; [gw5] [ 22%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN0- - ]; [gw8] [ 33%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97- - ]; [gw6] [ 36%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-D- - ]; [gw6] [ 43%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[wB97X-V- - ]; [gw2] [ 47%] FAILED ../tests/pytests/test_dft_benchmarks.py::test_dft_bench_ionization[SCAN- - ]; [gw8] [ 54%] FAILED ../tests/pytests/test_dft_benchm",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105:481,Config,ConfigVersion,481,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601509105,2,['Config'],['ConfigVersion']
Modifiability,"I've seen similar errors when Python versions are mixed. Use which python and which python-config to check your shell versions. Use ldd bin/psi4 to check the linked version. Boost also could have been built against a diff Python. If there's any mismatch identified or possible, try passing --python to setup (setup --help for details) and letting psi4 build the packaged boost. No turning off Python for psi4, I'm afraid. It's integral to the executable. . Sent from my iPhone. > On May 11, 2015, at 12:11 AM, Vladimir notifications@github.com wrote:; > ; > Dear Pis4 developers.; > ; > I've got in issue when link psi4 binary:; > ; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function `posix_tmpnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7515: warning: the use of`tmpnam_r' is dangerous, better use `mkstemp'; > /usr/local/lib/libpython2.7.a(posixmodule.o): In function`posix_tempnam':; > /home/kbob/bin/Python-2.7.5/./Modules/posixmodule.c:7462: warning: the use of `tempnam' is dangerous, better use`mkstemp'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `boost::python::converter::(anonymous namespace)::slot_rvalue_from_python<std::basic_string<wchar_t, std::char_traits<wchar_t>, std::allocator<wchar_t> >, boost::python::; > builtin_converters.cpp:(.text+0x1286): undefined reference to`PyUnicodeUCS4_AsWideChar'; > /home/kbob/git/psi4release/build/boost/lib/libboost_python-1_57.a(builtin_converters.o): In function `encode_string_unaryfunc':; > builtin_converters.cpp:(.text+0x455): undefined reference to`PyUnicodeUCS4_FromEncodedObject'; > collect2: error: ld returned 1 exit status; > make[2]: **\* [bin/psi4] Ошибка 1; > make[1]: **\* [src/bin/psi4/CMakeFiles/psi4.dir/all] Ошибка 2; > make: **\* [all] Ошибка 2; > I'm running on Ubuntu 14.04 with cmake installed from ppa:george-edison55/cmake-3.x; > ; > Since the default version available in 14.04 is boost-1.54, used to compile boost_1_57_0.tar.bz2 th",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/94#issuecomment-100760375:91,config,config,91,https://psicode.org,https://github.com/psi4/psi4/issues/94#issuecomment-100760375,1,['config'],['config']
Modifiability,"I` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::environment.wavefunction` no longer exists. This will break any input side `psi4.wavefunction` and `psi4.set_wavefunciton` calls. Please use the `return_wfn` and `ref_wfn` kwargs on methods instead.; - A consequence of this is we broke all of the plugins! Don't worry the fix is very simple please change your C++ signature from: ; `PsiReturnType skeleton(Options& options)`; to:; `SharedWavefunction skeleton(SharedWavefunction ref_wfn, Options& options)`; Every method in Psi4 now takes a Wavefunction and Options objects, this is to make plugins consistent as well. The python-side signature is now `psi4.plugin('skeleton.so', ref_wfn)`. Options passing has not yet been handled, but thats next up on the list. ---. Below is a list of outstanding issues. Please note that these will likely not all be cleaned up here. Outstanding issues will be moved to a ticket:; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet.; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used.; - [x] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code.; - [x] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:2606,plugin,plugin,2606,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['plugin'],['plugin']
Modifiability,"Ideally, I suppose, the variables should become `size_t` from the start. As already touched upon here https://github.com/psi4/psi4/issues/1764#issuecomment-562739051",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212144203:24,variab,variables,24,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212144203,1,['variab'],['variables']
Modifiability,"If anyone else is having issues here, we've just configured the `ddx` interface to Psi4 and now solvent is working again on our systems—unfortunately there are no analytical gradients w/ the current interface, but I think this will change in the future (see discussion in #2767). The interface is documented nicely [here](https://psicode.org/psi4manual/master/ddx.html).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3202#issuecomment-2411453661:49,config,configured,49,https://psicode.org,https://github.com/psi4/psi4/issues/3202#issuecomment-2411453661,1,['config'],['configured']
Modifiability,"If something is meant to be part of the output, I would argue that the correct way to do this is to print to the outfile instance (which is set to stdout if the user wants that). I claim responsibility for this glitch, and any like it; they resulted from trying to be flexible in my automated changes by supporting the old, non-uniform, way of printing. I've made the necessary changes in both the public and private branches to this file.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/71#issuecomment-76407683:268,flexible,flexible,268,https://psicode.org,https://github.com/psi4/psi4/pull/71#issuecomment-76407683,1,['flexible'],['flexible']
Modifiability,"If the SCF calculation raises a ``ConvergenceError``, the default ``SCF_TYPE`` option is not restored to the previous value. This means that if the exception is catched, and the program continues, all subsequent calculations might use a different SCF algorithm. I'm using ``psi4 1.8`` installed through ``conda-forge``. Minimal reproducible example; ```python; import numpy as np; import psi4; from psi4.driver.p4util import OptionsState. # Create water molecule.; positions = np.array([; [-0.2950, -0.2180, 0.1540],; [-0.0170, 0.6750, 0.4080],; [0.3120, -0.4570, -0.5630],; ], dtype=np.double); molecule = psi4.core.Molecule.from_arrays(geom=positions, units='angstrom', elem=['O', 'H', 'H']). # Configure.; psi4.core.be_quiet(); psi4.core.set_active_molecule(molecule); psi4.set_options(dict(basis='sto-3g', reference='RHF')). # Check scf type.; scf_type1 = psi4.core.get_global_option('SCF_TYPE'). # Run calculation.; psi4.energy(name='scf'). # Check scf type after converged calculation.; scf_type2 = psi4.core.get_global_option('SCF_TYPE'). # Now run an unconverged calculation.; option_stash = OptionsState(['MAXITER']); psi4.set_options(dict(maxiter=1)); try:; psi4.energy(name='scf'); except psi4.ConvergenceError:; pass; option_stash.restore(). # Check scf type after unconverged calculation.; scf_type3 = psi4.core.get_global_option('SCF_TYPE'). print(scf_type1, scf_type2, scf_type3); ```; output; ```; PK PK DF; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3000:697,Config,Configure,697,https://psicode.org,https://github.com/psi4/psi4/issues/3000,1,['Config'],['Configure']
Modifiability,"If the latest patches work, ConfigMath should never again find a conda MKL (which probably means I should revert #611) because it can't find a `mkl.h` at the same MKL_ROOT. For all of us with intel compilers and mkl, this doesn't change a thing because ConfigMath was always finding our intel installations, never conda (the final lib may have shown up as linked to conda, but that's a `rpath`, not a ConfigMath, issue). But in cases w/o an intel installation and w/ a conda installation, ConfigMath should no longer settle upon conda mkl_rt.so because there's no associated `mkl.h`. Instead, should give up on MKL and proceed to OpenBLAS, ..., SYSTEM_NATIVE.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/615#issuecomment-279088836:28,Config,ConfigMath,28,https://psicode.org,https://github.com/psi4/psi4/pull/615#issuecomment-279088836,4,['Config'],['ConfigMath']
Modifiability,"If the libxc upstream cmake support isn't ready, what's the problem with using their pkg-config? I know that is not cmake-native, but isn't the `find_package()` support for that as well?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-450762330:89,config,config,89,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-450762330,1,['config'],['config']
Modifiability,"If there is something bad about this, I could always duplicate those blas files in my plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218417480:86,plugin,plugin,86,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218417480,1,['plugin'],['plugin']
Modifiability,"If we expand this issue to best practices, then a few lessons from #736 ; * Add as many headers as you like during development, but before making the PR, explicitly check if they're needed, and if so, move to source, not convenience header to minimize build impact.; * Avoid including any `py::` in `<top-lvl>/psi4/src/psi4` for the sake of build time. Instead, extend class (can't use private member data) in accompanying `<top-lvl>/psi4/src/export_<cls>.cc`. If you feel you need a `py::` in `<top-lvl>/psi4/src/psi4`, contact the core-devs to see if a work-around can be devised.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752#issuecomment-312340409:362,extend,extend,362,https://psicode.org,https://github.com/psi4/psi4/issues/752#issuecomment-312340409,1,['extend'],['extend']
Modifiability,"If you're gonna change things with CMake, I've got two items on the wish lists:; - respect `-DCMAKE_C_FLAGS` (and CXX). If CMake gets flags, they should be used (and not ignore as currently happens); - Make it possible to build plugins after installing PSI4. Currently, the `--new-makefile` generate a makefile with points to the build dir of psi4 (instead of install). We have to patch and work around that every time.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/436#issuecomment-230762763:228,plugin,plugins,228,https://psicode.org,https://github.com/psi4/psi4/pull/436#issuecomment-230762763,1,['plugin'],['plugins']
Modifiability,"Immediate questions:; @davpoolechem - Is JK stable enough for this PR, or do you need a hold on this while refactoring?; @jturney - Does this sound more like a new library of its own, or something that belongs in `libmints`?; @andyj10224 - Can you comment on what the difference is between `libffm` and `fmm tree`?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2665#issuecomment-1208366769:107,refactor,refactoring,107,https://psicode.org,https://github.com/psi4/psi4/pull/2665#issuecomment-1208366769,1,['refactor'],['refactoring']
Modifiability,"Improve Compiler Portability Through ""Pedantic"" Compilation",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145:17,Portab,Portability,17,https://psicode.org,https://github.com/psi4/psi4/pull/3145,1,['Portab'],['Portability']
Modifiability,Improve build configuration for MSVC,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1182:14,config,configuration,14,https://psicode.org,https://github.com/psi4/psi4/pull/1182,1,['config'],['configuration']
Modifiability,"In [`oeprops.cc`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/oeprop.cc#L1415), the function `compute_mulliken_charges()` is defined, which adds a vector of atom-centered Mulliken charges to the wavefunction's array variables:. ```c; void OEProp::compute_mulliken_charges() {; PAC::SharedStdVector Qa, Qb, apcs;; std::tie(Qa, Qb, apcs) = pac_.compute_mulliken_charges(true);; wfn_->set_atomic_point_charges(apcs);. auto vec_apcs = std::make_shared<Matrix>(""Mulliken Charges: (a.u.)"", 1, apcs->size());; for (size_t i = 0; i < apcs->size(); i++) {; vec_apcs->set(0, i, (*apcs)[i]);; }; wfn_->set_array_variable(""MULLIKEN CHARGES"", vec_apcs);; }; ```. It would be useful to also get spin densities here, which would just be `Qa - Qb`. Would it also be possible to add an array variable `MULLIKEN SPIN DENSITIES` which contains this value? (also perhaps for Lowdin populations too)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3211:236,variab,variables,236,https://psicode.org,https://github.com/psi4/psi4/issues/3211,2,['variab'],"['variable', 'variables']"
Modifiability,"In `sapt_jk_terms.py` we build the following variables:. ```python; ret[""Ind20,u (A<-B)""] = unc_ind_ab; ret[""Ind20,u (A->B)""] = unc_ind_ba; ret[""Ind20,u""] = unc_ind_ab + unc_ind_ba; ret[""Exch-Ind20,u (A<-B)""] = unc_indexch_ab; ret[""Exch-Ind20,u (A->B)""] = unc_indexch_ba; ret[""Exch-Ind20,u""] = unc_indexch_ba + unc_indexch_ab; ```. There are also the associated `r` terms as well. Hmm, SAPT8 passes on my laptop with current master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364674066:45,variab,variables,45,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364674066,1,['variab'],['variables']
Modifiability,"In general your install structure should be the same as the source ; structure. I would recommend installing to include/psi4/src/bin/ or ; include/psi4/src/lib/. On 05/11/2016 03:53 AM, Lori A. Burns wrote:. > @jturney https://github.com/jturney , @edeprince3 ; > https://github.com/edeprince3 , @ryanmrichard ; > https://github.com/ryanmrichard, @dgasmith ; > https://github.com/dgasmith should look over a0a8c2b ; > https://github.com/psi4/psi4/commit/a0a8c2b644de0380d0fa5339f47731a362d8a02e ; > and see if it's ok. Basically, we were installing headers ; > |src/lib/libmodule/_.h| to |includes/psi4/libmodule/_.h|, which is ; > fine. But then we were installing headers |src/bin/module/_.h| to ; > |includes/psi4/libmodule/_.h|, which meant that a header couldn't be ; > referred to through the same path from both a source and installed ; > file tree. Cue problems for compiling plugins against both.; > ; > This commit installs bin headers to |includes/psi4/module/*.h|. Then ; > since the intermediate lib or bin dir is gone, can't do |#include ; > <../bin/fnocc/blas.h>| anymore, so added the bin dirs to the CMake ; > includes path. Then also installed |FCMangle.h| since Fortran plugins ; > needed it.; > ; > The above gets Eugene's v2rdm built for me. Have I introduced any bad ; > practices?; > ; > @dgasmith https://github.com/dgasmith , contrary to what I wrote ; > you, please hold off on merging this PR until this issue gets resolved; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly or view it on GitHub ; > https://github.com/psi4/psi4/pull/376#issuecomment-218387805",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/376#issuecomment-218519582:884,plugin,plugins,884,https://psicode.org,https://github.com/psi4/psi4/pull/376#issuecomment-218519582,2,['plugin'],['plugins']
Modifiability,"In my case, there is a dependency on Python 2.7 library in /usr/lib64. It might be the problem since when using Python 3.5 out of my miniconda, I had no problems with GCC. The only other thing that changes is my `PATH` variable where `/usr/bin` has a higher priority so that Python 2.7 is default instead of 3.5, but that should not change the library paths. My problem with `source activate` was indeed because of the `tcsh` shell. Finally, Psi4 with Python 2.7 compiled and tested successfully, only `psimrcc-fd-freq2` fails. With Python 3.5, there are more test failures, namely:; The following tests FAILED:; 9 - cbs-delta-energy (Failed); 10 - cbs-xtpl-energy (Failed); 12 - cbs-xtpl-gradient (Failed); 13 - cbs-xtpl-opt (Failed); 14 - cbs-xtpl-func (Failed); 15 - cbs-xtpl-wrapper (Failed); 118 - dfmp2-1 (Failed); 168 - freq-isotope (Failed); 170 - fnocc2 (Failed); 175 - gibbs (Failed); 192 - mp2-def2 (Failed); 202 - nbody-he-cluster (Failed); 203 - numpy-array-interface (Failed); 255 - psimrcc-fd-freq2 (Failed); 259 - psithon2 (Failed); 260 - pubchem1 (Failed); 261 - pubchem2 (Failed); 262 - pywrap-alias (Failed); 263 - pywrap-all (Failed); 265 - pywrap-cbs1 (Failed); 270 - pywrap-db1 (Failed); 271 - pywrap-db2 (Failed); 273 - pywrap-freq-e-sowreap (Failed); 274 - pywrap-freq-g-sowreap (Failed); 275 - pywrap-molecule (Failed); 276 - pywrap-opt-sowreap (Failed); 287 - sapt6 (Failed); 307 - tu6-cp-ne2 (Failed); 312 - options1 (Failed); 317 - psi4numpy-rhf (Failed); 318 - psi4numpy-dfmp2 (Failed); 319 - dftd3-energy (Failed); 320 - dftd3-grad (Failed); 321 - dftd3-psithon2 (Failed); 322 - dftd3-version (Failed). I looked at one of them and the problem was the formatting of some printing command. I didn't investigate further.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-252852440:219,variab,variable,219,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-252852440,1,['variab'],['variable']
Modifiability,"In my view, the most important variables that get set in OCC are the `[SAME-SPIN|OPPOSITE-SPIN|SINGLES] [|O][MP2|MP3|MP2.5|LCCD] CORRELATION ENERGY`] ones both now and in future because all others can be constructed from these. yes, I think in future the main printing from OCC could be moved py-side, especially for quantities like SCS that OCC does nothing further with internally. I broadly plan that OCC would set the above variables and any totals that it likes, that OCC would print c-side the main energies that it's dealing with, then in proc.py, the return variables get sent to qcdb to be composed into `SCS(N)-MP2 TOTAL ENERGY` and anything else for which input pieces are present. the key thing about qcdb qcvar composition is that it also checks to make sure the SCS(N) built from components equals any SCS(N) passed in whole so ensures that OCC and qcdb are using the same definitions. I don't want to delete OCC's definitions before this check is active. So that plus leaving Ugur's printing mostly undisrupted is why I figured this could be put off. > If so, then the correct solution to the spin-redundancy problem is to eliminate the spin-component variables from occ. Are you meaning SCS(N) or SAME-/OPPOSITE-SPIN variables?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355:31,variab,variables,31,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581627355,5,['variab'],['variables']
Modifiability,"In the ""enable (or psi4 requires it)"" case, I think there _is_ a dummy library from https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/external/gdma/CMakeLists.txt#L21. Regarding the ""is for dependency resolution"", good to know, I'll try not to break that. :-). Regarding Note 2, I think that's the other dummy library, https://github.com/ryanmrichard/psi4/blob/CMakeRewrite/cmake/Psi4Macros.cmake#L184. I've got it so a successful `find_package(gdma CONFIG)` introduces a `gdma::gdma` target replete with libs, includes, and `-DUSE_GDMA` in it's INTERFACE w/o any subsequent `add_library()`. Big restriction I've found so far is that such target is scope of found dir and below (no subsequent `add_library(target_again UNKNOWN IMPORTED GLOBAL)`). I'm just seeing how this fits into the superbuild and if cuts down some logic.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238061055:455,CONFIG,CONFIG,455,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238061055,1,['CONFIG'],['CONFIG']
Modifiability,"In the spirit of _not_ keeping issues open for years just because there's something more that could be done, this is a new ticket for some enhancements to the finite difference code, now that we can play with it py-side. - [ ] instead of lists to track all the geometries and corresponding energies, use lists with a bit of metadata to facilitate workflows. discussion started [here](https://github.com/psi4/psi4/issues/884#issuecomment-360953535); - [ ] (adding mostly so we don't lose track) make sure the findif can handle a qcdb.Mol as well as a psi4.core.Mol. I believe @JonathonMisiewicz is on this one.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1148:139,enhance,enhancements,139,https://psicode.org,https://github.com/psi4/psi4/issues/1148,1,['enhance'],['enhancements']
Modifiability,Incorrect normalization in SO basis overlap integrals from the plugin template,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/874:63,plugin,plugin,63,https://psicode.org,https://github.com/psi4/psi4/issues/874,1,['plugin'],['plugin']
Modifiability,"Inherit CCLambdaWavefunction from CCEnergyWavefunction and further; build a class around CCLambdaWavefunction. ## Description; This PR just contains the inheritance of the CCLambdaWavefunction from the CCEnergyWavefunction, but no other functional changes or features.; The main motivation for this was so that this can be merged before the clang-format of the cclambda module in #1206 that seems to be happening before #1061. It would be nice to have these changes in before the formatting. ## Checklist; - [x] Tests added for any new features; - [x] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1257:0,Inherit,Inherit,0,https://psicode.org,https://github.com/psi4/psi4/pull/1257,2,"['Inherit', 'inherit']","['Inherit', 'inheritance']"
Modifiability,"InlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== Address 0x18 is not stack'd, malloc'd or (recently) free'd; ==98805== ; ==98805== ; ==98805== Process terminating with default action of signal 11 (SIGSEGV); ==98805== Access not within mapped region at address 0x18; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805== by 0x4FE0CE: _PyFunction_Vectorcall (call.c:342); ==98805== If you believe this happened as a result of a stack; ==98805== overflow in y",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:2682,plugin,plugin,2682,https://psicode.org,https://github.com/psi4/psi4/issues/3200,1,['plugin'],['plugin']
Modifiability,"Inside my `p4env` environment, I ran `conda install -c defaults jupyter` and `conda install -c defaults ipykernel`. I also separately ran `conda install nb_conda_kernels` to make sure that `jupyter` could see all my `conda` kernels (from [here](https://github.com/jupyter/jupyter/issues/245)), although that just cluttered things in notebook GUI. I'm getting the same kernel crash. Here's a new `conda list`:; ```; bleach 2.0.0 py36_0 conda-forge; ca-certificates 2017.7.27.1 0 conda-forge; certifi 2017.7.27.1 py36_0 conda-forge; chemps2 1.8.4 0 psi4/label/dev; cloog 0.18.0 0 ; dbus 1.10.22 h3b5a359_0 ; decorator 4.1.2 py36_0 conda-forge; dftd3 3.2.0 7 psi4; dkh 1.2 1 psi4/label/dev; entrypoints 0.2.3 py36_1 conda-forge; erd 3.0.6 1 psi4/label/dev; expat 2.2.5 he0dffb1_0 ; fontconfig 2.12.1 3 ; freetype 2.5.5 2 ; gcc-5 5.2.0 1 psi4; gcc-5-mp 5.2.0 0 psi4; gcp 2.0.1 0 psi4; gdma 2.2.6 3 psi4/label/dev; glib 2.53.6 h5d9569c_2 ; gmp 6.1.2 0 conda-forge; gst-plugins-base 1.12.2 he3457e5_0 ; gstreamer 1.12.2 h4f93127_0 ; hdf5 1.8.17 11 conda-forge; html5lib 0.999999999 py36_0 conda-forge; icu 54.1 0 ; intel-openmp 2018.0.0 h15fc484_7 ; ipykernel 4.6.1 py36hbf841aa_0 ; ipython 6.2.1 py36_0 conda-forge; ipython_genutils 0.2.0 py36_0 conda-forge; ipywidgets 7.0.0 py36h7b55c3a_0 ; isl 0.12.2 0 ; jedi 0.10.2 py36_0 conda-forge; jinja2 2.9.6 py36_0 conda-forge; jpeg 9b h024ee3a_2 ; jsonschema 2.6.0 py36_0 conda-forge; jupyter 1.0.0 py36h9896ce5_0 ; jupyter_client 5.1.0 py36_0 conda-forge; jupyter_console 5.2.0 py36he59e554_1 ; jupyter_core 4.3.0 py36h357a921_0 ; libefp 1.5b1 0 psi4/label/dev; libffi 3.2.1 hd88cf55_4 ; libgcc 7.2.0 h69d50b8_2 ; libgcc-ng 7.2.0 h7cc24e2_2 ; libgfortran 3.0.0 1 ; libiconv 1.14 0 ; libint 1.2.1 1 psi4/label/dev; libpng 1.6.32 hda9c8bc_2 ; libsodium 1.0.10 0 conda-forge; libstdcxx-ng 7.2.0 h7a57d05_2 ; libxc 3.0.0 6 psi4/label/dev; libxcb 1.12 h84ff03f_3 ; libxml2 2.9.4 0 ; markupsafe 1.0 py36_0 conda-forge; mistune 0.8 py36_0 conda-forge; mkl 2018.0.0 h",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/862#issuecomment-345317385:964,plugin,plugins-base,964,https://psicode.org,https://github.com/psi4/psi4/issues/862#issuecomment-345317385,1,['plugin'],['plugins-base']
Modifiability,Installing Optional Plugins for Psi4,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094:20,Plugin,Plugins,20,https://psicode.org,https://github.com/psi4/psi4/issues/3094,1,['Plugin'],['Plugins']
Modifiability,"Introducing the OPDM/Lagrangian Tech; - [ ] Introducing the Conventional TPDM Tech; - [ ] Migrating Psi to new-style gradients; - [ ] Adding deprecation warnings for old-style gradients; - [ ] Miscellaneous revision corrections. ## Technical Discussions: May be tl;dr. ### Step One: OPDM/Lagrangian Tech; This PR introduces a new file, `integraltransform_opdm_lagrangian.cc`, to perform this backtransformation. This was previously done by `integraltransform_oei.cc:trans_one`. As this function has other responsibilities, `trans_one` is preserved. Compared to the previous interface, there are three key changes.; 1. Callers can pass in blocks of the OPDM/Lagrangian. This gives callers flexibility to pass in `oo` and `vv` and `ov` and `vo` blocks separately if available, and to not pass in a block that is conjugate to another block already passed in. This is frequently the case.; 2. Callers pass in these blocks as a map from orbital space labels to a SharedMatrix containing the relevant block and are responsible for attaching this to the wavefunction object via the `Da`, `Db`, and `X` member variables. This is the most important point for this section! All codes except `cc` already store the OPDM/Lagrangian as `SharedMatrix` objects, so this is the path of least resistance. The one holdout predates `libmints` and instead uses a `libmints` `Matrix`-like structure. (See discussion in Step Four.) Existing code had to perform many an astounding number of type conversions to ultimately convert back to the type we had originally. `dct`, for instance, went `SharedMatrix` -> `file2` -> QTOrdered Block Matrix -> PSIO Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you c",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:1256,variab,variables,1256,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['variab'],['variables']
Modifiability,"Investigate DIIS/SAD memory requirements at low memory ranges. cc44 (that sets memory artificially low for other reasons) segfaults in parallel apparently during SAD. The DIIS rewrite is a possible trigger, as test was ok under these conditions at ` 2c5b6e3 - (master) Merge pull request #2191 from loriab/libxc514 (11 months ago) <Andy Simmonett>`. This error is unlikely to be hit under normal running conditions.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2576:176,rewrite,rewrite,176,https://psicode.org,https://github.com/psi4/psi4/issues/2576,1,['rewrite'],['rewrite']
Modifiability,"Is it possible to use `options=None` in the class definition? Then the options are mostly not required at all in the current commits above. Yes, I implemented the Client so that you always can calculate the current energy/force of the initialised molecule, which enables testing of the passed on configuration. When ipi is available, it will also be used for communicating back to the driver.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806:296,config,configuration,296,https://psicode.org,https://github.com/psi4/psi4/pull/1057#issuecomment-654485806,1,['config'],['configuration']
Modifiability,"It depends on which ones you're targeting and how you're getting psi4. If you're building from src, you'd `-D ENABLE_<addon>=ON` as described here https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L69-L108 . (Note that ""addon""s is what you'd want to search; ""plugins"" are different in psi4.). If you're using the conda binary, it varies by the nature of the addon. Addons that have to be enabled/disabled at psi4-build-time tend to be already in the psi4 binary. Unfortunately CheMPS2 is one that hasn't been transitioned to conda-forge yet due to license issues. You could grab psi4 v1.7 to use it. Ambit is available to install from c-f. Other addons that psi4 doesn't need to know about at compile time, like cppe or dftd3, can be conda installed at any time. That's the general picture. I can probably help on specifics if you run into difficulties.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087:265,plugin,plugins,265,https://psicode.org,https://github.com/psi4/psi4/issues/3094#issuecomment-1836419087,1,['plugin'],['plugins']
Modifiability,It doesn't appear to be honoring the ```MRCC_OMP_NUM_THREADS``` keyword or family. Looks like how the environment variables being passed to mrcc was changed but not all the settings made the trip.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/634#issuecomment-287884835:114,variab,variables,114,https://psicode.org,https://github.com/psi4/psi4/pull/634#issuecomment-287884835,1,['variab'],['variables']
Modifiability,"It hits the troublesome geometry a couple optimization iterations in, so not guaranteed. But given that this error hasn't popped up for 10 years, micro-wiggle is a good bet. btw, `conda install psi4 -c psi4/label/agg` will get you a working `-ng`-compiler package at the moment. Though that's my sandbox channel and so the latest package mayn't always be working.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/948#issuecomment-380151298:296,sandbox,sandbox,296,https://psicode.org,https://github.com/psi4/psi4/issues/948#issuecomment-380151298,1,['sandbox'],['sandbox']
Modifiability,"It is clear to me that, after a full-CI calculation, is possible to print out the two-particle density matrix (2PDM) in MO basis, BUT it is not clear to me if psi4 also allows to print out the 2PDM in AO basis. Could someone help me to solve this problem, please? I really need the 2PDM in AO basis!. Thanks in advance!. PS: this is the input file I am struggling with:. memory 256 mb. molecule h2o {; O; H 1 0.96; H 1 0.96 2 104.5; }. plugin_load(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so""). set basis 6-31G; set print 5; set OPDM true; set OPDM_PRINT true; set TPDM true; set TPDM_PRINT true; energy('fci'). plugin(""/auto/store/ale/PSI/objdir/plugins/backtrans/backtrans.so"")",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/67:476,plugin,plugins,476,https://psicode.org,https://github.com/psi4/psi4/issues/67,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"It is my understanding that this currently cannot be done using a single `json` file with Psi4 only. The interface only exposes `energy`, `gradient`, or `hessian` calls. . I think the best way to do what you want is via the `qcengine` interface. There's an example of geometry optimization, where you specify a `rdkit` job inside a `geometric` job see here: . https://github.com/MolSSI/QCEngine/blob/master/examples/Examples.ipynb. That example would have to be adapted for `psi4`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896:462,adapt,adapted,462,https://psicode.org,https://github.com/psi4/psi4/issues/2117#issuecomment-783103896,1,['adapt'],['adapted']
Modifiability,It is running on my system as I write this. One thing to note is that the error can occur very early on on our system. With a fairly high variability. So I do not think it is memory creeping up. It looks more like a memory allocation amount that is overwritten by a wrong pointer operation or something like that.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673:138,variab,variability,138,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481894673,1,['variab'],['variability']
Modifiability,It looks like Psi is providing wrappers for `dtzrqf` but not actually using the function (unless some downstream plugins are using it). So shouldn't be too hard. Thanks for the notice!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547:113,plugin,plugins,113,https://psicode.org,https://github.com/psi4/psi4/issues/1290#issuecomment-430281547,1,['plugin'],['plugins']
Modifiability,It looks like one of the three test configurations failed due to a timeout. The other two passed fine. I think this is ready for review.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/721#issuecomment-304529137:36,config,configurations,36,https://psicode.org,https://github.com/psi4/psi4/pull/721#issuecomment-304529137,1,['config'],['configurations']
Modifiability,"It looks like those changes did the trick. The tests passed fairly quickly on travis, but i'm not sure what the timings were like before so i don't know how much impact the header refactoring had. When you think this one's good, could you ping us on Slack, please? The seg fault seems to be hitting a few people so it would be good to get it in quickly.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885:180,refactor,refactoring,180,https://psicode.org,https://github.com/psi4/psi4/pull/1398#issuecomment-444294885,1,['refactor'],['refactoring']
Modifiability,"It may be as simple as extending a test like:. ``` python; props, wfn = psi4.properties('CCSD/cc-pVDZ"", return_wfn=True); prop = psi4.core.OEProp(wfn); ...; prop.compute(). compare_value(…) # TEST; ```. Just to ensure that the OPDM remains valid during changes. Good examples could be scf-properties or ci-properties test cases. Cheers,; Daniel Smith. > On Nov 9, 2016, at 18:45, Andrew James notifications@github.com wrote:; > ; > @jturney https://github.com/jturney do you mean if you use OEprop from python side?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub https://github.com/psi4/psi4/pull/506#issuecomment-259559771, or mute the thread https://github.com/notifications/unsubscribe-auth/ABsBcdANRkkc09DCv2AR8vkQDiiFfWCmks5q8lsAgaJpZM4Krp5j.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/506#issuecomment-259561352:23,extend,extending,23,https://psicode.org,https://github.com/psi4/psi4/pull/506#issuecomment-259561352,1,['extend'],['extending']
Modifiability,"It should have them linked in. You can remove it if you like. The idea was ALL external projects should; be fully functioning builds, which requires a project. I have no idea why all the directories would be under /psi4/psi4_main. Is; that a typo?. Yes, for any project we built the config file is found in that path. This; went back to namespace protecting them from the rest of the system and; build. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 7, 2016 2:55 PM, ""Lori A. Burns"" notifications@github.com wrote:. > - So the psi4.so produced isn't as fully featured as the psi4 exe, as; > it doesn't have the add-ons linked in? It's more of a psi4_main.so?; > - What's with project(psi4) being declared in cmake at two different; > levels? It's not like that in pulsar.; > - If /psi4/psi4_main/ still has all the sibling dirs (e.g.,; > libsapt_solver & detci) linked in (which is awkward with cmake), why not; > move those up to /psi4?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-238100943, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi3RmNYWusza0ZhSEG2AgxhxLoZUMks5qdioYgaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238219955:283,config,config,283,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238219955,1,['config'],['config']
Modifiability,"It sounds like @loriab is right, the external projects should be imported,; not interface. I am now under the impression public is the same as; interface except you can't link to interface. Suggesting that within a; project I think @bennybp is right they should be public, unless they are; header only at which point they are interface. Sent from my Android (without spellcheck). Please forgive the brevity. On Aug 4, 2016 6:40 PM, ""Lori A. Burns"" notifications@github.com wrote:. > My current leaning is that they should be IMPORTED rather than INTERFACE (; > http://stackoverflow.com/a/36649194). IMPORTED is also what they were; > before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake; > and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake),; > though certainly we want to abandon the Find modules where we can (any; > project we can influence) and replace with Config. I'm working on the; > ExternalProjects exporting their targets, so I'll report if I get anywhere.; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/pull/442#issuecomment-237704967, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRi8jQRwWholImqPd82AJVjlrrYfOWks5qcmpigaJpZM4JHR4P; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237716768:903,Config,Config,903,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237716768,1,['Config'],['Config']
Modifiability,"It was possible to compile and install psi4 without problems, but the `make` command returned. `hernan@carlos:~/Power Method/Psi4/pluginintegrales$ make; /usr/bin/g++ -DHAVE_MM_MALLOC_H -DENABLE_CHEMPS2=1 -DFC_SYMBOL=2 -DHAVE_SYSTEM_NATIVE_LAPACK -DHAVE_SYSTEM_NATIVE_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused -I/home/hernan/Programas/psi4/instalacion/interfaces/include -I/home/hernan/Programas/psi4/instalacion/src/lib -I/home/hernan/Programas/psi4/psi4/src/lib -I/home/hernan/Programas/psi4/psi4/include -I/home/hernan/Programas/psi4/instalacion/include -I/home/hernan/Programas/psi4/instalacion/boost/include -I/usr/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include -c pluginintegrales.cc; pluginintegrales.cc: In function ‘psi::PsiReturnType psi::pluginintegrales::pluginintegrales(psi::Options&)’:; pluginintegrales.cc:63:64: error: ‘class psi::Process::Environment’ has no member named ‘wavefunction’; boost::shared_ptr<Wavefunction> wfn = Process::environment.wavefunction();; ^; make: *** [pluginintegrales.o] Error 1`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194954608:130,plugin,pluginintegrales,130,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194954608,7,['plugin'],['pluginintegrales']
Modifiability,"It'd be helpful to see the output from your configuration step. That is, the `cmake -S. -Bobjdir` result. Are you seeking to use other than MKL?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631:44,config,configuration,44,https://psicode.org,https://github.com/psi4/psi4/issues/2998#issuecomment-1619297631,1,['config'],['configuration']
Modifiability,"It's always going to write at least one file (the parameters file) to $HOME b/c that's where dftd3 wants to read it; ```; >>> dftd3 -help; dftd3 <coord filename> [-options]; ...; variable parameters can be read from <current-directory>/.dftd3par.local; or ; variable parameters read from ~/.dftd3par.<hostname>; ```. Looks like https://github.com/loriab/psi4/blob/libint2/psi4/driver/procrouting/empirical_dispersion.py#L209 ought to have `local_options={""scratch_directory"": core.IOManager.shared_object().get_default_path()}` as an extra argument to put the dftd3 scratch in `$PSI_SCRATCH`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1724#issuecomment-534721360:179,variab,variable,179,https://psicode.org,https://github.com/psi4/psi4/issues/1724#issuecomment-534721360,2,['variab'],['variable']
Modifiability,"It's not an exported variable. Not sure where you got it from, but internally it is:; `psi4_io = psi4.core.IOManager.shared_object()`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2668#issuecomment-1209139255:21,variab,variable,21,https://psicode.org,https://github.com/psi4/psi4/issues/2668#issuecomment-1209139255,1,['variab'],['variable']
Modifiability,"It's not necessary to use the conda `gcc`– just that makes for a predictable `Makefile`. I'll investigate `nc-config`. It always helps to know use cases, thanks.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172279516:110,config,config,110,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172279516,1,['config'],['config']
Modifiability,It's probably wishful thinking but can you try setting the OMP_NUM_THREADS environment variable to 1 before you run?. `export OMP_NUM_THREADS=1`,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1088#issuecomment-404651884:87,variab,variable,87,https://psicode.org,https://github.com/psi4/psi4/issues/1088#issuecomment-404651884,1,['variab'],['variable']
Modifiability,JK_Grad: Fix for disk paging after wK rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1096:38,rewrite,rewrite,38,https://psicode.org,https://github.com/psi4/psi4/pull/1096,1,['rewrite'],['rewrite']
Modifiability,"Just be super careful if there are any subtractions; the result of subtracting two unsigned quantities is itself unsigned and, if negative, it'll wrap around and give garbage. Therefore things like `if (A - B > tol)` should be `if (A > B + tol)`. Probably not relevant for this case, but keep in mind that OpenMP loop iteration variables must be signed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212111830:328,variab,variables,328,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212111830,1,['variab'],['variables']
Modifiability,"Just noticed [this](https://github.com/raimis/htmd/blob/a43918d2642585e61882f1f22d4502809611374c/htmd/qm/psi4.py#L226). I don't recall if it's merged to master yet, but I changed it and others https://github.com/psi4/psi4/blob/scfitertopy/psi4/src/psi4/libmints/oeprop.cc#L1355 . You may prefer to grab stuff from psi variables `psi4.print_variables()` if you've only the output file to work from.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/817#issuecomment-356791472:318,variab,variables,318,https://psicode.org,https://github.com/psi4/psi4/issues/817#issuecomment-356791472,1,['variab'],['variables']
Modifiability,"Just to give some context for this PR, I'm removing an unused class member variable and constructor argument. Aside from a simpler constructor, there is no behavior change.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2659#issuecomment-1208156516:75,variab,variable,75,https://psicode.org,https://github.com/psi4/psi4/pull/2659#issuecomment-1208156516,1,['variab'],['variable']
Modifiability,"Just to make sure I understand the issues here:; The first one is clear. A segfault occurs if `num_frozen_docc` is ""too large."" What exactly ""too large"" means is unclear, but more frozen docc pairs than electron pairs is sufficient.; The second one is less clear. Obviously, the QC variables controlling the HF energy are getting grabbed incorrectly, but are these two geometries supposed to be different?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933:282,variab,variables,282,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209829933,1,['variab'],['variables']
Modifiability,"Kicking out Boost and libint has substantially reduced our compile time. However, we're still running up against Travis-CI's 50 min max (~10 min of that are in tests). So, here's the facts. Any suggestions for reducing compile time welcome. There are thoughts in the air of moving `bin`s to external projects, where they can be tested separately, but less drastic suggestions preferred. ```; psi4 5216.132 100%; ---------------------------------; dfocc 490.372 9.4%; ccdensity 489.191 9.4%; mints 327.399 6.3%; dpd 321.392 6.2%; psimrcc 297.722 5.7%; core 285.259 5.5%; ccenergy 242.782 4.7%; occ 227.323 4.4%; cclambda 167.325 3.2%; dcft 156.295 3.0%; cceom 156.036 3.0%; ccresponse 137.6 2.6%; fock 136.653 2.6%; sapt_solver 125.653 2.4%; detci 123.652 2.4%; optking 118.63 2.3%; ccsort 118.255 2.3%; cchbar 107.15 2.1%; mcscf 106.969 2.1%; cctriple 91.443 1.8%; iwl 90.624 1.7%; fnocc 77.272 1.5%; qt 69.421 1.3%; functional 65.807 1.3%; psio 59.924 1.1%; scf_solver 57.751 1.1%; trans 51.991 1.0%; cctransort 49.189 0.9%; ciomr 47.597 0.9%; 3index 45.95 0.9%; fisapt 39.127 0.8%; adc 37.382 0.7%; transqt2 34.06 0.7%; thce 33.156 0.6%; findif 31.708 0.6%; scfgrad 30.889 0.6%; moinfo 26.539 0.5%; parallel 23.011 0.4%; dfmp2 19.045 0.4%; options 12.27 0.2%; psi4util 11.808 0.2%; plugin 10.044 0.2%; cubeprop 9.776 0.2%; efp_solver 9.012 0.2%; diis 7.406 0.1%; dmrg 7.377 0.1%; mrcc 6.772 0.1%; gdma_interface 4.447 0.1%; disp 4.221 0.1%; sapt 4.092 0.1%; cholesky 3.863 0.1%; thermo 3.677 0.1%; efp_interface 3.21 0.1%; filesystem 0.613 0.0%. ```. Note to future (http://stackoverflow.com/questions/5962285/cmake-compilation-statistics):. ```; >>> cat time-icpc; #!/bin/bash; { time /path/to/icpc ""$@""; } 2> >(cat <(echo ""/path/to/icpc $@"") - >> /path/to/timeresults.txt); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525:1284,plugin,plugin,1284,https://psicode.org,https://github.com/psi4/psi4/issues/525,1,['plugin'],['plugin']
Modifiability,"LGTM. The plan is to wait for the ""cmake rewrite"" to be finalized and merged before we do this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/453#issuecomment-238563788:41,rewrite,rewrite,41,https://psicode.org,https://github.com/psi4/psi4/pull/453#issuecomment-238563788,1,['rewrite'],['rewrite']
Modifiability,Localization of Psi4 variables to Wavefunction objects,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883:21,variab,variables,21,https://psicode.org,https://github.com/psi4/psi4/issues/883,1,['variab'],['variables']
Modifiability,"Looks like everything is on track to finish with a single exception: `EXTERN`. This keyword is used to supply QM/MM charges through the `ExternalPotential` object to a variety of internal programs. Currently the `EXTERN` keyword is a PythonObject which is then cast to a `ExternalPotential` object in the C++ layer. When pushing pybind11 out of the layers I had deleted the ability to add Python objects to the options object (apparently I grepped in too deep of a folder). I think the following are solutions:. - Add the PythonObjects back to the `options` object. This will unwind most of the work in this PR as pybind11 will go back into basically every Psi file and add ~10 minutes to the compile.; - Add a new class to the options object that takes `void*`'s and then cast as is currently done. This is about as safe as currently done as there is currently no typechecking on the PyObject cast.; - Bind Python objects to the Options object Python-side and then insert these objects into the class members in the driver layer. I object a bit to the first as I really think we need to keep pybind11 out of Psi except in the `export` layer. The second and third are about the same to me. Although in the last one we gain all the C++ type checking at the cost of a few more lines in the driver. . One more thing to think about: I pulled out the `__getitem__` functionality for the Matrix and Vector objects. We can add this back fairly trivially, but should we add it back through the `get` and `set` attributes or through the NumPy interface? Going through the NumPy interface will allow all of the slicing routines to work; however, this gets a little awkward for irreped objects. Hence, the `np` and `nph` accessors.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/736#issuecomment-307629750:349,layers,layers,349,https://psicode.org,https://github.com/psi4/psi4/pull/736#issuecomment-307629750,1,['layers'],['layers']
Modifiability,"Looks like the plugin didn't get the infrastructure changes update. If you change the signature and return according to http://forum.psicode.org/t/wavefunction-passing-update/139 , does that fix it? @SebWouters, did your latest changes cover the plugin signature change?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185841947:15,plugin,plugin,15,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185841947,2,['plugin'],['plugin']
Modifiability,"Looks ok. > Regarding the frequency calculations, will the results be affected by a lower level of theory Hessian in the beginning? Or will the final results still be of desired level of theory?. The final results are not affected by the lower theory Hessian[*].; In fact, the default initial Hessian is based on an extremely simple force-field so a DFT hessian is certainly an improvement. :-). [* For most practical purposes. For large and flexible molecules with many close-lying minima one could, in principle, find different minima with different settings for the optimizer.]",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778:442,flexible,flexible,442,https://psicode.org,https://github.com/psi4/psi4/issues/2020#issuecomment-712927778,1,['flexible'],['flexible']
Modifiability,"Lori, if you have time, could you please describe briefly what the main reasons were for switching to targets as the mechanism to link to external libraries? What becomes easier? Are there known pitfalls/gotchas? I think targets look more robust than a string which could be (accidentally) modified on the way. In the initial math detection implementation we wanted to be close to how CMake finds libraries. Later I went a bit off course to make it easier for CMake-unaware colleagues to extend the detection. Now I feel I want to go back to more modular and CMake-like but I want to do it ""right"" this time so I would love to learn the advantages of using targets for this. Maybe you have a document you can point me to.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276161205:488,extend,extend,488,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276161205,1,['extend'],['extend']
Modifiability,"MBIS is Georgia Tech's department, so obligatory @loriab ping - I'm not sure who has taken over MBIS now that Jeff has left. Is there a legitimate reason for us not to support MBIS for iodine? It looks to me like we just need to extend the `get_mbis_params` table one more row of the periodic table and then update the `mA` setting. If so, this is an easy project for one of your developers who is still learning Psi.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053:229,extend,extend,229,https://psicode.org,https://github.com/psi4/psi4/issues/2728#issuecomment-1262298053,1,['extend'],['extend']
Modifiability,"MRCC has multiple modes for parallelism. Some methods can use OpenMP, some can use MPI, a few can use both. I do not know how this is hooked up on the Psi4-side. When I use MRCC, I usually run it either standalone or through Molpro, and in both cases I generally control how many OpenMP threads MRCC uses through the `OMP_NUM_THREADS` environmental variable. I have never tried to run MRCC multithreaded through Psi4, nor have I tried the MPI parallelism.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3165#issuecomment-2136264073:349,variab,variable,349,https://psicode.org,https://github.com/psi4/psi4/issues/3165#issuecomment-2136264073,1,['variab'],['variable']
Modifiability,Mac-conda-plugin and other docs,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/703:10,plugin,plugin,10,https://psicode.org,https://github.com/psi4/psi4/pull/703,1,['plugin'],['plugin']
Modifiability,"Make OEProp names flexible, to fix CC prop name bug.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2534:18,flexible,flexible,18,https://psicode.org,https://github.com/psi4/psi4/pull/2534,1,['flexible'],['flexible']
Modifiability,MakeLists. vi; > optking/beran/CMakeLists.txt; > - 34. optking/dlpc: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 35. optking/dlpc: missing docs comment. vi optking/dlpc/input.dat; > - 36. optking/dlpc: missing CMakeLists. vi optking/dlpc/CMakeLists.txt; > - 37. optking/h2o: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 38. optking/h2o: missing docs comment. vi optking/h2o/input.dat; > - 39. optking/h2o: missing CMakeLists. vi optking/h2o/CMakeLists.txt; > - 40. optking/h2os: missing cmake directory registration. vi; > optking/CMakeLists.txt; > - 41. optking/h2os: missing docs comment. vi optking/h2os/input.dat; > - 42. optking/h2os: missing CMakeLists. vi optking/h2os/CMakeLists.txt; > - 43. plugins/skeleton: missing docs comment. vi; > plugins/skeleton/input.dat; > - 44. plugins/skeleton: missing ctest registration. vi; > plugins/skeleton/CMakeLists.txt; > - 45. plugins/skeletonaointegrals: missing docs comment. vi; > plugins/skeletonaointegrals/input.dat; > - 46. plugins/skeletonaointegrals: missing ctest registration. vi; > plugins/skeletonaointegrals/CMakeLists.txt; > - 47. plugins/skeletondfmp2: missing docs comment. vi; > plugins/skeletondfmp2/input.dat; > - 48. plugins/skeletondfmp2: missing ctest registration. vi; > plugins/skeletondfmp2/CMakeLists.txt; > - 49. plugins/skeletonmointegrals: missing docs comment. vi; > plugins/skeletonmointegrals/input.dat; > - 50. plugins/skeletonmointegrals: missing ctest registration. vi; > plugins/skeletonmointegrals/CMakeLists.txt; > - 51. plugins/skeletonscf: missing docs comment. vi; > plugins/skeletonscf/input.dat; > - 52. plugins/skeletonscf: missing ctest registration. vi; > plugins/skeletonscf/CMakeLists.txt; > - 53. plugins/skeletonsointegrals: missing docs comment. vi; > plugins/skeletonsointegrals/input.dat; > - 54. plugins/skeletonsointegrals: missing ctest registration. vi; > plugins/skeletonsointegrals/CMakeLists.txt; > - 55. plugins/skeletonwavefunction: mi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137:4738,plugin,plugins,4738,https://psicode.org,https://github.com/psi4/psi4/issues/2555#issuecomment-1106781137,1,['plugin'],['plugins']
Modifiability,Maybe duplicate the test so that it tests `P::e.globals` and `Wfn.variables`. Or leave it as-is. It was a handy check that the globals was missing.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/697#issuecomment-300801278:66,variab,variables,66,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300801278,1,['variab'],['variables']
Modifiability,Maybe we could set `-DENABLE_simint=OFF` automatically in cmake when AM>7 is requested?; Is that a reasonable cmake configuration goal @loriab ?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-869457099:116,config,configuration,116,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-869457099,1,['config'],['configuration']
Modifiability,"Mentioned in PR #975 . The behaviour between the two equivalent CBS modes is inconsistent when passed through nbody driver:. ```; molecule ne2 {; 0 1; Ne 0 0 0; --; 0 1; Ne 0 0 2; }. set {; scf_type df; mp2_type df; cc_type df; e_convergence 7; reference rhf; }. E_method_basis = energy(""MP2/cc-pv[tq]z + D:CCSD(T)/cc-pv[dt]z"", bsse_type=""nocp""); E_cbs = energy(cbs, bsse_type=""nocp"", corl_wfn=""mp2"", corl_basis=""cc-pv[tq]z"",; delta_wfn=""ccsd(t)"", delta_basis=""cc-pv[dt]z""). compare_values(E_method_basis, E_cbs, 6, ""Interaction energy"") #TEST ; ``` . In the first case, `name = ""MP2/[...]""` so the sequence is:; ```; energy() -> _nbody_gufunc() -> [-> _cbs_gufunc() -> cbs()] * n => recurse back; ```; In the second case, `name = cbs` which has `__call__`, so:; ```; energy() -> cbs() -> [-> energy() -> _nbody_gufunc()] * x => recurse back; ```; I am not sure what the best way of solving this is: ; - option 1) is to extend the n-body driver to accept `__call__`-able `name`s, ; - option 2) is to bounce out of cbs() when `bsse_type` is passed in, but this would require generating a string-based representation of the cbs method anyway. I don't mind having a go at this once I know which is the preferred solution!",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/977:920,extend,extend,920,https://psicode.org,https://github.com/psi4/psi4/issues/977,1,['extend'],['extend']
Modifiability,"Modifies the exception translator to communicate the file() and line() information to the python exception wrapper class. When debugging a plugin (my use case), this makes it much easier to figure out the source of an exception that's thrown from C++ as `throw PSIEXCEPTION('message')`.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/152:139,plugin,plugin,139,https://psicode.org,https://github.com/psi4/psi4/pull/152,1,['plugin'],['plugin']
Modifiability,More variable names for EOM properties. Required infrastructure changes,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2538:5,variab,variable,5,https://psicode.org,https://github.com/psi4/psi4/pull/2538,1,['variab'],['variable']
Modifiability,Move SCF Class Variables to Function Variables,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2319:15,Variab,Variables,15,https://psicode.org,https://github.com/psi4/psi4/pull/2319,2,['Variab'],['Variables']
Modifiability,"My apologies on the late reply. I am unable to replicate this problem with icpc 16.0.2. Admittedly I used the version of Psi4 in #442. That being said, I am skeptical that fully scoping the function is actually causing @edeustua's compile error (I am fairly certain that you can always fully scope a function/type in C++). @edeustua, can you post the actual error log, as well as the configure command you used?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232716913:384,config,configure,384,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232716913,1,['config'],['configure']
Modifiability,"My current leaning is that they should be IMPORTED rather than INTERFACE (http://stackoverflow.com/a/36649194). IMPORTED is also what they were before (https://github.com/psi4/psi4/blob/master/cmake/ConfigChemps2.cmake and https://github.com/psi4/psi4/blob/master/cmake/FindCHEMPS2.cmake), though certainly we want to abandon the Find modules where we can (any project we can influence) and replace with Config. I'm working on the ExternalProjects exporting their targets, so I'll report if I get anywhere.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-237704967:404,Config,Config,404,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-237704967,1,['Config'],['Config']
Modifiability,My fix is more of a hack. Probably a better approach is to rewrite `H_zero_block`?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2258#issuecomment-885263338:59,rewrite,rewrite,59,https://psicode.org,https://github.com/psi4/psi4/issues/2258#issuecomment-885263338,1,['rewrite'],['rewrite']
Modifiability,"My guess is that pybind11 didn't update in your build directory. Were you reusing a build directory from pre ```git pull```? If so, that's the issue, create a new build directory, configure, and make and it should work. I just built psi4 in a clean build directory with gcc 5.4. If not, then we'll look into it more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/577#issuecomment-273460491:180,config,configure,180,https://psicode.org,https://github.com/psi4/psi4/issues/577#issuecomment-273460491,1,['config'],['configure']
Modifiability,"My issue was trying to use a `psi4` executable built inside a container from the `psi4` python client from my host machine--i.e., to treat the `psi4` executable as an external executable I could call from `python`; however, the `psi4` python client requires close coupling to the executable (access to shared files) so this separation was not possible because the client has to access files shared with the executable, which are only available inside the container :)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267:264,coupling,coupling,264,https://psicode.org,https://github.com/psi4/psi4/issues/3126#issuecomment-1915917267,1,['coupling'],['coupling']
Modifiability,"My latest fix raises yet another problem: if the user requests `set scf perturb_h true`, the variable is invisible to `findif`, while `set perturb_h true` is just fine. Perhaps we should strongly suggest that people don't scope their options in future?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/668#issuecomment-290245019:93,variab,variable,93,https://psicode.org,https://github.com/psi4/psi4/pull/668#issuecomment-290245019,1,['variab'],['variable']
Modifiability,My one request is that variables that are obviously used for indexing/lengths be `size_t`.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2669#issuecomment-1212096767:23,variab,variables,23,https://psicode.org,https://github.com/psi4/psi4/pull/2669#issuecomment-1212096767,1,['variab'],['variables']
Modifiability,"My original issue was for a mac, but I see the same error on linux with intel18 compilers:. deprince_root@ed7:~/does_jk_work$ psi4; Attention! This SCF may be density-fitted.; /usr/bin/python3: symbol lookup error: /edfs/users/deprince/does_jk_work/does_jk_work.so: undefined symbol: _ZN3psi4PKJKC1ESt10shared_ptrINS_8BasisSetEERNS_7OptionsE. I don't understand what is going on. For previously functioning plugins, symbols are missing for only certain classes. I've noticed this for PK/DFJK and VBase so far.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/971#issuecomment-384319120:407,plugin,plugins,407,https://psicode.org,https://github.com/psi4/psi4/issues/971#issuecomment-384319120,1,['plugin'],['plugins']
Modifiability,N-Body driver refactor (fixes #885),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/975:14,refactor,refactor,14,https://psicode.org,https://github.com/psi4/psi4/pull/975,1,['refactor'],['refactor']
Modifiability,"NFO: build type was not defined, using type ""Debug"".; -- Found libutil: /usr/lib/x86_64-linux-gnu/libutil.so ; -- Found libm: /usr/lib/x86_64-linux-gnu/libm.so ; -- Found librt: /usr/lib/x86_64-linux-gnu/librt.so ; -- Found libdl: /usr/lib/x86_64-linux-gnu/libdl.so ; -- Looking for include file pthread.h; -- Looking for include file pthread.h - found; -- Looking for pthread_create; -- Looking for pthread_create - found; -- Found Threads: TRUE ; -- Found PythonInterp: /usr/bin/python (found version ""2.7.10"") ; -- Found Python: /usr/lib/x86_64-linux-gnu/libpython2.7.so ; -- Could NOT find Boost; -- Boost 1.55.0 not found. The pre-packaged version will be built.; -- Libraries to be built: filesystem, python, regex, serialization, system, timer, chrono, thread; -- Toolset to be used: intel-linux; -- CheMPS2 not found. The pre-packaged version will be built.; -- Found PkgConfig: /usr/bin/pkg-config (found version ""0.28"") ; -- Plugins support ENABLED; -- Looking for MKL_Free_Buffers; -- Looking for MKL_Free_Buffers - not found; -- Looking for include file mm_malloc.h; -- Looking for include file mm_malloc.h - found; -- Looking for __builtin_expect; -- Looking for __builtin_expect - not found; -- Looking for __builtin_prefetch; -- Looking for __builtin_prefetch - not found; -- Looking for __builtin_constant_p; -- Looking for __builtin_constant_p - found; -- Looking for erf; -- Looking for erf - found; -- Documentation targets available: sphinxman (html), sphinxmini (quick html), sphinxpdf (LaTeX --> PDF); -- Use the commands in setup_command to reproduce this build; -- System : Linux; -- Processor type : x86_64; -- C++ compiler flags : -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -g -O0 -debug -DDEBUG -Wall -Wuninitialized -Wno-unknown-pragmas; -- C compiler flags : -restrict -DRESTRICT=__restrict__ -std=c99 -fPIC -qopenmp -O0 -g -w3 -vec-report -Wall -Wuninitialized ; -- Libraries : -Wl,--start-group;/opt/intel/compilers_and_libraries_2016.0.1",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/262:3628,Plugin,Plugins,3628,https://psicode.org,https://github.com/psi4/psi4/issues/262,1,['Plugin'],['Plugins']
Modifiability,"NVM. I found it. The plugins are not compiling. I think there is something wrong with creating cmake files for the plugins. This is the CMakeLists.txt for skeleton plugin:. set(CMAKE_C_COMPILER @C@); set(CMAKE_CXX_COMPILER @CXX@); set(CMAKE_Fortran_COMPILER @Fortran@); project(skeleton CXX); find_package(psi4 1.0 REQUIRED); ; But, my CMakeCache.txt says that it finds the correct compiler. ; Here is my plugin cache:. set(CMAKE_C_COMPILER ""/usr/bin/gcc"" CACHE STRING """"); set(CMAKE_C_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_CXX_COMPILER ""/usr/bin/g++"" CACHE STRING """"); set(CMAKE_CXX_FLAGS "" -march=native -fopenmp"" CACHE STRING """"); set(CMAKE_Fortran_COMPILER """" CACHE STRING """"); set(CMAKE_Fortran_FLAGS """" CACHE STRING """"). #set(CMAKE_INSTALL_PREFIX ""/home/kannon/src/psi4_cmake/Install_Debug"" CACHE PATH """"); set(CMAKE_INSTALL_LIBDIR ""lib"" CACHE STRING """"); set(CMAKE_INSTALL_BINDIR ""bin"" CACHE STRING """"); set(CMAKE_INSTALL_DATADIR ""share"" CACHE STRING """"); set(CMAKE_INSTALL_INCLUDEDIR ""include"" CACHE STRING """"); set(PYMOD_INSTALL_LIBDIR ""/"" CACHE STRING """"). set(CMAKE_INSTALL_MESSAGE ""LAZY"" CACHE STRING """"). set(PYTHON_VERSION_MAJORMINOR ""2.7"" CACHE STRING """"); set(PYTHON_EXECUTABLE ""/usr/bin/python"" CACHE STRING """")",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271932154:21,plugin,plugins,21,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271932154,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"Neither overall chg/mult nor fragment chg/mult will effect Mol.Z(at); all that info is stored separately. BasisSets are associated with each atom in Mol, so it does make some, though not a lot of, sense that ECPs should affect Z(at). Once upon a time there were true/false/large/small choices for `freeze_core`. They got dropped. I don't remember why, but I'd venture b/c they caused more confusion than convenience. But a lot more was handled c-side then. I expect a more flexible interface (that also takes frozen_docc into account) would have support.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/978#issuecomment-385871335:473,flexible,flexible,473,https://psicode.org,https://github.com/psi4/psi4/pull/978#issuecomment-385871335,1,['flexible'],['flexible']
Modifiability,"New compilation breakdown:. ```; psi4 3874.3 100.0%; ---------------------------------------; dfocc 356.2 9.2%; ccdensity 319.7 8.3%; core 295.5 7.6%; mints 260.3 6.7%; dpd 241.1 6.2%; psimrcc 233.7 6.0%; occ 183.1 4.7%; ccenergy 182.1 4.7%; cclambda 129.3 3.3%; dcft 122.7 3.2%; cceom 121.1 3.1%; fock 116.9 3.0%; optking 108.0 2.8%; sapt_solver 104.7 2.7%; ccresponse 102.0 2.6%; detci 92.6 2.4%; cchbar 75.1 1.9%; mcscf 72.9 1.9%; cctriples 70.1 1.8%; iwl 64.9 1.7%; fnocc 53.3 1.4%; functional 52.1 1.3%; scf_solver 48.8 1.3%; trans 42.1 1.1%; cctransort 39.5 1.0%; psio 39.4 1.0%; qt 38.0 1.0%; fisapt 33.0 0.9%; ciomr 28.5 0.7%; adc 28.1 0.7%; 3index 26.7 0.7%; scfgrad 26.1 0.7%; findif 23.5 0.6%; moinfo 20.3 0.5%; parallel 18.0 0.5%; thce 17.0 0.4%; dfmp2 15.9 0.4%; options 12.1 0.3%; psi4util 8.7 0.2%; plugin 8.6 0.2%; cubeprop 8.2 0.2%; efp_solver 8.2 0.2%; diis 5.8 0.2%; mrcc 5.4 0.1%; disp 3.3 0.1%; sapt 3.1 0.1%; thermo 2.9 0.1%; efp_interface 2.4 0.1%; filesystem 2.2 0.1%; dmrg 0.0 0.0%; gdma_interface 0.0 0.0%; ```. Script to analyze the `time-icpc` output; ```; import re; import operator. timeicpc = 'timeresults.txt'. with open(timeicpc, 'r') as handle:; lines = handle.readlines(). target = re.compile(""""""CMakeFiles/(\w+).dir""""""); timeit = re.compile(""""""real\s+(\d+)m(\d.+)s""""""); bigdict = {}. module = ''; for ln in lines:; lln = ln.strip(); mobj = target.search(lln); if mobj:; module = mobj.group(1); if module not in bigdict:; bigdict[module] = []. mobj = timeit.search(lln); if mobj:; seconds = 60.0 * float(mobj.group(1)) + float(mobj.group(2)); bigdict[module].append(seconds). total = 0.0; for mod in bigdict:; modtotal = sum(bigdict[mod]); bigdict[mod] = modtotal; total += modtotal. sorted_x = sorted(bigdict.items(), key=operator.itemgetter(1), reverse=True). print """"""{:20} {:8.1f} {:8.1f}%"""""".format('psi4', total, 100.0); print """"""---------------------------------------""""""; for mod in sorted_x:; print """"""{:20} {:8.1f} {:8.1f}%"""""".format(mod[0], mod[1], 100 * ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/525#issuecomment-266143805:814,plugin,plugin,814,https://psicode.org,https://github.com/psi4/psi4/issues/525#issuecomment-266143805,1,['plugin'],['plugin']
Modifiability,"Nice! If you're allowing general use, that might even cross off the lingering 'add RESP to psi4' ticket (https://github.com/psi4/psi4/issues/20). I've added a `bin/psi4-config` script to the installation, final contents (for the binary) below. Binary nightly build is off for the moment, because I'm working on it for other reasons, but you can see if something like the below is what you'd like. I'm concerned that it's got a lot of full paths and binary-specific (static) flags and libraries, but perhaps it can be made useful with some modifications. ``` py; #!/usr/bin/env python; # vim:ft=python. import sys; from collections import OrderedDict. def main(argv):; info = OrderedDict(); info['--cc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icc'; info['--cxx'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc' # aka PLUGIN_CXX; info['--fc'] = '/theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/ifort'; info['--version'] = psiver; info['--githash'] = githash; if 'ON' == 'ON':; info['--prefix'] = '/opt/anaconda1anaconda2anaconda3'; else:; info['--prefix'] = '/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl'; info['--top-level-psi4-dir'] = '/scratch/cdsgroup/conda-builds/work'; info['--max-am-eri'] = '4'; info['--python-version'] = '2.7'; info['--has-pcmsolver'] = 'ON'; info['--has-chemps2'] = 'ON'; info['--includes'] = '-I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/_build_placehold_placehold_pl/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include' # aka PLUGIN_INCLUDES; info['--defines'] = '-DHAVE_PCMSOLVER -DHAVE_DKH -",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172395303:169,config,config,169,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172395303,1,['config'],['config']
Modifiability,"No errors building with ambit enabled when I add those two lines to external/upstream/ambit/CMakeLists.txt (with just ambit added as an extra option). Adding gpu_dfcc into the build (and restarting from scratch with CMAKE_CUDA_COMPILER, CUDA_TOOLKIT_ROOT_DIR, and c and c++ compilers set to gcc-4.9) fails when building with:; ```; [ 82%] Performing configure step for 'gpu_dfcc_external'; loading initial cache file /home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/tmp/gpu_dfcc_external-cache-Release.cmake; -- Psi4 script: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/bin/psi4; -- Psi4 headers: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/include; -- Psi4 library: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib//psi4/core.so; -- Psi4 sys.path: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/; -- Psi4 components: ; -- Python executable: /usr/bin/python2.7; CMake Error at /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/share/cmake/psi4/psi4Config.cmake:148 (find_package):; Could not find a package configuration file provided by ""TargetLAPACK"" with; any of the following names:. TargetLAPACKConfig.cmake; targetlapack-config.cmake. Add the installation prefix of ""TargetLAPACK"" to CMAKE_PREFIX_PATH or set; ""TargetLAPACK_DIR"" to a directory containing one of the above files. If; ""TargetLAPACK"" provides a separate development package or SDK, be sure it; has been installed.; Call Stack (most recent call first):; CMakeLists.txt:6 (find_package). -- Configuring incomplete, errors occurred!; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeOutput.log"".; See also ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-build/CMakeFiles/CMakeError.log"".; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:107: recipe for target 'external/down",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022:350,config,configure,350,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400445022,1,['config'],['configure']
Modifiability,"No problem, this is a simple enough hack that we can apply locally for now. Perhaps the PR will evolve into a better solution once we investigate more.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1640#issuecomment-489288722:96,evolve,evolve,96,https://psicode.org,https://github.com/psi4/psi4/pull/1640#issuecomment-489288722,1,['evolve'],['evolve']
Modifiability,"No, I didn’t specify --python at configure time. No need to rush … my fork works!. On May 12, 2016, at 11:45 AM, Lori A. Burns notifications@github.com wrote:. > Sure. Those two are usually the same– for curiosity, is your setup where you're not passing setup --python=sldfjsl to the psi4 build?; > ; > Will merge after the travis build, unless you're trying to test it right away, in which case I'm glad to accept immediately, since that line can't hurt anything.; > ; > —; > You are receiving this because you authored the thread.; > Reply to this email directly or view it on GitHub",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/378#issuecomment-218800184:33,config,configure,33,https://psicode.org,https://github.com/psi4/psi4/pull/378#issuecomment-218800184,1,['config'],['configure']
Modifiability,"No, I have to refactor the code such that the PE stuff is Python-side only (see ToDo list above).; In the meantime, I'll hopefully a) have a first ""release"" of `cppe` ready that can be pinned in the `ExternalProject` and b) have the PR with performance improvements for electric field integrals done. Is there a deadline for the Psi4 1.4 release?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769:14,refactor,refactor,14,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-504107769,1,['refactor'],['refactor']
Modifiability,"No, that wasn’t intentional. If it’s new since ~12 days ago, it probably has to do with removal of the Makefile system. In any case, should integrate the plugins better with cmake and make them test cases again so that we know when they break. Thanks for the notice. Lori. > On Mar 18, 2015, at 10:42 AM, Sebastian Wouters notifications@github.com wrote:; > ; > Dear all,; > ; > I have built the latest version of psi4 with plugins:; > ; > BLA_VENDOR=Intel10_64lp CXX=icpc CC=icc cmake .. -DENABLE_PLUGINS=ON -DENABLE_DUMMY_PLUGIN=ON; > and can create new plugins and compile them. However, the old examples, typically in the folder; > ; > /path/to/source/psi4/objects/plugins/; > are not generated anymore. I don't know if this was intentional?; > ; > Best regards,; > Sebastian; > ; > —; > Reply to this email directly or view it on GitHub https://github.com/psi4/psi4public/issues/78.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78#issuecomment-83015983:154,plugin,plugins,154,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-83015983,4,['plugin'],['plugins']
Modifiability,"No, the content of my CMakeLists.txt is identical to the given tag. I further add that i can compile the code with gcc_4.9.2 without any problems on my lap top,; but i need to compile it on the cluster, and there we have the older version of gcc, therefore; the compilation with intel 2017. find_package(pybind11 CONFIG QUIET). if(${pybind11_FOUND}); message(STATUS ""Found pybind11: ${pybind11_INCLUDE_DIR} (found version ${pybind11_VERSION})""); add_library(pybind11_external INTERFACE) # dummy; else(); include(ExternalProject); message(STATUS ""Suitable pybind11 could not be located, building one instead.""); ExternalProject_Add(pybind11_external; GIT_REPOSITORY https://github.com/psi4/pybind11; GIT_TAG oct18ud; UPDATE_COMMAND """"; CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${CMAKE_INSTALL_PREFIX}/external; -DCMAKE_BUILD_TYPE=${CMAKE_BUILD_TYPE}; -DCMAKE_C_COMPILER=${CMAKE_C_COMPILER}; -DCMAKE_CXX_COMPILER=${CMAKE_CXX_COMPILER}; -DCMAKE_INSTALL_INCLUDEDIR=${CMAKE_INSTALL_INCLUDEDIR}; -DPYBIND11_CPP_STANDARD=-std=c++${PSI4_CXX_STANDARD}; -DPYBIND11_TEST=OFF; -DPYTHON_EXECUTABLE=${PYTHON_EXECUTABLE}; CMAKE_CACHE_ARGS -DCMAKE_C_FLAGS:STRING=${CMAKE_C_FLAGS}; -DCMAKE_CXX_FLAGS:STRING=${CMAKE_CXX_FLAGS}; INSTALL_COMMAND ${CMAKE_MAKE_PROGRAM} install; DESTDIR=${CMAKE_BINARY_DIR}/stage); endif()",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/522#issuecomment-261729566:313,CONFIG,CONFIG,313,https://psicode.org,https://github.com/psi4/psi4/issues/522#issuecomment-261729566,1,['CONFIG'],['CONFIG']
Modifiability,"No, this isn't only printing. This is a Psi variable that can't be defined due to the exceptional circumstance of having zero electrons. I defer to @loriab for deciding what to do about this one.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3156#issuecomment-2067073173:44,variab,variable,44,https://psicode.org,https://github.com/psi4/psi4/issues/3156#issuecomment-2067073173,1,['variab'],['variable']
Modifiability,"None. def ctest_runner(inputdatloc, extra_infiles: List =None, outfiles: List =None):; """"""Called from a mock PyTest function, this takes a full path ``inputdatloc`` to an ``""input.dat""`` file set up for; CTest and submits it to the ``psi4`` executable. Any auxiliary files with names listed in ``extra_infiles`` that reside; alongside ``inputdatloc`` are placed in the Psi4 execution directory.; ; """"""; from qcengine.util import execute; import psi4; ; # Pass runtime env through to `execute`; # * appending Psi4 import path (after all, it worked previous line) since partial/relative paths not robust; psiimport = Path(psi4.__file__).parent.parent; env = os.environ.copy(); env[""PYTHONPATH""] = env[""PYTHONPATH""] + os.pathsep + str(psiimport); ; ctestdir = Path(inputdatloc).resolve().parent; ; if (ctestdir / ""input.dat"").exists():; inputdat = ""input.dat""; elif (ctestdir / ""input.py"").exists():; inputdat = ""input.py""; ; infiles = [inputdat]; if extra_infiles:; infiles.extend(extra_infiles); infiles_with_contents = {Path(fl).name: (ctestdir / fl).read_text() for fl in infiles}; ; # Note: The simple `command = [""psi4"", ""input.dat""]` works fine for Linux and Mac but not for Windows.; # L/M/W ok with `command = [which(""psi4""), ""input.dat""]` where `which` on Windows finds the psi4.bat file that points to the psi4 python script. -or-; # L/M/W ok with `command = [sys.executable, psi4.executable, ""input.dat""]` aka `python /full/path/bin/psi4 input.dat`.; # Latter chosen as `psi4.executable` is path computed by `import psi4`, so assured correspondence.; # Note: The input.py in json/, python/, and psi4numpy/ are not being treated best.; # Properly, as in CTest, it's `command = [sys.executable, ""input.py""]`.; # Have to either have 3-item `command` or pass PYTHONPATH through env. Since some tests (fsapt) ""import psi4"" internally, doing both.; command = [sys.executable, psi4.executable, inputdat]; _, output = execute(command, infiles_with_contents, outfiles, environment=env); ; success = ou",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888:6081,extend,extend,6081,https://psicode.org,https://github.com/psi4/psi4/pull/2454#issuecomment-1078282888,1,['extend'],['extend']
Modifiability,"Not a fluke. Note l. 93 of the configure build step reports that a suitable `adcc` could not be found, despite its inclusion in the build environment step. Sorry Lori, but I'm relying on you to solve this one. I have no idea how to isolate the dependency issue.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069:31,config,configure,31,https://psicode.org,https://github.com/psi4/psi4/pull/2251#issuecomment-883533069,1,['config'],['configure']
Modifiability,"Not currently. The plan is to move all internal variables to the [`variables` dictionary](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/wavefunction.h#L547) on the Wavefunction which is exposed to Python. For DFMP2 this is rather straight forward, you could find and replace all `energy_` variables with `variables_` and pop the `energy_` dictionary from the MP2 header. Other classes are more difficult which is why this is on the TODO list, but feel free to do this one if needed.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/642#issuecomment-284878288:48,variab,variables,48,https://psicode.org,https://github.com/psi4/psi4/issues/642#issuecomment-284878288,3,['variab'],['variables']
Modifiability,"Not that I'm aware of. There are three reasons somebody might be tempted to use a manual `compute_gradient` call.; 1. _Method developer reason_. You are a plugin developer and don't know you can edit `proc_table` to tell `gradient` how to run for your new method. Not a good reason because you actually can.; 2. _Method developer reason_. You are writing a gradient method and want your gradient function to enter the C-code to do your energy, return to the driver, then re-enter the C-code to do your gradient. This is the best reason I've come up with, and while I'm sympathetic, I just don't think it's worth the danger of exposing this function to completely general Python use. The gradient machinery should only ever be called after your energy computation finishes.; 3. _User reason_. You want to run some additional commands between your energy and your gradient computation. I just can't imagine a use case for this _other than_ bypassing some sanity check. There isn't a case where separating the calls saves times. Even if there were, shoving intermediates onto a `wfn` only works for SCF (not sure about general DFT functionals). Even MP2 gradient theory needs intermediates too large to store on the `wfn`. The best I've come up with is that you're doing SCF, serialize the wavefunction for later analysis, and then decide you want a gradient after that later analysis. But even in that case, the serialized wavefunction has the converged orbitals, so just use `gradient`. I would expect minor computational overhead for the energy step. (I suppose there is the cost of re-building the TEI?). Since this would affect Forte and heads off a possible bug in relativistic computations, it's probably worth asking @fevangelista for input on this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209:155,plugin,plugin,155,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870536209,1,['plugin'],['plugin']
Modifiability,"Note that I have no doubt Mol was thoroughly tested for all these things in its development and was in pristine working order. But we didn't have the notion of preserving those unit tests for a future refactoring. So I'm just trying to convey that downstream may rely on the inconsistency and changes that in class development may have been a ""fix"" are now a ""refactoring"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/909#issuecomment-363476390:201,refactor,refactoring,201,https://psicode.org,https://github.com/psi4/psi4/issues/909#issuecomment-363476390,2,['refactor'],['refactoring']
Modifiability,"Note that some projects distribute conda packages for general use, then tell users that if the packages don't work or if they want hardware-tuned builds, distribute conda recipes to build locally. Without some of the oddities I use, this is pretty much like distributing a do-configure that's guaranteed to work and the resulting install is relocatable. Miniconda would be required but only python and conda-build used from it. I considered this overkill for psi4's cli-friendly developer community, but such a relocation solution is worth considering rather than doing lots of `install_name_tool`, `patchelf`, `rpath`, `@loader_path` mechanics on our own.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235927654:276,config,configure,276,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235927654,1,['config'],['configure']
Modifiability,"Note to Self: Optimizations do not play nicely with this. It sets the orbital guess type to read, so it displays the following error message...; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```. ...even though it should not have been set at the driver level! Within the assumption that we have no way to cast orbitals between symmetries, the best option seems to be to have the big basis read from the projected orbitals while the small basis uses a core guess during any findif computations and reads during optimizations. Thoughts? This will probably end with a lot of poking at the driver code. EDIT: I thought this error message was exclusively post this fix, but I was able to get the error message pre this fix on the cluster. Investigate after I get this SCF finally converged.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149:240,config,configured,240,https://psicode.org,https://github.com/psi4/psi4/pull/1139#issuecomment-414016149,1,['config'],['configured']
Modifiability,"Now *Azure* can build an optimized *Psi4*, run all the tests, and make a conda package: https://dev.azure.com/raimisg/psi4/_build/results?buildId=569. Queue time variables:; ```; cmake.build_type= Release; conda.build=true; ctest.type=full; pytest.type=full; python.version=3.6; ```. The built package is on *Anaconda*: https://anaconda.org/raimis/psi4/files. You can install and try:; ```; conda install -c raimis -c conda-forge psi4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000:162,variab,variables,162,https://psicode.org,https://github.com/psi4/psi4/pull/1560#issuecomment-468745000,1,['variab'],['variables']
Modifiability,"Now I have removed the variable set from Library. Unfortunately, didn't help. When I remove the catch-unconfigured checks (https://github.com/psi4/psi4/pull/1543/commits/f00ca3d63871c22411989a744ffbfbd33664eed7), it looks like the vars are defined and running in [this azure log](https://dev.azure.com/psi4/psi4/_build/results?buildId=554), so maybe there's just syntax trouble there.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464954810:23,variab,variable,23,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464954810,1,['variab'],['variable']
Modifiability,"Now I see, thanks. No, this is not possible with the current version of trexio which is tightly coupled to the corresponding format defined in `trex.json`. There is no way to write an arbitrary variable until it's defined in the format (we have internal consistency checks for the sizes of the matrices for example in order to prevent inconsistent data). . @scemama We could probably add a functionality allowing to write an arbitrary variable in e.g. ""external"" group via generic `trexio_write|read_(file, variable-str, datatype-str, size-max)`. I can implement it easily for the HDF5 back end but TEXT one is more tricky.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003:194,variab,variable,194,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1410051003,3,['variab'],"['variable', 'variable-str']"
Modifiability,"Now that seminumerical exchange is in, it would make more sense for me to refactor that code into this framework as well. Waiting on density screening refactor would also be helpful @davpoolechem",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543#issuecomment-1129658643:74,refactor,refactor,74,https://psicode.org,https://github.com/psi4/psi4/pull/2543#issuecomment-1129658643,2,['refactor'],['refactor']
Modifiability,"O Entry -> Lower Triangle -> Block Matrix -> Lower Triangle -> PSIO Entry -> `SharedMatrix`. We now stay in a `SharedMatrix` the entire time. This type change is why `integraltransform_oei.cc:trans_one` is not used in the new version. When you use a `Matrix`, the transformation reduces to a `linalg::triplet` call.; 3. Lastly, prefactors. Because it's ambiguous what you call the Lagrangian, I'm going to use as a point of reference ""the thing you contract against the overlap derivatives"", because that is pefectly unambiguous. In the old code, you'd send -2 times that thing. Now, you send -1 times that thing. This is necessary for consistency with how the SCF code determines the value of the Lagrangian on a wavefunction object. If you want an example for how this works, see the newly added code in `dct_gradient_UHF.cc:compute_ewdm_odc`. With these changes, 30 lines of code replaces about 230. I call this a good start. ### Step Two: Conventional TPDM Tech; I don't see a way around still using `dpdbuf4` for this, even though this isn't the most plugin-friendly. The main simplification here will be eliminating the need to dump to `libiwl`. ## Questions; - [ ] There is a goof in `libtrans`: There is a [pre-defined frozen core space `O`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L51-L57), and also a [pre-defined occupied space `o`](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/mospace.h#L58-L68), and likewise for virtual orbitals. These spaces have conflicting labels. ; [Uppercase letters mean the alpha orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L306) and [lower case letters mean the beta orbitals](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libtrans/integraltransform_moinfo.cc#L505). We need to change the labels of the frozen core and frozen virtual spaces to break the conflict. We currently have five votes (Lori, Andy, Susi, Jet, and I) for `C` for froze",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1745:2837,plugin,plugin-friendly,2837,https://psicode.org,https://github.com/psi4/psi4/pull/1745,1,['plugin'],['plugin-friendly']
Modifiability,"OEProp isn't given a name when it's called, so it assigns no name at all to its variables. Hence `<name> DIPOLE` becomes `DIPOLE`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2203#issuecomment-867924282:80,variab,variables,80,https://psicode.org,https://github.com/psi4/psi4/issues/2203#issuecomment-867924282,1,['variab'],['variables']
Modifiability,"OInt::create_sieve_pair_info()` function via the new wrapper function `TwoBodyAOInt::initialize_sieve()`. Multiple JK builds rely on values of variables initialized via `create_sieve_pair_info()` , and `initialize_sieve()` is now used to initialize the required variables if `SCREENING = NONE` is set. In this way, `SCREENING = NONE` can exist with the benefits it provides, while still working with all JK builds. Also, changes are made to ensure that no screening actually occurs in JK builds when `SCREENING` is set to `NONE`. In line with the above, some tests have been expanded. `test_comprehensive_jk_screening.py` has been changed to account for the `SCF_TYPE`/`SCF_SUBTYPE`/`SCREENING` combinations that were fixed. `test_erisieve.py` has been updated to more thoroughly test `SCREENING=NONE`. It is worth noting that, unfortunately, `TwoBodyAOInt::initialize_sieve()` must be defined per integral engine, and so the fixes of this PR only work with Libint2. The issues this PR tries to fix, still persist if Simint is used instead. ## User API & Changelog headlines; - [X] N/A. ## Dev notes & details; - [X] Adds a new function to `TwoBodyAOInt`, `initialize_sieve`, which allows for manual initialization of screening variables via `create_sieve_pair_info()` needed for JK builds.; - [X] Uses the above function to fix combinations of `SCF_TYPE`, `SCF_SUBTYPE`, and `SCREENING` which were broken.; - [X] Updates the `test_comprehensive_jk_screening.py` and `test_erisieve.py` test to account for the previously-described fixes. ## Questions; -[] Should we keep the `initialize_sieve` name? I named it as such, because it is basically a light wrapper to manually call `create_sieve_pair_info`. But the name of ""sieve"" might be objectionable. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3060:2090,variab,variables,2090,https://psicode.org,https://github.com/psi4/psi4/pull/3060,1,['variab'],['variables']
Modifiability,"OK, I nuked all references to ConfigVersion because, as I understand, gitversion.py replaces it. The code is building now, but we should make sure it all links properly before merging. Also, I'd like @loriab to confirm that I haven't done something stupid, before we accept the PR.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/272#issuecomment-187457866:30,Config,ConfigVersion,30,https://psicode.org,https://github.com/psi4/psi4/pull/272#issuecomment-187457866,1,['Config'],['ConfigVersion']
Modifiability,"OK, now it's such that one of the three test cases uses `Wfn.variables` while the other two still use `P::e.globals`",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/697#issuecomment-300808824:61,variab,variables,61,https://psicode.org,https://github.com/psi4/psi4/issues/697#issuecomment-300808824,1,['variab'],['variables']
Modifiability,"OK, this should be working 100% now. The output looks correct on all the systems I've run so far, and I've added tests. I initially tried to use H2O, but it seems there's something weird going on with the CI wave functions there. Namely, when the CI wave function appears to flip its overall sign between the computed and the reference wave function, there are some configurations that *do not* flip their sign. I guess this must be some weird thing to do with symmetry, in that the wave function can individually flip signs within symmetry subblocks...?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301282245:366,config,configurations,366,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301282245,1,['config'],['configurations']
Modifiability,"OK. About the brown-paperbag, I've now looked it up in the hacker dictionary, and I didn't mean it in that sense, sorry. I use it in the sense of ""maintainer successfully built and tested on their machine, but it's obviously broken on a different configuration they did not test"".",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/213#issuecomment-178169351:247,config,configuration,247,https://psicode.org,https://github.com/psi4/psi4/issues/213#issuecomment-178169351,1,['config'],['configuration']
Modifiability,"OK... I managed to get gpu_dfcc built as a separate tree using gcc/g++ 5.5.0 by adding; `-DCMAKE_PREFIX_PATH` (pointing at `psi4/objdir/stage/usr/local/psi4/share/cmake/TargetLAPACK`); and; `-DOpenMP_LIBRARY_DIRS=/opt/intel/compilers_and_libraries_2018.3.222/linux/compiler/lib/intel64_lin` ; to the do-configure script. (I'm not sure how that would translate into building it within the psi4 build.). gcc/g++-4.9 gave me compile errors about missing symbols and gcc/g++-6 triggers a known bug with the version of CUDA I have on Debian (9.1.85). (If I had gcc/g++-6 installed and told it to use 4.9, cmake still tried to pull in a load of headers from V6!). It's built, installed into my installed psi4 tree and the gpu_dfcc test jobs run happily with reasonable looking bits about the GPU in the output file. I suspect I'll need to try a bigger job to see what it's really doing, though.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333:303,config,configure,303,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400462333,1,['config'],['configure']
Modifiability,"ON file is read by a Python script to generate C functions and headers, and the Fortran and Python interfaces. The names of the functions are `trexio_<group>_write_<attribute>`. So you can edit the trex.org file to add extra info to the JSON. There are 2 possibilities:; 1. You create at the top of the file, just before the Metadata section a block like:; ```python; #+begin_src python :tangle trex.json; ""psi4mp2"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]],; ""t1"" : [ ""float"", [ ""mo.num"", ""mo.num"" ]],; },; ""psi4ccsd"": {; ""w"" : [ ""float sparse"", [ ""mo.num"", ""mo.num"", ""mo.num"", ""mo.num"" ]]; },; #+end_src; ``` ; 2. Or you create a section in the Org-mode syntax like; ```text; * Psi4; This section documents the temporary arrays specific to psi4. ** DFMP2 (psi4dfmp2 group); Here, we specify the data for DFMP2.... [\; t = \sum_{ij} ...; \]; \[; W = \sum_{ijab} ...; \] . #+NAME: psi4dfmp2; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |; | ~t~ | ~float~ | ~(mo.num,mo.num)~ | t in the equation above |. #+CALL: json(data=psi4dfmp2, title=""psi4dfmp2""). ** CCSD (psi4ccsd group); Here, we specify the data for CCSD.... #+NAME: psi4ccsd; | Variable | Type | Dimensions | Description |; |------------+----------------+-----------------------------------+-----------------------------|; | ~w~ | ~float sparse~ | ~(mo.num,mo.num,mo.num,mo.num)~ | W in the equation above |. #+CALL: json(data=psi4ccsd, title=""psi4ccsd"", last=1). ```; Now if in Emacs you execute ""Ctrl-C Ctrl-C"" when your cursor is on the line ""CALL:json ..."", it will automatically generate the JSON code from the data of the table and put it in the file, similarly to what happens when you are using a Jupyter Notebook and you evaluate a cell. Note: the `last=1` argument handles the presence/absence of a comma in the gen",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918:1159,Variab,Variable,1159,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1397131918,1,['Variab'],['Variable']
Modifiability,ORCA kindly provides a table with their definitions: https://sites.google.com/site/orcainputlibrary/frozen-core-calculations. We could possible adapt it after checking it out.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012:144,adapt,adapt,144,https://psicode.org,https://github.com/psi4/psi4/issues/2343#issuecomment-961182012,1,['adapt'],['adapt']
Modifiability,"Of the dozen or so headers on my computer by that name, only the ones supplied by the conda clang compilers (which I'm not using) have that set. So error makes some sense. Only thing I can think of is I haven't done a simint build on this machine since the default switched from `sse` to `avx`, though, as that happened 9 months ago, shows that I've been _really_ linux or mac-psinet bound of late. ##### psi4 cmake; ```; -- Setting (unspecified) option SIMINT_VECTOR: avx; ```. ##### simint cmake; ```; -- Maximum AM: 6; -- Maximum Derivative: 0; -- CMAKE_C_FLAGS: -march=native; -- CMAKE_CXX_FLAGS: -stdlib=libc++ -march=native; -- SIMINT_C_INCLUDES: /Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external;/Users/loriab/linux/psihub/hrw-temp/objdir/external/upstream/simint/simint_external-prefix/src/simint_external-build/stage; -- SIMINT_C_FLAGS: -std=c99;-Wall;-Wextra;-pedantic;-Wno-unused-parameter;-Wno-unused-variable;-mavx; -- SIMINT_LINK_FLAGS: ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/890#issuecomment-356761851:974,variab,variable,974,https://psicode.org,https://github.com/psi4/psi4/issues/890#issuecomment-356761851,1,['variab'],['variable']
Modifiability,"Oh yea, this need to have a double split so that original line breaks are kept.; ```python; lines = []; for x in msg.splitlines():; lines.extend(wrap(x, linewidth).splitlines()); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334:138,extend,extend,138,https://psicode.org,https://github.com/psi4/psi4/issues/1867#issuecomment-613407334,1,['extend'],['extend']
Modifiability,"Oh, I see. Is there another variable I should be checking?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1409#issuecomment-444989115:28,variab,variable,28,https://psicode.org,https://github.com/psi4/psi4/pull/1409#issuecomment-444989115,1,['variab'],['variable']
Modifiability,"Ok fixed up the plugins, modernized the SCF plugin example, and a few other odds and ends. This should be ready to go.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-346231339:16,plugin,plugins,16,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346231339,2,['plugin'],"['plugin', 'plugins']"
Modifiability,"Ok the build is finally over with the new options I provided in the configure steps and now it works ! It was indeed, as many of you suggested already, this libgfortran.dylib issue. After some trials and errors (that's why I took so much time, sorry about that), here is the configure options that worked for me:. ```; cmake -H. -Bobjdir -DOpenMP_LIBRARY_DIRS=/opt/intel/lib -DCMAKE_Fortran_FLAGS=""-L/usr/local/opt/gcc@8/lib/gcc/8 -lgfortran""; ```. @JonathonMisiewicz now the restart with ```'fci'``` works ! But for ```'casscf'``` I get the following error:. ```; Could not find requested basisset (DF_BASIS_SCF).Traceback (most recent call last):; File ""PSI4_CAS_sim.py"", line 89, in <module>; CASSCF_energy = psi4.energy('casscf', molecule=mol, ref_wfn=original_wfn, return_wfn=False); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/driver.py"", line 570, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/proc.py"", line 4804, in run_detcas; ciwfn = mcscf.mcscf_solver(ref_wfn); File ""/Users/bsenjean/Documents/Git_repositories/psi4/objdir/stage/lib/psi4/driver/procrouting/mcscf/mcscf_solver.py"", line 100, in mcscf_solver; mcscf_obj = ciwfn.mcscf_object(); RuntimeError: ; Fatal Error: Wavefunction::get_basisset: Requested basis set (DF_BASIS_SCF) was not set!. Error occurred in file: /Users/bsenjean/Documents/Git_repositories/psi4/psi4/src/psi4/libmints/wavefunction.cc on line: 670; ```. Though that's not related to the issue here so I guess I can ask it on the forum or in another github issue ?. Thanks a lot, all of you, for your precious help !",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611:68,config,configure,68,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615271611,2,['config'],['configure']
Modifiability,"Ok, @amjames, I'm glad to hear that it's behaving according to my expectations. I wonder if setting `CMAKE_PREFIX_PATH` is still an alternate solution. The thing is, CMake detects GCC libraries implicitly, so it's hard to `rpath` them. . Ugg, python detection. That issue remains, I presume. That's interesting that `CMAKE_PREFIX_PATH` will help python detection; I had never tried that. I agree, there should be some advice to just set all three python variables, if you're going to set any. And an example for anaconda python. You're welcome to add such to [here](https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L39-L41), but try to stay compact. Otherwise, I'll add something later. A lot of these python detection problems should be eliminated by The Inversion, because we won't be _embedding_ python, just _linking_, so python can use its own `python-config` tech to load its library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249699749:454,variab,variables,454,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249699749,2,"['config', 'variab']","['config', 'variables']"
Modifiability,"Ok, @bennybp and @ryanmrichard, take a look at https://github.com/loriab/psi4/commit/ea33ace7bcfcf7aff42f07a1399ae022508ca757, please. Sorry it's not so clean as I'd like, but our server's going down soon. **What it does**; - when libgdma is dynamic and; - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` and `gdma_DIR` unspecified, builds externalproject downloaded from www.github.com/loriab/gdma and detects it and links it properly (no real change from your setup besides origin of code from user perspective); - `ENABLE_gdma` is on and `CMAKE_PREFIX_PATH` points to a pre-built installation, detects that and links to it properly; - The gdmaConfig exports all the usual suspect CMake variables (library, libraries, include_dir, include_dirs) (see below) but also; - manages requesting static shared, e.g., `find_package(gmda CONFIG REQUIRED COMPONENTS shared)`; - manages version requests; - exports a target `gdma::gdma` that has all its location, includes, `-DUSING_gdma` compiler definition, properties attached.; - so, after `find_package(gdma CONFIG REQUIRED)`, you don't have to add a library or use the usual suspects. Instead, just attach as needed (though I still think the second one should be simpler); - `target_link_libraries(psi4_exe PUBLIC gdma::gdma)`; - `target_compile_definitions(gdma_interface PRIVATE $<TARGET_PROPERTY:gdma::gdma,INTERFACE_COMPILE_DEFINITIONS>)`. ```; gdma_FOUND : 1; gdma_VERSION : 2.2.06; gdma_INCLUDE_DIRS : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_INCLUDE_DIR : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/include; gdma_LIBRARIES : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/stage/theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/install-psi4/external/gdma/lib/libgdma.so; gdma_LIBRARY : /theoryfs2/ds/cdsgroup/psi4-compile/psi4rmr3/psi4/objdir6/sta",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-238370429:685,variab,variables,685,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-238370429,2,"['CONFIG', 'variab']","['CONFIG', 'variables']"
Modifiability,"Ok, I just pushed a (still slightly broken) version that changes the libint2 interface very significantly, and almost has gradients working. The problematic derivatives are those where the angular momentum is greater in the bra than the ket, so perhaps that's a limitation that I need to resolve by ensuring loops satisfy ang mom constraints. Here's how I built the code in case anybody wants to replicate... 1. Clone the libint2 repo and checkout the v2.6 branch. 2. `LIBS=-L/u/andysim/anaconda3/lib CXXFLAGS=""-std=c++14 -I/u/andysim/anaconda3/include"" ../configure --enable-eri=2 --enable-eri3=2 --enable-eri2=2 --with-eri-max-am=5 --with-eri2-max-am=6 --with-eri3-max-am=6 --with-shgauss-ordering=gaussian --prefix=/u/andysim/programming/libint/installdir3 --enable-eri2-pure-sh --enable-eri3-pure-sh`. 3. `make install` (this will take a *very* long time). 4. `make export` - this will generate a tarball that can be used to build a version for Psi4 called `libint-2.7.0-beta.1.tgz`. 5. Untar that tarball somewhere else and modify the file `include/libint2_params.h` to read; ```; #ifndef LIBINT2_MAX_AM_default; # define LIBINT2_MAX_AM_default 4; #endif. #ifndef LIBINT2_MAX_AM_default1; # define LIBINT2_MAX_AM_default1 LIBINT2_MAX_AM_default; #endif. #ifndef LIBINT2_MAX_AM_default2; # define LIBINT2_MAX_AM_default2 LIBINT2_MAX_AM_default; #endif; ```; from line 81 onwards. 6. Make a `build` subdir and from there `cmake .. -DCMAKE_INSTALL_PREFIX=/u/andysim/programming/libint/installdir_2.6 -DLIBINT2_SHGAUSS_ORDERING=gaussian -DCMAKE_CXX_FLAGS=""-fPIC""` The fPIC flag is needed, or you'll get some nasty link errors. 7. Now you can build Psi4. Yay! `cmake .. -DCMAKE_BUILD_TYPE=Debug -DLibint2_DIR=/u/andysim/programming/libint/installdir_2.6/lib/cmake/libint2 -DLibint_DIR=/u/andysim/programming/libint1/installdir/share/cmake/Libint -DCMAKE_CXX_FLAGS=""-g -O0 -gxx-name=/v/apps/gcc/5.4.0/bin/g++ $CXXFLAGS""` The libint1 should be the hacked version with the `Libint_t` changed to `Libint1_",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417:557,config,configure,557,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-537945417,1,['config'],['configure']
Modifiability,"Ok, I see. 1.1a1 should do nicely for you. Tagged versions _are_ static once pushed to the repo. On the main repo, we'll probably change `1.0 to 1.0approx` and clear out the old ones, since the history re-write has rendered them defunct. But the history rewrite was a once-in-many-years event that cut our download size by 90%, so tags hereafter should be stable.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-273811816:254,rewrite,rewrite,254,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-273811816,1,['rewrite'],['rewrite']
Modifiability,"Ok, if one installs into a conda env the packages `psi4` (from us), `gcc`, and `openblas` (from default/anaconda channel), check out a new plugin from that psi4 exe, and modify the Makefile as below, it should work. . ```; # miniconda environment; MCONDA = /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug; # Flags that were used to compile Psi4.; CXX = ${MCONDA}/bin/g++; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -fopenmp -O3 -DNDEBUG -Wno-unused; LDFLAGS =; LDFLAGS=""-Wl,-rpath,${MCONDA}/lib/""; INCLUDES = -I${MCONDA}/include/ -I${MCONDA}/include/psi4 -I${MCONDA}/include/python2.7 -I/usr/include; ```. more explicitly,. ```; conda create -n p4plug2 psi4; source activate p4plug2; cd p4plug2 # may vary; just get into the miniconda/envs/p4plug2 directory; conda install gcc # 4.8.5-3; psi4 --new-plugin testplug; cd testplug; vi Makefile # copy in Makefile mods above, changing MCONDA variable; cp -pR ../../p4plug/include/psi4/ ../include/ # copy in a set of psi4 headers; make; psi4 # run sample input.dat; ldd testplug.so ; linux-vdso.so.1 => (0x00007fff969fe000); libstdc++.so.6 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libstdc++.so.6 (0x00007f763d984000); libm.so.6 => /lib64/libm.so.6 (0x00007f763d65c000); libgcc_s.so.1 => /theoryfs2/ds/cdsgroup/psi4-install/miniconda/envs/p4plug2/lib/libgcc_s.so.1 (0x00007f763d446000); libc.so.6 => /lib64/libc.so.6 (0x00007f763d085000); /lib64/ld-linux-x86-64.so.2 (0x00007f763de9e000); ```. @jturney, if you approve the plan, do you want to fix the includes installation and",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-172256746:139,plugin,plugin,139,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-172256746,1,['plugin'],['plugin']
Modifiability,"Ok, so in the `ijij` case I see this difference between s390 and amd64 when parsing the third character, also note the different length and content of `labels`:. amd64:. ```; Breakpoint 3, get_combined_dims_view (labels=0x7fffffffcd20 ""ij\376\376"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114	 int label = (signed char)labels[idim];; (gdb) n; 2116	 if (label < 0) {; (gdb) p label; $43 = -2; (gdb) p idim; $44 = 3; (gdb) p labels[idim]; $45 = -2 '\376'; (gdb) p labels; $46 = 0x7fffffffcd20 ""ij\376\376""; ```. s390x:. ```; Breakpoint 7, get_combined_dims_view (labels=0x3ffffffcdf8 ""ij\376\377\375\377\061\340"", iop=0, op=<optimized out>) at numpy/core/src/multiarray/einsum.c.src:2114; 2114 int label = (signed char)labels[idim];; (gdb) n; 2116 if (label < 0) {; (gdb) p label; $278 = -1; (gdb) p idim; $279 = 3; (gdb) p labels[idim]; $280 = 255 '\377'; (gdb) p labels ; $281 = 0x3ffffffcdf8 ""ij\376\377\375\377\061\340""; ```. If I then go on on s390 by mangling the `label` variable, it exits fine. ```; (gdb) set variable label = -2; (gdb) c; Continuing.; 47.048397425357216; [Inferior 1 (process 26977) exited normally]; ```. So I guess the `int label = (signed char)labels[idim];` is to fault here.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263:1012,variab,variable,1012,https://psicode.org,https://github.com/psi4/psi4/issues/1465#issuecomment-452063263,2,['variab'],['variable']
Modifiability,"Ok, so this is the issue. When you compute matrix elements of the effective Hamiltonian, <Psi_nu | Hbar(mu)|Psi_mu>, if the two determinants Psi_mu and Psi_nu differ by more than a double excitation you need the higher moments of the CC equations. These are not implemented in psimrcc. That's the reason for the warning in the CC code. In the PT2 code, everything is truncated at the second-order, and the matrix elements <Psi_nu | Hbar(mu)^(2) |Psi_mu> exist up to difference in three electron substitutions. So, I checked the paper and the code. The paper shows the formulas for the three-body couplings and some of these terms are coded in `psiumrcc/idmrpt2_Heff.cc` but are never called! So, the same warning should apply to PT2. My guess is that we were in the process of implementing them but then stopped (cannot remember why). So the following functions are dead code:; ```; void build_Heff_ijkabc();; void build_Heff_ijKabC();; void build_Heff_iJKaBC();; void build_Heff_IJKABC();; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1877#issuecomment-621283302:596,coupling,couplings,596,https://psicode.org,https://github.com/psi4/psi4/issues/1877#issuecomment-621283302,1,['coupling'],['couplings']
Modifiability,"Ok, that looks fine for psi4 in its own right. Jupyter must be in a separate environment. That can also work, but it'll need a little configuration -- I'm not surprised the initial jupy couldn't find it. Pretty much `export PYTHONPATH <conda-env-prefix-with-psi4>/lib/python3.10/site-packages/` or `sys.path.append(<same>)` from the jupy env should make the connection. `psi4 --psiapi` gives the exact values. https://psicode.org/psi4manual/master/build_planning.html#how-to-run-psi4-as-executable-or-python-module-from-conda-installation may also be helpful (do set scratch if running anything non-trivial).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3188#issuecomment-2195262024:134,config,configuration,134,https://psicode.org,https://github.com/psi4/psi4/issues/3188#issuecomment-2195262024,1,['config'],['configuration']
Modifiability,"Ok, the example plugins build automatically again and are incorporated into the testing system. The `-DENABLE_PLUGINS` option, btw, only controls whether these example plugins are built automatically, as opposed to in earlier build schemes where it actually controlled whether `-fpic` was used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78#issuecomment-86676981:16,plugin,plugins,16,https://psicode.org,https://github.com/psi4/psi4/issues/78#issuecomment-86676981,2,['plugin'],['plugins']
Modifiability,"Ok, the only non-invasive way I see around this is the below in the main CM file (change primary language as needed):. ```; if(CMAKE_CXX_COMPILER_ID MATCHES Intel); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-xHost"" ""-march=native"" ""/arch:AVX2""); else(); option_with_flags(ENABLE_XHOST ""Enables processor-specific optimization (with MSVC, it enables AVX2 instructions)"" ON; ""-march=native"" ""-xHost"" ""/arch:AVX2""); endif(); ```. For Intel, `-march=native` might be a near approximation to `-xHost`, but I'd rather use the latter official flag.; Do you want to try this out for Libxc, @susilehtola?. I observed another problem that when conda compilers are present and `-DCMAKE_CXX_COMPILER=icpc` passed, that the `-fno-plt` set in the envvar `CXXFLAGS` by conda env activation was unsupported by Intel and so triggered all three `ENABLE_XHOST` options to fail unless `CXXFLAGS=` explicitly cleared/set beforehand. I had deliberately _not_ made psi4 CMake dependent on envvars, but it looks like CMake started doing that in 3.10, hmpf. https://cmake.org/cmake/help/v3.10/manual/cmake-env-variables.7.html#manual:cmake-env-variables(7)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854:1163,variab,variables,1163,https://psicode.org,https://github.com/psi4/psi4/issues/2023#issuecomment-717371854,2,['variab'],['variables']
Modifiability,"Ok, the problem arises because in `psivardefs.py` the `SAPT0 IND ENERGY` variable is always defined in terms of coupled induction. I remember we had discussions about that at the time. Since usapt0.cc does not put uncoupled induction in the coupled induction variables, the `SAPT0 IND ENERGY` is not defined properly any more. Possible solution: define uncoupled variants of the variables in `psivardefs.py`, and when we create `SAPT IND ENERGY` (in `proc.py`) we copy `SAPT0 IND,U ENERGY` value if `SAPT0 IND ENERGY` is not defined. ; - Would that work ?; - Is there a way to check whether a Psivar is defined other than checking if it is exactly 0 ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/908#issuecomment-364679625:73,variab,variable,73,https://psicode.org,https://github.com/psi4/psi4/pull/908#issuecomment-364679625,3,['variab'],"['variable', 'variables']"
Modifiability,"Ok, this exists. It's only compiled to AM=5, uses Apple native accelerate framework blas and lapack, and probably only runs on 10.10 and 10.11. But it can:; - run for casual purposes, if not production; - useable with plugin commands `--new-plugin` and `--new-plugin-makefile` (more at [manual](http://psicode.org/psi4manual/master/plugins.html#creating-a-new-plugin-using-a-conda-pre-compiled-binary)). Could use more reports at http://forum.psicode.org/t/mac-binary-testing/209/2",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/49#issuecomment-215210776:218,plugin,plugin,218,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-215210776,5,['plugin'],"['plugin', 'plugin-makefile', 'plugin-using-a-conda-pre-compiled-binary', 'plugins']"
Modifiability,"Ok, two different levels here:; * v2rdm (and potentially other plugins or codes that link to psi4 (not that I know any in the latter case)) are using `ERISeive` c-side. They can do so b/c it's `PSI_API`d so the symbols are exposed in `psi4/core.*so`. These should be deprecated by `PSI_DEPRECATED`. If the plugin owner is compiling his plugin but never psi4 itself, he might still miss the notice, but at least we're giving such a fair chance.; * anyone could be using `ERISeive` py-side if it's exported by pb11. (And this has nothing to do with whether it's `PSI_API`d.) I think the way to deprecate those is to wrap the fns like https://github.com/psi4/psi4/blob/master/psi4/driver/p4util/python_helpers.py#L1480-L1495. Whenever dealing with deprecations, I think it's a good idea to use the ""_as soon as_ v1.x"" phrasing. We want to get the urgency across, but we almost never clear things out ASAP so that phrasing keeps the message accurate. For semi-completeness, I bring up a couple other deprecation/removal items:; * When you've got to make a breaking change py-side or you want to provide some guidance even after removal, there's `UpgradeHelper`s https://github.com/psi4/psi4/blob/master/psi4/driver/driver_cbs.py#L1062 that stop the calc but provide advice for fixing the input.; * When you want to remove an option, there's a pattern in core.cc; * When you want to remove or change the meaning of a QCVariable, there's a list in python_helpers.py",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259:63,plugin,plugins,63,https://psicode.org,https://github.com/psi4/psi4/pull/2935#issuecomment-1527977259,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"Okay, I'm not a fan of that. I do not install anything, psi4 or anything else, until I know that the tests pass, irregardless of what Travis CI says. Plus, I spend most of my time C-side or work in plugins that also require changes to C-side. I'll give it some thought and see what I can do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235910224:198,plugin,plugins,198,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235910224,1,['plugin'],['plugins']
Modifiability,"Okay, onto the next problem. I want to run a DFT calculation on a system where converging even HF takes SOSCF to work. However, reading in the HF orbitals fails. ; ```; molecule {; 0 1; symmetry c1; Mn -0.0128264866 -0.0002779912 -0.1091894544; O -1.1037647823 1.0246639195 -1.2821459116; O -0.4319309790 -1.5910632792 -1.0423314985; N 0.7243918073 1.6205280457 0.7709992473; N 1.3008767173 -0.9287768925 1.0635839133; C -1.2886186814 2.2834208702 -1.2181338272; C -0.7050865946 3.1821062059 -0.3604271375; C 0.3534920334 2.8195308082 0.5207059889; C 0.2177419816 -2.6945497951 -0.9662726987; C 1.2181378357 -3.0250490115 -0.0961995911; C 1.7180430400 -2.1229929449 0.8899899444; C 1.9393113446 1.3525171542 1.5367699106; C 1.8333722479 -0.0604962603 2.1055467704; H 0.8908035853 3.6241374839 1.0039698993; H 2.5024254412 -2.4854165868 1.5399007635; H 2.7858100041 1.4098930461 0.8661311665; H 1.1490336627 -0.0652673733 2.9502674019; H 2.0638511115 2.0769335299 2.3353274192; H 2.7993768711 -0.4085469833 2.4534782102; H -1.9892347032 2.6686747336 -1.9454961675; H -0.0986239324 -3.4441353556 -1.6764363233; Cl 1.8821942342 0.3098852687 -1.6599082362; O -1.1395010178 -0.1703680057 0.9263551082; H -0.9312248148 4.2251864392 -0.4696082573; H 1.6695378989 -3.9953914470 -0.1633815245; }. # Run SCF, initialize in smaller basis; set basis 6-31G*; set basis_guess 3-21G; set scf_type pk; set soscf true; scf_e, scf_wfn = energy('scf', return_wfn=True). # Rerun with BP86 to get better density; set scf guess read; scf_e, scf_wfn = energy('bp86', return_wfn=True); ```. outputs in the BP86 part; ```; Warning! Guess was READ without Ca set, switching to CORE!; This option should have been configured at the driver level. SCF Guess: Core (One-Electron) Hamiltonian.; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/612:1687,config,configured,1687,https://psicode.org,https://github.com/psi4/psi4/issues/612,1,['config'],['configured']
Modifiability,"Okay, so I guess we can link against the pre-built conda one.; I still tested the gcc you suggested, and after giving the proper gcc-ar and gcc-ranlib to the CMake variables, it complains it cannot find liblto_plugin.so; I checked and the new gcc has only liblto_plugin.a and not the .so",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288459669:164,variab,variables,164,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288459669,1,['variab'],['variables']
Modifiability,"Okay, so there are three different issues here:; 1. A segfault occurs if `num_frozen_docc` is ""too large."" What exactly ""too large"" means is unclear, but more frozen docc pairs than electron pairs is sufficient.; 2. Under certain conditions, `num_frozen_docc` causes very bad HF energies in the SAPT printout. The mechanism for this is unclear, but the individual HF computations themselves seem fine.; 3. The handling of frozen core orbitals is not flexible enough for your purposes. #2667 fixes this issue but not the other two. Do I have all that right? Any other issues I've missed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2631#issuecomment-1209917224:450,flexible,flexible,450,https://psicode.org,https://github.com/psi4/psi4/issues/2631#issuecomment-1209917224,1,['flexible'],['flexible']
Modifiability,"On ""How should I document that a functions takes as an argument or returns the metadata dictionary? That needs to be specified somewhere."", I'd say:; * in some fn (doesn't much matter where at this point), define each of the fields the metadata dict can or could include very carefully. e.g., https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_arrays.py#L216-L251; * choose a unique name for the variable that effectively signals its type, e.g., `findifrec`; * Use `findifrec` (or whatever you choose) as if it was a proper type when functions take or return the object. e.g., https://github.com/MolSSI/QCElemental/blob/master/qcelemental/molparse/from_string.py#L64-L67",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1289#issuecomment-431687920:421,variab,variable,421,https://psicode.org,https://github.com/psi4/psi4/pull/1289#issuecomment-431687920,1,['variab'],['variable']
Modifiability,"On RDR's point 2,. * Looks like CMake has the following hash algorithms available `file(<MD5|SHA1|SHA224|SHA256|SHA384|SHA512> filename variable)`; * And ExternalProject has `URL_HASH ALGO=value` to specify them; * `conda install openssl -c conda-forge` followed by `openssl sha256 your_sdist.tar.gz` to compute them. Only problem is that I suspect that's a tarball (single file) procedure, not the GH hash we usually do.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/856#issuecomment-344288297:136,variab,variable,136,https://psicode.org,https://github.com/psi4/psi4/pull/856#issuecomment-344288297,1,['variab'],['variable']
Modifiability,"On Ubuntu, I was able to get Psi4 (with CheMPS2 v1.5) and CheMPS2 (master; separate) to link when I disabled the link-time optimizer option in CheMPS2's CMakeLists.txt. Looks like the option is not fully supported on Ubuntu. ```; diff --git a/CMakeLists.txt b/CMakeLists.txt; index 868a694..9f5d2b2 100644; --- a/CMakeLists.txt; +++ b/CMakeLists.txt; @@ -46,10 +46,10 @@ if (HAS_IPO); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -ipo""); endif (HAS_IPO). -check_cxx_compiler_flag (-flto HAS_FLTO); -if (HAS_FLTO); - set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); -endif (HAS_FLTO); +#check_cxx_compiler_flag (-flto HAS_FLTO); +#if (HAS_FLTO); +# set (CMAKE_CXX_FLAGS ""-flto ${CMAKE_CXX_FLAGS}""); +#endif (HAS_FLTO). if (ENABLE_GENERIC); set (CMAKE_CXX_FLAGS ""${CMAKE_CXX_FLAGS} -static-libstdc++ -static-libgcc""); ```. I came to this conclusion when I tried to look into libchemps2.a:. ```; % nm libchemps2.a| grep appendNew; nm: CASSCF.cpp.o: plugin needed to handle lto object; nm: CASSCFdebug.cpp.o: plugin needed to handle lto object; nm: CASSCFnewtonraphson.cpp.o: plugin needed to handle lto object; nm: ConvergenceScheme.cpp.o: plugin needed to handle lto object; nm: Correlations.cpp.o: plugin needed to handle lto object; nm: Davidson.cpp.o: plugin needed to handle lto object; nm: DIIS.cpp.o: plugin needed to handle lto object; nm: DMRG.cpp.o: plugin needed to handle lto object; nm: DMRGmpsio.cpp.o: plugin needed to handle lto object; nm: DMRGoperators.cpp.o: plugin needed to handle lto object; nm: DMRGSCFindices.cpp.o: plugin needed to handle lto object; nm: DMRGSCFintegrals.cpp.o: plugin needed to handle lto object; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/264#issuecomment-185260019:943,plugin,plugin,943,https://psicode.org,https://github.com/psi4/psi4/issues/264#issuecomment-185260019,12,['plugin'],['plugin']
Modifiability,"On another issue, the buildtime configuration now seems to ask for LIBINT_OPT_AM, which AFAIK is the maximum angular momentum for which specially optimized code is generated. It doesn't ask a value for LIBINT_MAX_AM at all, which determines the maximum angular momentum for which evaluation routines are generated. In Ed's upstream release of libint, LIBINT_OPT_AM defaults to (LIBINT_MAX_AM/2 + 1). I believe the scripts should be adjusted to make it possible to set OPT_AM and MAX_AM separately, since a large value of OPT_AM generates huge code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/180#issuecomment-139102907:32,config,configuration,32,https://psicode.org,https://github.com/psi4/psi4/issues/180#issuecomment-139102907,1,['config'],['configuration']
Modifiability,"On some systems, the default temp location should not be `/tmp`; but it is set by either `$TMPDIR`, `$TEMP` or `$TMP` (commenly done on HPC; systems, where the temp location may be somthing special, a ssd for example).; This patch first checks those 3 environment variables; and uses its value when set. It falls back to `/tmp` when; nothing is set. `std::getenv` needs C++11 to be thread safe.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97:264,variab,variables,264,https://psicode.org,https://github.com/psi4/psi4/pull/97,1,['variab'],['variables']
Modifiability,"On the psivars, it's the global aspect that we'd like to squash by moving psivars into (perhaps module nested) dictionaries in the Wavefunction object. . I agree that the ESP gets to be a lot of psivars and is rather more suited to a psiarray than multiple individual psivars. Perhaps atom centers are a special case of grid point that still gets psivars/array set. . But then I also agree that as much as possible, the OEProp objects should be manipulatable py-side. . There started to be an effort to standardize these lesser-used user-facing functions (http://forum.psicode.org/t/ideas-to-simplify-wave-function-passing/161/11?u=loriab and https://github.com/psi4/psi4/pull/286) and they degenerated into bug-fixing, so there's still no consensus. And there's the antagonism between API-like function arguments and QC-like long list of options to tweak. This is a meandering way of saying that I don't presently have a plan for grid/prop interface. I think making the python access to the OEProp object full-functioned would be the most flexible approach.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/447#issuecomment-234668387:1040,flexible,flexible,1040,https://psicode.org,https://github.com/psi4/psi4/pull/447#issuecomment-234668387,1,['flexible'],['flexible']
Modifiability,"One smart feature would be to check whether the energy decreases when changing configurations. This could be a configurable setting in the solver. That is, when the Aufbau principle would lead to changing the configuration, the program should check whether the new occupations lead to a lower energy with the current orbitals than the old occupations with the same orbitals. Although this requires one additional energy evaluation, it probably saves quite a bit of iterations by preventing switches to less-good occupations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/888#issuecomment-879347426:79,config,configurations,79,https://psicode.org,https://github.com/psi4/psi4/issues/888#issuecomment-879347426,3,['config'],"['configurable', 'configuration', 'configurations']"
Modifiability,"Only a year after the ticket, and I've finally reviewed the keywords. @SebWouters, @dgasmith, @kannon92, please find below an options mapping between the two versions of chemps2 embedded in psi4, the chemps2 plugin for psi4, and the chemps2 executable. Column [E] is what I would have named the options had this been an intrinsic psi4 module. My current philosophy wrt options of add-on modules in psi4 is to leave them exactly as they are in the add-on program (so that users of e.g., CheMPS2 in psi4 and pyscf control CheMPS2 with exactly the same set of options) then let a layer above the psi4 driver handle mappings of identical-intent keywords into the psi4-consistent set (so that users of psi4 can `set detci diis true` and `set dmrg diis false`). So, I propose that we go entirely with [D] if that's the official CheMPS2 options set or entirely with [E] as those are the psi4-like versions. I don't see much point in maintaining _three_ options sets. Thoughts?. ``` text; Various of the dmrg options map nicely in meaning onto psi4's; e/d/r_convergence options. But in dmrg, e/r_convergence must be; arrays of floats, not floats, so they need the dmrg_ prefix for; differentiation. So, d_convergence may as well match with dmrg_. ------------- ------------- --------------- ----------- --------------; [A] [B] [C] [D] [E]; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like; ------------- ------------- --------------- ----------- --------------; --> GLOBAL frozen_docc frozen_docc nocc frozen_docc; --> GLOBAL active active nact active; dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep/group/symmetry wfn_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states ArrayType; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence ArrayType; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps ArrayT",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-223864136:208,plugin,plugin,208,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-223864136,1,['plugin'],['plugin']
Modifiability,"Oops, I ran the tests when I submitted this one, but didn't check the plugins. Thanks a lot for dealing with that, @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-346345543:70,plugin,plugins,70,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-346345543,1,['plugin'],['plugins']
Modifiability,Options Rewrite,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3220:8,Rewrite,Rewrite,8,https://psicode.org,https://github.com/psi4/psi4/pull/3220,1,['Rewrite'],['Rewrite']
Modifiability,"PR #370 also hit various of these points, particularly moving from Makefile, Makefile.conda, Makefile.macconda into configuring at cmake-time. All in at least provisionally working order, so closing out. Thanks, @fevangelista.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216#issuecomment-215206861:116,config,configuring,116,https://psicode.org,https://github.com/psi4/psi4/issues/216#issuecomment-215206861,1,['config'],['configuring']
Modifiability,PR with my fix is merged. Leaving this open until our cmake pulls the new plugin version @loriab,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2009#issuecomment-697169118:74,plugin,plugin,74,https://psicode.org,https://github.com/psi4/psi4/issues/2009#issuecomment-697169118,1,['plugin'],['plugin']
Modifiability,"PSIO error 12 means write error:; https://github.com/psi4/psi4/blob/58efb602ee9fdf3d774a3a6f073dbf47f2ac249b/psi4/src/psi4/libpsio/config.h#L55. Unfortunately your environment does not seem to give you the rest of the error message, so we dont actually know why a write has failed. Are you sure you have enough free disk space for the temporary files?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915:131,config,config,131,https://psicode.org,https://github.com/psi4/psi4/issues/2970#issuecomment-1565302915,1,['config'],['config']
Modifiability,Patch to allow the plugin code to work with PYMOD paths,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/490:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/pull/490,1,['plugin'],['plugin']
Modifiability,"Pipeline variables now configured. With respect to your other questions, yes, max_am_eri=8 will be plenty high enough. That matches what we distribute for linux now (Mac is 6). And don't worry about py3.5 -- there were enough oddities that we dropped it, too.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328:9,variab,variables,9,https://psicode.org,https://github.com/psi4/psi4/pull/1539#issuecomment-467076328,2,"['config', 'variab']","['configured', 'variables']"
Modifiability,"Please review the LinK code first, and tell me what you think of the new variable names before I make any changes to the DirectJK build algorithm.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2359#issuecomment-998999113:73,variab,variable,73,https://psicode.org,https://github.com/psi4/psi4/pull/2359#issuecomment-998999113,1,['variab'],['variable']
Modifiability,"Please supply the git hash of your Psi4 version, plugins have changed a lot lately.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/565#issuecomment-271911191:49,plugin,plugins,49,https://psicode.org,https://github.com/psi4/psi4/issues/565#issuecomment-271911191,1,['plugin'],['plugins']
Modifiability,Plugin example broken,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3093:0,Plugin,Plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/3093,1,['Plugin'],['Plugin']
Modifiability,Plugin examples gone,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/78:0,Plugin,Plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/78,1,['Plugin'],['Plugin']
Modifiability,Plugin fix,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/582:0,Plugin,Plugin,0,https://psicode.org,https://github.com/psi4/psi4/pull/582,1,['Plugin'],['Plugin']
Modifiability,"Plugin wish list:. - [ ] allow compiled `pluginname.so` to have a name other than matching `import pluginname`, so that python import system can't mistake the `.so` for the actual module. (see https://github.com/edeprince3/gpu_dfcc/issues/2#issuecomment-397649361)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402#issuecomment-397656501:0,Plugin,Plugin,0,https://psicode.org,https://github.com/psi4/psi4/issues/402#issuecomment-397656501,3,"['Plugin', 'plugin']","['Plugin', 'pluginname']"
Modifiability,Plugins,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/489:0,Plugin,Plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/489,1,['Plugin'],['Plugins']
Modifiability,"Plugins `aointegrals` and `mointegrals` work, but at least `backtrans` is broken, presumably by @lothian changes.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/221:0,Plugin,Plugins,0,https://psicode.org,https://github.com/psi4/psi4/issues/221,1,['Plugin'],['Plugins']
Modifiability,Plugins aren't getting global variables,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:0,Plugin,Plugins,0,https://psicode.org,https://github.com/psi4/psi4/issues/3200,2,"['Plugin', 'variab']","['Plugins', 'variables']"
Modifiability,Plugins psiapi,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/992:0,Plugin,Plugins,0,https://psicode.org,https://github.com/psi4/psi4/pull/992,1,['Plugin'],['Plugins']
Modifiability,"Pretty easy answer, if you look at the results you see pure nonsense in the molecule geometry. Each time you update a variable the molecule geometry is updated, since you do not have `no_com` set the molecule is moving around on you quite a bit and you're not building the geometry you think you are building. If you set `no_com`, everything works fine. This kind of variable setting really only should be used with a z-matrix. I wonder if we should enforce this.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/759#issuecomment-313982153:118,variab,variable,118,https://psicode.org,https://github.com/psi4/psi4/issues/759#issuecomment-313982153,2,['variab'],['variable']
Modifiability,"Pretty sure I'm using the homebrew boost, but that could still be the; problem. I upgraded homebrew a few days ago, but I didn't recompile PSI; since. The current homebrew boost is 1.60.0, and cmake sees it when it; configures. Everything compiles smoothly, but I get the following error; immediately on any attempt to execute with any input file:. Traceback (most recent call last):. File ""<string>"", line 6, in <module>. File ""/Users/crawdad/psi4/share/psi4/python/aliases.py"", line 39, in; <module>. ```; from wrappers import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/wrappers.py"", line 39, in; <module>. ```; from driver import *; ```. File ""/Users/crawdad/psi4/share/psi4/python/driver.py"", line 265, in; <module>. ```; for ssuper in superfunctional_list():; ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 3365, in; superfunctional_list. ```; sup = superfunctionals[key](key, 1, 1); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1910, in; build_b3lypd1_superfunctional. ```; sup = build_b3lyp_superfunctional(name, npoints, deriv); ```. File ""/Users/crawdad/psi4/share/psi4/python/functional.py"", line 1224, in; build_b3lyp_superfunctional. ```; sup = psi4.SuperFunctional.blank(); ```. TypeError: No to_python (by-value) converter found for C++ type:; boost::shared_ptrpsi::SuperFunctional. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Tue, Feb 2, 2016 at 2:39 PM, Andy Simmonett notifications@github.com; wrote:. > Messaging from 30000 feet, @lothian https://github.com/lothian . Fancy!; > I bet the problem you're seeing is due to some incompatibility between the; > way boost and psi4 are compiled. On the Mac I had a hard time getting a GCC; > version to compile. I had to compile boost with some modified settings to; > get the code to link, but it failed in the way that you described when it; > did link. I had no problems using the Homebrew (or the Psi4 bundled) Boost; > if I used clang.; > ; > —; > Reply to this emai",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/230#issuecomment-178853828:216,config,configures,216,https://psicode.org,https://github.com/psi4/psi4/issues/230#issuecomment-178853828,1,['config'],['configures']
Modifiability,Prevents the user from using C++ keywords for plugin names.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/532:46,plugin,plugin,46,https://psicode.org,https://github.com/psi4/psi4/pull/532,1,['plugin'],['plugin']
Modifiability,Probably a patch or two needed to the plugin templates to satisfy Travis.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/844#issuecomment-343331298:38,plugin,plugin,38,https://psicode.org,https://github.com/psi4/psi4/pull/844#issuecomment-343331298,1,['plugin'],['plugin']
Modifiability,"Probably what's happening is that psi4 is packaged only with MKL (except for Apple Silicon) and OpenFF is flexible in BLAS, but conda-forge defaults to OpenBLAS. So one needs to install both together or install psi4 and then openff, as you worked out.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544:106,flexible,flexible,106,https://psicode.org,https://github.com/psi4/psi4/issues/3046#issuecomment-1706634544,1,['flexible'],['flexible']
Modifiability,"Props4 does have both labels (my bad), so I'll fix that, @loriab. I _think_ I found a workaround for the Travis problems. The bjam system uses predefined setups to build. When it calls `clang`, it's really getting clang 3.4 (which is broken); loading the clang 3.8 module defines `clang-3.8` in addition to the existing `clang`. I forced bjam to use `clang-3.8` instead by dumping a `user-config.bjam` file to ${HOME}. This is done by a script because YAML has a terrible time with : in environmental variables. That's about an hour of my life I'll never get back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/442#issuecomment-235179414:389,config,config,389,https://psicode.org,https://github.com/psi4/psi4/pull/442#issuecomment-235179414,2,"['config', 'variab']","['config', 'variables']"
Modifiability,"Psi and TREXIO use the word ""file"" differently, so let me reword. Right now, a user can do the equivalent of saying to save a matrix as a variable in a group, as long as the _group_ is pre-defined. The user can create a completely new variable in an existing group if they so choose. Is there a way for us to retain that functionality with TREXIO?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2847#issuecomment-1409366515:138,variab,variable,138,https://psicode.org,https://github.com/psi4/psi4/issues/2847#issuecomment-1409366515,2,['variab'],['variable']
Modifiability,"Psi4 doesn't seem to be initializing global variables in a way that can be accessed by plugins. One example is `psi::outfile`. Steps to recreate:; - Create a new plugin. Tested on the scf template.; - Configure with `psi4 --plugin-compile`; - Adding the `-DCMAKE_BUILD_TYPE=Debug` also causes this.; - Build with `cmake --build (directory)`; - Running gives a segmentation fault. Output from valgrind with the debug build type gives the following.; ```; ==98805== Memcheck, a memory error detector; ==98805== Copyright (C) 2002-2024, and GNU GPL'd, by Julian Seward et al.; ==98805== Using Valgrind-3.23.0 and LibVEX; rerun with -h for copyright info; ==98805== Command: /home/user/psi4/bin/psi4 input.dat; ==98805== ; ==98805== Invalid read of size 8; ==98805== at 0x29BC741C: std::vector<char, std::allocator<char> >::size() const (stl_vector.h:988); ==98805== by 0x2B5A1476: psi::PsiOutStream::Printf(char const*, ...) (PsiOutStream.cc:70); ==98805== by 0x296A3066: psi::test::SCF::init_integrals() (scf.cc:79); ==98805== by 0x296A2C04: psi::test::SCF::SCF(std::shared_ptr<psi::Wavefunction>, psi::Options&) (scf.cc:56); ==98805== by 0x29697716: test (plugin.cc:134); ==98805== by 0x5FDD804: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5FE0666: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x5F6A896: ??? (in /home/user/psi4/lib/psi4/core.cpython-310-x86_64-linux-gnu.so); ==98805== by 0x4FDC86: cfunction_call (methodobject.c:543); ==98805== by 0x4F741A: _PyObject_MakeTpCall (call.c:215); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:112); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:99); ==98805== by 0x4F34C5: UnknownInlinedFun (abstract.h:123); ==98805== by 0x4F34C5: UnknownInlinedFun (ceval.c:5893); ==98805== by 0x4F34C5: _PyEval_EvalFrameDefault (ceval.c:4181); ==98805== by 0x4FE0CE: UnknownInlinedFun (pycore_ceval.h:46); ==98805== by 0x4FE0CE: UnknownInlinedFun (ceval.c:5067); ==98805=",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3200:44,variab,variables,44,https://psicode.org,https://github.com/psi4/psi4/issues/3200,5,"['Config', 'plugin', 'variab']","['Configure', 'plugin', 'plugin-compile', 'plugins', 'variables']"
Modifiability,Psi4 fails to configure,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3092:14,config,configure,14,https://psicode.org,https://github.com/psi4/psi4/issues/3092,1,['config'],['configure']
Modifiability,"Psi4 modules writing their variable to globals should be moved to Wavefunction local variables. This is part of the general ""localization"" of Psi4 to assist in complex Psi4 runs involving multiple computations and to further promote the API. . The general plan is as follows:; 1) Add a bit of code that dumps all local Wavefunction variables to global variables at the end of each *driver* computation `energy/gradient/Hessian/etc`. The small code snippet looks like the following:. ```python; scf_e, wfn = psi4.energy(""HF"", return_wfn=True); for k, v in wfn.variables().items():; core.set_variable(k, v); ```; Thats it! Just need to be called at the right places in the driver to ensure we do not miss a crucial export. This will keep the global variables working as expected. 2) Replace all `Process::environment.globals[""name""] = variable` calls with `Wavefunction->set_variable(""name"", variable)` for modules.; 3) Keep in mind some modules may grab variables from these global options. Some thought will be needed in these cases so this is not a blanket find and replace.; 4) @loriab Are there going to be doc issues when we do this?. I would not do this all in one go due to point 3. So I would recommend a series of PR's:; - PR 1: Do (1) and apply (2) to adc, dfep2, dfmp2, detci, and libsapt_solver modules (in that order, testing in between!).; - PR 2 (may be multiple): Apply (2) to major module blocks one at a time CC*, occ, dfocc, etc.; - PR 3: Clean up any remaining module global exports.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/883:27,variab,variable,27,https://psicode.org,https://github.com/psi4/psi4/issues/883,9,['variab'],"['variable', 'variables']"
Modifiability,"Psi4 source and am actively phasing it out to; get us back to C98). I'm also under the impression that reading; environment variables is typically done in Python for Psi4 and I think that; is where such things should be done long term anyways. Personally for this problem the solutions on the Psi4 webpage,; http://sirius.chem.vt.edu/psi4manual/4.0b5/external.html, have worked great; for me. In particular setting this in your .psi4rc file is a convenient; way to accomplish this on a per machine basis. I haven't actually rejected the pull so other developers feel free to veto; my veto if I missed something (particularly @lorilab who I suspect is the; pro on these sorts of environment things). Ryan. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 24, 2015 8:21 AM, ""wpoely86"" notifications@github.com wrote:. > On some systems, the default temp location should not be /tmp; > but it is set by either $TMPDIR, $TEMP or $TMP (commenly done on HPC; > systems, where the temp location may be somthing special, a ssd for; > example).; > This patch first checks those 3 environment variables; > and uses its value when set. It falls back to /tmp when; > nothing is set.; > ; > ## std::getenv needs C++11 to be thread safe.; > ; > You can view, comment on, or merge this pull request online at:; > ; > https://github.com/psi4/psi4public/pull/97; > Commit Summary; > - Use $TMPDIR for default of PSI_SCRATCH when set; > ; > File Changes; > - _M_ src/bin/psi4/psi_start.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-0 (3); > - _M_ src/lib/libpsio/filemanager.cc; > https://github.com/psi4/psi4public/pull/97/files#diff-1 (16); > - _M_ src/lib/libpsio/psio.hpp; > https://github.com/psi4/psi4public/pull/97/files#diff-2 (4); > ; > Patch Links:; > - https://github.com/psi4/psi4public/pull/97.patch; > - https://github.com/psi4/psi4public/pull/97.diff; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105036059:1789,variab,variables,1789,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105036059,1,['variab'],['variables']
Modifiability,"Question about plugin ""installation""",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229:15,plugin,plugin,15,https://psicode.org,https://github.com/psi4/psi4/issues/229,1,['plugin'],['plugin']
Modifiability,"Question: Is it worth refactoring `adcc` ctests to pytest? I will need to touch *every* `adcc` test to accommodate for new variables (previously all excitation energies were just stored in a single array, so that we could use `compare_arrays`) anyways.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2513#issuecomment-1084625953:22,refactor,refactoring,22,https://psicode.org,https://github.com/psi4/psi4/pull/2513#issuecomment-1084625953,2,"['refactor', 'variab']","['refactoring', 'variables']"
Modifiability,"Quick notes on timer.dat; * the file is cummulative so run each calc in separate directory so you can match an input file with a timer.dat entry; * timer.dat is mostly for developers so it has just enough info to identify things but not much description; * if you're willing to compile the code (for c-side entries) or edit the installation (for py-side entries), adding more subdivisions to timer.dat is easy; * py-side, have matching labels like https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/scf_proc/scf_iterator.py#L196-L198; * c-side, have matching entries like https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfmp2/mp2.cc#L219-L221; * for a single run, timer.dat shows the same info two ways -- ; * one is sorted cummulative time spent w/i each label marker; * other is nested so you can see what label markers contain others; * so the hardest part is finding/adding appropriate marks that you want to measure the time over; * you can get the number of scf iterations from `psi4.variable(""SCF ITERATIONS"")` at the end of a calc. Hope this is broadly helpful. Feel free to ask questions.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2601#issuecomment-1152763335:1011,variab,variable,1011,https://psicode.org,https://github.com/psi4/psi4/issues/2601#issuecomment-1152763335,1,['variab'],['variable']
Modifiability,"Quite true. Among the developers, the usual practice has been to run and develop from source (for python) and objdir (for compiled), so there was no assurance of an installation directory. In fact, the psi4 headers weren't installed until recently (and if you build the internal boost, those headers _still_ aren't installed). I fixed recently the generation of plugins from an installed copy, but only for the special case of a conda binary. As an interim solution, you can (1) check out source to permanent storage and keep it around, while still building in objdir in scratch or (2) hardcoding PLUGIN_ values `$PREFIX/share/psi4/plugin/Makefile.template` into (can copy from the sample Makefile you created, then just patch up the header paths). I'll see about having the plugin Makefiles search source _and_ install directories for headers so that all can use plugins the way they want. Thanks for alerting us to this problem.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/410#issuecomment-226000498:362,plugin,plugins,362,https://psicode.org,https://github.com/psi4/psi4/issues/410#issuecomment-226000498,4,['plugin'],"['plugin', 'plugins']"
Modifiability,"R will be smoother, and CompositeJK development can continue parallel to the developments discussed in https://github.com/psi4/psi4/pull/2682. Additionally, this PR serves as a first step the to decomposition of https://github.com/psi4/psi4/pull/2682 as discussed in that PR's comments, allowing for the full standardization of IncFock among integral-direct JK subclasses. For reviewers, since this PR is the bottleneck for two different routes of JK development (CompositeJK and IncFock standardization), it should be considered the highest-priority JK development PR to merge into Psi4 at the moment. ## User API & Changelog headlines; N/A. ## Dev notes & details; - [X] Switches DFJLinK to using the incremental Fock build implementation used in DFJCOSK. This change standardizes the incremental Fock implementation between DFJLinK and DFJCOSK and improves the memory usage of DFJLinK in the process.; - [X] Changes LinK machinery to support new incremental Fock formalism. ## Questions; - [ ] Since this PR specifically focuses on changes to DFJLinK, there are still a couple of small differences in IncFock between DFJLinK and DFJCOSK, mainly, refactorings and the aforementioned bells and whistles that DFJLinK has that DFJCOSK doesn't. Would it be better to make adjustments to DFJCOSK in this PR as well, to further standardize the two; or is it preferrable to punt that down to the next CompositeJK PR, when DFJLinK and DFJCOSK are combined into the pilot CompositeJK implementation? If we decide to make the changes to DFJCOSK this PR, it would essentially consist of refactoring the DFJCOSK IncFock to match that of DFJLinK, and adding the bells and whistles that DFJLinK currently has.; - [ ] Should the relevant test outputs be updated?. ## Checklist; - [X] Tests added for any new features; - [X] [All or relevant fraction of full tests run](http://psicode.org/psi4manual/master/build_planning.html#how-to-run-a-subset-of-tests). ## Status; - [X] Ready for review; - [ ] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2792:3222,refactor,refactorings,3222,https://psicode.org,https://github.com/psi4/psi4/pull/2792,2,['refactor'],"['refactoring', 'refactorings']"
Modifiability,"RARYDIR=$HOME/anaconda/envs/psi4-py2.7/lib \; objdir; ```. I see boost 1.59.0 is detected. ```; -- Boost version: 1.59.0; -- Found the following Boost libraries:; -- filesystem; -- python; -- regex; -- serialization; -- system; -- timer; -- chrono; -- thread; -- Looking for MKL_Free_Buffers; ```. However the build will fail in the linking step with the same `undefined reference` errors as others have seen when trying to link against boost 1.60.0 #243 , #312 . Looking in `CMakeCache.txt` I see that the `Boost_INCLUDE_DIR` has been set correctly but the `Boost_LIBRARY_DIR` and all `Boost_XX_LIBRARY_...` paths have been set to the global boost install in `/usr/local` . ```; //Path to a file.; Boost_INCLUDE_DIR:PATH=/Users/admin/anaconda/envs/psi4-py2.7/include. //Boost library directory; Boost_LIBRARY_DIR:PATH=/usr/local/lib. //Boost python library (debug); Boost_PYTHON_LIBRARY_DEBUG:FILEPATH=/usr/local/lib/libboost_python-mt.a; ```. If I unlink the home-brew boost in `/usr/local` and run the same setup the custom boost is configured to build. . adding the flags `-DBoost_DEBUG=ON -DBoost_DETAILED_FAILURE_MESSAGE=ON`. I can see all of the output related to FindBoost.cmake is identical. CMake is searching the correct path for the boost library files (`$HOME/anaconda/envs/psi4-py2.7/lib`). And does not add `/usr/local/anything` to the search paths. . Yet, if boost 1.60.0 is linked it reports it found the correct libraries version 1.59.0, and if those links are removed it reports they are not found. In both cases it sets `Boost_FOUND = 1` but with the boost 1.60.0 links removed the pre-packaged boost is configured to build anyway. . It is also interesting that `_boost_TEST_VERSIONS` includes 1.55.0-1.58.0. (Both 1.59.0 and 1.60.0 aren't included) I am not sure if that is related to this problem though. FindBoost.cmake debuting output : . ```; -- Found Python: /Users/admin/anaconda/lib/libpython2.7.dylib ; -- [ /usr/local/Cellar/cmake/3.2.2/share/cmake/Modules/FindBoost.cma",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/313:2199,config,configured,2199,https://psicode.org,https://github.com/psi4/psi4/issues/313,1,['config'],['configured']
Modifiability,"R_SPIN_FLIP', 'CFOUR_SPIN_ORBIT', 'CFOUR_SPIN_SCAL', 'CFOUR_SUBGROUP', 'CFOUR_SYMMETRY', 'CFOUR_SYM_CHECK', 'CFOUR_T3_EXTRAPOL', 'CFOUR_TAMP_SUM', 'CFOUR_THERMOCHEMISTRY', 'CFOUR_TRANS_INV', 'CFOUR_TREAT_PERT', 'CFOUR_UIJ_THRESHOLD', 'CFOUR_UNITS', 'CFOUR_UPDATE_HESSIAN', 'CFOUR_VIBRATION', 'CFOUR_VTRAN', 'CFOUR_XFIELD', 'CFOUR_XFORM_TOL', 'CFOUR_YFIELD', 'CFOUR_ZFIELD', 'CHOLESKY', 'CHOLESKY_TOLERANCE', 'CIBLKS_PRINT', 'CI_DIIS', 'CI_FILE_START', 'CI_MAXITER', 'CI_NUM_THREADS', 'CI_TYPE', 'COLLAPSE_SIZE', 'COLLAPSE_WITH_LAST', 'COLLAPSE_WITH_LAST_CC3', 'COMPLEX_TOLERANCE', 'COMPUTE_MP4_TRIPLES', 'COMPUTE_TRIPLES', 'COMPUT_S2', 'CONSECUTIVE_BACKSTEPS', 'CORR_ANSATZ', 'CORR_CCSD_T', 'CORR_CHARGE', 'CORR_MULTP', 'CORR_WFN', 'COSX_BASIS_TOLERANCE', 'COSX_DENSITY_TOLERANCE', 'COSX_INTS_TOLERANCE', 'COSX_OVERLAP_FITTING', 'COSX_PRUNING_SCHEME', 'COSX_RADIAL_POINTS_FINAL', 'COSX_RADIAL_POINTS_INITIAL', 'COSX_SPHERICAL_POINTS_FINAL', 'COSX_SPHERICAL_POINTS_INITIAL', 'COUPLED_INDUCTION', 'COUPLING', 'COUPLING_TERMS', 'COVALENT_CONNECT', 'CPHF_MEM_SAFETY_FACTOR', 'CPHF_TASKS', 'CUBEPROP_BASIS_FUNCTIONS', 'CUBEPROP_FILEPATH', 'CUBEPROP_ISOCONTOUR_THRESHOLD', 'CUBEPROP_ORBITALS', 'CUBEPROP_TASKS', 'CUBIC_BASIS_TOLERANCE', 'CUBIC_BLOCK_MAX_POINTS', 'CUBIC_GRID_OVERAGE', 'CUBIC_GRID_SPACING', 'CUTOFF', 'CUTOFF_AMPS_PRINT', 'DAMPING_CONVERGENCE', 'DAMPING_FACTOR_INDUCED', 'DAMPING_FACTOR_MULTIPOLE', 'DAMPING_PERCENTAGE', 'DAMP_INDUCED', 'DAMP_MULTIPOLE', 'DCT_FUNCTIONAL', 'DCT_GUESS', 'DCT_TYPE', 'DDX', 'DDX_DIIS_MAX_VECS', 'DDX_ETA', 'DDX_FMM', 'DDX_FMM_LOCAL_LMAX', 'DDX_FMM_MULTIPOLE_LMAX', 'DDX_INCORE', 'DDX_LMAX', 'DDX_LOGFILE', 'DDX_MAXITER', 'DDX_MODEL', 'DDX_N_LEBEDEV', 'DDX_RADII', 'DDX_RADII_SCALING', 'DDX_RADII_SET', 'DDX_SHIFT', 'DDX_SOLUTE_RADIAL_POINTS', 'DDX_SOLUTE_SPHERICAL_POINTS', 'DDX_SOLVATION_CONVERGENCE', 'DDX_SOLVENT', 'DDX_SOLVENT_EPSILON', 'DDX_SOLVENT_EPSILON_OPTICAL', 'DDX_SOLVENT_KAPPA', 'DEBUG', 'DELETE_TEI', 'DENOMINATOR_ALGORITHM', 'DENOMINATOR_DELTA'",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845:10897,COUPLING,COUPLING,10897,https://psicode.org,https://github.com/psi4/psi4/issues/3181#issuecomment-2192730845,1,['COUPLING'],['COUPLING']
Modifiability,"Ran these under memory/cpu profilers (4 cores) and found the following:. B3LYP with MemJK (8.3 GB max, 3 SCF iterations):; ![b3lyp_memjk](https://user-images.githubusercontent.com/1769841/55844039-7d81c280-5b09-11e9-8fd5-c2dc04d71d23.png). wB97X with MemJK (7.1 GB max, 1 SCF iteration):; ![wb97x_diskjk](https://user-images.githubusercontent.com/1769841/55844045-82467680-5b09-11e9-9e20-78204926df8e.png). I could not run these for their full extend on my laptop, but overall it looks like they are staying relatively in-bounds. I can fix the 4% overages on the B3LYP run, I see where that occurs now. A thought is that they slowly leak over time, can you check which optimization iteration these are failing on?. I sadly do not have any local hardware I can run things on these days.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169:444,extend,extend,444,https://psicode.org,https://github.com/psi4/psi4/issues/1590#issuecomment-481493169,1,['extend'],['extend']
Modifiability,"Realistically I'm not going to have the bandwidth to get full (i.e. production quality) DFT hessians up and running in one shot, so I'm in favor of incremental PRs. This one does two things: 1) sets up the CPKS stuff we'll need for all restricted DFT methods and 2) paves the way for GGA Hessians, by adding all the appropriate hooks for the various derivative terms. It currently needs 3 x Natom x nbf^2 memory for the Fock derivatives, but that will be easy to fix in the future. Therefore, my preference is to get this PR in as-is, so that I (and, hopefully, others) can build on it by adding the GGA terms and making it more memory efficient. I'd be very happy to guide any interested people on the refactoring front, but will do it myself if needed; either way, it's something that's much easier to do when there's at least something that works in place already. The main review questions I have were already sorted out in the great feedback I've had so far: @loriab told me exactly where, and how, to hook into the driver. You (@dgasmith) have pointed out a good source of inspiration for the refactoring pass, so I think my questions are answered at this point. Once this is merged, I'll continue to work on the restricted GGA terms so that we're well poised for a brainstorming session to make the code more efficient.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715:703,refactor,refactoring,703,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502410715,2,['refactor'],['refactoring']
Modifiability,Reboot - Density Screening Refactor Part 2: Implementation of shell_significant(),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3098:27,Refactor,Refactor,27,https://psicode.org,https://github.com/psi4/psi4/pull/3098,1,['Refactor'],['Refactor']
Modifiability,"Rebuilding Psi4 1.3.2 in Fedora rawhide fails with; ```; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; error: Bad exit status from /var/tmp/rpm-tmp.sQzcRh (%build); ```; The issue here is that distutils was deprecated in Python 3.10 and marked for deletion in 3.12:; https://docs.python.org/3/whatsnew/3.10.html#distutils-deprecated. The file in master has been slightly updated, but still features the use of distutils, so this issue is likely present on the master branch as well.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020:225,config,config,225,https://psicode.org,https://github.com/psi4/psi4/issues/3020,2,"['Config', 'config']","['Configuring', 'config']"
Modifiability,Refactor Incremental Fock Builds in Chain-of-Spheres Exchange,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2682,1,['Refactor'],['Refactor']
Modifiability,Refactor LinK and COSK into Composite JK,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2588:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2588,1,['Refactor'],['Refactor']
Modifiability,Refactor Recursive Driver Into Distributed Driver,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/1351,1,['Refactor'],['Refactor']
Modifiability,"Refactor Recursive Driver Into Distributed Driver, Again",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2575:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2575,1,['Refactor'],['Refactor']
Modifiability,Refactor `JK_deriv2`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2994:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2994,1,['Refactor'],['Refactor']
Modifiability,Refactor `PseudospectralInts` using Libint2,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2473:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2473,1,['Refactor'],['Refactor']
Modifiability,Refactor `Vector` and `IntVector`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2628:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2628,1,['Refactor'],['Refactor']
Modifiability,Refactor `libmints::IntegralFactory.electric_field()` to return ElectricFieldInt,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2795:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2795,1,['Refactor'],['Refactor']
Modifiability,Refactor assemble_Q,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2996:0,Refactor,Refactor,0,https://psicode.org,https://github.com/psi4/psi4/pull/2996,1,['Refactor'],['Refactor']
Modifiability,Refactoring of Dimension class,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/571:0,Refactor,Refactoring,0,https://psicode.org,https://github.com/psi4/psi4/pull/571,1,['Refactor'],['Refactoring']
Modifiability,"Related to issue #414 : when using the GCC 5.2 trick reported [here](http://psicode.org/psi4manual/master/build_planning.html#faq-modgcc) AND building CheMPS2, which requires to specify the -DCMAKE_AR and -DCMAKE_RANLIB variables, the build fails with the message:. `sorry - this program has been built without plugin support`. I traced it back to gcc-ar for both gcc5.2 from conda and gcc4.8 from the local system being built without plugin support. After more staring, it looks like both gcc-ar are wrappers which call the same /usr/bin/ar, which was built without plugin support. Anyone can think of a workaround for this ? Could we install a local ar in the conda environment and have gcc5.2 call this one, for example ?. (Note: Edited for clarity.)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660:220,variab,variables,220,https://psicode.org,https://github.com/psi4/psi4/issues/660,4,"['plugin', 'variab']","['plugin', 'variables']"
Modifiability,Replace 'get_array' with 'variable' to avoid deprecation warning. ## Status; - [x] Ready for review; - [x] Ready for merge,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1549:26,variab,variable,26,https://psicode.org,https://github.com/psi4/psi4/pull/1549,1,['variab'],['variable']
Modifiability,Resolves configure issue in libqt wrt lapack,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1342:9,config,configure,9,https://psicode.org,https://github.com/psi4/psi4/pull/1342,1,['config'],['configure']
Modifiability,Restore Plugin SCF Subclasses,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2267:8,Plugin,Plugin,8,https://psicode.org,https://github.com/psi4/psi4/issues/2267,1,['Plugin'],['Plugin']
Modifiability,Rewrite `ras_set`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3208:0,Rewrite,Rewrite,0,https://psicode.org,https://github.com/psi4/psi4/pull/3208,1,['Rewrite'],['Rewrite']
Modifiability,"SCF calculations on the formaldimine molecule. I am particularly interested by the determinant decomposition of the ground and first excited state of the molecule (singlet symmetry). However, I think I have noticed a pb concerning the sign of the determinants in the output. First, I give you my INPUT in python : . pes_origin = [1.498047, 1.066797, 0.987109, 118.359375]; variables = pes_origin[:] + [90, 90]; psi4.geometry(; """"""; N; C 1 {0}; H 2 {1} 1 {3}; H 2 {1} 1 {3} 3 180; H 1 {2} 2 {4} 3 {5}; symmetry c1"""""".format(*variables) ); ; psi4.set_options({ 'basis': 'cc-pvdz',; 'DETCI_FREEZE_CORE' : False,; 'reference': 'RHF',; 'num_roots': 2,; 'frozen_docc':[0],; 'restricted_docc': [6],; 'active': [3],; 'restricted_uocc': [11], ; 'frozen_uocc': [23],; 'mcscf_maxiter': 1000, ; 'avg_states' : [ 0, 1],; 'avg_weights' : [ 0.5, 0.5 ]; }); ; sacasscf, sacasscf_wfn = psi4.energy('casscf',return_wfn=True); E0_sacasscf = psi4.variable('CI ROOT 0 TOTAL ENERGY'); E1_sacasscf = psi4.variable('CI ROOT 1 TOTAL ENERGY') . Then, I give you from the OUTPUT FILE the decomposition I obtain : . *******************************************************************; *******************************************************************; ==> MCSCF root 0 information <==. MCSCF Root 0 energy = -93.931448649953467. Active Space Natural occupation numbers:. A 2.000000 A 1.000000 A 1.000000. The 9 most important determinants:. * 1 0.691216 ( 0, 1) 7AX 8AA 9AB ; * 2 0.691216 ( 1, 0) 7AX 8AB 9AA ; * 3 -0.149064 ( 1, 2) 7AA 8AB 9AX ; * 4 -0.149064 ( 2, 1) 7AB 8AA 9AX ; * 5 0.000000 ( 0, 0) 7AX 8AX ; * 6 0.000000 ( 0, 2) 7AA 8AX 9AB ; * 7 0.000000 ( 2, 0) 7AB 8AX 9AA ; * 8 -0.000000 ( 2, 2) 8AX 9AX ; * 9 -0.000000 ( 1, 1) 7AX 9AX . ==> MCSCF root 1 information <==. MCSCF Root 1 energy = -93.902550337672878. Active Space Natural occupation numbers:. A 1.999537 A 1.843676 A 0.156787. The 9 most important determinants:. * 1 -0.887365 ( 0, 0) 7AX 8AX ; * 2 -0.291143 ( 0, 2) 7AA 8AX 9AB ; * 3 -0.291143 ( 2, 0)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2008:1029,variab,variable,1029,https://psicode.org,https://github.com/psi4/psi4/issues/2008,1,['variab'],['variable']
Modifiability,SNS-MP2 Plugin Addition,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850:8,Plugin,Plugin,8,https://psicode.org,https://github.com/psi4/psi4/pull/850,1,['Plugin'],['Plugin']
Modifiability,"STATIC, SHARED, MODULE . SHARED is the usual linux `.so` for linking, while MODULE is the dl_open style of a Py module. Up until this merged PR we were doing SHARED. ### SHARED; * links `libpython.so` into psi4's `core.*.so` -- this is new in the revamped pb11 add_pybind11_module that calls [Python_add_library](https://gitlab.kitware.com/cmake/cmake/-/blob/master/Modules/FindPython/Support.cmake#L3306-3313); * sets `DT_SONAME` on the `core.*.so`. This shows up as `Library soname` below in `readelf -d` of core.*.so. *This is important* b/c w/o this set, the full path to `core.*.so` gets linked into consumers like plugins, rather than just the library name. [trouble](https://stackoverflow.com/questions/27261288/cmake-linking-shared-c-object-from-externalproject-produces-binaries-with-rel); * designed for ordinary library linking like how the plugins are using symbols from psi4. The https://github.com/psi4/psi4/blob/master/psi4/psi4Config.cmake.in#L141 does the linking of core.*.so to the plugins. ### MODULE; * does *not* link `libpython.so` into psi4; * does *not* set `DT_SONAME` on psi4. that's ok for the local plugins where the full path that's baked in is the same as the RPATH+SONAME resolved through `ld`, but this breaks down during the v2rdm conda build. I've been unable to force a `DT_SONAME` entry onto a `MODULE` library; * one can perhaps get away with it (no errors; current state of `master`), but it's [advised not to link to a MODULE](https://stackoverflow.com/a/4968940). ### printouts from SHARED; ```; >>> readelf -d stage/lib/psi4/core.cpython-39-x86_64-linux-gnu.so . Dynamic section at offset 0x21a4aa0 contains 40 entries:; Tag Type Name/Value; 0x0000000000000001 (NEEDED) Shared library: [libpython3.9.so.1.0]; 0x0000000000000001 (NEEDED) Shared library: [libgg.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libxc.so.9]; 0x0000000000000001 (NEEDED) Shared library: [libint2.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libdl.so.2]; 0x0000000000000",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188:1091,plugin,plugins,1091,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188,1,['plugin'],['plugins']
Modifiability,"SX_GUESS` can be used in conjunction with either the `DIRECT` or `DFDIRJ+LINK` options for `SCF_TYPE` . When enabled, the calculation will first converge the SCF on a small `COSX` grid, followed by executing SCF using the specified `SCF_TYPE`. Another way of framing it, is that `SCF_COSX_GUESS` is similar to `DF_SCF_GUESS`, but uses `COSX` instead of `DFJK` for the initial SCF convergence process. To support `SCF_COSX_GUESS`, some keyword functionality has been expanded. `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` can be used to control the `COSX` grid size for the `SCF_COSX_GUESS`, with the grid in this context defaulting to (20/50). `COSX_MAXITER_FINAL` can be used to control the number of `DIRECT`/`DFDIRJ+LINK` iterations to run after the `COSX` guess, defaulting to 2 in this context. Note that the grid for `SCF_COSX_GUESS` uses different defaults compared to the usual initial grid for `DFDIRJ+COSX` runs. This PR also adds a fair bit of cleanup/QoL changes, as follows:; - The `early_screening` variable in `scf_iterator.py`, and all related quantities, have been renamed for clarity.; - `DFDIRJ+LINK` can now be used in conjunction with `DF_SCF_GUESS`.; - Tests have been expanded. ## User API & Changelog headlines; <!-- A bullet-point format description of how this PR affects the user.; This is destined for the release notes. May be empty. -->; - [X] Adds the `SCF_COSX_GUESS` input keyword to Psi4, usable with `SCF_TYPE=DIRECT` and `SCF_TYPE=DFDIRJ+LINK`. When enabled, the calculation will first converge the SCF on a small `COSX` grid, and then execute `COSX_MAXITER_FINAL` number of SCF iterations using the specified `SCF_TYPE`. The grid used by the COSX guess can be controlled by the `COSX_RADIAL_POINTS_INITIAL` and `COSX_SPHERICAL_POINTS_INITIAL` keywords.; - [X] Expands the `DF_SCF_GUESS` keyword to work with `SCF_TYPE=DFDIRJ+LINK`. ## Dev notes & details; <!-- A bullet-point format description of what this PR does ""at a glance.""; Target audie",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3158:1836,variab,variable,1836,https://psicode.org,https://github.com/psi4/psi4/pull/3158,1,['variab'],['variable']
Modifiability,S_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAPACK_LIBS openblas); + ; + #-------------------------------------------------------------------------------; # MKL; ; set(MKL_BLAS_INCLUDE_PATH_SUFFIXES); [sfux@develop01 psi4]$ ls; cdash CMakeAddOpenBLAS.patch _conda_vers.py doc LICENSE plugins README.md _setup.py; cmake CMakeLists.txt CTestConfig.cmake external media psi4 samples tests; [sfux@develop01 psi4_]$ patch -p1 --verbose < CMakeAddOpenBLAS.patch ; Hmm... Looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; |*** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; --------------------------; Patching file cmake/math/ConfigMath.cmake using Plan A...; Hunk #1 succeeded at 14.; Hmm... The next patch looks like a new-style context diff to me...; The text leading up to this was:; --------------------------; |diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; |*** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; |--- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; --------------------------; Patching file cmake/math/MathLibs.cmake using Plan A...; Hunk #1 succeeded at 73.; done; [sfux@develop01 psi4]$; ```; The code (using OpenBLAS instead of MKL) compiles without error but fails in an installation step:. ```; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/__init__.py; -- Installing: /scratch/appssf/psi4/build/stage/cluster/apps/psi4/1.1a1/x86_64/lib//psi4/driver/util/fi,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:2703,Config,ConfigMath,2703,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,1,['Config'],['ConfigMath']
Modifiability,"Search the code for units. Modify as needed accordint to principles below. Don't forget to extend table lines if needed; - [x] `[Eh]` _may_ go unlabeled, but not recommended (future pass).; - [x] If more than one units is printed or unit is _not_ `[Eh]` it must have a label.; - [x] `[Eh]`, not `[Ha]` or `[H]`; - [x] all units in square brackets; - [x] use parentheses if needed and space for multiplication, e.g., `[kJ/(mol K)]`",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/357:91,extend,extend,91,https://psicode.org,https://github.com/psi4/psi4/issues/357,1,['extend'],['extend']
Modifiability,"Sebastian, my apologies for the forthcoming long response, which probably goes far beyond the answer you need. However, this question seems common enough that I wanted to write a thorough response that we could then link to in the future when it inevitably comes up again. That being said a disclaimer of sorts is in order. The comments herein are meant to be helpful to a wide reaching audience and many may not be directly applicable to you. Additionally, the comments should not be thought of as targeting you (with the obvious exception being that this post will tell you how to actually print). Since the decision to prepare/adapt Psi4 for/to MPI parallelism, it has become essential to micromanage resources (presently circularly defined as any aspect of normal program execution that the program may want to control, including, but not limited to: printing, memory, disk, threads, MPI processes) in a more controlled manner than before. One of these resources is the output. Under the MPI paradigm, each process generates its own output and Psi4 is hence responsible for ensuring that the output is logged in a logical manner (i.e. you don't get the same output, once for each processes, in the same file, in an incomprehensible mess). . In a traditional object-oriented coding paradigm, each problem is handled by a dedicated object, and the problem of printing is no exception. Therefore, within Psi4 we have created the `psi::PsiOutStream` class, of which `psi::outfile` is an instance. Of particular importance `psi::outfile` is an instance that always redirects output to where the user asked. To use `psi::outfile` in your code, ensure `#include ""psi4-dec.h""` is at the top of your file and then proceed in one of two manners: :. ``` c++; #include ""psi4-dec.h""; //Option 1 (takes the same format strings as C's printf function); psi::outfile->Printf(<format_string>,<Message>);. //Option 2 (the C++ way); (*psi::outfile)<<""My Message in C++ form""<<std::endl;; ```. The choice of which of ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/77#issuecomment-83041867:630,adapt,adapt,630,https://psicode.org,https://github.com/psi4/psi4/issues/77#issuecomment-83041867,1,['adapt'],['adapt']
Modifiability,"Sebastian,. Using 'set guess sad' I get:. Final Occupation by Irrep:; Ag B1g B2g B3g Au B1u B2u B3u; DOCC [ 3, 0, 0, 0, 0, 2, 1, 1 ]; Energy converged.; @RHF Final Energy: -107.49356712900621. But I agree, your case with default guess is quite worrying. Best wishes,. Alexander. On Thu, Nov 6, 2014 at 11:29 AM, Sebastian Wouters <notifications@github.com. > wrote:; > ; > There are many ways to converge RHF, and sometimes you can get stuck in a; > local minmum, that's true. However, the following case is quite striking.; > ; > ## My input:; > ; > molecule N2 {; > N 0.000000000000 0.000000000000 0.000000000000; > N 0.000000000000 0.000000000000 2.060000000000; > units au; > }; > ; > plugin_load(""./mointegrals.so""); > ; > set basis sto-3g; > set mointegrals print 1; > set reference rhf; > ; > scf(); > plugin(""mointegrals.so""); > ; > I use the MO integrals for a subsequent FCI calculation (in a self-written; > program). When I start from the RHF determinant given by Psi4:; > ; > DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; > Total Energy = -106.7540443603229363; > ; > the FCI energy converges to the wrong answer. When I look at the energies; > from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in; > the MO single-particle basis from Psi4, there is a determinant (in that MO; > basis!) with an energy which is lower: E = -107.488903265175 . The FCI; > energy then does converge to the right answer when this determinant is; > given as input for Davidson iterations.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/63.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63#issuecomment-62010043:809,plugin,plugin,809,https://psicode.org,https://github.com/psi4/psi4/issues/63#issuecomment-62010043,1,['plugin'],['plugin']
Modifiability,"See conversation at https://github.com/psi4/psi4public/issues/214 . If an experienced psi4 developer checks out a plugin from the binary, he can guess what modifications the Makefile will need and proceed. If an inexperience user checks out a plugin from the binary, he may not even have a compiler. So there needs to be at least one easy and documented way to get the plugin working. This ticket is to make that happen.; - [x] Implement the Makefile template reference in https://github.com/psi4/psi4/issues/214#issuecomment-172256746 . There's a cmake variable `-DENABLE_CONDA_DEST` that you can use to tell c-side if it's a conda build.; - [ ] Use that same cmake variable to print to the user a link to the manual on compiling plugins from conda; - [ ] at that manual page, talk about; - conda env w/`psi4`, `gcc`, `openblas`; - must _activate_ conda env; - register plugins at https://github.com/psi4/psi4public/blob/master/lib/python/aliases.py#L46; - place plugins a la https://github.com/psi4/psi4meta/blob/master/conda-recipes/csx4psi/build.sh. I'm not sure myself how `PYTHONPATH`/`PSIPATH` is picking up on where plugins located. Conda metapackage is still under assembly, so don't do too detailed docs yet. The first two bullets are ready, though.; - [ ] in doc/sphinxman/plugins.rst, review and update the available plugin flavors; - [ ] in doc/sphinxman/plugins.rst, remove reference to needing `--with-plugins`, as everything is fPIC these days",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/216:114,plugin,plugin,114,https://psicode.org,https://github.com/psi4/psi4/issues/216,13,"['plugin', 'variab']","['plugin', 'plugins', 'variable']"
Modifiability,Seems to be used to define `PSI_VERSION` in `cmake/ConfigVersion.cmake` @loriab is `PSI_VERSION` redefined somewhere else afterwards or is that an unused variable?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/271#issuecomment-187426230:51,Config,ConfigVersion,51,https://psicode.org,https://github.com/psi4/psi4/issues/271#issuecomment-187426230,2,"['Config', 'variab']","['ConfigVersion', 'variable']"
Modifiability,"Separate J and K Build Capabilities, DirectDFJ Algorithm, and Refactor of LinK",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2543:62,Refactor,Refactor,62,https://psicode.org,https://github.com/psi4/psi4/pull/2543,1,['Refactor'],['Refactor']
Modifiability,"Setting TargetLAPACK_DIR (as you suggested) didn't seem to help: it still couldn't find MathOpenMP. However, adding; `-DOpenMP_LIBRARY_DIRS=${OpenMP_LIBRARY_DIRS}` to external/downstream/gpu_dfcc seems to do the trick and gpu_dfcc builds OK (within the psi4 tree). It does also need CMAKE_CUDA_COMPILER and CUDA_TOOLKIT_ROOT_DIR defining before it's happy (rather than having defaults). I added them to CMakeCache.txt but presumably they'd work if added to the original cmake command. Once built, it fails when trying to install gpu_dfcc within the tree:; ```; [ 64%] Performing build step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; [ 70%] Performing install step for 'gpu_dfcc_external'; [100%] Built target gpu_dfcc; Install the project...; -- Install configuration: ""Release""; -- Up-to-date: /home/laz/build/psi4/psi4/objdir/stage/usr/local/psi4/lib/gpu_dfcc/gpu_dfcc.so; CMake Error at cmake_install.cmake:61 (file):; file INSTALL cannot find; ""/home/laz/build/psi4/psi4/objdir/external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external/__init__.py"". Makefile:84: recipe for target 'install' failed; make[3]: *** [install] Error 1; external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/build.make:73: recipe for target 'external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install' failed; make[2]: *** [external/downstream/gpu_dfcc/gpu_dfcc_external-prefix/src/gpu_dfcc_external-stamp/gpu_dfcc_external-install] Error 2; CMakeFiles/Makefile2:1419: recipe for target 'external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all' failed; make[1]: *** [external/downstream/gpu_dfcc/CMakeFiles/gpu_dfcc_external.dir/all] Error 2; Makefile:140: recipe for target 'all' failed; make: *** [all] Error 2; ```; It looks like __init__.py isn't being generated from __init__.py.in for some reason. It _could_ be because I've been hacking stuff about: I'll try with a fresh tree (modified with your additions) tomorrow",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634:766,config,configuration,766,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400483634,1,['config'],['configuration']
Modifiability,"Several downstream codes do not recognize the new SCF types `mem_DF` and `disk_DF` (introduced in #961) when set directly within the input file. I've attached [a tarball](https://github.com/psi4/psi4/files/2002517/eff-scftype-df.tar.gz) containing several such tests, adapted directly from the existing Psi4 test suite, which attempt to highlight these problems. I've also attached the summary file (from the tarball) separately for easy web viewing [here](https://github.com/psi4/psi4/files/2002535/summary.txt). Additionally worth note is that a few of these downstream codes fail gracefully (e.g., FNOCC for `scf_type mem_df`, as it assumes a disk algorithm) with helpful error messages, but others do not (e.g., CISD energies fail with PSIO errors and DLDF+D09 gradients segfault). However, if failure is unavoidable, we should probably at least be verbose in the error message.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1021:268,adapt,adapted,268,https://psicode.org,https://github.com/psi4/psi4/issues/1021,1,['adapt'],['adapted']
Modifiability,Should I be concerned about and fix these:; ```; c:\projects\psi4\psi4\src\psi4\ccdensity\ael.cc(90): warning C4700: uninitialized local variable 'k' used [C:\projects\psi4\build\psi4-core-prefix\src\psi4-core-build\src\psi4\ccdensity\ccdensity.vcxproj] [C:\projects\psi4\build\psi4-core.vcxproj]; c:\projects\psi4\psi4\src\psi4\ccenergy\ccenergy.cc(314): warning C4700: uninitialized local variable 'last_energy' used [C:\projects\psi4\build\psi4-core-prefix\src\psi4-core-build\src\psi4\ccenergy\ccenergy.vcxproj] [C:\projects\psi4\build\psi4-core.vcxproj]; ```,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1067#issuecomment-403474232:137,variab,variable,137,https://psicode.org,https://github.com/psi4/psi4/pull/1067#issuecomment-403474232,2,['variab'],['variable']
Modifiability,"Should be doable: in ERKALE I run an eigendecomposition of a 100x100 random matrix in sequential mode and repeat the calculation in a parallel OpenMP section. If the decompositions of the individual threads don’t match the sequential one, then LAPACK is not thread safe. Susi Lehtola; Sent from my phone so excuse my brevity. On 20 Jan 2019, at 15.03, Michael Banck <notifications@github.com<mailto:notifications@github.com>> wrote:. Couldn't you have a configure-time check for this (in case it can be broken down to a very small testcase), same as is usual in autoconf-world?. —; You are receiving this because you commented.; Reply to this email directly, view it on GitHub<https://github.com/psi4/psi4/issues/1461#issuecomment-455864865>, or mute the thread<https://github.com/notifications/unsubscribe-auth/AArOJ2QSkRaIyanSHwFBRQyrKH2-9W1_ks5vFGkggaJpZM4ZxGFP>.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306:454,config,configure-time,454,https://psicode.org,https://github.com/psi4/psi4/issues/1461#issuecomment-455865306,1,['config'],['configure-time']
Modifiability,"Since Psi4:; * is primarily a shared library / Python module (to C++/Py folks, respectively) rather than an executable (`bin/psi4` is light script loading Python module);; * is not necessarily at the top of the call stack, and we've heard from projects who would like to import us;; * is benefiting from the non-attaching and permissive licenses of numerous external projects to supplement Psi4's capabilities, and we want to return the favor,. **we plan to change our license from GPL-2.0+ to LGPL-3.0+, effective by the the 1.1 release.**. EDIT: now targeting LGPL-3.0, not +, with PR psi4/psi4#690. The current and historical core developers have signed off on this. The historical peripheral developers are discussing this without any initial objections. We now want to get feedback from the GitHub contributor, user, and packaging community (or anyone not in e-mail communication with the core developers). So please reply with any concerns, constraints, preferences, etc. ##### Dependencies licensing situation; * required library dependencies (current & anticipated): PSFL, LGPL-3.0+, BSD-3-Clause-LBNL, BSD-3-Clause ; * optional library dependencies: BSD-2-Clause, BSD-3-Clause, GPL-2.0+, LGPL-3.0+; * optional executable dependencies: GPL-1.0+, Custom; * Psi4 plugins: GPL-2.0+, GPL-3.0+; * conda-wise, we'll build an alternate conda package that doesn't link any GPL libraries or plugins. ##### Queries; * Psi4 is a Python module and hence a dynamic library. I don't know right off how to even build a `psi4.a`. With that in mind, does anyone care about license terms for static linking?; * Any concrete problems that would be solved by a permissive license instead of LGPL?; * Anyone care about sublicensing?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688:1269,plugin,plugins,1269,https://psicode.org,https://github.com/psi4/psi4/issues/688,2,['plugin'],['plugins']
Modifiability,"Since `cppe` has its own Python interface now (which it did not when I started this PR), I guess there is no reason to interface with psi4 on the C++ layer?. I guess it would be much simpler wrt maintenance of the code to refactor everything and use the `cppe` Python interface directly. What do you think, @loriab, @dgasmith, @robertodr ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596:222,refactor,refactor,222,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-498431596,1,['refactor'],['refactor']
Modifiability,"Since nobody answered this yet, let me do so and bump this thread... You are right Lori, at present the s^2 variants are always computed, and the s^inf variants are computed in addition if the respective variables are True. As the new addition makes it possible to run complete SAPT0 without the s^2 approximation, it definitely makes sense to create a route that does exactly that, skipping the s^2 calculations altogether. However, it probably needs a new name (`energy('sapt0-sinf')` or similar) so the meaning of the standard and widely used `energy('sapt0')` is unchanged. It might also make sense to define new optional routes for higher-order SAPT that combine SAPT0-level s^inf exchange corrections with higher-level s^2 exchange corrections. I don't have a good name for such routes though: `energy('sapt2-sinf')` is not a good idea because it's not _all_ s^inf.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052:204,variab,variables,204,https://psicode.org,https://github.com/psi4/psi4/pull/1490#issuecomment-465308052,1,['variab'],['variables']
Modifiability,Single cpu job fails in `qcengine/config.py` with `KeyError`,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548:34,config,config,34,https://psicode.org,https://github.com/psi4/psi4/issues/2548,1,['config'],['config']
Modifiability,Small Refactor of Exception Call Stack Size,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3179:6,Refactor,Refactor,6,https://psicode.org,https://github.com/psi4/psi4/pull/3179,1,['Refactor'],['Refactor']
Modifiability,"So I now realize something - we may want to apply some of the benchmarking changes made in this PR to DFJCOSK, as well. It will increase the size of the PR, but the benchmarking changes in this PR currently only extend to DirectJK at the moment. Since DFJCOSK has two methods that it separately benchmarks, it will require a bit of retooling regarding some of the internals of the benchmarking framework. It should not have a significant impact on test_erisieve, however. Thoughts?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2547#issuecomment-1152700048:212,extend,extend,212,https://psicode.org,https://github.com/psi4/psi4/pull/2547#issuecomment-1152700048,1,['extend'],['extend']
Modifiability,"So I was thinking about getting rid of `""component""` too. The difference between something like ""MP2"" and ""B2PLYP"" is that while there's a name for the SCF component of MP2 (it's HF), there's no such thing for the SCF part of B2PLYP. Also, before components were introduced, the keys in the `VARH` dict had to be valid methods, having a check against component gets around this issue. I think a much cleaner interface may be to rework how the extrapolation functions (`corl_xtpl_helgaker_2` etc.) work. Rather than passing in an energy/gradient/Hessian, we could pass in the `wfn` + the variable to extrapolate, and instead of trying to shoehorn the dft extrapolation into the existing interface, it could be neatly contained in a single extrapolation function. The only issue I see with this is that the printing of the CBS stages would have to move from `cbs()` into the extrapolation function itself. This is perhaps better discussed once DDD is in?. ------. I have made changes to the duplication detection, merging the two loops. Instead of a simple counter, it's now an array of job-indices, with the first element being the highest priority (ie the one with the matching wfn). Also, @hokru your ""requested"" syntax now works, see the added test which combines components arbitrarily. `ctest -L cbs` passes.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657:587,variab,variable,587,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-973871657,1,['variab'],['variable']
Modifiability,"So I'm not a CMake expert, and most of what I know has been gleaned in the last six months just by reading the docs and listserve posts over and over again. CMake _does_ have a set of best practices in mind, but they don't (to my impression) do a good job of telling you what those practices are. And CMake is so flexible that it's easy to just ignore them. But insofar as they give explicit guidance, I've tried to follow it. So a few of my thoughts:. * Targets are to objects (OOP) as cmakevars (e.g., `${HDF5_LIBRARIES}`) are to data arrays. `Find<module>` or `<module>Config` that return <module>_LIBRARIES, _LIBRARY, _INCLUDE_DIR, _INCULDE_DIRS, _DEFINITIONS, _VERSION, _EXECUTABE, etc. are easy to relate to and not so hard to stick into `target_include_directories()`, `target_link_libraries()`, `target_compile_definitions()`, etc. in the consuming project. But it's so much nicer if the <module> author knows what his dependencies are, where his include directories are, whether they need to be used just to compile <module> or whether they need to be used by a consuming project, what compile definitions should be carried along. If all that gets packaged up in a target, then the consuming project need only `target_link_libraries(<tgt> <module>)` and not worry about the other stuff. * CMake tries to be too smart. The items that get put into `target_link_libraries()`, it (pretty reasonably) treats according to the rules of linking libraries and makes bold to rearrange them. Only problem is that when we put linker directives (start-group, as-needed, etc.) and especially when they get repeated in the grand final linking, CMake optimizes them away. So `-la -Wl,--whole-archive -lb, -Wl,--no-whole-archive -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` merrily becomes `-la -lb, -lc -Wl,--whole-archive -ld -Wl,--no-whole-archive` which is Bad Indeed. However, CMake promises (somewhere) to keep target link libraries properties intact and not to optimize across them. * I think ht",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/591#issuecomment-276178223:313,flexible,flexible,313,https://psicode.org,https://github.com/psi4/psi4/pull/591#issuecomment-276178223,2,"['Config', 'flexible']","['Config', 'flexible']"
Modifiability,So if I'm understanding you correctly basically the only thing you want from this PR is the `CMakeLists.txt` factorization and the (then) one-line change of ensuring `CMAKE_PREFIX_PATH` is passed to the plugins?,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563#issuecomment-274523303:203,plugin,plugins,203,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-274523303,1,['plugin'],['plugins']
Modifiability,"So it probably is something from my refactoring, which is strange because I didn't touch any of the parallelization lines... I'll look into this, but it might take me some time to get set up on the new cluster.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2192#issuecomment-861465776:36,refactor,refactoring,36,https://psicode.org,https://github.com/psi4/psi4/issues/2192#issuecomment-861465776,1,['refactor'],['refactoring']
Modifiability,So the closest thing we have to precedent on this is the csx4psi plugin (which has nothing to do with dmrg) https://anaconda.org/psi4/csx4psi . More later.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-176961114:65,plugin,plugin,65,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176961114,1,['plugin'],['plugin']
Modifiability,"So the dump file just contains the CI vector coefficients and bitstrings. The problem is that due to finite numerical precision the ordering of the vectors may change, as several configurations may have the same coefficient. I can probably write a check for that but it'll easily be O(N^2) so I'll have to restrict to rather small calculations.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/700#issuecomment-301224703:179,config,configurations,179,https://psicode.org,https://github.com/psi4/psi4/pull/700#issuecomment-301224703,1,['config'],['configurations']
Modifiability,"So the main control for finding non-distributed things (basis sets, plugins, etc.) in psi4 is the `PSIPATH` environment variable (http://psicode.org/psi4manual/master/external.html#envvar-PSIPATH) that (for python things) internally prepends to `sys.path`. How to handle user-enabled non-distributed things in a certain place (as conda needs) without `PSIPATH` (or with that dir standardly appended to `PSIPATH`) hasn't really been thought through. (Though now is the time, for you and others that are non-standard at present.) I don't think `share/psi4` is right because that dir is supposed to be platform independent, so `.so` not suitable. Hence I tentatively selected `psi4aux`. I've done a little internet searching but not much inspection of unpacked conda packages seeking a precedent.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/229#issuecomment-176983588:68,plugin,plugins,68,https://psicode.org,https://github.com/psi4/psi4/issues/229#issuecomment-176983588,2,"['plugin', 'variab']","['plugins', 'variable']"
Modifiability,"So, next error; ```; CMake Warning (dev) at cmake/FindPythonLibsNew.cmake:59 (find_package):; Policy CMP0148 is not set: The FindPythonInterp and FindPythonLibs modules; are removed. Run ""cmake --help-policy CMP0148"" for policy details. Use; the cmake_policy command to set the policy and suppress this warning.; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); This warning is for project developers. Use -Wno-dev to suppress it.; -- Found PythonInterp: /usr/bin/python3 (found suitable version ""3.12"", minimum required is ""3.5"") ; CMake Error at cmake/FindPythonLibsNew.cmake:94 (message):; Python config failure:; Traceback (most recent call last):; File ""<string>"", line 1, in <module>; ModuleNotFoundError: No module named 'distutils'; Call Stack (most recent call first):; CMakeLists.txt:168 (find_package); -- Configuring incomplete, errors occurred!; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684:624,config,config,624,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1676476684,2,"['Config', 'config']","['Configuring', 'config']"
Modifiability,"Some ""general direction"" comments:. 1. I can't identify what the ""Ways to Add Code"" page is supposed to accomplish. There's nothing unifying these sections together, and even individual sections seem disjointed to me. The easier and more rapid development section feels like one part expositing historical developments and one part trying to sell the new developer on the transition to Python. The Psi4Numpy and plugins sections read like one part overviewing the process of going from equations to code and again like one part trying to sell the new developer on NumPy. The ""incorporating code into Psi4"" section reads like a guide on parceling code into C++ parts and Python parts. 2. Are you expecting the reader to already know about dual-language software and OpenMP? The current documentation is written as if you are, but I didn't know about the first one until after I had started working in Psi, and I still only have a hazy idea on the second. 3. I fear that the strategy of ""mostly the vanilla contributor covenant, but with small additions to emphasize that we value inexperienced devs"" will lead to those small additions not being noticed by the inexperienced devs. When I see something as general as, ""to help us maintain this vibrant; and productive atmosphere,"" my immediate thought is that this is administrative babble and only worth skimming. Having read the covenant, I cannot identify the small additions in there. Might I suggest making an explicit section on new developers and making it very specific to Psi? Something like:; _""The continued maintenance and growth of Psi depends on getting, training, and retaining new developers. This brings in prospective developers with widely varying levels of programming experience, including people learning the basics of theory and programming in quantum chemistry, people learning the basics of C++ or Python, and even people learning programming in general. We accept all this and are committed to training new developers to contrib",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745:412,plugin,plugins,412,https://psicode.org,https://github.com/psi4/psi4/pull/1274#issuecomment-435668745,1,['plugin'],['plugins']
Modifiability,"Some comments for posterity:; * The Coulomb terms also come from the derivatives of two-electron integrals. You can (and for efficiency should) contract the TEI derivatives against the 1RDM to get the Coulomb terms. Conceptually, this is the interaction of an orbital with the mean field of all orbitals. It's not a pure one-electron interaction, but it's close enough.; * For purposes of thinking about the implementation, this issue is two very different ones: (1) exposing the existing pieces of the SCF gradient and (2) further decomposing those pieces into per-orbital contributions, where applicable. (1) is as easy as setting array variables on the wavefunction. Per-orbital contributions aren't even computed, as they shouldn't be in an efficient code, so (2) is non-trivial.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091:639,variab,variables,639,https://psicode.org,https://github.com/psi4/psi4/issues/2130#issuecomment-797125091,1,['variab'],['variables']
Modifiability,"Some of the MRCC-related tests fail to run, for reasons unrelated to the actual MRCC interface as far as I can tell.; ```; (p4env) gytibor@CRD-CSLW-1:~/qcta$ pytest -m mrcc /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/; ============================================================================================================ test session starts ============================================================================================================; platform linux -- Python 3.9.12, pytest-7.1.2, pluggy-1.0.0; rootdir: /home/gytibor/miniconda3/envs/p4env/lib/python3.9/site-packages/psi4, configfile: pytest.ini; collected 4121 items / 4114 deselected / 7 selected. ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_addons.py . [ 14%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py F [ 28%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py F [ 42%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt/test_input.py . [ 57%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsdt_q_/test_input.py . [ 71%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/optfreq/test_input.py F [ 85%]; ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/rohf_ccsdt_q_/test_input.py . [100%]; .; <snip>; .; ========================================================================================================== short test summary info ==========================================================================================================; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/test_composite.py::test_allen_focal_point - NameError: name 'psi4' is not defined; FAILED ../miniconda3/envs/p4env/lib/python3.9/site-packages/psi4/tests/mrcc/ccsd_t_/test_input.py::test_mrcc_ccsd_t_ - AssertionError: Using the `local_options` keyword argument is deprecated in fa",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2634:629,config,configfile,629,https://psicode.org,https://github.com/psi4/psi4/issues/2634,1,['config'],['configfile']
Modifiability,"Sometimes ultimate convergence is more important than any maxiter variable; - particularly for speedy methods or initial optimizations. If an; optimization fails in internal coordinates, then one might want the; optimizer to try Cartesians, automatically. The idea of a 'dynamic level'; (whatever its final name or design) is that a user could easily elect the; degree to which the optimizer should try different things to reach; convergence. On Tue, Nov 6, 2018 at 4:47 PM Lori A. Burns <notifications@github.com>; wrote:. > PRs psi-rking/optking#24 <https://github.com/psi-rking/optking/pull/24>; > and #1335 <https://github.com/psi4/psi4/pull/1335> are a pair. Together,; > they get most optimizations working for Psi. In particular have working:; >; > - ordinary, opt-is-full job optimizations; > - collecting all the psivars so psi can read them in. basically,; > collecting enough to generate a skeleton (mol, basis, psivars) that can be; > passed back from psi4.optimize(..., return_wfn=True); > - inlining optking's logging output into the psi4 output file; > - resetting psi4's options on either side of the; > optking.run_json_dict() call. The trouble was that the psi4-s imported; > by optking were clearing and setting options (as is proper for indep json; > runs) such that the calling psi4 didn't have its original options in; > globals upon optking termination; > - starting to catch optking errors (str in json) and re-raising them; > as psi4 errors.; >; > Yes, that AlgError vs OptError for exceeding geom_maxiter really stumped; > me for a while b/c I only got the final error (""dynamic level exceeded""); > and I thought it was behaving differently btwn direct optking and psi4; > initiated runs. To me it seems clear that if geom_maxiter is exceeded, then; > optimizer quits directly (though perhaps that's clearer when geom_maxiter=2; > than =200).; >; > @psi-rking <https://github.com/psi-rking> @AlexHeide; > <https://github.com/AlexHeide>; >; > —; > You are receiving this becau",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061:66,variab,variable,66,https://psicode.org,https://github.com/psi4/psi4/pull/1335#issuecomment-436668061,1,['variab'],['variable']
Modifiability,"Sorry for the confusion. What you're doing with PCMSolver is working just fine. What broke down was me not realizing that the `1.1.2` tag had what I needed, and I didn't need `HEAD`. Below is what I wrote to someone recently. External projects for psi4 can choose one of the below (or propose a new scheme), and PCMSolver is doing (2). If the below seems clear, I'll explicitly add it to the wiki. ## External Project Versioning (choose one); 1. Tag a release “0.2”, “v0.2”, or whatever. Let me know and I’ll (i) build the conda package and (ii) bump the `Add_ExternalProject` tag (for non-plugins). Repeat in a few months with “0.3”, etc. This way is handy if you want to settle on stable commits while possibly breaking the repo in interim commits. You may be asked to bump the tag after resolving psi4+externalproj interface or build issues. If you move the tag to a later commit, you'll have to let me know so I rebuild the conda package with the same version but a later build number. This is what CheMPS2 and PCMSolver do.; 2. Tag a release “0.2”, and I’ll (i) tell psinet to do nightly builds that increment micro on each git commit so versions will be ""tag.micro"" (e.g., 0.2.43) and (ii) remove git tag from `Add_ExternalProject` )for non-plugins). When you’re ready for 0.3, just make the new tag, no communication with me necessary. Strongly recommended not to mix light and annotated tags; the latter are always preferred; the former are what you get if you go through the github website tag-making interface. If the repo breaks such that “make” or any “make tests” you devise break, then no package will get uploaded, but otherwise the most recent will always be available. This is what Psi4 itself does.; 3. hybrid– do 2. but have the version that ships with the psi4 binary be pinned to a certain stable build unless user deliberately installs another.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/409#issuecomment-225993854:590,plugin,plugins,590,https://psicode.org,https://github.com/psi4/psi4/pull/409#issuecomment-225993854,2,['plugin'],['plugins']
Modifiability,"Sorry, @hokru. I've been trying to build Francesco and Shuhe's [DSRG-PT2 gradient plugin](https://github.com/ustcwsh/Shuhe_Project) to test a theory. (In multiple senses of ""theory."") Shuhe's code was written for Python 2, so Psi rightly complains about invalid syntax. ```; Traceback (most recent call last):; File ""/Users/jonathonmisiewicz/psi4/objdir/stage/bin/psi4"", line 331, in <module>; exec(content); File ""<string>"", line 19, in <module>. File ""./../dsrgpt2_plug/__init__.py"", line 45; print ""imported so file: "", sofile; ^; SyntaxError: Missing parentheses in call to 'print'. Did you mean print(""imported so file: "", sofile)?; ```. The error message that Holger's message extractor gives me is less readable. ```; !----------------------------------------------------------------------------------!; ! !; ! "", sofile !; ! , ^ !; ! ,SyntaxError: Missing parentheses in call to 'print'. Did you mean !; ! print(""imported so file: "", sofile)? !; ! !; !----------------------------------------------------------------------------------!; ```. The error extractor should be patched to just report the SyntaxError.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1920:82,plugin,plugin,82,https://psicode.org,https://github.com/psi4/psi4/issues/1920,1,['plugin'],['plugin']
Modifiability,"Sorry, I don't have the bandwidth to build it right now, but I think [this line](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/manager.cc#L2264) could be responsible for the bad memory estimate and, perhaps, that's causing problems later on. The variables `aocc2AA` and `nvir2AA` are declared `int`, so their product will be computed as an `int`, overflow, and then that overflowed entity is cast to `double`. A quick fix for that would be to declare the various dimensioning variables as `size_t`. Hopefully that'll fix the issue 🤞",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1764#issuecomment-561262601:261,variab,variables,261,https://psicode.org,https://github.com/psi4/psi4/issues/1764#issuecomment-561262601,2,['variab'],['variables']
Modifiability,"Sorry, I missed your last question, @JonathonMisiewicz. Correct, there [is a bug in MKL](https://community.intel.com/t5/Intel-oneAPI-Math-Kernel-Library/Memory-data-race-problems-in-DGETRI/m-p/1313691) that is being fixed, so all `general_invert` calls are potentially vulnerable. I will note that many of the `general_invert` calls in the code give the correct answer still (including the one fixed in this PR, for many system sizes), as does the standalone code I used to report the issue. It looks like some kind of an uninitialized variable somewhere in Intel's kernels so it's likely to be context-dependent whether the right answer is returned. I'm pretty sure it's been present for at least the last few versions and we only just noticed it, so I suspect it's not that pervasive. Regardless, we need to update our MKL dependency as soon as the fix is published.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761:536,variab,variable,536,https://psicode.org,https://github.com/psi4/psi4/pull/2283#issuecomment-926710761,1,['variab'],['variable']
Modifiability,"Status update on this, including developments from half an hour ago. Numerical tests indicate the difference in reaction energies between the current DF scheme and the new one are negligible. The Excel file is attached if anybody wants to look over the numbers themselves. @ssh2 and I are agreed that between that and some additional theoretical points, we'll just switch the density fitting scheme to fix Point 2. In the new scheme, the cumulant gets contracted against RIFIT integrals as before, and the _entire_ rest of the 2RDM gets contracted against JKFIT integrals. [df_dcft_comparison.xlsx](https://github.com/psi4/psi4/files/3023032/df_dcft_comparison.xlsx). Point 1 is trickier. I've spoken with @jturney about DF gradients in Psi. Although `deriv.cc` does a check to see if the wavefunction is density fitted in the gradient code, it isn't for density fitted gradients but to check whether necessary tensors exist on disk or as member variables. As far as I know, every DF gradient in Psi runs through its own module. DF-MP2 gradients have `dfmp2`, DF-SCF has `scfgrad`, and Bozkaya has `dfocc`. This will require some attention, but likely won't get it until after ACS Orlando.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331:946,variab,variables,946,https://psicode.org,https://github.com/psi4/psi4/issues/1579#issuecomment-478019331,1,['variab'],['variables']
Modifiability,"Stepping through, it seems it crashes in `DFHelper::transform()` when calling in `identify_order()`, in particular in this line:. ```; 1521	 op = (!(std::get<0>(transf_[*itr]).compare(str)) ? 1 : op);; ```. segfault seems to happen in C++ standard lib at. ```; /usr/include/c++/8/bits/stl_tree.h:1888; 1888		if (!_M_impl._M_key_compare(_S_key(__x), __k)); ```. This is C++ 8.2.0-13 (the -13 being Debian's revision). Will try to dig deeper. It seems the iterator `itr` gets bogus after the `itr--` on line 1537:. ```; 1536	 needs.erase(itr);; (gdb) ; 1537	 itr--;; (gdb) p itr; $124 = ""Aaa""; (gdb) n; 1519	 for (itr = needs.begin(), end = needs.end(); itr != end; ++itr) {; (gdb) p itr; $125 = <error: Cannot access memory at address 0x701040707070707>; (gdb) n; 1521	 op = (!(std::get<0>(transf_[*itr]).compare(str)) ? 1 : op);; (gdb) p itr; $126 = <error reading variable: Cannot access memory at address 0x207070007060505>; (gdb) n. Program received signal SIGSEGV, Segmentation fault.; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1457#issuecomment-451645059:865,variab,variable,865,https://psicode.org,https://github.com/psi4/psi4/issues/1457#issuecomment-451645059,1,['variab'],['variable']
Modifiability,Still having trouble getting the `density_tolerance_` variable in SuperFunctional updated when I set the cutoff value through the LibXCFunctional class.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1860#issuecomment-611009420:54,variab,variable,54,https://psicode.org,https://github.com/psi4/psi4/pull/1860#issuecomment-611009420,1,['variab'],['variable']
Modifiability,"Still works:. ```; psi4: timer_on: 0 thread; psi4: timer_on: 1 thread; psi4: timer_on: 2 thread; psi4: timer_on: 3 thread; Hello World from thread = 0; Hello World from thread = 1; Hello World from thread = 2; Hello World from thread = 3; Number of threads = 4; psi4: timer_on: 2 thread; psi4: timer_on: 1 thread; psi4: timer_on: 3 thread; psi4: timer_on: 0 thread; Hello World from thread = 2; Hello World from thread = 1; Hello World from thread = 3; Hello World from thread = 0; Number of threads = 4; ```. Plugin:; ```; extern ""C""; SharedWavefunction play(SharedWavefunction ref_wfn, Options& options); {; int print = options.get_int(""PRINT"");. int nthreads, tid;. /* Fork a team of threads giving them their own copies of variables */; #pragma omp parallel for private(nthreads, tid); for (int a = 0; a < 8; a++); {; std::string timer_name = ""play "" + std::to_string(a);; timer_on(timer_name.c_str());. /* Obtain thread number */; tid = omp_get_thread_num();; printf(""Hello World from thread = %d\n"", tid);; //timer_on();. /* Only master thread does this */; if (tid == 0); {; nthreads = omp_get_num_threads();; printf(""Number of threads = %d\n"", nthreads);; }. timer_off(timer_name.c_str());. } /* All threads join master thread and disband */. // Typically you would build a new wavefunction and populate it with data; return ref_wfn;; }; ```. Change to `timer_on` timer.cc in libqt with corresponding `#include <omp.h>`:; ```; printf(""psi4: timer_on: %d thread\n"", omp_get_thread_num());; ```. Then executed with `psi4 -n 4`. Not sure what's going on with your system.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-308824500:510,Plugin,Plugin,510,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308824500,2,"['Plugin', 'variab']","['Plugin', 'variables']"
Modifiability,"Sure, here is the script:. ```; import time; import sys; import os; import json. import psi4. def run_fxyz(fxyz, theory='wB97X-D3/def2-TZVP'):; '''; fxyz: absolute path to an xyz file; '''; elements, xyz = [], []; with open(fxyz) as f:; line = next(f); numb_atoms = int(line.split()[0]); line = next(f); charge, multiplicity = map(int, line.split()); for i in range(numb_atoms):; line = next(f); elmnt, x, y, z = line.split() ; elements.append(elmnt); xyz.append((float(x), float(y), float(z))). fxyz = os.path.basename(fxyz); base, ext = os.path.splitext(fxyz). name = base + '_wB97XD3_def2-TZVP'. geom_string = '\n'.join(['%s %f %f %f' % (e, x, y, z) for e, (x, y, z) in zip(elements, xyz)]); geom_string = str(charge) + ' ' + str(multiplicity) + '\n' + geom_string; print(""geom_string"", geom_string). outfile = name + '.psi4'; psi4.core.set_output_file(outfile, False); geom = psi4.geometry(geom_string); settings = {; 'scf_type': 'DF',; 'dft_basis_tolerance': 1e-10,; 'ints_tolerance': 1e-10,; 'dft_pruning_scheme':'robust',; 'S_ORTHOGONALIZATION': 'PARTIALCHOLESKY',; 'S_CHOLESKY_TOLERANCE': 1e-6,; 'wcombine': False,; }; psi4.set_options(settings); start_time = time.time(); grad = psi4.gradient(theory) ; psi4.core.print_variables(); energy = psi4.variable(""SCF TOTAL ENERGY""); psi4.core.clean(); jobtime = time.time() - start; results = {; ""time"": float(jobtime),; ""energy"": energy,; ""gradient"": grad; }. with open(name + "".json"", ""w"") as fout:; json.dump(results, fout, indent=4). print(""Job %s completed in %.2f seconds with energy %.10f"" % (base, jobtime, energy)). def main(args):; assert args[1].endswith("".xyz""); psi4.set_num_threads(1); run_fxyz(args[1]). if __name__ == '__main__':; main(sys.argv); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046:1255,variab,variable,1255,https://psicode.org,https://github.com/psi4/psi4/issues/2548#issuecomment-1100260046,1,['variab'],['variable']
Modifiability,"Sure, we can add a failure just like SCF if DETCI does not converge. We can also increase the number of default iterations. At the same time, this is a fairly difficult CI case with the hydrogens very extended, I'm not sure we want defaults to cover this area as in many other cases 100 CI iterations would indicate some sort of failure. . In two-step MCSCF exact CI iterations are not really all that desirable. Unless a user loosens the MCSCF gradient threshold significantly this likely has no bearing on MCSCF computations as the previous guess CI vector is nearly exact with respect to energy near solution. Even then, delta energy convergence conditions should pick this up.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/394#issuecomment-222842020:201,extend,extended,201,https://psicode.org,https://github.com/psi4/psi4/issues/394#issuecomment-222842020,1,['extend'],['extended']
Modifiability,"Sure. When you do a complex Psi4 job with multiple computations and one global variable space, there's nothing preventing a fci/sto-3g followed by a hf/cc-pvqz from getting a value from `get_variable('FCI TOTAL ENERGY')` or a `DISPERSION CORRECTION` after a CC job. Whereas for `P::e.globals` you'd have to deliberately `clean_variables()`, variable attached to a wavefunction are more likely rationally related. (Though not always. We still have to delete `MP2 TOTAL ENERGY` after a double-hybrid DFT job.). Whereas the psi4 driver operates a lot with ""wavefunction passing"" with `return_wfn` and most useful info (primary return val, psivars, basisset, orbital info, mol) stored on it, the analogy with generic objects (e.g., no `psi4.core.Matrix`) is a QCSchema dictionary being passed around via `return_json` holding psivars (or ""qcvars"" to be generic). Multiple json/wfn structures can be organized into a CBS dict record to describe extrapolations or a findif dict record as you have done. This ""dict passing"" is how qcdb works. So `P::e.globals` --> `Wfn.variables_` gets quantities localized onto calculations. Then `Wfn.variables_` --> QCSchema `psi4:variables` gets quantities generic and serializable. Let me know if anything needs elaboration.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-441865136:79,variab,variable,79,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-441865136,3,['variab'],"['variable', 'variables']"
Modifiability,"Surprising that the low memory algorithm is faster! . I think in that case the output should be adapted to avoid confusion as there are warnings printed. Maybe also 'regular algorithm' can have a different name, but it's what other programs do, I suppose. https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/lowmemory_triples.cc#L72; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L659-L661; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/ccsd.cc#L780",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556:96,adapt,adapted,96,https://psicode.org,https://github.com/psi4/psi4/pull/2003#issuecomment-687585556,1,['adapt'],['adapted']
Modifiability,Switch from B/C --> F imminent. ```; ------------- ------------- --------------- ----------- -------------- -----------------; [A] [B] [C] [D] [E] [F]; Apr2015–Apr2016 May–Jun2016 late Jun 2016; psi4 dmrg 1.5 psi4 dmrg 1.7 chemps2 plugins chemps2 exe most psi4-like psi4 1.0 dmrg 1.7; ------------- ------------- --------------- ----------- -------------- -----------------; --> GLOBAL frozen_docc frozen_docc nocc restricted_docc (edit) GLOBAL restricted_docc; --> GLOBAL active active nact active GLOBAL active (n/c); dmrg_wfn_multp wfn_multp wfn_multp multiplicity wfn_multp dmrg_multiplicity; dmrg_wfn_irrep wfn_irrep wfn_irrep irrep (edit) wfn_irrep dmrg_irrep; --> dmrg_states dmrg_states sweep_states dmrg_states [] dmrg_sweep_states; --> dmrg_e_convergence dmrg_e_convergence sweep_energy_conv dmrg_e_convergence [] dmrg_sweep_energy_conv; d_convergence dmrg_d_convergence d_convergence scf_grad_thr? dmrg_d_convergence dmrg_scf_grad_thr; --> dmrg_maxsweeps dmrg_maxsweeps sweep_max_sweeps dmrg_max_sweeps [] dmrg_sweep_max_sweeps; --> dmrg_noiseprefactors dmrg_noiseprefactors sweep_noise_prefac dmrg_noise_magnitude [] dmrg_sweep_noise_prefac; (none) dmrg_dvdson_rtol dmrg_dvdson_rtol sweep_dvdson_rtol dmrg_r_convergence [] dmrg_sweep_dvdson_rtol; --> dmrg_print_corr dmrg_print_corr print_corr dmrg_corr_print dmrg_print_corr (n/c); --> dmrg_chkpt dmrg_chkpt dmrg_mps_write dmrg_mps_write; --> dmrg_store_unit dmrg_store_unit dmrg_unitary_write dmrg_unitary_write; --> dmrg_do_diis dmrg_do_diis dmrg_diis dmrg_diis; --> dmrg_diis_branch dmrg_diis_branch scf_diis_thr dmrg_diis_start_convergence dmrg_scf_diis_thr; --> dmrg_store_diis dmrg_store_diis dmrg_diis_write dmrg_diis_write; dmrg_maxiter dmrg_max_iter dmrg_max_iter scf_max_iter dmrg_maxiter dmrg_scf_max_iter; --> dmrg_which_root dmrg_which_root excitation (offset-1) dmrg_follow_root dmrg_excitation; dmrg_avg_states dmrg_state_avg dmrg_state_avg scf_state_avg dmrg_avg_states dmrg_scf_state_avg; --> dmrg_active_space dmrg_activ,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/150#issuecomment-228951911:231,plugin,plugins,231,https://psicode.org,https://github.com/psi4/psi4/issues/150#issuecomment-228951911,1,['plugin'],['plugins']
Modifiability,"TD-DFT has [symmetry-labeled psivars](https://github.com/psi4/psi4/blob/master/psi4/driver/procrouting/response/scf_response.py#L643-L670). The EOM-CC code psivars do not. For both consistency and user convenience, these variables should be symmetry-labelled. The offending code is [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cceom/diag.cc#L974-L977). Because the variables are written to globals rather than a wavefunction, the code is doubly offensive. (See #883.). Carried forward from [forum request](http://forum.psicode.org/t/excited-state-properties-from-psi4-api/2100/6).",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2145:221,variab,variables,221,https://psicode.org,https://github.com/psi4/psi4/issues/2145,2,['variab'],['variables']
Modifiability,"TEST; ""CURRENT ENERGY"": 0.01122234} #TEST. Eref_h_disp = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26658499, #TEST; ""CURRENT ENERGY"": -0.01126250} #TEST. Eref_h_fixed = {""SAPT ELST ENERGY"": -0.10197193, #TEST; ""SAPT EXCH ENERGY"": 0.36569812, #TEST; ""SAPT IND ENERGY"": -0.00840370, #TEST; ""SAPT DISP ENERGY"": -0.26605283, #TEST; ""CURRENT ENERGY"": -0.01073034} #TEST. molecule dimer {; Ne; --; Ar 1 6.5; units bohr; }. set {; basis aug-cc-pvdz; scf_type df; sapt_dft_grac_shift_a 0.203293; sapt_dft_grac_shift_b 0.138264; }. # No hybrid kernel & no exch-disp scaling & no deltaHF; set SAPT_DFT_DO_DHF False; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; if k in [""SAPT IND ENERGY"", ""CURRENT ENERGY""]:; ref = (v - DHF) / 1000.0; else:; ref = v / 1000.0; compare_values(ref, psi4.variable(k), 6, ""!hyb, xd=none, !dHF: "" + k) #TEST. # No hybrid kernel & no exch-disp scaling; set SAPT_DFT_DO_DHF True; set SAPT_DFT_DO_HYBRID False; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME none; energy('sapt(dft)', molecule=dimer); for k, v in Eref_nh.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""!hyb, xd=none, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (DISP); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME disp; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_disp.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=disp, dHF: "" + k) #TEST. # Hybrid kernel & exch-disp scaling (FIXED); set SAPT_DFT_DO_HYBRID True; set SAPT_DFT_EXCH_DISP_SCALE_SCHEME fixed ; set SAPT_DFT_EXCH_DISP_FIXED_SCALE 0.770; energy('sapt(dft)', molecule=dimer); for k, v in Eref_h_fixed.items(): #TEST; compare_values(v / 1000.0, psi4.variable(k), 6, ""hyb, xd=fixed, dHF: "" + k) #TEST. ```; * I think it should be clear from the output file what exch-disp scheme/scale",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216:2156,variab,variable,2156,https://psicode.org,https://github.com/psi4/psi4/pull/2481#issuecomment-1283510216,1,['variab'],['variable']
Modifiability,"Taking another look at this PR, the IncFock used here, uses a large number of matrix variables - separate matrices for the previous, current, and difference matrices for all of D, J, K, and wK. This particular IncFock formalism was replaced in the PR line of https://github.com/psi4/psi4/pull/2792, https://github.com/psi4/psi4/pull/2808, and https://github.com/psi4/psi4/pull/2816. So before this PR gets merged in, the IncFock formalism moved into the JK class in this PR needs to be updated to match.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2682#issuecomment-1503230492:85,variab,variables,85,https://psicode.org,https://github.com/psi4/psi4/pull/2682#issuecomment-1503230492,1,['variab'],['variables']
Modifiability,"Tests would definitely be good. I have a plugin that uses these integrals (and works), so I at least know nothing is broken. Actually, I wonder why we aren't computing the pseudospectral integrals with libint2 now. They're closely related to standard one electron potential integrals that we use in Psi4. . For semi-numerical exchange, I use the `PseudospectralInt` class to compute integrals of the form:; ```<m|1 /(r-r_p) |n>```; where `r_p` is a DFT grid point. This is identical to the nuclear integrals here:; https://github.com/evaleev/libint/wiki/using-modern-CPlusPlus-API#create-an-integral-engine",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2414#issuecomment-1064385520:41,plugin,plugin,41,https://psicode.org,https://github.com/psi4/psi4/issues/2414#issuecomment-1064385520,1,['plugin'],['plugin']
Modifiability,"Thank @jturney !; However, `omp_get_thread_num()` always return 0 in this code when I call `timer_on()` from `forte` plugin. I don't understand why. Maybe because `forte` and psi4 are different libraries so that when psi4 is called by `forte`, it cannot figure out which thread it is on. Just my guess.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/743#issuecomment-308605290:117,plugin,plugin,117,https://psicode.org,https://github.com/psi4/psi4/pull/743#issuecomment-308605290,1,['plugin'],['plugin']
Modifiability,"Thank you again loriab. Finally it was possible to me compile the plugin . I had some issues. After your last comment I get insecure about if I used the corrected code previously (before I tried from the link (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so I used the link you shared in the last message. I clean the directory and started again with the new code. The `make` command gave again the same error message. `grep` does not return matches in the original `.cc` file so I inspected the automatically generated `.cc` file. I noticed some differences (many of them seems to be intentionally changed) but not all of them. In essence, by comparing with the file you edited, I replaced in the new `.cc` file `wfn` with `ref_wfn`few times and add `SharedWavefunction ref_wfn` as the first argument of the function `printmo` (the name of my plugin). The final result is: http://pastebin.com/bX9jDxi5 .; I do not know if the above is because a bug of the generator of files for the plugin or just me, as I found very extraneous the changes between files, but inspecting the files I really do not find in the original `cc` file what appeared in the generated one, and I cleaned everything to avoid versions problems . The original is: http://pastebin.com/Yb4pLq6j .; Excuse because of the long message but I tried to put my grain of sand. Now I'll try the plugin :-) , thank you very much again",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195957592:66,plugin,plugin,66,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195957592,4,['plugin'],['plugin']
Modifiability,"Thank you dgasmith. I've just seen that loriab fixed some plugins including the one I need (https://github.com/loriab/psi4/commit/1b6328cdae9895ca1cabfb31656710fa8f00e30c), so thank you very much again loriab. I will try this new version soon, when I have access to my office PC. Cheers,. Hernán",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-195050556:58,plugin,plugins,58,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-195050556,1,['plugin'],['plugins']
Modifiability,"Thank you for answer. ; ""Or are you generating a plugin from the conda binary?"". I am unsure about that but I bet no. I get the plug-in from https://github.com/psi4/psi4/tree/master/plugins/mointegrals , my psi4 version is packaged in the official Ubuntu repository (in a .deb file).; The command `psi4 --new-plugin myplugin +mointegrals` created the new directory. This is the new directory where I tried the `make` command without success.; For clarity it is the complete steps please see this PasteBin link http://pastebin.com/qMSc8yq4",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/308#issuecomment-194606794:49,plugin,plugin,49,https://psicode.org,https://github.com/psi4/psi4/issues/308#issuecomment-194606794,4,"['plug-in', 'plugin']","['plug-in', 'plugin', 'plugins']"
Modifiability,"Thank you for posting your very useful code snippets, Sebastian. Another plugin that may be useful is the MOIntegrals plugin that comes with Psi4. The command:. ```; ints.transform_tei(MOSpace::all, MOSpace::all, MOSpace::all, MOSpace::all);; ```. can be replaced with:. ```; ints.transform_tei(MOSpace::occ, MOSpace::occ, MOSpace::occ, MOSpace::occ);; ```. to generate only the occupied space integrals instead of the full set. By default the integral transformation object will neglect frozen orbitals. Andy.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/98#issuecomment-105227460:73,plugin,plugin,73,https://psicode.org,https://github.com/psi4/psi4/issues/98#issuecomment-105227460,2,['plugin'],['plugin']
Modifiability,"Thank you for this PR! I greatly appreciate it!. The cleanup is quite nice, and pretty necessary honestly. Aside from a few small doc wording suggestions, my biggest thought is regarding coupling the regeneration of the reference matrices to construction of the full Fock matrix.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3111#issuecomment-1863016457:187,coupling,coupling,187,https://psicode.org,https://github.com/psi4/psi4/pull/3111#issuecomment-1863016457,1,['coupling'],['coupling']
Modifiability,"Thank you very much for looking into this, @raimis - especially the detailed benchmarks. If my memories from way back (circa 2010) are correct, @robparrish and I were trying to write a prototype DF gradient code and hit a very strange error. The finite difference tests we did for hybrids all looked good, but for range-separated functionals we were getting quite large noise. The direct range-separated code worked fine, confirming that the derivative integrals were correct, and pointing the fact that we somehow messed up the chain rule in our haste. Since then Rob did a complete rewrite of the entire SCF machinery and made it infinitely better so, inspired by your detailed comments, I decided to revisit. This input. ```; memory 6Gb. molecule C4NH4 {; -1 1; C 0.00000000 0.00000000 2.13868804; N 0.00000000 0.00000000 4.42197911; C 0.00000000 0.00000000 -0.46134192; C -1.47758582 0.00000000 -2.82593059; C 1.47758582 0.00000000 -2.82593059; H -2.41269553 -1.74021190 -3.52915989; H -2.41269553 1.74021190 -3.52915989; H 2.41269553 1.74021190 -3.52915989; H 2.41269553 -1.74021190 -3.52915989; units bohr; }. set {; basis 6-31G; d_convergence 11; points 5; }. anl = gradient('scf', df_functional='wB97X-D', dertype=1); num = gradient('scf', df_functional='wB97X-D', dertype=0). anl.print_out(); num.print_out(); ```. Yields the following analytic/numerical grads for B3LYP:; ```; ## Total Gradient (Symmetry 0) ##; Irrep: 1 Size: 9 x 3. 1 2 3. 1 0.00000000000000 -0.00000000000000 0.01448961501491; 2 0.00000000000000 0.00000000000000 0.00650495770571; 3 0.00000000000000 -0.00000000000000 -0.01465457276700; 4 -0.00257733094550 -0.00000000000000 -0.00299790291405; 5 0.00257733094550 0.00000000000000 -0.00299790291405; 6 -0.00015263631139 -0.00478910772840 -0.00008555938077; 7 -0.00015263631139 0.00478910772840 -0.00008555938077; 8 0.00015263631139 0.00478910772840 -0.00008555938077; 9 0.00015263631139 -0.00478910772840 -0.00008555938077. ## F-D gradient (Symmetry 0) ##; Irrep: 1 Size: 9",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/867#issuecomment-351148891:584,rewrite,rewrite,584,https://psicode.org,https://github.com/psi4/psi4/issues/867#issuecomment-351148891,1,['rewrite'],['rewrite']
Modifiability,"Thank you. After removing the reference to sapt_dft.cc, I ran (in a directory ""psi4public/build""). > > ../configure.cmake, and got. []; ['-DCXXFLAGS=-O2']; Executing ['cmake', '/home/bingao/Work/XKjem/psi4public', '-DCXXFLAGS=-O2', '-DF77FLAGS=-O2', '-DF77SYMBOL=detect', '-DMAX_AM_ERI=5', '-DPREFIX=/usr/local/psi4']; -- A library with BLAS API found.; -- A library with LAPACK API found.; -- checking Fortran FUNCTION_ linkage: SUB_; -- checking Fortran function_ linkage: sub_; -- Lower case with underscore is used; -- Could NOT find Boost; CMake Warning at CMakeLists.txt:204 (message):; Boost not found. The pre-packaged version will be built. It looks OK, but I got the error of compiling boost:. > > make; > > Scanning dependencies of target boostlibs; > > make[2]: **\* No rule to make target `../boost/boost_1_54_0.tar.gz', needed by`boost/boost_1_54_0'. Stop.; > > make[1]: **\* [boost/CMakeFiles/boostlibs.dir/all] Error 2; > > make: **\* [all] Error 2. Do you know how to solve this problem? Thank you.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/55#issuecomment-40186517:106,config,configure,106,https://psicode.org,https://github.com/psi4/psi4/issues/55#issuecomment-40186517,1,['config'],['configure']
Modifiability,"Thank you. I have seen the example. But I don't quite understand the code below. Are they a part of input file for psi4? And what is the function of these code in F-SAPT calculation?; ```keys = ['Enuc', 'Eelst', 'Eexch', 'Eind', 'Edisp', 'Etot'] #TEST. Eref = { #TEST; 'Enuc' : 805.1177369, #TEST; 'Eelst' : -0.01449385168, #TEST; 'Eexch' : +0.01572480431, #TEST; 'Eind' : -0.00445604001, #TEST; 'Edisp' : -0.00815025022, #TEST; 'Etot' : -0.01137533761, #TEST; } #TEST. Epsi = { #TEST; 'Enuc' : mol.nuclear_repulsion_energy(), #TEST; 'Eelst' : variable(""SAPT ELST ENERGY""), #TEST; 'Eexch' : variable(""SAPT EXCH ENERGY""), #TEST; 'Eind' : variable(""SAPT IND ENERGY""), #TEST; 'Edisp' : variable(""SAPT DISP ENERGY""), #TEST; 'Etot' : variable(""SAPT0 TOTAL ENERGY""), #TEST; } #TEST. for key in keys: #TEST; compare_values(Eref[key], Epsi[key], 6, key) #TEST```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145:544,variab,variable,544,https://psicode.org,https://github.com/psi4/psi4/issues/2281#issuecomment-902397145,5,['variab'],['variable']
Modifiability,"Thanks a lot, it now works for scf calculation. now i try to do a dmrg-scf as explained here : http://sebwouters.github.io/CheMPS2/interfaces.html ; but end up with . An error has occurred Py-side; Traceback:; <class 'Boost.Python.ArgumentError'>: Python argument types in; psi4.plugin(str); did not match C++ signature:; plugin(std::string, boost::shared_ptrpsi::Wavefunction): File ""<string>"", line 48, in <module>. File ""/home/LUCA/psi-master_18_02.2016/psi4-0.5/share/python/driver.py"", line 586, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs). File ""./../dmrg/pymodule.py"", line 52, in run_dmrg; returnvalue = psi4.plugin('dmrg.so'). LUCA",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/266#issuecomment-185833831:279,plugin,plugin,279,https://psicode.org,https://github.com/psi4/psi4/issues/266#issuecomment-185833831,3,['plugin'],['plugin']
Modifiability,"Thanks again @edeprince3. I now get this compilation error when trying to get the skeleton example plugin built:; ```; [ 75%] Build skeleton example plugin; Traceback (most recent call last):; File ""../../../stage/usr/local/psi4/bin/psi4"", line 158, in <module>; import psi4; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/__init__.py"", line 81, in <module>; from .driver import endorsed_plugins; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/psi4/driver/endorsed_plugins.py"", line 32, in <module>; import v2rdm_casscf; File ""/home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/__init__.py"", line 39, in <module>; psi4.core.plugin_load(sofile); RuntimeError: ; Fatal Error: load_plugin: Cannot open library: /home/roberto/Workspace/robertodr/psi4/build_fcidump/stage/usr/local/psi4/lib/v2rdm_casscf/v2rdm_casscf.so: undefined symbol: dgeev; ```; Has anybody encountered this before?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/872#issuecomment-355344822:99,plugin,plugin,99,https://psicode.org,https://github.com/psi4/psi4/pull/872#issuecomment-355344822,2,['plugin'],['plugin']
Modifiability,"Thanks all for the feedback. I'll split this one in three: i) Vector/Matrix polish ii) C++14 constructs for pybind11 iii) Actual xtensor stuff (CI doesn't seem very happy about those :weary:) . @fevangelista xtensor is used only in the test for the `doublet`. I initially intended to swap the storage in `Vector` and `Matrix` to use xtensor, but that turned out to be quite hard (due to the extensive use of `pointer` basically everywhere in the code) The strategy now is to rewrite the storage object (I think that's largely done, though copy CTORs, assignment etc are missing) and the symmetry-aware operations (multiplies, diagonalization, etc) unit testing them on the way. The latter will take a bit of time, but it's also something that more people can work on concurrently, I think.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931:475,rewrite,rewrite,475,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-449641931,1,['rewrite'],['rewrite']
Modifiability,"Thanks for all the tips with `-v`. I try to keep most of the complexity; inside the plugins, so normally psithon is fine. On Wed, Mar 15, 2017 at 7:40 PM, Daniel Smith <notifications@github.com>; wrote:. > You can always go around the ""psithon"" input. For example:; >; > mol = psi4.geometry(""""""; > He; > """""",; > name=""mol_name ~^*""); >; > Where ""mol"" is the actual Molecule object and its name is an arbitrary; > string. If you are doing complex things within Psi4 I would recommend not; > using the psithon API and use the straight python API. To help, you can run; > any input file through psi4 -v input.dat to see the psithon -> python; > conversion.; >; > —; > You are receiving this because you authored the thread.; > Reply to this email directly, view it on GitHub; > <https://github.com/psi4/psi4/issues/650#issuecomment-286913919>, or mute; > the thread; > <https://github.com/notifications/unsubscribe-auth/AAnI_q1BdQKzU8EJUn1qDBWQN3mJ_mDQks5rmHbXgaJpZM4MeWtv>; > .; >. -- ; -Robert",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/650#issuecomment-286957966:84,plugin,plugins,84,https://psicode.org,https://github.com/psi4/psi4/issues/650#issuecomment-286957966,1,['plugin'],['plugins']
Modifiability,"Thanks for helping with that, Lori. I think the CMake and libmints integration tasks are pretty well separated at this point. The stuff I added to external was mostly placeholder so please overwrite at will - you have write access to my branch. It looks like some upstream changes to the CMake config file naming scheme might be needed, so I just decided to build a standalone lib and worry about integration later - therefore you won't be interfering with anything if you feel like changing the CMake stuff.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421:294,config,config,294,https://psicode.org,https://github.com/psi4/psi4/pull/2135#issuecomment-802947421,1,['config'],['config']
Modifiability,"Thanks for looking into this! I now have a better understanding of the original error. . First, a note about the SCF restart technology: when you use the `wfn.to_file()` function in the first file, psi4 saves (1) the name of the basis set and (2) the matrix of orbital coefficients. The numbers contained in the orbital matrix aren't useful without knowing which basis they correspond to. In the second file, psi4 reconstructs the basis set using both the saved name and orbital coefficients. When a `basis` object is defined without a name, psi4 gives that object a [randomly generated name](https://github.com/psi4/psi4/blob/master/psi4/driver/inputparser.py#L273). This is a problem when you want to use the same `basis` object in a new file, since the same object defined in different files will receive different, random names. In the error you posted, the bit about `ANONYMOUS5AA41DFC` refers to the randomly generated name of the basis. Psi4 has no way of knowing what this basis set is. Your solution of using `basis this_basis { ... }` and `set basis this_basis` certainly works, but you actually don't even need the second line; all you need is `basis this_basis { ... }`. You asked about a more flexible syntax for reading SCF guesses. What about the current syntax is limiting?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1120579737:1206,flexible,flexible,1206,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1120579737,1,['flexible'],['flexible']
Modifiability,"Thanks for making this PR, everything looks great so far to me. I think the last two items are:; - Ensure a full install of Psi4 includes this plugin.; - Manage the tests issue. It looks like SNS-MP2 does not contain tests within the project directory so they cannot be run after installed. I think we can either add a few tests to psi4 with `@requires_sns_mp2` decorators and pytest or have the tests moved within the project folder so they can be run after installation. Any thoughts @rmcgibbo @loriab?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-345242566:143,plugin,plugin,143,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-345242566,1,['plugin'],['plugin']
Modifiability,"Thanks for making this into a written issue. This was discussed on Slack over a week ago, but not everyone may have seen it. All those test failures trace back to a ""delicate"" part of the OCC module. It has very slow orbital convergence. I [updated the default orbital convergence criteria in OCC to be the same as in DFOCC](https://github.com/psi4/psi4/pull/1772/commits/896a7c22be5c72542b8773ca2a1b9164dee1fc2a), and for all the failing test cases, OCC simply can't converge the orbitals that tightly. You can see the issue about the OCC problem [here](https://github.com/psi4/psi4/issues/1777). It traces back to OCC not coupling orbital and T2 amplitude DIIS, when in my experience, coupling them is crucial for good convergence. I'm in the process of fixing that, but it's slow. A lot of junk in the OCC module needed to be cleaned out to make the code less confusing before I can start making the actual fix. If you want to move that along, you can help by reviewing [the current cleanup PR](https://github.com/psi4/psi4/pull/1789). I wanted to wait to write the next and final PR in the series until that one was accepted, but I may need to start on that now. Until that final PR gets in, we don't have conda builds and certainly can't have the next release. As you're probably wondering about this, these changes are also necessary for a paper I want submitted before I leave CCQC. While I'm quite unhappy these changes needed to be done, that they are made is useful for me personally.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462:624,coupling,coupling,624,https://psicode.org,https://github.com/psi4/psi4/issues/1793#issuecomment-581033462,2,['coupling'],['coupling']
Modifiability,"Thanks for pointing me to the slack channel. I usually don't use slack, but I'll try to get something set up. > There are different levels of integration. An independent plugin, a deep C-layer integration and a; > python-level integration. Some of the questions depends on what you want to aim for (or need). Well, also depends a bit what you guys have in mind and how deep we want the integration to be. My thoughts:; - A **C-layer integration** is possible, but might be quite hard, since our iterative solvers are written in `python`. Given one falls back to solvers in C from psi4, in theory one can integrate adcc into the C core as well at the moment, but our long-term plan is to shuffle more and more to the python layer, so it's most likely not going to be a very sustainable idea. On the upside it would lead to a deep integration of the codes and allow to re-use parts of adcc elsewhere, e.g. the tensor library we are using (I know you are working on xtensor, but just an example).; - **Independent plugin** or **python-level integration**. I'm not sure what the difference is. Maybe you can detail?; What I primarily had in mind was to be able to use adcc from psi4 integrating with the psi4-way to set up and run calculations. My ideas was to be able to use the psi4 interface to setup ADC-related settings for adcc and transfer defaults or preferences from the psi4 setup to adcc. Right now you can already use psi4 SCF results in adcc (see e.g. [this example](https://github.com/adc-connect/adcc/blob/master/examples/water/psi4_ccpvdz_adc2_spectrum.py)), but some parameters (like convergence tolerances) need to be manually tweaked to agreement in both programs. That's an annoyance I'd like to see resolved.; In turn the results from adcc are right now in our own python datastructure. From this they could be easily transformed in some other datastructure more useful / agreeing with the rest of psi4. So far I was, however, unable to deduce what this would be from the psi4 code ba",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797:170,plugin,plugin,170,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547385797,1,['plugin'],['plugin']
Modifiability,"Thanks for putting Psi4 on conda-forge, this is very exciting. However, I noticed that creating an environment out of the box with mamba using conda-forge Psi4 seems to set PSIDATADIR to a build directory. (I'll try with conda as well). ```shell; $ mamba create --name psi4-1.8-py39 python=3.9 psi4=1.8 -c conda-forge/label/libint_dev -c conda-forge; $ conda activate psi4-1.8-py39; $ psi4 --version; Traceback (most recent call last):; File ""/home/lilywang/miniconda3/envs/psi4-1.8-py39/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/home/lilywang/miniconda3/envs/psi4-1.8-py39/lib/python3.9/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1683815705089/work/build/stage/share/psi4'; ```. I tried 3.11 as well:. ```shell; $ mamba create --name psi4-1.8 psi4 -c conda-forge/label/libint_dev -c conda-forge; $ conda activate psi4-1.8; $ psi4 --version; Traceback (most recent call last):; File ""/home/lilywang/miniconda3/envs/psi4-1.8/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/lilywang/miniconda3/envs/psi4-1.8/lib/python3.11/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is /lila/home/conda/feedstock_root/build_artifacts/psi4_1683815712644/work/build/stage/share/psi4'; ```; Manually setting PSIDATADIR seems to fix things, but the docs actively recommend against doing that:. ```; $ export PSIDATADIR=~/miniconda3/envs/psi4-1.8/share/psi4; $ psi4 --version; 1.8; `",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2993:760,variab,variable,760,https://psicode.org,https://github.com/psi4/psi4/issues/2993,2,['variab'],['variable']
Modifiability,"Thanks for subscribing me to the thread -- I would have missed it otherwise. > I suggest a minimal patch-up rather than thorough update. Is your sense that this is something we could fix on the sns-mp2 side with a minimal patch up? Perhaps by adding the fields we need to `arrays()` or something? I confess that I haven't been following psi4 development closely enough recently to have much of a context here about what the relevant psi4 API changes are or what the simplest way forward is. Is there a ticket you can direct me towards describing the change in the API related to the npz format for file 180?. > In the meantime, snsmp2 is getting dropped from psi4-rt. Is this the plan only if we don't fix the incompatibility in the sns-plugin, or are you planning to drop snsmp2 from psi4-rt regardless of whether or not this gets fixed?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071:737,plugin,plugin,737,https://psicode.org,https://github.com/psi4/psi4/issues/1514#issuecomment-459591071,1,['plugin'],['plugin']
Modifiability,"Thanks for testing!. The `No such TARGET` messages are nothing to worry about. I have it printing every language, but only the active/requested langs become part of `tgt::MathOpenMP`. Whoops on ambit. I must have been building with intel again. If you would, try adding https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L50 and https://github.com/psi4/psi4/blob/master/external/upstream/chemps2/CMakeLists.txt#L55 lines to https://github.com/psi4/psi4/blob/master/external/upstream/ambit/CMakeLists.txt . Unfortunately, the only way to test it running is to build the ambit template plugin. But just compiling is a start. For gpu_dfcc, I've built it with gcc54 and the rest of psi with gcc72. But there's no reason a pure gcc54 build shouldn't work. Fortunately, conda supplies both. I'm glad to tweak gpudfcc openmp if need be. I can only build, not run, so the setup may be lacking.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1041#issuecomment-400340712:615,plugin,plugin,615,https://psicode.org,https://github.com/psi4/psi4/issues/1041#issuecomment-400340712,1,['plugin'],['plugin']
Modifiability,Thanks for the code snippet @dgasmith ! I added the text wrapping. It adapts to the length of the message up to a maximum value of 80. One can set a different maximum via optional argument. I renamed the function to a more general `message_box` in case one wants to use it for something else. For testing: [wrap.py.txt](https://github.com/psi4/psi4/files/4457324/wrap.py.txt),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058:70,adapt,adapts,70,https://psicode.org,https://github.com/psi4/psi4/pull/1862#issuecomment-611615058,1,['adapt'],['adapts']
Modifiability,"Thanks for the feedback, Jeff. I've had a very mixed experience with CMake, in that it's super easy to use when it does what I want, but requires way too much hacking when it doesn't. I hate having to pass -D flags into cmake directly so I wrote a configure.cmake wrapper (in the top level directory) to emulate the behavior of GNU's configure. If I run that script, from an object directory, life is good. If I run CMake directly, I get the exact same problem that you report. Strangely enough, the wrapper doesn't pass any BLAS info into CMake, so I don't understand why the BLAS detection succeeds in one instance but not in the other. I'll do some fishing and report back.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/36#issuecomment-35465591:248,config,configure,248,https://psicode.org,https://github.com/psi4/psi4/issues/36#issuecomment-35465591,2,['config'],['configure']
Modifiability,"Thanks for the input, @hokru. It sounds like you're just the kind of user that we're trying to avoid tripping up. Which `dftd3` gets executed always depends on the contents of your environment variables, i.e., `$PSIPATH:$PATH`. So a hand-compiled one can always take precedence by manipulating those. Or for the miniconda binary case where `conda install psi4` installs `dftd3` alongside, you can always promptly `conda remove dftd3` to eliminate any potential interference from the generic exe.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/383#issuecomment-220698751:193,variab,variables,193,https://psicode.org,https://github.com/psi4/psi4/pull/383#issuecomment-220698751,1,['variab'],['variables']
Modifiability,"Thanks for the pointers from all of you, I feel I have a much better idea what to do. Btw: Great plugin system, but after thinking about it for a bit I am no longer too sure it is the best solution for this case. --. On first sight [snsmp2](https://github.com/DEShawResearch/sns-mp2/blob/master/snsmp2/) seems to be a good example project to orient along. So I would make another python module, `psi2adcc` say, and in it implement the routing between psi4 and adcc. Then adcc is one of its `setup.py` dependencies. In this python module I will need to adapt `psi4.driver.procedures['energy']['adc2']` and similar and add my energy function. So far, so good. Now the problem I see is that in a vanilla Psi4 version without adcc-support, `psi4.driver.procedures['energy']['adc2']` is assigned to `run_adc`, which rightfully runs the ADC(2) implementation in Psi4. If my plugin is loaded, however, this should become a `select_adc2` method, which either picks the `run_adc` in my plugin or the `run_adc` in Psi4, depending on some user settings. One option to resolve this is to give the adcc methods a different name, e.g. `adcc-adc(2)`. This is roughly what is done e.g. in the `gpu_dfcc` plugin to distinguish against the CPU versions if I understand correctly. For me this solution does not feel very satisfying, however, because now it's again the user's responsibility to select the right ADC implementation.; Another option is to implement a dummy `select_adc` in Psi4, which does no branching and always falls to the built-in implementation. This could then be monkey-patched in my plugin by wrapping it somehow ... but that is not clean either. . Alternative is to integrate deeper into the python layer and subject to the availablity of the `adcc` module either have two branches in `select_adc` or just one. That's what I will pursue now if there are no other thoughts. --. About the wavefunction object: I have not looked at the Psi4 implementation details (or the schema) so far, but roughly",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584:97,plugin,plugin,97,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547652584,4,"['adapt', 'plugin']","['adapt', 'plugin']"
Modifiability,"Thanks for the report. I have been warned about a numpy version issue on Mac. If you haven't already, do try a `conda install numpy=1.22` in your environment and try Psi4 again. I'd have to rebuild the Psiv 1.6.1 packages or rewrite their metadata to fix this at `conda create -n p4env psi4 -c psi4` -time. Hopefully, SciPy and Numpy will have reconciled before I get around to that.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2661#issuecomment-1207143526:225,rewrite,rewrite,225,https://psicode.org,https://github.com/psi4/psi4/issues/2661#issuecomment-1207143526,1,['rewrite'],['rewrite']
Modifiability,"Thanks for the report. I imagine the problem is that we (@zachglick) [changed the relevant constructor a few months back to have a default boolean argument](https://github.com/psi4/psi4/commit/85ce7af9c23d0280946e2040967e12bcd6ab3f01#diff-c513bb8f4c4e0c8ba6348974ebff6db2L182-R182). objdump tells me Psi exposes a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double, bool)` symbol, and your error message is looking for a `psi::ERISieve::ERISieve(std::shared_ptr<psi::BasisSet>, double)` symbol. I'm surprised that adding a default argument would force other programs to supply a value, but I'll leave this to somebody more experienced in the ways of plugins.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270:663,plugin,plugins,663,https://psicode.org,https://github.com/psi4/psi4/issues/1750#issuecomment-551770270,1,['plugin'],['plugins']
Modifiability,"Thanks for the report. The command for MP2 dipoles is `E, wfn = properties('mp2/6-311G**', properties=['dipole'],return_wfn=True)`. However it appears the global variable for the basis set is not set through this and the new fchk writer complains.; As a workaround you can do it like this:; ```; set basis 6-311G**; E, wfn = properties('mp2, properties=['dipole'] ,return_wfn=True); fchk(wfn, ""test4-dma.fchk""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2177#issuecomment-837218726:162,variab,variable,162,https://psicode.org,https://github.com/psi4/psi4/issues/2177#issuecomment-837218726,1,['variab'],['variable']
Modifiability,"Thanks for the response. I will try out conda install again. . In the meantime, I want to explain why I turned to #2024. ; I encounter this issue while installing just normal psi4: (this is from mamba install); ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```. How I get to this point: ; First I used `conda install psi4 -c psi4`, but it will throw me this errors. (nothing is conflicting?) So I turned to `mamba` to help me with the conflicts. ```; Collecting package metadata (current_repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: failed with repodata from current_repodata.json, will retry with next repodata source.; Collecting package metadata (repodata.json): done; Solving environment: failed with initial frozen solve. Retrying with flexible solve.; Solving environment: -; Found conflicts! Looking for incompatible packages.; This can take several minutes. Press CTRL-C to abort.; failed. UnsatisfiableError: The following specifications were found to be incompatible with each other:. Output in format: Requested package -> Available versions; ```. This is what mamba got back to me if I installed the normal build. `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires chemps2 >=1.8.10,<1.8.11.0a0, but none of the providers can be installed; ```. So then I tried to install `chemps2`, this can be installed normally. . Then I tried mamba to install psi4 again. . `mamba install psi4=1.5+e9f4d6d=py38ha809fef_0 -c psi4`. ```; package psi4-1.5+e9f4d6d-py38ha809fef_0 requires libgfortran >=3.0.1,<4.0.0.a0, but none of the providers can be installed; ```. Lastly, I tried to install libgfortran, but resulted in the above message. ; ```; package libgfortran4-7.5.0-h1a10cd1_23 has constraint libgfortran 4.0.0 *_23 conflicting with libgfortran-3.0.1-0; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496:653,flexible,flexible,653,https://psicode.org,https://github.com/psi4/psi4/issues/2578#issuecomment-1125640496,2,['flexible'],['flexible']
Modifiability,Thanks for the review!. > Just want to check that the TODO in `ccdensity/Params.h` wasn't really intended for this PR. Confirmed. A refactor of the fundamental data structures used in the `ccdensity` module is outside the scope of this PR. This PR just _motivates_ such a refactor.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2514#issuecomment-1083215686:132,refactor,refactor,132,https://psicode.org,https://github.com/psi4/psi4/pull/2514#issuecomment-1083215686,2,['refactor'],['refactor']
Modifiability,"Thanks for trying out Psi4 and the Psi4/Cfour interface, @tobirolinew. I can probably fix your immediate problem, but please read on. :-). There's three ways of running a Cfour calc through a more flexible front-end right now:; * QCEngine (already present in a Psi4 installation. takes a dictionary as input. geometry must be in Cartesians.); * QCDB (extra install. depends on QCEngine. inputs look much like Psi4/Cfour only `psi4.` becomes `qcdb.`. can use Z-Matrices.); * Psi4/Cfour (the first in time of these three. what you're trying now.). I'm trying to deprecate this last one in favor of the better maintained first ones. Your job would look something like the below through QCEngine (code below not tested). ```; import psi4; import qcengine as qcng. h2o = psi4.geometry(""""""; O; H 1 R; H 1 R 2 A. R=0.958; A=104.5; """"""). atomicinput = {; ""driver"": ""energy"",; ""molecule"": h2o.to_schema(dtype=2),; ""model"": {; ""method"": ""ccsd(t)"",; ""basis"": ""aug-pvqz"",; },; ""keywords"": {; ""SCF_CONV"": 12,; ""CC_CONV"": 12,; },; }. atomicresult = qcng.compute(atomicinput, ""cfour""). import pprint; pprint.pprint(atomic_result.dict()); ```. What types of calcs are you ultimately looking to run? How would you like to proceed: the QCEngine or Psi4/Cfour route? Thanks!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883:197,flexible,flexible,197,https://psicode.org,https://github.com/psi4/psi4/issues/2608#issuecomment-1155480883,1,['flexible'],['flexible']
Modifiability,"Thanks for your interest in Psi4. The SMD model offers an empirical parametrization of the nonelectrostatic contributions to the solvation energy (cavitation, dispersion, repulsion and hydrogen bonding effects) to add on top of the electrostatic contribution calculated by means of the IEFPCM or CPCM (COSMO) models. The nonelectrostatic contributions are added _a posteriori_ to the energy calculated self-consistently including the purely electrostatic reaction field. As such, SMD is very suitable for an independent implementation _via_ a Psi4 plugin. Both the IEFPCM and CPCM (COSMO) models are available in Psi4 using the interface to the PCMSolver library.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/227#issuecomment-175470082:548,plugin,plugin,548,https://psicode.org,https://github.com/psi4/psi4/issues/227#issuecomment-175470082,1,['plugin'],['plugin']
Modifiability,"Thanks for your reply! I was just using`cmake` with no options. Using `psi4 --plugin-compile` I can build my plugin now. However in previous versions, just` cmake .` used to work as well.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/775#issuecomment-320454022:78,plugin,plugin-compile,78,https://psicode.org,https://github.com/psi4/psi4/issues/775#issuecomment-320454022,2,['plugin'],"['plugin', 'plugin-compile']"
Modifiability,Thanks much!. * at first read-through functional integration parts look good; * we'll want to move the running of postg over to qcengine to imitate `dftd3` more than `gcp`. this'll integrate better with the hookup-disp-to-fctls machinery to avoid `## hack ##`. sound ok?; * is https://github.com/aoterodelaroza/postg the official repository home for `postg` where development occurs? PRs considered?; * we'll probably want to switch some logic so that XDM doesn't just turn on in the background when dft_xdm parameters change without the driver's knowledge as this could lead to wrongly labeled variables.; * any objection to a `postg` conda package distributed off the `psi4` or `conda-forge` channels? I have bullets if you're not familiar. Looking forward to getting this integrated. thanks again!,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759:595,variab,variables,595,https://psicode.org,https://github.com/psi4/psi4/pull/1699#issuecomment-521280759,1,['variab'],['variables']
Modifiability,"Thanks so much for the quick response, @philipmnel! This does indeed make the install work; however, `psi4` does not work, appearantly due to issues with pydantic v1 vs v2. Is there a fix for this? Does psi4 v1.8 support pydantic v2?. ```sh; ~ ❯ conda activate psi4-2  base; ~ ❯ psi4 --version  psi4-2; Valid config keys have changed in V2:; * 'allow_mutation' has been removed; Traceback (most recent call last):; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; ^^^^^^^^^^^; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/__init__.py"", line 90, in <module>; from .driver import endorsed_plugins; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/psi4/driver/__init__.py"", line 42, in <module>; from qcelemental import constants; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/__init__.py"", line 6, in <module>; from . import covalent_radii, models, molparse, molutil, periodic_table, physical_constants, util, vanderwaals_radii; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/__init__.py"", line 10, in <module>; from .align import AlignmentMill; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/models/align.py"", line 6, in <module>; from ..util import blockwise_contract, blockwise_expand; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/__init__.py"", line 1, in <module>; from .autodocs import auto_gen_docs_on_demand, get_base_docs; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11/site-packages/qcelemental/util/autodocs.py"", line 6, in <module>; from pydantic import BaseModel, BaseSettings; File ""/home/cbh/.pyenv/versions/miniconda3-4.7.12/envs/psi4-2/lib/python3.11",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880:311,config,config,311,https://psicode.org,https://github.com/psi4/psi4/issues/2991#issuecomment-1698251880,1,['config'],['config']
Modifiability,"Thanks very much -- I wouldn't have found that soon. I believe the variables are set up now. Rebuilding still not happy.; <img width=""1408"" alt=""screen shot 2019-02-15 at 1 23 41 pm"" src=""https://user-images.githubusercontent.com/2314730/52876417-2a9d1780-3125-11e9-84e7-71d1c651459f.png"">; <img width=""1134"" alt=""screen shot 2019-02-15 at 1 24 39 pm"" src=""https://user-images.githubusercontent.com/2314730/52876429-3092f880-3125-11e9-8a05-6a6aff25ab6d.png"">",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1527#issuecomment-464151463:67,variab,variables,67,https://psicode.org,https://github.com/psi4/psi4/pull/1527#issuecomment-464151463,1,['variab'],['variables']
Modifiability,"Thanks! It looks like naming the basis (`basis this_basis { ... }`) and then using `set basis this_basis` also works. That being said, I don't I understand why this would be an issue. The way I have requested the basis set is not unusual. Although I'm using the syntax for a mixed/custom basis set, it's the first example presented on that page of the documentation. It's also a valid way to request a basis set - the first job worked after all. The documentation says that `basis { assign ... }` statements can be used to request a basis set and replace `set basis X`. It looks like mixed basis sets also work... as long as you use `basis this_basis { ... }` and `set basis this_basis`. I've used that syntax to apply def2-SVP to C and O, and STO-3G to H, and then restarted the SCF successfully. . Is there another syntax for reading an SCF guess that is more flexible? For the application I have in mind, I'd be using it for gradients rather than single-point energies.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2571#issuecomment-1120488692:862,flexible,flexible,862,https://psicode.org,https://github.com/psi4/psi4/issues/2571#issuecomment-1120488692,1,['flexible'],['flexible']
Modifiability,"Thanks, @j3mdamas, I had meant to cc mj-harvey and @susilehtola and forgot. Target release is probably our regional QC conference ~May 18. We're currently sending back responses to reviewers of the accompanying paper. Todo items are: building Mac plugins from conda distribution, updating some add-on integrations we promised in the paper, paper, relicensing.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/688#issuecomment-297866382:247,plugin,plugins,247,https://psicode.org,https://github.com/psi4/psi4/issues/688#issuecomment-297866382,1,['plugin'],['plugins']
Modifiability,"Thanks, @rmcgibbo, it actually is standard practice to make a conda package of ""endorsed plugins"". I haven't gotten to that, but if you pre-approve, that's very helpful. :-). I also have a plan that even optional run-time dependencies (e.g., plugins) can be built at CMake superbuild-time with `-DENABLE_rt_dep=ON`. This is purely user-convenience since they're downstream of psi. Are you good with either/both of these options for SNS-MP2?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/850#issuecomment-344708105:89,plugin,plugins,89,https://psicode.org,https://github.com/psi4/psi4/pull/850#issuecomment-344708105,2,['plugin'],['plugins']
Modifiability,"Thanks, I indeed forgot to change this variable, I just changed the one for the cluster and not for psi4... I've set it to 16GB now. But the problem persists. It is indeed certainly related to memory. For such a large CAS do you have any idea of the amount of memory required ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-660352855:39,variab,variable,39,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-660352855,1,['variab'],['variable']
Modifiability,"Thanks, I successfully passed the arguments to connect to my python3.6. However, after the cmake I still get two errors that I don't understand... ```-- Configuring incomplete, errors occurred!; See also ""/objdir/psi4-core-prefix/src/psi4-core-build/CMakeFiles/CMakeOutput.log"".; make[2]: *** [psi4-core-prefix/src/psi4-core-stamp/psi4-core-configure] Error 1; make[1]: *** [CMakeFiles/psi4-core.dir/all] Error 2; make: *** [all] Error 2; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/768#issuecomment-316433585:153,Config,Configuring,153,https://psicode.org,https://github.com/psi4/psi4/issues/768#issuecomment-316433585,2,"['Config', 'config']","['Configuring', 'configure']"
Modifiability,"Thanks. I mainly wanted to get the discussion going. Slack can be used also in the browser. psi4 is very modular and having `adcc` as a fully optional dependency, c-layer or python-layer, is fine. The `psi4 plugins` (see http://psicode.org/psi4manual/master/prog_newcode.html) are independent of the psi4 code base, though can still use psi4's libraries. Examples would be `sns-mp2` or `v2rdm_casscf`. There you can basically do whatever you want. With python-layer integrations I mean that you add to the proper psi4 python code base. This is what you already did. http://psicode.org/psi4manual/master/proc_py.html; Check the managed method section for how multiple implementations of the same method are usually handled. You only need the `wfn` object?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286:207,plugin,plugins,207,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547399286,1,['plugin'],['plugins']
Modifiability,"Thanks. It honestly _isn't_ my intention to scupper all your PRs, @ryanmrichard. It's just that the `mkl_rt.so` or nothing approach doesn't work with the binary build (and that libefp ref is very far behind). I've been working on a replacement scheme that gets the valuable mkl_rt for most and works with libefp and CheMPS2, too. If you wanted to do a separate or modified PR with all the plugin stuff, that'd be great. Also, it looks like the pybind 2.0 commit is still caught in this PR, so may need a rebase. Sorry for the trouble.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/563#issuecomment-274517219:389,plugin,plugin,389,https://psicode.org,https://github.com/psi4/psi4/pull/563#issuecomment-274517219,1,['plugin'],['plugin']
Modifiability,"Thanks. The detci module is undergoing C++ modernization and the addition of many new features. Your issue https://github.com/psi4/psi4public/issues/92 for instance is fixed in the rewrite. Detci's file management is getting re-aligned with Psi4's too. We'll definitely check that your problem isn't present in the new version (the elimination of global (to detci) variables helps for these multiple invokation cases). And if @CDSherrill confirms that the OPDM and `rsp` don't mix, will add to docs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/175#issuecomment-137552779:181,rewrite,rewrite,181,https://psicode.org,https://github.com/psi4/psi4/issues/175#issuecomment-137552779,2,"['rewrite', 'variab']","['rewrite', 'variables']"
Modifiability,"That error triggers when psi is trying to run an input file. The plugin code isn't getting called. Can you confirm the correct psi is being called?. > On Nov 6, 2016, at 8:06 AM, T. Daniel Crawford notifications@github.com wrote:; > ; > [draco:~/src] crawdad% psi4 --new-plugin myplugin; > Traceback (most recent call last):; > File ""/Users/crawdad/psi4/bin/psi4"", line 110, in <module>; > raise KeyError(""The file %s does not exist."" % args[""input""]); > KeyError: 'The file input.dat does not exist.'; > ; > This suggests the input.dat template doesn't exist, but it's in the install area. I can't find where this is implemented in the new structure, however. Perhaps it's not implemented?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub, or mute the thread.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/503#issuecomment-258681166:65,plugin,plugin,65,https://psicode.org,https://github.com/psi4/psi4/issues/503#issuecomment-258681166,2,['plugin'],['plugin']
Modifiability,"That sounds about right, @kannon92, plugins haven't made the CMR-KTB-INV leap. The writing thereof will be converted to py-side, and the building thereof will be converted to CMake. But neither done yet.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254675379:36,plugin,plugins,36,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254675379,1,['plugin'],['plugins']
Modifiability,"That sounds nice if I'm a sys admin of my own cluster (and hopefully; someday I will be, so I will definitely keep this in mind), but I suspect; our users who are running with these ancient compilers also won't be using; Easybuild. Or is Easybuild something we would distribute with Psi4, much; like we do Boost?. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 8:22 AM, ""wpoely86"" notifications@github.com wrote:. > Easybuild https://hpcugent.github.io/easybuild/ is not an alternative; > to CMake or autoconf. The idea is to have an easy way to make reproducible; > builds and modules. Everything in the stack should also be optimally build,; > meaning utilizing the hardware to its full extend (for example, if AVX2 or; > infiniband is available, we will use it). Easybuild will take care of all; > dependencies. It will avoid using the OS installed (old) versions of; > software. For Psi4, it will build Python, Boost, Lapack (MKL), ... after; > building a compiler (GCC/intel/...) from scratch. We also patch out any; > problem. Psi4 for example hard codes it's build path for the generation of; > new plugins. This is not desirable on a HPC system. Some software is also; > not adjusted to be build by anything other than GCC. We make it work with; > intel too. Some software doesn't even have a real build system other than a; > list of makefiles that usually don't work out of the box. We fix that so; > the build is reproducible .; > ; > It's primarily meant for HPC sites. If somebody adds support for a piece; > of software, other people can reuse it with one command. I use it to build; > Psi4 in production. If you're developing, Easybuild is useful for building; > all up to date versions of dependencies.; > ; > On our systems, if I run: module load PSI, I get a psi4 (a git version; > from februari), build with icpc-2015.1.33 (combined with GCC-4.9.2) and; > mkl-11.2.1.133, Boost-1.57, Python-2.7.9. If I want to rebuild it with for; > example",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105251086:730,extend,extend,730,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105251086,1,['extend'],['extend']
Modifiability,"That was me playing around, trying to figure out when to use the different dertypes. The level of theory I will be using is w97X-D DFT perhaps in the future but with Hartree-Fock I wanted to test the code that I obtain something back. . I've always used the default before when calculating single point energy scans so when to apply to which different level of theory is a little lost on me. . ```python. dertype='energy'; dertype'gradient'. ```. How would I get around this issue? In my mind. **Option 1**. Give it more juice (like CPU). If i have nodes on a cluster how do I distribute the job between the nodes perhaps. . **Option 2**. Play around with option parameters and maybe obtain orbitals from previous geometry? Is that faster?. https://psicode.org/psi4manual/master/autodir_options_c/scf__guess.html. Should I be changing into the `guess` parameter?. **Update 1** . I was playing around a bit more:. ```; Module time:; 	user time = 221.38 seconds = 3.69 minutes; 	system time = 8.88 seconds = 0.15 minutes; 	total time = 38 seconds = 0.63 minutes; ```. The time decreased when I set the configurations to ` 'g_convergence': 'gau_loose'` I think from `gau_tight`? `dertype` is still `gradient`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936:1100,config,configurations,1100,https://psicode.org,https://github.com/psi4/psi4/issues/3125#issuecomment-1908613936,1,['config'],['configurations']
Modifiability,"That would be an improvement? I'd need to look at `libdisp` to see if we can remove it more aggressively, but I know for sure that taking it out of `dfmp2` is a fairly simple refactor. And of course, I can rearrange `dct`.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2223#issuecomment-870588844:175,refactor,refactor,175,https://psicode.org,https://github.com/psi4/psi4/issues/2223#issuecomment-870588844,1,['refactor'],['refactor']
Modifiability,"That's a good idea, @mbanck, but I think it could be quite a lot of work. We only use Travis to run quick tests on each new PR (which will all use the new CMake infrastructure). Older builds can be tested more extensively on a separate nightly build server, which can be configured to build with higher angular momentum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/355#issuecomment-232783460:271,config,configured,271,https://psicode.org,https://github.com/psi4/psi4/issues/355#issuecomment-232783460,1,['config'],['configured']
Modifiability,"That's a good point. I would really like to make it so that one can build a plugin off a conda installation (it's on one of my todo lists). We used to install all the libraries to `$PREFIX/lib`, but I stopped doing that because they weren't doing anything useful. If the mixed gnu-make (of plugins) and cmake and all the compiler/linker flags that must be in sync could be made to work with plugins, we can definitely make appropriate changes to install.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/162#issuecomment-130121457:76,plugin,plugin,76,https://psicode.org,https://github.com/psi4/psi4/issues/162#issuecomment-130121457,3,['plugin'],"['plugin', 'plugins']"
Modifiability,"That's a lot of package managers you've mentioned. :-). Judging from [ubuntu packages](https://packages.ubuntu.com/search?keywords=psi4&searchon=names&suite=all&section=all), the latest version available through `apt-get` is `v1.2.1`. Conda has `v1.3.2`. Unless the Linux package managers have adapted to conda while I wasn't looking, ubuntu is going to be running your system python (probably `/usr/bin/python`) not the conda distribution python. Presuming your apt-get psi4 is using system python, you should be able to apt-get install pytest. You'll want to run something like `which python psi4 pytest` to see if everything's where you expect. You're definitely better off installing a conda psi4 (either ""installer"" or ""conda"" from [here](https://admiring-tesla-08529a.netlify.com/installs/v132/)) because it's newer, optimized for more architectures, and uses a decent BLAS (MKL, not generic). psi4 pulls from the `defaults` and `psi4` channels, not `conda-forge`, but in any case, install time is trivial compared to calculation time. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814:294,adapt,adapted,294,https://psicode.org,https://github.com/psi4/psi4/issues/1705#issuecomment-524453814,1,['adapt'],['adapted']
Modifiability,"That's just our finicky travis config. It builds and passes all tests, then segfaults sometimes. Just request a restart on GH or slack.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1042#issuecomment-417521002:31,config,config,31,https://psicode.org,https://github.com/psi4/psi4/pull/1042#issuecomment-417521002,1,['config'],['config']
Modifiability,"That's much clearer, thank you. The syntax seems good to me, but I vote for single access / multi storage. That prevents the syntax from getting unwieldy if we decide we need variables of types other than float and array. My main reason is that having different accessors feels like a clunky interface to me, especially for PsiAPI. Variable getting in PsiAPI should treat types like Python does, not C++.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485:175,variab,variables,175,https://psicode.org,https://github.com/psi4/psi4/issues/1375#issuecomment-442032485,2,"['Variab', 'variab']","['Variable', 'variables']"
Modifiability,"That's using `cmake` beyond my experience, as I blow away the objdir if changing cmake variables. @robertodr will have to comment if what you describe is intended behavior. Dial down angular momentum to 4 if you're rebuilding a lot. My thanks to whoever, years ago, fixed the parallel integrals build.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/161#issuecomment-130123186:87,variab,variables,87,https://psicode.org,https://github.com/psi4/psi4/issues/161#issuecomment-130123186,1,['variab'],['variables']
Modifiability,"The CMake variables were not the problem, the version number was. Apparently the one in `-c psi4/label/test` is 1.8.2 and not 1.8.3. But now, the compilation failed while building liboptions.cc with the following message: ; `cd /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/psi4-core-prefix/src/psi4-core-build/src/psi4/liboptions && /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/bin/icpc -DUSING_LAPACK_MKL -I/global/home/users/jgonthier/software/psi4/psi4/include -I/global/home/users/jgonthier/software/psi4/psi4/src -isystem /global/home/users/jgonthier/software/psi4/objdir_chemps2_ar/stage/usr/local/psi4/include -isystem /global/home/users/jgonthier/software/miniconda/include/python2.7 -isystem /global/software/sl-6.x86_64/modules/langs/intel/2016.1.150/mkl/include -xHost -qopenmp -O3 -DNDEBUG -fPIC -std=c++11 -o CMakeFiles/options.dir/liboptions.cc.o -c /global/home/users/jgonthier/software/psi4/psi4/src/psi4/liboptions/liboptions.cc; /global/home/users/jgonthier/software/miniconda/envs/gcc52/gcc/include/c++/bits/stl_iterator_base_types.h(154): error: name followed by ""::"" must be a class or namespace name; typedef typename _Iterator::iterator_category iterator_category;; ^`. As you can see I use Intel compilers 2016 with Intel MKL, in the GCC 5.2 conda environment. Could it be a problem with Intel compilers ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288525890:10,variab,variables,10,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288525890,1,['variab'],['variables']
Modifiability,"The CheMPS2 interface is missing support for an additional input value for the parameter `DMRG_SCF_ACTIVE_SPACE`. According to [Psi4 documentation](http://www.psicode.org/psi4manual/1.2/autodoc_glossary_options_c.html#term-dmrg-scf-active-space-dmrg) it can be `INPUT`, `NO` and `LOC`, which map to `0`, `1` and `2` respectively for the variable `WhichActiveSpace_in` in [CheMPS2](https://sebwouters.github.io/CheMPS2/dmrgscfcalcs.html). However, `WhichActiveSpace_in` accepts an additional value of `3` for reordering orbitals without localization. This feature seems to have been introduced in https://github.com/SebWouters/CheMPS2/commit/79fb7c6f2b4cc2d628e5593fc8aa548c572a9e83.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1242:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/issues/1242,1,['variab'],['variable']
Modifiability,"The DGEMM-killing Boost is a Continuum/default channel conda package 1.57 that had been serving me well for months. It can be found in the lib subdir of the metapackage-dir in the setup line below. (metapackage-dir specifies location of python, boost, chemps2, pcmsolver, zlib, hdf5, gsl.). ```; ../setup --cc icc --cxx icpc --fc ifort --type release --plugins on --prefix $INSTALL --max-am-eri 5 --metapackage-dir /theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv --cmake /theoryfs2/ds/cdsgroup/miniconda/bin/cmake -DSPHINX_ROOT=/theoryfs2/ds/cdsgroup/miniconda/envs/p4buildenv #-DENABLE_XHOST=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/321#issuecomment-199547946:353,plugin,plugins,353,https://psicode.org,https://github.com/psi4/psi4/issues/321#issuecomment-199547946,1,['plugin'],['plugins']
Modifiability,"The DHDF analytic gradients are not implemented and thus the relaxed density is not readily available.; A scaled MP2 density from kohn-sham orbitals could perhaps be constructed through `psi4numpy` means, as an approximation. The contributions from the additional xc-coupling terms arising in DHDF gradient theory should be very small.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1236#issuecomment-420568298:267,coupling,coupling,267,https://psicode.org,https://github.com/psi4/psi4/issues/1236#issuecomment-420568298,1,['coupling'],['coupling']
Modifiability,"The DSYEV problems might be due to the machine generated code in libxc returning NaNs. I still think it would be a good idea to clean these up within Psi4 if they arise, since not all functionals are well-behaving and ""fixing"" the functional amounts to using larger density / gradient thresholds. The B5050LYP issue boggles me. I did rewrite the routine to accept external parameters in October, but as far as I can see the resulting definition is exactly the same as before. The underlying functionals may have been regenerated, but that also should not affect anything. Could this be just an issue within Psi4, e.g. changes in the density-fitting routines or the fitting basis? One could just run the calculations with conventional integrals, since (h2o)2 is still small.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-602031298:334,rewrite,rewrite,334,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-602031298,1,['rewrite'],['rewrite']
Modifiability,"The L=l format parsing can be added simply by changing libmintsbasissetparser.py to; ```; if len(shell_type) == 1 or len(shell_type)>2:; if(len(shell_type) == 1):; # AM defined as character ; am = shell_to_am[shell_type[0]]; else:; # AM defined explicitly with L=l ; if(shell_type[0:2].lower()!=""l=""):; raise ValidationError(""""""Gaussian94BasisSetParser::parse: Invalid shell definition: line %d: %s"""""" % (lineno, line)); am = int(shell_type[2:]). ```. but in addition the shell regexp needs to be adapted to also accept the other format :S",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/628#issuecomment-282102859:497,adapt,adapted,497,https://psicode.org,https://github.com/psi4/psi4/issues/628#issuecomment-282102859,1,['adapt'],['adapted']
Modifiability,"The Mac Eco error is probably a fluke -- I don't see any recent changes to dftd4-python. What do you think of defaulting this to OFF for the protection of plugins? I don't quite understand how they're behaving now with this. See below that it's warning but not erroring. I do think the cmake is slightly in error in that i'm not setting CXX_EXTENSIONS=OFF in the inner psi4/CMakeLists.txt. ```; 2024-03-25T14:45:09.8381208Z [67/68] Building Fortran object CMakeFiles/v2rdm_casscf.dir/focas_interface.F90.o; 2024-03-25T14:45:09.8382362Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:274:53:; 2024-03-25T14:45:09.8383299Z ; 2024-03-25T14:45:09.8383512Z 274 | max_dim = max(size(integrals_1,dim=1),nnz_d1,maxval(nnz_int)); 2024-03-25T14:45:09.8383966Z | 1; 2024-03-25T14:45:09.8384366Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8385389Z /home/runner/work/psi4/psi4/objdir/external/downstream/v2rdm_casscf/v2rdm_casscf_external-prefix/src/v2rdm_casscf_external/focas_interface.F90:161:46:; 2024-03-25T14:45:09.8386144Z ; 2024-03-25T14:45:09.8386330Z 161 | max_dim = max(size(integrals_1,dim=1),maxval(nnz_int)); 2024-03-25T14:45:09.8386747Z | 1; 2024-03-25T14:45:09.8387135Z Warning: GNU Extension: Different type kinds at (1); 2024-03-25T14:45:09.8387546Z [68/68] Linking CXX shared module v2rdm_casscf.so; 2024-03-25T14:45:09.8404861Z [17/19] Performing install step for 'v2rdm_casscf_external'; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447:155,plugin,plugins,155,https://psicode.org,https://github.com/psi4/psi4/pull/3145#issuecomment-2018339447,1,['plugin'],['plugins']
Modifiability,"The OpenMP configuration for Linux looks convoluted and fragile. So for Windows, I just made conditional branch, not to break something.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1348#issuecomment-437586788:11,config,configuration,11,https://psicode.org,https://github.com/psi4/psi4/pull/1348#issuecomment-437586788,1,['config'],['configuration']
Modifiability,"The PBE/STO-3G calculation on Ni(CO)3 does not converge.; ```; memory 8 gb. molecule {; Ni -0.593245 2.410696 -0.537392; C 0.947231 2.245835 0.358715; C -0.875896 1.446101 -2.018123; C -1.856239 3.533688 0.051349; O -1.061878 0.818754 -2.971879; O 1.943046 2.139891 0.937442; O -2.673940 4.257626 0.432247; }. set basis STO-3G; energy('pbe'); ```; DIIS apparently gets stuck alternating between two different configurations, which is shown in the oscillating energy. I think this should be a relatively simple system for DFT; still, the default accelerator is unable to handle it.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2209:409,config,configurations,409,https://psicode.org,https://github.com/psi4/psi4/issues/2209,1,['config'],['configurations']
Modifiability,"The PR also implements damping for UKS, because UKS should inherit the UHF damp_update() method.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/422#issuecomment-227951470:59,inherit,inherit,59,https://psicode.org,https://github.com/psi4/psi4/pull/422#issuecomment-227951470,1,['inherit'],['inherit']
Modifiability,The Python_EXECUTABLE variable should be passed down to all cmake invocations,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2796:22,variab,variable,22,https://psicode.org,https://github.com/psi4/psi4/issues/2796,1,['variab'],['variable']
Modifiability,"The TD-SCF code seems to work pretty well and comparably with other codes but the current level of output that appears in the output file by default is pretty minimal (energies, symmetries, oscillator strengths, etc.). A lot more info is available through various variables but they are pretty obscure and not the easiest to use. After a brief discussion on the forum [forum](http://forum.psicode.org/t/td-scf-excited-state-densities-and-or-contributing-excitations-available-yet/2109) I was encouraged to add this as a github issue. I'm happy to add these additions and, after a fair bit of fiddling, I think I have it mostly sussed. (And it's been a good learning experience: digging into RPA and TDA literature to some extent!). I have a few additions to scf_response.py to output the set of TDM vectors and the most important excitations (and deexcitations) contributing to each excited state, and I will submit a pull request once I've cleaned it up a bit. However it currently only works for C1, i.e no symmetry. One thing I have yet to get my head around is how to handle X and Y when symmetry is involved: comparing a calculation with C1 point group with the same molecule but using a higher point group, I can see the same coefficients within the sub-matrices for the different irreducible representations but I can't see how to unpick something like an ""A -> B"" single excitation that sees to appear only in the A representation sub-matrix. (If that makes sense!)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2153:264,variab,variables,264,https://psicode.org,https://github.com/psi4/psi4/issues/2153,1,['variab'],['variables']
Modifiability,The [qcschema test](https://github.com/psi4/psi4/blob/master/tests/pytests/test_psi4_qcschema.py) should probably be extended to check for this functionality.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2126#issuecomment-790250152:117,extend,extended,117,https://psicode.org,https://github.com/psi4/psi4/pull/2126#issuecomment-790250152,1,['extend'],['extended']
Modifiability,"The `--new-plugin` and `--new-plugin-makefile` generators are a really awesome idea. Unfortunately, they don't quite work properly with the latest conda binaries from `conda install -c psi4 psi4`, because the `Makefile` is generated with absolute paths to the build machine. For example, I get something like this setting the compiler and include directories in the generated makefile. I assume this works great on your cluster, but no to much on mine:. ```; # Flags that were used to compile Psi4.; CXX = /theoryfs2/common/software/intel2015/composer_xe_2015.3.187/bin/intel64/icpc; CXXDEFS = -DHAVE_DKH -DHAVE_MM_MALLOC_H -DHAVE_MKL_LAPACK -DHAVE_MKL_BLAS -DHAS_CXX11_VARIADIC_TEMPLATES -DHAS_CXX11_STATIC_ASSERT -DHAS_CXX11_SIZEOF_MEMBER -DHAS_CXX11_RVALUE_REFERENCES -DHAS_CXX11_NULLPTR -DHAS_CXX11_LONG_LONG -DHAS_CXX11_LAMBDA -DHAS_CXX11_INITIALIZER_LIST -DHAS_CXX11_DECLTYPE -DHAS_CXX11_CSTDINT_H -DHAS_CXX11_CONSTEXPR -DHAS_CXX11_AUTO_RET_TYPE -DHAS_CXX11_AUTO -DHAS_CXX11_FUNC -DHAS_CXX11 -DSYS_LINUX -DUSE_FCMANGLE_H; CXXFLAGS = -DRESTRICT=__restrict__ -Xlinker -export-dynamic -fPIC -std=c++11 -qopenmp -O3 -no-prec-div -DNDEBUG; LDFLAGS = -static-libstdc++ -static-libgcc -static-intel -wd10237 -static-intel -L/theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/usr/lib64 /theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/lib64/libpthread.so.0 /theoryfs2/ds/cdsgroup/psi4-compile/nightly/glibc2.12/lib64/libc.so.6; INCLUDES = -I/scratch/cdsgroup/conda-builds/work/build/interfaces/include -I/scratch/cdsgroup/conda-builds/work/build/src/lib -I/scratch/cdsgroup/conda-builds/work/src/lib -I/scratch/cdsgroup/conda-builds/work/include -I/scratch/cdsgroup/conda-builds/work/build/include -I/scratch/cdsgroup/conda-builds/work/build/boost/include -I/home/rmcgibbo/miniconda/envs/2.7/include/python2.7 -I/usr/include -I/usr/include -I/usr/include -I/usr/include; OBJDIR = /scratch/cdsgroup/conda-builds/work/build; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214:11,plugin,plugin,11,https://psicode.org,https://github.com/psi4/psi4/issues/214,2,['plugin'],"['plugin', 'plugin-makefile']"
Modifiability,"The `__END_NAMESPACE_STD` errors were caused by the presence of an intel compiler whose variables were sourced in Josja's `~/.bashrc` file. (So, if the recipe above does not work for you, try from scratch with a virgin `~/.bashrc`.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-438674406:88,variab,variables,88,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-438674406,1,['variab'],['variables']
Modifiability,"The `cc` module [has](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis.cc) [a](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_RHF.cc) [habit](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_ROHF.cc) [of](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccenergy/diis_UHF.cc) [rewriting](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/cclambda/diis.cc) [DIIS](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/cc/ccresponse/diis.cc) when they really should [just use `libdiis`.](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libdiis/diismanager.h). In addition to code cleanup, I predict an important practical benefit. The central code uses Rob Parrish tricks to treat linearly dependent matrices. In my experience during the DIIS refactor, these often arise close to convergence. So by refactoring this, we can allow for effective DIIS even for tight convergence of the `cc` equations. I have [reason to believe](https://github.com/psi4/psi4archive/commit/2b2eb6c5a710dde180b1ef7a050012069afeae8d) this has a great to deal to do with anomalies in `cc55`. Don't even think about taking this until after #943 is closed.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2519:837,refactor,refactor,837,https://psicode.org,https://github.com/psi4/psi4/issues/2519,2,['refactor'],"['refactor', 'refactoring']"
Modifiability,"The `dfocc` module has had problems converging MOs tightly. My experience with orbital optimization tells me the problem can be cured by coupling the DIIS iterations for orbital steps and amplitude steps, as is done in the `dct` module and in the `occ` module. There should be an option (I'd suggest making this the default option) to couple the DIIS steps, so examples like the following converge:. ```; molecule {; 1 2; units bohr; O 0.000000000000 0.000000000000 -0.143225816552; H 0.000000000000 1.638036840407 1.136548822547; H 0.000000000000 -1.638036840407 1.136548822547; }. set reference uhf ; set basis sto-3g; set MAX_MOGRAD_CONVERGENCE 8; set e_convergence 10. energy('omp2'); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2215:137,coupling,coupling,137,https://psicode.org,https://github.com/psi4/psi4/issues/2215,1,['coupling'],['coupling']
Modifiability,"The `frequency()` call is already checked in `cbs-xtpl-freq` with `dertype=1`; the handling was just moved from driver to cbs_driver in this PR. For the `properties()`, I think it'd be easier to extend one of the `props[1-4]` tests; I've extended the `props4` call to compare the already-computed V-values from SCF with global cc-pVDZ basis with ones from an explicit SCF/cc-pVDZ calculation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/949#issuecomment-379855166:195,extend,extend,195,https://psicode.org,https://github.com/psi4/psi4/pull/949#issuecomment-379855166,2,['extend'],"['extend', 'extended']"
Modifiability,"The actual error is somewhere in the ellipses, so we will need more info. The fact that make is reporting that the error occurred in `src/lib/libpsipcm` suggests to me that it may be a problem with finding the PCM repo on GitHub, but I need more info to be sure. Can you run:. ```; export VERBOSE=1; ```. (in Bash) or:. ```; setenv VERBOSE 1; ```. (in TCSH)? ; Rerun the build command and then post the full output here. If you are curious, `VERBOSE` is the environment variable that tells CMake to spit out more information.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/183#issuecomment-144069231:470,variab,variable,470,https://psicode.org,https://github.com/psi4/psi4/issues/183#issuecomment-144069231,1,['variab'],['variable']
Modifiability,"The big difference between AO and plane wave methods is that plane-wave bases are **verbose**. The reason why plane-wave methods don't accelerate convergence using the Fock matrix is that **it is typically never built** since it could not be stored. Instead, it is always contracted right away with trial vectors, as in traditional configuration interaction approaches, for example. The acceleration based on Fock matrix extrapolation is much more efficient than one based on the electron density.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073:332,config,configuration,332,https://psicode.org,https://github.com/psi4/psi4/issues/3065#issuecomment-1784887073,1,['config'],['configuration']
Modifiability,"The class inheritance diagrams in the documentation are currently broken: [http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram](http://psicode.org/psi4manual/1.1/psi4api.html#class-inheritance-diagram). My best guess is that something must have went wrong with the sphinx doc generation, but beyond that I have no idea.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/792:10,inherit,inheritance,10,https://psicode.org,https://github.com/psi4/psi4/issues/792,3,['inherit'],"['inheritance', 'inheritance-diagram']"
Modifiability,"The code checks the number of GPUs and throws an exception if there are none. Regarding the memory, the code in its current form requires at least as much CPU memory as the GPU has. For GP100, that is 16 GB. I’ll reduce this test case to 16 GB, but I need to think carefully how to reduce it safely to a “normal” amount. > On Jun 14, 2018, at 11:16 AM, Lori A. Burns <notifications@github.com> wrote:; > ; > @loriab commented on this pull request.; > ; > In tests/gpu_dfcc/gpu_dfcc1/input.dat <https://github.com/psi4/psi4/pull/997#discussion_r195463106>:; > ; > > @@ -0,0 +1,34 @@; > +#! cc-pvdz (H2O)2 Test DF-CCSD vs GPU-DF-CCSD; > +; > +sys.path.insert(0,'../../../.'); > +; > +import gpu_dfcc; > +; > +molecule {; > + O 0.000000000000 0.000000000000 -0.068516219310 ; > + H 0.000000000000 -0.790689573744 0.543701060724 ; > + H 0.000000000000 0.790689573744 0.543701060724 ; > +}; > +; > +memory 32000 mb; > What happens on a computer with only CPUs? Do we need to disable if hardware not detected? Only import the plugin if num_gpus>1? Or is it just harmless or non-obliging if no GPUs to work with? Clearly I've just no experience with hardware-dependent tests.; > ; > In any case, I hope memory req. can be toned down?; > ; > —; > You are receiving this because you were mentioned.; > Reply to this email directly, view it on GitHub <https://github.com/psi4/psi4/pull/997#pullrequestreview-128837847>, or mute the thread <https://github.com/notifications/unsubscribe-auth/AClSGg6UFdaiUjSouvB5u5K8uNAWsj5mks5t8n5DgaJpZM4Tutpb>.; >",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-397334449:1020,plugin,plugin,1020,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-397334449,1,['plugin'],['plugin']
Modifiability,"The code is correct, but I haven't put much effort into making it memory efficient. The [second derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/jk_grad.cc#L1593-L2336) allocate some large matrices up top (could still do some pretty large calculations with these in core), and the [Fock derivative terms](https://github.com/andysim/psi4/blob/hessians/src/bin/scfgrad/response.cc#L443-L779) also allocate large chunks. The Fock derivative code does at least handle the 3_N_nso*nso results in a batched way. The biggest problem is that I lazily recompute some quantities that @robparrish wrote efficient routines for handling out of core, particularly `(A|ij)` and `(A|B)^{-1}(B|ij)`. If anybody wants to have a stab a refactoring the current code, be my guest. I'll be able to get to it some day, but not in the next couple of months. The aim of this implementation is really just to have something that works, to serve as a guideline for our efforts to get Hessians for many other methods. I know that @bozkaya and @lothian were interested in getting Hessians into their codes, and I'm more than happy to work with them to get this code adapted for their needs.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/437#issuecomment-232996171:748,refactor,refactoring,748,https://psicode.org,https://github.com/psi4/psi4/pull/437#issuecomment-232996171,2,"['adapt', 'refactor']","['adapted', 'refactoring']"
Modifiability,"The code looks anodyne, but I would appreciate information about how this fixes #2272. From my understanding, #2272 is that when QCEngine tasks Psi with computing MBIS charges, Psi (a) would try to compute atom volumes but (b) would not have set some necessary variables. I would like to understand _why_ the call coming from QCEngine rather than a Psi input file means we get both (a) and (b) and how this PR disrupts that mechanism.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520:261,variab,variables,261,https://psicode.org,https://github.com/psi4/psi4/pull/2273#issuecomment-926617520,1,['variab'],['variables']
Modifiability,"The current code detected 4 different fragments for the extended CH3F.; Then it tried to connect them. It really should have been able to do so.; I don't see why it didn't work, and I'm looking for a bug. On Sun, Mar 13, 2016 at 2:00 PM, Lori A. Burns notifications@github.com; wrote:. > Certainly the flexibility of the optimizer oughtn't be reduced. In the; > absence of fixed/frozen keywords or user supplied/edited intco (do you need; > a keyword to signal do-read-intco instead of accepting any it finds?), it's; > probably reasonable to assume a full optimization is desired. Maybe grep; > '~' needs to catch a gradient.rms(), too, next to the optking-active rms; > gradient.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4/issues/310#issuecomment-196021110.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/310#issuecomment-196036551:56,extend,extended,56,https://psicode.org,https://github.com/psi4/psi4/issues/310#issuecomment-196036551,1,['extend'],['extended']
Modifiability,"The default scratch directory is `/tmp/`, which is often limited in size (few Gib) and large calculation will crash because the ""disk is full"". Set either the env variable `PSI_SCRATCH` or use the python command `psi4.core.IOManager.shared_object().set_default_path('/path/')` and specify, in the best case, a local disk on the HPC node.; Slow network directories can stall I/O and also crash calculations. Unclear how much you will need in terms of size, I am not familiar with the implementation details.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1959#issuecomment-661110834:163,variab,variable,163,https://psicode.org,https://github.com/psi4/psi4/issues/1959#issuecomment-661110834,1,['variab'],['variable']
Modifiability,"The diffs come up clean for every section of variable printing in OCEPA, CEPA, OMP2, OMP3, OMP2.5, MP3, MP2.5, MP2... Numbers vary, unsurprisingly. There's no printing difference depending on closed vs open-shell except for ROHF-MP2. I can't find an ROHF-MP2 test anywhere, so I compared a UHF-MP2 and an ROHF-MP2 calculation. After fixing one silly mistake (see last commit), the diff was exactly what I expected.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766:45,variab,variable,45,https://psicode.org,https://github.com/psi4/psi4/pull/1785#issuecomment-576081766,1,['variab'],['variable']
Modifiability,The dispersion refactoring apparently changes the way I need to turn of VV10 from libxc. Will need to track down the changes to make it work again.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1320#issuecomment-434339694:15,refactor,refactoring,15,https://psicode.org,https://github.com/psi4/psi4/pull/1320#issuecomment-434339694,1,['refactor'],['refactoring']
Modifiability,"The easy thing to do is what we do [here](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libfock/DirectJK.cc#L319) and create an integral computer for each thread in [the offending function](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/potentialint.h#L66-L195). We could get some very easy speed up this way, but it's not perfect. For better scalability, we need to do exactly what you suggest: rewrite the OS recursion code (which is quite ugly, old code that we inherited) and also make sure that the integral object has buffers for each thread, so that we don't have to duplicate them. If you want to pursue that, I think you'll find there's a lot of performance to be gained and I think you're very well suited to the task, given your recent foray into DFT threading.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1280#issuecomment-438256355:422,rewrite,rewrite,422,https://psicode.org,https://github.com/psi4/psi4/issues/1280#issuecomment-438256355,2,"['inherit', 'rewrite']","['inherited', 'rewrite']"
Modifiability,"The eps file doc/progman/svn/svn.eps.in is 1.4 MB and takes a long time to render in Gnome evince. Furthermore, it has the following commtens inside:. %%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.; %%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved. Apparently, doc/progman/svn.fig is the source for a previous version of this .eps. As the progman Makefile is no longer generated by configure.ac, maybe the whole directory could be yanked or the .eps regenerated with fig2dev (which also reduces the size to a few kilobytes)",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/26:437,config,configure,437,https://psicode.org,https://github.com/psi4/psi4/issues/26,1,['config'],['configure']
Modifiability,"The first two we've got the the inner `psi4-core` project (psi4 itself). The third I tried to get some opinions on (copied below for general interest). The compiler checks at least give a warning people understand better than C++ standards and do it before all the addons (which often don't require c++11) get built. _And_ for the crazy Intel/gnu situation, it's a nice place to check the underlying compiler version. So I'm all for solving the EXTENSIONS warnings and for revamping when we decide to require cmake 3.6. How do we feel about -std=c++11 vs. -std=gnu++11 via [CXX_EXTENSION](https://cmake.org/cmake/help/v3.4/prop_tgt/CXX_EXTENSIONS.html)?; I can fix the `icpc: command line warning #10121: overriding '-std=c++11' with '-std=gnu++11’` by (a) turning that cmake variable off (its default is on); (b) when omp is enabled, have our cmake add the gnu++ instead of the c++ flag; or (c) suppressing that icpc warning.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281120816:776,variab,variable,776,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281120816,1,['variab'],['variable']
Modifiability,"The following input file fails:; ```; set {; reference rhf ; basis cc-pVDZ; scf_type pk; freeze_core true; }. _, wfn = energy('mp2',return_wfn = True); energy('mrccsd', ref_wfn=wfn); ```. The problem is that `run_mrcc` expects [the ""CURRENT SCF ENERGY""](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/procrouting/proc.py#L4572) variable to be set in core, which was wiped [as soon as the energy call ran](https://github.com/psi4/psi4/blob/2d33c3f83bee2d2b87b7a9ee4eb0c5d230b65403/psi4/driver/driver.py#L546). @loriab, is there any reason _not_ to grab this variable from the incoming wavefunction?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2305:368,variab,variable,368,https://psicode.org,https://github.com/psi4/psi4/issues/2305,2,['variab'],['variable']
Modifiability,"The following input:. ```; E, wfn = energy(cbs, cbs_metadata=[{""wfn"":""hf"", ""basis"": ""cc-pwcv[tq]z-pp""},; {""wfn"":""mp2"", ""basis"": ""cc-pwcvtz-pp""}],; molecule=dimer,; return_wfn=True, dertype=0,; bsse_type=""cp""); ```. crashes with `UnboundLocalError: local variable 'bsse' referenced before assignment`. This is related to the logic on line 665:. https://github.com/psi4/psi4/blob/8e9d6888d722d071a9043bd8707ded67df81d7d3/psi4/driver/driver_nbody.py#L661-L668. The first (and only) assignment into `bsse` comes after, on line 681:. https://github.com/psi4/psi4/blob/8e9d6888d722d071a9043bd8707ded67df81d7d3/psi4/driver/driver_nbody.py#L680-L685. I'm not sure what this logic is doing exactly, but I'm guessing just switching the order of the blocks might do the trick.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1649:254,variab,variable,254,https://psicode.org,https://github.com/psi4/psi4/issues/1649,1,['variab'],['variable']
Modifiability,"The following should do the trick already, no?; ```; set(CMAKE_CXX_STANDARD 11); set(CMAKE_CXX_STANDARD_REQUIRED TRUE); set(CMAKE_CXX_EXTENSIONS FALSE); ```; You basically require C++11 _without_ GNU extensions from the compiler. Configuration should abort if the compiler doesn't have the relevant flag. These three lines would possibly eliminate the need for checking for compiler versions in [cmake_cxxstandard.cmake#L3-L11](https://github.com/psi4/psi4/blob/master/cmake/custom_cxxstandard.cmake#L3-L11). But, yes, I agree, is too large of a leap right now.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/625#issuecomment-281118096:230,Config,Configuration,230,https://psicode.org,https://github.com/psi4/psi4/pull/625#issuecomment-281118096,1,['Config'],['Configuration']
Modifiability,"The functions weren't exposed to plugins or Python, so the only downstreams we could possibly break are using locally modified Psi. I'm not worried about them.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511:33,plugin,plugins,33,https://psicode.org,https://github.com/psi4/psi4/pull/1766#issuecomment-565454511,1,['plugin'],['plugins']
Modifiability,"The history rewrite is complete, at this point please remove all forks and clones. The git repository was reduced from 740MiB down to about 66MiB. All large files are now external projects so that we should not have to do this again.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-254947891:12,rewrite,rewrite,12,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-254947891,1,['rewrite'],['rewrite']
Modifiability,"The issue has been reported to the MRCC forum. It is broken even with Molpro 2022.; Perhaps it would be more maintainable to teach QCEngine how to run standalone MRCC calculations, rather than trying to pass SCF wavefunctions via a fragile interface that keeps being broken?. PS: [MRCC forum topic](https://www.mrcc.hu/index.php/forum/running-mrcc/287-molpro-w-mrcc-keywd-errror)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2497#issuecomment-1092754283:109,maintainab,maintainable,109,https://psicode.org,https://github.com/psi4/psi4/issues/2497#issuecomment-1092754283,1,['maintainab'],['maintainable']
Modifiability,The libmints stuff should be easy to resolve. Maybe we can look to move the create plugin code to Python.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/450#issuecomment-235353986:83,plugin,plugin,83,https://psicode.org,https://github.com/psi4/psi4/issues/450#issuecomment-235353986,1,['plugin'],['plugin']
Modifiability,"The loop limits are the same in the basic recursion for the nuclear attraction integrals. The call to the Obara-Saika recursion in the 0th order integrals is (from potential.cc): . ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1, am2);; ```. whereas the call in the derivative code is:. ``` C++; potential_recur_->compute(PA, PB, PC, gamma, am1+1, am2+1);; ```. The code was adapted from PSI3's cints package and we know that code works. We also know the code as it is in PSI4 works as we have working derivative codes. The patch certainly looks like it cleans up the recursion. I'll commit it if the tests pass.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3#issuecomment-17312112:385,adapt,adapted,385,https://psicode.org,https://github.com/psi4/psi4/issues/3#issuecomment-17312112,1,['adapt'],['adapted']
Modifiability,"The not recognizing template brackets is a language feature, not part of; the library like the tuple. I bet if you print the compile command the; flag Andy told you to add is missing. Assuming that is the case, the; million dollar question is why? I have guesses from insight learned in the; CMake rewrite. Assuming it is one of those guesses, the problem should go; away with the rewrite. Sent from my Android (without spellcheck). Please forgive the brevity. On Jul 15, 2016 12:14 AM, ""Andy Simmonett"" notifications@github.com wrote:. > How about adding -std=c++11 to the --extra-cxx-flags argument to setup; > (or -DEXTRA_CXX_FLAGS if you're calling CMake directly)?; > ; > —; > You are receiving this because you commented.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/444#issuecomment-232855963, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/AFCRiztFqbgAKeEx-gdWJsatSyH76QzWks5qVwkfgaJpZM4JL6Xl; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/444#issuecomment-232946325:298,rewrite,rewrite,298,https://psicode.org,https://github.com/psi4/psi4/issues/444#issuecomment-232946325,2,['rewrite'],['rewrite']
Modifiability,"The numbers printed by the sointegral plugin are not the symmetry blocked; indices but the absolute indices (non-symmetry blocked). The order of the; absolute indices come directly from the basis set. For your input file the; the ""2"" index actually belongs to B1 irrep (2px on carbon) whereas ""0"" is; A1 (1s on carbon), so by symmetry this integral does not exist. The; transformation matrix for obtaining symmetry blocked integrals is obtained; with:. // prints the transformation matrix.; soBasis->petite_list()->sotoao()->print();. What you probably want to look into is printing the {p,q,r,s}irrep and; {p,q,r,s}so values in the ERIPrinter class in your plugin. These values are; post-symmetry-blocking-transformation. You're right, the difference between absolute and symmetry blocked indices; could be better explained. With respect to two-electron integrals, Psi; never reports integrals of value zero to prevent wasting CPU cycles, again; this could be made clearer. Justin Turney, Ph.D.; Senior Research Scientist; CCQC/UGA. On Wed, Feb 11, 2015 at 10:02 AM, wpoely86 notifications@github.com wrote:. > OK, found it. The overlap is zero for those orbitals.; > ; > But I was under the impression that sointegrals gave me all unique; > integrals because of symmetry, including those that are zero due to the; > overlap. This should be made clearer in the docs.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/issues/68#issuecomment-73895052.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/68#issuecomment-73899555:38,plugin,plugin,38,https://psicode.org,https://github.com/psi4/psi4/issues/68#issuecomment-73899555,2,['plugin'],['plugin']
Modifiability,The original issue is still valid. Translating the instructions given in the documentation (https://psicode.org/psi4manual/master/build_planning.html#how-to-configure-code-to-use-high-angular-momentum-basis-sets) into a series of commands that actually work is not trivial. (The comments made JosjaVanBever were due to a local misconfiguration of his system and are not related.),MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1341#issuecomment-869392246:157,config,configure-code-to-use-high-angular-momentum-basis-sets,157,https://psicode.org,https://github.com/psi4/psi4/issues/1341#issuecomment-869392246,1,['config'],['configure-code-to-use-high-angular-momentum-basis-sets']
Modifiability,"The overhead from density fitting can actually become detrimental for extended systems, especially for the exchange part.; (Newer DF algorithms improve here, but some also introduce larger errors). Direct conventional integrals or RI-J plus exact exchange work well extended systems. COSX is okay screening wise, too, and also coming to PSI4. Direct conventional integrals in PSI4; ```; scf_type direct; df_scf_guess false; ```. Our direct SCF is not the fastest (improvements also coming here) and `ints_tolerance 1e-12` and `d_convergence 1e-6` are also both conservative and can be tweaked.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913:70,extend,extended,70,https://psicode.org,https://github.com/psi4/psi4/issues/2288#issuecomment-911507913,2,['extend'],['extended']
Modifiability,"The primary problem with PCMSolver is that I was only partially through its CMake refresh. I went ahead and [opened a PR](https://github.com/PCMSolver/pcmsolver/pull/31) with the changes thus far. The two primary items are (1) pcm_placeholder lost its configuration step, so you have to manage the PATHs yourself and (2) I'd like to do an inversion of the PCMSolver install so that it becomes a more natural python module to import (installed to site-packages) rather than the involved bin/configure/write-to-source-dir business. It is runable at the moment, though, if you're determined (I included an outline of steps at the PR).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249122702:252,config,configuration,252,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249122702,2,['config'],"['configuration', 'configure']"
Modifiability,"The quality of OpenBLAS (https://github.com/xianyi/OpenBLAS) should be fine. It is based on GotoBLAS that used to outperform ATLAS and in some cases even MKL. Kazushige Goto, the developer of GotoBLAS was then hired by Intel. . Thank you for the hint about MathLibs.cmake. Based on https://github.com/coderefinery/autocmake/blob/master/modules/math_libs.cmake (lines 127-141) I have added support for detecting OpenBLAS (with the changes it is detected even without setting MATH_ROOT). ```; [sfux@develop01 psi4]$ cat CMakeAddOpenBLAS.patch ; diff -crB psi4_/cmake/math/ConfigMath.cmake psi4/cmake/math/ConfigMath.cmake; *** psi4_/cmake/math/ConfigMath.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/ConfigMath.cmake 2017-01-24 09:52:50.074349042 +0100; ***************; *** 14,20 ****; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); --- 14,20 ----; if(ENABLE_64BIT_INTEGERS); set(MATH_LIB_SEARCH_ORDER MKL ACML); else(); ! set(MATH_LIB_SEARCH_ORDER MKL OPENBLAS ESSL ATLAS ACML SYSTEM_NATIVE); endif(). if(NOT DEFINED MKL_FLAG); diff -crB psi4_/cmake/math/MathLibs.cmake psi4/cmake/math/MathLibs.cmake; *** psi4_/cmake/math/MathLibs.cmake 2017-01-20 09:35:51.000000000 +0100; --- psi4/cmake/math/MathLibs.cmake 2017-01-24 09:28:13.812117187 +0100; ***************; *** 73,78 ****; --- 73,93 ----; set(ATLAS_LAPACK_LIBS atlas lapack); ; #-------------------------------------------------------------------------------; + # OPENBLAS; + ; + set(OPENBLAS_BLAS_INCLUDE_PATH_SUFFIXES); + set(OPENBLAS_LAPACK_INCLUDE_PATH_SUFFIXES); + ; + set(OPENBLAS_BLAS_HEADERS cblas.h openblas_config.h f77blas.h); + set(OPENBLAS_LAPACK_HEADERS lapacke.h lapacke_config.h lapacke_mangling.h lapacke_utils.h); + ; + set(OPENBLAS_BLAS_LIBRARY_PATH_SUFFIXES openblas); + set(OPENBLAS_LAPACK_LIBRARY_PATH_SUFFIXES openblas); + ; + set(OPENBLAS_BLAS_LIBS openblas); + set(OPENBLAS_LAP",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/580#issuecomment-274762486:570,Config,ConfigMath,570,https://psicode.org,https://github.com/psi4/psi4/issues/580#issuecomment-274762486,4,['Config'],['ConfigMath']
Modifiability,"The question is not whether Psi4's current machinery adequate or not. It's about the sensible default. If I put out a `$TMPDIR` variable, I expect programs to obey it. Most Unix/Linux programs will do so, it's even part of the Unix specification. There is no reason why Psi4 should do something different.; Heck, with all the recent evolutions in the Linux world (systemd), it's even mandatory. Per user containers and ditto `/tmp` are coming to the HPC world. ; I really see no reason why there should be hardcoded default for this. I also disagree with your C++11 sentiment. I think this is an excellent example why C++11 is long overdue. If something as trivial as fetching a environment variable is not guaranteed thread safe...; There are now more than enough compilers that support it: Clang since 3.4, GCC 4.8-4.9, intel 2015. The current intel 2016 beta even already does the largest part of C++14. If you are using old compilers for calculations, you're wasting computational time and money IMHO.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105040869:128,variab,variable,128,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105040869,2,['variab'],['variable']
Modifiability,The remaining problem would be that `H` is recalculated manually by directly calling [so_potential](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/mintshelper.cc#L1261) that only knows about DKH and not X2C. ; That means X2C is only included in the SCF energy and not in the Fock matrix in DF/CD-(FNO)-CC.; X2C did not crash the calculation. Either `H` is taken from the SCF wavefunction object like done elsewhere (e.g in [dfocc](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/dfocc/get_moinfo.cc#L367) or the X2C potential needs to be added somehow. Direct use of `so_potential` is done here (as far as I could find):; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/frozen_natural_orbitals.cc#L1039; https://github.com/psi4/psi4/blob/master/psi4/src/psi4/fnocc/df_ccsd.cc#L714. The other occurrence I found is in the SCF template: https://github.com/psi4/psi4/blob/master/psi4/share/psi4/plugin/scf/scf.cc.template,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788:929,plugin,plugin,929,https://psicode.org,https://github.com/psi4/psi4/issues/1791#issuecomment-580401788,1,['plugin'],['plugin']
Modifiability,"The short answer is that there's not a built-in way to do this. However, it shouldn't be too hard to backtransform the TPDM for some small case. The default backtransform in plugins/backtrans/ is not smart enough to know about the CI ordering of the MO's, so it won't work as-is. Perhaps if someone on the team has a little time on their hands they might look into this more. David",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/67#issuecomment-122116635:174,plugin,plugins,174,https://psicode.org,https://github.com/psi4/psi4/issues/67#issuecomment-122116635,1,['plugin'],['plugins']
Modifiability,"The third Travis test is timing out too much. This can be traced to the painfully slow download time for the GCC compiler. We have plans to replace this test with some plugin validation, using native GCC compilers to avoid the timeouts. For now, we'll just nuke it to allow the backlog of PRs through. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1552:168,plugin,plugin,168,https://psicode.org,https://github.com/psi4/psi4/pull/1552,1,['plugin'],['plugin']
Modifiability,"The title is pleasantly self-explanatory. The `set_gradient` call will automatically set the `gradient_` variable. With the old way of setting the gradient, the gradient wouldn't be picked up by serialization, meaning my attempt at an optking3 IRC (of course) was failing. I'll also take this opportunity to soapbox about why we (read: I) need to centralize our DF gradient code.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1737:105,variab,variable,105,https://psicode.org,https://github.com/psi4/psi4/pull/1737,1,['variab'],['variable']
Modifiability,"The two installs are https://github.com/psi4/psi4/blob/master/psi4/CMakeLists.txt#L354-L355 and https://github.com/psi4/psi4/blob/master/CMakeLists.txt#L315-L316 . The former copies the quadrature files into `<objdir>/stage/share/` and the latter copies the whole `<objdir>/stage/` into `CMAKE_INSTALL_PREFIX`. From the `find` output you posted and an earlier issue, I think your CMake build setup or the FreeBSD layout is doing something unexpected at the install. Short of understanding where that's happening, adapting your recipe to remove the extra dirs may be your best bet. ```; >>> objdir_py310_gcc: (sdftd3) find . -name ""1_xk01_1E1""; ./stage/share/psi4/quadratures/1_x/1_xk01_1E1; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085:513,adapt,adapting,513,https://psicode.org,https://github.com/psi4/psi4/issues/1301#issuecomment-1325502085,1,['adapt'],['adapting']
Modifiability,"The up-to-date master branch fails to configure in Fedora; ```; $ cmake ..; CMake Error at CMakeLists.txt:5 (cmake_policy):; Policy ""CMP0144"" is not known to this version of CMake.; $ rpm -q cmake; cmake-3.27.7-1.fc39.x86_64; ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3092:38,config,configure,38,https://psicode.org,https://github.com/psi4/psi4/issues/3092,1,['config'],['configure']
Modifiability,"There are many ways to converge RHF, and sometimes you can get stuck in a local minmum, that's true. However, the following case is quite striking. My input:. ---. molecule N2 {; N 0.000000000000 0.000000000000 0.000000000000; N 0.000000000000 0.000000000000 2.060000000000; units au; }. plugin_load(""./mointegrals.so""). set basis sto-3g; set mointegrals print 1; set reference rhf. scf(). plugin(""mointegrals.so""). ---. I use the MO integrals for a subsequent FCI calculation (in a self-written program). When I start from the RHF determinant given by Psi4:. DOCC [ 2, 0, 1, 0, 0, 2, 1, 1 ]; Total Energy = -106.7540443603229363. the FCI energy converges to the wrong answer. When I look at the energies from all possible determinants with Sz=0; irrep Ag; and N=14 electrons in the MO single-particle basis from Psi4, there is a determinant (in that MO basis!) with an energy which is lower: E = -107.488903265175 . The FCI energy then does converge to the right answer when this determinant is given as input for Davidson iterations.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/63:390,plugin,plugin,390,https://psicode.org,https://github.com/psi4/psi4/issues/63,1,['plugin'],['plugin']
Modifiability,There are still some issues with option handling in the plugin itself that we're working on. I just wanted to get this PR in today with the hopes it could be accepted for 1.2.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/997#issuecomment-385835525:56,plugin,plugin,56,https://psicode.org,https://github.com/psi4/psi4/pull/997#issuecomment-385835525,1,['plugin'],['plugin']
Modifiability,There is now a note in the [docs](http://psicode.org/psi4manual/master/build_planning.html#how-to-configure-blas-lapack-for-building-psi4) suggesting to use openBLAS or the like over ATLAS due to the above issues. Not sure there is anything else for us to do here.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/391#issuecomment-301264467:98,config,configure-blas-lapack-for-building-,98,https://psicode.org,https://github.com/psi4/psi4/issues/391#issuecomment-301264467,1,['config'],['configure-blas-lapack-for-building-']
Modifiability,There seems to be a regression in Boost 1.60 that causes problems with Psi4 (and other projects).; It has been created as an issue in the boost python repo: https://github.com/boostorg/python/issues/56. Maybe the version could be checked in the CMake configure step. It can then either abort (if the user was trying to force the use of system boost) or use the boost distributed with Psi4. Adding this since #230 was closed (and it was unrelated anyway),MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/243:251,config,configure,251,https://psicode.org,https://github.com/psi4/psi4/issues/243,1,['config'],['configure']
Modifiability,There should not be any issue with this. We can just tar up an install and make sure to tell people to set PSIDATADIR/PSI4DATADIR to the correct location. Macs in the wild have a standard set of libraries. At one point I was working on getting Psi4 to automatically determine the value of PSIDATADIR based on the location of the psi4 binary but I can't seem to find it in the code. Maybe we should get someone to work on it and then we don't need to require end users to set this variable if we just distribute binaries.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/49#issuecomment-37945473:480,variab,variable,480,https://psicode.org,https://github.com/psi4/psi4/issues/49#issuecomment-37945473,1,['variab'],['variable']
Modifiability,"There was some discussion on coming up with a coding style guide for Psi4. I don't think the idea is that we reformat all of Psi, but if you are going to reformat a section you should *try* to adhere to the following. My personal `clang-format` settings for C++ are:; ```; {; ""BasedOnStyle"": ""Google"",; ""IndentWidth"": 4,; ""ColumnLimit"": 120,; }; ```. Personally, I feel fairly strongly about the 4 indent width, I like the Google style in general, and the column limit is sort of an arbitrary number. My YAPF setting for Python are:; ```; {; ""config"": {; ""COLUMN_LIMIT"": 119,; }; }; ```; I seem to recall there is a good reason that it's 119 not 120, but I cannot remember what that is for the life of me. Personally, not a huge fan of enforced style guides through hook mechanisms, but I can go with the flow on it. I mostly feel that being a consistent style is really nice to have, but is not required. And those hook warnings like `# noflakes...` is worse than having a style thats a little off, again, IMO. Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/752:543,config,config,543,https://psicode.org,https://github.com/psi4/psi4/issues/752,1,['config'],['config']
Modifiability,"There will be a change to the next version of the PR: ROHF ADIIS/EDIIS ""capabilities"" will be removed. As best as I can tell, an ROHF adaptation for ADIIS and EDIIS was never published, my numerical results when I try an adaptation are lackluster, and the formulation is awkward when I try to couple regular DIIS with ADIIS and EDIIS. If anybody thinks they know how to make ADIIS/EDIIS work for ROHF, let me know. Otherwise, the next version of the PR is RHF/UHF/CUHF only.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941:134,adapt,adaptation,134,https://psicode.org,https://github.com/psi4/psi4/pull/2320#issuecomment-999915941,2,['adapt'],['adaptation']
Modifiability,"There's a lot of steps in the grand Libint2 project, so here's a place to organize and update progress. Also, this is a place to see if there's a conda package configured to test each step. Table at the top includes steps that need new requirements of L2 library. List below has more intermediate steps. | step | status | libint ver & branch | Psi4 | tarball[^1] | order | component style | linux-64[^8] | osx-64[^8] | win-64[^8] |; | ---- | ------ | ------- | ---- | -------- | ---- | ------ | ----- | ------ | -------- |; | 1[^3] | longstanding L1 | L1 [evaleev:5c89451](https://github.com/evaleev/libint/tree/5c89451) | v1.3 | — | gss | `5` | L1 `_6` | L1 `_2` | — |; | 2[^4] | TEI L2 | [loriab:l2cmake](https://github.com/loriab/libint/tree/l2cmake) https://github.com/evaleev/libint/pull/148 | 20Nov20, after #1721, v1.4, 1.5 | L: `7-7-4-7-7-5_1`, MW: `5-4-3-6-5-4_1` | gss | `g5` | `_9` | `_3` | `_1` |; | 3[^5] | OEI L2 | ditto step 2 | 11Mar22, after #2388 | L: `5-4-3-6-5-4_mm25f12ob2`, MW: `5-4-3-6-5-4_mm4ob2` | gss | `g5` | rm `_13` | ~`_4`~ rm `_6` | ~`_3`~ rm `_5` |; | B[^7] | upstream L2 cmake | [loriab:new-cmake-harness-lab-rb1](https://github.com/loriab/libint/tree/new-cmake-harness-lab-rb1) https://github.com/evaleev/libint/pull/233 | 23Mar22, after #2413, v1.6, v1.7 | `5-4-3-6-5-4_mm4f12ob2.tgz` | gss | `eri_c4_d1_l5` | `_15` | `_7` | `_4` |; | C[^8] | McMurchie Davidson | any | 31Mar22, after #2414, v1.6, v1.7 |; | ~A[^6]~ | ~standardize ordering~ | ditto step B | #2537 | ditto step B | sss | `g5` | rm `_16` | rm `_8` | — |; | A' [^9] | flex solid-harm ordering | [loriab:new-cmake-2023-take2-b](https://github.com/loriab/libint/tree/new-cmake-2023-take2-b) https://github.com/evaleev/libint/pull/259 | 8May23, after #2861, v1.8, v1.9 (see also A'') | `libint-2.7.2-post1-5-4-3-6-5-4_mm4f12ob2_1` | sss | `eri_c4_d1_l5` | `_1`, c-f | c-f | c-f |; | A'' [^10] | flex solid-harm ordering, libtool-based | [upstream master](https://github.com/evaleev/libint/tree/master) any",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2442:160,config,configured,160,https://psicode.org,https://github.com/psi4/psi4/issues/2442,1,['config'],['configured']
Modifiability,"There's another problem: using the standard Python search, I get the error; ```; -- Found HDF5: /usr/lib64/libhdf5.so;... (found version 1.12.1); -- Performing Test HAS_FLTO; -- Performing Test HAS_FLTO - Success; -- Found pybind11: /usr/include (found version 2.11.1); -- Found CheMPS2: /usr/lib64/libchemps2.so.3 (found version 1.8.9); -- Found gau2grid: /usr/lib64/libgg.so.1 (found version 1.3.1); CMake Error at cmake/FindPythonModule.cmake:82 (if):; if given arguments:; ""STREQUAL"" ""True""; Unknown arguments specified; Call Stack (most recent call first):; external/upstream/qcelemental/CMakeLists.txt:3 (find_python_module); -- Configuring incomplete, errors occurred!; RPM build errors:; error: Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Bad exit status from /var/tmp/rpm-tmp.vyDLbO (%build); Child return code was: 1; ```; and sure enough ; ```; external/upstream/qcelemental/CMakeLists.txt: include(FindPythonModule); external/downstream/snsmp2/CMakeLists.txt: include(FindPythonModule); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491:635,Config,Configuring,635,https://psicode.org,https://github.com/psi4/psi4/issues/3020#issuecomment-1668306491,1,['Config'],['Configuring']
Modifiability,"There's currently a build documentation rewrite underway (to reflect the; cmake build system). I suspect that a section on using Psi4 with Easybuild; could be added as well, particularly since it sounds like no code work on; our end. Sent from my Android (without spellcheck). Please forgive the brevity.; On May 25, 2015 11:34 AM, ""wpoely86"" notifications@github.com wrote:. > No, Easybuild has support for Psi4. Maybe mentioning it in the; > documentation would be nice? Next to the manual install?; > ; > The point I'm trying to make here is that users should use (or tell their; > sysadmins to) a module system. It's no problem than to use old and new; > compilers and to support C++11/14/17.; > ; > —; > Reply to this email directly or view it on GitHub; > https://github.com/psi4/psi4public/pull/97#issuecomment-105252795.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/97#issuecomment-105262783:40,rewrite,rewrite,40,https://psicode.org,https://github.com/psi4/psi4/pull/97#issuecomment-105262783,1,['rewrite'],['rewrite']
Modifiability,"These commits allow (almost) all tests to pass under python 2 and python 3. I ran the tests under Arch Linux (gcc 4.8.1, python 2.7.5 and 3.3.2, netlib LAPACK+BLAS, boost 1.53.0). Outstanding issues:; - fd-freq-energy seg faults after printing out the 'Thermodynamic Analysis' banner under python 2 and 3. Is this a known issue?; - pywrap-db2, pywrap-opt-sowreap and pywrap-freq-e-sowreap fail to run under python 3 (maybe 3.3?). This is due to the pickle.dump in format_kwargs_for_input: under python 3, pickle.dump must write to a binary file (a restriction not present in python 2) and format_kwargs_for_input is always passed an open text file to write to. I haven't come up with a clean fix to this yet. I also haven't tested the plugins (I forgot to compile with support for them), dftd3 interface (the PSI4 documentation links to a required patch in the psi4 private repository) nor the mrcc interface (no license).",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20545979:735,plugin,plugins,735,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20545979,1,['plugin'],['plugins']
Modifiability,"These flags are set by the compiler packages, I think. They are to enable building your own conda packages IIRC.; But I also had cases where I wasn't aware of this and it severely messed up compilation of some unrelated programs that use plain Makefiles. I think cmake will largely ignore those flags for psi4. There are (de)activate scripts in `/env/<name>/etc/conda/(de)activate.d` responsible for setting these env. variables.; Not sure there are flags that turn them off, the last resort is to remove them. FWIW, building psi4 is also simple without the `psi4-dev` package. It's advantage is that it ensures compatible compilers, tooling and a couple of cmake flags. If you are knowledgable you can set them yourself. To compile against conda-provided mkl, libint2, etc the `psi4-dev` is not needed. The normal `psi4` package is enough.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684:419,variab,variables,419,https://psicode.org,https://github.com/psi4/psi4/issues/2416#issuecomment-1026016684,1,['variab'],['variables']
Modifiability,"Thirding the enthusiasm for this. A couple notes:; * As discussed on conference call, `scfgrad` is just fine on its own and shouldn't be affected by the gradient refactoring elsewhere; * Let me know if you continue investigating noise in the FD. I have a lot of experience testing that code.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1664#issuecomment-502144293:162,refactor,refactoring,162,https://psicode.org,https://github.com/psi4/psi4/pull/1664#issuecomment-502144293,1,['refactor'],['refactoring']
Modifiability,"This PR addresses #2379 . All fsapt tests pass after refactoring (except fsapt-d) Any insights? This is the error message (Running test fsapt-d). ```; !----------------------------------------------------------------------------------!; ! !; ! Unsuccessful run. Check input, particularly geometry in [a0]. Model: !; ! Model(method='hf-d3', basis='(auto)') !; ! !; !----------------------------------------------------------------------------------!; ```. Additional information:; I compiled my code with gcc",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877:53,refactor,refactoring,53,https://psicode.org,https://github.com/psi4/psi4/pull/2385#issuecomment-997235877,1,['refactor'],['refactoring']
Modifiability,This PR adds explicit [permissions section](https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions) to workflows. This is a security best practice because by default workflows run with [extended set of permissions](https://docs.github.com/en/actions/security-guides/automatic-token-authentication#permissions-for-the-github_token) (except from `on: pull_request` [from external forks](https://securitylab.github.com/research/github-actions-preventing-pwn-requests/)). By specifying any permission explicitly all others are set to none. By using the principle of least privilege the damage a compromised workflow can do (because of an [injection](https://securitylab.github.com/research/github-actions-untrusted-input/) or compromised third party tool or action) is restricted.; It is recommended to have [most strict permissions on the top level](https://github.com/ossf/scorecard/blob/main/docs/checks.md#token-permissions) and grant write permissions on [job level](https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs) case by case.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2723:229,extend,extended,229,https://psicode.org,https://github.com/psi4/psi4/pull/2723,2,['extend'],['extended']
Modifiability,"This PR exposes EOMCC oscillator strengths to psivars and makes other miscellaneous changes:. - Adds a comment to the TD-DFT code to disambiguate between eigenvectors of two different matrices.; - Renames a variable created earlier in the `cc` cleanup series.; - Makes the `oscillator_strength.cc` and `ex_oscillator_strength.cc` files more similar; - Begins changing `cc47` to newstyle.; - Adds refactor TODOs. **That said**, the EOMCC code currently only supports irrep-separated indexing. The irrep-combined indexing isn't easily obtainable due to the awkward way `cceom` passes information to `ccdensity`. While I could fix this, I'll save that until after `ccdensity` has a wavefunction, so the task becomes easier. I'm happy to make an issue so we don't forget. ## Checklist; - [x] Modified `cc47` passes. ## Status; - [x] Ready for review; - [x] Ready for merge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2514:207,variab,variable,207,https://psicode.org,https://github.com/psi4/psi4/pull/2514,2,"['refactor', 'variab']","['refactor', 'variable']"
Modifiability,"This PR will have a merge conflict with my #2247. I wasn't comfortable touching the SCF code this close to 1.4 _then_, and I'm still not comfortable with it now. My vote is to keep this as a 1.5 target. I would prefer a dedicated option or keyword argument to `energy` for the short-circuit. Yes, this is a _reasonable_ behavior, but:. 1. Explicit is better than implicit.; 2. The SCF code is too complicated as-it-is due to overloading of the meaning of the `iterations_` variable. It was reasonable in one or two places, but becomes a mess as different parts of the code use it slightly differently. I'm paranoid of variable overloading, and having a special case of `maxiter = 0` is too close to that for comfort.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2073#issuecomment-885927352:473,variab,variable,473,https://psicode.org,https://github.com/psi4/psi4/pull/2073#issuecomment-885927352,2,['variab'],['variable']
Modifiability,"This command fails:; ```; $ cd samples/cc24 && psi4 test.in ; Traceback (most recent call last):; File ""/usr/local/bin/psi4"", line 338, in <module>; exec(content); File ""<string>"", line 31, in <module>; File ""/usr/local/lib/psi4/driver/driver.py"", line 613, in gradient; plan.compute(); File ""/usr/local/lib/psi4/driver/driver_findif.py"", line 1306, in compute; t.compute(client=client); File ""/usr/local/lib/psi4/driver/task_base.py"", line 166, in compute; self.result = qcng.compute(; File ""/usr/local/lib/python3.9/site-packages/qcengine/compute.py"", line 105, in compute; output_data = executor.compute(input_data, config); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 121, in compute; pversion = parse_version(self.get_version()); File ""/usr/local/lib/python3.9/site-packages/qcengine/programs/psi4.py"", line 90, in get_version; exc[""proc""].wait(timeout=30); File ""/usr/local/lib/python3.9/subprocess.py"", line 1189, in wait; return self._wait(timeout=timeout); File ""/usr/local/lib/python3.9/subprocess.py"", line 1909, in _wait; raise TimeoutExpired(self.args, timeout). subprocess.TimeoutExpired: Command '['/usr/local/bin/psi4', '--version']' timed out after 30 seconds. Printing out the relevant lines from the Psithon --> Python processed input file:; core.IO.set_default_namespace(""h2o""); core.set_global_option(""REFERENCE"", ""uhf""); core.set_global_option(""BASIS"", ""DZ""); core.set_global_option(""ROOTS_PER_IRREP"", [0, 0, 1, 0]); analytic_grad = gradient('eom-ccsd'); --> findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 5, ""UHF-EOM-CCSD finite-diff. (3-pt.) vs. analytic gradient to 10^-5""); core.set_local_option(""FINDIF"", ""POINTS"", 5); findif_grad = gradient('eom-ccsd', dertype=0); compare_matrices(analytic_grad, findif_grad, 6, ""UHF-EOM-CCSD finite-diff. (5-pt.) vs. analytic gradient to 10^-7""). !----------------------------------------------------------------------------!; ! !; ! Command '['/usr/local/bin",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2803:619,config,config,619,https://psicode.org,https://github.com/psi4/psi4/issues/2803,1,['config'],['config']
Modifiability,"This has another annoying consequence, noted on a [forum topic](http://forum.psicode.org/t/problems-with-geometry-convergence-in-dihedral-scan/1808). When attempting the basis guess, it will attempt to read previous orbitals but not find them. The following appears in the output file.; ```; Warning! Guess was READ without Ca set, switching to CORE! ; This option should have been configured at the driver level.; ```; The use of core may be a very terrible choice indeed, which caused the issues in the forum topic. Here's a simplified example:; ```; molecule phenol {; 0 1; H 0.0000000000 0.9803530335 -0.8498671785; O 0.0000000000 0.6988545188 0.0536419016; O 0.0000000000 -0.6988545188 0.0536419016; H 0.0000000000 -0.9803530335 -0.8498671785; }. set {; basis cc-pvdz; }. set scf {; basis_guess true; maxiter 300 ; fail_on_maxiter false; }. dihedrals = [i for i in range(0,185, 5)] ; PES = []. for phi in dihedrals:; my_string = ""1 2 3 4 "" + str(phi); set optking geom_maxiter = 250 ; set opking opt_coordinates = cartesian; set optking fixed_dihedral = $my_string; print(phi); try:; E = optimize('scf'); print(E); PES.append((phi, E)) ; except SCFConvergenceError:; continue ; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732:382,config,configured,382,https://psicode.org,https://github.com/psi4/psi4/issues/1492#issuecomment-639150732,1,['config'],['configured']
Modifiability,"This input file:; ```; memory 5 GB. molecule uf4 {; 0 1; U; F 1 1.7; F 1 1.7 2 90.0; F 1 1.7 3 90.0 2 180.0; F 1 1.7 4 90.0 3 180.0; }. set basis LANL2DZ; set scf_type pk; set guess CORE; optimize('hf'); ```; produces the following output:; ``` ; Writing optimization data to binary file.; Final energy is -448.6902827985336; Final (previous) structure:; Cartesian Geometry (in Angstrom); SI 0.0000000000 0.0000000000 0.0000000000; F 0.0000000000 -1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 1.4786286784; F 0.0000000000 1.4770587400 -1.4786286784; F 0.0000000000 -1.4770587400 -1.4786286784; Saving final (previous) structure.; Removing binary optimization data file.; --------------------------; OPTKING Finished Execution; --------------------------. Final optimized geometry and variables:; Molecular point group: d2h; Full point group: D2h. Geometry (in Angstrom), charge = 0, multiplicity = 1:. U; F 1 2.089987; F 1 2.089987 2 89.939134; F 1 2.089987 3 90.060866 2 -180.000000; F 1 2.089987 4 89.939134 3 -180.000000. Removing binary optimization data file.; Cleaning optimization helper files. Psi4 stopped on: Tuesday, 31 July 2018 04:29PM; Psi4 wall time for execution: 0:18:57.70. *** Psi4 exiting successfully. Buy a developer a beer!; ```. It seems that Psi4 is treating it as Uranium, as the energy is different from SiF4 at the same geometry, and is therefore just a printing problem.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1114:794,variab,variables,794,https://psicode.org,https://github.com/psi4/psi4/issues/1114,1,['variab'],['variables']
Modifiability,"This is a list of things that are generally agreed as ""good things to do"", but nobody has actually tackled yet. The hope is that this is used a central repository of ""have you thought about this"" comments. Note that this is a not a feature wish list.; ## High; - [ ] Deprecate PSIO by moving to HDF5. With a temporary under the hood PSIO move to HDF5.; - [x] Remove `boost::python` and replace with PyBind11.; - [x] Possibly remove Boost with C++11 features. Std managed pointers are high on the list.; - [x] Switch Psi4 from a binary to a library; - [x] Allow more flexible external libraries; - [x] Remove C-side python calls. DFT-D3, DFT functionals, BasisSet parsing, etc.; - [x] Add a dictionary to the Wavefunction object thats holds the current Psi Variables.; ## Medium; - [ ] Rewrite LibOptions as a property map or just a general dictionary. Needs to be more object oriented, less global, and capable of encompassing all QCDB.; - [x] Full Python3 support. This is mostly done, but small sections are not Python3 compatible.; - [ ] Ability to combine DF fitting sets via partial decomposition of a expanded Coulomb metric.; - [x] ECP would be a great addition.; - [ ] Purge all `char*` from Psi4. Issues with dropping pointers and python exportation.; - [ ] A smarter SCF solver that can change iterations based on current conditions, see #211.; ## Low; - [ ] More flexibility in compilation of integrals. For example compiling 3-index and Coulomb metric integrals at a higher AM than the conventional basis set.; - [x] 4th CMake rewrite. Currently overly cautious about what needs to be recompiled.; Our CMake files should ensure that the compilers support all the features that we need. ; - [ ] EFP Gradients: https://github.com/psi4/psi4private/issues/70; - [ ] Uniform space setter for DMRG/CI/MCSCF/etc computations.; - [ ] `change_file_namespace` should be able to tie multiple files together and should return the status rather than `None`, #645.; - [x] Molecule parser can accept atom",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/402:566,flexible,flexible,566,https://psicode.org,https://github.com/psi4/psi4/issues/402,3,"['Rewrite', 'Variab', 'flexible']","['Rewrite', 'Variables', 'flexible']"
Modifiability,"This is great. All of my plugin compilation stuff is working now with the latest conda release, so I'm going to close this. Thanks for all the hard work!",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/214#issuecomment-176947331:25,plugin,plugin,25,https://psicode.org,https://github.com/psi4/psi4/issues/214#issuecomment-176947331,1,['plugin'],['plugin']
Modifiability,"This is not a psi4 issue, but users are affected by it. Something is off with the new single dynamic library from intel and gcc + mkl2017 building. Essentially, sometimes you can get over subscription (nested OpenMP+MKL threading), and sometimes threading does not work at all. Through trial and error I found the following env variables set the expected behavior:. ```; export MKL_THREADING_LAYER=GNU; export MKL_INTERFACE_LAYER=GNU; export OMP_NESTED=""FALSE"" <-- supposed to be libgomp default, but is not?; ```. Maybe not all 3 are needed, or there is some other flag. I was just happy to get the proper behavior. I tested gcc 4.9.4/6.3 and MKL2017 and MKL2017.2",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/671:328,variab,variables,328,https://psicode.org,https://github.com/psi4/psi4/issues/671,1,['variab'],['variables']
Modifiability,"This is ready for review. With my latest changes:; - The user specifies a number of roots to seek to converge. If the system has symmetry, we spread them around among the irreps. For example, 10 roots in C2v means `[3, 3, 2, 2]` in whatever order the irreps are for the given system. To have more granular control over what symmetries to seek roots in, the user can pass a list: `[10, 0, 0, 0]` will seek the 10 roots in the totally symmetric irrep.; - Option for triplets is now passed down to the solver correctly. `""none""` is the default (singlet roots only); `""also""` will compute as many singlet roots as triplet roots, so this makes the calculation cost twice as much (at least). Notable limitations:; - restricted triplets: RPA or TDA, Hartree-Fock only. Notes in code state that the XC kernel is only spin-adapted for singlets.; - unresctricted: RPA or TDA, Hartre-Fock and LDA only. Notes in code state that there is a bug for UKS beyond LDA, but aren't more specific than that. I am waiting on #1885 to be in to write docs. An example of PsiAPI usage:; ```python; import psi4. from psi4.driver.procrouting.response.scf_response import tdscf_excitations; from psi4.driver.p4util import spectrum. psi4.core.set_output_file(""moxy.out""). # structure from Pederson et al., CPL, submitted; moxy = psi4.geometry(""""""0 1; C 0.152133 -0.035800 0.485797; C -1.039475 0.615938 -0.061249; C 1.507144 0.097806 -0.148460; O -0.828215 -0.788248 -0.239431; H 0.153725 -0.249258 1.552136; H -1.863178 0.881921 0.593333; H -0.949807 1.214210 -0.962771; H 2.076806 -0.826189 -0.036671; H 2.074465 0.901788 0.325106; H 1.414895 0.315852 -1.212218; """""", name=""(S)-methyloxirane""). psi4.set_options({; 'save_jk': True,; }). method = 'HF'; basis = 'cc-pVDZ'; e, wfn = psi4.energy(f""{method}/{basis}"", return_wfn=True, molecule=moxy); res = tdscf_excitations(wfn, states=8, triplets=""also""). from typing import Tuple, Dict. import numpy as np; import pandas as pd; import altair as alt. def plot_spectrum(data: Dict,",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226:814,adapt,adapted,814,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632666226,1,['adapt'],['adapted']
Modifiability,This is ready to be merged and after the pipeline has to be configured: https://dev.azure.com/psi4/psi4/_build,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1368#issuecomment-441602062:60,config,configured,60,https://psicode.org,https://github.com/psi4/psi4/pull/1368#issuecomment-441602062,1,['config'],['configured']
Modifiability,"This is the continuation of a discussion that started in another issue (#504). Formatted checkpoint files or Molden files are not great as a container format. It makes sense to have them as an output format (because some other programs can already read them.) However, they are not suitable as an extensible container format:. 1) They lack an open way of extending/improving the format in future.; 2) They are just defined ad hoc as the file format that is being produced by some code.; 3) There is no unambiguous document specifying these formats. A format based on HDF5 would make more sense. It has its deficiencies too unfortunately: the format specification is very complex, with only one (open source) library implementing it. Something simpler would be nice, e.g. a ZIP file containing the following would make a lot of sense:. - An index file (XML?) with metadata for all the data in the archive.; - One file per (big) array: binary data with some header to specify byte order, data type, ... e.g. the npy format. (See https://docs.scipy.org/doc/numpy-dev/neps/npy-format.html); - Other text or log files. This similar to the opendocument specification, where it seems to survive for many years now. The main disadvantage of such a zip file, compared to HDF5, is that you cannot easily access a part of an array without unzipping the entire array. You can however access one entire array without unzipping the other ones.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/562:355,extend,extending,355,https://psicode.org,https://github.com/psi4/psi4/issues/562,1,['extend'],['extending']
Modifiability,"This is the list of changes made for the wavefunction passing update. This is a very large change that modified virtually every file in Psi4, details of the why and what can be found [here](https://github.com/psi4/psi4public/wiki/Changes-to-Information-Passing-in-Psi4-%28Jan-2016%29). This is slightly long, but please read this fully as there is a decent chance that advanced users will have to make some tweaks to their existing input files. A quick rundown of the changes:; - Energy, gradient, etc now actually return a energy (a number), gradient (a matrix), etc. A good example of these changes is [this](https://github.com/psi4/psi4public/commit/a559003d1e4be8ac36107ba64751ee6db78c8f3b#diff-684250b9cfb2a0fa201f5dc123c90964L48) diff.; - All methods now take new kwargs (python variables):; - `return_wfn` - return the methods wavefunction: `scf_e, scf_wfn = energy('SCF', return_wfn=True)`; - `ref_wfn` - what wavefunction to use as reference: `mp2_e = energy('MP2', ref_wfn=scf_wfn)`; - `molecule` - give a molecule for the calculation to be run on (mostly an internal kwarg); - The global molecule is now only touched/modifed by the input file, the user parameter `activate` and by the optimize function.; - OEProp, cubewriter, and the molden writer all need to be explicitly passed a wavefunction python-side.; - These changes will allow for extremely complex workflows. Check out [`proc.py/run_sapt`](https://github.com/dgasmith/psi4public/blob/wavefunction_pass/share/python/proc.py#L2611) for an interesting case of passing wavefunctions and molecules into primary `proc.py` functions.; - `DF` and `RI` modifiers to methods are no longer valid (e.g., `energy('RI-MP2')`). Please use the `mp2_type` option instead.; - Fixed numerous bugs/oddities and moved everything towards a more object oriented workflow. ---. A few notable issues that people may run into:; - The `psi4/lib` folder has been moved to `psi4/share` please update all `PSIDATADIR` references accordingly.; - `Process::env",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246:785,variab,variables,785,https://psicode.org,https://github.com/psi4/psi4/pull/246,1,['variab'],['variables']
Modifiability,"This is the list of issues tied into wavefunction_pass that should be cleared up before the 1.0 release.; - [x] Methods also take the `molecule` kwarg, it is not clear if `ref_wfn` or `molecule` should supersede the other yet (SCF methods can only take a molecule at the moment. `ref_wfn` supersedes `molecule` in all other methods.).; - [x] Not all methods return wavefunctions yet. For example what does a SAPT wavefunction look like?; - [x] psimrcc Wavefunction; - [x] SAPT Wavefunction; - [x] EFP Wavefunction; - [x] Will just pass through the reference wavefunction with a warning; - [x] If I pass SCF a `ref_wfn` with orbitals, the `ref_wfn` orbitals are not used (Thats fine, see above).; - [ ] We would like a SCF level wavefunction to be able to cast itself back C1 symmetry so that we can run symmetry-based SCF and then use this wavefunction in symmetry intolerant code. These transforms are reimplemented in every symmetry tolerant code. (Moved to another ticket); - [ ] Saving of binary `optking` information may break for very complex optimizations (database, cbs wrapper, etc). Optimization proceeds, but always restarts at the first iteration so convergence is slow. (Moved to another ticket); - [x] Plugin examples are starting to show their age. We probably need to overhaul these.; - [x] The documentation needs to reflect the above changes (see #249).; - [x] DF and RI calls should soft fail with a proper error message.; - [x] Cubeprop, Molden, OEProp etc functions should fail better when not passed a wavefunction.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/259:1216,Plugin,Plugin,1216,https://psicode.org,https://github.com/psi4/psi4/issues/259,1,['Plugin'],['Plugin']
Modifiability,"This is the mega-issue for the cleanup of excited-state variables. I come to this as a spinoff of the cc modernization mega-issue, which is a spin-off of the density sanitizing mega-issue. The goal of this mega-issue is to synchronize variable names across TDDFT, EOM, and ADC, per the standard introduced in #2462 and amended slightly in #2475. ### The Standard; We support the following access patterns:; ```; f""{method} ROOT 0 ({initial_state}) -> ROOT {irrep_idx} ({target_state}) EXCITATION ENERGY""; f""{method} TD-HF ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY; f""{method} ROOT 0 -> ROOT {global_idx} EXCITATION ENERGY - {transition} TRANSITION; ```. - `{method}` should include both the _family_ of the method and the _specific method_ used. For example, both `CC` and `CC3`.; - `{global_idx}` is the index of the root, ordered by energy, in the space of all roots.; - `{irrep_idx}`is the index of the root, ordered by energy, in the space of roots of that irrep. This should **never** be larger than `global_idx` and is identical `global_idx` for molecules without symmetry.; - `{initial_state} ^ {target_state} = {transition}`. ### The Status. - [x] DFT; - [x] #2462 - initial cleanup; - [x] (part of) #2477 - set TD-DFT variables with names starting TD-SCF or TD-DFT (maybr both?) in addition to TD-fctl; - [ ] EOM; - [x] #2475 - variables set directly in `cceom`; - [x] Variables set directly in `ccdensity`; - [x] #2514 - Oscillator strengths; - [x] #2525 - Einstein coefficients, rotation strengths; - [x] #2538 - All access patterns ; - [ ] Variables set indirectly, via oeprop; - [X] #2479 - remove mutlipole component variables from being set in oeprop; - [x] #2485 - condense multipole setting functions into one; - [ ] #2541 Rename multipole variables from `oeprop` according to the standard; - [x] ADCC; - [x] #2513 ; - [ ] Final cleanup pass",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2486:56,variab,variables,56,https://psicode.org,https://github.com/psi4/psi4/issues/2486,8,"['Variab', 'variab']","['Variables', 'variable', 'variables']"
Modifiability,"This is the variable to vary? https://github.com/ddsolvation/ddX/blob/main/tests/matrix_derivatives.f90#L129. I'm having problems getting an editable pyddx build working with psi, so I'm inclined to merge this as-is. This PR against c-f 0.4.1 is clean against psi4 current master.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2952#issuecomment-1538765695:12,variab,variable,12,https://psicode.org,https://github.com/psi4/psi4/pull/2952#issuecomment-1538765695,1,['variab'],['variable']
Modifiability,"This is valuable, thank you. As you might suppose, we did one Python 3 compatibility pass some time ago, but none of the core developers regularly works in 3, to my knowledge.; - The fd-freq-energy segfault is because there was an exit() command in the input file. It's clean for me when I comment it out, and I've referred the test case to the appropriate developer.; - Thanks for the reckoning on what remains to be tested. The plugins don't have much exotic python, though I should probably check them for print(...), and for dftd3 and mrcc, one should work if the other does. Perhaps you were using the developers' documentation (http://sirius.chem.vt.edu/psi4manual/master/index.html) instead of users' (http://sirius.chem.vt.edu/psi4manual/latest/index.html)? The former links to the private repo and the latter to the public one. The patch is here (https://raw.github.com/psi4/psi4release/master/lib/scripts/patch_grimme_dftd3) and should be universally readable, if you ever want it.; - Those pywrap test cases fall within my purview. I've been considering re-doing the sow/reap routines that use format_*_for_input functions for a while. Python 3 compatibility will provide another impetus/constraint for that. I don't see a clean solution to it either.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/9#issuecomment-20548249:430,plugin,plugins,430,https://psicode.org,https://github.com/psi4/psi4/pull/9#issuecomment-20548249,1,['plugin'],['plugins']
Modifiability,"This is what I do for my Catalina build with gcc9/mkl against conda python+libraries. . a) get `psi4-dev psi4-rt psi4 -c psi4/label/dev` from conda (conda psi4 binaries plus dependencies to build from source); (`conda remove -f v2rdm_casscf` because it gives symbol errors); b) `export PATH=/Users/kruse/homebrew/bin:$PATH` for my homebrew gcc-9; c) run the below script (This is what `psi4-path-advisor` gave me plus making sure the correct compilers are used, plus a custom installation dir. Since recently I also have to turn of 2 default plugins because of symbol problems `-DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF`, might not be necessary for everyone). ```; #!/bin/bash; export MKLROOT=/Users/kruse/qc/miniconda3; rm -rif objdir; /Users/kruse/qc/miniconda3/bin/cmake -H. -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsCache.cmake -C/Users/kruse/qc/miniconda3/share/cmake/psi4/psi4DepsMKLCache.cmake -DCMAKE_C_COMPILER=gcc-9 -DCMAKE_CXX_COMPILER=g++-9 -DCMAKE_Fortran_COMPILER=gfortran-9 -Bobjdir -DCMAKE_INSTALL_PREFIX=/Users/kruse/qc/psi4.bin -DENABLE_ambit=OFF -DENABLE_CheMPS2=OFF; ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317:542,plugin,plugins,542,https://psicode.org,https://github.com/psi4/psi4/issues/1870#issuecomment-615249317,1,['plugin'],['plugins']
Modifiability,"This issue has a bit more to it than just removing the line Andy mentioned. The computation dies due to `'psi4.core.variable: Requested variable BRUECKNER CONVERGED was not set!\n'`, rather than the fact that convergence failed. Is there a standard way to represent a convergence error, C-side? `dct` and LMP2 in `cc` throw `ConvergenceError`, failure during an orbital-optimized `occ` computation gets you a generic `PSIEXCEPTION`, and I haven't checked other things.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661:116,variab,variable,116,https://psicode.org,https://github.com/psi4/psi4/issues/1864#issuecomment-628803661,2,['variab'],['variable']
Modifiability,"This issue is a code cleanup wishlist. Please place a code cleanup issue here if you see it in a PR, but fixing it would be outside the scope of the PR. - [x] Remove `new` from `lib3index/fittingmetric.cc`. In some cases, `new` is used to initialize... a raw pointer that points to `std::shared_ptr<OneBodyAOInt>`. In 2022, this should be a `std::vector`.; - [ ] `onebody.h` and its derived classes have many member variables that are `double*`. Let's change to `std::vector<double>` if we can, to avoid having to worry about new/delete.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2412:416,variab,variables,416,https://psicode.org,https://github.com/psi4/psi4/issues/2412,1,['variab'],['variables']
Modifiability,"This issue is intended more as a discussion, than a real issue. At the moment it is not possible to call Psi4 under MPI with more than one process per node because of [this](https://github.com/psi4/psi4/blob/fe3ab0d351e05276185ad838f3bcf2c0321be2fe/psi4/driver/procedures/proc.py#L1340). Basically this creates a file that has a non-unique name on each process and then when it goes to delete the file each process deletes the same file leading to an error for every process after the first one. Although this could be fixed easily (either only write to some master process or ensure that the filename is unique. The latter is easily done [in python](http://stackoverflow.com/questions/2961509/python-how-to-create-a-unique-file-name) and [in C++](http://en.cppreference.com/w/cpp/io/c/tmpnam), or by using the process ID) this has been a problem before and is likely to be a problem again, hence I am hoping to reach a more permanent solution. To me the most obvious solution is to make a file writer (stream writer is even better as it then also works for printing, in turn killing two birds with one stone) object/library that handles all read/writes and does so in a way that will not interfere with MPI. In theory `libpsio` could be used for this, but it would have to be extended to writing other types of files aside from binary (I'm under the impression that it only writes binary files). Thoughts?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/548:1277,extend,extended,1277,https://psicode.org,https://github.com/psi4/psi4/issues/548,1,['extend'],['extended']
Modifiability,"This issue is similar to #3084. For psi4 installed via conda/mamba (both 4.18.2 and 4.19) on an hpc system that has a symlink for the /home directory (the same hpc system in the prior issue), psi4 has trouble resolving paths that don't call `.resolve()`. while the changes made in response to #3084 mostly fix the issue, there appears to be two other places `.resolve()` should be added:. https://github.com/psi4/psi4/blob/e105cc2346fba36ccacb77bf8944a3dcf6c097f2/psi4/__init__.py#L47-L48. The full error is below:; ```; [2024-01-25 07:17:41 EST] INFO: qcfractalcompute.config: Reading configuration data from configs/config.3049902-1.yaml; Traceback (most recent call last):; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <module>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/lila/home/iacovec/miniforge3/envs/qcfractalcompute/lib/python3.12/site-packages/qcfractalcompute/run_scripts/qcengine_list.py"", line 12, in <dictcomp>; progs = {x: qcengine.get_program(x).get_version() for x in qcengine.list_available_programs()}; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/qcengine/programs/psi4.py"", line 111, in get_version; raise TypeError(f""Error {rc} retrieving Psi4 version: stdout: {so}, stderr: {se}""); TypeError: Error 1 retrieving Psi4 version: stdout: , stderr: Traceback (most recent call last):; File ""/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/bin/psi4"", line 213, in <module>; import psi4 # isort:skip; File ""/lila/home/iacovec/miniforge3/envs/qcfractal-worker-psi4-18.2/lib/python3.10/site-packages/psi4/__init__.py"", line 64, in <module>; raise KeyError(f""Unable to read the Psi4 Python folder - check the PSIDATADIR environmental variable - current value is {str(data_dir)}""); KeyError: 'Unable to read the Psi4 Python folder - check the PSIDATADIR environmental va",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3126:570,config,config,570,https://psicode.org,https://github.com/psi4/psi4/issues/3126,4,['config'],"['config', 'configs', 'configuration']"
Modifiability,"This looks great. It's good to have the large monolithic chunks of driver code split into smaller parts, printing functions tucked away and not scattered across calculations. Counterpoise-corrected CBS is something I wanted to do for a while!. One point I'd like to make quite early in this PR: the whole pydantic validation mechanism is rather obscure. I understand that each `Computer` inherits from the base class, but I am not 100% sure how things fit together and launching what will get me where. The two tests are currently only of little help.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-437622451:388,inherit,inherits,388,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-437622451,1,['inherit'],['inherits']
Modifiability,This may have been me. I am in the process of updating the variable types for the irreducible representations. The change in #780 passed all the tests but looks like we missed this one.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/786#issuecomment-323517419:59,variab,variable,59,https://psicode.org,https://github.com/psi4/psi4/issues/786#issuecomment-323517419,1,['variab'],['variable']
Modifiability,This pull request **fixes 1 alert** when merging 14f8917fd7f7086609f5b3f16c096fdba1558e18 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7ce9ad1516a72c19bd8c9f3dccdc4c10d2f2880f). **fixed alerts:**. * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-552686361:272,Variab,Variable,272,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-552686361,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 1 alert** when merging 4ceb1dad366138ee31cd7e3cfbcda9d385cc1ad7 into ccd3033072fbb113ab72d073e42948f2b57ab157 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-91582455a25ce78977159664203c6cce127d1ae2). **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2111#issuecomment-777691236:285,variab,variable,285,https://psicode.org,https://github.com/psi4/psi4/pull/2111#issuecomment-777691236,1,['variab'],['variable']
Modifiability,This pull request **fixes 1 alert** when merging fa0a259cc408f2b473d2078ccbca856bc1f6af97 into 86700a90f5be3ec972390e32b2e94eeae595745e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a1a7e445016a2966513d5d5982975bad6e664678). **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-811784769:285,variab,variable,285,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-811784769,1,['variab'],['variable']
Modifiability,This pull request **fixes 2 alerts** when merging 0c7c1fac7addb707ee4a5377b4569d72c5433145 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c4636a47f18e76e7507c38b881d971f59e32bc32). **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-553844970:273,Variab,Variable,273,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-553844970,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 2 alerts** when merging 57c132298328a72eef35634a996cdb391c51b350 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-804b02d86e041886a0308dcd78db933e7b298ff7). **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-554131598:273,Variab,Variable,273,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-554131598,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 2 alerts** when merging c65585fee126e64677a15c3a38c26550dec7292e into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-343491ae750ff9b0b0ef14efed537510da6a064c). **fixed alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949#issuecomment-656733658:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1949#issuecomment-656733658,1,['variab'],['variable']
Modifiability,This pull request **fixes 2 alerts** when merging dd11d065a8e546d329885b6d196becbb2595e491 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a50b6a440403124d5c5a57a263ce623facece106). **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-554441584:273,Variab,Variable,273,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-554441584,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 2 alerts** when merging ec0f3fd9697bbafd42b2b8ef50b33fd1ffb816eb into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af1e537e49679515080ad072a7355de53c587cd1). **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-554630526:273,Variab,Variable,273,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-554630526,1,['Variab'],['Variable']
Modifiability,This pull request **fixes 3 alerts** when merging 0949406d24c3a58b269c260eef7307c4a3fa0ecb into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-408feb738b27e0191da3dcc7821bc3329b691950). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652931619,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 0a831d55b0279a3994e266e8be57b0c40282afdc into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35d47f355c035e2c7831af16a00367c164707166). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-652525590,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 26dd489b730d6192edaec19d716bd118288b2761 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e243df6c568db8e3fb5c827f875da7df7629608). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644751262,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 2e4489cc2418b61564026101d6565950833492d9 into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0426279eb5b6e50edb1b6f56ac45cccedd202f76). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-651333350,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 319e8ae23f1af15a0e12b22aa2f3c59f4763fd28 into 26bae16efac9e3bd212a7433def625f370fb9a17 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-494b3553ec0f3442315c9d0f11847e9f40d0f7f3). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653467444,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 59f9232b2dcdb5b83df6e799aab9781dc7400ec0 into 9a2de04698459b23e55df5f582873fcff9b9a320 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b10a9d0172ee67a707b5e4730ed0a64843867e5a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645669096,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 886f6f2c3bb882a600f22d42fe55683417408405 into 5f1a24a8b6b77b0d368cd434c0584f027a28d975 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e817128cb8d64d1e00edc7bd75efa82e352418d). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-643662031,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging 90d1421addd3d748d40a0d2ca5d603c4e00ee439 into 2b2c8bc97d85ca42187ce33555c58a1a281213ca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8b0108d7532de3a536fd291df05b83ed13f5e8a2). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-655675838,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging a2046e3cf4e86590471f2507d714a9e713e47ffa into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-10e94c75ac5916bddaeb30d709d3e42401046033). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-650202722,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging b907a23b7fc19b0f53df66237412be4ffa936d38 into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-14201e7d5a09c3b6d04c364e80720d8cae55b372). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-645294586,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging c04bf332addc72cf7d17f710b9ebf9046e67745d into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cd35c8eb5ac96c8f187051a362c86e3042b4139a). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644908614,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging e8a99524a098b99c215ea9c9fd0d9f2b81fd5f9b into 7fd0f72094fec0e74944fe3f66ebdd0f69750dcd - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-485d0633a6e802d5dead0de11395e4fd055349fb). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-644301799,1,['variab'],['variable']
Modifiability,This pull request **fixes 3 alerts** when merging ebe0f4e9884c91bd725e8bcdb4b49447bb18b85f into 90403ec0e424a296679aa5533afec8b8cbd4d1af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-010d589fd9aa17b4699886375c9ee1ac5e7ce0cd). **fixed alerts:**. * 2 for Unused local variable; * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-653239861,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 051af5c7b7a04c85e918d1bab780e0e1be8b8427 into 966d1bd4ed698b2a92f19244a9dc3cf0589ffaa4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f96fa45ea0b772b7a326b82d0e03a5e54e35892a). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-833310946:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-833310946,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 1a33c699a94b219ac1f78677ff7c7d1d2ae9633a into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f3dd5c800cedc9857a22d2e053adf844947bfde2). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-843700280:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-843700280,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 1e663e4405d0ee6e817ea04c19e27ebdefe5f06f into 86700a90f5be3ec972390e32b2e94eeae595745e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-bd0002e1530fab34586f933b3c3700ccd8646470). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-808696898:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-808696898,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 446c9cda06c5b10c35de59720f1668093869e65e into d9d8477034143442930324f572b94359866facfe - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-22e72078e2905a1856f7a0201ceb63f627f89bf8). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-840026837:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-840026837,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 5c8449111d5395b7681bdf87e854fe4fe08c4632 into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8e369df073a3f0d6460b21134d06f46209346a56). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-843818784:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-843818784,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 6e22cbaa74043ff09b0f8f4021c564ba6176205c into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-449dabd78dc596e8015ffaa2cd3f8d9f92ce9ee1). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-844793571:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-844793571,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 70cbf92b6086317a9bc1b27addb35dc01e013aeb into d9d8477034143442930324f572b94359866facfe - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-18a2331a53e059d4efb3d8e5771d1a81cb9cf842). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-840626641:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-840626641,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 79d458251b577a631127908d61425763699a9a2e into 59d998d3009553deb6db1981258cb6cba738ef03 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b3848b1769ade689d2094b8b4262e0caeb908599). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-808092025:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-808092025,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging 97583a2fe157ac72e92ca1da2516987a835dc80d into d9d8477034143442930324f572b94359866facfe - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-863fee0b4deeeadc1f46d7853d0b5f1c927a10f7). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-839930313:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-839930313,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging aa52f722e36f304750019757639204d0cb98da0a into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-75cba35cdb7174276f3d428cb5ca1f16d25c0140). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-844455243:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-844455243,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging d1fdb12e1be807d87963825d4f4b4b0297732689 into a97ceda07370b4b327ce77e1229c9c73ecbe11c6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-1018b07a742c71c8b1b0466674ffc29f35f097fe). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2180#issuecomment-845548975:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2180#issuecomment-845548975,1,['variab'],['variable']
Modifiability,This pull request **fixes 5 alerts** when merging f1483ae96341a60d4427b16c6642b889aa841b8c into b4a272f74b73df8cf0edc4096081a250c495d55e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-887d4808c201ef9676ddb743953f6cb317b6f602). **fixed alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module\-level cyclic import; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2142#issuecomment-835513611:337,variab,variable,337,https://psicode.org,https://github.com/psi4/psi4/pull/2142#issuecomment-835513611,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 0ef7299dbeb1df436942434fc1a7410e7de1aa9b into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-38e66840c1a14b4f9cf960945cc7ce4d28b8e36c). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-600390806:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-600390806,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 16b8eee6e73e047222ca1f72552a3decb7a440d4 into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c001c1b601b28c10f5d50bb7c7219af804572bd4). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-612656089:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-612656089,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 36bb8de592ebf59f111f71ec04d06c3ed8a637ed into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9b2357882c5dced37991df9ddc57ba7371b38743). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-632336456:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-632336456,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 42ee16830479f5bce0088efea93e053816fe2dee into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-03162bd6f15fc285eb50ea38e0a73ecdc8426b5b). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-599174263:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-599174263,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 6f7418559659b04073f96db593285d84f38eaceb into ea89228d15e136b9f53f715bc1c68ce6af7cdaf0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-aa972eb7c7ac05dd263020d65dc050c19fbd5145). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-634260559:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-634260559,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging 986ee14fa09da4640dba114297992ef5950f83f4 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-40494d669d4a6a920a495ff49494a878aa48907f). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-632027218:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-632027218,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging bb6048a7245774247e865986c2b66c1bb20ab0ab into 8fd25f21722fddc8dd2e581bc16b464f85a9bd51 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e06bd6afcbc71e36203aa520bc6c4a13f8c6b368). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-601357038:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-601357038,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging cb9c21e49b5ae908e13ba89f857d67c10e5e0d1c into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e1e85132dd6db98d5a4c8d2d53ef4aaf04a9d6e5). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-612577737:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-612577737,1,['variab'],['variable']
Modifiability,This pull request **fixes 8 alerts** when merging d779ba448f11caa8905811497633b61202262d61 into f72289571432bd1588eafa273489fcd67a93b94c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f562be3788d603b60e1dd0b8cf7052235f764b03). **fixed alerts:**. * 8 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1850#issuecomment-601064236:286,variab,variable,286,https://psicode.org,https://github.com/psi4/psi4/pull/1850#issuecomment-601064236,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 1** when merging 3fcedd3f9511a1260c42f81d337b0d8b46388222 into 86700a90f5be3ec972390e32b2e94eeae595745e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b638bf7c7812745154de26eb19cd87fe2aed03a5). **new alerts:**. * 1 for Suspicious unused loop iteration variable. **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-810914206:324,variab,variable,324,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-810914206,2,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 1** when merging bbaeafca76f0b8f0657f63704be6c24c774151d2 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af9d090bb28f72b3456f9ecc4bacbd1194bf0e45). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323:304,variab,variable,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631617323,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 1** when merging f63958fae589068d71c8f307a99b082d5d26256b into 86700a90f5be3ec972390e32b2e94eeae595745e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-86af60515246bd222294eb56b35524fd4f0b2e5d). **new alerts:**. * 1 for Suspicious unused loop iteration variable. **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-810725516:324,variab,variable,324,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-810725516,2,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 0f88f10af7b332323ba7c8a2c4335d41ef4e92cf into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-91cfe09575cc1f1b31e33577597b4baa4fa06582). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-503308310:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503308310,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 2e38ebcf81ab131bc2942150691f3fd6c5b92138 into 1b13841c90d8a46e462c590b281b32350a27c64d - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-18faade50f7d08e03578791ba3741680033bd9c5). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-500503632:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500503632,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 306a4dde3470d89fbb884124d6c7cb03143de2cd into d6b9d6a117c1ed468eb966597a9c8a9b3e8589b4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ac6877b616efbf0e16df18aea94dfb053ac18b0c). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-500709663:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500709663,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 46722a8a81eafc40dcc11622236cd5be13900087 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3ef0ea64f89e698bd2fd600a3a05b5b6b2e22676). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-503022082:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-503022082,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 15** when merging 6a41d7180671e5037ee2fd306cc186a80aa4defd into a1f7bb34db8c37c399b3ecb216a5952d14fb0ef7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8a7c3d52e76a9d71521f3149d806ac16512fcb58). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-500280898:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-500280898,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 1 alert** and **fixes 2** when merging 29961b2d54eba96b9cc3688900e512db98e834a6 into c05d38b04dc8500c1cd9f92e5f313bebac15e219 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f2d58b3d379a82a33b29490be79a38a91a155f49). **new alerts:**. * 1 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449:304,variab,variable,304,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-642811449,2,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 2** when merging 2fafbe8f061e78de4feaab61311b37015861312b into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-65a9a415d19b0acbc64b5fe7aa372a539f1a7768). **new alerts:**. * 1 for Wrong type of arguments to formatting function. **fixed alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1949#issuecomment-656281507:379,variab,variable,379,https://psicode.org,https://github.com/psi4/psi4/pull/1949#issuecomment-656281507,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 2** when merging 7c8a11e8026796d6beb1437a7a6ae831d41b75d8 into 958c81a54c7ca5e6277622694258ca9db8b07f48 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5db3262e4803037cc6c2295e50baa99c3de7fa5b). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951#issuecomment-656736060:345,variab,variable,345,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656736060,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** and **fixes 2** when merging ee3a8859e70fc6da96a6e2af833b11956aa85a97 into e0b780daa5e75cb07e1b44c47db560a3f4c6474c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-268701b010d44f775457db29bf9e88aa6e935f53). **new alerts:**. * 1 for Syntax error. **fixed alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1951#issuecomment-656856825:345,variab,variable,345,https://psicode.org,https://github.com/psi4/psi4/pull/1951#issuecomment-656856825,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 03f69233c7523a809370c09bec2c0ab400af3891 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b77f01ac3336f3839419bf53a65220d201c3522c). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546115895:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546115895,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 26e917c7a077bbeb3a0b1a6a9a9638bd7fb36085 into 67a0d7049241b30ceb2b52e44c58b6de579966bc - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c75027329aef2bf8b32c48204dfa2ee900cde029). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-759761559:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-759761559,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 31b39e6f26f185606903f9aa632a1f8f7faca92b into 72b7e7af4e36db8129703a928bf058df488cdbe9 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-447b1db3dd6eadf6dfcd0b72c9193cefc13acd8c). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546334091:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546334091,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 548c06f8dda703250f2f5bfad640db79224f9be6 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-736e1a902ade644e4713ea247bdfd134a3bef328). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546937916:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546937916,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 56acf61f2bd87cb63c3e571c442d654df98bce06 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-20e724d037e3b6ab7e50b98d889f2781ab29af3b). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-545883188:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-545883188,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 610f79689c947e79b82279a42d16ef27aa8652b4 into 72b7e7af4e36db8129703a928bf058df488cdbe9 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-94fced0c4ca01a5bc4f2c7b1d96eac27512125b8). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546439335:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546439335,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 696e48483fb0f8071fea8fa08723613895118cb9 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6eed8a438f76b9a59c6ea08c3e3a03a2e14e4089). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-547042246:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-547042246,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 75a7bc1f8a12ce675887411f772bdd322a0f3b6e into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b6e154412d771ec5c0cca4f6786c2bc1558b00ff). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-547980650:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-547980650,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 75bb44987062976730a9d980d2e5b2749b290041 into 9f91304977b6c0c927f026b7c9f364fd06fa76f9 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-25480fc54901b46fc5e0f7c802f4f362835c60dd). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-539588869:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-539588869,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 7ef3afe3a4fd65bfa17d1a6469c6d0fd6cf598d5 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-258cf70f6b65715d48e16f0cf07581248d74151a). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-545696776:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-545696776,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 91204720408c8a105aa4338a26cd98bb8c6232f8 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-df77e9e5bbe2ac17a47387ed377e7f49ed402630). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-546029121:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-546029121,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging 95c129ec2eefb971145191216c10a512b532b54d into b603cfcd0fd6317e6ad5e25bc58d7a828e4d310a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-94cbcc8552c02017ae85bb4926515b57ef69858b). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1721#issuecomment-693289853:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1721#issuecomment-693289853,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging a4b23a383e0bcd37c11ff72179c5b61ce8901240 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-fb08fd9a133f35b5b091c952cc74b61aaf9cecbc). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-628319430:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-628319430,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging b9b1d6d30ae5b198befb1924d52d4c6823b2ccf9 into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ceb5dc77fae429cab619deabd0e5713f04dfc4cb). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-545629902:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-545629902,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging db35b35e1c134e07f155e8c83ed04f38874b69e0 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8d3afc145a9d9d7f0972f65597f5d9f88d9cb989). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-547638762:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-547638762,1,['variab'],['variable']
Modifiability,This pull request **introduces 1 alert** when merging f52133376a0076c8edc09f85e9db2a2c2b8a847c into d16d02e69238f1b0d90a2f1283f38e818873e748 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-fc9ceaac588977494a374d507ce944c017e9f232). **new alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2131#issuecomment-799920380:288,variab,variable,288,https://psicode.org,https://github.com/psi4/psi4/pull/2131#issuecomment-799920380,1,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** and **fixes 13** when merging 9365dbd41720e192dbe03ab0e9474902891183bd into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b55a2cb86c8654bc9e7edabc9f99d1cf47a6fac9). **new alerts:**. * 6 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-553714229:307,variab,variable,307,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-553714229,2,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** when merging 002ac0ffb1e4253318ec733a8a40841e05cc406d into 8fd25f21722fddc8dd2e581bc16b464f85a9bd51 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-400c8d57e92c4839a4a478564d3fe12553269794). **new alerts:**. * 10 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-601554795:291,variab,variable,291,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-601554795,1,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** when merging 245513e671918d56c2a7f3e0bcc55080050a0d8b into 6348e1fc0e33052e17e12a5797206dc3efd3c238 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3280146c88e1ad7dd6d7bf830bcd4a88e3ce22df). **new alerts:**. * 10 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755841029:291,variab,variable,291,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755841029,1,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** when merging b8bcf3626546f794fe9635385b2460321ec076e0 into e25656e204ca4dcfa6b7ec853d75f35e01aa893f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f70b2b80c2189a0d7844155485cc7943744eeb8d). **new alerts:**. * 10 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-619603507:291,variab,variable,291,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-619603507,1,['variab'],['variable']
Modifiability,This pull request **introduces 10 alerts** when merging e6039d4ff38684ddf9cbd6080a82a0855858a6d1 into 6348e1fc0e33052e17e12a5797206dc3efd3c238 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-502f1869f9d84137860bc068c6d29245790b806f). **new alerts:**. * 10 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755154080:291,variab,variable,291,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755154080,1,['variab'],['variable']
Modifiability,This pull request **introduces 12 alerts** when merging 465ae9977d4e8ff3e80a5524281a86a511c557e7 into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a7d23a248c3d380e084dd2fe8fbc059049ccf9b4). **new alerts:**. * 7 for Module\-level cyclic import; * 2 for Unused local variable; * 2 for Variable defined multiple times; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-548146279:327,variab,variable,327,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548146279,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 13 alerts** and **fixes 13** when merging 5e2c48cd569e99f6d69c602d505bcf0c22d0a38d into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-038c4af8cc842894db7a66841ed9c33b811a8944). **new alerts:**. * 7 for Unused local variable; * 3 for Unused import; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-552755151:307,variab,variable,307,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-552755151,2,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** and **fixes 1** when merging 1b5210dbe737c9ac457492d53ff84b354cfc7f7a into 1295e778bfeb6f03d3dc594cbbfd79fe7b19f93e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c14a24ebff769e8beefb4fd5c8030e03aa18477c). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632603458,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** and **fixes 1** when merging 9b95c9a47cfe0cf8c58856d9dac9438954f03aa6 into 48958305338231540da2d23670a0b396289ac52a - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a6422872aa19929786271260d5be4c41a2b6237f). **new alerts:**. * 2 for Unused local variable. **fixed alerts:**. * 1 for Redundant comparison,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-632142335,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** and **fixes 15** when merging 89b187c27049a5003cd2ee96ef8b033cbdc7fdf7 into 033d1e5dad0908a9c411f695a5b8c4febdba2fa8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9bcf3c5063e4ac5f4424caaff170d255cf469b66). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import. **fixed alerts:**. * 7 for &#39;import \*&#39; may pollute namespace; * 5 for Unused import; * 2 for Unused local variable; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1661#issuecomment-502315227:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1661#issuecomment-502315227,3,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 2 alerts** when merging 0396e5257e382baab1f21d9bcd6546e9fb885746 into 2938fc2bba0678b9eb0648733e5bf70ecb7f802e - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35f8b01b00c2f77a9e8ea7b61224b53a71387c72). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-641645864:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-641645864,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 1bf69ab8306df4171b54c921964ba73d30cd5a78 into 31219187caa9e8736b3323b078324f85d8c9cd6f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6cd6a417b2dccc930d2d41fcecbb1f78c3420d0d). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1813#issuecomment-588025649:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1813#issuecomment-588025649,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 2b6259a36ec2951ffffaa15e2bcc1fee6d22823b into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-fb98758eedce030b6cda905e8e1e1d11543b6c39). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-631811738:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-631811738,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 50c2467ce25914cb7838436a756935a96db02e9a into a850d66cbd570794038b312ba953bf573261ffca - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d5fb51690ee5f37820b44158e33c095a355daed5). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1401#issuecomment-506013570:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1401#issuecomment-506013570,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 7f8117aaddecbcd3cebf1cc3d8505d580212fe9e into 4a03175edbda6213e73e429eca4908872876bfb6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-67df4c7a1685c696e0af1bbb3ccbcd977f92a80e). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1786#issuecomment-576896216:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1786#issuecomment-576896216,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging 9a5829a54f6430372a5dec58fc132f359f214c1d into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ad75de685a2ba03f144f640d03db617b0431da4e). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-628941877:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-628941877,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging c4b3d0aca90660a8b3cf72d57fa42d09afd02ed5 into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6bea4a183024546bf0bb7f8e21d19b32df083b14). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1885#issuecomment-642392742:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1885#issuecomment-642392742,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging cf970f9c056b2301b26ab4f2d0dec4fe0ab170e5 into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d5621577d9751acca1a16ecf450013ef3f8b194b). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1926#issuecomment-642215451:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1926#issuecomment-642215451,1,['variab'],['variable']
Modifiability,This pull request **introduces 2 alerts** when merging fd321e839e4597d8b7939a531d36d332da26eb3d into 741f46ea0bf7a3591988040538589eecaa8f0ab8 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-84f4c3fde4b63efdb7c9e03652bf7abd06bd4e70). **new alerts:**. * 2 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1926#issuecomment-642394107:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1926#issuecomment-642394107,1,['variab'],['variable']
Modifiability,This pull request **introduces 22 alerts** and **fixes 1** when merging 9c6c5e6967f69d1cf17a07839a760690e1bff79a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9e24558892c638b73f9f7c59570f9eb5b0a0d000). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-550089235:393,variab,variable,393,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-550089235,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 22 alerts** and **fixes 1** when merging aaec62d7e05aaad883b18c2555f95e8404bf1b8a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-195cf8d9dd510bb3ff8072cd0ae955f21a3aad9a). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-550268345:393,variab,variable,393,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-550268345,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 23 alerts** and **fixes 1** when merging 162b23e599a016e505a48cb9c594b3726b952da8 into 2c00b358d646316d054f3f0104014662228e7989 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6e0184b00477bf5fab6aae54aba5a6e79041c40a). **new alerts:**. * 17 for Module\-level cyclic import; * 2 for Unused local variable; * 2 for Unused import; * 2 for Variable defined multiple times. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-549067705:344,variab,variable,344,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-549067705,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 23 alerts** and **fixes 1** when merging 2fcb1ca56e703e93db407d86f6e5d4fccb33106a into c876a45b706b0fe5e27993bec4c5dcd5ed812cd7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cedd7a7f58b1ec2f563d8e0f6f10f27cfe09aac8). **new alerts:**. * 16 for Module\-level cyclic import; * 3 for Unused local variable; * 2 for Variable defined multiple times; * 1 for Unnecessary pass; * 1 for Unused import. **fixed alerts:**. * 1 for Module\-level cyclic import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-548622226:344,variab,variable,344,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-548622226,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 23 alerts** and **fixes 14** when merging 5c73c7429782f5bd5c917a5f5a3a6c13d4135db8 into 2edf6b752ba5f8052af7cc2347052e681e16a7ab - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f3e6464c14983b28d46a1154ee3932155223883e). **new alerts:**. * 14 for Unused import; * 7 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;. ---. *Comment posted by [LGTM.com](https://lgtm.com)*,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-495811312:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-495811312,2,['variab'],['variable']
Modifiability,This pull request **introduces 23 alerts** and **fixes 14** when merging e11bb214d47c01c61b0b73aa4e50471b82fa9ca4 into d4681c9689cd58006f656c083401283a539a61f4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0953359b6cba1590b435ecea0707064602a0dc59). **new alerts:**. * 14 for Unused import; * 7 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-505652250:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-505652250,2,['variab'],['variable']
Modifiability,This pull request **introduces 24 alerts** and **fixes 14** when merging 7483ceb56b8da355509dba28c43cb8a3e41786fe into d7529df57c2815cfb43a88d9b739c94c3a2322c4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-11c2650bf34ba516f9ddee5a91923598ad4a617e). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-525543922:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-525543922,2,['variab'],['variable']
Modifiability,This pull request **introduces 24 alerts** and **fixes 14** when merging 8c0afe6ba300b94768102920f9a57dfefb496186 into 6e6752949022c5cc61953a9cff384220ae80feda - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-28eeb05962093199f3c0e2dae6e3773b48edb740). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-512959967:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-512959967,2,['variab'],['variable']
Modifiability,This pull request **introduces 24 alerts** and **fixes 14** when merging ad8546ed1e2e7385542e9c2f32ab37f7fe8ae5de into d7529df57c2815cfb43a88d9b739c94c3a2322c4 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d2f047dc32def206d8265b7cfe1f8042f534899c). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-524469488:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-524469488,2,['variab'],['variable']
Modifiability,This pull request **introduces 24 alerts** and **fixes 14** when merging d31ce07cd88b218a003bb4bd62feb27e8fdb5d6c into b789aa3986441f7f0875f39ace6618e54437a4aa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-86ce69b1d0cf35d95348cc61bfb35da2158b42ed). **new alerts:**. * 14 for Unused import; * 8 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Syntax error. **fixed alerts:**. * 5 for Unused local variable; * 5 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-520681717:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-520681717,2,['variab'],['variable']
Modifiability,This pull request **introduces 27 alerts** and **fixes 2** when merging 33955a1371c34d5c26dff3335dae83b0c5e1d3df into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7c127454f4dccfaa2c65a8a9690ab6c385a1ed1f). **new alerts:**. * 24 for Wrong type of arguments to formatting function; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for FIXME comment. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-578793813:466,Variab,Variable,466,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-578793813,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 27 alerts** and **fixes 2** when merging cbd061d81397d3c7a7d01412b34125fbd139e782 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-1bf136a18c1a8c801788ded61ff202cff0105f8d). **new alerts:**. * 24 for Wrong type of arguments to formatting function; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for FIXME comment. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-555113195:466,Variab,Variable,466,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-555113195,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 28 alerts** and **fixes 13** when merging bc9009a38f14c7bf07d3954c8e6733996c7183cc into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b8ef5304b94a59fe306f4bb821fe5bb601aecefc). **new alerts:**. * 17 for Unused import; * 8 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-552054076:331,variab,variable,331,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-552054076,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 1** when merging c220287c13d731bb2961e2982bb2bf39da770076 into d16d02e69238f1b0d90a2f1283f38e818873e748 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4be40b854a58f17bfa7e7b77368b6aae9c79fb39). **new alerts:**. * 2 for Testing equality to None; * 1 for Suspicious unused loop iteration variable. **fixed alerts:**. * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2132#issuecomment-801032115:359,variab,variable,359,https://psicode.org,https://github.com/psi4/psi4/pull/2132#issuecomment-801032115,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging 20f48b8d33dad83c118a2ab0e4796b49f3c313ad into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-70ab444cf98c4ab1d7d9d6bf0216415ce2a0e4f4). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-578484770:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-578484770,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging 25d9b3d97898b6b8cc707cae58e0f496fbc8584f into b3df9b2303c1ed298ca991c6599464320353cb11 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-42e62e7fc80f30da7ecab7788ae868452aeb730c). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-585438542:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-585438542,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging 3ee87897e94e00d5cb6f9bfeb0a1748e74d58fdf into acad43051cdeadf0b8045026c6ff99a74463db93 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-012714c2c5fedc8c3b4cf9b210559f8e8209393c). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-582984783:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-582984783,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging ac0cd27470ae1dabf00f37473c9a8dcd74fd368a into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8ecc74f66b989c6efcf61524e36abcaa87723813). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-580960577:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-580960577,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging b76b8a924e1632f428b5969f6dc20a1e522de6a7 into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-38c56e79dd2f5afc386d4844eb469af10d2b1c4d). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-578899470:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-578899470,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 16** when merging d99c5db490c03afaa54497c038754098037f2ef0 into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-df5c4e0f9e943bbf149b7cda8583e218316f396a). **new alerts:**. * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-578392487:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-578392487,2,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 30cc17161cb0ff03ac8e3c23a1879643fe72d681 into 50752dfccd077d76d36ac9d4bc0b4bb5ae550696 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f98c930183f719938c746356022f4fd857f64d35). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-639343272:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-639343272,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 36e7bdc977976c0978b00b637e66bdfb05ef12e9 into ea5b5eb71ab65469629b345d78fe6e7b1a5a34fa - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d6ffafbd9f9e7a5e682144fd8cd7e54abfea2abf). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-634616346:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-634616346,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 5581b34d5cfe0d5b1bb0f9492f77dced1e076bf7 into 58d3bc0ae55d3affca9c75c80126be08d610915c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d9c9640fba621c30298d00a2548247b5c6c04b9f). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-638216713:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-638216713,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 7133769ce16b1793c183c6c0e86122ee9523f0b4 into ac109c99d2154bb8d998cbcde43dfca9f453cbce - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-cabe7fe4086bf98925c79d01e313b04e85104f2d). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-637560895:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-637560895,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging 934f312badac1bd7530816b31a728b621d10e178 into 1662c5d7669e80eb32864e62e73df41d929621eb - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c7f122fcfab3ba0263d2cdece4036046a46c1647). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-598205600:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-598205600,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging a44a9d5475b3bd0ddf8d4aa4f0fb591861ef0b77 into 2cb1154aee025a8cf0253911ef8c6b3206886da3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-640e617afdc3cbee5fbbe8aef3b3c622951e5906). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-625201343:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-625201343,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging a90a35056b0223a6e5cb13874b2d1e76ace87f9c into e273d32b99324de175afa6e63a779eb99768590c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8a505b29ef048079ee78490691fa98111b30ed07). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-663430987:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-663430987,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging bfae8905fa8f6eabc3ff0434709ccda712c123a3 into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9e18129016b986212e7550b8580a794e9d14b16b). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-635280878:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-635280878,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging bfe0ca93beae45c31ea55d57e585ed973dbfbdb3 into 50752dfccd077d76d36ac9d4bc0b4bb5ae550696 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-083829e867c817a3c4250522922ec0c417c358e2). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-638996018:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-638996018,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 2** when merging e3ba5c2409ff7e223470b7ec566426a7990ebace into 1662c5d7669e80eb32864e62e73df41d929621eb - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-af529eb66f935be9e4e94ef6a39b3609a520d1af). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-598776490:385,Variab,Variable,385,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-598776490,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** and **fixes 35** when merging 5cdb0aac52477b199271a52a1e269fd1bc7587ba into 469e60268a1d9ec73502c40b4c4bcb07ed4527e0 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a92e22e7909909388abb7b6c40655cb128965e2e). **new alerts:**. * 1 for Unused local variable; * 1 for Syntax error; * 1 for Variable defined multiple times. **fixed alerts:**. * 29 for Module\-level cyclic import; * 4 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import; * 1 for Unreachable code,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1738#issuecomment-545163931,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 3 alerts** when merging 1d783c29d5f414abf8164be05ad52cef54c2ee72 into 5f017bd3dbcc07b9b854e23e32ef285ab73b7916 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-26252004d1d4cb621e9e2b41af3cf7263833e87d). **new alerts:**. * 2 for Unused local variable; * 1 for Unreachable code,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1991#issuecomment-684170548:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1991#issuecomment-684170548,1,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** when merging 1f3386888ecd01eb5e6fc077cbbee2c7901b391f into d7335d5ddb64071c10f72b320ab253c79ede91b7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0f7ac36ab9adb2e8c9b5ebda16627b17f34217ec). **new alerts:**. * 2 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1786#issuecomment-582452220:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1786#issuecomment-582452220,1,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** when merging 536387c880270ca4fe776de392f68fbbccf0a85c into c6a3cb6ab10aafec9149cc4e1e111425bb466141 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-6f4307d6aaa9e7d8b0240a08640cd7a428620f2d). **new alerts:**. * 2 for Variable defined multiple times; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-546681392:276,Variab,Variable,276,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-546681392,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 3 alerts** when merging a186991a7dc68db863a84bf759ff892565c72996 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2fd4ea9718d1feb9bc8608d90bca575a6cdf1b10). **new alerts:**. * 1 for Unnecessary pass; * 1 for Unused import; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552121356:325,Variab,Variable,325,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552121356,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 3 alerts** when merging aabc56bc7dea931923051a71869c61a307a378fc into 65c0921213e6fe2979733f6c316915f79051f558 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-1e86035bc1a97349519dd611e05008e910588cff). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1790#issuecomment-579879121:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1790#issuecomment-579879121,1,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** when merging c14c00323f180fe7ff5c3f23e6c65a46537adca8 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-185d41b9eddf87bd1348a081ae083b24a201f9ac). **new alerts:**. * 3 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-631396705:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-631396705,1,['variab'],['variable']
Modifiability,This pull request **introduces 3 alerts** when merging c5de1fc1d7e7f04cb4cb2e4d428f69fe7ded2912 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a4adf33dc27a26a38747d55b56206af1a411325a). **new alerts:**. * 3 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-630952798:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630952798,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 1** when merging 49e8af0c80836006292b53bf12bfbe57ceecf905 into a4741e36b93331901dabcd2028c2013d5b5acc07 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7b05c8c751e9f2ffd4ac904a77166a836ea99410). **new alerts:**. * 3 for Multiplication result converted to larger type; * 1 for Unused local variable. **fixed alerts:**. * 1 for Multiplication result converted to larger type,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2079#issuecomment-756530827:361,variab,variable,361,https://psicode.org,https://github.com/psi4/psi4/pull/2079#issuecomment-756530827,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 11** when merging 5039d23165a7ce04649dfa95620e47347b9c7176 into f7f037de73b8bc0a808803d52333218e774b91e3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7d698b437e0ad9f314a84512fde34d3e999bd08c). **new alerts:**. * 2 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-568807035:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-568807035,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 11** when merging 7b2e74f8c24b80b4c005b9aa049e2c1c147aaa45 into ef844869a5f5b2e2fa4ae946e604ff31fa409f0c - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-341d23207c951a40eaeb0adc3559e9623e2f5912). **new alerts:**. * 2 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-573239252:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-573239252,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 11** when merging e3b22093ffafe97519aec0c4e2b8a58b259e3bb1 into f7f037de73b8bc0a808803d52333218e774b91e3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-a08cc303d011d1dbb49eec257251ca60aa52477a). **new alerts:**. * 2 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-568821997:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-568821997,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 12** when merging 6e36f6b66cc64d38c95216d8893a6d2e204e9fc2 into 7d35d148f39ca18075547f73b93198ce94ba11af - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e7444fd0d619ef7102300dddcc8a9bfd6e833f17). **new alerts:**. * 2 for Unused import; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-690116852:329,variab,variable,329,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-690116852,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 079713754ba1bea52958d5ae051c110d66aad4c0 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ccf27b30dc1cde3841ea61e115ee6ea17b1b6962). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565668634:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565668634,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 3f44f26065b607a11b59752c6aa75a728983e1e9 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-09189b6f38daf16b3d19b91cfa42540df2c87ad1). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556940111:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556940111,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 510ffb12356a90c20c40095e1825c0d2417ce48a into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e8e53c6a12f721f07019f8d8807397848b17e183). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556468532:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556468532,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 541118f85c6de69318c6d69dab97c6fe6b33e6c5 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3d3b5f159a7cf84416a30ddf0e4adb8f963fb49e). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566045322:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566045322,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 5ef316e99d35fb201d64d8cafdf8e1b89c7ad1b3 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-f5c2513aa7e0109b3faa0fd1710bc759b30973df). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565868980:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565868980,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 5f20f7c0f99ea4fe89892aca1e1f6cfc1b5b8aae into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-070f5ed99b121820cfcbad1c600f61e49f5a51c3). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-557379531:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-557379531,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging 97263dcf4d1c37b0cffac76321b0f89d28e8ada1 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-80a81ff67f598b9106331cdf03cbc5ca0daa53d9). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-565842567:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-565842567,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** and **fixes 13** when merging bfbc7a55ba07fc0d09177988a8b3cde45001af39 into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5b8e0e5be109138b62bee49d348217be2a41e695). **new alerts:**. * 2 for Syntax error; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-557205930:328,variab,variable,328,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-557205930,2,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 0857fe9d025f8e4bdb811a0f5379dc601b1e9152 into 262e3454d7015466d3f8059333518a7abbf2bd09 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-5231efc5643e5ec1fecb933907f54a27b68007b3). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-765095335:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-765095335,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 177748e12cac9f63db658b12db353f6b591800ab into 38c9807851929c1eff2803a58938b37c9625083f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-726f1fd30a94087c2217dd411c4951f21b0dae5a). **new alerts:**. * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused local variable; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-816309479:340,variab,variable,340,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-816309479,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 2c4ec5b6cb0c617c8130b03e375d8525c4134eb0 into 766c1e760db0de3b1e685fa0313cb2f2d6d9b146 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d46382fbc2f5d7f6061716623d9462a311d08688). **new alerts:**. * 2 for Resource not released in destructor; * 1 for Unused local variable; * 1 for Multiplication result converted to larger type,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2039#issuecomment-731606599:334,variab,variable,334,https://psicode.org,https://github.com/psi4/psi4/pull/2039#issuecomment-731606599,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 41d3b9b8967ab05c039db5135be30175abbe22af into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9bfe80c352dc8898d78c279194915abf035e5956). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-650816427:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-650816427,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 5098d2ef8c93363494f4be32a573818e7ad0b73a into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-bb04ac9a3fb4ebb9247885570aea5cb8fe5442db). **new alerts:**. * 2 for Unused import; * 1 for Unnecessary pass; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-552046581:325,Variab,Variable,325,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-552046581,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 4 alerts** when merging 73a65b9b52d5ed9ab52af985db8156908a9f9d7c into 262e3454d7015466d3f8059333518a7abbf2bd09 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-516b6f785cb0d45d05ef0a1ac42c57feef3db0bc). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-763160144:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-763160144,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging 9887dbda80fd3b579dfe441ce6e814ed9988673b into 6348e1fc0e33052e17e12a5797206dc3efd3c238 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-63f7ef92256979a5f14e1752ffe58f0b345193c8). **new alerts:**. * 4 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1101#issuecomment-755936286:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1101#issuecomment-755936286,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging a52ef0da92bdd7d425be15388b6c682c54cabfbc into d16d02e69238f1b0d90a2f1283f38e818873e748 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-bc0d0fdca6432030f1ed1f69714daa27a348e444). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-803061303:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-803061303,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging a56640b5a045264511ce8e82b7e0fef2403e6d6c into d16d02e69238f1b0d90a2f1283f38e818873e748 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7da129324ddc35619bc8bcd5bb9095f3a440365e). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-802406528:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-802406528,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging a683f02ef658be7294a9235beaa6f5740454cf29 into 40062658067b2f929720bf7a8d0abb7f3a57e9a7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-925536a63860cc0f2b79983d367dad8867583430). **new alerts:**. * 1 for Unused local variable; * 1 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Module is imported with &#39;import&#39; and &#39;import from&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2127#issuecomment-791674199:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2127#issuecomment-791674199,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging b0500c6ad3f55f789c0da51ecabeca013ac0b0c0 into 1cf7468090b1e0432811ff55811a380ea9469cb3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-680c8472422602cdbf5ba69982d626c003486fc9). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-650670910:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-650670910,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging bc41e77019c914a43d3bd1d821dbba782dc05b40 into 37dfe8f30a22133c09c2038a583275b73c2e6fde - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-968f96e8ce526778b006e6018f90d92893bf6698). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-613168315:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-613168315,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging d643a954d37f3bc7f1eb77c3c4e5749b9d0300fd into 08b06b45b0f2efaa9d6a04e31eec04e575252e78 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-69d5ef3136f1c28c9fc08c5b9d04ef9d4c46df19). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-652733970:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-652733970,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging d652e7e1ab0ca3666a1603f4e8602acd4d998790 into 262e3454d7015466d3f8059333518a7abbf2bd09 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3a134619b3de04c27860b8e216f68111aa577e8b). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2081#issuecomment-761284563:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/2081#issuecomment-761284563,1,['variab'],['variable']
Modifiability,This pull request **introduces 4 alerts** when merging d930c8d097a2d33c2a512ff320a23305610a57e1 into 6e6752949022c5cc61953a9cff384220ae80feda - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-8eb6d86d35a3c2dd6eba5f480ad322baeff507a0). **new alerts:**. * 2 for Unused import; * 1 for &#39;import \*&#39; may pollute namespace; * 1 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1676#issuecomment-510713898:350,Variab,Variable,350,https://psicode.org,https://github.com/psi4/psi4/pull/1676#issuecomment-510713898,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 4 alerts** when merging f1cb0d945d1dc12c23275fbd8936306b3de66965 into ac109c99d2154bb8d998cbcde43dfca9f453cbce - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-ec4775af2bd36fbe9e93df241e758eda63de222b). **new alerts:**. * 3 for Comparison result is always the same; * 1 for Unused local variable,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1865#issuecomment-637251576:335,variab,variable,335,https://psicode.org,https://github.com/psi4/psi4/pull/1865#issuecomment-637251576,1,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 1** when merging 45869c0b40107b7055cfb5275da227dd06575d88 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-c245d356f39c7bbcaf02271f9d0b0bbf55f11efd). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1753#issuecomment-554525628:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1753#issuecomment-554525628,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 5 alerts** and **fixes 1** when merging 81f7c98a543690025cd912fc41faa15fcc5e13c1 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-11e88e66d853d73faecbc137d4cf4605b3437e15). **new alerts:**. * 3 for Unused local variable; * 1 for Unused import; * 1 for Variable defined multiple times. **fixed alerts:**. * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1753#issuecomment-554453362:305,variab,variable,305,https://psicode.org,https://github.com/psi4/psi4/pull/1753#issuecomment-554453362,2,"['Variab', 'variab']","['Variable', 'variable']"
Modifiability,This pull request **introduces 5 alerts** and **fixes 12** when merging 318800d717bef8cd10a1004c2b78b33b6719c2bf into 66da0fea4b3dbab319b6b517fca0a3983256781f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4f1670e425c58663a7c73ca28d45824d4411807e). **new alerts:**. * 3 for Unused import; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-635088776:329,variab,variable,329,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-635088776,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 0a8cf8bea7a5b64c7c5de9f1f130a8e7d7e08233 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2b65dc92e25fb18ef5b4e365b6f0582ec8db392f). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566297630:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566297630,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 324bd969bf69170c4983693ea82883cbbcc9c9d7 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0a791152ab53f3b656ffb2ec8d71822021a63831). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566876000:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566876000,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 45f19943f3b7b98ba0e75d13e417b22802220502 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-7fc19e6a1deeabc659c9a784e6ad3d09a50c570d). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567273376:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567273376,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 56def841cb756b5b8491722bf01e151ae3fad3f9 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3bf89b9ceb2797cd0fee9e548f4b3a06fedc0f1a). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567069654:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567069654,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 61fa6f4ec5198b93be03e537b86cccbce12fe4f8 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-35141f06d7ab9bc69dab347f0f36d8e50fa5e040). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566354046:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566354046,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 646483f880e1b74d4c81ddd451d7ff913fd5b607 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d502d1e834edd3b680de16233a9dd8167ec070e5). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566848867:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566848867,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 6c6fab442411f922ddd3e3dcdeb58e74ee5b5742 into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-192dfec46bd41967ba8208516e1a61a4c038ba5c). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567153929:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567153929,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 741a531854eb567bbe06b664979bd0e7a139e8af into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-eba4b70f38cb6e74ef599f35aa11e7dceb5ce69e). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566797894:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566797894,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 7a9386b6a37aceb5ae41eb98dd85d41bed1f4164 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-d1fd0455c7fe0a2642848c7f142c9c5468716a01). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567759589:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567759589,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 7cf1d6742cf4a9aca2fa1de828f4993e8b8d331d into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-2e1756429a66f786987d4b6b63826bfb4904e665). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566425536:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566425536,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging 89f07b89989685cfa258db7c81b3bcccb58e57ec into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4af42a016ee83f37da910b36571de45eaeec254f). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567281883:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567281883,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging c050e6c2615a139510bebad5602d21b1c87655a7 into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-369b730fc0dd348d910e30e2b7d9ceaebfbaae89). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567340678:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567340678,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 13** when merging c118c3c4bc2648a145776ef2591e0a099f36b48d into 9a646796972a6b69f0102d696c3ca7a978c99df6 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-30533b536131e08a97135b0ba71eed277a0899a3). **new alerts:**. * 2 for Syntax error; * 1 for Unnecessary pass; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-566213689:354,variab,variable,354,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-566213689,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 16** when merging 8cc38895c22c9fe4d55646e6325e40383f584846 into 79a9c7af2a04d6058c410f4a250e65f032869be7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e32c95b76b52e41dc3ef542a619a221fa4aaab70). **new alerts:**. * 3 for Unused import; * 1 for Unused local variable; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 5 for Unused local variable; * 4 for Non\-callable called; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-596256713:329,variab,variable,329,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-596256713,2,['variab'],['variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 2** when merging 191806f6d27d12f06fd89a8c52af3c4ead5a871d into 79a9c7af2a04d6058c410f4a250e65f032869be7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-77ccb9f40e6a31f328e861cfc76b37d10ce80715). **new alerts:**. * 2 for Module imports itself; * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-596232207:416,Variab,Variable,416,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-596232207,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 2** when merging 5bb16c409022b63f627d1b64180ae727386a1535 into 1662c5d7669e80eb32864e62e73df41d929621eb - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-3e43d69a6073d855ff662e161ba83e6b1911fa10). **new alerts:**. * 2 for Module imports itself; * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-597919789:416,Variab,Variable,416,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-597919789,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 2** when merging 6b2f619db30760e9951008045172b8c1735909ec into 79a9c7af2a04d6058c410f4a250e65f032869be7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9f4fd1ca4a37ea2301b09c7a48028ea1cf6bf8e7). **new alerts:**. * 2 for Module imports itself; * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-596769002:416,Variab,Variable,416,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-596769002,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 5 alerts** and **fixes 2** when merging e13218bef97055f18b4182ab9b7e0fde7a7da3b3 into 79a9c7af2a04d6058c410f4a250e65f032869be7 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9ffeab424a5b32992b18c1eae23836e7dcdd0ef2). **new alerts:**. * 2 for Module imports itself; * 2 for &#39;import \*&#39; may pollute namespace; * 1 for Unused import. **fixed alerts:**. * 2 for Variable defined multiple times,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1443#issuecomment-597336918:416,Variab,Variable,416,https://psicode.org,https://github.com/psi4/psi4/pull/1443#issuecomment-597336918,1,['Variab'],['Variable']
Modifiability,This pull request **introduces 6 alerts** when merging 045b406c1297b920491547ea16f4d74d9297ecc3 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-4b13d0b588cee328bfe8367e2e961021cc099959). **new alerts:**. * 3 for Unused local variable; * 2 for Wrong number of arguments in a call; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-630179716:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630179716,1,['variab'],['variable']
Modifiability,This pull request **introduces 6 alerts** when merging 488a04e374e0b719f8e2ab52eeb30abb8f61f422 into 9701d609c0aaeba5b5e905e641d79d38a8eb56f2 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-e37292bb2c83649313b4a9650424fbee07599d25). **new alerts:**. * 3 for Unused local variable; * 2 for Wrong number of arguments in a call; * 1 for Unused import,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1814#issuecomment-630353814:289,variab,variable,289,https://psicode.org,https://github.com/psi4/psi4/pull/1814#issuecomment-630353814,1,['variab'],['variable']
Modifiability,This pull request **introduces 7 alerts** and **fixes 11** when merging fc05b531996cee853800099c798cfdd39a8dee6a into f7f037de73b8bc0a808803d52333218e774b91e3 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-0c91c193c15ba0f2f07f25589a60565db06c01b4). **new alerts:**. * 4 for Unused local variable; * 2 for Unused import; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-568169117:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-568169117,2,['variab'],['variable']
Modifiability,This pull request **introduces 8 alerts** and **fixes 13** when merging 0738f376f41981e12d7e5dd7c0d27b5975e607bc into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-b08dc1a4d799c67b2ee234db2e6c3aa98cfe55a1). **new alerts:**. * 4 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-554120132:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-554120132,2,['variab'],['variable']
Modifiability,This pull request **introduces 8 alerts** and **fixes 13** when merging affe266aee566fd56755c634c48aae6fa38f02bf into e135e6b688bbc6c56077716b4577dbfd66b45c15 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9b52a4fc96a47dee0570700aa866c21662334088). **new alerts:**. * 4 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-556252967:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-556252967,2,['variab'],['variable']
Modifiability,This pull request **introduces 9 alerts** and **fixes 11** when merging 936843c9a5439d51ad129b8bd92b097aafc72f30 into e05f07a78ea15c925df69265f2e16b1698d4a49f - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-9c53e8e2181e4c2923790a68db1dd75f500b3422). **new alerts:**. * 4 for Unused local variable; * 4 for Unused import; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567908861:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567908861,2,['variab'],['variable']
Modifiability,This pull request **introduces 9 alerts** and **fixes 11** when merging cede7d9634ae85c98c6cee65c3b93099db8a9fed into 3f67827b65cea245080d46e6b474e24736109622 - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-880a6829848a1a2ca91770f7d8496c482d5e7683). **new alerts:**. * 4 for Unused local variable; * 4 for Unused import; * 1 for Except block handles &#39;BaseException&#39;. **fixed alerts:**. * 4 for Unused local variable; * 3 for Unused import; * 3 for &#39;import \*&#39; may pollute namespace; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-567829592:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-567829592,2,['variab'],['variable']
Modifiability,This pull request **introduces 9 alerts** and **fixes 13** when merging 350a7109410f4f0dfab6888f83d5a4d93a8829d2 into dfb86f51bf3dc22740b0ef4ce65b85b7baab1f5b - [view on LGTM.com](https://lgtm.com/projects/g/psi4/psi4/rev/pr-75650ec2427c70a4f54c63b915f8ac152a63fc6f). **new alerts:**. * 5 for Unused local variable; * 2 for Syntax error; * 1 for Except block handles &#39;BaseException&#39;; * 1 for Unused import. **fixed alerts:**. * 5 for Unused local variable; * 4 for &#39;import \*&#39; may pollute namespace; * 3 for Unused import; * 1 for Except block handles &#39;BaseException&#39;,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1351#issuecomment-553093319:306,variab,variable,306,https://psicode.org,https://github.com/psi4/psi4/pull/1351#issuecomment-553093319,2,['variab'],['variable']
Modifiability,"This should be marked bug fix rather than enhancement. There are transition states that I cannot get an IRC for, without that fix. Also, corrected a comment per @andysim's observation.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1663#issuecomment-500833979:42,enhance,enhancement,42,https://psicode.org,https://github.com/psi4/psi4/pull/1663#issuecomment-500833979,1,['enhance'],['enhancement']
Modifiability,"This sounds nice! Python accessibility of amplitudes would be a great new feature. And cleanup from C structs towards Wavefunction object would also be welcome. The proposed layer of abstraction between DPD and libpsio is perhaps worth some discussion. libpsio is, itself, a layer of abstraction between Psi and low-level I/O. I think there is an advantage of having a centralized library that all of Psi is supposed to use to do I/O. Then, improvements can be done in only one place (that library), unless there is a design problem with that library's API. The I/O library could be improved to use HDF5, or whatever, on the backend. So, do we need an all-new interface between the CC libraries and libpsio, or is it just that libpsio itself needs its backend replaced?. Best,. David. ________________________________; From: Andrew James <notifications@github.com>; Sent: Thursday, September 20, 2018 10:33:45 AM; To: psi4/psi4; Cc: Sherrill, David; Mention; Subject: [psi4/psi4] Coupled Cluster Rewrite (#1247). We (@amjames<https://github.com/amjames> and @robertodr<https://github.com/robertodr>) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending PR #1061, Expose wavefunction and amplitudes to python<https://github.com/psi4/psi4/pull/1061> available satisfying the constraints and comments offered by @dgasmith<https://github.com/dgasmith> and @amjames<https://github.com/amjames>.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:. * It will be possible to experiment with these quantities easily.; * Writing and reading amplitudes to file (HDF5<https://portal.hdfgroup.org/display/support>, Zarr<https://zarr.readthedocs.io/en/stable/>, or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; * Restart capabilities. Summary of proposed changes (incomplete); cc* modules. * Create a single cc folder",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907:996,Rewrite,Rewrite,996,https://psicode.org,https://github.com/psi4/psi4/issues/1247#issuecomment-423216907,1,['Rewrite'],['Rewrite']
Modifiability,This sounds similar to the issue I ran into with the first version of the SAD guess rewrite: CH4 switched symmetry and the program crashed due to memory errors.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1474#issuecomment-453868040:84,rewrite,rewrite,84,https://psicode.org,https://github.com/psi4/psi4/issues/1474#issuecomment-453868040,1,['rewrite'],['rewrite']
Modifiability,"This typically indicates that either (A) the scratch file directory does; not exist or (B) the user does not have permissions to write to the scratch; file directory. To diagnose (A), echo the PSI_SCRATCH environment variable,; and make sure it points to a reasonable (non-NFS) path. To diagnose (B) ls; -l the base scratch directory and check that write permissions are enables; for the user. See the following notes from the INSTALL.rst file:; - Step 7: User Configuration; ; After the PSI4 package has been successfully installed, the user will need; to add the installation directory into his/her path. If the package has; been installed in the default location `/usr/local/psi`, then in C; shell,; the user should add something like the following to their `.cshrc`; file::; ; setenv PSI /usr/local/psi; set path = ($path $PSI/bin); ; Next, the user needs to tell the PSI4 I/O manager how to handle scratch; files.; Identify the path to a fast scratch disk for which the user has write; access.; If the local `/tmp` volume is large enough, it might be used.; However, a dedicated scratch volume (using RAID0 striping for speed) is; recommended.; ; .. warning:: Scratch should NOT be a NFS-mounted volume, as writes to a; remote disk over the network can be very slow and can tie up the; network; and negatively impact other users.; ; Specify scratch location by editing the `.cshrc` file to set the scratch; environment variable :envvar:`PSI_SCRATCH`. If the selected location is; `/scratch/user`, add something like the following::; ; setenv PSI_SCRATCH /scratch/user; ; In a bash shell, the corresponding commands to be added to `.bashrc` is; the following::; ; export PSI=/usr/local/psi; PATH=$PSI/bin:$PATH ; export PATH; export PSI_SCRATCH=/scratch/user; ; More advanced control of scratch files and is handled through a; `.psi4rc` file, which is discussed at section :ref:`sec:psirc`.; ; .. note:: For developers: during compilation and testing, PSI4 finds its; basis sets,; grids, etc., in ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/56#issuecomment-40206429:217,variab,variable,217,https://psicode.org,https://github.com/psi4/psi4/issues/56#issuecomment-40206429,2,"['Config', 'variab']","['Configuration', 'variable']"
Modifiability,"This would be wonderful addition! Make sure to join also the slack channel (see README for link) for more immediate help and questions. There are different levels of integration. An independent plugin, a deep C-layer integration and a python-level integration. Some of the questions depends on what you want to aim for (or need). . Should `adcc` be distributed/build with psi4 in the end? (conda, cmake, etc.)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492:194,plugin,plugin,194,https://psicode.org,https://github.com/psi4/psi4/pull/1744#issuecomment-547338492,1,['plugin'],['plugin']
Modifiability,"Those `Exit Status: infile ( -11 );` are segfaults (`SIGSEGV` is 11), I've pasted the backtrace here: http://paste.debian.net/1058664 The `output.dat` (`fsapt2` testcase) is here: http://paste.debian.net/1058665. Do I need to maybe setup some environment variables, e.g. for scratch space in order to run the tests?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1302#issuecomment-451527924:255,variab,variables,255,https://psicode.org,https://github.com/psi4/psi4/issues/1302#issuecomment-451527924,1,['variab'],['variables']
Modifiability,"Those `Exit Status: infile ( -11 );` are segfaults (`SIGSEGV` is 11), I've pasted the backtrace here: http://paste.debian.net/1058664 The `output.dat` (`fsapt2` testcase) is here: http://paste.debian.net/1058665. Do I need to maybe setup some environment variables, e.g. for scratch space in order to run the tests?. _Originally posted by @mbanck in https://github.com/psi4/psi4/issue_comments#issuecomment-451527924_",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1457:255,variab,variables,255,https://psicode.org,https://github.com/psi4/psi4/issues/1457,1,['variab'],['variables']
Modifiability,"Those are the troubling lines for sure, extended them should work as long as the CI Vector is present (`n < num_roots`). I mimicked the transition behavior from @cdsgroup original code. Might get him to weigh in here on the API.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1890#issuecomment-627947384:40,extend,extended,40,https://psicode.org,https://github.com/psi4/psi4/issues/1890#issuecomment-627947384,1,['extend'],['extended']
Modifiability,"Three hours and nine minutes, according to the timestamps I have for relevant events. I _believe_ the build ran on a 32-thread (16-core) intel broadwell (with ample memory to avoid paging, for however much that helps), and the build was the only event happening on the machine at that time. (I am a little unsure, though, as it's a build-server, and I don't have any way of telling who else might've submitted a build job to the machine at that time. It was ~1AM on a Saturday, though, so probably just me). Also, the .so file generated was 925MB, if that's of any interest. Should I worry at all that the tarball represents a WIP in terms of the actual integral files? Or does the trial status only regard the configuration?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433:711,config,configuration,711,https://psicode.org,https://github.com/psi4/psi4/issues/2586#issuecomment-1133800433,1,['config'],['configuration']
Modifiability,"Time to start the release notes once more. As always please note that these start off as incomplete and gradually fill in over time as they are quite lengthy. If I missed anything or an item is incorrect please comment below. Certainly some items need to be highlighted more and categorical division can be improved. ##. # Major Points of Interest. - The DFT kernels were migrated to use LibXC, Psi4 now has 400+ functionals including modern functionals such as wB97M-V.; - The DFT code was optimized leading up to a 4x speed enhancement on 6 cores.; - A new Density-Fitted JK backend was written, DF-SCF is now up to 2x as fast.; - Dozens of additional methods, bug fixes, and performance enhancements. # Obtaining; - Binary installers: ; - Python Anaconda: `conda install psi4 -c psi4`.; - If you're working from Psi4 v1.1 (psi4conda) or any conda Psi4 from 2017, do not update. Instead, create a new environment for a new Psi4. You may need to conda update conda beforehand. ##. # New Methods; - SNS-MP2; - Hundreds of new DFT Functionals; - VV10 non-local dispersion; - Dispersion Corrected Spin-Component Scaled Double Hybrid (DSD) Functionals; - Second-Order SCF Convergence of Density Functional Theory; - Coupled Perturbed Self-Consistent Field (HF and DFT); - Second-Order Electron Propagator Theory (EP2); - SAPT0 with S^Infinity Induction and Induction Exchange; - DF Gradients for range-separated and CAM functionals; - Support for the [MolSSI](molssi.org) QC Schema [interface](http://molssi-qc-schema.readthedocs.io/en/latest/index.html#) v1. # New Methods (beta); - SAPT(DFT); - Effective Core Potenitals (ECP's). # New External Libraries; - [Gau2Grid](https://github.com/dgasmith/gau2grid) - Very fast gaussian to grid collocation matrices; - [OpenFermion-Psi4](https://github.com/quantumlib/OpenFermion-Psi4) - Quantum computer interface; - [SNS-MP2](https://github.com/DEShawResearch/sns-mp2) - Spin-Network-Scaled MP2 theory; - [GeomeTRIC](https://github.com/leeping/geomeTRIC) - Ge",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/959:526,enhance,enhancement,526,https://psicode.org,https://github.com/psi4/psi4/issues/959,2,['enhance'],"['enhancement', 'enhancements']"
Modifiability,"To confirm this explicitly:; * With the changes to method names, the energy docstring needs to be updated, as does the occ/dfocc manual page, which needed to be updated anyways. That is shifting to your responsibility in a future, but pre-1.4 PR.; * In another future PR of yours, QCDB will handle all spin-component quantities. At that time, we'll save singles contributions and spin components to `variables_`. For now, it's enough to remove the spin component globals in preparation for that and as part of the war on globals. We're losing many spin-component-related Psivars in the interim, but this is an acceptable loss. Also, will the future migration of spin-component treatment to QCDB mean `occ` no longer prints spin-component quantities? You implied that it would (""Going that far would necessitate rewriting the occ printing""). If so, then the correct solution to [the spin-redundancy problem](https://github.com/psi4/psi4/pull/1789#discussion_r373811576) is to eliminate the spin-component variables from `occ`. At that time, `occ`'s only use for spin-component scaled quantities is if spin scaling is being used in orbital optimization, which shouldn't require those variables anyways. We might as well get rid of them now, since the repeat typing will be gone before long.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412:1004,variab,variables,1004,https://psicode.org,https://github.com/psi4/psi4/pull/1789#issuecomment-581142412,2,['variab'],['variables']
Modifiability,"To elaborate:. `xfailed`: expected failure. Just looking at the test, I'm not clear why we expect that particular test to fail, but as Lori said, it has to do with a program external to Psi4.; skipped: this tests the interface to a plugin you don't have and is only a concern if you need that particular plugin.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598:232,plugin,plugin,232,https://psicode.org,https://github.com/psi4/psi4/issues/2236#issuecomment-875261598,2,['plugin'],['plugin']
Modifiability,"To say anything I need to debug it. However, I do not have that much memory to run the input. I guess the situation may be related int variables, which should be defined as long int for such large molecules. @dgasmith",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1679#issuecomment-511841966:135,variab,variables,135,https://psicode.org,https://github.com/psi4/psi4/issues/1679#issuecomment-511841966,1,['variab'],['variables']
Modifiability,Travis: conda config settings are not saved in cache,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1423:14,config,config,14,https://psicode.org,https://github.com/psi4/psi4/pull/1423,1,['config'],['config']
Modifiability,"Trying out the SCF plugin with the current master branch I get the error; ```; $ psi4 h2o.in; Traceback (most recent call last):; File ""/home/work/psi4/install/bin/psi4"", line 387, in <module>; exec(content); File ""<string>"", line 26, in <module>; File ""/home/work/psi4/install/lib/psi4/driver/driver.py"", line 519, in energy; wfn = procedures['energy'][lowername](lowername, molecule=molecule, **kwargs); File ""/home/work/openorbital/openorbital/psi4/scf/myplugin/pymodule.py"", line 60, in run_myplugin; psi4.set_scalar_variable('CURRENT ENERGY', myplugin_wfn.energy()). AttributeError: module 'psi4' has no attribute 'set_scalar_variable'. Printing out the relevant lines from the Psithon --> Python processed input file:; H 0.866811766153153 0.601435735686679 0.000000000000000; H -0.866811766153153 0.601435735686679 0.000000000000000; """"""); core.IO.set_default_namespace(""""); core.set_global_option(""BASIS"", ""pcseg-1""); --> energy('myplugin'). !-------------------------------------------------------!; ! !; ! module 'psi4' has no attribute 'set_scalar_variable' !; ! !; !-------------------------------------------------------!. Segmentation fault (core dumped); ```",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/3093:19,plugin,plugin,19,https://psicode.org,https://github.com/psi4/psi4/issues/3093,1,['plugin'],['plugin']
Modifiability,Trying to compile current trunk with. ```; ./setup --max-am-eri 7 --cc gcc --cxx g++ --fc gfortran --prefix /global/home/groups-sw/mhg/psi4/install --plugins --gdma on --pcmsolver on --chemps2 on --ambit on objdir -DPYTHON_INTERPRETER=${PYTHON_DIR}/bin/python -DENABLE_XHOST=OFF; ```. fails with an OpenMP linking error in CheMPS2. ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.29':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to`omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5457: undefined reference to `omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function`_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.30':; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to `omp_get_num_threads'; /global/home/groups-sw/mhg/psi4/psi4.git/objdir/interfaces/chemps2/src/interface_chemps2/CheMPS2/CASPT2.cpp:5473: undefined reference to`omp_get_thread_num'; ../../../interfaces/chemps2/install/lib/libchemps2.a(CASPT2.cpp.o): In function `_ZN7CheMPS26CASPT210make_AA_CCEbd._omp_fn.31':. and a bunch of other missing OpenMP symbol errors from libchemps2.a.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/452:150,plugin,plugins,150,https://psicode.org,https://github.com/psi4/psi4/issues/452,1,['plugin'],['plugins']
Modifiability,Tweaking cmake ConfigPython,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/172:15,Config,ConfigPython,15,https://psicode.org,https://github.com/psi4/psi4/pull/172,1,['Config'],['ConfigPython']
Modifiability,"Uggh, never seen or though about that problem before. What would you simlink to if local gcc doesn't have plugin support either? You could try [this gcc instead](https://anaconda.org/msarahan/gcc_linux-64_linux-cos5-64/files), though I haven't particular hopes. Could you link against the prebuilt chemps2 conda package or do you really need to compile it yourself.?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/660#issuecomment-288418891:106,plugin,plugin,106,https://psicode.org,https://github.com/psi4/psi4/issues/660#issuecomment-288418891,1,['plugin'],['plugin']
Modifiability,"Unfortunately, I was right. Commenting out [this line I added in #1108 ](https://github.com/psi4/psi4/blob/master/psi4/src/psi4/libmints/coordentry.h#L372) fixes the issue. That particular line ensures that when cloning a CoordEntry as part of cloning a molecule, the clone of a ZMAT coordinate inherits the computed Cartesians of the original atom, if any. That change was vital to prevent a bug where basis sets wouldn't be centered on atoms after cloning, and I believe that needs to be kept. I know Peter said he planned to hack on this, but I'm tempted to take this myself. This is holding me up from helping a user on the forum.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1325#issuecomment-439575958:295,inherit,inherits,295,https://psicode.org,https://github.com/psi4/psi4/issues/1325#issuecomment-439575958,1,['inherit'],['inherits']
Modifiability,"Unless adding it will force you to rewrite a large amount of code, or not adding it will make your results incorrect, I'm going to request you leave that to a separate PR. It's difficult enough finding people to review this, and adding more code will only make it worse.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2155#issuecomment-933763993:35,rewrite,rewrite,35,https://psicode.org,https://github.com/psi4/psi4/pull/2155#issuecomment-933763993,1,['rewrite'],['rewrite']
Modifiability,"Update the SAPT output to conform with the recommendations of our systematic study in ``Levels of Symmetry Adapted Perturbation Theory (SAPT). I. Efficiency and Performance for Interaction Energies,'' T. M. Parker, L. A. Burns, R. M. Parrish, A. G. Ryno, and C. D. Sherrill, J. Chem. Phys. 140, 094106 (2014) [doi: 10.1063/1.4867135 ]",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/37:107,Adapt,Adapted,107,https://psicode.org,https://github.com/psi4/psi4/issues/37,1,['Adapt'],['Adapted']
Modifiability,Update: `-fvisibility=hidden` is indeed active in 2.2.1 and quite breaking plugins. Shelving this PR and recommending that symbols/c-layer-/py-layer-plugin-interfacing be a topic at WWDC.,MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/814#issuecomment-333604954:75,plugin,plugins,75,https://psicode.org,https://github.com/psi4/psi4/pull/814#issuecomment-333604954,2,['plugin'],"['plugin-interfacing', 'plugins']"
Modifiability,"Update:; * There'll be another commit to this to fix some docs. Today, there's 1.2 libint in the conda channels, so we'll be able to look at travis/distelli built on that rather than the internal builds that the above reflects.; * Thanks for the config params, @susilehtola. The CMake ties libderiv AM to libint AM, so you may not have hit some of the problems. What I'm seeing now is that psi4/libint allows an AM=8 build (libderiv AM = libint AM - 1), but evaleev/libint/v1 segfaults in the libderiv generator execution. So I'm investigating the differences.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/695#issuecomment-300573061:246,config,config,246,https://psicode.org,https://github.com/psi4/psi4/pull/695#issuecomment-300573061,1,['config'],['config']
Modifiability,Updates Ambit version and Psi4's configuration of it,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/275:33,config,configuration,33,https://psicode.org,https://github.com/psi4/psi4/pull/275,1,['config'],['configuration']
Modifiability,"Upon examining the reference output from tests, none of the four OMP2.5 tests show convergence of the T2 amplitudes. [The T2 residuals stay at the same order of magnitude for every single iteration.](https://github.com/psi4/psi4/blob/master/tests/omp2p5-2/output.ref#L352-L360) Neither the OMP3 tests nor the DF-OMP2.5 tests show this behavior, which suggests the T2 amplitude non-convergence is a bug in the `occ` modification of OMP3 to produce OMP2.5. This issue blocks improving orbital convergence in OCC by coupling it to amplitude convergence, issue #1777. Due to this issue, the proposed scheme instead causes non-convergence of both quantities. I will fix this issue as the next PR in the ""OCC's Open-Heart Surgery"" series. Core developers, please mark this issue as a 1.4 target.",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1808:513,coupling,coupling,513,https://psicode.org,https://github.com/psi4/psi4/issues/1808,1,['coupling'],['coupling']
Modifiability,"Using 521f06adb441ac1e2f1732eb1cd090190b409c49:. ```; make[2]: Entering directory '/home/ward/tmp/psi4release/build'; /usr/bin/cmake -E cmake_progress_report /home/ward/tmp/psi4release/build/CMakeFiles ; [ 98%] [ 98%] Build aointegrals example plugin; cd /home/ward/tmp/psi4release/build/plugins/aointegrals && ../../bin/psi4 --new-plugin-makefile; Build skeleton example plugin; cd /home/ward/tmp/psi4release/build/plugins && /usr/bin/cmake -E remove_directory /home/ward/tmp/psi4release/build/plugins/skeleton; cd /home/ward/tmp/psi4release/build/plugins && ../bin/psi4 --new-plugin skeleton; Creating new plugin Makefile in the current directory.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; Created new plugin directory, skeleton, using 'plugin' template.; Unable to read the PSI4 plugin folder - check the PSIDATADIR environmental variable; Current value of PSIDATADIR is /home/ward/opt/share/psi; plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/build.make:49: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals' failed; make[2]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals] Error 1; plugins/CMakeFiles/plugin_skeleton.dir/build.make:49: recipe for target 'plugins/CMakeFiles/plugin_skeleton' failed; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; make[2]: *** [plugins/CMakeFiles/plugin_skeleton] Error 1; make[2]: Leaving directory '/home/ward/tmp/psi4release/build'; CMakeFiles/Makefile2:9569: recipe for target 'plugins/CMakeFiles/plugin_skeleton.dir/all' failed; make[1]: *** [plugins/CMakeFiles/plugin_skeleton.dir/all] Error 2; make[1]: *** Waiting for unfinished jobs....; CMakeFiles/Makefile2:9619: recipe for target 'plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all' failed; make[1]: *** [plugins/aointegrals/CMakeFiles/plugin_aointegrals.dir/all] Error 2; make[1]: Leaving directory '/home/ward/tmp/psi4release/build'; Makefile",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/90:244,plugin,plugin,244,https://psicode.org,https://github.com/psi4/psi4/issues/90,16,"['plugin', 'variab']","['plugin', 'plugin-makefile', 'plugins', 'variable']"
Modifiability,"Using psi4-1.4rc1, I was able to compute `MBIS_CHARGES` via QCEngine however after PR #2127 this now fails with the following error message. While this definitely needs fixing I think it might also be nice to have the option to turn off this feature and only calculate the ratio if passed as an scf property?; ```; RuntimeError: ; Fatal Error: Wavefunction::scalar_variable: Requested variable MBIS FREE ATOM O VOLUME was not set!; Error occurred in file: /Users/github/builds/conda-builds/psi4-multiout_1628080613326/work/psi4/src/psi4/libmints/wavefunction.cc on line: 1335; ```. MWE ; ```python; import qcelemental as qcel; from qcelemental.models import molecule; import qcengine as qcng. mol = qcel.models.Molecule.from_data(""""""; O 0.0 0.000 -0.129; H 0.0 -1.494 1.027; H 0.0 1.494 1.027; """"""). # build the mbis task; model = qcel.models.AtomicInput(; molecule=mol,; driver=""energy"",; model={""method"": ""SCF"", ""basis"": ""sto-3g""},; keywords={""scf_properties"": [""MBIS_CHARGES""]}; ). result = qcng.compute(model, ""psi4""). print(result.dict()); ```; versions; psi4-1.4+9485035 ; qcengine-0.19.0; qcelemental -0.21.0",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2272:385,variab,variable,385,https://psicode.org,https://github.com/psi4/psi4/issues/2272,1,['variab'],['variable']
Modifiability,"Very easily. ```; wfn, grad = psi4.gradient(method, return_wfn=True); en = wfn.variable(""CURRENT ENERGY""); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211:79,variab,variable,79,https://psicode.org,https://github.com/psi4/psi4/issues/2878#issuecomment-1435413211,1,['variab'],['variable']
Modifiability,"Very impressive work... I'm happy SAPT(DFT) is done. I don't have time to check the details of the equations but I'm confident you did it right. I didn't see any problems after a quick overview of the SAPT code, at least. Is there a specific reason why you chose to rewrite the SAPT JK energy terms (electrostatic, exchange, induction) in Python instead of having a new function call on the C++ side like you did for dispersion ?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/698#issuecomment-300589507:266,rewrite,rewrite,266,https://psicode.org,https://github.com/psi4/psi4/pull/698#issuecomment-300589507,1,['rewrite'],['rewrite']
Modifiability,"Very true on exposing more symbols later, @dgasmith. I haven't even attempted v2rdm. @edeprince3, FYI, this affects you. There's a discussion in https://github.com/psi4/psi4/pull/814 if you want the details, but the tl;dr is that Psi4's `core.so` built with this PR will not have all the symbols exposed like a normal Linux `.so` for a plugin's use. If there's extra classes or functions that v2rdm needs, they'll need a `PSI_API` added to the (psi) source code. If you get to the v2rdm/psi reconciliation process before me, please ping with any trouble. I'm updating and rebuilding all the conda packages now, but v2rdm is always last, having psi as a dep. :-)",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/950#issuecomment-380192190:336,plugin,plugin,336,https://psicode.org,https://github.com/psi4/psi4/pull/950#issuecomment-380192190,1,['plugin'],['plugin']
Modifiability,WIP: Adds compiler flags from Psi4 to plugins.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/543:38,plugin,plugins,38,https://psicode.org,https://github.com/psi4/psi4/pull/543,1,['plugin'],['plugins']
Modifiability,"We (@amjames and @robertodr) propose a partial rewrite of the coupled cluster and DPD functionalities in Psi4.; The main motivation is to make the pending [PR #1061, Expose wavefunction and amplitudes to python](https://github.com/psi4/psi4/pull/1061) available satisfying the constraints and comments offered by @dgasmith and @amjames.; Exposing the T and Lambda amplitudes to the Python layer will have a series of beneficial consequences:; - It will be possible to experiment with these quantities easily.; - Writing and reading amplitudes to file ([HDF5](https://portal.hdfgroup.org/display/support), [Zarr](https://zarr.readthedocs.io/en/stable/), or any other format) is more easily managed from Python, especially if we need to preserve compatibility with Windows.; - Restart capabilities.; ## Summary of proposed changes (incomplete); ### cc* modules; - Create a single `cc` folder where all the other `cc*` folders will live as subfolders.; - Provide a top-level `CCWavefunction` class, partly modeled on the existing `CIWavefunction` class to overtake the whole implementation of the CC functionality.; - The class will manage `MOInfo`,` Params`, `DPD` as local data members. This will ensure that the lifetime of these objects is tied to a particular instance of a CC calculation.; - The class will contain the various steps in a CC calculation as methods. ; - Move from tstart-tstop to the new timers timer_on-timer_off; ### DPD Library ; - Remove use of static global machinery from DPD member functions. ; - Implement proper copy/move assign/construct for the DPD object. ; - Implement internal structs with proper constructors as needed.; - Replace c-style arrays/raw pointers with appropriate smart pointer/containers ; - Refactor shared state (shared by multiple DPD instances, currently dpd_gbl struct) into singleton(s). ; - **Note**: Memory tracking in its current form is not thread safe and relies on the client code properly locking calls to function that need to perform alloca",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1247:47,rewrite,rewrite,47,https://psicode.org,https://github.com/psi4/psi4/issues/1247,1,['rewrite'],['rewrite']
Modifiability,"We have DF-CCSD(T) analytic gradients, so we _have_ the densities. What I _think_ you mean is ""to have density fitted coupled cluster densities _on the wavefunction object_."" I haven't checked whether these are on the wavefunction or not, but I'd believe that they are not. I'll get that there as part of the DF gradient refactor. Further progress on that is blocked by the integral changes in #1721.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1952#issuecomment-656906496:321,refactor,refactor,321,https://psicode.org,https://github.com/psi4/psi4/issues/1952#issuecomment-656906496,1,['refactor'],['refactor']
Modifiability,"We have a problem resulting from this PR. There's three ways to `add_library` in CMake -- STATIC, SHARED, MODULE . SHARED is the usual linux `.so` for linking, while MODULE is the dl_open style of a Py module. Up until this merged PR we were doing SHARED. ### SHARED; * links `libpython.so` into psi4's `core.*.so` -- this is new in the revamped pb11 add_pybind11_module that calls [Python_add_library](https://gitlab.kitware.com/cmake/cmake/-/blob/master/Modules/FindPython/Support.cmake#L3306-3313); * sets `DT_SONAME` on the `core.*.so`. This shows up as `Library soname` below in `readelf -d` of core.*.so. *This is important* b/c w/o this set, the full path to `core.*.so` gets linked into consumers like plugins, rather than just the library name. [trouble](https://stackoverflow.com/questions/27261288/cmake-linking-shared-c-object-from-externalproject-produces-binaries-with-rel); * designed for ordinary library linking like how the plugins are using symbols from psi4. The https://github.com/psi4/psi4/blob/master/psi4/psi4Config.cmake.in#L141 does the linking of core.*.so to the plugins. ### MODULE; * does *not* link `libpython.so` into psi4; * does *not* set `DT_SONAME` on psi4. that's ok for the local plugins where the full path that's baked in is the same as the RPATH+SONAME resolved through `ld`, but this breaks down during the v2rdm conda build. I've been unable to force a `DT_SONAME` entry onto a `MODULE` library; * one can perhaps get away with it (no errors; current state of `master`), but it's [advised not to link to a MODULE](https://stackoverflow.com/a/4968940). ### printouts from SHARED; ```; >>> readelf -d stage/lib/psi4/core.cpython-39-x86_64-linux-gnu.so . Dynamic section at offset 0x21a4aa0 contains 40 entries:; Tag Type Name/Value; 0x0000000000000001 (NEEDED) Shared library: [libpython3.9.so.1.0]; 0x0000000000000001 (NEEDED) Shared library: [libgg.so.2]; 0x0000000000000001 (NEEDED) Shared library: [libxc.so.9]; 0x0000000000000001 (NEEDED) Shared library: ",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188:710,plugin,plugins,710,https://psicode.org,https://github.com/psi4/psi4/pull/2048#issuecomment-771213188,2,['plugin'],['plugins']
Modifiability,"We have not coded explicitly the spin-adapted triplet states arising from; the EOM-CC equations starting from a singlet ground state. However, you; might be able to obtain the desired states by changing your reference to; UHF and still selecting a multiplicity of 1. The Hartree-Fock reference; should still be the same singlet state as you get from the corresponding; RHF calculation, and the EOM-CC _should_ yield both singlets and triplets.; You'll be able to sort out which is which (and make sure that everything is; running correctly) by comparing the results to the corresponding RHF-EOM-CC; calculation. -TDC. ## . Prof. T. Daniel Crawford; crawdad@vt.edu. On Sun, Nov 20, 2016 at 8:51 PM, lucamontana notifications@github.com; wrote:. > one further question :; > ; > i like to calculate the eom-ccsd triplet states starting from the; > Hartree-Fock singlet ground state.; > However i do not manage to set up an input file for such calculation.; > ; > with multiplicity 3, PSI4 starts from a triplet ground state that i do not; > want.; > Any idea how to start from the HF singlet state but calculate triplet; > excited state energies in eom-CCSD?; > ; > —; > You are receiving this because you are subscribed to this thread.; > Reply to this email directly, view it on GitHub; > https://github.com/psi4/psi4/issues/523#issuecomment-261824508, or mute; > the thread; > https://github.com/notifications/unsubscribe-auth/ACtz7VgMGDHWFRa604RIVjYHaS0a3kseks5rAPk-gaJpZM4K3iYW; > .",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/523#issuecomment-261831203:38,adapt,adapted,38,https://psicode.org,https://github.com/psi4/psi4/issues/523#issuecomment-261831203,1,['adapt'],['adapted']
Modifiability,"We need the correlated procedure to run CASSCF and may adapt the code to use DF once the new Deriv code is available. In putting together this PR, my intention was to make very limited changes and only improve the functionality of the current code. Since I am not sure what plugins do, I just reproduced the old functionality as it was before. I'd be happy to delete some of the legacy code if we are certain it is not used.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614:55,adapt,adapt,55,https://psicode.org,https://github.com/psi4/psi4/pull/1756#issuecomment-557580614,2,"['adapt', 'plugin']","['adapt', 'plugins']"
Modifiability,"We tend to build with all Gnu compilers or all Intel compilers or maybe icpc/gfortran? Sometime, give the other combinations a spin to make sure our CMake config system can handle them. There's evidence (http://forum.psicode.org/t/gcc-and-fort-on-an-el-capitan-mac/165) that it can't. ; - [x] icpc & gfortran on linux; - [ ] g++ & ifort on linux; - [ ] icpc & gfortran on mac; - [ ] g++ & ifort on mac",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/297:155,config,config,155,https://psicode.org,https://github.com/psi4/psi4/issues/297,1,['config'],['config']
Modifiability,"We tried when we extended our build to py38 and py36 some time ago there were a couple of unforeseen problems with py38, so it's unfortunately not a simple thing of just amending the config. For the moment we have put it on hold, sorry. How pressing is it?",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565:17,extend,extended,17,https://psicode.org,https://github.com/psi4/psi4/pull/1848#issuecomment-598849565,2,"['config', 'extend']","['config', 'extended']"
Modifiability,We use the strategy devised by @loriab for external add ons. This commit provides the necessary Find\* and Config\* CMake script files. Other modifications take into account the new strategy.,MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/217:107,Config,Config,107,https://psicode.org,https://github.com/psi4/psi4/pull/217,1,['Config'],['Config']
Modifiability,"Wed, 29 Aug. You have until then to indicate (on the PR) that this will interrupt your development. If that happens, the PR can be closed and postponed to accommodate you. Unchallenged PRs will be merged over the week. Modules to be skipped include occ/dfocc/findif/optking/interface_dmrg because of outstanding PRs, imminent demise, or need to compare easily with upstream plugin. - [x] adc #1152; - [x] ambit_interface #1172 ; - [x] ccdensity -- delay to 29 Aug #1202; - [x] ccenergy -- delay to 29 Aug #1203; - [x] cceom #1204; - [x] cchbar #1205; - [x] cclambda -- delay to 29 Aug #1206; - [x] ccresponse #1207; - [x] cctransort #1208; - [x] cctriples -- ~delay to 29 Aug (wait for #1199) #1209~ #1252 ; - [x] dcft #1154; - [x] detci #1155; - [x] dfep2 #1157 ; - [x] dfmp2 #1159; - [x] dfocc -- mostly done in #797, touch-ups in #1392; - [x] dmrg -- turning off formatting so can diff with plugin in CheMPS2 repo #1392; - ~findif~; - [x] fisapt #1175; - [x] fnocc #1158; - [x] gdma_interface #1166; - [x] lib3index ~#1169 (wait for #1200)~ #1389; - [x] libciomr #1173; - [x] libcubeprop -- delay to 29 Aug (wait for #1138) #1210 ; - [x] libdiis #1167; - [x] libdisp #1168; - [x] libdpd -- ~delay to 29 Aug (wait for #1199) #1211~ #1251 ; - [x] libfilesystem #1174; - [x] libfock ~#1164 (wait for #1224 and for @dgasmith )~ #1397; - [x] libfunctional -- ~delay to 29 Aug #1195 (wait for @dgasmith)~ #1396; - [x] libiwl #1163 ; - [x] libmints -- delay to 29 Aug #1156; - [x] libmoinfo #1165; - [x] liboptions #1187; - [x] libplugin #1190; - [x] libpsi4util #1176; - [x] libpsio #1170; - [x] libpsipcm #1153; - [x] libqt #1186 ; - [x] libsapt_solver & sapt #1171 ; - [x] libscf_solver -- delay to 29 Aug #1194; - [x] libtrans #1162; - [x] mcscf #1189; - [x] mrcc #1161; - [x] occ #1391; - ~optking~; - [x] psimrcc #1191; - sapt (w/libsapt_solver); - [x] `psi4/src` #1192; - [x] `psi4/include` -- will probably need selective c-f disabling for headers #1193. replaced by #1223 ; - [ ] final catch-all",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/1144:1314,plugin,plugin,1314,https://psicode.org,https://github.com/psi4/psi4/issues/1144,1,['plugin'],['plugin']
Modifiability,"Welcome to psi4 and thanks for the PR. Could you add a regression test with your example? http://psicode.org/psi4manual/master/add_tests.html; E.g. a third `extern` version would do. If anything is unclear, please ask here or join us on slacks. edit: I forgot. Please rebase your fork to fix the CI. ---. I am wondering. In principle `mol.set_nuclear_charge(0,7.05)` should work to modify Z. However, the C molecule object doesn't get the changes only the python one. ```; molecule mol {; N 0. 0. 1.; N 0. 0. 0.; no_reorient; no_com; symmetry c1; 0 1; }. set basis 6-31G; set reference rhf. mol.set_nuclear_charge(0,7.05); print(mol.Z(0),mol.Z(1)); nn = mol.nuclear_repulsion_energy(); mol.update_geometry(); e, wfn = energy('scf',return_wfn=True); print(nn); print(wfn.variable('NUCLEAR REPULSION ENERGY')); ```",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/1993#issuecomment-682369777:770,variab,variable,770,https://psicode.org,https://github.com/psi4/psi4/pull/1993#issuecomment-682369777,1,['variab'],['variable']
Modifiability,"Well in that case: ; So far everything is going smoothly on my end, but I did notice a couple of inconsistencies in detecting python/complier versions and incorrectly using a different library. On one of our clusters using the module system I have loaded gcc-5.2.0 and Anaconda with python 2.7.10. (these modules define envars $ANACONDA_LIB and $GCC_LIB, which I will refer to below. They also modify the $LD_LIBRARY_PATH variable when they are loaded.) . If I set the python executable and don't do anything to `CMAKE_PREFIX_PATH` the executable is set up correctly but the `PYTHON_INCLUDE_DIR` and `PYTHON_LIBRARY` find the ones that live in the system paths `/usr/lib/python2.6.so` and `/usr/include/python2.6` which causes problems in the linking step with undefined references to some python stuff. . Also if I set the C/CXX compiler, but again don't do anything to the `CMAKE_PREFIX_PATH` I can build + link fine, but at runtime I will get errors like this:. ```; /usr/lib64/libstdc++.so.6: version ``GLIBCXX_X.X.XX' not found ; ```. Which seems to be that cmake is linking to the libstdc++ version for the system gcc which is 4.7.2, instead of the correct library version for the compiler I am using. . If I add `-DCMAKE_PREFIX_PATH=$GCC_LIB:$ANACONDA_LIB` to my cmake command it will fix both issues are corrected. The python library is detected as `$ANACONDA_LIB/python2.7.so` and I don't have any problems with linking. And there is no errors at runtime either. In both cases cmake seems to detect the versions correctly since it has the correct executable. . So when it comes time to document the new build system for users, it may be prudent to mention they should either use the `CMAKE_PREFIX_PATH` argument, or check that cmake has detected the correct library paths for the python/compiler they actually meant to use if they are working in a environment where multiple python/compilers installed. Most clusters will have some way of swapping these out with a system default installed gl",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/468#issuecomment-249621149:422,variab,variable,422,https://psicode.org,https://github.com/psi4/psi4/issues/468#issuecomment-249621149,1,['variab'],['variable']
Modifiability,"Well, https://github.com/dgasmith/psi4public/blob/wavefunction_pass/cmake/ConfigPCMSolver.cmake#L78 needs `lib` --> `share` for one thing. Can you do that, then tell me what your next error is? Both @dgasmith and I have been using pcmsolver from metapackage and so may have evaded a few issues.",MatchSource.ISSUE_COMMENT,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/pull/246#issuecomment-183823400:74,Config,ConfigPCMSolver,74,https://psicode.org,https://github.com/psi4/psi4/pull/246#issuecomment-183823400,1,['Config'],['ConfigPCMSolver']
Modifiability,"What is the proper way to specify the compiler in Boost ? I modified the user-config.jam file to include the following lines:. using intel : linux : /opt/cray/craype/2.2.1/bin/CC ; using mpi : : <find-shared-library>mpich ;. but then, the build fails and I get the following complaint:. error: at project-config.jam:12; error: intel-linux initialization: parameter 'version' inconsistent; error: an explicit value was specified in an earlier initialization; error: no value is specified now. Apparently this is because project-config.jam contains the following:. if ! intel-linux in [ feature.values <toolset> ]; {; using intel-linux ; # <= this is line 12; }. in my understanding, the above condition should make sure we are not trying to redefine intel-linux when it has been specified in user-config.jam, is that correct ?. @robertodr, do you know how I could solve this problem?",MatchSource.ISSUE,psi4,psi4,v1.9.1,https://github.com/psi4/psi4/issues/196:78,config,config,78,https://psicode.org,https://github.com/psi4/psi4/issues/196,4,['config'],['config']
